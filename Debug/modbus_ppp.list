
modbus_ppp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b0a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001640  0801b254  0801b254  0002b254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c894  0801c894  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  0801c894  0801c894  0002c894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c89c  0801c89c  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c89c  0801c89c  0002c89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c8a0  0801c8a0  0002c8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0801c8a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014228  20000228  0801cacc  00030228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014450  0801cacc  00034450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009ea44  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a3d5  00000000  00000000  000cec9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002820  00000000  00000000  000d9078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002470  00000000  00000000  000db898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b9fd  00000000  00000000  000ddd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0009dfb5  00000000  00000000  00119705  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117f43  00000000  00000000  001b76ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002cf5fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abcc  00000000  00000000  002cf678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000228 	.word	0x20000228
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801b23c 	.word	0x0801b23c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	0801b23c 	.word	0x0801b23c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <swapInt16>:
 * @param[in] value 16-bit value
 * @return 16-bit value with byte order swapped
 **/

uint16_t swapInt16(uint16_t value)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
   return SWAPINT16(value);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	ba5b      	rev16	r3, r3
 80005ae:	b29b      	uxth	r3, r3
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	061a      	lsls	r2, r3, #24
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80005d0:	431a      	orrs	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80005da:	431a      	orrs	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	0e1b      	lsrs	r3, r3, #24
 80005e0:	4313      	orrs	r3, r2
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <osCreateTask>:
 *   new task. If the function fails, the return value is NULL
 **/

OsTask *osCreateTask(const char_t *name, OsTaskCode taskCode,
   void *param, size_t stackSize, int_t priority)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b08a      	sub	sp, #40	; 0x28
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	603b      	str	r3, [r7, #0]
   threadDef.attr.stack_size = stackSize * sizeof(uint_t);
   threadDef.attr.priority = (osPriority_t) priority;
   threadDef.attr.tz_module = 0;
   threadDef.attr.reserved = 0;
#else
   threadDef.name = (char_t *) name;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	613b      	str	r3, [r7, #16]
   threadDef.pthread = (os_pthread) taskCode;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	617b      	str	r3, [r7, #20]
   threadDef.tpriority = (osPriority) priority;
 8000604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000606:	b21b      	sxth	r3, r3
 8000608:	833b      	strh	r3, [r7, #24]
   threadDef.instances = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
   threadDef.stacksize = stackSize;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	623b      	str	r3, [r7, #32]
#endif

   //Create a new thread
   threadId = osThreadCreate(&threadDef, param);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4618      	mov	r0, r3
 800061a:	f015 fe01 	bl	8016220 <osThreadCreate>
 800061e:	6278      	str	r0, [r7, #36]	; 0x24
   //Return a handle to the newly created thread
   return (OsTask *) threadId;
 8000620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000622:	4618      	mov	r0, r3
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
   //Delay the thread for the specified duration
   osDelay(delay);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f015 fe1b 	bl	801626e <osDelay>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
#if defined(osCMSIS_RTX) || defined(osCMSIS_FreeRTOS)
   //Not implemented
#else
   //Make sure the operating system is running
   if(osKernelRunning())
 8000644:	f015 fdd0 	bl	80161e8 <osKernelRunning>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <osSuspendAllTasks+0x12>
   {
      //Suspend all threads
      osThreadSuspendAll();
 800064e:	f016 f82f 	bl	80166b0 <osThreadSuspendAll>
   }
#endif
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
#if defined(osCMSIS_RTX) || defined(osCMSIS_FreeRTOS)
   //Not implemented
#else
   //Make sure the operating system is running
   if(osKernelRunning())
 800065a:	f015 fdc5 	bl	80161e8 <osKernelRunning>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <osResumeAllTasks+0x12>
   {
      //Resume all threads
      osThreadResumeAll();
 8000664:	f016 f82b 	bl	80166be <osThreadResumeAll>
   }
#endif
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <osCreateEvent>:
 * @return The function returns TRUE if the event object was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateEvent(OsEvent *event)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
   semaphoreDef.name = NULL;
   semaphoreDef.attr_bits = 0;
   semaphoreDef.cb_mem = NULL;
   semaphoreDef.cb_size = 0;
#else
   semaphoreDef.dummy = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
#endif

   //Create a binary semaphore object
   event->id = osSemaphoreCreate(&semaphoreDef, 1);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f015 fe9a 	bl	80163b8 <osSemaphoreCreate>
 8000684:	4602      	mov	r2, r0
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]

   //Check whether the returned semaphore ID is valid
   if(event->id != NULL)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d007      	beq.n	80006a2 <osCreateEvent+0x36>
   {
      //Force the specified event to the nonsignaled state
      osSemaphoreWait(event->id, 0);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f015 feab 	bl	80163f4 <osSemaphoreWait>
      //Event successfully created
      return TRUE;
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <osCreateEvent+0x38>
   }
   else
   {
      //Failed to create event object
      return FALSE;
 80006a2:	2300      	movs	r3, #0
   }
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <osDeleteEvent>:
 * @brief Delete an event object
 * @param[in] event Pointer to the event object
 **/

void osDeleteEvent(OsEvent *event)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
   //Make sure the semaphore ID is valid
   if(event->id != NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <osDeleteEvent+0x1a>
   {
      //Properly dispose the event object
      osSemaphoreDelete(event->id);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f015 ff1b 	bl	80164fc <osSemaphoreDelete>
   }
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <osSetEvent>:
 * @brief Set the specified event object to the signaled state
 * @param[in] event Pointer to the event object
 **/

void osSetEvent(OsEvent *event)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   //Set the specified event to the signaled state
   osSemaphoreRelease(event->id);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f015 fed8 	bl	8016490 <osSemaphoreRelease>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <osResetEvent>:
 * @brief Set the specified event object to the nonsignaled state
 * @param[in] event Pointer to the event object
 **/

void osResetEvent(OsEvent *event)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
#if defined(osCMSIS_RTX) && (osCMSIS_RTX < 0x50000)
   //Force the specified event to the nonsignaled state
   while(osSemaphoreWait(event->id, 0) > 0);
#else
   //Force the specified event to the nonsignaled state
   osSemaphoreWait(event->id, 0);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f015 fe7c 	bl	80163f4 <osSemaphoreWait>
#endif
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <osWaitForEvent>:
 * @return The function returns TRUE if the state of the specified object is
 *   signaled. FALSE is returned if the timeout interval elapsed
 **/

bool_t osWaitForEvent(OsEvent *event, systime_t timeout)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
   int32_t ret;

   //Wait until the specified event is in the signaled
   //state or the timeout interval elapses
   if(timeout == INFINITE_DELAY)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000714:	d108      	bne.n	8000728 <osWaitForEvent+0x24>
   {
      //Infinite timeout period
      ret = osSemaphoreWait(event->id, osWaitForever);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800071e:	4618      	mov	r0, r3
 8000720:	f015 fe68 	bl	80163f4 <osSemaphoreWait>
 8000724:	60f8      	str	r0, [r7, #12]
 8000726:	e006      	b.n	8000736 <osWaitForEvent+0x32>

         //Check timeout value
      } while(ret == 0 && timeout > 0);
#else
      //Wait for the specified time interval
      ret = osSemaphoreWait(event->id, timeout);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6839      	ldr	r1, [r7, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f015 fe60 	bl	80163f4 <osSemaphoreWait>
 8000734:	60f8      	str	r0, [r7, #12]
      return TRUE;
   else
      return FALSE;
#else
   //Check return value
   if(ret == osOK)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <osWaitForEvent+0x3c>
      return TRUE;
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <osWaitForEvent+0x3e>
   else
      return FALSE;
 8000740:	2300      	movs	r3, #0
#endif
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <osSetEventFromIsr>:
 * @return TRUE if setting the event to signaled state caused a task to unblock
 *   and the unblocked task has a priority higher than the currently running task
 **/

bool_t osSetEventFromIsr(OsEvent *event)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
   //Set the specified event to the signaled state
   osSemaphoreRelease(event->id);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f015 fe9a 	bl	8016490 <osSemaphoreRelease>

   //The return value is not relevant
   return FALSE;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   mutexDef.name = NULL;
   mutexDef.attr_bits = 0;
   mutexDef.cb_mem = NULL;
   mutexDef.cb_size = 0;
#else
   mutexDef.dummy = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
#endif

   //Create a mutex object
   mutex->id = osMutexCreate(&mutexDef);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4618      	mov	r0, r3
 8000778:	f015 fd8d 	bl	8016296 <osMutexCreate>
 800077c:	4602      	mov	r2, r0
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]

   //Check whether the returned mutex ID is valid
   if(mutex->id != NULL)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <osCreateMutex+0x28>
      return TRUE;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <osCreateMutex+0x2a>
   else
      return FALSE;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <osAcquireMutex>:
 * @brief Acquire ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osAcquireMutex(OsMutex *mutex)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
   //Obtain ownership of the mutex object
   osMutexWait(mutex->id, osWaitForever);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a8:	4618      	mov	r0, r3
 80007aa:	f015 fd81 	bl	80162b0 <osMutexWait>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <osReleaseMutex>:
 * @brief Release ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osReleaseMutex(OsMutex *mutex)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   //Release ownership of the mutex object
   osMutexRelease(mutex->id);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f015 fdc2 	bl	801634c <osMutexRelease>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <osGetSystemTime>:
 * @brief Retrieve system time
 * @return Number of milliseconds elapsed since the system was last started
 **/

systime_t osGetSystemTime(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
   time = osKernelGetTickCount();
#elif defined(osCMSIS_FreeRTOS)
   time = osKernelGetTickCount();
#else
   //Get current tick count
   time = osKernelSysTick();
 80007d6:	f015 fd13 	bl	8016200 <osKernelSysTick>
 80007da:	6078      	str	r0, [r7, #4]
#endif

   //Convert system ticks to milliseconds
   return OS_SYSTICKS_TO_MS(time);
 80007dc:	687b      	ldr	r3, [r7, #4]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <strSafeCopy>:
 * @param[in] destSize Size of the buffer allocated for the destination string
 * @return Error code
 **/

error_t strSafeCopy(char_t *dest, const char_t *src, size_t destSize)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
   size_t n;

   //Check parameters
   if(dest == NULL || src == NULL || destSize < 1)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d005      	beq.n	8000804 <strSafeCopy+0x1e>
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <strSafeCopy+0x1e>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <strSafeCopy+0x22>
      return ERROR_INVALID_PARAMETER;
 8000804:	2302      	movs	r3, #2
 8000806:	e015      	b.n	8000834 <strSafeCopy+0x4e>

   //Get the length of the source name
   n = strlen(src);
 8000808:	68b8      	ldr	r0, [r7, #8]
 800080a:	f7ff fcf1 	bl	80001f0 <strlen>
 800080e:	6178      	str	r0, [r7, #20]
   //Limit the number of characters to be copied
   n = MIN(n, destSize - 1);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	4293      	cmp	r3, r2
 8000818:	bf28      	it	cs
 800081a:	4613      	movcs	r3, r2
 800081c:	617b      	str	r3, [r7, #20]

   //Copy the string
   strncpy(dest, src, n);
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f01a f81a 	bl	801a85c <strncpy>
   //Properly terminate the string with a NULL character
   dest[n] = '\0';
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	4413      	add	r3, r2
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <md5Init>:
 * @brief Initialize MD5 message digest context
 * @param[in] context Pointer to the MD5 context to initialize
 **/

void md5Init(Md5Context *context)
{
 800083c:	b490      	push	{r4, r7}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x67452301;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a0d      	ldr	r2, [pc, #52]	; (800087c <md5Init+0x40>)
 8000848:	601a      	str	r2, [r3, #0]
   context->h[1] = 0xEFCDAB89;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <md5Init+0x44>)
 800084e:	605a      	str	r2, [r3, #4]
   context->h[2] = 0x98BADCFE;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <md5Init+0x48>)
 8000854:	609a      	str	r2, [r3, #8]
   context->h[3] = 0x10325476;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <md5Init+0x4c>)
 800085a:	60da      	str	r2, [r3, #12]

   //Number of bytes in the buffer
   context->size = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	651a      	str	r2, [r3, #80]	; 0x50
   //Total length of the message
   context->totalSize = 0;
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	f04f 0400 	mov.w	r4, #0
 800086c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bc90      	pop	{r4, r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	67452301 	.word	0x67452301
 8000880:	efcdab89 	.word	0xefcdab89
 8000884:	98badcfe 	.word	0x98badcfe
 8000888:	10325476 	.word	0x10325476

0800088c <md5Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void md5Update(Md5Context *context, const void *data, size_t length)
{
 800088c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 800089a:	e039      	b.n	8000910 <md5Update+0x84>
   {
      //The buffer can hold at most 64 bytes
      n = MIN(length, 64 - context->size);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008a0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4293      	cmp	r3, r2
 80008a8:	bf28      	it	cs
 80008aa:	4613      	movcs	r3, r2
 80008ac:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      cryptoMemcpy(context->buffer + context->size, data, n);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f103 0210 	add.w	r2, r3, #16
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008b8:	4413      	add	r3, r2
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	4618      	mov	r0, r3
 80008c0:	f019 fba8 	bl	801a014 <memcpy>

      //Update the MD5 context
      context->size += n;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	441a      	add	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	651a      	str	r2, [r3, #80]	; 0x50
      context->totalSize += n;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	469b      	mov	fp, r3
 80008da:	f04f 0c00 	mov.w	ip, #0
 80008de:	eb1b 0301 	adds.w	r3, fp, r1
 80008e2:	eb4c 0402 	adc.w	r4, ip, r2
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
      //Advance the data pointer
      data = (uint8_t *) data + n;
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	4413      	add	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 64)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000900:	2b40      	cmp	r3, #64	; 0x40
 8000902:	d105      	bne.n	8000910 <md5Update+0x84>
      {
         //Transform the 16-word block
         md5ProcessBlock(context);
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f000 f863 	bl	80009d0 <md5ProcessBlock>
         //Empty the buffer
         context->size = 0;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	2200      	movs	r2, #0
 800090e:	651a      	str	r2, [r3, #80]	; 0x50
   while(length > 0)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1c2      	bne.n	800089c <md5Update+0x10>
      }
   }
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08000920 <md5Final>:
 * @param[in] context Pointer to the MD5 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void md5Final(Md5Context *context, uint8_t *digest)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	f04f 0400 	mov.w	r4, #0
 8000938:	00d4      	lsls	r4, r2, #3
 800093a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800093e:	00cb      	lsls	r3, r1, #3
 8000940:	e9c7 3402 	strd	r3, r4, [r7, #8]

   //Pad the message so that its length is congruent to 56 modulo 64
   if(context->size < 56)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000948:	2b37      	cmp	r3, #55	; 0x37
 800094a:	d805      	bhi.n	8000958 <md5Final+0x38>
      paddingSize = 56 - context->size;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000950:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	e004      	b.n	8000962 <md5Final+0x42>
   else
      paddingSize = 64 + 56 - context->size;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800095c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000960:	613b      	str	r3, [r7, #16]

   //Append padding
   md5Update(context, padding, paddingSize);
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4919      	ldr	r1, [pc, #100]	; (80009cc <md5Final+0xac>)
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ff90 	bl	800088c <md5Update>

   //Append the length of the original message
   context->x[14] = htole32((uint32_t) totalSize);
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	649a      	str	r2, [r3, #72]	; 0x48
   context->x[15] = htole32((uint32_t) (totalSize >> 32));
 8000972:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	f04f 0400 	mov.w	r4, #0
 800097e:	0013      	movs	r3, r2
 8000980:	2400      	movs	r4, #0
 8000982:	461a      	mov	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	64da      	str	r2, [r3, #76]	; 0x4c

   //Calculate the message digest
   md5ProcessBlock(context);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f821 	bl	80009d0 <md5ProcessBlock>

   //Convert from host byte order to little-endian byte order
   for(i = 0; i < 4; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e00a      	b.n	80009aa <md5Final+0x8a>
   {
      context->h[i] = htole32(context->h[i]);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 4; i++)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d9f1      	bls.n	8000994 <md5Final+0x74>
   }

   //Copy the resulting digest
   if(digest != NULL)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d005      	beq.n	80009c2 <md5Final+0xa2>
      cryptoMemcpy(digest, context->digest, MD5_DIGEST_SIZE);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2210      	movs	r2, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	6838      	ldr	r0, [r7, #0]
 80009be:	f019 fb29 	bl	801a014 <memcpy>
}
 80009c2:	bf00      	nop
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	0801c3a8 	.word	0x0801c3a8

080009d0 <md5ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the MD5 context
 **/

void md5ProcessBlock(Md5Context *context)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	; 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Initialize the 4 working registers
   uint32_t a = context->h[0];
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	61bb      	str	r3, [r7, #24]
   uint32_t b = context->h[1];
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	617b      	str	r3, [r7, #20]
   uint32_t c = context->h[2];
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	613b      	str	r3, [r7, #16]
   uint32_t d = context->h[3];
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	60fb      	str	r3, [r7, #12]

   //Process message in 16-word blocks
   uint32_t *x = context->x;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3310      	adds	r3, #16
 80009f4:	60bb      	str	r3, [r7, #8]

   //Convert from little-endian byte order to host byte order
   for(i = 0; i < 16; i++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	e00c      	b.n	8000a16 <md5ProcessBlock+0x46>
   {
      x[i] = letoh32(x[i]);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	441a      	add	r2, r3
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	601a      	str	r2, [r3, #0]
   for(i = 0; i < 16; i++)
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	3301      	adds	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d9ef      	bls.n	80009fc <md5ProcessBlock+0x2c>
   }

   //Round 1
   FF(a, b, c, d, x[0],  7,  k[0]);
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	401a      	ands	r2, r3
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	43d9      	mvns	r1, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	400b      	ands	r3, r1
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	4aa7      	ldr	r2, [pc, #668]	; (8000cd0 <md5ProcessBlock+0x300>)
 8000a34:	4413      	add	r3, r2
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4413      	add	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	4413      	add	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[1],  12, k[1]);
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	43d9      	mvns	r1, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	400b      	ands	r3, r1
 8000a56:	431a      	orrs	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a9c      	ldr	r2, [pc, #624]	; (8000cd4 <md5ProcessBlock+0x304>)
 8000a62:	4413      	add	r3, r2
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[2],  17, k[2]);
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	400b      	ands	r3, r1
 8000a84:	431a      	orrs	r2, r3
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	3308      	adds	r3, #8
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a92      	ldr	r2, [pc, #584]	; (8000cd8 <md5ProcessBlock+0x308>)
 8000a90:	4413      	add	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4413      	add	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
   FF(b, c, d, a, x[3],  22, k[3]);
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	43d9      	mvns	r1, r3
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	400b      	ands	r3, r1
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	330c      	adds	r3, #12
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a87      	ldr	r2, [pc, #540]	; (8000cdc <md5ProcessBlock+0x30c>)
 8000abe:	4413      	add	r3, r2
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4413      	add	r3, r2
 8000ad0:	617b      	str	r3, [r7, #20]
   FF(a, b, c, d, x[4],  7,  k[4]);
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	400b      	ands	r3, r1
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3310      	adds	r3, #16
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a7d      	ldr	r2, [pc, #500]	; (8000ce0 <md5ProcessBlock+0x310>)
 8000aec:	4413      	add	r3, r2
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4413      	add	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	4413      	add	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[5],  12, k[5]);
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	401a      	ands	r2, r3
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	43d9      	mvns	r1, r3
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	400b      	ands	r3, r1
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	3314      	adds	r3, #20
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a72      	ldr	r2, [pc, #456]	; (8000ce4 <md5ProcessBlock+0x314>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[6],  17, k[6]);
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	401a      	ands	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3318      	adds	r3, #24
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a68      	ldr	r2, [pc, #416]	; (8000ce8 <md5ProcessBlock+0x318>)
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
   FF(b, c, d, a, x[7],  22, k[7]);
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	401a      	ands	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	43d9      	mvns	r1, r3
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	400b      	ands	r3, r1
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	331c      	adds	r3, #28
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a5d      	ldr	r2, [pc, #372]	; (8000cec <md5ProcessBlock+0x31c>)
 8000b76:	4413      	add	r3, r2
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4413      	add	r3, r2
 8000b88:	617b      	str	r3, [r7, #20]
   FF(a, b, c, d, x[8],  7,  k[8]);
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	400b      	ands	r3, r1
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	3320      	adds	r3, #32
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a53      	ldr	r2, [pc, #332]	; (8000cf0 <md5ProcessBlock+0x320>)
 8000ba4:	4413      	add	r3, r2
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4413      	add	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[9],  12, k[9]);
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	43d9      	mvns	r1, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	400b      	ands	r3, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3324      	adds	r3, #36	; 0x24
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <md5ProcessBlock+0x324>)
 8000bd2:	4413      	add	r3, r2
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[10], 17, k[10]);
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	401a      	ands	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3328      	adds	r3, #40	; 0x28
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <md5ProcessBlock+0x328>)
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4413      	add	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	4413      	add	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
   FF(b, c, d, a, x[11], 22, k[11]);
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	401a      	ands	r2, r3
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	43d9      	mvns	r1, r3
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	400b      	ands	r3, r1
 8000c22:	431a      	orrs	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	332c      	adds	r3, #44	; 0x2c
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a33      	ldr	r2, [pc, #204]	; (8000cfc <md5ProcessBlock+0x32c>)
 8000c2e:	4413      	add	r3, r2
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	4413      	add	r3, r2
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4413      	add	r3, r2
 8000c40:	617b      	str	r3, [r7, #20]
   FF(a, b, c, d, x[12], 7,  k[12]);
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	400b      	ands	r3, r1
 8000c50:	431a      	orrs	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3330      	adds	r3, #48	; 0x30
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <md5ProcessBlock+0x330>)
 8000c5c:	4413      	add	r3, r2
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4413      	add	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[13], 12, k[13]);
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	401a      	ands	r2, r3
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	43d9      	mvns	r1, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	400b      	ands	r3, r1
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	3334      	adds	r3, #52	; 0x34
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <md5ProcessBlock+0x334>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[14], 17, k[14]);
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	400b      	ands	r3, r1
 8000cac:	431a      	orrs	r2, r3
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3338      	adds	r3, #56	; 0x38
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <md5ProcessBlock+0x338>)
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	e01e      	b.n	8000d0c <md5ProcessBlock+0x33c>
 8000cce:	bf00      	nop
 8000cd0:	d76aa478 	.word	0xd76aa478
 8000cd4:	e8c7b756 	.word	0xe8c7b756
 8000cd8:	242070db 	.word	0x242070db
 8000cdc:	c1bdceee 	.word	0xc1bdceee
 8000ce0:	f57c0faf 	.word	0xf57c0faf
 8000ce4:	4787c62a 	.word	0x4787c62a
 8000ce8:	a8304613 	.word	0xa8304613
 8000cec:	fd469501 	.word	0xfd469501
 8000cf0:	698098d8 	.word	0x698098d8
 8000cf4:	8b44f7af 	.word	0x8b44f7af
 8000cf8:	ffff5bb1 	.word	0xffff5bb1
 8000cfc:	895cd7be 	.word	0x895cd7be
 8000d00:	6b901122 	.word	0x6b901122
 8000d04:	fd987193 	.word	0xfd987193
 8000d08:	a679438e 	.word	0xa679438e
   FF(b, c, d, a, x[15], 22, k[15]);
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	401a      	ands	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	43d9      	mvns	r1, r3
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	400b      	ands	r3, r1
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	333c      	adds	r3, #60	; 0x3c
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4aa6      	ldr	r2, [pc, #664]	; (8000fc0 <md5ProcessBlock+0x5f0>)
 8000d26:	4413      	add	r3, r2
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4413      	add	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]

   //Round 2
   GG(a, b, c, d, x[1],  5,  k[16]);
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	400b      	ands	r3, r1
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a9c      	ldr	r2, [pc, #624]	; (8000fc4 <md5ProcessBlock+0x5f4>)
 8000d54:	4413      	add	r3, r2
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4413      	add	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4413      	add	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[6],  9,  k[17]);
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	43d9      	mvns	r1, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	400b      	ands	r3, r1
 8000d76:	431a      	orrs	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3318      	adds	r3, #24
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a91      	ldr	r2, [pc, #580]	; (8000fc8 <md5ProcessBlock+0x5f8>)
 8000d82:	4413      	add	r3, r2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[11], 14, k[18]);
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	400b      	ands	r3, r1
 8000da4:	431a      	orrs	r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	332c      	adds	r3, #44	; 0x2c
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a87      	ldr	r2, [pc, #540]	; (8000fcc <md5ProcessBlock+0x5fc>)
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4413      	add	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[0],  20, k[19]);
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	401a      	ands	r2, r3
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	43d9      	mvns	r1, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a7d      	ldr	r2, [pc, #500]	; (8000fd0 <md5ProcessBlock+0x600>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4413      	add	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4413      	add	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
   GG(a, b, c, d, x[5],  5,  k[20]);
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	401a      	ands	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	43d9      	mvns	r1, r3
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	400b      	ands	r3, r1
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	3314      	adds	r3, #20
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a72      	ldr	r2, [pc, #456]	; (8000fd4 <md5ProcessBlock+0x604>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4413      	add	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[10], 9,  k[21]);
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	401a      	ands	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	400b      	ands	r3, r1
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3328      	adds	r3, #40	; 0x28
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a68      	ldr	r2, [pc, #416]	; (8000fd8 <md5ProcessBlock+0x608>)
 8000e38:	4413      	add	r3, r2
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4413      	add	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[15], 14, k[22]);
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	401a      	ands	r2, r3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	43d9      	mvns	r1, r3
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	400b      	ands	r3, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	333c      	adds	r3, #60	; 0x3c
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a5d      	ldr	r2, [pc, #372]	; (8000fdc <md5ProcessBlock+0x60c>)
 8000e66:	4413      	add	r3, r2
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[4],  20, k[23]);
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	400b      	ands	r3, r1
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3310      	adds	r3, #16
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a53      	ldr	r2, [pc, #332]	; (8000fe0 <md5ProcessBlock+0x610>)
 8000e94:	4413      	add	r3, r2
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4413      	add	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
   GG(a, b, c, d, x[9],  5,  k[24]);
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	401a      	ands	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43d9      	mvns	r1, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	3324      	adds	r3, #36	; 0x24
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <md5ProcessBlock+0x614>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[14], 9,  k[25]);
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	401a      	ands	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	3338      	adds	r3, #56	; 0x38
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a3e      	ldr	r2, [pc, #248]	; (8000fe8 <md5ProcessBlock+0x618>)
 8000ef0:	4413      	add	r3, r2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4413      	add	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[3],  14, k[26]);
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	401a      	ands	r2, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	43d9      	mvns	r1, r3
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	400b      	ands	r3, r1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	330c      	adds	r3, #12
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a33      	ldr	r2, [pc, #204]	; (8000fec <md5ProcessBlock+0x61c>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4413      	add	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[8],  20, k[27]);
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	401a      	ands	r2, r3
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	400b      	ands	r3, r1
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3320      	adds	r3, #32
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <md5ProcessBlock+0x620>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4413      	add	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
   GG(a, b, c, d, x[13], 5,  k[28]);
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	401a      	ands	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43d9      	mvns	r1, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3334      	adds	r3, #52	; 0x34
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <md5ProcessBlock+0x624>)
 8000f7a:	4413      	add	r3, r2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4413      	add	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[2],  9,  k[29]);
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	401a      	ands	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	3308      	adds	r3, #8
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <md5ProcessBlock+0x628>)
 8000fa8:	4413      	add	r3, r2
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4413      	add	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[7],  14, k[30]);
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	e01d      	b.n	8000ffc <md5ProcessBlock+0x62c>
 8000fc0:	49b40821 	.word	0x49b40821
 8000fc4:	f61e2562 	.word	0xf61e2562
 8000fc8:	c040b340 	.word	0xc040b340
 8000fcc:	265e5a51 	.word	0x265e5a51
 8000fd0:	e9b6c7aa 	.word	0xe9b6c7aa
 8000fd4:	d62f105d 	.word	0xd62f105d
 8000fd8:	02441453 	.word	0x02441453
 8000fdc:	d8a1e681 	.word	0xd8a1e681
 8000fe0:	e7d3fbc8 	.word	0xe7d3fbc8
 8000fe4:	21e1cde6 	.word	0x21e1cde6
 8000fe8:	c33707d6 	.word	0xc33707d6
 8000fec:	f4d50d87 	.word	0xf4d50d87
 8000ff0:	455a14ed 	.word	0x455a14ed
 8000ff4:	a9e3e905 	.word	0xa9e3e905
 8000ff8:	fcefa3f8 	.word	0xfcefa3f8
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	43d9      	mvns	r1, r3
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	400b      	ands	r3, r1
 8001008:	431a      	orrs	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	331c      	adds	r3, #28
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4413      	add	r3, r2
 8001012:	4aa4      	ldr	r2, [pc, #656]	; (80012a4 <md5ProcessBlock+0x8d4>)
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4413      	add	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[12], 20, k[31]);
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	401a      	ands	r2, r3
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43d9      	mvns	r1, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	400b      	ands	r3, r1
 8001036:	431a      	orrs	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3330      	adds	r3, #48	; 0x30
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a99      	ldr	r2, [pc, #612]	; (80012a8 <md5ProcessBlock+0x8d8>)
 8001042:	4413      	add	r3, r2
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	ea4f 3333 	mov.w	r3, r3, ror #12
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]

   //Round 3
   HH(a, b, c, d, x[5],  4,  k[32]);
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	405a      	eors	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	405a      	eors	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3314      	adds	r3, #20
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a90      	ldr	r2, [pc, #576]	; (80012ac <md5ProcessBlock+0x8dc>)
 800106a:	4413      	add	r3, r2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4413      	add	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	ea4f 7333 	mov.w	r3, r3, ror #28
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4413      	add	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[8],  11, k[33]);
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	405a      	eors	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	405a      	eors	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3320      	adds	r3, #32
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a87      	ldr	r2, [pc, #540]	; (80012b0 <md5ProcessBlock+0x8e0>)
 8001092:	4413      	add	r3, r2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	ea4f 5373 	mov.w	r3, r3, ror #21
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[11], 16, k[34]);
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	405a      	eors	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	405a      	eors	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	332c      	adds	r3, #44	; 0x2c
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a7e      	ldr	r2, [pc, #504]	; (80012b4 <md5ProcessBlock+0x8e4>)
 80010ba:	4413      	add	r3, r2
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4413      	add	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[14], 23, k[35]);
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	405a      	eors	r2, r3
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	405a      	eors	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	3338      	adds	r3, #56	; 0x38
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a75      	ldr	r2, [pc, #468]	; (80012b8 <md5ProcessBlock+0x8e8>)
 80010e2:	4413      	add	r3, r2
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4413      	add	r3, r2
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	ea4f 2373 	mov.w	r3, r3, ror #9
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4413      	add	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]
   HH(a, b, c, d, x[1],  4,  k[36]);
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	405a      	eors	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	405a      	eors	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a6c      	ldr	r2, [pc, #432]	; (80012bc <md5ProcessBlock+0x8ec>)
 800110a:	4413      	add	r3, r2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4413      	add	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	ea4f 7333 	mov.w	r3, r3, ror #28
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	4413      	add	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[4],  11, k[37]);
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	405a      	eors	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	405a      	eors	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3310      	adds	r3, #16
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a63      	ldr	r2, [pc, #396]	; (80012c0 <md5ProcessBlock+0x8f0>)
 8001132:	4413      	add	r3, r2
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	ea4f 5373 	mov.w	r3, r3, ror #21
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[7],  16, k[38]);
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	405a      	eors	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	405a      	eors	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	331c      	adds	r3, #28
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a5a      	ldr	r2, [pc, #360]	; (80012c4 <md5ProcessBlock+0x8f4>)
 800115a:	4413      	add	r3, r2
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4413      	add	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[10], 23, k[39]);
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	405a      	eors	r2, r3
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	405a      	eors	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3328      	adds	r3, #40	; 0x28
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <md5ProcessBlock+0x8f8>)
 8001182:	4413      	add	r3, r2
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4413      	add	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	ea4f 2373 	mov.w	r3, r3, ror #9
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4413      	add	r3, r2
 8001194:	617b      	str	r3, [r7, #20]
   HH(a, b, c, d, x[13], 4,  k[40]);
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	405a      	eors	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	405a      	eors	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	3334      	adds	r3, #52	; 0x34
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a48      	ldr	r2, [pc, #288]	; (80012cc <md5ProcessBlock+0x8fc>)
 80011aa:	4413      	add	r3, r2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4413      	add	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	ea4f 7333 	mov.w	r3, r3, ror #28
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	4413      	add	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[0],  11, k[41]);
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	405a      	eors	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	405a      	eors	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a40      	ldr	r2, [pc, #256]	; (80012d0 <md5ProcessBlock+0x900>)
 80011d0:	4413      	add	r3, r2
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	ea4f 5373 	mov.w	r3, r3, ror #21
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4413      	add	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[3],  16, k[42]);
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	405a      	eors	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	405a      	eors	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	330c      	adds	r3, #12
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a37      	ldr	r2, [pc, #220]	; (80012d4 <md5ProcessBlock+0x904>)
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4413      	add	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[6],  23, k[43]);
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	405a      	eors	r2, r3
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	405a      	eors	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3318      	adds	r3, #24
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4413      	add	r3, r2
 800121e:	4a2e      	ldr	r2, [pc, #184]	; (80012d8 <md5ProcessBlock+0x908>)
 8001220:	4413      	add	r3, r2
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4413      	add	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	ea4f 2373 	mov.w	r3, r3, ror #9
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4413      	add	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
   HH(a, b, c, d, x[9],  4,  k[44]);
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	405a      	eors	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	405a      	eors	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3324      	adds	r3, #36	; 0x24
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4413      	add	r3, r2
 8001246:	4a25      	ldr	r2, [pc, #148]	; (80012dc <md5ProcessBlock+0x90c>)
 8001248:	4413      	add	r3, r2
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4413      	add	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	ea4f 7333 	mov.w	r3, r3, ror #28
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4413      	add	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[12], 11, k[45]);
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	405a      	eors	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	405a      	eors	r2, r3
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3330      	adds	r3, #48	; 0x30
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4413      	add	r3, r2
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <md5ProcessBlock+0x910>)
 8001270:	4413      	add	r3, r2
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	ea4f 5373 	mov.w	r3, r3, ror #21
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[15], 16, k[46]);
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	405a      	eors	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	405a      	eors	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	333c      	adds	r3, #60	; 0x3c
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4413      	add	r3, r2
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <md5ProcessBlock+0x914>)
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4413      	add	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	e022      	b.n	80012e8 <md5ProcessBlock+0x918>
 80012a2:	bf00      	nop
 80012a4:	676f02d9 	.word	0x676f02d9
 80012a8:	8d2a4c8a 	.word	0x8d2a4c8a
 80012ac:	fffa3942 	.word	0xfffa3942
 80012b0:	8771f681 	.word	0x8771f681
 80012b4:	6d9d6122 	.word	0x6d9d6122
 80012b8:	fde5380c 	.word	0xfde5380c
 80012bc:	a4beea44 	.word	0xa4beea44
 80012c0:	4bdecfa9 	.word	0x4bdecfa9
 80012c4:	f6bb4b60 	.word	0xf6bb4b60
 80012c8:	bebfbc70 	.word	0xbebfbc70
 80012cc:	289b7ec6 	.word	0x289b7ec6
 80012d0:	eaa127fa 	.word	0xeaa127fa
 80012d4:	d4ef3085 	.word	0xd4ef3085
 80012d8:	04881d05 	.word	0x04881d05
 80012dc:	d9d4d039 	.word	0xd9d4d039
 80012e0:	e6db99e5 	.word	0xe6db99e5
 80012e4:	1fa27cf8 	.word	0x1fa27cf8
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	ea4f 4333 	mov.w	r3, r3, ror #16
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[2],  23, k[47]);
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	405a      	eors	r2, r3
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	405a      	eors	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3308      	adds	r3, #8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4413      	add	r3, r2
 8001306:	4aa7      	ldr	r2, [pc, #668]	; (80015a4 <md5ProcessBlock+0xbd4>)
 8001308:	4413      	add	r3, r2
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4413      	add	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	ea4f 2373 	mov.w	r3, r3, ror #9
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]

   //Round 4
   II(a, b, c, d, x[0],  6,  k[48]);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43da      	mvns	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	431a      	orrs	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	405a      	eors	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4413      	add	r3, r2
 800132e:	4a9e      	ldr	r2, [pc, #632]	; (80015a8 <md5ProcessBlock+0xbd8>)
 8001330:	4413      	add	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4413      	add	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[7],  10, k[49]);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43da      	mvns	r2, r3
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	431a      	orrs	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	405a      	eors	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	331c      	adds	r3, #28
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a94      	ldr	r2, [pc, #592]	; (80015ac <md5ProcessBlock+0xbdc>)
 800135a:	4413      	add	r3, r2
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[14], 15, k[50]);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	43da      	mvns	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	431a      	orrs	r2, r3
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	405a      	eors	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3338      	adds	r3, #56	; 0x38
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4413      	add	r3, r2
 8001382:	4a8b      	ldr	r2, [pc, #556]	; (80015b0 <md5ProcessBlock+0xbe0>)
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4413      	add	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	ea4f 4373 	mov.w	r3, r3, ror #17
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[5],  21, k[51]);
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	431a      	orrs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	405a      	eors	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3314      	adds	r3, #20
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a81      	ldr	r2, [pc, #516]	; (80015b4 <md5ProcessBlock+0xbe4>)
 80013ae:	4413      	add	r3, r2
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4413      	add	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]
   II(a, b, c, d, x[12], 6,  k[52]);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43da      	mvns	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	405a      	eors	r2, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3330      	adds	r3, #48	; 0x30
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a78      	ldr	r2, [pc, #480]	; (80015b8 <md5ProcessBlock+0xbe8>)
 80013d8:	4413      	add	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4413      	add	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	ea4f 63b3 	mov.w	r3, r3, ror #26
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4413      	add	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[3],  10, k[53]);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43da      	mvns	r2, r3
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	405a      	eors	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	330c      	adds	r3, #12
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <md5ProcessBlock+0xbec>)
 8001402:	4413      	add	r3, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[10], 15, k[54]);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	43da      	mvns	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	431a      	orrs	r2, r3
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	405a      	eors	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3328      	adds	r3, #40	; 0x28
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	4a65      	ldr	r2, [pc, #404]	; (80015c0 <md5ProcessBlock+0xbf0>)
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4413      	add	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	ea4f 4373 	mov.w	r3, r3, ror #17
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[1],  21, k[55]);
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	431a      	orrs	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	405a      	eors	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3304      	adds	r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a5b      	ldr	r2, [pc, #364]	; (80015c4 <md5ProcessBlock+0xbf4>)
 8001456:	4413      	add	r3, r2
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4413      	add	r3, r2
 8001468:	617b      	str	r3, [r7, #20]
   II(a, b, c, d, x[8],  6,  k[56]);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43da      	mvns	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	431a      	orrs	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	405a      	eors	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3320      	adds	r3, #32
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4413      	add	r3, r2
 800147e:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <md5ProcessBlock+0xbf8>)
 8001480:	4413      	add	r3, r2
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4413      	add	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4413      	add	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[15], 10, k[57]);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43da      	mvns	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	431a      	orrs	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	405a      	eors	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	333c      	adds	r3, #60	; 0x3c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a48      	ldr	r2, [pc, #288]	; (80015cc <md5ProcessBlock+0xbfc>)
 80014aa:	4413      	add	r3, r2
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[6],  15, k[58]);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	43da      	mvns	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	405a      	eors	r2, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3318      	adds	r3, #24
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a3f      	ldr	r2, [pc, #252]	; (80015d0 <md5ProcessBlock+0xc00>)
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4413      	add	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	ea4f 4373 	mov.w	r3, r3, ror #17
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[13], 21, k[59]);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	405a      	eors	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3334      	adds	r3, #52	; 0x34
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a35      	ldr	r2, [pc, #212]	; (80015d4 <md5ProcessBlock+0xc04>)
 80014fe:	4413      	add	r3, r2
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4413      	add	r3, r2
 8001510:	617b      	str	r3, [r7, #20]
   II(a, b, c, d, x[4],  6,  k[60]);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	431a      	orrs	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	405a      	eors	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3310      	adds	r3, #16
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4413      	add	r3, r2
 8001526:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <md5ProcessBlock+0xc08>)
 8001528:	4413      	add	r3, r2
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4413      	add	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4413      	add	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[11], 10, k[61]);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43da      	mvns	r2, r3
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	431a      	orrs	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	405a      	eors	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	332c      	adds	r3, #44	; 0x2c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <md5ProcessBlock+0xc0c>)
 8001552:	4413      	add	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[2],  15, k[62]);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	43da      	mvns	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	431a      	orrs	r2, r3
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	405a      	eors	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3308      	adds	r3, #8
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4413      	add	r3, r2
 800157a:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <md5ProcessBlock+0xc10>)
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4413      	add	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	ea4f 4373 	mov.w	r3, r3, ror #17
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4413      	add	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[9],  21, k[63]);
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	43da      	mvns	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	431a      	orrs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	405a      	eors	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3324      	adds	r3, #36	; 0x24
 80015a0:	e020      	b.n	80015e4 <md5ProcessBlock+0xc14>
 80015a2:	bf00      	nop
 80015a4:	c4ac5665 	.word	0xc4ac5665
 80015a8:	f4292244 	.word	0xf4292244
 80015ac:	432aff97 	.word	0x432aff97
 80015b0:	ab9423a7 	.word	0xab9423a7
 80015b4:	fc93a039 	.word	0xfc93a039
 80015b8:	655b59c3 	.word	0x655b59c3
 80015bc:	8f0ccc92 	.word	0x8f0ccc92
 80015c0:	ffeff47d 	.word	0xffeff47d
 80015c4:	85845dd1 	.word	0x85845dd1
 80015c8:	6fa87e4f 	.word	0x6fa87e4f
 80015cc:	fe2ce6e0 	.word	0xfe2ce6e0
 80015d0:	a3014314 	.word	0xa3014314
 80015d4:	4e0811a1 	.word	0x4e0811a1
 80015d8:	f7537e82 	.word	0xf7537e82
 80015dc:	bd3af235 	.word	0xbd3af235
 80015e0:	2ad7d2bb 	.word	0x2ad7d2bb
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <md5ProcessBlock+0xc6c>)
 80015ea:	4413      	add	r3, r2
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4413      	add	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

   //Update the hash value
   context->h[0] += a;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	441a      	add	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
   context->h[1] += b;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	441a      	add	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	605a      	str	r2, [r3, #4]
   context->h[2] += c;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	441a      	add	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	609a      	str	r2, [r3, #8]
   context->h[3] += d;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	441a      	add	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60da      	str	r2, [r3, #12]
}
 800162e:	bf00      	nop
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	eb86d391 	.word	0xeb86d391

08001640 <ipSendDatagram>:
 * @return Error code
 **/

error_t ipSendDatagram(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, uint_t flags)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d10b      	bne.n	800166e <ipSendDatagram+0x2e>
   {
      //Form an IPv4 packet and send it
      error = ipv4SendDatagram(interface, &pseudoHeader->ipv4Data,
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1d19      	adds	r1, r3, #4
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f006 fca1 	bl	8007faa <ipv4SendDatagram>
 8001668:	4603      	mov	r3, r0
 800166a:	82fb      	strh	r3, [r7, #22]
 800166c:	e001      	b.n	8001672 <ipSendDatagram+0x32>
   else
#endif
   //Destination address is invalid
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 800166e:	23e4      	movs	r3, #228	; 0xe4
 8001670:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8001672:	8afb      	ldrh	r3, [r7, #22]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <ipSelectSourceAddr>:
 * @return Error code
 **/

error_t ipSelectSourceAddr(NetInterface **interface,
   const IpAddr *destAddr, IpAddr *srcAddr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //The destination address is an IPv4 address?
   if(destAddr->length == sizeof(Ipv4Addr))
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d10d      	bne.n	80016ac <ipSelectSourceAddr+0x30>
   {
      //An IPv4 address is expected
      srcAddr->length = sizeof(Ipv4Addr);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2204      	movs	r2, #4
 8001694:	601a      	str	r2, [r3, #0]

      //Get the most appropriate source address to use
      error = ipv4SelectSourceAddr(interface, destAddr->ipv4Addr,
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	6859      	ldr	r1, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3304      	adds	r3, #4
 800169e:	461a      	mov	r2, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f007 fa03 	bl	8008aac <ipv4SelectSourceAddr>
 80016a6:	4603      	mov	r3, r0
 80016a8:	82fb      	strh	r3, [r7, #22]
 80016aa:	e001      	b.n	80016b0 <ipSelectSourceAddr+0x34>
   else
#endif
   //The destination address is not valid?
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 80016ac:	23e4      	movs	r3, #228	; 0xe4
 80016ae:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80016b0:	8afb      	ldrh	r3, [r7, #22]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <ipIsUnspecifiedAddr>:
 * @param[in] ipAddr IP address
 * @return TRUE if the IP address is unspecified, else FALSE
 **/

bool_t ipIsUnspecifiedAddr(const IpAddr *ipAddr)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d109      	bne.n	80016de <ipIsUnspecifiedAddr+0x24>
   {
      //Compare IPv4 address
      if(ipAddr->ipv4Addr == IPV4_UNSPECIFIED_ADDR)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <ipIsUnspecifiedAddr+0x1e>
      {
         result = TRUE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	e004      	b.n	80016e2 <ipIsUnspecifiedAddr+0x28>
      }
      else
      {
         result = FALSE;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e001      	b.n	80016e2 <ipIsUnspecifiedAddr+0x28>
   }
   else
#endif
   //Invalid IP address?
   {
      result = FALSE;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
   }

   //Return TRUE if the IP address is unspecified, else FALSE
   return result;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <ipCalcChecksum>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksum(const void *data, size_t length)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
   uint32_t temp;
   uint32_t checksum;
   const uint8_t *p;

   //Checksum preset value
   checksum = 0x0000;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]

   //Point to the data over which to calculate the IP checksum
   p = (const uint8_t *) data;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	613b      	str	r3, [r7, #16]

   //Pointer not aligned on a 16-bit boundary?
   if(((uint_t) p & 1) != 0)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00e      	beq.n	800172a <ipCalcChecksum+0x3a>
   {
      if(length >= 1)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <ipCalcChecksum+0x3a>
#ifdef _CPU_BIG_ENDIAN
         //Update checksum value
         checksum += (uint32_t) *p;
#else
         //Update checksum value
         checksum += (uint32_t) *p << 8;
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4413      	add	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
#endif
         //Restore the alignment on 16-bit boundaries
         p++;
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	3301      	adds	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length--;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	3b01      	subs	r3, #1
 8001728:	603b      	str	r3, [r7, #0]
      }
   }

   //Pointer not aligned on a 32-bit boundary?
   if(((uint_t) p & 2) != 0)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d024      	beq.n	800177e <ipCalcChecksum+0x8e>
   {
      if(length >= 2)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d921      	bls.n	800177e <ipCalcChecksum+0x8e>
      {
         //Update checksum value
         checksum += (uint32_t) *((uint16_t *) p);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4413      	add	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

         //Restore the alignment on 32-bit boundaries
         p += 2;
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	3302      	adds	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length -= 2;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3b02      	subs	r3, #2
 8001750:	603b      	str	r3, [r7, #0]
      }
   }

   //Process the data 4 bytes at a time
   while(length >= 4)
 8001752:	e014      	b.n	800177e <ipCalcChecksum+0x8e>
   {
      //Update checksum value
      temp = checksum + *((uint32_t *) p);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]

      //Add carry bit, if any
      if(temp < checksum)
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	429a      	cmp	r2, r3
 8001764:	d203      	bcs.n	800176e <ipCalcChecksum+0x7e>
      {
         checksum = temp + 1;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e001      	b.n	8001772 <ipCalcChecksum+0x82>
      }
      else
      {
         checksum = temp;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	617b      	str	r3, [r7, #20]
      }

      //Point to the next 32-bit word
      p += 4;
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	3304      	adds	r3, #4
 8001776:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 4;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	3b04      	subs	r3, #4
 800177c:	603b      	str	r3, [r7, #0]
   while(length >= 4)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d8e7      	bhi.n	8001754 <ipCalcChecksum+0x64>
   }

   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	b29a      	uxth	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	4413      	add	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

   //Add left-over 16-bit word, if any
   if(length >= 2)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d90b      	bls.n	80017ae <ipCalcChecksum+0xbe>
   {
      //Update checksum value
      checksum += (uint32_t) *((uint16_t *) p);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4413      	add	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]

      //Point to the next byte
      p += 2;
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	3302      	adds	r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 2;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	3b02      	subs	r3, #2
 80017ac:	603b      	str	r3, [r7, #0]
   }

   //Add left-over byte, if any
   if(length >= 1)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <ipCalcChecksum+0xd0>
#ifdef _CPU_BIG_ENDIAN
      //Update checksum value
      checksum += (uint32_t) *p << 8;
#else
      //Update checksum value
      checksum += (uint32_t) *p;
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	4413      	add	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
#endif
   }

   //Fold 32-bit sum to 16 bits (first pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	0c1b      	lsrs	r3, r3, #16
 80017c8:	4413      	add	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits (second pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	4413      	add	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]

   //Restore checksum endianness
   if(((uint_t) data & 1) != 0)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <ipCalcChecksum+0x100>
   {
      //Swap checksum value
      checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	0a1a      	lsrs	r2, r3, #8
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	617b      	str	r3, [r7, #20]
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	b29b      	uxth	r3, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <ipCalcChecksumEx>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksumEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
   uint_t pos;
   uint8_t *data;
   uint32_t checksum;

   //Checksum preset value
   checksum = 0x0000;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]

   //Current position in the multi-part buffer
   pos = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	e060      	b.n	80018e0 <ipCalcChecksumEx+0xdc>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	3301      	adds	r3, #1
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	889b      	ldrh	r3, [r3, #4]
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4293      	cmp	r3, r2
 8001830:	d249      	bcs.n	80018c6 <ipCalcChecksumEx+0xc2>
      {
         //Point to the first data byte
         data = (uint8_t *) buffer->chunk[i].address + offset;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001836:	3201      	adds	r2, #1
 8001838:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]

         //Number of bytes available in the current chunk
         n = buffer->chunk[i].length - offset;
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	3301      	adds	r3, #1
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	889b      	ldrh	r3, [r3, #4]
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	617b      	str	r3, [r7, #20]
         //Limit the number of byte to process
         n = MIN(n, length - pos);
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4293      	cmp	r3, r2
 8001860:	bf28      	it	cs
 8001862:	4613      	movcs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

         //Take care of alignment issues
         if((pos & 1) != 0)
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <ipCalcChecksumEx+0x7a>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	0a1a      	lsrs	r2, r3, #8
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	4313      	orrs	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	61fb      	str	r3, [r7, #28]
         }

         //Process data chunk
         checksum += ipCalcChecksum(data, n) ^ 0xFFFF;
 800187e:	6979      	ldr	r1, [r7, #20]
 8001880:	69b8      	ldr	r0, [r7, #24]
 8001882:	f7ff ff35 	bl	80016f0 <ipCalcChecksum>
 8001886:	4603      	mov	r3, r0
 8001888:	43db      	mvns	r3, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	61fb      	str	r3, [r7, #28]
         //Fold 32-bit sum to 16 bits
         checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	b29a      	uxth	r2, r3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	0c1b      	lsrs	r3, r3, #16
 800189c:	4413      	add	r3, r2
 800189e:	61fb      	str	r3, [r7, #28]

         //Restore checksum endianness
         if((pos & 1) != 0)
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <ipCalcChecksumEx+0xb4>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	0a1a      	lsrs	r2, r3, #8
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	61fb      	str	r3, [r7, #28]
         }

         //Advance current position
         pos += n;
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	4413      	add	r3, r2
 80018be:	623b      	str	r3, [r7, #32]
         //Process the next block from the start
         offset = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	e009      	b.n	80018da <ipCalcChecksumEx+0xd6>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	3301      	adds	r3, #1
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	889b      	ldrh	r3, [r3, #4]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	3301      	adds	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d203      	bcs.n	80018f2 <ipCalcChecksumEx+0xee>
 80018ea:	6a3a      	ldr	r2, [r7, #32]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d395      	bcc.n	800181e <ipCalcChecksumEx+0x1a>
      }
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	b29b      	uxth	r3, r3
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <ipCalcUpperLayerChecksumEx>:
 * @return Checksum value
 **/

uint16_t ipCalcUpperLayerChecksumEx(const void *pseudoHeader,
   size_t pseudoHeaderLen, const NetBuffer *buffer, size_t offset, size_t length)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	603b      	str	r3, [r7, #0]
   uint32_t checksum;

   //Process pseudo header
   checksum = ipCalcChecksum(pseudoHeader, pseudoHeaderLen) ^ 0xFFFF;
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff feec 	bl	80016f0 <ipCalcChecksum>
 8001918:	4603      	mov	r3, r0
 800191a:	43db      	mvns	r3, r3
 800191c:	b29b      	uxth	r3, r3
 800191e:	617b      	str	r3, [r7, #20]
   //Process upper-layer data
   checksum += ipCalcChecksumEx(buffer, offset, length) ^ 0xFFFF;
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff6d 	bl	8001804 <ipCalcChecksumEx>
 800192a:	4603      	mov	r3, r0
 800192c:	43db      	mvns	r3, r3
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	b29a      	uxth	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	0c1b      	lsrs	r3, r3, #16
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	b29b      	uxth	r3, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	b29b      	uxth	r3, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <ipAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ipAllocBuffer(size_t length, size_t *offset)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
#if (IPV6_SUPPORT == ENABLED)
   //Maximum overhead when using IPv6
   headerLen = sizeof(Ipv6Header) + sizeof(Ipv6FragmentHeader);
#else
   //Maximum overhead when using IPv4
   headerLen = sizeof(Ipv4Header);
 800195e:	2314      	movs	r3, #20
 8001960:	60fb      	str	r3, [r7, #12]
#if (ETH_SUPPORT == ENABLED)
   //Allocate a buffer to hold the Ethernet header and the IP packet
   buffer = ethAllocBuffer(length + headerLen, offset);
#elif (PPP_SUPPORT == ENABLED)
   //Allocate a buffer to hold the PPP header and the IP packet
   buffer = pppAllocBuffer(length + headerLen, offset);
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	6839      	ldr	r1, [r7, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f00a fffe 	bl	800c96c <pppAllocBuffer>
 8001970:	60b8      	str	r0, [r7, #8]
   //Clear offset value
   *offset = 0;
#endif

   //Successful memory allocation?
   if(buffer != NULL)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <ipAllocBuffer+0x30>
   {
      //Offset to the first byte of the payload
      *offset += headerLen;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	441a      	add	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	601a      	str	r2, [r3, #0]
   }

   //Return a pointer to the freshly allocated buffer
   return buffer;
 8001984:	68bb      	ldr	r3, [r7, #8]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <ipStringToAddr>:
 * @param[out] ipAddr Binary representation of the IP address
 * @return Error code
 **/

error_t ipStringToAddr(const char_t *str, IpAddr *ipAddr)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
   }
   else
#endif
#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(strchr(str, '.'))
 8001998:	212e      	movs	r1, #46	; 0x2e
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f018 ff24 	bl	801a7e8 <strchr>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <ipStringToAddr+0x30>
   {
      //IPv4 addresses are 4-byte long
      ipAddr->length = sizeof(Ipv4Addr);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2204      	movs	r2, #4
 80019aa:	601a      	str	r2, [r3, #0]
      //Convert the string to IPv4 address
      error = ipv4StringToAddr(str, &ipAddr->ipv4Addr);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	3304      	adds	r3, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f006 fbec 	bl	8008190 <ipv4StringToAddr>
 80019b8:	4603      	mov	r3, r0
 80019ba:	81fb      	strh	r3, [r7, #14]
 80019bc:	e001      	b.n	80019c2 <ipStringToAddr+0x34>
   else
#endif
   //Invalid IP address?
   {
      //Report an error
      error = ERROR_FAILURE;
 80019be:	2301      	movs	r3, #1
 80019c0:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 80019c2:	89fb      	ldrh	r3, [r7, #14]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <ipAddrToString>:
 * @param[out] str NULL-terminated string representing the IP address
 * @return Pointer to the formatted string
 **/

char_t *ipAddrToString(const IpAddr *ipAddr, char_t *str)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d107      	bne.n	80019ee <ipAddrToString+0x22>
   {
      //Convert IPv4 address to string representation
      return ipv4AddrToString(ipAddr->ipv4Addr, str);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f006 fc3b 	bl	8008260 <ipv4AddrToString>
 80019ea:	4603      	mov	r3, r0
 80019ec:	e008      	b.n	8001a00 <ipAddrToString+0x34>
   //Invalid IP address?
   {
      static char_t c;

      //The last parameter is optional
      if(str == NULL)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <ipAddrToString+0x2c>
      {
         str = &c;
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <ipAddrToString+0x3c>)
 80019f6:	603b      	str	r3, [r7, #0]
      }

      //Properly terminate the string
      str[0] = '\0';
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]

      //Return an empty string
      return str;
 80019fe:	683b      	ldr	r3, [r7, #0]
   }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000244 	.word	0x20000244

08001a0c <netInit>:
 * @brief TCP/IP stack initialization
 * @return Error code
 **/

error_t netInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af02      	add	r7, sp, #8
   error_t error;
   uint_t i;
   NetInterface *interface;

   //The TCP/IP process is currently suspended
   netTaskRunning = FALSE;
 8001a12:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <netInit+0x148>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
   //Get current time
   netTimestamp = osGetSystemTime();
 8001a18:	f7fe feda 	bl	80007d0 <osGetSystemTime>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <netInit+0x14c>)
 8001a20:	601a      	str	r2, [r3, #0]

   //Create a mutex to prevent simultaneous access to the TCP/IP stack
   if(!osCreateMutex(&netMutex))
 8001a22:	484e      	ldr	r0, [pc, #312]	; (8001b5c <netInit+0x150>)
 8001a24:	f7fe fe9f 	bl	8000766 <osCreateMutex>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <netInit+0x26>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001a2e:	2365      	movs	r3, #101	; 0x65
 8001a30:	e08b      	b.n	8001b4a <netInit+0x13e>
   }

   //Create a event object to receive notifications from device drivers
   if(!osCreateEvent(&netEvent))
 8001a32:	484b      	ldr	r0, [pc, #300]	; (8001b60 <netInit+0x154>)
 8001a34:	f7fe fe1a 	bl	800066c <osCreateEvent>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <netInit+0x36>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001a3e:	2365      	movs	r3, #101	; 0x65
 8001a40:	e083      	b.n	8001b4a <netInit+0x13e>
   }

   //Memory pool initialization
   error = memPoolInit();
 8001a42:	f000 fc35 	bl	80022b0 <memPoolInit>
 8001a46:	4603      	mov	r3, r0
 8001a48:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001a4a:	897b      	ldrh	r3, [r7, #10]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <netInit+0x48>
      return error;
 8001a50:	897b      	ldrh	r3, [r7, #10]
 8001a52:	e07a      	b.n	8001b4a <netInit+0x13e>

   //Clear configuration data for each interface
   memset(netInterface, 0, sizeof(netInterface));
 8001a54:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4842      	ldr	r0, [pc, #264]	; (8001b64 <netInit+0x158>)
 8001a5c:	f018 fafe 	bl	801a05c <memset>

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e01b      	b.n	8001a9e <netInit+0x92>
   {
      //Point to the current interface
      interface = &netInterface[i];
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <netInit+0x158>)
 8001a72:	4413      	add	r3, r2
 8001a74:	607b      	str	r3, [r7, #4]

      //Default interface name
      sprintf(interface->name, "eth%u", i);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3310      	adds	r3, #16
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	493a      	ldr	r1, [pc, #232]	; (8001b68 <netInit+0x15c>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f018 fe74 	bl	801a76c <siprintf>

      //Zero-based index
      interface->index = i;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]
      //Unique number identifying the interface
      interface->id = i;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
      //Default PHY address
      interface->phyAddr = UINT8_MAX;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	22ff      	movs	r2, #255	; 0xff
 8001a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0e0      	beq.n	8001a66 <netInit+0x5a>
   }

   //Create a mutex to prevent simultaneous access to the callback table
   if(!osCreateMutex(&callbackTableMutex))
 8001aa4:	4831      	ldr	r0, [pc, #196]	; (8001b6c <netInit+0x160>)
 8001aa6:	f7fe fe5e 	bl	8000766 <osCreateMutex>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <netInit+0xa8>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001ab0:	2365      	movs	r3, #101	; 0x65
 8001ab2:	e04a      	b.n	8001b4a <netInit+0x13e>
   }

   //Initialize callback table
   memset(callbackTable, 0, sizeof(callbackTable));
 8001ab4:	2248      	movs	r2, #72	; 0x48
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	482d      	ldr	r0, [pc, #180]	; (8001b70 <netInit+0x164>)
 8001aba:	f018 facf 	bl	801a05c <memset>

   //Socket related initialization
   error = socketInit();
 8001abe:	f001 f8e1 	bl	8002c84 <socketInit>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001ac6:	897b      	ldrh	r3, [r7, #10]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <netInit+0xc4>
      return error;
 8001acc:	897b      	ldrh	r3, [r7, #10]
 8001ace:	e03c      	b.n	8001b4a <netInit+0x13e>
      return error;
#endif

#if (UDP_SUPPORT == ENABLED)
   //UDP related initialization
   error = udpInit();
 8001ad0:	f004 fc20 	bl	8006314 <udpInit>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001ad8:	897b      	ldrh	r3, [r7, #10]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <netInit+0xd6>
      return error;
 8001ade:	897b      	ldrh	r3, [r7, #10]
 8001ae0:	e033      	b.n	8001b4a <netInit+0x13e>
#endif

#if (TCP_SUPPORT == ENABLED)
   //TCP related initialization
   error = tcpInit();
 8001ae2:	f001 fb09 	bl	80030f8 <tcpInit>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001aea:	897b      	ldrh	r3, [r7, #10]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <netInit+0xe8>
      return error;
 8001af0:	897b      	ldrh	r3, [r7, #10]
 8001af2:	e02a      	b.n	8001b4a <netInit+0x13e>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //DNS cache initialization
   error = dnsInit();
 8001af4:	f004 ff7e 	bl	80069f4 <dnsInit>
 8001af8:	4603      	mov	r3, r0
 8001afa:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001afc:	897b      	ldrh	r3, [r7, #10]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <netInit+0xfa>
      return error;
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	e021      	b.n	8001b4a <netInit+0x13e>
#endif

   //Initialize tick counters
   nicTickCounter = 0;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <netInit+0x168>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

#if (PPP_SUPPORT == ENABLED)
   pppTickCounter = 0;
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <netInit+0x16c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   arpTickCounter = 0;
#endif
#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   ipv4FragTickCounter = 0;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <netInit+0x170>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
#endif
#if (IPV6_SUPPORT == ENABLED && DHCPV6_CLIENT_SUPPORT == ENABLED)
   dhcpv6ClientTickCounter = 0;
#endif
#if (TCP_SUPPORT == ENABLED)
   tcpTickCounter = 0;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <netInit+0x174>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
#endif
#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   dnsTickCounter = 0;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <netInit+0x178>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
   //Create a task to handle TCP/IP events
   osCreateStaticTask(&netTaskInstance, "TCP/IP Stack", (OsTaskCode) netTask,
      NULL, netTaskStack, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);
#else
   //Create a task to handle TCP/IP events
   netTaskHandle = osCreateTask("TCP/IP Stack", (OsTaskCode) netTask,
 8001b24:	2301      	movs	r3, #1
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	f240 238a 	movw	r3, #650	; 0x28a
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4916      	ldr	r1, [pc, #88]	; (8001b88 <netInit+0x17c>)
 8001b30:	4816      	ldr	r0, [pc, #88]	; (8001b8c <netInit+0x180>)
 8001b32:	f7fe fd5c 	bl	80005ee <osCreateTask>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <netInit+0x184>)
 8001b3a:	601a      	str	r2, [r3, #0]
      NULL, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);

   //Unable to create the task?
   if(netTaskHandle == OS_INVALID_HANDLE)
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <netInit+0x184>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <netInit+0x13c>
      return ERROR_OUT_OF_RESOURCES;
 8001b44:	2365      	movs	r3, #101	; 0x65
 8001b46:	e000      	b.n	8001b4a <netInit+0x13e>
   //The TCP/IP process is now running
   netTaskRunning = TRUE;
#endif

   //Successful initialization
   return NO_ERROR;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000248 	.word	0x20000248
 8001b58:	2000024c 	.word	0x2000024c
 8001b5c:	2000e460 	.word	0x2000e460
 8001b60:	2000e458 	.word	0x2000e458
 8001b64:	2000e464 	.word	0x2000e464
 8001b68:	0801b254 	.word	0x0801b254
 8001b6c:	20000254 	.word	0x20000254
 8001b70:	20000258 	.word	0x20000258
 8001b74:	2000e838 	.word	0x2000e838
 8001b78:	20010234 	.word	0x20010234
 8001b7c:	20010230 	.word	0x20010230
 8001b80:	2000fe44 	.word	0x2000fe44
 8001b84:	2001022c 	.word	0x2001022c
 8001b88:	08001ec5 	.word	0x08001ec5
 8001b8c:	0801b25c 	.word	0x0801b25c
 8001b90:	2000e45c 	.word	0x2000e45c

08001b94 <netSetInterfaceName>:
 * @param[in] name NULL-terminated string that contains the interface name
 * @return Error code
 **/

error_t netSetInterfaceName(NetInterface *interface, const char_t *name)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || name == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <netSetInterfaceName+0x16>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <netSetInterfaceName+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001baa:	2302      	movs	r3, #2
 8001bac:	e00d      	b.n	8001bca <netSetInterfaceName+0x36>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <netSetInterfaceName+0x40>)
 8001bb0:	f7fe fdf2 	bl	8000798 <osAcquireMutex>

   //Set interface name
   strSafeCopy(interface->name, name, NET_MAX_IF_NAME_LEN);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3310      	adds	r3, #16
 8001bb8:	2208      	movs	r2, #8
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fe12 	bl	80007e6 <strSafeCopy>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001bc2:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <netSetInterfaceName+0x40>)
 8001bc4:	f7fe fdf7 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000e460 	.word	0x2000e460

08001bd8 <netSetDriver>:
 * @param[in] driver Ethernet MAC driver
 * @return Error code
 **/

error_t netSetDriver(NetInterface *interface, const NicDriver *driver)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <netSetDriver+0x16>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <netSetDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e009      	b.n	8001c06 <netSetDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <netSetDriver+0x38>)
 8001bf4:	f7fe fdd0 	bl	8000798 <osAcquireMutex>
   //Set Ethernet MAC driver
   interface->nicDriver = driver;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	649a      	str	r2, [r3, #72]	; 0x48
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001bfe:	4804      	ldr	r0, [pc, #16]	; (8001c10 <netSetDriver+0x38>)
 8001c00:	f7fe fdd9 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000e460 	.word	0x2000e460

08001c14 <netSetUartDriver>:
 * @param[in] driver Underlying UART driver
 * @return Error code
 **/

error_t netSetUartDriver(NetInterface *interface, const UartDriver *driver)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <netSetUartDriver+0x16>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <netSetUartDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e009      	b.n	8001c42 <netSetUartDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <netSetUartDriver+0x38>)
 8001c30:	f7fe fdb2 	bl	8000798 <osAcquireMutex>
   //Set UART driver
   interface->uartDriver = driver;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	659a      	str	r2, [r3, #88]	; 0x58
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <netSetUartDriver+0x38>)
 8001c3c:	f7fe fdbb 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000e460 	.word	0x2000e460

08001c50 <netConfigInterface>:
 * @param[in] interface Network interface to configure
 * @return Error code
 **/

error_t netConfigInterface(NetInterface *interface)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
   error_t error;

   //Make sure the network interface is valid
   if(interface == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <netConfigInterface+0x12>
      return ERROR_INVALID_PARAMETER;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e04b      	b.n	8001cfa <netConfigInterface+0xaa>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001c62:	4828      	ldr	r0, [pc, #160]	; (8001d04 <netConfigInterface+0xb4>)
 8001c64:	f7fe fd98 	bl	8000798 <osAcquireMutex>

   //Disable hardware interrupts
   if(interface->nicDriver != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <netConfigInterface+0x2a>
      interface->nicDriver->disableIrq(interface);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3

   //Start of exception handling block
   do
   {
      //Receive notifications when the transmitter is ready to send
      if(!osCreateEvent(&interface->nicTxEvent))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3370      	adds	r3, #112	; 0x70
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fcf4 	bl	800066c <osCreateEvent>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <netConfigInterface+0x40>
      {
         //Failed to create event object
         error = ERROR_OUT_OF_RESOURCES;
 8001c8a:	2365      	movs	r3, #101	; 0x65
 8001c8c:	81fb      	strh	r3, [r7, #14]
         //Stop immediately
         break;
 8001c8e:	e016      	b.n	8001cbe <netConfigInterface+0x6e>
      }

      //Valid NIC driver?
      if(interface->nicDriver != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <netConfigInterface+0x5c>
      {
         //Network controller initialization
         error = interface->nicDriver->init(interface);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	81fb      	strh	r3, [r7, #14]
         //Any error to report?
         if(error)
 8001ca6:	89fb      	ldrh	r3, [r7, #14]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <netConfigInterface+0x6c>
         break;
#endif

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 initialization
      error = ipv4Init(interface);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f005 ff27 	bl	8007b00 <ipv4Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	e000      	b.n	8001cbe <netConfigInterface+0x6e>
            break;
 8001cbc:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Check status code
   if(!error)
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d111      	bne.n	8001ce8 <netConfigInterface+0x98>
   {
      //The network interface is now fully configured
      interface->configured = TRUE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      //Check whether the TCP/IP process is running
      if(netTaskRunning)
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <netConfigInterface+0xb8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00e      	beq.n	8001cf2 <netConfigInterface+0xa2>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00a      	beq.n	8001cf2 <netConfigInterface+0xa2>
            interface->nicDriver->enableIrq(interface);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
 8001ce6:	e004      	b.n	8001cf2 <netConfigInterface+0xa2>
      }
   }
   else
   {
      //Clean up side effects before returning
      osDeleteEvent(&interface->nicTxEvent);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3370      	adds	r3, #112	; 0x70
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fcdd 	bl	80006ac <osDeleteEvent>
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <netConfigInterface+0xb4>)
 8001cf4:	f7fe fd5f 	bl	80007b6 <osReleaseMutex>

   //Return status code
   return error;
 8001cf8:	89fb      	ldrh	r3, [r7, #14]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000e460 	.word	0x2000e460
 8001d08:	20000248 	.word	0x20000248

08001d0c <netProcessLinkChange>:
 * @brief Process link state change event
 * @param[in] interface Underlying network interface
 **/

void netProcessLinkChange(NetInterface *interface)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
   uint_t i;
   Socket *socket;

   //Check link state
   if(interface->linkState)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d07c      	beq.n	8001e16 <netProcessLinkChange+0x10a>
   {
      //Display link state
      TRACE_INFO("Link is up (%s)...\r\n", interface->name);
 8001d1c:	f7fe fc90 	bl	8000640 <osSuspendAllTasks>
 8001d20:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <netProcessLinkChange+0x184>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68d8      	ldr	r0, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3310      	adds	r3, #16
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4959      	ldr	r1, [pc, #356]	; (8001e94 <netProcessLinkChange+0x188>)
 8001d2e:	f018 f8af 	bl	8019e90 <fiprintf>
 8001d32:	f7fe fc90 	bl	8000656 <osResumeAllTasks>

      //Display link speed
      if(interface->linkSpeed == NIC_LINK_SPEED_1GBPS)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d3c:	4a56      	ldr	r2, [pc, #344]	; (8001e98 <netProcessLinkChange+0x18c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10c      	bne.n	8001d5c <netProcessLinkChange+0x50>
      {
         //1000BASE-T
         TRACE_INFO("  Link speed = 1000 Mbps\r\n");
 8001d42:	f7fe fc7d 	bl	8000640 <osSuspendAllTasks>
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <netProcessLinkChange+0x184>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	221a      	movs	r2, #26
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4852      	ldr	r0, [pc, #328]	; (8001e9c <netProcessLinkChange+0x190>)
 8001d52:	f018 f8fd 	bl	8019f50 <fwrite>
 8001d56:	f7fe fc7e 	bl	8000656 <osResumeAllTasks>
 8001d5a:	e038      	b.n	8001dce <netProcessLinkChange+0xc2>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_100MBPS)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d62:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <netProcessLinkChange+0x194>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d10c      	bne.n	8001d82 <netProcessLinkChange+0x76>
      {
         //100BASE-TX
         TRACE_INFO("  Link speed = 100 Mbps\r\n");
 8001d68:	f7fe fc6a 	bl	8000640 <osSuspendAllTasks>
 8001d6c:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <netProcessLinkChange+0x184>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2219      	movs	r2, #25
 8001d74:	2101      	movs	r1, #1
 8001d76:	484b      	ldr	r0, [pc, #300]	; (8001ea4 <netProcessLinkChange+0x198>)
 8001d78:	f018 f8ea 	bl	8019f50 <fwrite>
 8001d7c:	f7fe fc6b 	bl	8000656 <osResumeAllTasks>
 8001d80:	e025      	b.n	8001dce <netProcessLinkChange+0xc2>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_10MBPS)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d88:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <netProcessLinkChange+0x19c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10c      	bne.n	8001da8 <netProcessLinkChange+0x9c>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = 10 Mbps\r\n");
 8001d8e:	f7fe fc57 	bl	8000640 <osSuspendAllTasks>
 8001d92:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <netProcessLinkChange+0x184>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2218      	movs	r2, #24
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4843      	ldr	r0, [pc, #268]	; (8001eac <netProcessLinkChange+0x1a0>)
 8001d9e:	f018 f8d7 	bl	8019f50 <fwrite>
 8001da2:	f7fe fc58 	bl	8000656 <osResumeAllTasks>
 8001da6:	e012      	b.n	8001dce <netProcessLinkChange+0xc2>
      }
      else if(interface->linkSpeed != NIC_LINK_SPEED_UNKNOWN)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00d      	beq.n	8001dce <netProcessLinkChange+0xc2>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = %" PRIu32 " bps\r\n",
 8001db2:	f7fe fc45 	bl	8000640 <osSuspendAllTasks>
 8001db6:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <netProcessLinkChange+0x184>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68d8      	ldr	r0, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	493a      	ldr	r1, [pc, #232]	; (8001eb0 <netProcessLinkChange+0x1a4>)
 8001dc6:	f018 f863 	bl	8019e90 <fiprintf>
 8001dca:	f7fe fc44 	bl	8000656 <osResumeAllTasks>
            interface->linkSpeed);
      }

      //Display duplex mode
      if(interface->duplexMode == NIC_FULL_DUPLEX_MODE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d10c      	bne.n	8001df2 <netProcessLinkChange+0xe6>
      {
         //1000BASE-T
         TRACE_INFO("  Duplex mode = Full-Duplex\r\n");
 8001dd8:	f7fe fc32 	bl	8000640 <osSuspendAllTasks>
 8001ddc:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <netProcessLinkChange+0x184>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	221d      	movs	r2, #29
 8001de4:	2101      	movs	r1, #1
 8001de6:	4833      	ldr	r0, [pc, #204]	; (8001eb4 <netProcessLinkChange+0x1a8>)
 8001de8:	f018 f8b2 	bl	8019f50 <fwrite>
 8001dec:	f7fe fc33 	bl	8000656 <osResumeAllTasks>
 8001df0:	e01e      	b.n	8001e30 <netProcessLinkChange+0x124>
      }
      else if(interface->duplexMode == NIC_HALF_DUPLEX_MODE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d119      	bne.n	8001e30 <netProcessLinkChange+0x124>
      {
         //100BASE-TX
         TRACE_INFO("  Duplex mode = Half-Duplex\r\n");
 8001dfc:	f7fe fc20 	bl	8000640 <osSuspendAllTasks>
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <netProcessLinkChange+0x184>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	221d      	movs	r2, #29
 8001e08:	2101      	movs	r1, #1
 8001e0a:	482b      	ldr	r0, [pc, #172]	; (8001eb8 <netProcessLinkChange+0x1ac>)
 8001e0c:	f018 f8a0 	bl	8019f50 <fwrite>
 8001e10:	f7fe fc21 	bl	8000656 <osResumeAllTasks>
 8001e14:	e00c      	b.n	8001e30 <netProcessLinkChange+0x124>
      }
   }
   else
   {
      //Display link state
      TRACE_INFO("Link is down (%s)...\r\n", interface->name);
 8001e16:	f7fe fc13 	bl	8000640 <osSuspendAllTasks>
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <netProcessLinkChange+0x184>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68d8      	ldr	r0, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3310      	adds	r3, #16
 8001e24:	461a      	mov	r2, r3
 8001e26:	4925      	ldr	r1, [pc, #148]	; (8001ebc <netProcessLinkChange+0x1b0>)
 8001e28:	f018 f832 	bl	8019e90 <fiprintf>
 8001e2c:	f7fe fc13 	bl	8000656 <osResumeAllTasks>
   IF_MIB_SET_TIME_TICKS(ifTable[interface->index].ifLastChange,
      osGetSystemTime() / 10);

#if (IPV4_SUPPORT == ENABLED)
   //Notify IPv4 of link state changes
   ipv4LinkChangeEvent(interface);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f005 ff67 	bl	8007d04 <ipv4LinkChangeEvent>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Flush DNS cache
   dnsFlushCache(interface);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f004 fdea 	bl	8006a10 <dnsFlushCache>
#if (DNS_SD_SUPPORT == ENABLED)
   //Perform probing and announcing
   dnsSdLinkChangeEvent(interface->dnsSdContext);
#endif
   //Notify registered users of link state changes
   netInvokeLinkChangeCallback(interface, interface->linkState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f9fc 	bl	8002240 <netInvokeLinkChangeCallback>

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e018      	b.n	8001e80 <netProcessLinkChange+0x174>
   {
      //Point to the current socket
      socket = socketTable + i;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f44f 720d 	mov.w	r2, #564	; 0x234
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <netProcessLinkChange+0x1b4>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60bb      	str	r3, [r7, #8]

#if (TCP_SUPPORT == ENABLED)
      //Connection-oriented socket?
      if(socket->type == SOCKET_TYPE_STREAM)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <netProcessLinkChange+0x160>
      {
         tcpUpdateEvents(socket);
 8001e66:	68b8      	ldr	r0, [r7, #8]
 8001e68:	f003 fe10 	bl	8005a8c <tcpUpdateEvents>
      }
#endif

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d102      	bne.n	8001e7a <netProcessLinkChange+0x16e>
      {
         udpUpdateEvents(socket);
 8001e74:	68b8      	ldr	r0, [r7, #8]
 8001e76:	f004 fca0 	bl	80067ba <udpUpdateEvents>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b09      	cmp	r3, #9
 8001e84:	d9e3      	bls.n	8001e4e <netProcessLinkChange+0x142>
      {
         rawSocketUpdateEvents(socket);
      }
#endif
   }
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000058 	.word	0x20000058
 8001e94:	0801b26c 	.word	0x0801b26c
 8001e98:	3b9aca00 	.word	0x3b9aca00
 8001e9c:	0801b284 	.word	0x0801b284
 8001ea0:	05f5e100 	.word	0x05f5e100
 8001ea4:	0801b2a0 	.word	0x0801b2a0
 8001ea8:	00989680 	.word	0x00989680
 8001eac:	0801b2bc 	.word	0x0801b2bc
 8001eb0:	0801b2d8 	.word	0x0801b2d8
 8001eb4:	0801b2f4 	.word	0x0801b2f4
 8001eb8:	0801b314 	.word	0x0801b314
 8001ebc:	0801b334 	.word	0x0801b334
 8001ec0:	2000e83c 	.word	0x2000e83c

08001ec4 <netTask>:
/**
 * @brief TCP/IP events handling
 **/

void netTask(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
#if (NET_RTOS_SUPPORT == ENABLED)
   //Task prologue
   osEnterTask();

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001eca:	4851      	ldr	r0, [pc, #324]	; (8002010 <netTask+0x14c>)
 8001ecc:	f7fe fc64 	bl	8000798 <osAcquireMutex>

   //The TCP/IP process is now running
   netTaskRunning = TRUE;
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <netTask+0x150>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e018      	b.n	8001f0e <netTask+0x4a>
   {
      //Point to the current network interface
      interface = &netInterface[i];
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <netTask+0x154>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	607b      	str	r3, [r7, #4]

      //Check whether the interface is fully configured
      if(interface->configured)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <netTask+0x44>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <netTask+0x44>
         {
            interface->nicDriver->enableIrq(interface);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0e3      	beq.n	8001edc <netTask+0x18>
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001f14:	483e      	ldr	r0, [pc, #248]	; (8002010 <netTask+0x14c>)
 8001f16:	f7fe fc4e 	bl	80007b6 <osReleaseMutex>
   //Main loop
   while(1)
   {
#endif
      //Get current time
      time = osGetSystemTime();
 8001f1a:	f7fe fc59 	bl	80007d0 <osGetSystemTime>
 8001f1e:	60f8      	str	r0, [r7, #12]

      //Compute the maximum blocking time when waiting for an event
      if(timeCompare(time, netTimestamp) < 0)
 8001f20:	4b3e      	ldr	r3, [pc, #248]	; (800201c <netTask+0x158>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da05      	bge.n	8001f38 <netTask+0x74>
         timeout = netTimestamp - time;
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <netTask+0x158>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	e001      	b.n	8001f3c <netTask+0x78>
      else
         timeout = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]

      //Receive notifications when a frame has been received, or the
      //link state of any network interfaces has changed
      status = osWaitForEvent(&netEvent, timeout);
 8001f3c:	6939      	ldr	r1, [r7, #16]
 8001f3e:	4838      	ldr	r0, [pc, #224]	; (8002020 <netTask+0x15c>)
 8001f40:	f7fe fbe0 	bl	8000704 <osWaitForEvent>
 8001f44:	60b8      	str	r0, [r7, #8]

      //Check whether the specified event is in signaled state
      if(status)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d04a      	beq.n	8001fe2 <netTask+0x11e>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8001f4c:	4830      	ldr	r0, [pc, #192]	; (8002010 <netTask+0x14c>)
 8001f4e:	f7fe fc23 	bl	8000798 <osAcquireMutex>

         //Process events
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e03e      	b.n	8001fd6 <netTask+0x112>
         {
            //Point to the current network interface
            interface = &netInterface[i];
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <netTask+0x154>)
 8001f64:	4413      	add	r3, r2
 8001f66:	607b      	str	r3, [r7, #4]

            //Check whether a NIC event is pending
            if(interface->nicEvent)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d015      	beq.n	8001f9c <netTask+0xd8>
            {
               //Acknowledge the event by clearing the flag
               interface->nicEvent = FALSE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	675a      	str	r2, [r3, #116]	; 0x74

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00e      	beq.n	8001f9c <netTask+0xd8>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
                  //Handle NIC events
                  interface->nicDriver->eventHandler(interface);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
               }
            }

            //Check whether a PHY event is pending
            if(interface->phyEvent)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d015      	beq.n	8001fd0 <netTask+0x10c>
            {
               //Acknowledge the event by clearing the flag
               interface->phyEvent = FALSE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	679a      	str	r2, [r3, #120]	; 0x78

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00e      	beq.n	8001fd0 <netTask+0x10c>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
                  //Handle PHY events
                  interface->phyDriver->eventHandler(interface);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0bd      	beq.n	8001f58 <netTask+0x94>
               }
            }
         }

         //Release exclusive access
         osReleaseMutex(&netMutex);
 8001fdc:	480c      	ldr	r0, [pc, #48]	; (8002010 <netTask+0x14c>)
 8001fde:	f7fe fbea 	bl	80007b6 <osReleaseMutex>
      }

      //Get current time
      time = osGetSystemTime();
 8001fe2:	f7fe fbf5 	bl	80007d0 <osGetSystemTime>
 8001fe6:	60f8      	str	r0, [r7, #12]

      //Check current time
      if(timeCompare(time, netTimestamp) >= 0)
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <netTask+0x158>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db92      	blt.n	8001f1a <netTask+0x56>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8001ff4:	4806      	ldr	r0, [pc, #24]	; (8002010 <netTask+0x14c>)
 8001ff6:	f7fe fbcf 	bl	8000798 <osAcquireMutex>
         //Handle periodic operations
         netTick();
 8001ffa:	f000 f813 	bl	8002024 <netTick>
         //Release exclusive access
         osReleaseMutex(&netMutex);
 8001ffe:	4804      	ldr	r0, [pc, #16]	; (8002010 <netTask+0x14c>)
 8002000:	f7fe fbd9 	bl	80007b6 <osReleaseMutex>

         //Next event
         netTimestamp = time + NET_TICK_INTERVAL;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3364      	adds	r3, #100	; 0x64
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <netTask+0x158>)
 800200a:	6013      	str	r3, [r2, #0]
      time = osGetSystemTime();
 800200c:	e785      	b.n	8001f1a <netTask+0x56>
 800200e:	bf00      	nop
 8002010:	2000e460 	.word	0x2000e460
 8002014:	20000248 	.word	0x20000248
 8002018:	2000e464 	.word	0x2000e464
 800201c:	2000024c 	.word	0x2000024c
 8002020:	2000e458 	.word	0x2000e458

08002024 <netTick>:
/**
 * @brief Manage TCP/IP timers
 **/

void netTick(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
   uint_t i;

   //Increment tick counter
   nicTickCounter += NET_TICK_INTERVAL;
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <netTick+0x148>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3364      	adds	r3, #100	; 0x64
 8002030:	4a4e      	ldr	r2, [pc, #312]	; (800216c <netTick+0x148>)
 8002032:	6013      	str	r3, [r2, #0]

   //Handle periodic operations such as polling the link state
   if(nicTickCounter >= NIC_TICK_INTERVAL)
 8002034:	4b4d      	ldr	r3, [pc, #308]	; (800216c <netTick+0x148>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800203c:	d320      	bcc.n	8002080 <netTick+0x5c>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	e017      	b.n	8002074 <netTick+0x50>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <netTick+0x14c>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3388      	adds	r3, #136	; 0x88
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <netTick+0x4a>
            nicTick(&netInterface[i]);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	4a42      	ldr	r2, [pc, #264]	; (8002170 <netTick+0x14c>)
 8002066:	4413      	add	r3, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fd29 	bl	8002ac0 <nicTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3301      	adds	r3, #1
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0e4      	beq.n	8002044 <netTick+0x20>
      }

      //Reset tick counter
      nicTickCounter = 0;
 800207a:	4b3c      	ldr	r3, [pc, #240]	; (800216c <netTick+0x148>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
   }

#if (PPP_SUPPORT == ENABLED)
   //Increment tick counter
   pppTickCounter += NET_TICK_INTERVAL;
 8002080:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <netTick+0x150>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3364      	adds	r3, #100	; 0x64
 8002086:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <netTick+0x150>)
 8002088:	6013      	str	r3, [r2, #0]

   //Manage PPP related timers
   if(pppTickCounter >= PPP_TICK_INTERVAL)
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <netTick+0x150>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002092:	d320      	bcc.n	80020d6 <netTick+0xb2>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	e017      	b.n	80020ca <netTick+0xa6>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 800209a:	4a35      	ldr	r2, [pc, #212]	; (8002170 <netTick+0x14c>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3388      	adds	r3, #136	; 0x88
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <netTick+0xa0>
            pppTick(&netInterface[i]);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	4a2d      	ldr	r2, [pc, #180]	; (8002170 <netTick+0x14c>)
 80020bc:	4413      	add	r3, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f00a fa3c 	bl	800c53c <pppTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3301      	adds	r3, #1
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0e4      	beq.n	800209a <netTick+0x76>
      }

      //Reset tick counter
      pppTickCounter = 0;
 80020d0:	4b28      	ldr	r3, [pc, #160]	; (8002174 <netTick+0x150>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   //Increment tick counter
   ipv4FragTickCounter += NET_TICK_INTERVAL;
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <netTick+0x154>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3364      	adds	r3, #100	; 0x64
 80020dc:	4a26      	ldr	r2, [pc, #152]	; (8002178 <netTick+0x154>)
 80020de:	6013      	str	r3, [r2, #0]

   //Handle IPv4 fragment reassembly timeout
   if(ipv4FragTickCounter >= IPV4_FRAG_TICK_INTERVAL)
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <netTick+0x154>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020e8:	d320      	bcc.n	800212c <netTick+0x108>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	e017      	b.n	8002120 <netTick+0xfc>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <netTick+0x14c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3388      	adds	r3, #136	; 0x88
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <netTick+0xf6>
            ipv4FragTick(&netInterface[i]);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <netTick+0x14c>)
 8002112:	4413      	add	r3, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f006 fafc 	bl	8008712 <ipv4FragTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3301      	adds	r3, #1
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0e4      	beq.n	80020f0 <netTick+0xcc>
      }

      //Reset tick counter
      ipv4FragTickCounter = 0;
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <netTick+0x154>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
   }
#endif

#if (TCP_SUPPORT == ENABLED)
   //Increment tick counter
   tcpTickCounter += NET_TICK_INTERVAL;
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <netTick+0x158>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3364      	adds	r3, #100	; 0x64
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <netTick+0x158>)
 8002134:	6013      	str	r3, [r2, #0]

   //Manage TCP related timers
   if(tcpTickCounter >= TCP_TICK_INTERVAL)
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <netTick+0x158>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b63      	cmp	r3, #99	; 0x63
 800213c:	d904      	bls.n	8002148 <netTick+0x124>
   {
      //TCP timer handler
      tcpTick();
 800213e:	f003 fefd 	bl	8005f3c <tcpTick>
      //Reset tick counter
      tcpTickCounter = 0;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <netTick+0x158>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dnsTickCounter += NET_TICK_INTERVAL;
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <netTick+0x15c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3364      	adds	r3, #100	; 0x64
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <netTick+0x15c>)
 8002150:	6013      	str	r3, [r2, #0]

   //Manage DNS cache
   if(dnsTickCounter >= DNS_TICK_INTERVAL)
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <netTick+0x15c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2bc7      	cmp	r3, #199	; 0xc7
 8002158:	d904      	bls.n	8002164 <netTick+0x140>
   {
      //DNS timer handler
      dnsTick();
 800215a:	f004 fd2b 	bl	8006bb4 <dnsTick>
      //Reset tick counter
      dnsTickCounter = 0;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <netTick+0x15c>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

      //Reset tick counter
      dnsSdTickCounter = 0;
   }
#endif
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000e838 	.word	0x2000e838
 8002170:	2000e464 	.word	0x2000e464
 8002174:	20010234 	.word	0x20010234
 8002178:	20010230 	.word	0x20010230
 800217c:	2000fe44 	.word	0x2000fe44
 8002180:	2001022c 	.word	0x2001022c

08002184 <netGetDefaultInterface>:
 * @brief Get default network interface
 * @return Pointer to the default network interface to be used
 **/

NetInterface *netGetDefaultInterface(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
   //Default network interface
   return &netInterface[0];
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <netGetDefaultInterface+0x10>)
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	2000e464 	.word	0x2000e464

08002198 <netGetRand>:
 * @brief Get a random value
 * @return Random value
 **/

uint32_t netGetRand(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
   uint32_t value;

   //Use a linear congruential generator (LCG) to update the state of the PRNG
   prngState *= 1103515245;
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <netGetRand+0xa0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a26      	ldr	r2, [pc, #152]	; (800223c <netGetRand+0xa4>)
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	4a23      	ldr	r2, [pc, #140]	; (8002238 <netGetRand+0xa0>)
 80021aa:	6013      	str	r3, [r2, #0]
   prngState += 12345;
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <netGetRand+0xa0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80021b4:	3339      	adds	r3, #57	; 0x39
 80021b6:	4a20      	ldr	r2, [pc, #128]	; (8002238 <netGetRand+0xa0>)
 80021b8:	6013      	str	r3, [r2, #0]
   value = (prngState >> 16) & 0x07FF;
 80021ba:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <netGetRand+0xa0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0c1b      	lsrs	r3, r3, #16
 80021c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c4:	607b      	str	r3, [r7, #4]

   prngState *= 1103515245;
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <netGetRand+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <netGetRand+0xa4>)
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	4a19      	ldr	r2, [pc, #100]	; (8002238 <netGetRand+0xa0>)
 80021d2:	6013      	str	r3, [r2, #0]
   prngState += 12345;
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <netGetRand+0xa0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80021dc:	3339      	adds	r3, #57	; 0x39
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <netGetRand+0xa0>)
 80021e0:	6013      	str	r3, [r2, #0]
   value <<= 10;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	607b      	str	r3, [r7, #4]
   value |= (prngState >> 16) & 0x03FF;
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <netGetRand+0xa0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	607b      	str	r3, [r7, #4]

   prngState *= 1103515245;
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <netGetRand+0xa0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <netGetRand+0xa4>)
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <netGetRand+0xa0>)
 8002204:	6013      	str	r3, [r2, #0]
   prngState += 12345;
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <netGetRand+0xa0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800220e:	3339      	adds	r3, #57	; 0x39
 8002210:	4a09      	ldr	r2, [pc, #36]	; (8002238 <netGetRand+0xa0>)
 8002212:	6013      	str	r3, [r2, #0]
   value <<= 10;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	029b      	lsls	r3, r3, #10
 8002218:	607b      	str	r3, [r7, #4]
   value |= (prngState >> 16) & 0x03FF;
 800221a:	4b07      	ldr	r3, [pc, #28]	; (8002238 <netGetRand+0xa0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4313      	orrs	r3, r2
 8002228:	607b      	str	r3, [r7, #4]

   //Return the random value
   return value;
 800222a:	687b      	ldr	r3, [r7, #4]
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	20000250 	.word	0x20000250
 800223c:	41c64e6d 	.word	0x41c64e6d

08002240 <netInvokeLinkChangeCallback>:
 * @param[in] interface Underlying network interface
 * @param[in] linkState Link state
 **/

void netInvokeLinkChangeCallback(NetInterface *interface, bool_t linkState)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
   uint_t i;
   LinkChangeCallbackDesc *entry;

   //Acquire exclusive access to the callback table
   osAcquireMutex(&callbackTableMutex);
 800224a:	4817      	ldr	r0, [pc, #92]	; (80022a8 <netInvokeLinkChangeCallback+0x68>)
 800224c:	f7fe faa4 	bl	8000798 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < NET_CALLBACK_TABLE_SIZE; i++)
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e01e      	b.n	8002294 <netInvokeLinkChangeCallback+0x54>
   {
      //Point to the current entry
      entry = &callbackTable[i];
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4a12      	ldr	r2, [pc, #72]	; (80022ac <netInvokeLinkChangeCallback+0x6c>)
 8002262:	4413      	add	r3, r2
 8002264:	60bb      	str	r3, [r7, #8]

      //Any registered callback?
      if(entry->callback != NULL)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00f      	beq.n	800228e <netInvokeLinkChangeCallback+0x4e>
      {
         //Check whether the network interface matches the current entry
         if(entry->interface == NULL || entry->interface == interface)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <netInvokeLinkChangeCallback+0x40>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d106      	bne.n	800228e <netInvokeLinkChangeCallback+0x4e>
         {
            //Invoke user callback function
            entry->callback(interface, linkState, entry->param);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	6892      	ldr	r2, [r2, #8]
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
   for(i = 0; i < NET_CALLBACK_TABLE_SIZE; i++)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3301      	adds	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d9dd      	bls.n	8002256 <netInvokeLinkChangeCallback+0x16>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&callbackTableMutex);
 800229a:	4803      	ldr	r0, [pc, #12]	; (80022a8 <netInvokeLinkChangeCallback+0x68>)
 800229c:	f7fe fa8b 	bl	80007b6 <osReleaseMutex>
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000254 	.word	0x20000254
 80022ac:	20000258 	.word	0x20000258

080022b0 <memPoolInit>:
 * @brief Memory pool initialization
 * @return Error code
 **/

error_t memPoolInit(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
//Use fixed-size blocks allocation?
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   //Create a mutex to prevent simultaneous access to the memory pool
   if(!osCreateMutex(&memPoolMutex))
 80022b4:	480a      	ldr	r0, [pc, #40]	; (80022e0 <memPoolInit+0x30>)
 80022b6:	f7fe fa56 	bl	8000766 <osCreateMutex>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <memPoolInit+0x14>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 80022c0:	2365      	movs	r3, #101	; 0x65
 80022c2:	e00b      	b.n	80022dc <memPoolInit+0x2c>
   }

   //Clear allocation table
   memset(memPoolAllocTable, 0, sizeof(memPoolAllocTable));
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	2100      	movs	r1, #0
 80022c8:	4806      	ldr	r0, [pc, #24]	; (80022e4 <memPoolInit+0x34>)
 80022ca:	f017 fec7 	bl	801a05c <memset>

   //Clear statistics
   memPoolCurrentUsage = 0;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <memPoolInit+0x38>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
   memPoolMaxUsage = 0;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <memPoolInit+0x3c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
#endif

   //Successful initialization
   return NO_ERROR;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200002a0 	.word	0x200002a0
 80022e4:	2000c2a4 	.word	0x2000c2a4
 80022e8:	2000e830 	.word	0x2000e830
 80022ec:	2000e834 	.word	0x2000e834

080022f0 <memPoolAlloc>:
 * @param[in] size Bytes to allocate
 * @return Pointer to the allocated space or NULL if there is insufficient memory available
 **/

void *memPoolAlloc(size_t size)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   uint_t i;
#endif

   //Pointer to the allocated memory block
   void *p = NULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes...\r\n", size);

//Use fixed-size blocks allocation?
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   //Acquire exclusive access to the memory pool
   osAcquireMutex(&memPoolMutex);
 80022fc:	4824      	ldr	r0, [pc, #144]	; (8002390 <memPoolAlloc+0xa0>)
 80022fe:	f7fe fa4b 	bl	8000798 <osAcquireMutex>

   //Enforce block size
   if(size <= NET_MEM_POOL_BUFFER_SIZE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002308:	d82a      	bhi.n	8002360 <memPoolAlloc+0x70>
   {
      //Loop through allocation table
      for(i = 0; i < NET_MEM_POOL_BUFFER_COUNT; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e024      	b.n	800235a <memPoolAlloc+0x6a>
      {
         //Check whether the current block is free
         if(!memPoolAllocTable[i])
 8002310:	4a20      	ldr	r2, [pc, #128]	; (8002394 <memPoolAlloc+0xa4>)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d11b      	bne.n	8002354 <memPoolAlloc+0x64>
         {
            //Mark the current entry as used
            memPoolAllocTable[i] = TRUE;
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <memPoolAlloc+0xa4>)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2101      	movs	r1, #1
 8002322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            //Point to the corresponding memory block
            p = memPool[i];
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	025b      	lsls	r3, r3, #9
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <memPoolAlloc+0xa8>)
 8002332:	4413      	add	r3, r2
 8002334:	60bb      	str	r3, [r7, #8]

            //Update statistics
            memPoolCurrentUsage++;
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <memPoolAlloc+0xac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	4a17      	ldr	r2, [pc, #92]	; (800239c <memPoolAlloc+0xac>)
 800233e:	6013      	str	r3, [r2, #0]
            //Maximum number of buffers that have been allocated so far
            memPoolMaxUsage = MAX(memPoolCurrentUsage, memPoolMaxUsage);
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <memPoolAlloc+0xb0>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <memPoolAlloc+0xac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4293      	cmp	r3, r2
 800234a:	bf38      	it	cc
 800234c:	4613      	movcc	r3, r2
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <memPoolAlloc+0xb0>)
 8002350:	6013      	str	r3, [r2, #0]

            //Exit immediately
            break;
 8002352:	e005      	b.n	8002360 <memPoolAlloc+0x70>
      for(i = 0; i < NET_MEM_POOL_BUFFER_COUNT; i++)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3301      	adds	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b1f      	cmp	r3, #31
 800235e:	d9d7      	bls.n	8002310 <memPoolAlloc+0x20>
         }
      }
   }

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
 8002360:	480b      	ldr	r0, [pc, #44]	; (8002390 <memPoolAlloc+0xa0>)
 8002362:	f7fe fa28 	bl	80007b6 <osReleaseMutex>
   //Allocate a memory block
   p = osAllocMem(size);
#endif

   //Failed to allocate memory?
   if(!p)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10b      	bne.n	8002384 <memPoolAlloc+0x94>
   {
      //Debug message
      TRACE_WARNING("Memory allocation failed!\r\n");
 800236c:	f7fe f968 	bl	8000640 <osSuspendAllTasks>
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <memPoolAlloc+0xb4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	221b      	movs	r2, #27
 8002378:	2101      	movs	r1, #1
 800237a:	480b      	ldr	r0, [pc, #44]	; (80023a8 <memPoolAlloc+0xb8>)
 800237c:	f017 fde8 	bl	8019f50 <fwrite>
 8002380:	f7fe f969 	bl	8000656 <osResumeAllTasks>
   }

   //Return a pointer to the allocated memory block
   return p;
 8002384:	68bb      	ldr	r3, [r7, #8]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200002a0 	.word	0x200002a0
 8002394:	2000c2a4 	.word	0x2000c2a4
 8002398:	200002a4 	.word	0x200002a4
 800239c:	2000e830 	.word	0x2000e830
 80023a0:	2000e834 	.word	0x2000e834
 80023a4:	20000058 	.word	0x20000058
 80023a8:	0801b34c 	.word	0x0801b34c

080023ac <memPoolFree>:
 * @brief Release a memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void memPoolFree(void *p)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
//Use fixed-size blocks allocation?
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   uint_t i;

   //Acquire exclusive access to the memory pool
   osAcquireMutex(&memPoolMutex);
 80023b4:	4813      	ldr	r0, [pc, #76]	; (8002404 <memPoolFree+0x58>)
 80023b6:	f7fe f9ef 	bl	8000798 <osAcquireMutex>

   //Loop through allocation table
   for(i = 0; i < NET_MEM_POOL_BUFFER_COUNT; i++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e017      	b.n	80023f0 <memPoolFree+0x44>
   {
      if(memPool[i] == p)
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	025b      	lsls	r3, r3, #9
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <memPoolFree+0x5c>)
 80023cc:	4413      	add	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d10a      	bne.n	80023ea <memPoolFree+0x3e>
      {
         //Mark the current block as free
         memPoolAllocTable[i] = FALSE;
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <memPoolFree+0x60>)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2100      	movs	r1, #0
 80023da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

         //Update statistics
         memPoolCurrentUsage--;
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <memPoolFree+0x64>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <memPoolFree+0x64>)
 80023e6:	6013      	str	r3, [r2, #0]

         //Exit immediately
         break;
 80023e8:	e005      	b.n	80023f6 <memPoolFree+0x4a>
   for(i = 0; i < NET_MEM_POOL_BUFFER_COUNT; i++)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3301      	adds	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b1f      	cmp	r3, #31
 80023f4:	d9e4      	bls.n	80023c0 <memPoolFree+0x14>
      }
   }

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
 80023f6:	4803      	ldr	r0, [pc, #12]	; (8002404 <memPoolFree+0x58>)
 80023f8:	f7fe f9dd 	bl	80007b6 <osReleaseMutex>
#else
   //Release memory block
   osFreeMem(p);
#endif
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200002a0 	.word	0x200002a0
 8002408:	200002a4 	.word	0x200002a4
 800240c:	2000c2a4 	.word	0x2000c2a4
 8002410:	2000e830 	.word	0x2000e830

08002414 <netBufferAlloc>:
 * @return Pointer to the allocated buffer or NULL if there is
 *   insufficient memory available
 **/

NetBuffer *netBufferAlloc(size_t length)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
   error_t error;
   NetBuffer *buffer;

   //Allocate memory to hold the multi-part buffer
   buffer = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 800241c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002420:	f7ff ff66 	bl	80022f0 <memPoolAlloc>
 8002424:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(buffer == NULL)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <netBufferAlloc+0x1c>
      return NULL;
 800242c:	2300      	movs	r3, #0
 800242e:	e020      	b.n	8002472 <netBufferAlloc+0x5e>

   //The multi-part buffer consists of a single chunk
   buffer->chunkCount = 1;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]
   buffer->maxChunkCount = MAX_CHUNK_COUNT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2209      	movs	r2, #9
 800243a:	605a      	str	r2, [r3, #4]
   buffer->chunk[0].address = (uint8_t *) buffer + CHUNKED_BUFFER_HEADER_SIZE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	609a      	str	r2, [r3, #8]
   buffer->chunk[0].length = NET_MEM_POOL_BUFFER_SIZE - CHUNKED_BUFFER_HEADER_SIZE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 800244c:	819a      	strh	r2, [r3, #12]
   buffer->chunk[0].size = 0;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	81da      	strh	r2, [r3, #14]

   //Adjust the length of the buffer
   error = netBufferSetLength(buffer, length);
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f840 	bl	80024dc <netBufferSetLength>
 800245c:	4603      	mov	r3, r0
 800245e:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8002460:	897b      	ldrh	r3, [r7, #10]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <netBufferAlloc+0x5c>
   {
      //Clean up side effects
      netBufferFree(buffer);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f807 	bl	800247a <netBufferFree>
      //Report an failure
      return NULL;
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <netBufferAlloc+0x5e>
   }

   //Successful memory allocation
   return buffer;
 8002470:	68fb      	ldr	r3, [r7, #12]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <netBufferFree>:
 * @brief Dispose a multi-part buffer
 * @param[in] buffer Pointer to the multi-part buffer to be released
 **/

void netBufferFree(NetBuffer *buffer)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
   //Properly dispose data chunks
   netBufferSetLength(buffer, 0);
 8002482:	2100      	movs	r1, #0
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f829 	bl	80024dc <netBufferSetLength>
   //Release multi-part buffer
   memPoolFree(buffer);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff8e 	bl	80023ac <memPoolFree>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <netBufferGetLength>:
 * @param[in] buffer Pointer to a multi-part buffer
 * @return Actual length in bytes
 **/

size_t netBufferGetLength(const NetBuffer *buffer)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Total length
   size_t length = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e00c      	b.n	80024c4 <netBufferGetLength+0x2c>
      length += buffer->chunk[i].length;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	889b      	ldrh	r3, [r3, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4413      	add	r3, r2
 80024bc:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount; i++)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3301      	adds	r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d3ed      	bcc.n	80024aa <netBufferGetLength+0x12>

   //Return total length
   return length;
 80024ce:	68bb      	ldr	r3, [r7, #8]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <netBufferSetLength>:
 * @param[in] length Desired length
 * @return Error code
 **/

error_t netBufferSetLength(NetBuffer *buffer, size_t length)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t chunkCount;
   ChunkDesc *chunk;

   //Get the actual number of chunks
   chunkCount = buffer->chunkCount;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	613b      	str	r3, [r7, #16]

   //Loop through data chunks
   for(i = 0; i < chunkCount && length > 0; i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e02c      	b.n	800254c <netBufferSetLength+0x70>
   {
      //Point to the chunk descriptor;
      chunk = &buffer->chunk[i];
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

      //Adjust the length of the current chunk when possible
      if(length <= chunk->length)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	889b      	ldrh	r3, [r3, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4293      	cmp	r3, r2
 8002508:	d804      	bhi.n	8002514 <netBufferSetLength+0x38>
      {
         chunk->length = length;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	809a      	strh	r2, [r3, #4]
 8002512:	e012      	b.n	800253a <netBufferSetLength+0x5e>
      }
      else if(chunk->size > 0 && i == (chunkCount - 1))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88db      	ldrh	r3, [r3, #6]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00e      	beq.n	800253a <netBufferSetLength+0x5e>
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	3b01      	subs	r3, #1
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	429a      	cmp	r2, r3
 8002524:	d109      	bne.n	800253a <netBufferSetLength+0x5e>
      {
         chunk->length = MIN(length, chunk->size);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	88db      	ldrh	r3, [r3, #6]
 800252a:	461a      	mov	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4293      	cmp	r3, r2
 8002530:	bf28      	it	cs
 8002532:	4613      	movcs	r3, r2
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	809a      	strh	r2, [r3, #4]
      }

      //Prepare to process next chunk
      length -= chunk->length;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	889b      	ldrh	r3, [r3, #4]
 800253e:	461a      	mov	r2, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	603b      	str	r3, [r7, #0]
   for(i = 0; i < chunkCount && length > 0; i++)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	429a      	cmp	r2, r3
 8002552:	d202      	bcs.n	800255a <netBufferSetLength+0x7e>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1cb      	bne.n	80024f2 <netBufferSetLength+0x16>
   }

   //The size of the buffer should be decreased?
   if(!length)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d151      	bne.n	8002604 <netBufferSetLength+0x128>
   {
      //Adjust the number of chunks
      buffer->chunkCount = i;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	601a      	str	r2, [r3, #0]

      //Delete unnecessary data chunks
      while(i < chunkCount)
 8002566:	e01a      	b.n	800259e <netBufferSetLength+0xc2>
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

         //Release previously allocated memory
         if(chunk->size > 0)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	88db      	ldrh	r3, [r3, #6]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <netBufferSetLength+0xaa>
            memPoolFree(chunk->address);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff13 	bl	80023ac <memPoolFree>

         //Mark the current chunk as free
         chunk->address = NULL;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
         chunk->length = 0;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	809a      	strh	r2, [r3, #4]
         chunk->size = 0;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	80da      	strh	r2, [r3, #6]

         //Next chunk
         i++;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
      while(i < chunkCount)
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d3e0      	bcc.n	8002568 <netBufferSetLength+0x8c>
 80025a6:	e035      	b.n	8002614 <netBufferSetLength+0x138>
   {
      //Add as many chunks as necessary
      while(i < buffer->maxChunkCount && length > 0)
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3301      	adds	r3, #1
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]

         //Allocate memory to hold a new chunk
         chunk->address = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 80025b4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80025b8:	f7ff fe9a 	bl	80022f0 <memPoolAlloc>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	601a      	str	r2, [r3, #0]
         //Failed to allocate memory?
         if(!chunk->address)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <netBufferSetLength+0xf2>
            return ERROR_OUT_OF_MEMORY;
 80025ca:	2364      	movs	r3, #100	; 0x64
 80025cc:	e028      	b.n	8002620 <netBufferSetLength+0x144>

         //Allocated memory
         chunk->size = NET_MEM_POOL_BUFFER_SIZE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80025d4:	80da      	strh	r2, [r3, #6]
         //Actual length of the data chunk
         chunk->length = MIN(length, NET_MEM_POOL_BUFFER_SIZE);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025dc:	bf28      	it	cs
 80025de:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	809a      	strh	r2, [r3, #4]

         //Prepare to process next chunk
         length -= chunk->length;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	889b      	ldrh	r3, [r3, #4]
 80025ec:	461a      	mov	r2, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	603b      	str	r3, [r7, #0]
         buffer->chunkCount++;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]
         i++;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
      while(i < buffer->maxChunkCount && length > 0)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	429a      	cmp	r2, r3
 800260c:	d202      	bcs.n	8002614 <netBufferSetLength+0x138>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1c9      	bne.n	80025a8 <netBufferSetLength+0xcc>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_OUT_OF_RESOURCES : NO_ERROR;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <netBufferSetLength+0x142>
 800261a:	2365      	movs	r3, #101	; 0x65
 800261c:	e000      	b.n	8002620 <netBufferSetLength+0x144>
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <netBufferAt>:
 * @param[in] offset Offset from the beginning of the buffer
 * @return Pointer the data at the specified position
 **/

void *netBufferAt(const NetBuffer *buffer, size_t offset)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e01e      	b.n	8002676 <netBufferAt+0x4e>
   {
      //The data at the specified offset resides in the current chunk?
      if(offset < buffer->chunk[i].length)
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3301      	adds	r3, #1
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	889b      	ldrh	r3, [r3, #4]
 8002644:	461a      	mov	r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	4293      	cmp	r3, r2
 800264a:	d207      	bcs.n	800265c <netBufferAt+0x34>
         return (uint8_t *) buffer->chunk[i].address + offset;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	3201      	adds	r2, #1
 8002652:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	4413      	add	r3, r2
 800265a:	e012      	b.n	8002682 <netBufferAt+0x5a>

      //Jump to the next chunk
      offset -= buffer->chunk[i].length;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3301      	adds	r3, #1
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	889b      	ldrh	r3, [r3, #4]
 8002668:	461a      	mov	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	603b      	str	r3, [r7, #0]
   for(i = 0; i < buffer->chunkCount; i++)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3301      	adds	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d3db      	bcc.n	8002638 <netBufferAt+0x10>
   }

   //Invalid offset...
   return NULL;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <netBufferConcat>:
 * @return Error code
 **/

error_t netBufferConcat(NetBuffer *dest,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 800268e:	b480      	push	{r7}
 8002690:	b087      	sub	sp, #28
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	603b      	str	r3, [r7, #0]
   uint_t i;
   uint_t j;

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e016      	b.n	80026d0 <netBufferConcat+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	3301      	adds	r3, #1
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	889b      	ldrh	r3, [r3, #4]
 80026ae:	461a      	mov	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d312      	bcc.n	80026dc <netBufferConcat+0x4e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	3301      	adds	r3, #1
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	889b      	ldrh	r3, [r3, #4]
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	607b      	str	r3, [r7, #4]
   for(j = 0; j < src->chunkCount; j++)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	3301      	adds	r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3e3      	bcc.n	80026a2 <netBufferConcat+0x14>
 80026da:	e000      	b.n	80026de <netBufferConcat+0x50>
         break;
 80026dc:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d301      	bcc.n	80026ec <netBufferConcat+0x5e>
      return ERROR_INVALID_PARAMETER;
 80026e8:	2302      	movs	r3, #2
 80026ea:	e065      	b.n	80027b8 <netBufferConcat+0x12a>

   //Position to the end of the destination data
   i = dest->chunkCount;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	617b      	str	r3, [r7, #20]

   //Copy data blocks
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 80026f2:	e04d      	b.n	8002790 <netBufferConcat+0x102>
   {
      //Copy current block
      dest->chunk[i].address = (uint8_t *) src->chunk[j].address + srcOffset;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	3201      	adds	r2, #1
 80026fa:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	18d1      	adds	r1, r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	3201      	adds	r2, #1
 8002708:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      dest->chunk[i].length = src->chunk[j].length - srcOffset;
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3301      	adds	r3, #1
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	889a      	ldrh	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	b29b      	uxth	r3, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	b299      	uxth	r1, r3
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	460a      	mov	r2, r1
 800272c:	809a      	strh	r2, [r3, #4]
      dest->chunk[i].size = 0;
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	2200      	movs	r2, #0
 800273a:	80da      	strh	r2, [r3, #6]

      //Limit the number of bytes to copy
      if(length < dest->chunk[i].length)
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3301      	adds	r3, #1
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	889b      	ldrh	r3, [r3, #4]
 8002748:	461a      	mov	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	4293      	cmp	r3, r2
 800274e:	d208      	bcs.n	8002762 <netBufferConcat+0xd4>
         dest->chunk[i].length = length;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b299      	uxth	r1, r3
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3301      	adds	r3, #1
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	460a      	mov	r2, r1
 8002760:	809a      	strh	r2, [r3, #4]

      //Decrement the number of remaining bytes
      length -= dest->chunk[i].length;
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3301      	adds	r3, #1
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	889b      	ldrh	r3, [r3, #4]
 800276e:	461a      	mov	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	603b      	str	r3, [r7, #0]
      //Increment the number of chunks
      dest->chunkCount++;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	601a      	str	r2, [r3, #0]

      //Adjust variables
      srcOffset = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
      i++;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
      j++;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	3301      	adds	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <netBufferConcat+0x11c>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	d204      	bcs.n	80027aa <netBufferConcat+0x11c>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d3a4      	bcc.n	80026f4 <netBufferConcat+0x66>
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	b29b      	uxth	r3, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <netBufferCopy>:
 * @return Error code
 **/

error_t netBufferCopy(NetBuffer *dest, size_t destOffset,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint8_t *p;
   uint8_t *q;

   //Skip the beginning of the source data
   for(i = 0; i < dest->chunkCount; i++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	e016      	b.n	8002806 <netBufferCopy+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(destOffset < dest->chunk[i].length)
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	889b      	ldrh	r3, [r3, #4]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d312      	bcc.n	8002812 <netBufferCopy+0x4e>
         break;

      //Jump to the next chunk
      destOffset -= dest->chunk[i].length;
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	3301      	adds	r3, #1
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	889b      	ldrh	r3, [r3, #4]
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount; i++)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	3301      	adds	r3, #1
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	429a      	cmp	r2, r3
 800280e:	d3e3      	bcc.n	80027d8 <netBufferCopy+0x14>
 8002810:	e000      	b.n	8002814 <netBufferCopy+0x50>
         break;
 8002812:	bf00      	nop
   }

   //Invalid offset?
   if(i >= dest->chunkCount)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	429a      	cmp	r2, r3
 800281c:	d301      	bcc.n	8002822 <netBufferCopy+0x5e>
      return ERROR_INVALID_PARAMETER;
 800281e:	2302      	movs	r3, #2
 8002820:	e096      	b.n	8002950 <netBufferCopy+0x18c>

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
 8002826:	e016      	b.n	8002856 <netBufferCopy+0x92>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	3301      	adds	r3, #1
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	889b      	ldrh	r3, [r3, #4]
 8002834:	461a      	mov	r2, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	4293      	cmp	r3, r2
 800283a:	d312      	bcc.n	8002862 <netBufferCopy+0x9e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	3301      	adds	r3, #1
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	889b      	ldrh	r3, [r3, #4]
 8002848:	461a      	mov	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	603b      	str	r3, [r7, #0]
   for(j = 0; j < src->chunkCount; j++)
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	3301      	adds	r3, #1
 8002854:	623b      	str	r3, [r7, #32]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a3a      	ldr	r2, [r7, #32]
 800285c:	429a      	cmp	r2, r3
 800285e:	d3e3      	bcc.n	8002828 <netBufferCopy+0x64>
 8002860:	e000      	b.n	8002864 <netBufferCopy+0xa0>
         break;
 8002862:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	429a      	cmp	r2, r3
 800286c:	d35c      	bcc.n	8002928 <netBufferCopy+0x164>
      return ERROR_INVALID_PARAMETER;
 800286e:	2302      	movs	r3, #2
 8002870:	e06e      	b.n	8002950 <netBufferCopy+0x18c>

   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
   {
      //Point to the first data byte
      p = (uint8_t *) dest->chunk[i].address + destOffset;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	3201      	adds	r2, #1
 8002878:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4413      	add	r3, r2
 8002880:	61fb      	str	r3, [r7, #28]
      q = (uint8_t *) src->chunk[j].address + srcOffset;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a3a      	ldr	r2, [r7, #32]
 8002886:	3201      	adds	r2, #1
 8002888:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4413      	add	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]

      //Compute the number of bytes to copy
      n = MIN(length, dest->chunk[i].length - destOffset);
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3301      	adds	r3, #1
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	889b      	ldrh	r3, [r3, #4]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a6:	4293      	cmp	r3, r2
 80028a8:	bf28      	it	cs
 80028aa:	4613      	movcs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
      n = MIN(n, src->chunk[j].length - srcOffset);
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	3301      	adds	r3, #1
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	889b      	ldrh	r3, [r3, #4]
 80028ba:	461a      	mov	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	bf28      	it	cs
 80028c6:	4613      	movcs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

      //Copy data
      memcpy(p, q, n);
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	69b9      	ldr	r1, [r7, #24]
 80028ce:	69f8      	ldr	r0, [r7, #28]
 80028d0:	f017 fba0 	bl	801a014 <memcpy>

      destOffset += n;
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4413      	add	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
      srcOffset += n;
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4413      	add	r3, r2
 80028e2:	603b      	str	r3, [r7, #0]
      length -= n;
 80028e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30

      if(destOffset >= dest->chunk[i].length)
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	3301      	adds	r3, #1
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	889b      	ldrh	r3, [r3, #4]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d304      	bcc.n	800290a <netBufferCopy+0x146>
      {
         destOffset = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
         i++;
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	3301      	adds	r3, #1
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if(srcOffset >= src->chunk[j].length)
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	3301      	adds	r3, #1
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	889b      	ldrh	r3, [r3, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4293      	cmp	r3, r2
 800291c:	d304      	bcc.n	8002928 <netBufferCopy+0x164>
      {
         srcOffset = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	603b      	str	r3, [r7, #0]
         j++;
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	3301      	adds	r3, #1
 8002926:	623b      	str	r3, [r7, #32]
   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <netBufferCopy+0x17e>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	429a      	cmp	r2, r3
 8002936:	d204      	bcs.n	8002942 <netBufferCopy+0x17e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	429a      	cmp	r2, r3
 8002940:	d397      	bcc.n	8002872 <netBufferCopy+0xae>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	b29b      	uxth	r3, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <netBufferAppend>:
 * @param[in] length Number of bytes in the user buffer
 * @return Error code
 **/

error_t netBufferAppend(NetBuffer *dest, const void *src, size_t length)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
   uint_t i;

   //Make sure there is enough space to add an extra chunk
   if(dest->chunkCount >= dest->maxChunkCount)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d301      	bcc.n	8002974 <netBufferAppend+0x1c>
      return ERROR_FAILURE;
 8002970:	2301      	movs	r3, #1
 8002972:	e01e      	b.n	80029b2 <netBufferAppend+0x5a>

   //Position to the end of the buffer
   i = dest->chunkCount;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	617b      	str	r3, [r7, #20]

   //Insert a new chunk at the end of the list
   dest->chunk[i].address = (void *) src;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	3201      	adds	r2, #1
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
   dest->chunk[i].length = length;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	b299      	uxth	r1, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3301      	adds	r3, #1
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	460a      	mov	r2, r1
 8002996:	809a      	strh	r2, [r3, #4]
   dest->chunk[i].size = 0;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3301      	adds	r3, #1
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	2200      	movs	r2, #0
 80029a4:	80da      	strh	r2, [r3, #6]

   //Increment the number of chunks
   dest->chunkCount++;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <netBufferWrite>:
 * @return Actual number of bytes copied
 **/

size_t netBufferWrite(NetBuffer *dest,
   size_t destOffset, const void *src, size_t length)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b088      	sub	sp, #32
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes written
   totalLength = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]

   //Loop through data chunks
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	e03e      	b.n	8002a54 <netBufferWrite+0x96>
   {
      //Is there any data to copy in the current chunk?
      if(destOffset < dest->chunk[i].length)
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	3301      	adds	r3, #1
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	889b      	ldrh	r3, [r3, #4]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d227      	bcs.n	8002a3a <netBufferWrite+0x7c>
      {
         //Point to the first byte to be written
         p = (uint8_t *) dest->chunk[i].address + destOffset;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	3201      	adds	r2, #1
 80029f0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4413      	add	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, dest->chunk[i].length - destOffset);
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	3301      	adds	r3, #1
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	889b      	ldrh	r3, [r3, #4]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1acb      	subs	r3, r1, r3
 8002a12:	4293      	cmp	r3, r2
 8002a14:	bf28      	it	cs
 8002a16:	4613      	movcs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]

         //Copy data
         memcpy(p, src, n);
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f017 faf8 	bl	801a014 <memcpy>

         //Advance read pointer
         src = (uint8_t *) src + n;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	607b      	str	r3, [r7, #4]
         //Total number of bytes written
         totalLength += n;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
         //Process the next block from the start
         destOffset = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	e009      	b.n	8002a4e <netBufferWrite+0x90>
      }
      else
      {
         //Skip the current chunk
         destOffset -= dest->chunk[i].length;
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	889b      	ldrh	r3, [r3, #4]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d203      	bcs.n	8002a66 <netBufferWrite+0xa8>
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d3b7      	bcc.n	80029d6 <netBufferWrite+0x18>
      }
   }

   //Return the actual number of bytes written
   return totalLength;
 8002a66:	69bb      	ldr	r3, [r7, #24]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <nicGetPhysicalInterface>:
 * @param[in] interface Pointer to the network interface
 * @return Pointer to the physical interface
 **/

NetInterface *nicGetPhysicalInterface(NetInterface *interface)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
      interface = interface->parent;
   }
#endif

   //Return a pointer to the physical interface
   return interface;
 8002a78:	687b      	ldr	r3, [r7, #4]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <nicGetSwitchPort>:
 * @param[in] interface Pointer to the network interface
 * @return Switch port identifier
 **/

uint8_t nicGetSwitchPort(NetInterface *interface)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]

   //Return switch port identifier
   return interface->port;
#else
   //Ethernet port multiplication (VLAN or tail tagging) is not supported
   return 0;
 8002a8e:	2300      	movs	r3, #0
#endif
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <nicIsParentInterface>:
 * @param[in] parent Pointer to the parent interface
 * @return TRUE is an existing parent/child relationship is found, else FALSE
 **/

bool_t nicIsParentInterface(NetInterface *interface, NetInterface *parent)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]

   //Return TRUE is an existing parent/child relationship is found
   return flag;
#else
   //Virtual interfaces are not supported
   return (interface == parent) ? TRUE : FALSE;
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
#endif
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <nicTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void nicTick(NetInterface *interface)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <nicTick+0x38>
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3

      //Handle periodic operations
      interface->nicDriver->tick(interface);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3

      //Re-enable interrupts if necessary
      if(interface->configured)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <nicTick+0x38>
      {
         interface->nicDriver->enableIrq(interface);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
      }
   }
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <nicSendPacket>:
 * @return Error code
 **/

error_t nicSendPacket(NetInterface *interface, const NetBuffer *buffer,
   size_t offset)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
   TRACE_DEBUG("Sending packet (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG_NET_BUFFER("  ", buffer, offset, length);
#endif

   //Check whether the interface is enabled for operation
   if(interface->configured && interface->nicDriver != NULL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d033      	beq.n	8002b7e <nicSendPacket+0x7e>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02f      	beq.n	8002b7e <nicSendPacket+0x7e>
   {
      //Loopback interface?
      if(interface->nicDriver->type == NIC_TYPE_LOOPBACK)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d102      	bne.n	8002b2e <nicSendPacket+0x2e>
      {
         //The loopback interface is always available
         status = TRUE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	e007      	b.n	8002b3e <nicSendPacket+0x3e>
      }
      else
      {
         //Wait for the transmitter to be ready to send
         status = osWaitForEvent(&interface->nicTxEvent, NIC_MAX_BLOCKING_TIME);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3370      	adds	r3, #112	; 0x70
 8002b32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fde4 	bl	8000704 <osWaitForEvent>
 8002b3c:	6138      	str	r0, [r7, #16]
      }

      //Check whether the specified event is in signaled state
      if(status)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d018      	beq.n	8002b76 <nicSendPacket+0x76>
      {
         //Disable interrupts
         interface->nicDriver->disableIrq(interface);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	4798      	blx	r3

         //Send Ethernet frame
         error = interface->nicDriver->sendPacket(interface, buffer, offset);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	4798      	blx	r3
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	82fb      	strh	r3, [r7, #22]

         //Re-enable interrupts if necessary
         if(interface->configured)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <nicSendPacket+0x84>
         {
            interface->nicDriver->enableIrq(interface);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	4798      	blx	r3
      if(status)
 8002b74:	e006      	b.n	8002b84 <nicSendPacket+0x84>
         }
      }
      else
      {
         //The transmitter is busy
         error = ERROR_TRANSMITTER_BUSY;
 8002b76:	f240 1311 	movw	r3, #273	; 0x111
 8002b7a:	82fb      	strh	r3, [r7, #22]
      if(status)
 8002b7c:	e002      	b.n	8002b84 <nicSendPacket+0x84>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8002b7e:	2307      	movs	r3, #7
 8002b80:	82fb      	strh	r3, [r7, #22]
 8002b82:	e000      	b.n	8002b86 <nicSendPacket+0x86>
      if(status)
 8002b84:	bf00      	nop
   }

   //Return status code
   return error;
 8002b86:	8afb      	ldrh	r3, [r7, #22]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <nicProcessPacket>:
 * @param[in] packet Incoming packet to process
 * @param[in] length Total packet length
 **/

void nicProcessPacket(NetInterface *interface, uint8_t *packet, size_t length)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
   NicType type;

   //Check whether the interface is enabled for operation
   if(interface->configured)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d015      	beq.n	8002bd2 <nicProcessPacket+0x42>
   {
      //Re-enable interrupts
      interface->nicDriver->enableIrq(interface);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	4798      	blx	r3
      //Debug message
      TRACE_DEBUG("Packet received (%" PRIuSIZE " bytes)...\r\n", length);
      TRACE_DEBUG_ARRAY("  ", packet, length);

      //Retrieve network interface type
      type = interface->nicDriver->type;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	75fb      	strb	r3, [r7, #23]
      }
      else
#endif
#if (PPP_SUPPORT == ENABLED)
      //PPP interface?
      if(type == NIC_TYPE_PPP)
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d104      	bne.n	8002bc8 <nicProcessPacket+0x38>
      {
         //Process incoming PPP frame
         pppProcessFrame(interface, packet, length);
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f009 fcd8 	bl	800c578 <pppProcessFrame>
      {
         //Silently discard the received packet
      }

      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	4798      	blx	r3
   }
}
 8002bd2:	bf00      	nop
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <nicNotifyLinkChange>:
 * @brief Process link state change notification
 * @param[in] interface Underlying network interface
 **/

void nicNotifyLinkChange(NetInterface *interface)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
   uint_t i;
   NetInterface *physicalInterface;
   NetInterface *virtualInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff43 	bl	8002a70 <nicGetPhysicalInterface>
 8002bea:	6138      	str	r0, [r7, #16]

   //Re-enable interrupts if necessary
   if(physicalInterface->configured)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <nicNotifyLinkChange+0x24>
   {
      physicalInterface->nicDriver->enableIrq(physicalInterface);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	6938      	ldr	r0, [r7, #16]
 8002bfe:	4798      	blx	r3
   }

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e02f      	b.n	8002c66 <nicNotifyLinkChange+0x8a>
   {
      //Point to the current interface
      virtualInterface = &netInterface[i];
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <nicNotifyLinkChange+0xa4>)
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

      //Check whether the current virtual interface is attached to the physical
      //interface
      if(nicIsParentInterface(virtualInterface, interface) &&
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff ff3f 	bl	8002a9c <nicIsParentInterface>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01d      	beq.n	8002c60 <nicNotifyLinkChange+0x84>
         nicGetSwitchPort(virtualInterface) == nicGetSwitchPort(interface))
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff ff2e 	bl	8002a86 <nicGetSwitchPort>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461c      	mov	r4, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ff29 	bl	8002a86 <nicGetSwitchPort>
 8002c34:	4603      	mov	r3, r0
      if(nicIsParentInterface(virtualInterface, interface) &&
 8002c36:	429c      	cmp	r4, r3
 8002c38:	d112      	bne.n	8002c60 <nicNotifyLinkChange+0x84>
      {
         //Set operation mode
         virtualInterface->linkSpeed = interface->linkSpeed;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         virtualInterface->duplexMode = interface->duplexMode;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

         //Update link state
         virtualInterface->linkState = interface->linkState;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	67da      	str	r2, [r3, #124]	; 0x7c

         //Process link state change event
         netProcessLinkChange(virtualInterface);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff f856 	bl	8001d0c <netProcessLinkChange>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	3301      	adds	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0cc      	beq.n	8002c06 <nicNotifyLinkChange+0x2a>
      }
   }

   //Disable interrupts
   physicalInterface->nicDriver->disableIrq(physicalInterface);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	6938      	ldr	r0, [r7, #16]
 8002c74:	4798      	blx	r3
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000e464 	.word	0x2000e464

08002c84 <socketInit>:
 * @brief Socket related initialization
 * @return Error code
 **/

error_t socketInit(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
   uint_t i;
   uint_t j;

   //Initialize socket descriptors
   memset(socketTable, 0, sizeof(socketTable));
 8002c8a:	f241 6208 	movw	r2, #5640	; 0x1608
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4820      	ldr	r0, [pc, #128]	; (8002d14 <socketInit+0x90>)
 8002c92:	f017 f9e3 	bl	801a05c <memset>

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	e032      	b.n	8002d02 <socketInit+0x7e>
   {
      //Set socket identifier
      socketTable[i].descriptor = i;
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <socketInit+0x90>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f44f 710d 	mov.w	r1, #564	; 0x234
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]

      //Create an event object to track socket events
      if(!osCreateEvent(&socketTable[i].event))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002cb4:	fb02 f303 	mul.w	r3, r2, r3
 8002cb8:	3330      	adds	r3, #48	; 0x30
 8002cba:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <socketInit+0x90>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fcd3 	bl	800066c <osCreateEvent>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d117      	bne.n	8002cfc <socketInit+0x78>
      {
         //Clean up side effects
         for(j = 0; j < i; j++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	e00e      	b.n	8002cf0 <socketInit+0x6c>
            osDeleteEvent(&socketTable[j].event);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	3330      	adds	r3, #48	; 0x30
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <socketInit+0x90>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fce1 	bl	80006ac <osDeleteEvent>
         for(j = 0; j < i; j++)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d3ec      	bcc.n	8002cd2 <socketInit+0x4e>

         //Report an error
         return ERROR_OUT_OF_RESOURCES;
 8002cf8:	2365      	movs	r3, #101	; 0x65
 8002cfa:	e006      	b.n	8002d0a <socketInit+0x86>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b09      	cmp	r3, #9
 8002d06:	d9c9      	bls.n	8002c9c <socketInit+0x18>
      }
   }

   //Successful initialization
   return NO_ERROR;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	2000e83c 	.word	0x2000e83c

08002d18 <socketOpen>:
 * @param[in] protocol Protocol to be used
 * @return Handle referencing the new socket
 **/

Socket *socketOpen(uint_t type, uint_t protocol)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
   uint16_t port;
   Socket *socket;
   OsEvent event;

   //Initialize socket handle
   socket = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002d26:	483c      	ldr	r0, [pc, #240]	; (8002e18 <socketOpen+0x100>)
 8002d28:	f7fd fd36 	bl	8000798 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(type == SOCKET_TYPE_STREAM)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d108      	bne.n	8002d44 <socketOpen+0x2c>
   {
      //Always use TCP as underlying transport protocol
      protocol = SOCKET_IP_PROTO_TCP;
 8002d32:	2306      	movs	r3, #6
 8002d34:	603b      	str	r3, [r7, #0]
      //Get an ephemeral port number
      port = tcpGetDynamicPort();
 8002d36:	f000 f9ed 	bl	8003114 <tcpGetDynamicPort>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	82fb      	strh	r3, [r7, #22]
      //Continue processing
      error = NO_ERROR;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	83fb      	strh	r3, [r7, #30]
 8002d42:	e00d      	b.n	8002d60 <socketOpen+0x48>
   }
   else
#endif
#if (UDP_SUPPORT == ENABLED)
   //Connectionless socket?
   if(type == SOCKET_TYPE_DGRAM)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d108      	bne.n	8002d5c <socketOpen+0x44>
   {
      //Always use UDP as underlying transport protocol
      protocol = SOCKET_IP_PROTO_UDP;
 8002d4a:	2311      	movs	r3, #17
 8002d4c:	603b      	str	r3, [r7, #0]
      //Get an ephemeral port number
      port = udpGetDynamicPort();
 8002d4e:	f003 fafd 	bl	800634c <udpGetDynamicPort>
 8002d52:	4603      	mov	r3, r0
 8002d54:	82fb      	strh	r3, [r7, #22]
      //Continue processing
      error = NO_ERROR;
 8002d56:	2300      	movs	r3, #0
 8002d58:	83fb      	strh	r3, [r7, #30]
 8002d5a:	e001      	b.n	8002d60 <socketOpen+0x48>
   }
   else
#endif
   {
      //The socket type is not supported
      error = ERROR_INVALID_PARAMETER;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	83fb      	strh	r3, [r7, #30]
   }

   //Check status code
   if(!error)
 8002d60:	8bfb      	ldrh	r3, [r7, #30]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d150      	bne.n	8002e08 <socketOpen+0xf0>
   {
      //Loop through socket descriptors
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e016      	b.n	8002d9a <socketOpen+0x82>
      {
         //Unused socket found?
         if(socketTable[i].type == SOCKET_TYPE_UNUSED)
 8002d6c:	4a2b      	ldr	r2, [pc, #172]	; (8002e1c <socketOpen+0x104>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f44f 710d 	mov.w	r1, #564	; 0x234
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <socketOpen+0x7c>
         {
            //Save socket handle
            socket = &socketTable[i];
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <socketOpen+0x104>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
            //We are done
            break;
 8002d92:	e005      	b.n	8002da0 <socketOpen+0x88>
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	3301      	adds	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b09      	cmp	r3, #9
 8002d9e:	d9e5      	bls.n	8002d6c <socketOpen+0x54>
         }
      }

#if (TCP_SUPPORT == ENABLED)
      //No more sockets available?
      if(socket == NULL)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <socketOpen+0x94>
      {
         //Kill the oldest connection in the TIME-WAIT state
         //whenever the socket table runs out of space
         socket = tcpKillOldestConnection();
 8002da6:	f000 fcdb 	bl	8003760 <tcpKillOldestConnection>
 8002daa:	6138      	str	r0, [r7, #16]
      }
#endif

      //Check whether the current entry is free
      if(socket != NULL)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d02a      	beq.n	8002e08 <socketOpen+0xf0>
      {
         //Save socket descriptor
         i = socket->descriptor;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	61bb      	str	r3, [r7, #24]
         //Save event object instance
         memcpy(&event, &socket->event, sizeof(OsEvent));
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	3334      	adds	r3, #52	; 0x34
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

         //Clear associated structure
         memset(socket, 0, sizeof(Socket));
 8002dc0:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	6938      	ldr	r0, [r7, #16]
 8002dc8:	f017 f948 	bl	801a05c <memset>
         //Reuse event objects and avoid recreating them whenever possible
         memcpy(&socket->event, &event, sizeof(OsEvent));
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	3334      	adds	r3, #52	; 0x34
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

         //Save socket characteristics
         socket->descriptor = i;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	601a      	str	r2, [r3, #0]
         socket->type = type;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	605a      	str	r2, [r3, #4]
         socket->protocol = protocol;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	609a      	str	r2, [r3, #8]
         socket->localPort = port;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	8afa      	ldrh	r2, [r7, #22]
 8002dea:	831a      	strh	r2, [r3, #24]
         socket->timeout = INFINITE_DELAY;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28

#if (TCP_SUPPORT == ENABLED)
         socket->txBufferSize = MIN(TCP_DEFAULT_TX_BUFFER_SIZE, TCP_MAX_TX_BUFFER_SIZE);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f640 322c 	movw	r2, #2860	; 0xb2c
 8002dfa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
         socket->rxBufferSize = MIN(TCP_DEFAULT_RX_BUFFER_SIZE, TCP_MAX_RX_BUFFER_SIZE);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f640 322c 	movw	r2, #2860	; 0xb2c
 8002e04:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002e08:	4803      	ldr	r0, [pc, #12]	; (8002e18 <socketOpen+0x100>)
 8002e0a:	f7fd fcd4 	bl	80007b6 <osReleaseMutex>

   //Return a handle to the freshly created socket
   return socket;
 8002e0e:	693b      	ldr	r3, [r7, #16]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000e460 	.word	0x2000e460
 8002e1c:	2000e83c 	.word	0x2000e83c

08002e20 <socketSetTimeout>:
 * @param[in] timeout Maximum time to wait
 * @return Error code
 **/

error_t socketSetTimeout(Socket *socket, systime_t timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
   //Make sure the socket handle is valid
   if(socket == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <socketSetTimeout+0x14>
      return ERROR_INVALID_PARAMETER;
 8002e30:	2302      	movs	r3, #2
 8002e32:	e009      	b.n	8002e48 <socketSetTimeout+0x28>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002e34:	4806      	ldr	r0, [pc, #24]	; (8002e50 <socketSetTimeout+0x30>)
 8002e36:	f7fd fcaf 	bl	8000798 <osAcquireMutex>
   //Record timeout value
   socket->timeout = timeout;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002e40:	4803      	ldr	r0, [pc, #12]	; (8002e50 <socketSetTimeout+0x30>)
 8002e42:	f7fd fcb8 	bl	80007b6 <osReleaseMutex>

   //No error to report
   return NO_ERROR;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	2000e460 	.word	0x2000e460

08002e54 <socketSetInterface>:
 * @param[in] interface Network interface to be used
 * @return Error code
 **/

error_t socketSetInterface(Socket *socket, NetInterface *interface)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
   //Make sure the socket handle is valid
   if(socket == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <socketSetInterface+0x14>
      return ERROR_INVALID_PARAMETER;
 8002e64:	2302      	movs	r3, #2
 8002e66:	e003      	b.n	8002e70 <socketSetInterface+0x1c>

   //Explicitly associate the socket with the specified interface
   socket->interface = interface;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	60da      	str	r2, [r3, #12]

   //No error to report
   return NO_ERROR;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <socketConnect>:
 * @param[in] remotePort Remote port number that will be used to establish the connection
 * @return Error code
 **/

error_t socketConnect(Socket *socket, const IpAddr *remoteIpAddr, uint16_t remotePort)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //Check input parameters
   if(!socket || !remoteIpAddr)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <socketConnect+0x1a>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <socketConnect+0x1e>
      return ERROR_INVALID_PARAMETER;
 8002e96:	2302      	movs	r3, #2
 8002e98:	e034      	b.n	8002f04 <socketConnect+0x88>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d10e      	bne.n	8002ec0 <socketConnect+0x44>
   {
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8002ea2:	481a      	ldr	r0, [pc, #104]	; (8002f0c <socketConnect+0x90>)
 8002ea4:	f7fd fc78 	bl	8000798 <osAcquireMutex>

      //Establish TCP connection
      error = tcpConnect(socket, remoteIpAddr, remotePort);
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f95e 	bl	8003170 <tcpConnect>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	82fb      	strh	r3, [r7, #22]

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8002eb8:	4814      	ldr	r0, [pc, #80]	; (8002f0c <socketConnect+0x90>)
 8002eba:	f7fd fc7c 	bl	80007b6 <osReleaseMutex>
 8002ebe:	e020      	b.n	8002f02 <socketConnect+0x86>
   }
   else
#endif
   //Connectionless socket?
   if(socket->type == SOCKET_TYPE_DGRAM)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d10c      	bne.n	8002ee2 <socketConnect+0x66>
   {
      //Save port number and IP address of the remote host
      socket->remoteIpAddr = *remoteIpAddr;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	331c      	adds	r3, #28
 8002ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ed2:	e883 0003 	stmia.w	r3, {r0, r1}
      socket->remotePort = remotePort;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	849a      	strh	r2, [r3, #36]	; 0x24
      //No error to report
      error = NO_ERROR;
 8002edc:	2300      	movs	r3, #0
 8002ede:	82fb      	strh	r3, [r7, #22]
 8002ee0:	e00f      	b.n	8002f02 <socketConnect+0x86>
   }
   //Raw socket?
   else if(socket->type == SOCKET_TYPE_RAW_IP)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d109      	bne.n	8002efe <socketConnect+0x82>
   {
      //Save the IP address of the remote host
      socket->remoteIpAddr = *remoteIpAddr;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	331c      	adds	r3, #28
 8002ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ef4:	e883 0003 	stmia.w	r3, {r0, r1}
      //No error to report
      error = NO_ERROR;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	82fb      	strh	r3, [r7, #22]
 8002efc:	e001      	b.n	8002f02 <socketConnect+0x86>
   }
   //Socket type not supported...
   else
   {
      //Invalid socket type
      error = ERROR_INVALID_SOCKET;
 8002efe:	23d0      	movs	r3, #208	; 0xd0
 8002f00:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8002f02:	8afb      	ldrh	r3, [r7, #22]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	2000e460 	.word	0x2000e460

08002f10 <socketShutdown>:
 * @param[in] how Flag that describes what types of operation will no longer be allowed
 * @return Error code
 **/

error_t socketShutdown(Socket *socket, uint_t how)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
#if (TCP_SUPPORT == ENABLED)
   error_t error;

   //Make sure the socket handle is valid
   if(socket == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <socketShutdown+0x14>
      return ERROR_INVALID_PARAMETER;
 8002f20:	2302      	movs	r3, #2
 8002f22:	e01d      	b.n	8002f60 <socketShutdown+0x50>
   //Make sure the socket type is correct
   if(socket->type != SOCKET_TYPE_STREAM)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d001      	beq.n	8002f30 <socketShutdown+0x20>
      return ERROR_INVALID_SOCKET;
 8002f2c:	23d0      	movs	r3, #208	; 0xd0
 8002f2e:	e017      	b.n	8002f60 <socketShutdown+0x50>
   //Check flags
   if((how != SOCKET_SD_SEND) && (how != SOCKET_SD_RECEIVE) && (how != SOCKET_SD_BOTH))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d007      	beq.n	8002f46 <socketShutdown+0x36>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <socketShutdown+0x36>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d001      	beq.n	8002f46 <socketShutdown+0x36>
      return ERROR_INVALID_PARAMETER;
 8002f42:	2302      	movs	r3, #2
 8002f44:	e00c      	b.n	8002f60 <socketShutdown+0x50>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002f46:	4808      	ldr	r0, [pc, #32]	; (8002f68 <socketShutdown+0x58>)
 8002f48:	f7fd fc26 	bl	8000798 <osAcquireMutex>

   //Graceful shutdown
   error = tcpShutdown(socket, how);
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fab0 	bl	80034b4 <tcpShutdown>
 8002f54:	4603      	mov	r3, r0
 8002f56:	81fb      	strh	r3, [r7, #14]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002f58:	4803      	ldr	r0, [pc, #12]	; (8002f68 <socketShutdown+0x58>)
 8002f5a:	f7fd fc2c 	bl	80007b6 <osReleaseMutex>

   //Return status code
   return error;
 8002f5e:	89fb      	ldrh	r3, [r7, #14]
#else
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	2000e460 	.word	0x2000e460

08002f6c <socketClose>:
 * @brief Close an existing socket
 * @param[in] socket Handle identifying the socket to close
 **/

void socketClose(Socket *socket)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
   //Make sure the socket handle is valid
   if(socket == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02e      	beq.n	8002fd8 <socketClose+0x6c>
      return;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002f7a:	4819      	ldr	r0, [pc, #100]	; (8002fe0 <socketClose+0x74>)
 8002f7c:	f7fd fc0c 	bl	8000798 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d102      	bne.n	8002f8e <socketClose+0x22>
   {
      //Abort the current TCP connection
      tcpAbort(socket);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fb9d 	bl	80036c8 <tcpAbort>
   }
#endif
#if (UDP_SUPPORT == ENABLED || RAW_SOCKET_SUPPORT == ENABLED)
   //Connectionless socket or raw socket?
   if(socket->type == SOCKET_TYPE_DGRAM ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d007      	beq.n	8002fa6 <socketClose+0x3a>
      socket->type == SOCKET_TYPE_RAW_IP ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
   if(socket->type == SOCKET_TYPE_DGRAM ||
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d003      	beq.n	8002fa6 <socketClose+0x3a>
      socket->type == SOCKET_TYPE_RAW_ETH)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
      socket->type == SOCKET_TYPE_RAW_IP ||
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d114      	bne.n	8002fd0 <socketClose+0x64>
   {
      //Point to the first item in the receive queue
      SocketQueueItem *queueItem = socket->receiveQueue;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8002fac:	60fb      	str	r3, [r7, #12]

      //Purge the receive queue
      while(queueItem)
 8002fae:	e009      	b.n	8002fc4 <socketClose+0x58>
      {
         //Keep track of the next item in the queue
         SocketQueueItem *nextQueueItem = queueItem->next;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60bb      	str	r3, [r7, #8]
         //Free previously allocated memory
         memPoolFree(queueItem->buffer);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f9f6 	bl	80023ac <memPoolFree>
         //Point to the next item
         queueItem = nextQueueItem;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60fb      	str	r3, [r7, #12]
      while(queueItem)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f2      	bne.n	8002fb0 <socketClose+0x44>
      }

      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	605a      	str	r2, [r3, #4]
   }
#endif

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002fd0:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <socketClose+0x74>)
 8002fd2:	f7fd fbf0 	bl	80007b6 <osReleaseMutex>
 8002fd6:	e000      	b.n	8002fda <socketClose+0x6e>
      return;
 8002fd8:	bf00      	nop
}
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	2000e460 	.word	0x2000e460

08002fe4 <getHostByName>:
 * @return Error code
 **/

error_t getHostByName(NetInterface *interface,
   const char_t *name, IpAddr *ipAddr, uint_t flags)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
   HostType type;
   HostnameResolver protocol;

   //Default address type depends on TCP/IP stack configuration
#if (IPV4_SUPPORT == ENABLED)
   type = HOST_TYPE_IPV4;
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	757b      	strb	r3, [r7, #21]
   type = HOST_TYPE_ANY;
#endif

   //Default name resolution protocol depends on TCP/IP stack configuration
#if (DNS_CLIENT_SUPPORT == ENABLED)
   protocol = HOST_NAME_RESOLVER_DNS;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	753b      	strb	r3, [r7, #20]
#else
   protocol = HOST_NAME_RESOLVER_ANY;
#endif

   //Check parameters
   if(name == NULL || ipAddr == NULL)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <getHostByName+0x22>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <getHostByName+0x26>
      return ERROR_INVALID_PARAMETER;
 8003006:	2302      	movs	r3, #2
 8003008:	e06f      	b.n	80030ea <getHostByName+0x106>

   //Use default network interface?
   if(interface == NULL)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <getHostByName+0x32>
      interface = netGetDefaultInterface();
 8003010:	f7ff f8b8 	bl	8002184 <netGetDefaultInterface>
 8003014:	60f8      	str	r0, [r7, #12]

   //The specified name can be either an IP or a host name
   error = ipStringToAddr(name, ipAddr);
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	68b8      	ldr	r0, [r7, #8]
 800301a:	f7fe fcb8 	bl	800198e <ipStringToAddr>
 800301e:	4603      	mov	r3, r0
 8003020:	82fb      	strh	r3, [r7, #22]

   //Perform name resolution if necessary
   if(error)
 8003022:	8afb      	ldrh	r3, [r7, #22]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d05f      	beq.n	80030e8 <getHostByName+0x104>
   {
      //The user may provide a hint to choose between IPv4 and IPv6
      if(flags & HOST_TYPE_IPV4)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <getHostByName+0x54>
         type = HOST_TYPE_IPV4;
 8003032:	2310      	movs	r3, #16
 8003034:	757b      	strb	r3, [r7, #21]
 8003036:	e006      	b.n	8003046 <getHostByName+0x62>
      else if(flags & HOST_TYPE_IPV6)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <getHostByName+0x62>
         type = HOST_TYPE_IPV6;
 8003042:	2320      	movs	r3, #32
 8003044:	757b      	strb	r3, [r7, #21]

      //The user may provide a hint to to select the desired protocol to be used
      if(flags & HOST_NAME_RESOLVER_DNS)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <getHostByName+0x72>
      {
         //Use DNS to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_DNS;
 8003050:	2301      	movs	r3, #1
 8003052:	753b      	strb	r3, [r7, #20]
 8003054:	e03a      	b.n	80030cc <getHostByName+0xe8>
      }
      else if(flags & HOST_NAME_RESOLVER_MDNS)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <getHostByName+0x82>
      {
         //Use mDNS to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_MDNS;
 8003060:	2302      	movs	r3, #2
 8003062:	753b      	strb	r3, [r7, #20]
 8003064:	e032      	b.n	80030cc <getHostByName+0xe8>
      }
      else if(flags & HOST_NAME_RESOLVER_NBNS)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <getHostByName+0x92>
      {
         //Use NBNS to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_NBNS;
 8003070:	2304      	movs	r3, #4
 8003072:	753b      	strb	r3, [r7, #20]
 8003074:	e02a      	b.n	80030cc <getHostByName+0xe8>
      }
      else if(flags & HOST_NAME_RESOLVER_LLMNR)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <getHostByName+0xa2>
      {
         //Use LLMNR to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_LLMNR;
 8003080:	2308      	movs	r3, #8
 8003082:	753b      	strb	r3, [r7, #20]
 8003084:	e022      	b.n	80030cc <getHostByName+0xe8>
      }
      else
      {
         //Retrieve the length of the host name to be resolved
         size_t n = strlen(name);
 8003086:	68b8      	ldr	r0, [r7, #8]
 8003088:	f7fd f8b2 	bl	80001f0 <strlen>
 800308c:	6138      	str	r0, [r7, #16]

         //Select the most suitable protocol
         if(n >= 6 && !strcasecmp(name + n - 6, ".local"))
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b05      	cmp	r3, #5
 8003092:	d91b      	bls.n	80030cc <getHostByName+0xe8>
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	3b06      	subs	r3, #6
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	4413      	add	r3, r2
 800309c:	4915      	ldr	r1, [pc, #84]	; (80030f4 <getHostByName+0x110>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f017 fb84 	bl	801a7ac <strcasecmp>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d010      	beq.n	80030cc <getHostByName+0xe8>
#if (MDNS_CLIENT_SUPPORT == ENABLED)
            //Use mDNS to resolve the specified host name
            protocol = HOST_NAME_RESOLVER_MDNS;
#endif
         }
         else if(n <= 15 && !strchr(name, '.') && type == HOST_TYPE_IPV4)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b0f      	cmp	r3, #15
 80030ae:	d80d      	bhi.n	80030cc <getHostByName+0xe8>
 80030b0:	212e      	movs	r1, #46	; 0x2e
 80030b2:	68b8      	ldr	r0, [r7, #8]
 80030b4:	f017 fb98 	bl	801a7e8 <strchr>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <getHostByName+0xe8>
 80030be:	7d7b      	ldrb	r3, [r7, #21]
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d003      	beq.n	80030cc <getHostByName+0xe8>
#if (NBNS_CLIENT_SUPPORT == ENABLED)
            //Use NetBIOS Name Service to resolve the specified host name
            protocol = HOST_NAME_RESOLVER_NBNS;
#endif
         }
         else if(!strchr(name, '.'))
 80030c4:	212e      	movs	r1, #46	; 0x2e
 80030c6:	68b8      	ldr	r0, [r7, #8]
 80030c8:	f017 fb8e 	bl	801a7e8 <strchr>
         }
      }

#if (DNS_CLIENT_SUPPORT == ENABLED)
      //Use DNS protocol?
      if(protocol == HOST_NAME_RESOLVER_DNS)
 80030cc:	7d3b      	ldrb	r3, [r7, #20]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d108      	bne.n	80030e4 <getHostByName+0x100>
      {
         //Perform host name resolution
         error = dnsResolve(interface, name, type, ipAddr);
 80030d2:	7d7a      	ldrb	r2, [r7, #21]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f003 fdf7 	bl	8006ccc <dnsResolve>
 80030de:	4603      	mov	r3, r0
 80030e0:	82fb      	strh	r3, [r7, #22]
 80030e2:	e001      	b.n	80030e8 <getHostByName+0x104>
      else
#endif
      //Invalid protocol?
      {
         //Report an error
         error = ERROR_INVALID_PARAMETER;
 80030e4:	2302      	movs	r3, #2
 80030e6:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 80030e8:	8afb      	ldrh	r3, [r7, #22]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	0801b368 	.word	0x0801b368

080030f8 <tcpInit>:
 * @brief TCP related initialization
 * @return Error code
 **/

error_t tcpInit(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   tcpDynamicPort = 0;
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <tcpInit+0x18>)
 80030fe:	2200      	movs	r2, #0
 8003100:	801a      	strh	r2, [r3, #0]

   //Successful initialization
   return NO_ERROR;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	2000c324 	.word	0x2000c324

08003114 <tcpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t tcpGetDynamicPort(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
   uint_t port;

   //Retrieve current port number
   port = tcpDynamicPort;
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <tcpGetDynamicPort+0x58>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	607b      	str	r3, [r7, #4]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003126:	d303      	bcc.n	8003130 <tcpGetDynamicPort+0x1c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312e:	d307      	bcc.n	8003140 <tcpGetDynamicPort+0x2c>
   {
      //Generate a random port number
      port = SOCKET_EPHEMERAL_PORT_MIN + netGetRand() %
 8003130:	f7ff f832 	bl	8002198 <netGetRand>
 8003134:	4603      	mov	r3, r0
 8003136:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800313a:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800313e:	607b      	str	r3, [r7, #4]
         (SOCKET_EPHEMERAL_PORT_MAX - SOCKET_EPHEMERAL_PORT_MIN + 1);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003146:	4293      	cmp	r3, r2
 8003148:	d806      	bhi.n	8003158 <tcpGetDynamicPort+0x44>
   {
      //Increment port number
      tcpDynamicPort = port + 1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	b29b      	uxth	r3, r3
 800314e:	3301      	adds	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <tcpGetDynamicPort+0x58>)
 8003154:	801a      	strh	r2, [r3, #0]
 8003156:	e003      	b.n	8003160 <tcpGetDynamicPort+0x4c>
   }
   else
   {
      //Wrap around if necessary
      tcpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <tcpGetDynamicPort+0x58>)
 800315a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800315e:	801a      	strh	r2, [r3, #0]
   }

   //Return an ephemeral port number
   return port;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	b29b      	uxth	r3, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	2000c324 	.word	0x2000c324

08003170 <tcpConnect>:
 * @param[in] remotePort Remote port number that will be used to establish the connection
 * @return Error code
 **/

error_t tcpConnect(Socket *socket, const IpAddr *remoteIpAddr, uint16_t remotePort)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
   error_t error;
   uint_t event;

   //Check current TCP state
   if(socket->state == TCP_STATE_CLOSED)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 80b9 	bne.w	80032fc <tcpConnect+0x18c>
   {
      //Save port number and IP address of the remote host
      socket->remoteIpAddr = *remoteIpAddr;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	331c      	adds	r3, #28
 8003190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003194:	e883 0003 	stmia.w	r3, {r0, r1}
      socket->remotePort = remotePort;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	88fa      	ldrh	r2, [r7, #6]
 800319c:	849a      	strh	r2, [r3, #36]	; 0x24

      //Select the source address and the relevant network interface
      //to use when establishing the connection
      error = ipSelectSourceAddr(&socket->interface,
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f103 000c 	add.w	r0, r3, #12
         &socket->remoteIpAddr, &socket->localIpAddr);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f103 011c 	add.w	r1, r3, #28
      error = ipSelectSourceAddr(&socket->interface,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3310      	adds	r3, #16
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7fe fa64 	bl	800167c <ipSelectSourceAddr>
 80031b4:	4603      	mov	r3, r0
 80031b6:	82fb      	strh	r3, [r7, #22]
      //Any error to report?
      if(error)
 80031b8:	8afb      	ldrh	r3, [r7, #22]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <tcpConnect+0x52>
         return error;
 80031be:	8afb      	ldrh	r3, [r7, #22]
 80031c0:	e0af      	b.n	8003322 <tcpConnect+0x1b2>

      //Make sure the source address is valid
      if(ipIsUnspecifiedAddr(&socket->localIpAddr))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3310      	adds	r3, #16
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fa77 	bl	80016ba <ipIsUnspecifiedAddr>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <tcpConnect+0x68>
         return ERROR_NOT_CONFIGURED;
 80031d2:	f240 2306 	movw	r3, #518	; 0x206
 80031d6:	e0a4      	b.n	8003322 <tcpConnect+0x1b2>

      //The user owns the socket
      socket->ownedFlag = TRUE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	649a      	str	r2, [r3, #72]	; 0x48

      //Number of chunks that comprise the TX and the RX buffers
      socket->txBuffer.maxChunkCount = arraysize(socket->txBuffer.chunk);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	220f      	movs	r2, #15
 80031e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      socket->rxBuffer.maxChunkCount = arraysize(socket->rxBuffer.chunk);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	220f      	movs	r2, #15
 80031ea:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

      //Allocate transmit buffer
      error = netBufferSetLength((NetBuffer *) &socket->txBuffer,
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f7ff f96d 	bl	80024dc <netBufferSetLength>
 8003202:	4603      	mov	r3, r0
 8003204:	82fb      	strh	r3, [r7, #22]
         socket->txBufferSize);

      //Allocate receive buffer
      if(!error)
 8003206:	8afb      	ldrh	r3, [r7, #22]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10b      	bne.n	8003224 <tcpConnect+0xb4>
      {
         error = netBufferSetLength((NetBuffer *) &socket->rxBuffer,
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f503 7298 	add.w	r2, r3, #304	; 0x130
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f7ff f95e 	bl	80024dc <netBufferSetLength>
 8003220:	4603      	mov	r3, r0
 8003222:	82fb      	strh	r3, [r7, #22]
            socket->rxBufferSize);
      }

      //Failed to allocate memory?
      if(error)
 8003224:	8afb      	ldrh	r3, [r7, #22]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d004      	beq.n	8003234 <tcpConnect+0xc4>
      {
         //Free any previously allocated memory
         tcpDeleteControlBlock(socket);
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f002 f81e 	bl	800526c <tcpDeleteControlBlock>
         //Report an error to the caller
         return error;
 8003230:	8afb      	ldrh	r3, [r7, #22]
 8003232:	e076      	b.n	8003322 <tcpConnect+0x1b2>
      }

      //The SMSS is the size of the largest segment that the sender can transmit
      socket->smss = MIN(TCP_DEFAULT_MSS, TCP_MAX_MSS);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f44f 7206 	mov.w	r2, #536	; 0x218
 800323a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      //The RMSS is the size of the largest segment the receiver is willing to accept
      socket->rmss = MIN(socket->rxBufferSize, TCP_MAX_MSS);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8003244:	f240 5296 	movw	r2, #1430	; 0x596
 8003248:	4293      	cmp	r3, r2
 800324a:	bf28      	it	cs
 800324c:	4613      	movcs	r3, r2
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

      //An initial send sequence number is selected
      socket->iss = netGetRand();
 8003256:	f7fe ff9f 	bl	8002198 <netGetRand>
 800325a:	4602      	mov	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58

      //Initialize TCP control block
      socket->sndUna = socket->iss;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
      socket->sndNxt = socket->iss + 1;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	665a      	str	r2, [r3, #100]	; 0x64
      socket->rcvUser = 0;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
      socket->rcvWnd = socket->rxBufferSize;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

      //Default retransmission timeout
      socket->rto = TCP_INITIAL_RTO;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800328e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Default congestion state
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      //Initial congestion window
      socket->cwnd = MIN(TCP_INITIAL_WINDOW * socket->smss, socket->txBufferSize);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032a6:	4619      	mov	r1, r3
 80032a8:	460b      	mov	r3, r1
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	440b      	add	r3, r1
 80032ae:	4293      	cmp	r3, r2
 80032b0:	bf28      	it	cs
 80032b2:	4613      	movcs	r3, r2
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      //Slow start threshold should be set arbitrarily high
      socket->ssthresh = UINT16_MAX;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032c2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      //Recover is set to the initial send sequence number
      socket->recover = socket->iss;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif

      //Send a SYN segment
      error = tcpSendSegment(socket, TCP_FLAG_SYN, socket->iss, 0, 0, TRUE);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032d4:	2301      	movs	r3, #1
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2300      	movs	r3, #0
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	2102      	movs	r1, #2
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f001 f92f 	bl	8004544 <tcpSendSegment>
 80032e6:	4603      	mov	r3, r0
 80032e8:	82fb      	strh	r3, [r7, #22]
      //Failed to send TCP segment?
      if(error)
 80032ea:	8afb      	ldrh	r3, [r7, #22]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <tcpConnect+0x184>
         return error;
 80032f0:	8afb      	ldrh	r3, [r7, #22]
 80032f2:	e016      	b.n	8003322 <tcpConnect+0x1b2>

      //Switch to the SYN-SENT state
      tcpChangeState(socket, TCP_STATE_SYN_SENT);
 80032f4:	2102      	movs	r1, #2
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f002 fba2 	bl	8005a40 <tcpChangeState>
      MIB2_INC_COUNTER32(tcpGroup.tcpActiveOpens, 1);
      TCP_MIB_INC_COUNTER32(tcpActiveOpens, 1);
   }

   //Wait for the connection to be established
   event = tcpWaitForEvents(socket, SOCKET_EVENT_CONNECTED |
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	461a      	mov	r2, r3
 8003302:	2103      	movs	r1, #3
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f002 fcf3 	bl	8005cf0 <tcpWaitForEvents>
 800330a:	6138      	str	r0, [r7, #16]
      SOCKET_EVENT_CLOSED, socket->timeout);

   //Connection successfully established?
   if(event == SOCKET_EVENT_CONNECTED)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <tcpConnect+0x1a6>
      return NO_ERROR;
 8003312:	2300      	movs	r3, #0
 8003314:	e005      	b.n	8003322 <tcpConnect+0x1b2>
   //Failed to establish connection?
   else if(event == SOCKET_EVENT_CLOSED)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d101      	bne.n	8003320 <tcpConnect+0x1b0>
      return ERROR_CONNECTION_FAILED;
 800331c:	23c9      	movs	r3, #201	; 0xc9
 800331e:	e000      	b.n	8003322 <tcpConnect+0x1b2>
   //Timeout exception?
   else
      return ERROR_TIMEOUT;
 8003320:	23dc      	movs	r3, #220	; 0xdc
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <tcpSend>:
 * @return Error code
 **/

error_t tcpSend(Socket *socket, const uint8_t *data,
   size_t length, size_t *written, uint_t flags)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint_t totalLength;
   uint_t event;

   //Check whether the socket is in the listening state
   if(socket->state == TCP_STATE_LISTEN)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <tcpSend+0x1c>
      return ERROR_NOT_CONNECTED;
 8003344:	23cd      	movs	r3, #205	; 0xcd
 8003346:	e0b1      	b.n	80034ac <tcpSend+0x180>

   //Actual number of bytes written
   totalLength = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]

   //Send as much data as possible
   do
   {
      //Wait until there is more room in the send buffer
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_READY, socket->timeout);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	461a      	mov	r2, r3
 8003352:	2104      	movs	r1, #4
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f002 fccb 	bl	8005cf0 <tcpWaitForEvents>
 800335a:	61b8      	str	r0, [r7, #24]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_TX_READY)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b04      	cmp	r3, #4
 8003360:	d001      	beq.n	8003366 <tcpSend+0x3a>
         return ERROR_TIMEOUT;
 8003362:	23dc      	movs	r3, #220	; 0xdc
 8003364:	e0a2      	b.n	80034ac <tcpSend+0x180>

      //Check current TCP state
      switch(socket->state)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800336c:	3b04      	subs	r3, #4
 800336e:	2b06      	cmp	r3, #6
 8003370:	d812      	bhi.n	8003398 <tcpSend+0x6c>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <tcpSend+0x4c>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	080033a9 	.word	0x080033a9
 800337c:	080033a9 	.word	0x080033a9
 8003380:	08003395 	.word	0x08003395
 8003384:	08003395 	.word	0x08003395
 8003388:	08003395 	.word	0x08003395
 800338c:	08003395 	.word	0x08003395
 8003390:	08003395 	.word	0x08003395
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
      case TCP_STATE_CLOSING:
      case TCP_STATE_TIME_WAIT:
         //The connection is being closed
         return ERROR_CONNECTION_CLOSING;
 8003394:	23cb      	movs	r3, #203	; 0xcb
 8003396:	e089      	b.n	80034ac <tcpSend+0x180>

      //CLOSED state?
      default:
         //The connection was reset by remote side?
         return (socket->resetFlag) ? ERROR_CONNECTION_RESET : ERROR_NOT_CONNECTED;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <tcpSend+0x78>
 80033a0:	23cc      	movs	r3, #204	; 0xcc
 80033a2:	e083      	b.n	80034ac <tcpSend+0x180>
 80033a4:	23cd      	movs	r3, #205	; 0xcd
 80033a6:	e081      	b.n	80034ac <tcpSend+0x180>
         break;
 80033a8:	bf00      	nop
      }

      //Determine the actual number of bytes in the send buffer
      n = socket->sndUser + socket->sndNxt - socket->sndUna;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80033b0:	461a      	mov	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	617b      	str	r3, [r7, #20]
      //Exit immediately if the transmission buffer is full (sanity check)
      if(n >= socket->txBufferSize)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d301      	bcc.n	80033d0 <tcpSend+0xa4>
         return ERROR_FAILURE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e06d      	b.n	80034ac <tcpSend+0x180>

      //Number of bytes available for writing
      n = socket->txBufferSize - n;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	617b      	str	r3, [r7, #20]
      //Calculate the number of bytes to copy at a time
      n = MIN(n, length - totalLength);
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	bf28      	it	cs
 80033e8:	4613      	movcs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

      //Any data to copy?
      if(n > 0)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d034      	beq.n	800345c <tcpSend+0x130>
      {
         //Copy user data to send buffer
         tcpWriteTxBuffer(socket, socket->sndNxt + socket->sndUser, data, n);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 80033fc:	1899      	adds	r1, r3, r2
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f002 fca2 	bl	8005d4c <tcpWriteTxBuffer>

         //Update the number of data buffered but not yet sent
         socket->sndUser += n;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	b29b      	uxth	r3, r3
 8003412:	4413      	add	r3, r2
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
         //Advance data pointer
         data += n;
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	4413      	add	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
         //Update byte counter
         totalLength += n;
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	4413      	add	r3, r2
 800342a:	61fb      	str	r3, [r7, #28]

         //Total number of data that have been written
         if(written != NULL)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <tcpSend+0x10c>
            *written = totalLength;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	601a      	str	r2, [r3, #0]

         //Update TX events
         tcpUpdateEvents(socket);
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f002 fb27 	bl	8005a8c <tcpUpdateEvents>

         //To avoid a deadlock, it is necessary to have a timeout to force
         //transmission of data, overriding the SWS avoidance algorithm. In
         //practice, this timeout should seldom occur (refer to RFC 1122,
         //section 4.2.3.4)
         if(socket->sndUser == n)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003444:	461a      	mov	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	4293      	cmp	r3, r2
 800344a:	d107      	bne.n	800345c <tcpSend+0x130>
            tcpTimerStart(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003452:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003456:	4618      	mov	r0, r3
 8003458:	f002 ff12 	bl	8006280 <tcpTimerStart>
      }

      //The Nagle algorithm should be implemented to coalesce
      //short segments (refer to RFC 1122 4.2.3.4)
      tcpNagleAlgo(socket, flags);
 800345c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f002 f9e3 	bl	800582a <tcpNagleAlgo>

      //Send as much data as possible
   } while(totalLength < length);
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	429a      	cmp	r2, r3
 800346a:	f4ff af6f 	bcc.w	800334c <tcpSend+0x20>

   //The SOCKET_FLAG_WAIT_ACK flag causes the function to
   //wait for acknowledgment from the remote side
   if(flags & SOCKET_FLAG_WAIT_ACK)
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d018      	beq.n	80034aa <tcpSend+0x17e>
   {
      //Wait for the data to be acknowledged
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_ACKED, socket->timeout);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	461a      	mov	r2, r3
 800347e:	2110      	movs	r1, #16
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f002 fc35 	bl	8005cf0 <tcpWaitForEvents>
 8003486:	61b8      	str	r0, [r7, #24]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_TX_ACKED)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b10      	cmp	r3, #16
 800348c:	d001      	beq.n	8003492 <tcpSend+0x166>
         return ERROR_TIMEOUT;
 800348e:	23dc      	movs	r3, #220	; 0xdc
 8003490:	e00c      	b.n	80034ac <tcpSend+0x180>

      //The connection was closed before an acknowledgment was received?
      if(socket->state != TCP_STATE_ESTABLISHED && socket->state != TCP_STATE_CLOSE_WAIT)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003498:	2b04      	cmp	r3, #4
 800349a:	d006      	beq.n	80034aa <tcpSend+0x17e>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d001      	beq.n	80034aa <tcpSend+0x17e>
         return ERROR_NOT_CONNECTED;
 80034a6:	23cd      	movs	r3, #205	; 0xcd
 80034a8:	e000      	b.n	80034ac <tcpSend+0x180>
   }

   //Successful write operation
   return NO_ERROR;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <tcpShutdown>:
 * @param[in] how Flag that describes what types of operation will no longer be allowed
 * @return Error code
 **/

error_t tcpShutdown(Socket *socket, uint_t how)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t event;

   //Disable transmission?
   if(how == SOCKET_SD_SEND || how == SOCKET_SD_BOTH)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d003      	beq.n	80034cc <tcpShutdown+0x18>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	f040 80bb 	bne.w	8003642 <tcpShutdown+0x18e>
   {
      //Check current state
      switch(socket->state)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	f200 80b7 	bhi.w	8003646 <tcpShutdown+0x192>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <tcpShutdown+0x2c>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003509 	.word	0x08003509
 80034e4:	08003509 	.word	0x08003509
 80034e8:	08003647 	.word	0x08003647
 80034ec:	0800350d 	.word	0x0800350d
 80034f0:	0800350d 	.word	0x0800350d
 80034f4:	0800359b 	.word	0x0800359b
 80034f8:	08003629 	.word	0x08003629
 80034fc:	08003629 	.word	0x08003629
 8003500:	08003647 	.word	0x08003647
 8003504:	08003629 	.word	0x08003629
      {
      //CLOSED or LISTEN state?
      case TCP_STATE_CLOSED:
      case TCP_STATE_LISTEN:
         //The connection does not exist
         return ERROR_NOT_CONNECTED;
 8003508:	23cd      	movs	r3, #205	; 0xcd
 800350a:	e0d8      	b.n	80036be <tcpShutdown+0x20a>

      //SYN-RECEIVED or ESTABLISHED state?
      case TCP_STATE_SYN_RECEIVED:
      case TCP_STATE_ESTABLISHED:
         //Flush the send buffer
         error = tcpSend(socket, NULL, 0, NULL, SOCKET_FLAG_NO_DELAY);
 800350c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2300      	movs	r3, #0
 8003514:	2200      	movs	r2, #0
 8003516:	2100      	movs	r1, #0
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff07 	bl	800332c <tcpSend>
 800351e:	4603      	mov	r3, r0
 8003520:	817b      	strh	r3, [r7, #10]
         //Any error to report?
         if(error)
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <tcpShutdown+0x78>
            return error;
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	e0c8      	b.n	80036be <tcpShutdown+0x20a>

         //Make sure all the data has been sent out
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_DONE, socket->timeout);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	461a      	mov	r2, r3
 8003532:	2108      	movs	r1, #8
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f002 fbdb 	bl	8005cf0 <tcpWaitForEvents>
 800353a:	60f8      	str	r0, [r7, #12]
         //Timeout error?
         if(event != SOCKET_EVENT_TX_DONE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b08      	cmp	r3, #8
 8003540:	d001      	beq.n	8003546 <tcpShutdown+0x92>
            return ERROR_TIMEOUT;
 8003542:	23dc      	movs	r3, #220	; 0xdc
 8003544:	e0bb      	b.n	80036be <tcpShutdown+0x20a>

         //Send a FIN segment
         error = tcpSendSegment(socket, TCP_FLAG_FIN | TCP_FLAG_ACK,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800354e:	2301      	movs	r3, #1
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	2300      	movs	r3, #0
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	460b      	mov	r3, r1
 8003558:	2111      	movs	r1, #17
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fff2 	bl	8004544 <tcpSendSegment>
 8003560:	4603      	mov	r3, r0
 8003562:	817b      	strh	r3, [r7, #10]
            socket->sndNxt, socket->rcvNxt, 0, TRUE);
         //Failed to send FIN segment?
         if(error)
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <tcpShutdown+0xba>
            return error;
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	e0a7      	b.n	80036be <tcpShutdown+0x20a>

         //Sequence number expected to be received
         socket->sndNxt++;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	665a      	str	r2, [r3, #100]	; 0x64
         //Switch to the FIN-WAIT1 state
         tcpChangeState(socket, TCP_STATE_FIN_WAIT_1);
 8003578:	2107      	movs	r1, #7
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f002 fa60 	bl	8005a40 <tcpChangeState>

         //Wait for the FIN to be acknowledged
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN, socket->timeout);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	461a      	mov	r2, r3
 8003586:	2120      	movs	r1, #32
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f002 fbb1 	bl	8005cf0 <tcpWaitForEvents>
 800358e:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_TX_SHUTDOWN)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b20      	cmp	r3, #32
 8003594:	d059      	beq.n	800364a <tcpShutdown+0x196>
            return ERROR_TIMEOUT;
 8003596:	23dc      	movs	r3, #220	; 0xdc
 8003598:	e091      	b.n	80036be <tcpShutdown+0x20a>
         break;

      //CLOSE-WAIT state?
      case TCP_STATE_CLOSE_WAIT:
         //Flush the send buffer
         error = tcpSend(socket, NULL, 0, NULL, SOCKET_FLAG_NO_DELAY);
 800359a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fec0 	bl	800332c <tcpSend>
 80035ac:	4603      	mov	r3, r0
 80035ae:	817b      	strh	r3, [r7, #10]
         //Any error to report?
         if(error)
 80035b0:	897b      	ldrh	r3, [r7, #10]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <tcpShutdown+0x106>
            return error;
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	e081      	b.n	80036be <tcpShutdown+0x20a>

         //Make sure all the data has been sent out
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_DONE, socket->timeout);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	461a      	mov	r2, r3
 80035c0:	2108      	movs	r1, #8
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f002 fb94 	bl	8005cf0 <tcpWaitForEvents>
 80035c8:	60f8      	str	r0, [r7, #12]
         //Timeout error?
         if(event != SOCKET_EVENT_TX_DONE)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d001      	beq.n	80035d4 <tcpShutdown+0x120>
            return ERROR_TIMEOUT;
 80035d0:	23dc      	movs	r3, #220	; 0xdc
 80035d2:	e074      	b.n	80036be <tcpShutdown+0x20a>

         //Send a FIN segment
         error = tcpSendSegment(socket, TCP_FLAG_FIN | TCP_FLAG_ACK,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80035dc:	2301      	movs	r3, #1
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	460b      	mov	r3, r1
 80035e6:	2111      	movs	r1, #17
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 ffab 	bl	8004544 <tcpSendSegment>
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]
            socket->sndNxt, socket->rcvNxt, 0, TRUE);
         //Failed to send FIN segment?
         if(error)
 80035f2:	897b      	ldrh	r3, [r7, #10]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <tcpShutdown+0x148>
            return error;
 80035f8:	897b      	ldrh	r3, [r7, #10]
 80035fa:	e060      	b.n	80036be <tcpShutdown+0x20a>

         //Sequence number expected to be received
         socket->sndNxt++;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	665a      	str	r2, [r3, #100]	; 0x64
         //Switch to the LAST-ACK state
         tcpChangeState(socket, TCP_STATE_LAST_ACK);
 8003606:	2106      	movs	r1, #6
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f002 fa19 	bl	8005a40 <tcpChangeState>

         //Wait for the FIN to be acknowledged
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN, socket->timeout);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	461a      	mov	r2, r3
 8003614:	2120      	movs	r1, #32
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f002 fb6a 	bl	8005cf0 <tcpWaitForEvents>
 800361c:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_TX_SHUTDOWN)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b20      	cmp	r3, #32
 8003622:	d014      	beq.n	800364e <tcpShutdown+0x19a>
            return ERROR_TIMEOUT;
 8003624:	23dc      	movs	r3, #220	; 0xdc
 8003626:	e04a      	b.n	80036be <tcpShutdown+0x20a>
      //FIN-WAIT-1, CLOSING or LAST-ACK state?
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_CLOSING:
      case TCP_STATE_LAST_ACK:
         //Wait for the FIN to be acknowledged
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN, socket->timeout);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	461a      	mov	r2, r3
 800362e:	2120      	movs	r1, #32
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f002 fb5d 	bl	8005cf0 <tcpWaitForEvents>
 8003636:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_TX_SHUTDOWN)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b20      	cmp	r3, #32
 800363c:	d009      	beq.n	8003652 <tcpShutdown+0x19e>
            return ERROR_TIMEOUT;
 800363e:	23dc      	movs	r3, #220	; 0xdc
 8003640:	e03d      	b.n	80036be <tcpShutdown+0x20a>
      //SYN-SENT, FIN-WAIT-2 or TIME-WAIT state?
      default:
         //Continue processing
         break;
      }
   }
 8003642:	bf00      	nop
 8003644:	e006      	b.n	8003654 <tcpShutdown+0x1a0>
         break;
 8003646:	bf00      	nop
 8003648:	e004      	b.n	8003654 <tcpShutdown+0x1a0>
         break;
 800364a:	bf00      	nop
 800364c:	e002      	b.n	8003654 <tcpShutdown+0x1a0>
         break;
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <tcpShutdown+0x1a0>
         break;
 8003652:	bf00      	nop

   //Disable reception?
   if(how == SOCKET_SD_RECEIVE || how == SOCKET_SD_BOTH)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <tcpShutdown+0x1ac>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d128      	bne.n	80036b2 <tcpShutdown+0x1fe>
   {
      //Check current state
      switch(socket->state)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003666:	3b01      	subs	r3, #1
 8003668:	2b07      	cmp	r3, #7
 800366a:	d824      	bhi.n	80036b6 <tcpShutdown+0x202>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <tcpShutdown+0x1c0>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003695 	.word	0x08003695
 8003678:	08003699 	.word	0x08003699
 800367c:	08003699 	.word	0x08003699
 8003680:	08003699 	.word	0x08003699
 8003684:	080036b7 	.word	0x080036b7
 8003688:	080036b7 	.word	0x080036b7
 800368c:	08003699 	.word	0x08003699
 8003690:	08003699 	.word	0x08003699
      {
      //LISTEN state?
      case TCP_STATE_LISTEN:
         //The connection does not exist
         return ERROR_NOT_CONNECTED;
 8003694:	23cd      	movs	r3, #205	; 0xcd
 8003696:	e012      	b.n	80036be <tcpShutdown+0x20a>
      case TCP_STATE_SYN_RECEIVED:
      case TCP_STATE_ESTABLISHED:
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
         //Wait for a FIN to be received
         event = tcpWaitForEvents(socket, SOCKET_EVENT_RX_SHUTDOWN, socket->timeout);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	461a      	mov	r2, r3
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f002 fb25 	bl	8005cf0 <tcpWaitForEvents>
 80036a6:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_RX_SHUTDOWN)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d005      	beq.n	80036ba <tcpShutdown+0x206>
            return ERROR_TIMEOUT;
 80036ae:	23dc      	movs	r3, #220	; 0xdc
 80036b0:	e005      	b.n	80036be <tcpShutdown+0x20a>
      //CLOSING, TIME-WAIT, CLOSE-WAIT, LAST-ACK or CLOSED state?
      default:
         //A FIN segment has already been received
         break;
      }
   }
 80036b2:	bf00      	nop
 80036b4:	e002      	b.n	80036bc <tcpShutdown+0x208>
         break;
 80036b6:	bf00      	nop
 80036b8:	e000      	b.n	80036bc <tcpShutdown+0x208>
         break;
 80036ba:	bf00      	nop

   //Successful operation
   return NO_ERROR;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop

080036c8 <tcpAbort>:
 * @param[in] socket Handle identifying the socket to close
 * @return Error code
 **/

error_t tcpAbort(Socket *socket)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	6078      	str	r0, [r7, #4]
   error_t error;

   //Check current state
   switch(socket->state)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036d6:	3b03      	subs	r3, #3
 80036d8:	2b07      	cmp	r3, #7
 80036da:	d831      	bhi.n	8003740 <tcpAbort+0x78>
 80036dc:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <tcpAbort+0x1c>)
 80036de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e2:	bf00      	nop
 80036e4:	08003705 	.word	0x08003705
 80036e8:	08003705 	.word	0x08003705
 80036ec:	08003705 	.word	0x08003705
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003705 	.word	0x08003705
 80036f8:	08003705 	.word	0x08003705
 80036fc:	08003741 	.word	0x08003741
 8003700:	08003737 	.word	0x08003737
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
   case TCP_STATE_FIN_WAIT_2:
   case TCP_STATE_CLOSE_WAIT:
      //Send a reset segment
      error = tcpSendSegment(socket, TCP_FLAG_RST, socket->sndNxt, 0, 0, FALSE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003708:	2300      	movs	r3, #0
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	2104      	movs	r1, #4
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 ff15 	bl	8004544 <tcpSendSegment>
 800371a:	4603      	mov	r3, r0
 800371c:	81fb      	strh	r3, [r7, #14]
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800371e:	2100      	movs	r1, #0
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f002 f98d 	bl	8005a40 <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(socket);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f001 fda0 	bl	800526c <tcpDeleteControlBlock>
      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	605a      	str	r2, [r3, #4]
      //Return status code
      return error;
 8003732:	89fb      	ldrh	r3, [r7, #14]
 8003734:	e00f      	b.n	8003756 <tcpAbort+0x8e>

   //TIME-WAIT state?
   case TCP_STATE_TIME_WAIT:
#if (TCP_2MSL_TIMER > 0)
      //The user doe not own the socket anymore...
      socket->ownedFlag = FALSE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	649a      	str	r2, [r3, #72]	; 0x48
      //TCB will be deleted and socket will be closed
      //when the 2MSL timer will elapse
      return NO_ERROR;
 800373c:	2300      	movs	r3, #0
 800373e:	e00a      	b.n	8003756 <tcpAbort+0x8e>
#endif

   //Any other state?
   default:
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003740:	2100      	movs	r1, #0
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f002 f97c 	bl	8005a40 <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(socket);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f001 fd8f 	bl	800526c <tcpDeleteControlBlock>
      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	605a      	str	r2, [r3, #4]
      //No error to report
      return NO_ERROR;
 8003754:	2300      	movs	r3, #0
   }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop

08003760 <tcpKillOldestConnection>:
 * @return Handle identifying the oldest TCP connection in the TIME-WAIT state.
 *   NULL is returned if no socket is currently in the TIME-WAIT state
 **/

Socket *tcpKillOldestConnection(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
   systime_t time;
   Socket *socket;
   Socket *oldestSocket;

   //Get current time
   time = osGetSystemTime();
 8003766:	f7fd f833 	bl	80007d0 <osGetSystemTime>
 800376a:	6078      	str	r0, [r7, #4]

   //Keep track of the oldest socket in the TIME-WAIT state
   oldestSocket = NULL;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e026      	b.n	80037c4 <tcpKillOldestConnection+0x64>
   {
      //Point to the current socket descriptor
      socket = &socketTable[i];
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f44f 720d 	mov.w	r2, #564	; 0x234
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	4a1b      	ldr	r2, [pc, #108]	; (80037f0 <tcpKillOldestConnection+0x90>)
 8003782:	4413      	add	r3, r2
 8003784:	603b      	str	r3, [r7, #0]

      //TCP connection found?
      if(socket->type == SOCKET_TYPE_STREAM)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d117      	bne.n	80037be <tcpKillOldestConnection+0x5e>
      {
         //Check current state
         if(socket->state == TCP_STATE_TIME_WAIT)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003794:	2b0a      	cmp	r3, #10
 8003796:	d112      	bne.n	80037be <tcpKillOldestConnection+0x5e>
         {
            //Keep track of the oldest socket in the TIME-WAIT state
            if(oldestSocket == NULL)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <tcpKillOldestConnection+0x42>
            {
               //Save socket handle
               oldestSocket = socket;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	60bb      	str	r3, [r7, #8]
            }
            if((time - socket->timeWaitTimer.startTime) >
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	1ad2      	subs	r2, r2, r3
               (time - oldestSocket->timeWaitTimer.startTime))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	1acb      	subs	r3, r1, r3
            if((time - socket->timeWaitTimer.startTime) >
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d901      	bls.n	80037be <tcpKillOldestConnection+0x5e>
            {
               //Save socket handle
               oldestSocket = socket;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3301      	adds	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b09      	cmp	r3, #9
 80037c8:	d9d5      	bls.n	8003776 <tcpKillOldestConnection+0x16>
         }
      }
   }

   //Any connection in the TIME-WAIT state?
   if(oldestSocket != NULL)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d009      	beq.n	80037e4 <tcpKillOldestConnection+0x84>
   {
      //Enter CLOSED state
      tcpChangeState(oldestSocket, TCP_STATE_CLOSED);
 80037d0:	2100      	movs	r1, #0
 80037d2:	68b8      	ldr	r0, [r7, #8]
 80037d4:	f002 f934 	bl	8005a40 <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(oldestSocket);
 80037d8:	68b8      	ldr	r0, [r7, #8]
 80037da:	f001 fd47 	bl	800526c <tcpDeleteControlBlock>
      //Mark the socket as closed
      oldestSocket->type = SOCKET_TYPE_UNUSED;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]
   }

   //The oldest connection in the TIME-WAIT state can be reused
   //when the socket table runs out of space
   return oldestSocket;
 80037e4:	68bb      	ldr	r3, [r7, #8]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2000e83c 	.word	0x2000e83c

080037f4 <tcpProcessSegment>:
 * @param[in] offset Offset to the first byte of the TCP header
 **/

void tcpProcessSegment(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, const NetBuffer *buffer, size_t offset)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b08d      	sub	sp, #52	; 0x34
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]

   //A TCP implementation must silently discard an incoming segment that
   //is addressed to a broadcast or multicast address (refer to RFC 1122,
   //section 4.2.3.10)
#if (IPV4_SUPPORT == ENABLED)
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	f040 81a6 	bne.w	8003b58 <tcpProcessSegment+0x364>
   {
      //Ensure the destination address is not a broadcast address
      if(ipv4IsBroadcastAddr(interface, pseudoHeader->ipv4Data.destAddr))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4619      	mov	r1, r3
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f005 fa54 	bl	8008cc0 <ipv4IsBroadcastAddr>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 819e 	bne.w	8003b5c <tcpProcessSegment+0x368>
         return;
      //Ensure the destination address is not a multicast address
      if(ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003828:	2be0      	cmp	r3, #224	; 0xe0
 800382a:	f000 8199 	beq.w	8003b60 <tcpProcessSegment+0x36c>
      //This should never occur...
      return;
   }

   //Retrieve the length of the TCP segment
   length = netBufferGetLength(buffer) - offset;
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe fe32 	bl	8002498 <netBufferGetLength>
 8003834:	4602      	mov	r2, r0
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	61bb      	str	r3, [r7, #24]

   //Point to the TCP header
   segment = netBufferAt(buffer, offset);
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe fef2 	bl	8002628 <netBufferAt>
 8003844:	6178      	str	r0, [r7, #20]
   //Sanity check
   if(segment == NULL)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 818b 	beq.w	8003b64 <tcpProcessSegment+0x370>
      return;

   //Ensure the TCP header is valid
   if(length < sizeof(TcpHeader))
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b13      	cmp	r3, #19
 8003852:	f240 8189 	bls.w	8003b68 <tcpProcessSegment+0x374>
      //Exit immediately
      return;
   }

   //Check header length
   if(segment->dataOffset < 5 || ((size_t) segment->dataOffset * 4) > length)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	7b1b      	ldrb	r3, [r3, #12]
 800385a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b04      	cmp	r3, #4
 8003862:	f240 8183 	bls.w	8003b6c <tcpProcessSegment+0x378>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	7b1b      	ldrb	r3, [r3, #12]
 800386a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800386e:	b2db      	uxtb	r3, r3
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	429a      	cmp	r2, r3
 8003876:	f0c0 8179 	bcc.w	8003b6c <tcpProcessSegment+0x378>
      //Exit immediately
      return;
   }

   //Verify TCP checksum
   if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	1d18      	adds	r0, r3, #4
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	f7fe f83a 	bl	8001902 <ipCalcUpperLayerChecksumEx>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	f040 816d 	bne.w	8003b70 <tcpProcessSegment+0x37c>
      //Exit immediately
      return;
   }

   //No matching socket in the LISTEN state for the moment
   passiveSocket = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]

   //Look through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800389a:	2300      	movs	r3, #0
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
 800389e:	e067      	b.n	8003970 <tcpProcessSegment+0x17c>
   {
      //Point to the current socket
      socket = socketTable + i;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	f44f 720d 	mov.w	r2, #564	; 0x234
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	4aa4      	ldr	r2, [pc, #656]	; (8003b3c <tcpProcessSegment+0x348>)
 80038ac:	4413      	add	r3, r2
 80038ae:	623b      	str	r3, [r7, #32]

      //TCP socket found?
      if(socket->type != SOCKET_TYPE_STREAM)
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d149      	bne.n	800394c <tcpProcessSegment+0x158>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <tcpProcessSegment+0xd6>
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d142      	bne.n	8003950 <tcpProcessSegment+0x15c>
         continue;
      //Check destination port number
      if(socket->localPort != ntohs(segment->destPort))
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	8b1c      	ldrh	r4, [r3, #24]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	885b      	ldrh	r3, [r3, #2]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fe63 	bl	80005a0 <swapInt16>
 80038da:	4603      	mov	r3, r0
 80038dc:	429c      	cmp	r4, r3
 80038de:	d139      	bne.n	8003954 <tcpProcessSegment+0x160>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d137      	bne.n	8003958 <tcpProcessSegment+0x164>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <tcpProcessSegment+0x110>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d131      	bne.n	800395c <tcpProcessSegment+0x168>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	429a      	cmp	r2, r3
 8003902:	d12d      	bne.n	8003960 <tcpProcessSegment+0x16c>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <tcpProcessSegment+0x12c>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d127      	bne.n	8003964 <tcpProcessSegment+0x170>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	6a1a      	ldr	r2, [r3, #32]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	429a      	cmp	r2, r3
 800391e:	d123      	bne.n	8003968 <tcpProcessSegment+0x174>
         //This should never occur...
         continue;
      }

      //Keep track of the first matching socket in the LISTEN state
      if(socket->state == TCP_STATE_LISTEN && passiveSocket == NULL)
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003926:	2b01      	cmp	r3, #1
 8003928:	d104      	bne.n	8003934 <tcpProcessSegment+0x140>
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <tcpProcessSegment+0x140>
         passiveSocket = socket;
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	61fb      	str	r3, [r7, #28]

      //Source port filtering
      if(socket->remotePort != ntohs(segment->srcPort))
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	4618      	mov	r0, r3
 8003940:	f7fc fe2e 	bl	80005a0 <swapInt16>
 8003944:	4603      	mov	r3, r0
 8003946:	429c      	cmp	r4, r3
 8003948:	d016      	beq.n	8003978 <tcpProcessSegment+0x184>
         continue;
 800394a:	e00e      	b.n	800396a <tcpProcessSegment+0x176>
         continue;
 800394c:	bf00      	nop
 800394e:	e00c      	b.n	800396a <tcpProcessSegment+0x176>
         continue;
 8003950:	bf00      	nop
 8003952:	e00a      	b.n	800396a <tcpProcessSegment+0x176>
         continue;
 8003954:	bf00      	nop
 8003956:	e008      	b.n	800396a <tcpProcessSegment+0x176>
         continue;
 8003958:	bf00      	nop
 800395a:	e006      	b.n	800396a <tcpProcessSegment+0x176>
               continue;
 800395c:	bf00      	nop
 800395e:	e004      	b.n	800396a <tcpProcessSegment+0x176>
               continue;
 8003960:	bf00      	nop
 8003962:	e002      	b.n	800396a <tcpProcessSegment+0x176>
               continue;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <tcpProcessSegment+0x176>
               continue;
 8003968:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	3301      	adds	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	2b09      	cmp	r3, #9
 8003974:	d994      	bls.n	80038a0 <tcpProcessSegment+0xac>
 8003976:	e000      	b.n	800397a <tcpProcessSegment+0x186>

      //A matching socket has been found
      break;
 8003978:	bf00      	nop
   }

   //If no matching socket has been found then try to
   //use the first matching socket in the LISTEN state
   if(i >= SOCKET_MAX_COUNT)
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	2b09      	cmp	r3, #9
 800397e:	d901      	bls.n	8003984 <tcpProcessSegment+0x190>
      socket = passiveSocket;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	623b      	str	r3, [r7, #32]

   //Offset to the first data byte
   offset += segment->dataOffset * 4;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	7b1b      	ldrb	r3, [r3, #12]
 8003988:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800398c:	b2db      	uxtb	r3, r3
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	461a      	mov	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	4413      	add	r3, r2
 8003996:	603b      	str	r3, [r7, #0]
   //Calculate the length of the data
   length -= segment->dataOffset * 4;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	7b1b      	ldrb	r3, [r3, #12]
 800399c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	461a      	mov	r2, r3
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
   //Debug message
   TRACE_DEBUG("%s: TCP segment received (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   if(socket == NULL)
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <tcpProcessSegment+0x1cc>
      tcpDumpHeader(segment, length, 0, 0);
 80039b2:	2300      	movs	r3, #0
 80039b4:	2200      	movs	r2, #0
 80039b6:	69b9      	ldr	r1, [r7, #24]
 80039b8:	6978      	ldr	r0, [r7, #20]
 80039ba:	f002 fab1 	bl	8005f20 <tcpDumpHeader>
 80039be:	e007      	b.n	80039d0 <tcpProcessSegment+0x1dc>
   else
      tcpDumpHeader(segment, length, socket->irs, socket->iss);
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	69b9      	ldr	r1, [r7, #24]
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f002 faa8 	bl	8005f20 <tcpDumpHeader>

   //Convert from network byte order to host byte order
   segment->srcPort = ntohs(segment->srcPort);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fde2 	bl	80005a0 <swapInt16>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	801a      	strh	r2, [r3, #0]
   segment->destPort = ntohs(segment->destPort);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	885b      	ldrh	r3, [r3, #2]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fc fdd8 	bl	80005a0 <swapInt16>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	805a      	strh	r2, [r3, #2]
   segment->seqNum = ntohl(segment->seqNum);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fc fddd 	bl	80005bc <swapInt32>
 8003a02:	4602      	mov	r2, r0
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	605a      	str	r2, [r3, #4]
   segment->ackNum = ntohl(segment->ackNum);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fdd5 	bl	80005bc <swapInt32>
 8003a12:	4602      	mov	r2, r0
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	609a      	str	r2, [r3, #8]
   segment->window = ntohs(segment->window);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	89db      	ldrh	r3, [r3, #14]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc fdbe 	bl	80005a0 <swapInt16>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	81da      	strh	r2, [r3, #14]
   segment->urgentPointer = ntohs(segment->urgentPointer);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	8a5b      	ldrh	r3, [r3, #18]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fdb4 	bl	80005a0 <swapInt16>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	825a      	strh	r2, [r3, #18]

   //Specified port is unreachable?
   if(socket == NULL)
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d110      	bne.n	8003a68 <tcpProcessSegment+0x274>
   {
      //An incoming segment not containing a RST causes
      //a reset to be sent in response
      if(!(segment->flags & TCP_FLAG_RST))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	7b5b      	ldrb	r3, [r3, #13]
 8003a4a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 808d 	bne.w	8003b74 <tcpProcessSegment+0x380>
         tcpSendResetSegment(interface, pseudoHeader, segment, length);
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fee2 	bl	800482a <tcpSendResetSegment>

      //Return immediately
      return;
 8003a66:	e085      	b.n	8003b74 <tcpProcessSegment+0x380>
   }

   //Check current state
   switch(socket->state)
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a6e:	2b0a      	cmp	r3, #10
 8003a70:	d86c      	bhi.n	8003b4c <tcpProcessSegment+0x358>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <tcpProcessSegment+0x284>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003ab3 	.word	0x08003ab3
 8003a80:	08003ac5 	.word	0x08003ac5
 8003a84:	08003ad1 	.word	0x08003ad1
 8003a88:	08003ae3 	.word	0x08003ae3
 8003a8c:	08003af5 	.word	0x08003af5
 8003a90:	08003b01 	.word	0x08003b01
 8003a94:	08003b0d 	.word	0x08003b0d
 8003a98:	08003b1f 	.word	0x08003b1f
 8003a9c:	08003b31 	.word	0x08003b31
 8003aa0:	08003b41 	.word	0x08003b41
   {
   //Process CLOSED state
   case TCP_STATE_CLOSED:
      //This is the default state that each connection starts in before
      //the process of establishing it begins
      tcpStateClosed(interface, pseudoHeader, segment, length);
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f866 	bl	8003b7c <tcpStateClosed>
      break;
 8003ab0:	e061      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Process LISTEN state
   case TCP_STATE_LISTEN:
      //A device (normally a server) is waiting to receive a synchronize (SYN)
      //message from a client. It has not yet sent its own SYN message
      tcpStateListen(socket, interface, pseudoHeader, segment, length);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	6a38      	ldr	r0, [r7, #32]
 8003abe:	f000 f877 	bl	8003bb0 <tcpStateListen>
      break;
 8003ac2:	e058      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Process SYN_SENT state
   case TCP_STATE_SYN_SENT:
      //The device (normally a client) has sent a synchronize (SYN) message and
      //is waiting for a matching SYN from the other device (usually a server)
      tcpStateSynSent(socket, segment, length);
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	6979      	ldr	r1, [r7, #20]
 8003ac8:	6a38      	ldr	r0, [r7, #32]
 8003aca:	f000 f939 	bl	8003d40 <tcpStateSynSent>
      break;
 8003ace:	e052      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Process SYN_RECEIVED state
   case TCP_STATE_SYN_RECEIVED:
      //The device has both received a SYN from its partner and sent its own SYN.
      //It is now waiting for an ACK to its SYN to finish connection setup
      tcpStateSynReceived(socket, segment, buffer, offset, length);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6979      	ldr	r1, [r7, #20]
 8003ada:	6a38      	ldr	r0, [r7, #32]
 8003adc:	f000 fa23 	bl	8003f26 <tcpStateSynReceived>
      break;
 8003ae0:	e049      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Process ESTABLISHED state
   case TCP_STATE_ESTABLISHED:
      //Data can be exchanged freely once both devices in the connection enter
      //this state. This will continue until the connection is closed
      tcpStateEstablished(socket, segment, buffer, offset, length);
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6979      	ldr	r1, [r7, #20]
 8003aec:	6a38      	ldr	r0, [r7, #32]
 8003aee:	f000 fa83 	bl	8003ff8 <tcpStateEstablished>
      break;
 8003af2:	e040      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Process CLOSE_WAIT state
   case TCP_STATE_CLOSE_WAIT:
      //The device has received a close request (FIN) from the other device. It
      //must now wait for the application to acknowledge this request and
      //generate a matching request
      tcpStateCloseWait(socket, segment, length);
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	6979      	ldr	r1, [r7, #20]
 8003af8:	6a38      	ldr	r0, [r7, #32]
 8003afa:	f000 faf3 	bl	80040e4 <tcpStateCloseWait>
      break;
 8003afe:	e03a      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Process LAST_ACK state
   case TCP_STATE_LAST_ACK:
      //A device that has already received a close request and acknowledged it,
      //has sent its own FIN and is waiting for an ACK to this request
      tcpStateLastAck(socket, segment, length);
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	6979      	ldr	r1, [r7, #20]
 8003b04:	6a38      	ldr	r0, [r7, #32]
 8003b06:	f000 fb30 	bl	800416a <tcpStateLastAck>
      break;
 8003b0a:	e034      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Process FIN_WAIT_1 state
   case TCP_STATE_FIN_WAIT_1:
      //A device in this state is waiting for an ACK for a FIN it has sent, or
      //is waiting for a connection termination request from the other device
      tcpStateFinWait1(socket, segment, buffer, offset, length);
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6979      	ldr	r1, [r7, #20]
 8003b16:	6a38      	ldr	r0, [r7, #32]
 8003b18:	f000 fb67 	bl	80041ea <tcpStateFinWait1>
      break;
 8003b1c:	e02b      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Process FIN_WAIT_2 state
   case TCP_STATE_FIN_WAIT_2:
      //A device in this state has received an ACK for its request to terminate the
      //connection and is now waiting for a matching FIN from the other device
      tcpStateFinWait2(socket, segment, buffer, offset, length);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6979      	ldr	r1, [r7, #20]
 8003b28:	6a38      	ldr	r0, [r7, #32]
 8003b2a:	f000 fbee 	bl	800430a <tcpStateFinWait2>
      break;
 8003b2e:	e022      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Process CLOSING state
   case TCP_STATE_CLOSING:
      //The device has received a FIN from the other device and sent an ACK for
      //it, but not yet received an ACK for its own FIN message
      tcpStateClosing(socket, segment, length);
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	6979      	ldr	r1, [r7, #20]
 8003b34:	6a38      	ldr	r0, [r7, #32]
 8003b36:	f000 fc5b 	bl	80043f0 <tcpStateClosing>
      break;
 8003b3a:	e01c      	b.n	8003b76 <tcpProcessSegment+0x382>
 8003b3c:	2000e83c 	.word	0x2000e83c
   case TCP_STATE_TIME_WAIT:
      //The device has now received a FIN from the other device and acknowledged
      //it, and sent its own FIN and received an ACK for it. We are done, except
      //for waiting to ensure the ACK is received and prevent potential overlap
      //with new connections
      tcpStateTimeWait(socket, segment, length);
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	6979      	ldr	r1, [r7, #20]
 8003b44:	6a38      	ldr	r0, [r7, #32]
 8003b46:	f000 fc9d 	bl	8004484 <tcpStateTimeWait>
      break;
 8003b4a:	e014      	b.n	8003b76 <tcpProcessSegment+0x382>
   //Invalid state...
   default:
      //Back to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	6a38      	ldr	r0, [r7, #32]
 8003b50:	f001 ff76 	bl	8005a40 <tcpChangeState>
      //Silently discard incoming packet
      break;
 8003b54:	bf00      	nop
 8003b56:	e00e      	b.n	8003b76 <tcpProcessSegment+0x382>
      return;
 8003b58:	bf00      	nop
 8003b5a:	e00c      	b.n	8003b76 <tcpProcessSegment+0x382>
         return;
 8003b5c:	bf00      	nop
 8003b5e:	e00a      	b.n	8003b76 <tcpProcessSegment+0x382>
         return;
 8003b60:	bf00      	nop
 8003b62:	e008      	b.n	8003b76 <tcpProcessSegment+0x382>
      return;
 8003b64:	bf00      	nop
 8003b66:	e006      	b.n	8003b76 <tcpProcessSegment+0x382>
      return;
 8003b68:	bf00      	nop
 8003b6a:	e004      	b.n	8003b76 <tcpProcessSegment+0x382>
      return;
 8003b6c:	bf00      	nop
 8003b6e:	e002      	b.n	8003b76 <tcpProcessSegment+0x382>
      return;
 8003b70:	bf00      	nop
 8003b72:	e000      	b.n	8003b76 <tcpProcessSegment+0x382>
      return;
 8003b74:	bf00      	nop
   }
}
 8003b76:	372c      	adds	r7, #44	; 0x2c
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd90      	pop	{r4, r7, pc}

08003b7c <tcpStateClosed>:
 * @param[in] length Length of the segment data
 **/

void tcpStateClosed(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSED state\r\n");

   //An incoming segment not containing a RST causes
   //a reset to be sent in response
   if(!(segment->flags & TCP_FLAG_RST))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7b5b      	ldrb	r3, [r3, #13]
 8003b8e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <tcpStateClosed+0x2c>
      tcpSendResetSegment(interface, pseudoHeader, segment, length);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fe41 	bl	800482a <tcpSendResetSegment>
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <tcpStateListen>:
 * @param[in] length Length of the segment data
 **/

void tcpStateListen(Socket *socket, NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("TCP FSM: LISTEN state\r\n");

   //An incoming RST should be ignored
   if(segment->flags & TCP_FLAG_RST)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	7b5b      	ldrb	r3, [r3, #13]
 8003bc2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 80ab 	bne.w	8003d28 <tcpStateListen+0x178>
      return;

   //Any acknowledgment is bad if it arrives on a connection
   //still in the LISTEN state
   if(segment->flags & TCP_FLAG_ACK)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	7b5b      	ldrb	r3, [r3, #13]
 8003bd6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <tcpStateListen+0x42>
   {
      //A reset segment should be formed for any arriving ACK-bearing segment
      tcpSendResetSegment(interface, pseudoHeader, segment, length);
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	68b8      	ldr	r0, [r7, #8]
 8003bec:	f000 fe1d 	bl	800482a <tcpSendResetSegment>
      //Return immediately
      return;
 8003bf0:	e0a3      	b.n	8003d3a <tcpStateListen+0x18a>
   }

   //Check the SYN bit
   if(segment->flags & TCP_FLAG_SYN)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	7b5b      	ldrb	r3, [r3, #13]
 8003bf6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 809a 	beq.w	8003d3a <tcpStateListen+0x18a>
   {
      //Silently drop duplicate SYN segments
      if(tcpIsDuplicateSyn(socket, pseudoHeader, segment))
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f001 f99f 	bl	8004f4e <tcpIsDuplicateSyn>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 808a 	bne.w	8003d2c <tcpStateListen+0x17c>
         return;

      //Check whether the SYN queue is empty
      if(socket->synQueue == NULL)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d108      	bne.n	8003c34 <tcpStateListen+0x84>
      {
         //Allocate memory to save incoming data
         queueItem = memPoolAlloc(sizeof(TcpSynQueueItem));
 8003c22:	2024      	movs	r0, #36	; 0x24
 8003c24:	f7fe fb64 	bl	80022f0 <memPoolAlloc>
 8003c28:	61b8      	str	r0, [r7, #24]
         //Add the newly created item to the queue
         socket->synQueue = queueItem;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8003c32:	e01f      	b.n	8003c74 <tcpStateListen+0xc4>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->synQueue;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003c3a:	61bb      	str	r3, [r7, #24]

         //Reach the last item in the SYN queue
         for(i = 1; queueItem->next != NULL; i++)
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	e005      	b.n	8003c4e <tcpStateListen+0x9e>
            queueItem = queueItem->next;
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]
         for(i = 1; queueItem->next != NULL; i++)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f5      	bne.n	8003c42 <tcpStateListen+0x92>

         //Make sure the SYN queue is not full
         if(i >= socket->synQueueSize)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d266      	bcs.n	8003d30 <tcpStateListen+0x180>
            return;

         //Allocate memory to save incoming data
         queueItem->next = memPoolAlloc(sizeof(TcpSynQueueItem));
 8003c62:	2024      	movs	r0, #36	; 0x24
 8003c64:	f7fe fb44 	bl	80022f0 <memPoolAlloc>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61bb      	str	r3, [r7, #24]
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d05c      	beq.n	8003d34 <tcpStateListen+0x184>
         return;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 is currently used?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d15a      	bne.n	8003d38 <tcpStateListen+0x188>
      {
         //Save the source IPv4 address
         queueItem->srcAddr.length = sizeof(Ipv4Addr);
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2204      	movs	r2, #4
 8003c86:	609a      	str	r2, [r3, #8]
         queueItem->srcAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	60da      	str	r2, [r3, #12]
         //Save the destination IPv4 address
         queueItem->destAddr.length = sizeof(Ipv4Addr);
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2204      	movs	r2, #4
 8003c94:	615a      	str	r2, [r3, #20]
         queueItem->destAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	619a      	str	r2, [r3, #24]
         //This should never occur...
         return;
      }

      //Initialize next field
      queueItem->next = NULL;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
      //Underlying network interface
      queueItem->interface = interface;
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	605a      	str	r2, [r3, #4]
      //Save the port number of the client
      queueItem->srcPort = segment->srcPort;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	821a      	strh	r2, [r3, #16]
      //Save the initial sequence number
      queueItem->isn = segment->seqNum;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	61da      	str	r2, [r3, #28]
      //Default MSS value
      queueItem->mss = MIN(TCP_DEFAULT_MSS, TCP_MAX_MSS);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f44f 7206 	mov.w	r2, #536	; 0x218
 8003cc2:	841a      	strh	r2, [r3, #32]

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	6838      	ldr	r0, [r7, #0]
 8003cc8:	f000 feec 	bl	8004aa4 <tcpGetOption>
 8003ccc:	6178      	str	r0, [r7, #20]

      //Specified option found?
      if(option != NULL && option->length == 4)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d025      	beq.n	8003d20 <tcpStateListen+0x170>
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d121      	bne.n	8003d20 <tcpStateListen+0x170>
      {
         //Retrieve MSS value
         memcpy(&queueItem->mss, option->value, 2);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	3320      	adds	r3, #32
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	3202      	adds	r2, #2
 8003ce4:	8812      	ldrh	r2, [r2, #0]
 8003ce6:	b292      	uxth	r2, r2
 8003ce8:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         queueItem->mss = ntohs(queueItem->mss);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	8c1b      	ldrh	r3, [r3, #32]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fc fc56 	bl	80005a0 <swapInt16>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	841a      	strh	r2, [r3, #32]

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", queueItem->mss);

         //Make sure that the MSS advertised by the peer is acceptable
         queueItem->mss = MIN(queueItem->mss, TCP_MAX_MSS);
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	8c1b      	ldrh	r3, [r3, #32]
 8003d00:	f240 5296 	movw	r2, #1430	; 0x596
 8003d04:	4293      	cmp	r3, r2
 8003d06:	bf28      	it	cs
 8003d08:	4613      	movcs	r3, r2
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	841a      	strh	r2, [r3, #32]
         queueItem->mss = MAX(queueItem->mss, TCP_MIN_MSS);
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	8c1b      	ldrh	r3, [r3, #32]
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	bf38      	it	cc
 8003d18:	2340      	movcc	r3, #64	; 0x40
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	841a      	strh	r2, [r3, #32]
      }

      //Notify user that a connection request is pending
      tcpUpdateEvents(socket);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f001 feb3 	bl	8005a8c <tcpUpdateEvents>
 8003d26:	e008      	b.n	8003d3a <tcpStateListen+0x18a>
      return;
 8003d28:	bf00      	nop
 8003d2a:	e006      	b.n	8003d3a <tcpStateListen+0x18a>
         return;
 8003d2c:	bf00      	nop
 8003d2e:	e004      	b.n	8003d3a <tcpStateListen+0x18a>
            return;
 8003d30:	bf00      	nop
 8003d32:	e002      	b.n	8003d3a <tcpStateListen+0x18a>
         return;
 8003d34:	bf00      	nop
 8003d36:	e000      	b.n	8003d3a <tcpStateListen+0x18a>
         return;
 8003d38:	bf00      	nop

      //The rest of the processing described in RFC 793 will be done
      //asynchronously when socketAccept() function is called
   }
}
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <tcpStateSynSent>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateSynSent(Socket *socket, TcpHeader *segment, size_t length)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-SENT state\r\n");

   //Check the ACK bit
   if(segment->flags & TCP_FLAG_ACK)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	7b5b      	ldrb	r3, [r3, #13]
 8003d50:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01b      	beq.n	8003d96 <tcpStateSynSent+0x56>
   {
      //Make sure the acknowledgment number is valid
      if(segment->ackNum != socket->sndNxt)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d015      	beq.n	8003d96 <tcpStateSynSent+0x56>
      {
         //Send a reset segment unless the RST bit is set
         if(!(segment->flags & TCP_FLAG_RST))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	7b5b      	ldrb	r3, [r3, #13]
 8003d6e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f040 80ce 	bne.w	8003f1a <tcpStateSynSent+0x1da>
            tcpSendSegment(socket, TCP_FLAG_RST, segment->ackNum, 0, 0, FALSE);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	2300      	movs	r3, #0
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	2300      	movs	r3, #0
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2104      	movs	r1, #4
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fbd8 	bl	8004544 <tcpSendSegment>

         //Drop the segment and return
         return;
 8003d94:	e0c1      	b.n	8003f1a <tcpStateSynSent+0x1da>
      }
   }

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	7b5b      	ldrb	r3, [r3, #13]
 8003d9a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00e      	beq.n	8003dc6 <tcpStateSynSent+0x86>
   {
      //Make sure the ACK is acceptable
      if(segment->flags & TCP_FLAG_ACK)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	7b5b      	ldrb	r3, [r3, #13]
 8003dac:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80b1 	beq.w	8003f1e <tcpStateSynSent+0x1de>
      {
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f001 fe3e 	bl	8005a40 <tcpChangeState>
         MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
         TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);
      }

      //Drop the segment and return
      return;
 8003dc4:	e0ab      	b.n	8003f1e <tcpStateSynSent+0x1de>
   }

   //Check the SYN bit
   if(segment->flags & TCP_FLAG_SYN)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	7b5b      	ldrb	r3, [r3, #13]
 8003dca:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a3 	beq.w	8003f20 <tcpStateSynSent+0x1e0>
   {
      //Save initial receive sequence number
      socket->irs = segment->seqNum;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c
      //Initialize RCV.NXT pointer
      socket->rcvNxt = segment->seqNum + 1;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	679a      	str	r2, [r3, #120]	; 0x78

      //If there is an ACK, SND.UNA should be advanced to equal SEG.ACK
      if(segment->flags & TCP_FLAG_ACK)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	7b5b      	ldrb	r3, [r3, #13]
 8003df0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <tcpStateSynSent+0xc6>
         socket->sndUna = segment->ackNum;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	661a      	str	r2, [r3, #96]	; 0x60

      //Compute retransmission timeout
      tcpComputeRto(socket);
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f001 fc0e 	bl	8005628 <tcpComputeRto>

      //Any segments on the retransmission queue which are thereby
      //acknowledged should be removed
      tcpUpdateRetransmitQueue(socket);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f001 fa48 	bl	80052a2 <tcpUpdateRetransmitQueue>

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 8003e12:	2102      	movs	r1, #2
 8003e14:	68b8      	ldr	r0, [r7, #8]
 8003e16:	f000 fe45 	bl	8004aa4 <tcpGetOption>
 8003e1a:	6178      	str	r0, [r7, #20]

      //Specified option found?
      if(option != NULL && option->length == 4)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02b      	beq.n	8003e7a <tcpStateSynSent+0x13a>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	785b      	ldrb	r3, [r3, #1]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d127      	bne.n	8003e7a <tcpStateSynSent+0x13a>
      {
         //Retrieve MSS value
         memcpy(&socket->smss, option->value, 2);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3354      	adds	r3, #84	; 0x54
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	3202      	adds	r2, #2
 8003e32:	8812      	ldrh	r2, [r2, #0]
 8003e34:	b292      	uxth	r2, r2
 8003e36:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         socket->smss = ntohs(socket->smss);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc fbae 	bl	80005a0 <swapInt16>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", socket->smss);

         //Make sure that the MSS advertised by the peer is acceptable
         socket->smss = MIN(socket->smss, TCP_MAX_MSS);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e54:	f240 5296 	movw	r2, #1430	; 0x596
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	bf28      	it	cs
 8003e5c:	4613      	movcs	r3, r2
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
         socket->smss = MAX(socket->smss, TCP_MIN_MSS);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	bf38      	it	cc
 8003e70:	2340      	movcc	r3, #64	; 0x40
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Initial congestion window
      socket->cwnd = MIN(TCP_INITIAL_WINDOW * socket->smss, socket->txBufferSize);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003e86:	4619      	mov	r1, r3
 8003e88:	460b      	mov	r3, r1
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	440b      	add	r3, r1
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	bf28      	it	cs
 8003e92:	4613      	movcs	r3, r2
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
#endif

      //Check whether our SYN has been acknowledged (SND.UNA > ISS)
      if(TCP_CMP_SEQ(socket->sndUna, socket->iss) > 0)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	dd25      	ble.n	8003ef6 <tcpStateSynSent+0x1b6>
      {
         //Update the send window before entering ESTABLISHED state (refer to
         //RFC 1122, section 4.2.2.20)
         socket->sndWnd = segment->window;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	89db      	ldrh	r3, [r3, #14]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
         socket->sndWl1 = segment->seqNum;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	671a      	str	r2, [r3, #112]	; 0x70
         socket->sndWl2 = segment->ackNum;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	675a      	str	r2, [r3, #116]	; 0x74

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = segment->window;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	89db      	ldrh	r3, [r3, #14]
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

         //Form an ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003eda:	2300      	movs	r3, #0
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	2110      	movs	r1, #16
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fb2c 	bl	8004544 <tcpSendSegment>
         //Switch to the ESTABLISHED state
         tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 8003eec:	2104      	movs	r1, #4
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f001 fda6 	bl	8005a40 <tcpChangeState>
 8003ef4:	e014      	b.n	8003f20 <tcpStateSynSent+0x1e0>
      }
      else
      {
         //Form an SYN ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_SYN | TCP_FLAG_ACK, socket->iss, socket->rcvNxt, 0, TRUE);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003efe:	2301      	movs	r3, #1
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	460b      	mov	r3, r1
 8003f08:	2112      	movs	r1, #18
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fb1a 	bl	8004544 <tcpSendSegment>
         //Enter SYN-RECEIVED state
         tcpChangeState(socket, TCP_STATE_SYN_RECEIVED);
 8003f10:	2103      	movs	r1, #3
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f001 fd94 	bl	8005a40 <tcpChangeState>
 8003f18:	e002      	b.n	8003f20 <tcpStateSynSent+0x1e0>
         return;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <tcpStateSynSent+0x1e0>
      return;
 8003f1e:	bf00      	nop
      }
   }
}
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <tcpStateSynReceived>:
 * @param[in] length Length of the segment data
 **/

void tcpStateSynReceived(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af02      	add	r7, sp, #8
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-RECEIVED state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fe06 	bl	8004b4a <tcpCheckSequenceNumber>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d151      	bne.n	8003fe8 <tcpStateSynReceived+0xc2>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	7b5b      	ldrb	r3, [r3, #13]
 8003f48:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d004      	beq.n	8003f60 <tcpStateSynReceived+0x3a>
   {
      //Return to CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003f56:	2100      	movs	r1, #0
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f001 fd71 	bl	8005a40 <tcpChangeState>
      //CLOSED state from either the SYN-SENT state or the SYN-RECEIVED state
      MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
      TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);

      //Return immediately
      return;
 8003f5e:	e048      	b.n	8003ff2 <tcpStateSynReceived+0xcc>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fe80 	bl	8004c6a <tcpCheckSyn>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d13d      	bne.n	8003fec <tcpStateSynReceived+0xc6>
      return;

   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	7b5b      	ldrb	r3, [r3, #13]
 8003f74:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d036      	beq.n	8003ff0 <tcpStateSynReceived+0xca>
      return;

   //Make sure the acknowledgment number is valid
   if(segment->ackNum != socket->sndNxt)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d00b      	beq.n	8003fa6 <tcpStateSynReceived+0x80>
   {
      //If the segment acknowledgment is not acceptable, form a reset
      //segment and send it
      tcpSendSegment(socket, TCP_FLAG_RST, segment->ackNum, 0, 0, FALSE);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	2300      	movs	r3, #0
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	2300      	movs	r3, #0
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2104      	movs	r1, #4
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fad0 	bl	8004544 <tcpSendSegment>

      //Drop the segment and return
      return;
 8003fa4:	e025      	b.n	8003ff2 <tcpStateSynReceived+0xcc>
   }

   //Update the send window before entering ESTABLISHED state (refer to
   //RFC 1122, section 4.2.2.20)
   socket->sndWnd = segment->window;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	89db      	ldrh	r3, [r3, #14]
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   socket->sndWl1 = segment->seqNum;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	671a      	str	r2, [r3, #112]	; 0x70
   socket->sndWl2 = segment->ackNum;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	675a      	str	r2, [r3, #116]	; 0x74

   //Maximum send window it has seen so far on the connection
   socket->maxSndWnd = segment->window;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	89db      	ldrh	r3, [r3, #14]
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

   //Enter ESTABLISHED state
   tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 8003fce:	2104      	movs	r1, #4
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f001 fd35 	bl	8005a40 <tcpChangeState>
   //And continue processing...
   tcpStateEstablished(socket, segment, buffer, offset, length);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f809 	bl	8003ff8 <tcpStateEstablished>
 8003fe6:	e004      	b.n	8003ff2 <tcpStateSynReceived+0xcc>
      return;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <tcpStateSynReceived+0xcc>
      return;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <tcpStateSynReceived+0xcc>
      return;
 8003ff0:	bf00      	nop
}
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <tcpStateEstablished>:
 * @param[in] length Length of the segment data
 **/

void tcpStateEstablished(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
   uint_t flags = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: ESTABLISHED state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 800400a:	6a3a      	ldr	r2, [r7, #32]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fd9b 	bl	8004b4a <tcpCheckSequenceNumber>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d15c      	bne.n	80040d4 <tcpStateEstablished+0xdc>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	7b5b      	ldrb	r3, [r3, #13]
 800401e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <tcpStateEstablished+0x3e>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800402c:	2100      	movs	r1, #0
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f001 fd06 	bl	8005a40 <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 8004034:	e053      	b.n	80040de <tcpStateEstablished+0xe6>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fe15 	bl	8004c6a <tcpCheckSyn>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d148      	bne.n	80040d8 <tcpStateEstablished+0xe0>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8004046:	6a3a      	ldr	r2, [r7, #32]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fe47 	bl	8004cde <tcpCheckAck>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d142      	bne.n	80040dc <tcpStateEstablished+0xe4>
      return;
   //Process the segment text
   if(length > 0)
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <tcpStateEstablished+0x74>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f001 f878 	bl	800515c <tcpProcessSegmentData>

   //Check the FIN bit
   if(segment->flags & TCP_FLAG_FIN)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	7b5b      	ldrb	r3, [r3, #13]
 8004070:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01d      	beq.n	80040ba <tcpStateEstablished+0xc2>
   {
      //The FIN can only be acknowledged if all the segment data
      //has been successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6859      	ldr	r1, [r3, #4]
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	440b      	add	r3, r1
 800408a:	429a      	cmp	r2, r3
 800408c:	d115      	bne.n	80040ba <tcpStateEstablished+0xc2>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	679a      	str	r2, [r3, #120]	; 0x78
         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80040a0:	2300      	movs	r3, #0
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	2300      	movs	r3, #0
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	460b      	mov	r3, r1
 80040aa:	2110      	movs	r1, #16
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fa49 	bl	8004544 <tcpSendSegment>
         //Switch to the CLOSE-WAIT state
         tcpChangeState(socket, TCP_STATE_CLOSE_WAIT);
 80040b2:	2105      	movs	r1, #5
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f001 fcc3 	bl	8005a40 <tcpChangeState>
      }
   }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate AK received?
   if(socket->dupAckCount > 0)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <tcpStateEstablished+0xd2>
      flags = SOCKET_FLAG_NO_DELAY;
 80040c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040c8:	617b      	str	r3, [r7, #20]
#endif

   //The Nagle algorithm should be implemented to coalesce
   //short segments (refer to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 80040ca:	6979      	ldr	r1, [r7, #20]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f001 fbac 	bl	800582a <tcpNagleAlgo>
 80040d2:	e004      	b.n	80040de <tcpStateEstablished+0xe6>
      return;
 80040d4:	bf00      	nop
 80040d6:	e002      	b.n	80040de <tcpStateEstablished+0xe6>
      return;
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <tcpStateEstablished+0xe6>
      return;
 80040dc:	bf00      	nop
}
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <tcpStateCloseWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateCloseWait(Socket *socket, TcpHeader *segment, size_t length)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
   uint_t flags = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSE-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fd26 	bl	8004b4a <tcpCheckSequenceNumber>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d12a      	bne.n	800415a <tcpStateCloseWait+0x76>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	7b5b      	ldrb	r3, [r3, #13]
 8004108:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <tcpStateCloseWait+0x3c>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8004116:	2100      	movs	r1, #0
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f001 fc91 	bl	8005a40 <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 800411e:	e021      	b.n	8004164 <tcpStateCloseWait+0x80>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fda0 	bl	8004c6a <tcpCheckSyn>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <tcpStateCloseWait+0x7a>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fdd2 	bl	8004cde <tcpCheckAck>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d110      	bne.n	8004162 <tcpStateCloseWait+0x7e>
      return;

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate AK received?
   if(socket->dupAckCount > 0)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <tcpStateCloseWait+0x6c>
      flags = SOCKET_FLAG_NO_DELAY;
 800414a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800414e:	617b      	str	r3, [r7, #20]
#endif

   //The Nagle algorithm should be implemented to coalesce
   //short segments (refer to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f001 fb69 	bl	800582a <tcpNagleAlgo>
 8004158:	e004      	b.n	8004164 <tcpStateCloseWait+0x80>
      return;
 800415a:	bf00      	nop
 800415c:	e002      	b.n	8004164 <tcpStateCloseWait+0x80>
      return;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <tcpStateCloseWait+0x80>
      return;
 8004162:	bf00      	nop
}
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <tcpStateLastAck>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateLastAck(Socket *socket, TcpHeader *segment, size_t length)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: LAST-ACK state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fce5 	bl	8004b4a <tcpCheckSequenceNumber>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d129      	bne.n	80041da <tcpStateLastAck+0x70>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	7b5b      	ldrb	r3, [r3, #13]
 800418a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <tcpStateLastAck+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8004198:	2100      	movs	r1, #0
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f001 fc50 	bl	8005a40 <tcpChangeState>
      //Return immediately
      return;
 80041a0:	e020      	b.n	80041e4 <tcpStateLastAck+0x7a>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fd5f 	bl	8004c6a <tcpCheckSyn>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d115      	bne.n	80041de <tcpStateLastAck+0x74>
      return;
   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	7b5b      	ldrb	r3, [r3, #13]
 80041b6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <tcpStateLastAck+0x78>
      return;

   //The only thing that can arrive in this state is an
   //acknowledgment of our FIN
   if(segment->ackNum == socket->sndNxt)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d109      	bne.n	80041e4 <tcpStateLastAck+0x7a>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80041d0:	2100      	movs	r1, #0
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f001 fc34 	bl	8005a40 <tcpChangeState>
 80041d8:	e004      	b.n	80041e4 <tcpStateLastAck+0x7a>
      return;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <tcpStateLastAck+0x7a>
      return;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <tcpStateLastAck+0x7a>
      return;
 80041e2:	bf00      	nop
   }
}
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <tcpStateFinWait1>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait1(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af02      	add	r7, sp, #8
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-1 state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fca4 	bl	8004b4a <tcpCheckSequenceNumber>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d178      	bne.n	80042fa <tcpStateFinWait1+0x110>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	7b5b      	ldrb	r3, [r3, #13]
 800420c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <tcpStateFinWait1+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800421a:	2100      	movs	r1, #0
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f001 fc0f 	bl	8005a40 <tcpChangeState>
      //Return immediately
      return;
 8004222:	e06f      	b.n	8004304 <tcpStateFinWait1+0x11a>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fd1e 	bl	8004c6a <tcpCheckSyn>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d164      	bne.n	80042fe <tcpStateFinWait1+0x114>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 fd50 	bl	8004cde <tcpCheckAck>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d15e      	bne.n	8004302 <tcpStateFinWait1+0x118>
      return;

   //Check whether our FIN is now acknowledged
   if(segment->ackNum == socket->sndNxt)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424c:	429a      	cmp	r2, r3
 800424e:	d10b      	bne.n	8004268 <tcpStateFinWait1+0x7e>
   {
      //Start the FIN-WAIT-2 timer to prevent the connection
      //from staying in the FIN-WAIT-2 state forever
      tcpTimerStart(&socket->finWait2Timer, TCP_FIN_WAIT_2_TIMER);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8004256:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800425a:	4618      	mov	r0, r3
 800425c:	f002 f810 	bl	8006280 <tcpTimerStart>
      //enter FIN-WAIT-2 and continue processing in that state
      tcpChangeState(socket, TCP_STATE_FIN_WAIT_2);
 8004260:	2108      	movs	r1, #8
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f001 fbec 	bl	8005a40 <tcpChangeState>
   }

   //Process the segment text
   if(length > 0)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <tcpStateFinWait1+0x94>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 ff6f 	bl	800515c <tcpProcessSegmentData>

   //Check the FIN bit
   if(segment->flags & TCP_FLAG_FIN)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	7b5b      	ldrb	r3, [r3, #13]
 8004282:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d039      	beq.n	8004304 <tcpStateFinWait1+0x11a>
   {
      //The FIN can only be acknowledged if all the segment data
      //has been successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	440b      	add	r3, r1
 800429c:	429a      	cmp	r2, r3
 800429e:	d131      	bne.n	8004304 <tcpStateFinWait1+0x11a>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	679a      	str	r2, [r3, #120]	; 0x78
         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80042b2:	2300      	movs	r3, #0
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	2300      	movs	r3, #0
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	460b      	mov	r3, r1
 80042bc:	2110      	movs	r1, #16
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f940 	bl	8004544 <tcpSendSegment>

         //Check if our FIN has been acknowledged
         if(segment->ackNum == socket->sndNxt)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d10f      	bne.n	80042f0 <tcpStateFinWait1+0x106>
         {
            //Release previously allocated resources
            tcpDeleteControlBlock(socket);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 ffcb 	bl	800526c <tcpDeleteControlBlock>
            //Start the 2MSL timer
            tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80042dc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 ffcd 	bl	8006280 <tcpTimerStart>
            //Switch to the TIME-WAIT state
            tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 80042e6:	210a      	movs	r1, #10
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f001 fba9 	bl	8005a40 <tcpChangeState>
 80042ee:	e009      	b.n	8004304 <tcpStateFinWait1+0x11a>
         }
         else
         {
            //If our FIN has not been acknowledged, then enter CLOSING state
            tcpChangeState(socket, TCP_STATE_CLOSING);
 80042f0:	2109      	movs	r1, #9
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f001 fba4 	bl	8005a40 <tcpChangeState>
 80042f8:	e004      	b.n	8004304 <tcpStateFinWait1+0x11a>
      return;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <tcpStateFinWait1+0x11a>
      return;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <tcpStateFinWait1+0x11a>
      return;
 8004302:	bf00      	nop
         }
      }
   }
}
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <tcpStateFinWait2>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait2(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b086      	sub	sp, #24
 800430e:	af02      	add	r7, sp, #8
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-2 state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fc14 	bl	8004b4a <tcpCheckSequenceNumber>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d15b      	bne.n	80043e0 <tcpStateFinWait2+0xd6>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	7b5b      	ldrb	r3, [r3, #13]
 800432c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d004      	beq.n	8004344 <tcpStateFinWait2+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800433a:	2100      	movs	r1, #0
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f001 fb7f 	bl	8005a40 <tcpChangeState>
      //Return immediately
      return;
 8004342:	e052      	b.n	80043ea <tcpStateFinWait2+0xe0>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fc8e 	bl	8004c6a <tcpCheckSyn>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d147      	bne.n	80043e4 <tcpStateFinWait2+0xda>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fcc0 	bl	8004cde <tcpCheckAck>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d141      	bne.n	80043e8 <tcpStateFinWait2+0xde>
      return;
   //Process the segment text
   if(length > 0)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <tcpStateFinWait2+0x70>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fef1 	bl	800515c <tcpProcessSegmentData>

   //Check the FIN bit
   if(segment->flags & TCP_FLAG_FIN)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	7b5b      	ldrb	r3, [r3, #13]
 800437e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02e      	beq.n	80043ea <tcpStateFinWait2+0xe0>
   {
      //The FIN can only be acknowledged if all the segment data
      //has been successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	440b      	add	r3, r1
 8004398:	429a      	cmp	r2, r3
 800439a:	d126      	bne.n	80043ea <tcpStateFinWait2+0xe0>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	679a      	str	r2, [r3, #120]	; 0x78
         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80043ae:	2300      	movs	r3, #0
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	2300      	movs	r3, #0
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	460b      	mov	r3, r1
 80043b8:	2110      	movs	r1, #16
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8c2 	bl	8004544 <tcpSendSegment>

         //Release previously allocated resources
         tcpDeleteControlBlock(socket);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 ff53 	bl	800526c <tcpDeleteControlBlock>
         //Start the 2MSL timer
         tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80043cc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f001 ff55 	bl	8006280 <tcpTimerStart>
         //Switch to the TIME_WAIT state
         tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 80043d6:	210a      	movs	r1, #10
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f001 fb31 	bl	8005a40 <tcpChangeState>
 80043de:	e004      	b.n	80043ea <tcpStateFinWait2+0xe0>
      return;
 80043e0:	bf00      	nop
 80043e2:	e002      	b.n	80043ea <tcpStateFinWait2+0xe0>
      return;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <tcpStateFinWait2+0xe0>
      return;
 80043e8:	bf00      	nop
      }
   }
}
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <tcpStateClosing>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateClosing(Socket *socket, TcpHeader *segment, size_t length)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSING state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fba2 	bl	8004b4a <tcpCheckSequenceNumber>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d133      	bne.n	8004474 <tcpStateClosing+0x84>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	7b5b      	ldrb	r3, [r3, #13]
 8004410:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <tcpStateClosing+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800441e:	2100      	movs	r1, #0
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f001 fb0d 	bl	8005a40 <tcpChangeState>
      //Return immediately
      return;
 8004426:	e02a      	b.n	800447e <tcpStateClosing+0x8e>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fc1c 	bl	8004c6a <tcpCheckSyn>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d11f      	bne.n	8004478 <tcpStateClosing+0x88>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fc4e 	bl	8004cde <tcpCheckAck>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d119      	bne.n	800447c <tcpStateClosing+0x8c>
      return;

   //If the ACK acknowledges our FIN then enter the TIME-WAIT
   //state, otherwise ignore the segment
   if(segment->ackNum == socket->sndNxt)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004450:	429a      	cmp	r2, r3
 8004452:	d114      	bne.n	800447e <tcpStateClosing+0x8e>
   {
      //Release previously allocated resources
      tcpDeleteControlBlock(socket);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 ff09 	bl	800526c <tcpDeleteControlBlock>
      //Start the 2MSL timer
      tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004460:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004464:	4618      	mov	r0, r3
 8004466:	f001 ff0b 	bl	8006280 <tcpTimerStart>
      //Switch to the TIME-WAIT state
      tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 800446a:	210a      	movs	r1, #10
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f001 fae7 	bl	8005a40 <tcpChangeState>
 8004472:	e004      	b.n	800447e <tcpStateClosing+0x8e>
      return;
 8004474:	bf00      	nop
 8004476:	e002      	b.n	800447e <tcpStateClosing+0x8e>
      return;
 8004478:	bf00      	nop
 800447a:	e000      	b.n	800447e <tcpStateClosing+0x8e>
      return;
 800447c:	bf00      	nop
   }
}
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <tcpStateTimeWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateTimeWait(Socket *socket, TcpHeader *segment, size_t length)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: TIME-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fb58 	bl	8004b4a <tcpCheckSequenceNumber>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d147      	bne.n	8004530 <tcpStateTimeWait+0xac>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	7b5b      	ldrb	r3, [r3, #13]
 80044a4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00e      	beq.n	80044d0 <tcpStateTimeWait+0x4c>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80044b2:	2100      	movs	r1, #0
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f001 fac3 	bl	8005a40 <tcpChangeState>

      //Dispose the socket if the user does not have the ownership anymore
      if(!socket->ownedFlag)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d138      	bne.n	8004534 <tcpStateTimeWait+0xb0>
      {
         //Delete the TCB
         tcpDeleteControlBlock(socket);
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fed2 	bl	800526c <tcpDeleteControlBlock>
         //Mark the socket as closed
         socket->type = SOCKET_TYPE_UNUSED;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	605a      	str	r2, [r3, #4]
      }

      //Return immediately
      return;
 80044ce:	e031      	b.n	8004534 <tcpStateTimeWait+0xb0>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fbc8 	bl	8004c6a <tcpCheckSyn>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d12b      	bne.n	8004538 <tcpStateTimeWait+0xb4>
      return;
   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	7b5b      	ldrb	r3, [r3, #13]
 80044e4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d024      	beq.n	800453c <tcpStateTimeWait+0xb8>
      return;

   //The only thing that can arrive in this state is a retransmission
   //of the remote FIN. Acknowledge it and restart the 2 MSL timeout
   if(segment->flags & TCP_FLAG_FIN)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	7b5b      	ldrb	r3, [r3, #13]
 80044f6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01c      	beq.n	800453e <tcpStateTimeWait+0xba>
   {
      //Send an acknowledgment for the FIN
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800450c:	2300      	movs	r3, #0
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	2300      	movs	r3, #0
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	460b      	mov	r3, r1
 8004516:	2110      	movs	r1, #16
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f813 	bl	8004544 <tcpSendSegment>
      //Restart the 2MSL timer
      tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004524:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004528:	4618      	mov	r0, r3
 800452a:	f001 fea9 	bl	8006280 <tcpTimerStart>
 800452e:	e006      	b.n	800453e <tcpStateTimeWait+0xba>
      return;
 8004530:	bf00      	nop
 8004532:	e004      	b.n	800453e <tcpStateTimeWait+0xba>
      return;
 8004534:	bf00      	nop
 8004536:	e002      	b.n	800453e <tcpStateTimeWait+0xba>
      return;
 8004538:	bf00      	nop
 800453a:	e000      	b.n	800453e <tcpStateTimeWait+0xba>
      return;
 800453c:	bf00      	nop
   }
}
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <tcpSendSegment>:
 * @return Error code
 **/

error_t tcpSendSegment(Socket *socket, uint8_t flags, uint32_t seqNum,
   uint32_t ackNum, size_t length, bool_t addToQueue)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b093      	sub	sp, #76	; 0x4c
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	460b      	mov	r3, r1
 8004552:	72fb      	strb	r3, [r7, #11]
   TcpHeader *segment;
   TcpQueueItem *queueItem;
   IpPseudoHeader pseudoHeader;

   //Maximum segment size
   uint16_t mss = HTONS(socket->rmss);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800455a:	ba5b      	rev16	r3, r3
 800455c:	b29b      	uxth	r3, r3
 800455e:	82fb      	strh	r3, [r7, #22]

   //Allocate a memory buffer to hold the TCP segment
   buffer = ipAllocBuffer(TCP_MAX_HEADER_LENGTH, &offset);
 8004560:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004564:	4619      	mov	r1, r3
 8004566:	203c      	movs	r0, #60	; 0x3c
 8004568:	f7fd f9f4 	bl	8001954 <ipAllocBuffer>
 800456c:	63b8      	str	r0, [r7, #56]	; 0x38
   //Failed to allocate memory?
   if(buffer == NULL)
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <tcpSendSegment+0x34>
      return ERROR_OUT_OF_MEMORY;
 8004574:	2364      	movs	r3, #100	; 0x64
 8004576:	e154      	b.n	8004822 <tcpSendSegment+0x2de>

   //Point to the beginning of the TCP segment
   segment = netBufferAt(buffer, offset);
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	4619      	mov	r1, r3
 800457c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800457e:	f7fe f853 	bl	8002628 <netBufferAt>
 8004582:	6378      	str	r0, [r7, #52]	; 0x34

   //Format TCP header
   segment->srcPort = htons(socket->localPort);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8b1b      	ldrh	r3, [r3, #24]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fc f809 	bl	80005a0 <swapInt16>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004594:	801a      	strh	r2, [r3, #0]
   segment->destPort = htons(socket->remotePort);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800459a:	4618      	mov	r0, r3
 800459c:	f7fc f800 	bl	80005a0 <swapInt16>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	805a      	strh	r2, [r3, #2]
   segment->seqNum = htonl(seqNum);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fc f807 	bl	80005bc <swapInt32>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b2:	605a      	str	r2, [r3, #4]
   segment->ackNum = (flags & TCP_FLAG_ACK) ? htonl(ackNum) : 0;
 80045b4:	7afb      	ldrb	r3, [r7, #11]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <tcpSendSegment+0x84>
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7fb fffc 	bl	80005bc <swapInt32>
 80045c4:	4602      	mov	r2, r0
 80045c6:	e000      	b.n	80045ca <tcpSendSegment+0x86>
 80045c8:	2200      	movs	r2, #0
 80045ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045cc:	609a      	str	r2, [r3, #8]
   segment->reserved1 = 0;
 80045ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045d0:	7b13      	ldrb	r3, [r2, #12]
 80045d2:	f36f 0303 	bfc	r3, #0, #4
 80045d6:	7313      	strb	r3, [r2, #12]
   segment->dataOffset = 5;
 80045d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045da:	7b13      	ldrb	r3, [r2, #12]
 80045dc:	2105      	movs	r1, #5
 80045de:	f361 1307 	bfi	r3, r1, #4, #4
 80045e2:	7313      	strb	r3, [r2, #12]
   segment->flags = flags;
 80045e4:	7afb      	ldrb	r3, [r7, #11]
 80045e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ea:	b2d9      	uxtb	r1, r3
 80045ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ee:	7b53      	ldrb	r3, [r2, #13]
 80045f0:	f361 0305 	bfi	r3, r1, #0, #6
 80045f4:	7353      	strb	r3, [r2, #13]
   segment->reserved2 = 0;
 80045f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f8:	7b53      	ldrb	r3, [r2, #13]
 80045fa:	f36f 1387 	bfc	r3, #6, #2
 80045fe:	7353      	strb	r3, [r2, #13]
   segment->window = htons(socket->rcvWnd);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004606:	4618      	mov	r0, r3
 8004608:	f7fb ffca 	bl	80005a0 <swapInt16>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004612:	81da      	strh	r2, [r3, #14]
   segment->checksum = 0;
 8004614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004616:	2200      	movs	r2, #0
 8004618:	741a      	strb	r2, [r3, #16]
 800461a:	2200      	movs	r2, #0
 800461c:	745a      	strb	r2, [r3, #17]
   segment->urgentPointer = 0;
 800461e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004620:	2200      	movs	r2, #0
 8004622:	749a      	strb	r2, [r3, #18]
 8004624:	2200      	movs	r2, #0
 8004626:	74da      	strb	r2, [r3, #19]

   //SYN flag set?
   if(flags & TCP_FLAG_SYN)
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d006      	beq.n	8004640 <tcpSendSegment+0xfc>
   {
      //Append MSS option
      tcpAddOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE, &mss, sizeof(mss));
 8004632:	f107 0216 	add.w	r2, r7, #22
 8004636:	2302      	movs	r3, #2
 8004638:	2102      	movs	r1, #2
 800463a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800463c:	f000 f9ce 	bl	80049dc <tcpAddOption>
      tcpAddOption(segment, TCP_OPTION_SACK_PERMITTED, NULL, 0);
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + segment->dataOffset * 4);
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	7b1b      	ldrb	r3, [r3, #12]
 8004644:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004648:	b2db      	uxtb	r3, r3
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	461a      	mov	r2, r3
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	4413      	add	r3, r2
 8004652:	4619      	mov	r1, r3
 8004654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004656:	f7fd ff41 	bl	80024dc <netBufferSetLength>

   //Any data to send?
   if(length > 0)
 800465a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00f      	beq.n	8004680 <tcpSendSegment+0x13c>
   {
      //Copy data
      error = tcpReadTxBuffer(socket, seqNum, buffer, length);
 8004660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f001 fbbb 	bl	8005de2 <tcpReadTxBuffer>
 800466c:	4603      	mov	r3, r0
 800466e:	867b      	strh	r3, [r7, #50]	; 0x32
      //Any error to report?
      if(error)
 8004670:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <tcpSendSegment+0x13c>
      {
         //Clean up side effects
         netBufferFree(buffer);
 8004676:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004678:	f7fd feff 	bl	800247a <netBufferFree>
         //Exit immediately
         return error;
 800467c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800467e:	e0d0      	b.n	8004822 <tcpSendSegment+0x2de>
      }
   }

   //Calculate the length of the complete TCP segment
   totalLength = segment->dataOffset * 4 + length;
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	7b1b      	ldrb	r3, [r3, #12]
 8004684:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004688:	b2db      	uxtb	r3, r3
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	461a      	mov	r2, r3
 800468e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004690:	4413      	add	r3, r2
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(socket->remoteIpAddr.length == sizeof(Ipv4Addr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d128      	bne.n	80046ee <tcpSendSegment+0x1aa>
   {
      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 800469c:	230c      	movs	r3, #12
 800469e:	61bb      	str	r3, [r7, #24]
      pseudoHeader.ipv4Data.srcAddr = socket->localIpAddr.ipv4Addr;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	61fb      	str	r3, [r7, #28]
      pseudoHeader.ipv4Data.destAddr = socket->remoteIpAddr.ipv4Addr;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	623b      	str	r3, [r7, #32]
      pseudoHeader.ipv4Data.reserved = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 80046b2:	2306      	movs	r3, #6
 80046b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      pseudoHeader.ipv4Data.length = htons(totalLength);
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fb ff6f 	bl	80005a0 <swapInt16>
 80046c2:	4603      	mov	r3, r0
 80046c4:	84fb      	strh	r3, [r7, #38]	; 0x26

      //Calculate TCP header checksum
      segment->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 80046c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c8:	f107 0318 	add.w	r3, r7, #24
 80046cc:	1d18      	adds	r0, r3, #4
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	4613      	mov	r3, r2
 80046d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046d6:	210c      	movs	r1, #12
 80046d8:	f7fd f913 	bl	8001902 <ipCalcUpperLayerChecksumEx>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	821a      	strh	r2, [r3, #16]
      //This should never occur...
      return ERROR_INVALID_ADDRESS;
   }

   //Add current segment to retransmission queue?
   if(addToQueue)
 80046e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8082 	beq.w	80047f0 <tcpSendSegment+0x2ac>
 80046ec:	e004      	b.n	80046f8 <tcpSendSegment+0x1b4>
      netBufferFree(buffer);
 80046ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046f0:	f7fd fec3 	bl	800247a <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 80046f4:	23e4      	movs	r3, #228	; 0xe4
 80046f6:	e094      	b.n	8004822 <tcpSendSegment+0x2de>
   {
      //Empty retransmission queue?
      if(!socket->retransmitQueue)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <tcpSendSegment+0x1d0>
      {
         //Create a new item
         queueItem = memPoolAlloc(sizeof(TcpQueueItem));
 8004702:	2058      	movs	r0, #88	; 0x58
 8004704:	f7fd fdf4 	bl	80022f0 <memPoolAlloc>
 8004708:	63f8      	str	r0, [r7, #60]	; 0x3c
         //Add the newly created item to the queue
         socket->retransmitQueue = queueItem;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800470e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 8004712:	e014      	b.n	800473e <tcpSendSegment+0x1fa>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->retransmitQueue;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800471a:	63fb      	str	r3, [r7, #60]	; 0x3c
         //Reach the last item of the retransmission queue
         while(queueItem->next) queueItem = queueItem->next;
 800471c:	e002      	b.n	8004724 <tcpSendSegment+0x1e0>
 800471e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f8      	bne.n	800471e <tcpSendSegment+0x1da>
         //Create a new item
         queueItem->next = memPoolAlloc(sizeof(TcpQueueItem));
 800472c:	2058      	movs	r0, #88	; 0x58
 800472e:	f7fd fddf 	bl	80022f0 <memPoolAlloc>
 8004732:	4602      	mov	r2, r0
 8004734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004736:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8004738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 800473e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <tcpSendSegment+0x20a>
      {
         //Free previously allocated memory
         netBufferFree(buffer);
 8004744:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004746:	f7fd fe98 	bl	800247a <netBufferFree>
         //Return status
         return ERROR_OUT_OF_MEMORY;
 800474a:	2364      	movs	r3, #100	; 0x64
 800474c:	e069      	b.n	8004822 <tcpSendSegment+0x2de>
      }

      //Retransmission mechanism requires additional information
      queueItem->next = NULL;
 800474e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
      queueItem->length = length;
 8004754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004756:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004758:	605a      	str	r2, [r3, #4]
      queueItem->sacked = FALSE;
 800475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475c:	2200      	movs	r2, #0
 800475e:	609a      	str	r2, [r3, #8]
      //Save TCP header
      memcpy(queueItem->header, segment, segment->dataOffset * 4);
 8004760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004762:	f103 001c 	add.w	r0, r3, #28
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	7b1b      	ldrb	r3, [r3, #12]
 800476a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800476e:	b2db      	uxtb	r3, r3
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	461a      	mov	r2, r3
 8004774:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004776:	f015 fc4d 	bl	801a014 <memcpy>
      //Save pseudo header
      queueItem->pseudoHeader = pseudoHeader;
 800477a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477c:	f103 040c 	add.w	r4, r3, #12
 8004780:	f107 0318 	add.w	r3, r7, #24
 8004784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

      //Take one RTT measurement at a time
      if(!socket->rttBusy)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004790:	2b00      	cmp	r3, #0
 8004792:	d116      	bne.n	80047c2 <tcpSendSegment+0x27e>
      {
         //Save round-trip start time
         socket->rttStartTime = osGetSystemTime();
 8004794:	f7fc f81c 	bl	80007d0 <osGetSystemTime>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         //Record current sequence number
         socket->rttSeqNum = ntohl(segment->seqNum);
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fb ff09 	bl	80005bc <swapInt32>
 80047aa:	4602      	mov	r2, r0
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
         //Wait for an acknowledgment that covers that sequence number...
         socket->rttBusy = TRUE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
         //Reset the byte counter
         socket->n = 0;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
      }

      //Check whether the RTO timer is already running
      if(!tcpTimerRunning(&socket->retransmitTimer))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 fd7a 	bl	80062c2 <tcpTimerRunning>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <tcpSendSegment+0x2ac>
      {
         //If the timer is not running, start it running so that
         //it will expire after RTO seconds
         tcpTimerStart(&socket->retransmitTimer, socket->rto);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f001 fd4c 	bl	8006280 <tcpTimerStart>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   //Debug message
   TRACE_DEBUG("%s: Sending TCP segment (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment, length, socket->iss, socket->irs);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047fc:	f001 fb90 	bl	8005f20 <tcpDumpHeader>

   //Send TCP segment
   error = ipSendDatagram(socket->interface, &pseudoHeader, buffer, offset, 0);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68d8      	ldr	r0, [r3, #12]
 8004804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004806:	f107 0118 	add.w	r1, r7, #24
 800480a:	2300      	movs	r3, #0
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004812:	f7fc ff15 	bl	8001640 <ipSendDatagram>
 8004816:	4603      	mov	r3, r0
 8004818:	867b      	strh	r3, [r7, #50]	; 0x32

   //Free previously allocated memory
   netBufferFree(buffer);
 800481a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800481c:	f7fd fe2d 	bl	800247a <netBufferFree>
   //Return error code
   return error;
 8004820:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
}
 8004822:	4618      	mov	r0, r3
 8004824:	3744      	adds	r7, #68	; 0x44
 8004826:	46bd      	mov	sp, r7
 8004828:	bd90      	pop	{r4, r7, pc}

0800482a <tcpSendResetSegment>:
 * @return Error code
 **/

error_t tcpSendResetSegment(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b092      	sub	sp, #72	; 0x48
 800482e:	af02      	add	r7, sp, #8
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
   NetBuffer *buffer;
   TcpHeader *segment2;
   IpPseudoHeader pseudoHeader2;

   //Check whether the ACK bit is set
   if(segment->flags & TCP_FLAG_ACK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7b5b      	ldrb	r3, [r3, #13]
 800483c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <tcpSendResetSegment+0x32>
   {
      //If the incoming segment has an ACK field, the reset takes
      //its sequence number from the ACK field of the segment
      flags = TCP_FLAG_RST;
 800484a:	2304      	movs	r3, #4
 800484c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      seqNum = segment->ackNum;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	63bb      	str	r3, [r7, #56]	; 0x38
      ackNum = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
 800485a:	e021      	b.n	80048a0 <tcpSendResetSegment+0x76>
   }
   else
   {
      //Otherwise the reset has sequence number zero and the ACK field is set to
      //the sum of the sequence number and segment length of the incoming segment
      flags = TCP_FLAG_RST | TCP_FLAG_ACK;
 800485c:	2314      	movs	r3, #20
 800485e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      seqNum = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
      ackNum = segment->seqNum + length;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	4413      	add	r3, r2
 800486e:	637b      	str	r3, [r7, #52]	; 0x34

      //Advance the acknowledgment number over the SYN or the FIN
      if(segment->flags & TCP_FLAG_SYN)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	7b5b      	ldrb	r3, [r3, #13]
 8004874:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <tcpSendResetSegment+0x5e>
         ackNum++;
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004884:	3301      	adds	r3, #1
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
      if(segment->flags & TCP_FLAG_FIN)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	7b5b      	ldrb	r3, [r3, #13]
 800488c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <tcpSendResetSegment+0x76>
         ackNum++;
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	3301      	adds	r3, #1
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
   }

   //Allocate a memory buffer to hold the reset segment
   buffer = ipAllocBuffer(sizeof(TcpHeader), &offset);
 80048a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a4:	4619      	mov	r1, r3
 80048a6:	2014      	movs	r0, #20
 80048a8:	f7fd f854 	bl	8001954 <ipAllocBuffer>
 80048ac:	6338      	str	r0, [r7, #48]	; 0x30
   //Failed to allocate memory?
   if(buffer == NULL)
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <tcpSendResetSegment+0x8e>
      return ERROR_OUT_OF_MEMORY;
 80048b4:	2364      	movs	r3, #100	; 0x64
 80048b6:	e08d      	b.n	80049d4 <tcpSendResetSegment+0x1aa>

   //Point to the beginning of the TCP segment
   segment2 = netBufferAt(buffer, offset);
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	4619      	mov	r1, r3
 80048bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048be:	f7fd feb3 	bl	8002628 <netBufferAt>
 80048c2:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Format TCP header
   segment2->srcPort = htons(segment->destPort);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	885b      	ldrh	r3, [r3, #2]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fb fe68 	bl	80005a0 <swapInt16>
 80048d0:	4603      	mov	r3, r0
 80048d2:	461a      	mov	r2, r3
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	801a      	strh	r2, [r3, #0]
   segment2->destPort = htons(segment->srcPort);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fb fe5e 	bl	80005a0 <swapInt16>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	805a      	strh	r2, [r3, #2]
   segment2->seqNum = htonl(seqNum);
 80048ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048ee:	f7fb fe65 	bl	80005bc <swapInt32>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	605a      	str	r2, [r3, #4]
   segment2->ackNum = htonl(ackNum);
 80048f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048fa:	f7fb fe5f 	bl	80005bc <swapInt32>
 80048fe:	4602      	mov	r2, r0
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	609a      	str	r2, [r3, #8]
   segment2->reserved1 = 0;
 8004904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004906:	7b13      	ldrb	r3, [r2, #12]
 8004908:	f36f 0303 	bfc	r3, #0, #4
 800490c:	7313      	strb	r3, [r2, #12]
   segment2->dataOffset = 5;
 800490e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004910:	7b13      	ldrb	r3, [r2, #12]
 8004912:	2105      	movs	r1, #5
 8004914:	f361 1307 	bfi	r3, r1, #4, #4
 8004918:	7313      	strb	r3, [r2, #12]
   segment2->flags = flags;
 800491a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800491e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004922:	b2d9      	uxtb	r1, r3
 8004924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004926:	7b53      	ldrb	r3, [r2, #13]
 8004928:	f361 0305 	bfi	r3, r1, #0, #6
 800492c:	7353      	strb	r3, [r2, #13]
   segment2->reserved2 = 0;
 800492e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004930:	7b53      	ldrb	r3, [r2, #13]
 8004932:	f36f 1387 	bfc	r3, #6, #2
 8004936:	7353      	strb	r3, [r2, #13]
   segment2->window = 0;
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	2200      	movs	r2, #0
 800493c:	739a      	strb	r2, [r3, #14]
 800493e:	2200      	movs	r2, #0
 8004940:	73da      	strb	r2, [r3, #15]
   segment2->checksum = 0;
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	2200      	movs	r2, #0
 8004946:	741a      	strb	r2, [r3, #16]
 8004948:	2200      	movs	r2, #0
 800494a:	745a      	strb	r2, [r3, #17]
   segment2->urgentPointer = 0;
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	2200      	movs	r2, #0
 8004950:	749a      	strb	r2, [r3, #18]
 8004952:	2200      	movs	r2, #0
 8004954:	74da      	strb	r2, [r3, #19]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d136      	bne.n	80049cc <tcpSendResetSegment+0x1a2>
   {
      //Format IPv4 pseudo header
      pseudoHeader2.length = sizeof(Ipv4PseudoHeader);
 800495e:	230c      	movs	r3, #12
 8004960:	617b      	str	r3, [r7, #20]
      pseudoHeader2.ipv4Data.srcAddr = pseudoHeader->ipv4Data.destAddr;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	61bb      	str	r3, [r7, #24]
      pseudoHeader2.ipv4Data.destAddr = pseudoHeader->ipv4Data.srcAddr;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	61fb      	str	r3, [r7, #28]
      pseudoHeader2.ipv4Data.reserved = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	f887 3020 	strb.w	r3, [r7, #32]
      pseudoHeader2.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 8004974:	2306      	movs	r3, #6
 8004976:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      pseudoHeader2.ipv4Data.length = HTONS(sizeof(TcpHeader));
 800497a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800497e:	847b      	strh	r3, [r7, #34]	; 0x22

      //Calculate TCP header checksum
      segment2->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader2.ipv4Data,
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	f107 0314 	add.w	r3, r7, #20
 8004986:	1d18      	adds	r0, r3, #4
 8004988:	2314      	movs	r3, #20
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004990:	210c      	movs	r1, #12
 8004992:	f7fc ffb6 	bl	8001902 <ipCalcUpperLayerChecksumEx>
 8004996:	4603      	mov	r3, r0
 8004998:	461a      	mov	r2, r3
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	821a      	strh	r2, [r3, #16]

   //Debug message
   TRACE_DEBUG("%s: Sending TCP reset segment...\r\n",
      formatSystemTime(osGetSystemTime(), NULL));
   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment2, length, 0, 0);
 800499e:	2300      	movs	r3, #0
 80049a0:	2200      	movs	r2, #0
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049a6:	f001 fabb 	bl	8005f20 <tcpDumpHeader>

   //Send TCP segment
   error = ipSendDatagram(interface, &pseudoHeader2, buffer, offset, 0);
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	f107 0114 	add.w	r1, r7, #20
 80049b0:	2300      	movs	r3, #0
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7fc fe41 	bl	8001640 <ipSendDatagram>
 80049be:	4603      	mov	r3, r0
 80049c0:	857b      	strh	r3, [r7, #42]	; 0x2a

   //Free previously allocated memory
   netBufferFree(buffer);
 80049c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049c4:	f7fd fd59 	bl	800247a <netBufferFree>
   //Return error code
   return error;
 80049c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049ca:	e003      	b.n	80049d4 <tcpSendResetSegment+0x1aa>
      netBufferFree(buffer);
 80049cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ce:	f7fd fd54 	bl	800247a <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 80049d2:	23e4      	movs	r3, #228	; 0xe4
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3740      	adds	r7, #64	; 0x40
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <tcpAddOption>:
 * @return Error code
 **/

error_t tcpAddOption(TcpHeader *segment, uint8_t kind, const void *value,
   uint8_t length)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	461a      	mov	r2, r3
 80049e8:	460b      	mov	r3, r1
 80049ea:	72fb      	strb	r3, [r7, #11]
 80049ec:	4613      	mov	r3, r2
 80049ee:	72bb      	strb	r3, [r7, #10]
   uint_t i;
   size_t paddingSize;
   TcpOption *option;

   //Length of the complete option field
   length += sizeof(TcpOption);
 80049f0:	7abb      	ldrb	r3, [r7, #10]
 80049f2:	3302      	adds	r3, #2
 80049f4:	72bb      	strb	r3, [r7, #10]

   //Make sure there is enough space to add the specified option
   if((segment->dataOffset * 4 + length) > TCP_MAX_HEADER_LENGTH)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	7b1b      	ldrb	r3, [r3, #12]
 80049fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	009a      	lsls	r2, r3, #2
 8004a02:	7abb      	ldrb	r3, [r7, #10]
 8004a04:	4413      	add	r3, r2
 8004a06:	2b3c      	cmp	r3, #60	; 0x3c
 8004a08:	dd01      	ble.n	8004a0e <tcpAddOption+0x32>
      return ERROR_FAILURE;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e046      	b.n	8004a9c <tcpAddOption+0xc0>

   //Index of the first available byte
   i = segment->dataOffset * 4 - sizeof(TcpHeader);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	7b1b      	ldrb	r3, [r3, #12]
 8004a12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	3b14      	subs	r3, #20
 8004a1c:	61fb      	str	r3, [r7, #28]

   //Calculate the number of padding bytes
   paddingSize = (length % 4) ? 4 - (length % 4) : 0;
 8004a1e:	7abb      	ldrb	r3, [r7, #10]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <tcpAddOption+0x5a>
 8004a2a:	7abb      	ldrb	r3, [r7, #10]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	f1c3 0304 	rsb	r3, r3, #4
 8004a34:	e000      	b.n	8004a38 <tcpAddOption+0x5c>
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
   //Write padding bytes
   while(paddingSize--)
 8004a3a:	e006      	b.n	8004a4a <tcpAddOption+0x6e>
      segment->options[i++] = TCP_OPTION_NOP;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	61fa      	str	r2, [r7, #28]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	2201      	movs	r2, #1
 8004a48:	751a      	strb	r2, [r3, #20]
   while(paddingSize--)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	1e5a      	subs	r2, r3, #1
 8004a4e:	61ba      	str	r2, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f3      	bne.n	8004a3c <tcpAddOption+0x60>

   //Point to the current location
   option = (TcpOption *) (segment->options + i);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f103 0214 	add.w	r2, r3, #20
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
   //Write specified option
   option->kind = kind;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	7afa      	ldrb	r2, [r7, #11]
 8004a64:	701a      	strb	r2, [r3, #0]
   option->length = length;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	7aba      	ldrb	r2, [r7, #10]
 8004a6a:	705a      	strb	r2, [r3, #1]
   memcpy(option->value, value, length - sizeof(TcpOption));
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1c98      	adds	r0, r3, #2
 8004a70:	7abb      	ldrb	r3, [r7, #10]
 8004a72:	3b02      	subs	r3, #2
 8004a74:	461a      	mov	r2, r3
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	f015 facc 	bl	801a014 <memcpy>
   //Adjust index value
   i += length;
 8004a7c:	7abb      	ldrb	r3, [r7, #10]
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	61fb      	str	r3, [r7, #28]

   //Update TCP header length
   segment->dataOffset = (sizeof(TcpHeader) + i) / 4;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	3314      	adds	r3, #20
 8004a88:	089b      	lsrs	r3, r3, #2
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	b2d9      	uxtb	r1, r3
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	7b13      	ldrb	r3, [r2, #12]
 8004a94:	f361 1307 	bfi	r3, r1, #4, #4
 8004a98:	7313      	strb	r3, [r2, #12]

   //Option successfully added
   return NO_ERROR;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <tcpGetOption>:
 * @return If the specified option is found, a pointer to the corresponding
 *   option is returned. Otherwise NULL pointer is returned
 **/

TcpOption *tcpGetOption(TcpHeader *segment, uint8_t kind)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
   size_t length;
   uint_t i;
   TcpOption *option;

   //Make sure the TCP header is valid
   if(segment->dataOffset < 5)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7b1b      	ldrb	r3, [r3, #12]
 8004ab4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d801      	bhi.n	8004ac2 <tcpGetOption+0x1e>
      return NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e03d      	b.n	8004b3e <tcpGetOption+0x9a>

   //Compute the length of the options field
   length = segment->dataOffset * 4 - sizeof(TcpHeader);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	7b1b      	ldrb	r3, [r3, #12]
 8004ac6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	3b14      	subs	r3, #20
 8004ad0:	613b      	str	r3, [r7, #16]

   //Point to the very first option
   i = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]

   //Parse TCP options
   while(i < length)
 8004ad6:	e02b      	b.n	8004b30 <tcpGetOption+0x8c>
   {
      //Point to the current option
      option = (TcpOption *) (segment->options + i);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f103 0214 	add.w	r2, r3, #20
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

      //NOP option detected?
      if(option->kind == TCP_OPTION_NOP)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d103      	bne.n	8004af4 <tcpGetOption+0x50>
      {
         i++;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	3301      	adds	r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
         continue;
 8004af2:	e01d      	b.n	8004b30 <tcpGetOption+0x8c>
      }
      //END option detected?
      if(option->kind == TCP_OPTION_END)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01e      	beq.n	8004b3a <tcpGetOption+0x96>
         break;
      //Check option length
      if((i + 1) >= length || (i + option->length) > length)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3301      	adds	r3, #1
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d91a      	bls.n	8004b3c <tcpGetOption+0x98>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	785b      	ldrb	r3, [r3, #1]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	4413      	add	r3, r2
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d312      	bcc.n	8004b3c <tcpGetOption+0x98>
         break;

      //Current option kind match the specified one?
      if(option->kind == kind)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d101      	bne.n	8004b24 <tcpGetOption+0x80>
         return option;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	e00c      	b.n	8004b3e <tcpGetOption+0x9a>

      //Jump to next the next option
      i += option->length;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
   while(i < length)
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3cf      	bcc.n	8004ad8 <tcpGetOption+0x34>
 8004b38:	e000      	b.n	8004b3c <tcpGetOption+0x98>
         break;
 8004b3a:	bf00      	nop
   }

   //Specified option code not found
   return NULL;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <tcpCheckSequenceNumber>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the incoming segment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckSequenceNumber(Socket *socket, TcpHeader *segment, size_t length)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b088      	sub	sp, #32
 8004b4e:	af02      	add	r7, sp, #8
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
   //Acceptability test for an incoming segment
   bool_t acceptable = FALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]

   //Case where both segment length and receive window are zero
   if(!length && !socket->rcvWnd)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10d      	bne.n	8004b7c <tcpCheckSequenceNumber+0x32>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <tcpCheckSequenceNumber+0x32>
   {
      //Make sure that SEG.SEQ = RCV.NXT
      if(segment->seqNum == socket->rcvNxt)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d159      	bne.n	8004c2a <tcpCheckSequenceNumber+0xe0>
      {
         acceptable = TRUE;
 8004b76:	2301      	movs	r3, #1
 8004b78:	617b      	str	r3, [r7, #20]
      if(segment->seqNum == socket->rcvNxt)
 8004b7a:	e056      	b.n	8004c2a <tcpCheckSequenceNumber+0xe0>
      }
   }
   //Case where segment length is zero and receive window is non zero
   else if(!length && socket->rcvWnd)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d119      	bne.n	8004bb6 <tcpCheckSequenceNumber+0x6c>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d014      	beq.n	8004bb6 <tcpCheckSequenceNumber+0x6c>
   {
      //Make sure that RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	db46      	blt.n	8004c28 <tcpCheckSequenceNumber+0xde>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 8004ba8:	440b      	add	r3, r1
 8004baa:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da3b      	bge.n	8004c28 <tcpCheckSequenceNumber+0xde>
      {
         acceptable = TRUE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004bb4:	e038      	b.n	8004c28 <tcpCheckSequenceNumber+0xde>
      }
   }
   //Case where both segment length and receive window are non zero
   else if(length && socket->rcvWnd)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d036      	beq.n	8004c2a <tcpCheckSequenceNumber+0xe0>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d031      	beq.n	8004c2a <tcpCheckSequenceNumber+0xe0>
   {
      //Check whether RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	db0d      	blt.n	8004bf0 <tcpCheckSequenceNumber+0xa6>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 8004be2:	440b      	add	r3, r1
 8004be4:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da02      	bge.n	8004bf0 <tcpCheckSequenceNumber+0xa6>
      {
         acceptable = TRUE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e01c      	b.n	8004c2a <tcpCheckSequenceNumber+0xe0>
      }
      //or RCV.NXT <= SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	441a      	add	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bfc:	425b      	negs	r3, r3
 8004bfe:	4413      	add	r3, r2
 8004c00:	3b01      	subs	r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	db11      	blt.n	8004c2a <tcpCheckSequenceNumber+0xe0>
         TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt + socket->rcvWnd) < 0)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	441a      	add	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c12:	68f9      	ldr	r1, [r7, #12]
 8004c14:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 8004c18:	440b      	add	r3, r1
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	3b01      	subs	r3, #1
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	da03      	bge.n	8004c2a <tcpCheckSequenceNumber+0xe0>
      {
         acceptable = TRUE;
 8004c22:	2301      	movs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e000      	b.n	8004c2a <tcpCheckSequenceNumber+0xe0>
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004c28:	bf00      	nop
      }
   }

   //Non acceptable sequence number?
   if(!acceptable)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d117      	bne.n	8004c60 <tcpCheckSequenceNumber+0x116>
      //Debug message
      TRACE_WARNING("Sequence number is not acceptable!\r\n");

      //If an incoming segment is not acceptable, an acknowledgment
      //should be sent in reply (unless the RST bit is set)
      if(!(segment->flags & TCP_FLAG_RST))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	7b5b      	ldrb	r3, [r3, #13]
 8004c34:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <tcpCheckSequenceNumber+0x112>
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	460b      	mov	r3, r1
 8004c54:	2110      	movs	r1, #16
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff fc74 	bl	8004544 <tcpSendSegment>

      //Return status code
      return ERROR_FAILURE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <tcpCheckSequenceNumber+0x118>
   }

   //Sequence number is acceptable
   return NO_ERROR;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <tcpCheckSyn>:
 * @param[in] length Length of the segment data
 * @return ERROR_FAILURE if the SYN is in the window, NO_ERROR otherwise
 **/

error_t tcpCheckSyn(Socket *socket, TcpHeader *segment, size_t length)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af02      	add	r7, sp, #8
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
   //Check the SYN bit
   if(segment->flags & TCP_FLAG_SYN)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	7b5b      	ldrb	r3, [r3, #13]
 8004c7a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d025      	beq.n	8004cd4 <tcpCheckSyn+0x6a>
   {
      //If this step is reached, the SYN is in the window. It is an error
      //and a reset shall be sent in response
      if(segment->flags & TCP_FLAG_ACK)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	7b5b      	ldrb	r3, [r3, #13]
 8004c8c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <tcpCheckSyn+0x48>
      {
         tcpSendSegment(socket, TCP_FLAG_RST, segment->ackNum, 0, 0, FALSE);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2104      	movs	r1, #4
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff fc4a 	bl	8004544 <tcpSendSegment>
 8004cb0:	e00e      	b.n	8004cd0 <tcpCheckSyn+0x66>
      }
      else
      {
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
            segment->seqNum + length + 1, 0, FALSE);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4413      	add	r3, r2
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2114      	movs	r1, #20
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f7ff fc3a 	bl	8004544 <tcpSendSegment>
      }

      //Return immediately
      return ERROR_FAILURE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <tcpCheckSyn+0x6c>
   }

   //No error to report
   return NO_ERROR;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <tcpCheckAck>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the acknowledgment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b08c      	sub	sp, #48	; 0x30
 8004ce2:	af02      	add	r7, sp, #8
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
   uint_t thresh;
   bool_t duplicateFlag;
   bool_t updateFlag;

   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	7b5b      	ldrb	r3, [r3, #13]
 8004cee:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <tcpCheckAck+0x22>
      return ERROR_FAILURE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e122      	b.n	8004f46 <tcpCheckAck+0x268>

   //Test the case where SEG.ACK < SND.UNA
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) < 0)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da01      	bge.n	8004d12 <tcpCheckAck+0x34>
   {
      //An old duplicate ACK has been received
      return NO_ERROR;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e119      	b.n	8004f46 <tcpCheckAck+0x268>
   }
   //Test the case where SEG.ACK > SND.NXT
   else if(TCP_CMP_SEQ(segment->ackNum, socket->sndNxt) > 0)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dd0e      	ble.n	8004d3e <tcpCheckAck+0x60>
   {
      //Send an ACK segment indicating the current send sequence number
      //and the acknowledgment number expected to be received
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004d28:	2300      	movs	r3, #0
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	460b      	mov	r3, r1
 8004d32:	2110      	movs	r1, #16
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff fc05 	bl	8004544 <tcpSendSegment>

      //The ACK segment acknowledges something not yet sent
      return ERROR_FAILURE;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e103      	b.n	8004f46 <tcpCheckAck+0x268>
   }

   //Check whether the ACK is a duplicate
   duplicateFlag = tcpIsDuplicateAck(socket, segment, length);
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f93e 	bl	8004fc4 <tcpIsDuplicateAck>
 8004d48:	61f8      	str	r0, [r7, #28]

   //The send window should be updated
   tcpUpdateSendWindow(socket, segment);
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fbeb 	bl	8005528 <tcpUpdateSendWindow>

   //The incoming ACK segment acknowledges new data?
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) > 0)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	dd77      	ble.n	8004e50 <tcpCheckAck+0x172>
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Compute the number of bytes acknowledged by the incoming ACK
      n = segment->ackNum - socket->sndUna;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24

      //Check whether the ACK segment acknowledges our SYN
      if(socket->sndUna == socket->iss)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d102      	bne.n	8004d7e <tcpCheckAck+0xa0>
         n--;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24

      //Total number of bytes acknowledged during the whole round-trip
      socket->n += n;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	441a      	add	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
      //Update SND.UNA pointer
      socket->sndUna = segment->ackNum;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	661a      	str	r2, [r3, #96]	; 0x60

      //Compute retransmission timeout
      updateFlag = tcpComputeRto(socket);
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fc46 	bl	8005628 <tcpComputeRto>
 8004d9c:	6178      	str	r0, [r7, #20]

      //Any segments on the retransmission queue which are thereby
      //entirely acknowledged are removed
      tcpUpdateRetransmitQueue(socket);
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fa7f 	bl	80052a2 <tcpUpdateRetransmitQueue>

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d105      	bne.n	8004dba <tcpCheckAck+0xdc>
      {
         //Invoke fast recovery (refer to RFC 6582)
         tcpFastRecovery(socket, segment, n);
 8004dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f96e 	bl	8005094 <tcpFastRecovery>
 8004db8:	e03c      	b.n	8004e34 <tcpCheckAck+0x156>
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

         //Check congestion state
         if(socket->congestState == TCP_CONGEST_STATE_LOSS_RECOVERY)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d103      	bne.n	8004dd4 <tcpCheckAck+0xf6>
         {
            //Invoke fast loss recovery
            tcpFastLossRecovery(socket, segment);
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f9a7 	bl	8005122 <tcpFastLossRecovery>
         }

         //Slow start algorithm is used when cwnd is lower than ssthresh
         if(socket->cwnd < socket->ssthresh)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d211      	bcs.n	8004e08 <tcpCheckAck+0x12a>
         {
            //During slow start, TCP increments cwnd by at most SMSS bytes
            //for each ACK received that cumulatively acknowledges new data
            socket->cwnd += MIN(n, socket->smss);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004df0:	4619      	mov	r1, r3
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	428b      	cmp	r3, r1
 8004df6:	bf28      	it	cs
 8004df8:	460b      	movcs	r3, r1
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8004e06:	e015      	b.n	8004e34 <tcpCheckAck+0x156>
         }
         //Congestion avoidance algorithm is used when cwnd exceeds ssthres
         else
         {
            //Congestion window is updated once per RTT
            if(updateFlag)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d012      	beq.n	8004e34 <tcpCheckAck+0x156>
            {
               //TCP must not increment cwnd by more than SMSS bytes
               socket->cwnd += MIN(socket->n, socket->smss);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e22:	428b      	cmp	r3, r1
 8004e24:	bf28      	it	cs
 8004e26:	460b      	movcs	r3, r1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
            }
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f8b2 209a 	ldrh.w	r2, [r2, #154]	; 0x9a
 8004e40:	4293      	cmp	r3, r2
 8004e42:	bf28      	it	cs
 8004e44:	4613      	movcs	r3, r2
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8004e4e:	e076      	b.n	8004f3e <tcpCheckAck+0x260>
   //The incoming ACK segment does not acknowledge new data?
   else
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check whether the acknowledgment is a duplicate
      if(duplicateFlag)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <tcpCheckAck+0x188>
      {
         //Increment duplicate ACK counter
         socket->dupAckCount++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004e64:	e003      	b.n	8004e6e <tcpCheckAck+0x190>
         TRACE_INFO("TCP duplicate ACK #%u\r\n", socket->dupAckCount);
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      }

      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_IDLE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d142      	bne.n	8004efe <tcpCheckAck+0x220>
      {
         //Use default duplicate ACK threshold
         thresh = TCP_FAST_RETRANSMIT_THRES;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	623b      	str	r3, [r7, #32]
         //Amount of data sent but not yet acknowledged
         ownd = socket->sndNxt - socket->sndUna;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	61bb      	str	r3, [r7, #24]

         //Test if there is either no unsent data ready for transmission at
         //the sender, or the advertised receive window does not permit new
         //segments to be transmitted (refer to RFC 5827 section 3.1)
         if(socket->sndUser == 0 || socket->sndWnd <= (socket->sndNxt - socket->sndUna))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <tcpCheckAck+0x1ca>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e98:	4619      	mov	r1, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	4299      	cmp	r1, r3
 8004ea6:	d817      	bhi.n	8004ed8 <tcpCheckAck+0x1fa>
         {
            //Compute the duplicate ACK threshold used to trigger a
            //retransmission
            if(ownd <= (3 * socket->smss))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d802      	bhi.n	8004ec4 <tcpCheckAck+0x1e6>
               thresh = 1;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	e009      	b.n	8004ed8 <tcpCheckAck+0x1fa>
            else if(ownd <= (4 * socket->smss))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	461a      	mov	r2, r3
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d801      	bhi.n	8004ed8 <tcpCheckAck+0x1fa>
               thresh = 2;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	623b      	str	r3, [r7, #32]
         }

         //Check the number of duplicate ACKs that have been received
         if(socket->dupAckCount >= thresh)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d81f      	bhi.n	8004f24 <tcpCheckAck+0x246>
         {
            //The TCP sender first checks the value of recover to see if the
            //cumulative acknowledgment field covers more than recover
            if(TCP_CMP_SEQ(segment->ackNum, socket->recover + 1) > 0)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	dd16      	ble.n	8004f24 <tcpCheckAck+0x246>
            {
               //Invoke Fast Retransmit (refer to RFC 6582)
               tcpFastRetransmit(socket);
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f894 	bl	8005024 <tcpFastRetransmit>
 8004efc:	e012      	b.n	8004f24 <tcpCheckAck+0x246>
               //If not, the TCP does not enter fast retransmit and does not
               //reset ssthres...
            }
         }
      }
      else if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d10d      	bne.n	8004f24 <tcpCheckAck+0x246>
      {
         //Duplicate ACK received?
         if(duplicateFlag)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <tcpCheckAck+0x246>
         {
            //For each additional duplicate ACK received (after the third),
            //cwnd must be incremented by SMSS. This artificially inflates
            //the congestion window in order to reflect the additional
            //segment that has left the network
            socket->cwnd += socket->smss;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f1a:	4413      	add	r3, r2
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	f8b2 209a 	ldrh.w	r2, [r2, #154]	; 0x9a
 8004f30:	4293      	cmp	r3, r2
 8004f32:	bf28      	it	cs
 8004f34:	4613      	movcs	r3, r2
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
#endif
   }

   //Update TX events
   tcpUpdateEvents(socket);
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fda4 	bl	8005a8c <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3728      	adds	r7, #40	; 0x28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <tcpIsDuplicateSyn>:
 * @return TRUE if the SYN segment is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateSyn(Socket *socket, IpPseudoHeader *pseudoHeader,
   TcpHeader *segment)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
   bool_t flag;
   TcpSynQueueItem *queueItem;

   //Initialize flag
   flag = FALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]

   //Point to the very first item
   queueItem = socket->synQueue;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004f64:	613b      	str	r3, [r7, #16]

   //Loop through the SYN queue
   while(queueItem != NULL)
 8004f66:	e023      	b.n	8004fb0 <tcpIsDuplicateSyn+0x62>
   {
#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d11c      	bne.n	8004faa <tcpIsDuplicateSyn+0x5c>
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	695b      	ldr	r3, [r3, #20]
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d118      	bne.n	8004faa <tcpIsDuplicateSyn+0x5c>
         pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	681b      	ldr	r3, [r3, #0]
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d114      	bne.n	8004faa <tcpIsDuplicateSyn+0x5c>
      {
         //Check source and destination addresses
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d10e      	bne.n	8004faa <tcpIsDuplicateSyn+0x5c>
            queueItem->destAddr.ipv4Addr == pseudoHeader->ipv4Data.destAddr)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	689b      	ldr	r3, [r3, #8]
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d108      	bne.n	8004faa <tcpIsDuplicateSyn+0x5c>
         {
            //Check source port
            if(queueItem->srcPort == segment->srcPort)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	8a1a      	ldrh	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d101      	bne.n	8004faa <tcpIsDuplicateSyn+0x5c>
            {
               //Duplicate SYN
               flag = TRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
      {
         //Just for sanity
      }

      //Next item
      queueItem = queueItem->next;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	613b      	str	r3, [r7, #16]
   while(queueItem != NULL)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1d8      	bne.n	8004f68 <tcpIsDuplicateSyn+0x1a>
   }

   //Return TRUE if the SYN segment is a duplicate
   return flag;
 8004fb6:	697b      	ldr	r3, [r7, #20]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <tcpIsDuplicateAck>:
 * @param[in] length Length of the segment data
 * @return TRUE if the ACK is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
   bool_t flag;

   //An ACK is considered a duplicate when the following conditions are met
   flag = FALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]

   //The receiver of the ACK has outstanding data
   if(socket->retransmitQueue != NULL)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <tcpIsDuplicateAck+0x52>
   {
      //The incoming acknowledgment carries no data
      if(length == 0)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d118      	bne.n	8005016 <tcpIsDuplicateAck+0x52>
      {
         //the SYN and FIN bits are both off
         if(!(segment->flags & (TCP_FLAG_SYN | TCP_FLAG_FIN)))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	7b5b      	ldrb	r3, [r3, #13]
 8004fe8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <tcpIsDuplicateAck+0x52>
         {
            //The acknowledgment number is equal to the greatest acknowledgment
            //received on the given connection
            if(segment->ackNum == socket->sndUna)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d109      	bne.n	8005016 <tcpIsDuplicateAck+0x52>
            {
               //The advertised window in the incoming acknowledgment equals
               //the advertised window in the last incoming acknowledgment
               if(segment->window == socket->sndWnd)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	89db      	ldrh	r3, [r3, #14]
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800500e:	429a      	cmp	r2, r3
 8005010:	d101      	bne.n	8005016 <tcpIsDuplicateAck+0x52>
               {
                  //Duplicate ACK
                  flag = TRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
         }
      }
   }

   //Return TRUE if the acknowledgment is a duplicate
   return flag;
 8005016:	697b      	ldr	r3, [r7, #20]
}
 8005018:	4618      	mov	r0, r3
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <tcpFastRetransmit>:
 * @brief Fast retransmit procedure
 * @param[in] socket Handle referencing the current socket
 **/

void tcpFastRetransmit(Socket *socket)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   uint_t flightSize;

   //Amount of data that has been sent but not yet acknowledged
   flightSize = socket->sndNxt - socket->sndUna;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	60fb      	str	r3, [r7, #12]
   //After receiving 3 duplicate ACKs, ssthresh must be adjusted
   socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	461a      	mov	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	4293      	cmp	r3, r2
 8005048:	bf38      	it	cc
 800504a:	4613      	movcc	r3, r2
 800504c:	b29a      	uxth	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

   //The value of recover is incremented to the value of the highest
   //sequence number transmitted by the TCP so far
   socket->recover = socket->sndNxt - 1;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005058:	1e5a      	subs	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
   //Debug message
   TRACE_INFO("TCP fast retransmit...\r\n");

   //TCP performs a retransmission of what appears to be the missing segment,
   //without waiting for the retransmission timer to expire
   tcpRetransmitSegment(socket);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb67 	bl	8005734 <tcpRetransmitSegment>

   //cwnd must set to ssthresh plus 3*SMSS. This artificially inflates the
   //congestion window by the number of segments (three) that have left the
   //network and which the receiver has buffered
   socket->cwnd = socket->ssthresh + TCP_FAST_RETRANSMIT_THRES * socket->smss;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005072:	4619      	mov	r1, r3
 8005074:	0049      	lsls	r1, r1, #1
 8005076:	440b      	add	r3, r1
 8005078:	b29b      	uxth	r3, r3
 800507a:	4413      	add	r3, r2
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

   //Enter the fast recovery procedure
   socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
#endif
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <tcpFastRecovery>:
 * @param[in] segment Pointer to the incoming TCP segment
 * @param[in] n Number of bytes acknowledged by the incoming ACK
 **/

void tcpFastRecovery(Socket *socket, TcpHeader *segment, uint_t n)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and including
   //recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	dd0a      	ble.n	80050c6 <tcpFastRecovery+0x32>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Set cwnd to ssthresh
      socket->cwnd = socket->ssthresh;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      //Exit the fast recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      //Do not exit the fast recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
   }
#endif
}
 80050c4:	e029      	b.n	800511a <tcpFastRecovery+0x86>
      tcpRetransmitSegment(socket);
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fb34 	bl	8005734 <tcpRetransmitSegment>
      if(socket->cwnd > n)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80050d2:	461a      	mov	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d209      	bcs.n	80050ee <tcpFastRecovery+0x5a>
         socket->cwnd -= n;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      if(n >= socket->smss)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050f4:	461a      	mov	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d30a      	bcc.n	8005112 <tcpFastRecovery+0x7e>
         socket->cwnd += socket->smss;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005108:	4413      	add	r3, r2
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <tcpFastLossRecovery>:
 * @param[in] socket Handle referencing the current socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpFastLossRecovery(Socket *socket, TcpHeader *segment)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and
   //including recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	dd04      	ble.n	8005146 <tcpFastLossRecovery+0x24>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Exit the fast loss recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      //Do not exit the fast loss recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
   }
#endif
}
 8005144:	e006      	b.n	8005154 <tcpFastLossRecovery+0x32>
      tcpRetransmitSegment(socket);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 faf4 	bl	8005734 <tcpRetransmitSegment>
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <tcpProcessSegmentData>:
 * @param[in] length Length of the segment data
 **/

void tcpProcessSegmentData(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
   uint32_t leftEdge;
   uint32_t rightEdge;

   //First sequence number occupied by the incoming segment
   leftEdge = segment->seqNum;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	617b      	str	r3, [r7, #20]
   //Sequence number immediately following the incoming segment
   rightEdge = segment->seqNum + length;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	4413      	add	r3, r2
 8005178:	613b      	str	r3, [r7, #16]

   //Check whether some data falls outside the receive window
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) < 0)
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	da09      	bge.n	800519a <tcpProcessSegmentData+0x3e>
   {
      //Position of the first byte to be read
      offset += socket->rcvNxt - leftEdge;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	4413      	add	r3, r2
 8005192:	603b      	str	r3, [r7, #0]
      //Ignore the data that falls outside the receive window
      leftEdge = socket->rcvNxt;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005198:	617b      	str	r3, [r7, #20]
   }
   if(TCP_CMP_SEQ(rightEdge, socket->rcvNxt + socket->rcvWnd) > 0)
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 80051a6:	440b      	add	r3, r1
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	dd06      	ble.n	80051bc <tcpProcessSegmentData+0x60>
   {
      //Ignore the data that falls outside the receive window
      rightEdge = socket->rcvNxt + socket->rcvWnd;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	f8b2 207e 	ldrh.w	r2, [r2, #126]	; 0x7e
 80051b8:	4413      	add	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
   }

   //Copy the incoming data to the receive buffer
   tcpWriteRxBuffer(socket, leftEdge, buffer, offset, rightEdge - leftEdge);
 80051bc:	6979      	ldr	r1, [r7, #20]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 fe57 	bl	8005e7e <tcpWriteRxBuffer>

   //Update the list of non-contiguous blocks of data that
   //have been received and queued
   tcpUpdateSackBlocks(socket, &leftEdge, &rightEdge);
 80051d0:	f107 0210 	add.w	r2, r7, #16
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	4619      	mov	r1, r3
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f917 	bl	800540e <tcpUpdateSackBlocks>

   //Check whether the segment was received out of order
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) > 0)
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dd0d      	ble.n	8005208 <tcpProcessSegmentData+0xac>
   {
      //Out of order data segments should be acknowledged immediately, in
      //order to accelerate loss recovery
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80051f4:	2300      	movs	r3, #0
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	2300      	movs	r3, #0
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	460b      	mov	r3, r1
 80051fe:	2110      	movs	r1, #16
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7ff f99f 	bl	8004544 <tcpSendSegment>
         FALSE);

      //Notify user task that data is available
      tcpUpdateEvents(socket);
   }
}
 8005206:	e02d      	b.n	8005264 <tcpProcessSegmentData+0x108>
      length = rightEdge - leftEdge;
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	623b      	str	r3, [r7, #32]
      socket->rcvNxt += length;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	441a      	add	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	679a      	str	r2, [r3, #120]	; 0x78
      socket->rcvUser += length;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	b29b      	uxth	r3, r3
 8005226:	4413      	add	r3, r2
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
      socket->rcvWnd -= length;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	b29b      	uxth	r3, r3
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800524c:	2300      	movs	r3, #0
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	2300      	movs	r3, #0
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	460b      	mov	r3, r1
 8005256:	2110      	movs	r1, #16
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff f973 	bl	8004544 <tcpSendSegment>
      tcpUpdateEvents(socket);
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fc14 	bl	8005a8c <tcpUpdateEvents>
}
 8005264:	bf00      	nop
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <tcpDeleteControlBlock>:
 * @brief Delete TCB structure
 * @param[in] socket Handle referencing the socket
 **/

void tcpDeleteControlBlock(Socket *socket)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
   //Delete retransmission queue
   tcpFlushRetransmitQueue(socket);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f88c 	bl	8005392 <tcpFlushRetransmitQueue>

   //Delete SYN queue
   tcpFlushSynQueue(socket);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f8ab 	bl	80053d6 <tcpFlushSynQueue>

   //Release transmit buffer
   netBufferSetLength((NetBuffer *) &socket->txBuffer, 0);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	33ac      	adds	r3, #172	; 0xac
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd f928 	bl	80024dc <netBufferSetLength>

   //Release receive buffer
   netBufferSetLength((NetBuffer *) &socket->rxBuffer, 0);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f7fd f921 	bl	80024dc <netBufferSetLength>
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <tcpUpdateRetransmitQueue>:
 * @brief Remove acknowledged segments from retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateRetransmitQueue(Socket *socket)
{
 80052a2:	b590      	push	{r4, r7, lr}
 80052a4:	b087      	sub	sp, #28
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
   TcpQueueItem *prevQueueItem;
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Point to the first item of the retransmission queue
   prevQueueItem = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
   queueItem = socket->retransmitQueue;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80052b4:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 80052b6:	e05a      	b.n	800536e <tcpUpdateRetransmitQueue+0xcc>
   {
      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	331c      	adds	r3, #28
 80052bc:	60bb      	str	r3, [r7, #8]

      //Calculate the length of the TCP segment
      if(header->flags & TCP_FLAG_SYN)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	7b5b      	ldrb	r3, [r3, #13]
 80052c2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <tcpUpdateRetransmitQueue+0x34>
         length = 1;
 80052d0:	2301      	movs	r3, #1
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	e010      	b.n	80052f8 <tcpUpdateRetransmitQueue+0x56>
      else if(header->flags & TCP_FLAG_FIN)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	7b5b      	ldrb	r3, [r3, #13]
 80052da:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <tcpUpdateRetransmitQueue+0x50>
         length = queueItem->length + 1;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	3301      	adds	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e002      	b.n	80052f8 <tcpUpdateRetransmitQueue+0x56>
      else
         length = queueItem->length;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	617b      	str	r3, [r7, #20]

      //If an acknowledgment is received for a segment before its timer
      //expires, the segment is removed from the retransmission queue
      if(TCP_CMP_SEQ(socket->sndUna, ntohl(header->seqNum) + length) >= 0)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4618      	mov	r0, r3
 8005302:	f7fb f95b 	bl	80005bc <swapInt32>
 8005306:	4602      	mov	r2, r0
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
 800530c:	1ae3      	subs	r3, r4, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	db28      	blt.n	8005364 <tcpUpdateRetransmitQueue+0xc2>
      {
         //First item of the queue?
         if(prevQueueItem == NULL)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10c      	bne.n	8005332 <tcpUpdateRetransmitQueue+0x90>
         {
            //Remove the current item from the queue
            socket->retransmitQueue = queueItem->next;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
            //The item can now be safely deleted
            memPoolFree(queueItem);
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7fd f842 	bl	80023ac <memPoolFree>
            //Point to the next item
            queueItem = socket->retransmitQueue;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	e009      	b.n	8005346 <tcpUpdateRetransmitQueue+0xa4>
         }
         else
         {
            //Remove the current item from the queue
            prevQueueItem->next = queueItem->next;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	601a      	str	r2, [r3, #0]
            //The item can now be safely deleted
            memPoolFree(queueItem);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7fd f836 	bl	80023ac <memPoolFree>
            //Point to the next item
            queueItem = prevQueueItem->next;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60fb      	str	r3, [r7, #12]
         }

         //When an ACK is received that acknowledges new data, restart the
         //retransmission timer so that it will expire after RTO seconds
         tcpTimerStart(&socket->retransmitTimer, socket->rto);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f000 ff93 	bl	8006280 <tcpTimerStart>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8005362:	e004      	b.n	800536e <tcpUpdateRetransmitQueue+0xcc>
      }
      //No acknowledgment received for the current segment...
      else
      {
         //Point to the next item
         prevQueueItem = queueItem;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	613b      	str	r3, [r7, #16]
         queueItem = queueItem->next;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1a1      	bne.n	80052b8 <tcpUpdateRetransmitQueue+0x16>
      }
   }

   //When all outstanding data has been acknowledged,
   //turn off the retransmission timer
   if(socket->retransmitQueue == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <tcpUpdateRetransmitQueue+0xe8>
      tcpTimerStop(&socket->retransmitTimer);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005384:	4618      	mov	r0, r3
 8005386:	f000 ff8f 	bl	80062a8 <tcpTimerStop>
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	bd90      	pop	{r4, r7, pc}

08005392 <tcpFlushRetransmitQueue>:
 * @brief Flush retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushRetransmitQueue(Socket *socket)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
   //Point to the first item in the retransmission queue
   TcpQueueItem *queueItem = socket->retransmitQueue;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80053a0:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 80053a2:	e007      	b.n	80053b4 <tcpFlushRetransmitQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpQueueItem *nextQueueItem = queueItem->next;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7fc fffe 	bl	80023ac <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f4      	bne.n	80053a4 <tcpFlushRetransmitQueue+0x12>
   }

   //The retransmission queue is now flushed
   socket->retransmitQueue = NULL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

   //Turn off the retransmission timer
   tcpTimerStop(&socket->retransmitTimer);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 ff6d 	bl	80062a8 <tcpTimerStop>
}
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <tcpFlushSynQueue>:
 * @brief Flush SYN queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushSynQueue(Socket *socket)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
   //Point to the first item in the SYN queue
   TcpSynQueueItem *queueItem = socket->synQueue;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80053e4:	60fb      	str	r3, [r7, #12]

   //Loop through SYN queue
   while(queueItem != NULL)
 80053e6:	e007      	b.n	80053f8 <tcpFlushSynQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpSynQueueItem *nextQueueItem = queueItem->next;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7fc ffdc 	bl	80023ac <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f4      	bne.n	80053e8 <tcpFlushSynQueue+0x12>
   }

   //SYN queue was successfully flushed
   socket->synQueue = NULL;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <tcpUpdateSackBlocks>:
 * @param[in,out] leftEdge First sequence number occupied by the incoming data
 * @param[in,out] rightEdge Sequence number immediately following the incoming data
 **/

void tcpUpdateSackBlocks(Socket *socket, uint32_t *leftEdge, uint32_t *rightEdge)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
   uint_t i = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

   //Loop through the blocks
   while(i < socket->sackBlockCount)
 800541e:	e050      	b.n	80054c2 <tcpUpdateSackBlocks+0xb4>
   {
      //Find each block that overlaps the specified one
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	3341      	adds	r3, #65	; 0x41
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	440b      	add	r3, r1
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	db42      	blt.n	80054bc <tcpUpdateSackBlocks+0xae>
         TCP_CMP_SEQ(*leftEdge, socket->sackBlock[i].rightEdge) <= 0)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	3341      	adds	r3, #65	; 0x41
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 8005448:	2b00      	cmp	r3, #0
 800544a:	dc37      	bgt.n	80054bc <tcpUpdateSackBlocks+0xae>
      {
         //Merge blocks to form a contiguous one
         *leftEdge = MIN(*leftEdge, socket->sackBlock[i].leftEdge);
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	3341      	adds	r3, #65	; 0x41
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	4413      	add	r3, r2
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	bf28      	it	cs
 8005460:	461a      	movcs	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	601a      	str	r2, [r3, #0]
         *rightEdge = MAX(*rightEdge, socket->sackBlock[i].rightEdge);
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	3341      	adds	r3, #65	; 0x41
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	bf38      	it	cc
 800547a:	461a      	movcc	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]

         //Delete current block
         memmove(socket->sackBlock + i, socket->sackBlock + i + 1,
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	18d0      	adds	r0, r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	3301      	adds	r3, #1
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	18d1      	adds	r1, r2, r3
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4613      	mov	r3, r2
 800549e:	075b      	lsls	r3, r3, #29
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	3318      	adds	r3, #24
 80054a6:	461a      	mov	r2, r3
 80054a8:	f014 fdbf 	bl	801a02a <memmove>
            (TCP_MAX_SACK_BLOCKS - i - 1) * sizeof(TcpSackBlock));

         //Decrement the number of non-contiguous blocks
         socket->sackBlockCount--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80054b2:	1e5a      	subs	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
 80054ba:	e002      	b.n	80054c2 <tcpUpdateSackBlocks+0xb4>
      }
      else
      {
         //Point to the next block
         i++;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	3301      	adds	r3, #1
 80054c0:	617b      	str	r3, [r7, #20]
   while(i < socket->sackBlockCount)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d3a8      	bcc.n	8005420 <tcpUpdateSackBlocks+0x12>
      }
   }

   //Check whether the incoming segment was received out of order
   if(TCP_CMP_SEQ(*leftEdge, socket->rcvNxt) > 0)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	dd21      	ble.n	8005520 <tcpUpdateSackBlocks+0x112>
   {
      //Make room for the new non-contiguous block
      memmove(socket->sackBlock + 1, socket->sackBlock,
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80054e2:	f103 0008 	add.w	r0, r3, #8
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80054ec:	2218      	movs	r2, #24
 80054ee:	4619      	mov	r1, r3
 80054f0:	f014 fd9b 	bl	801a02a <memmove>
         (TCP_MAX_SACK_BLOCKS - 1) * sizeof(TcpSackBlock));

      //Insert the element in the list
      socket->sackBlock[0].leftEdge = *leftEdge;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
      socket->sackBlock[0].rightEdge = *rightEdge;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

      //Increment the number of non-contiguous blocks
      if(socket->sackBlockCount < TCP_MAX_SACK_BLOCKS)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800550e:	2b03      	cmp	r3, #3
 8005510:	d806      	bhi.n	8005520 <tcpUpdateSackBlocks+0x112>
         socket->sackBlockCount++;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
   }
}
 8005520:	bf00      	nop
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <tcpUpdateSendWindow>:
 * @param[in] socket Handle referencing the socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpUpdateSendWindow(Socket *socket, TcpHeader *segment)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
   //Case where neither the sequence nor the acknowledgment number is increased
   if(segment->seqNum == socket->sndWl1 && segment->ackNum == socket->sndWl2)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	429a      	cmp	r2, r3
 800553c:	d129      	bne.n	8005592 <tcpUpdateSendWindow+0x6a>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005546:	429a      	cmp	r2, r3
 8005548:	d123      	bne.n	8005592 <tcpUpdateSendWindow+0x6a>
   {
      //TCP may ignore a window update with a smaller window than previously
      //offered if neither the sequence number nor the acknowledgment number
      //is increased (refer to RFC 1122, section 4.2.2.16)
      if(segment->window > socket->sndWnd)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	89db      	ldrh	r3, [r3, #14]
 800554e:	b29a      	uxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005556:	429a      	cmp	r2, r3
 8005558:	d962      	bls.n	8005620 <tcpUpdateSendWindow+0xf8>
      {
         //Update the send window and record the sequence number and the
         //acknowledgment number used to update SND.WND
         socket->sndWnd = segment->window;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	89db      	ldrh	r3, [r3, #14]
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
         socket->sndWl1 = segment->seqNum;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	671a      	str	r2, [r3, #112]	; 0x70
         socket->sndWl2 = segment->ackNum;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	675a      	str	r2, [r3, #116]	; 0x74

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	89db      	ldrh	r3, [r3, #14]
 800557a:	b29a      	uxth	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8005582:	4293      	cmp	r3, r2
 8005584:	bf38      	it	cc
 8005586:	4613      	movcc	r3, r2
 8005588:	b29a      	uxth	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      if(segment->window > socket->sndWnd)
 8005590:	e046      	b.n	8005620 <tcpUpdateSendWindow+0xf8>
      }
   }
   //Case where the sequence or the acknowledgment number is increased
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	db3f      	blt.n	8005620 <tcpUpdateSendWindow+0xf8>
      TCP_CMP_SEQ(segment->ackNum, socket->sndWl2) >= 0)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a8:	1ad3      	subs	r3, r2, r3
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	db38      	blt.n	8005620 <tcpUpdateSendWindow+0xf8>
   {
      //The remote host advertises a zero window?
      if(!segment->window && socket->sndWnd)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	89db      	ldrh	r3, [r3, #14]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d117      	bne.n	80055e8 <tcpUpdateSendWindow+0xc0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d012      	beq.n	80055e8 <tcpUpdateSendWindow+0xc0>
      {
         //Start the persist timer
         socket->wndProbeCount = 0;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
         socket->wndProbeInterval = TCP_DEFAULT_PROBE_INTERVAL;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055d0:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
         tcpTimerStart(&socket->persistTimer, socket->wndProbeInterval);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f000 fe4c 	bl	8006280 <tcpTimerStart>
      }

      //Update the send window and record the sequence number and the
      //acknowledgment number used to update SND.WND
      socket->sndWnd = segment->window;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	89db      	ldrh	r3, [r3, #14]
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      socket->sndWl1 = segment->seqNum;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	671a      	str	r2, [r3, #112]	; 0x70
      socket->sndWl2 = segment->ackNum;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	675a      	str	r2, [r3, #116]	; 0x74

      //Maximum send window it has seen so far on the connection
      socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	89db      	ldrh	r3, [r3, #14]
 8005608:	b29a      	uxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8005610:	4293      	cmp	r3, r2
 8005612:	bf38      	it	cc
 8005614:	4613      	movcc	r3, r2
 8005616:	b29a      	uxth	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
   }
}
 800561e:	e7ff      	b.n	8005620 <tcpUpdateSendWindow+0xf8>
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <tcpComputeRto>:
 * @param[in] socket Handle referencing the socket
 * @return TRUE if the RTT measurement is complete, else FALSE
 **/

bool_t tcpComputeRto(Socket *socket)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
   bool_t flag;
   systime_t r;
   systime_t delta;

   //Clear flag
   flag = FALSE;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]

   //TCP implementation takes one RTT measurement at a time
   if(socket->rttBusy)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800563a:	2b00      	cmp	r3, #0
 800563c:	d075      	beq.n	800572a <tcpComputeRto+0x102>
   {
      //Ensure the incoming ACK number covers the expected sequence number
      if(TCP_CMP_SEQ(socket->sndUna, socket->rttSeqNum) > 0)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	dd6d      	ble.n	800572a <tcpComputeRto+0x102>
      {
         //Calculate round-time trip
         r = osGetSystemTime() - socket->rttStartTime;
 800564e:	f7fb f8bf 	bl	80007d0 <osGetSystemTime>
 8005652:	4602      	mov	r2, r0
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	613b      	str	r3, [r7, #16]

         //First RTT measurement?
         if(!socket->srtt && !socket->rttvar)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10e      	bne.n	8005686 <tcpComputeRto+0x5e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <tcpComputeRto+0x5e>
         {
            //Initialize RTO calculation algorithm
            socket->srtt = r;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            socket->rttvar = r / 2;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	085a      	lsrs	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005684:	e029      	b.n	80056da <tcpComputeRto+0xb2>
         }
         else
         {
            //Calculate the difference between the measured value and the
            //current RTT estimator
            delta = (r > socket->srtt) ? (r - socket->srtt) : (socket->srtt - r);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d905      	bls.n	800569e <tcpComputeRto+0x76>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	e004      	b.n	80056a8 <tcpComputeRto+0x80>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	60fb      	str	r3, [r7, #12]

            //Implement Van Jacobson's algorithm (as specified in RFC 6298 2.3)
            socket->rttvar = (3 * socket->rttvar + delta) / 4;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80056b0:	4613      	mov	r3, r2
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	441a      	add	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	089a      	lsrs	r2, r3, #2
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            socket->srtt = (7 * socket->srtt + r) / 8;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	1a9a      	subs	r2, r3, r2
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4413      	add	r3, r2
 80056d2:	08da      	lsrs	r2, r3, #3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
         }

         //Calculate the next retransmission timeout
         socket->rto = socket->srtt + 4 * socket->rttvar;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

         //Whenever RTO is computed, if it is less than 1 second, then the RTO
         //should be rounded up to 1 second
         socket->rto = MAX(socket->rto, TCP_MIN_RTO);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056fa:	bf38      	it	cc
 80056fc:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
 8005700:	461a      	mov	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

         //A maximum value may be placed on RTO provided it is at least 60
         //seconds
         socket->rto = MIN(socket->rto, TCP_MAX_RTO);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005712:	429a      	cmp	r2, r3
 8005714:	bf28      	it	cs
 8005716:	461a      	movcs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         //Debug message
         TRACE_DEBUG("R=%" PRIu32 ", SRTT=%" PRIu32 ", RTTVAR=%" PRIu32 ", RTO=%" PRIu32 "\r\n",
            r, socket->srtt, socket->rttvar, socket->rto);

         //RTT measurement is complete
         socket->rttBusy = FALSE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         //Set flag
         flag = TRUE;
 8005726:	2301      	movs	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
      }
   }

   //Return TRUE if the RTT measurement is complete
   return flag;
 800572a:	697b      	ldr	r3, [r7, #20]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <tcpRetransmitSegment>:
 * @param[in] socket Handle referencing the socket
 * @return Error code
 **/

error_t tcpRetransmitSegment(Socket *socket)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af02      	add	r7, sp, #8
 800573a:	6078      	str	r0, [r7, #4]
   NetBuffer *buffer;
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Initialize error code
   error = NO_ERROR;
 800573c:	2300      	movs	r3, #0
 800573e:	83fb      	strh	r3, [r7, #30]
   //Total number of bytes that have been retransmitted
   length = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	61bb      	str	r3, [r7, #24]

   //Point to the retransmission queue
   queueItem = socket->retransmitQueue;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800574a:	617b      	str	r3, [r7, #20]

   //Any segment in the retransmission queue?
   while(queueItem != NULL)
 800574c:	e063      	b.n	8005816 <tcpRetransmitSegment+0xe2>
   {
      //Total number of bytes that have been retransmitted
      length += queueItem->length;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4413      	add	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]

      //The amount of data that can be sent cannot exceed the MSS
      if(length > socket->smss)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800575e:	461a      	mov	r2, r3
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	4293      	cmp	r3, r2
 8005764:	d902      	bls.n	800576c <tcpRetransmitSegment+0x38>
      {
         //We are done
         error = NO_ERROR;
 8005766:	2300      	movs	r3, #0
 8005768:	83fb      	strh	r3, [r7, #30]
         //Exit immediately
         break;
 800576a:	e059      	b.n	8005820 <tcpRetransmitSegment+0xec>
      }

      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	331c      	adds	r3, #28
 8005770:	613b      	str	r3, [r7, #16]

      //Allocate a memory buffer to hold the TCP segment
      buffer = ipAllocBuffer(0, &offset);
 8005772:	f107 0308 	add.w	r3, r7, #8
 8005776:	4619      	mov	r1, r3
 8005778:	2000      	movs	r0, #0
 800577a:	f7fc f8eb 	bl	8001954 <ipAllocBuffer>
 800577e:	60f8      	str	r0, [r7, #12]
      //Failed to allocate memory?
      if(buffer == NULL)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <tcpRetransmitSegment+0x58>
      {
         //Report an error
         error = ERROR_OUT_OF_MEMORY;
 8005786:	2364      	movs	r3, #100	; 0x64
 8005788:	83fb      	strh	r3, [r7, #30]
         //Exit immediately
         break;
 800578a:	e049      	b.n	8005820 <tcpRetransmitSegment+0xec>

      //Start of exception handling block
      do
      {
         //Copy TCP header
         error = netBufferAppend(buffer, header, header->dataOffset * 4);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	7b1b      	ldrb	r3, [r3, #12]
 8005790:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005794:	b2db      	uxtb	r3, r3
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	461a      	mov	r2, r3
 800579a:	6939      	ldr	r1, [r7, #16]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7fd f8db 	bl	8002958 <netBufferAppend>
 80057a2:	4603      	mov	r3, r0
 80057a4:	83fb      	strh	r3, [r7, #30]
         //Any error to report?
         if(error)
 80057a6:	8bfb      	ldrh	r3, [r7, #30]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d128      	bne.n	80057fe <tcpRetransmitSegment+0xca>
            break;

         //Copy data from send buffer
         error = tcpReadTxBuffer(socket, ntohl(header->seqNum), buffer,
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fa ff03 	bl	80005bc <swapInt32>
 80057b6:	4601      	mov	r1, r0
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fb0f 	bl	8005de2 <tcpReadTxBuffer>
 80057c4:	4603      	mov	r3, r0
 80057c6:	83fb      	strh	r3, [r7, #30]
            queueItem->length);
         //Any error to report?
         if(error)
 80057c8:	8bfb      	ldrh	r3, [r7, #30]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d119      	bne.n	8005802 <tcpRetransmitSegment+0xce>
         //Total number of segments retransmitted
         MIB2_INC_COUNTER32(tcpGroup.tcpRetransSegs, 1);
         TCP_MIB_INC_COUNTER32(tcpRetransSegs, 1);

         //Dump TCP header contents for debugging purpose
         tcpDumpHeader(header, queueItem->length, socket->iss, socket->irs);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057da:	6938      	ldr	r0, [r7, #16]
 80057dc:	f000 fba0 	bl	8005f20 <tcpDumpHeader>

         //Retransmit the lost segment without waiting for the retransmission
         //timer to expire
         error = ipSendDatagram(socket->interface, &queueItem->pseudoHeader,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68d8      	ldr	r0, [r3, #12]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f103 010c 	add.w	r1, r3, #12
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	2300      	movs	r3, #0
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	4613      	mov	r3, r2
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f7fb ff24 	bl	8001640 <ipSendDatagram>
 80057f8:	4603      	mov	r3, r0
 80057fa:	83fb      	strh	r3, [r7, #30]
 80057fc:	e002      	b.n	8005804 <tcpRetransmitSegment+0xd0>
            break;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <tcpRetransmitSegment+0xd0>
            break;
 8005802:	bf00      	nop

         //End of exception handling block
      } while(0);

      //Free previously allocated memory
      netBufferFree(buffer);
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f7fc fe38 	bl	800247a <netBufferFree>

      //Any error to report?
      if(error)
 800580a:	8bfb      	ldrh	r3, [r7, #30]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <tcpRetransmitSegment+0xea>
         //Exit immediately
         break;
      }

      //Point to the next segment in the queue
      queueItem = queueItem->next;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	617b      	str	r3, [r7, #20]
   while(queueItem != NULL)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d198      	bne.n	800574e <tcpRetransmitSegment+0x1a>
 800581c:	e000      	b.n	8005820 <tcpRetransmitSegment+0xec>
         break;
 800581e:	bf00      	nop
   }

   //Return status code
   return error;
 8005820:	8bfb      	ldrh	r3, [r7, #30]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <tcpNagleAlgo>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t tcpNagleAlgo(Socket *socket, uint_t flags)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b088      	sub	sp, #32
 800582e:	af02      	add	r7, sp, #8
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
   uint_t n;
   uint_t u;

   //The amount of data that can be sent at any given time is
   //limited by the receiver window and the congestion window
   n = MIN(socket->sndWnd, socket->txBufferSize);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 8005840:	4293      	cmp	r3, r2
 8005842:	bf28      	it	cs
 8005844:	4613      	movcs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check the congestion window
   n = MIN(n, socket->cwnd);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800584e:	461a      	mov	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4293      	cmp	r3, r2
 8005854:	bf28      	it	cs
 8005856:	4613      	movcs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
#endif

   //Retrieve the size of the usable window
   u = n - (socket->sndNxt - socket->sndUna);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4413      	add	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

   //The Nagle algorithm discourages sending tiny segments when
   //the data to be sent increases in small increments
   while(socket->sndUser > 0)
 800586a:	e0d3      	b.n	8005a14 <tcpNagleAlgo+0x1ea>
   {
      //The usable window size may become zero or negative,
      //preventing packet transmission
      if((int_t) u <= 0)
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f340 80d7 	ble.w	8005a22 <tcpNagleAlgo+0x1f8>
         break;

      //Calculate the number of bytes to send at a time
      n = MIN(u, socket->sndUser);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800587a:	461a      	mov	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4293      	cmp	r3, r2
 8005880:	bf28      	it	cs
 8005882:	4613      	movcs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
      n = MIN(n, socket->smss);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800588c:	461a      	mov	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	4293      	cmp	r3, r2
 8005892:	bf28      	it	cs
 8005894:	4613      	movcs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]

      //Disable Nagle algorithm?
      if(flags & SOCKET_FLAG_NO_DELAY)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d018      	beq.n	80058d4 <tcpNagleAlgo+0xaa>
      {
         //All packets will be send no matter what size they have
         if(n > 0)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80be 	beq.w	8005a26 <tcpNagleAlgo+0x1fc>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80058b2:	2301      	movs	r3, #1
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	460b      	mov	r3, r1
 80058bc:	2118      	movs	r1, #24
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fe fe40 	bl	8004544 <tcpSendSegment>
 80058c4:	4603      	mov	r3, r0
 80058c6:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80058c8:	89fb      	ldrh	r3, [r7, #14]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 808e 	beq.w	80059ec <tcpNagleAlgo+0x1c2>
               return error;
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	e0b1      	b.n	8005a38 <tcpNagleAlgo+0x20e>
         {
            //We are done...
            break;
         }
      }
      else if(flags & SOCKET_FLAG_DELAY)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d021      	beq.n	8005922 <tcpNagleAlgo+0xf8>
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80058e4:	461a      	mov	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	4293      	cmp	r3, r2
 80058ea:	bf28      	it	cs
 80058ec:	4613      	movcs	r3, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 80058f4:	4293      	cmp	r3, r2
 80058f6:	f0c0 8098 	bcc.w	8005a2a <tcpNagleAlgo+0x200>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005902:	2301      	movs	r3, #1
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	460b      	mov	r3, r1
 800590c:	2118      	movs	r1, #24
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fe fe18 	bl	8004544 <tcpSendSegment>
 8005914:	4603      	mov	r3, r0
 8005916:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8005918:	89fb      	ldrh	r3, [r7, #14]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d066      	beq.n	80059ec <tcpNagleAlgo+0x1c2>
               return error;
 800591e:	89fb      	ldrh	r3, [r7, #14]
 8005920:	e08a      	b.n	8005a38 <tcpNagleAlgo+0x20e>
         }
      }
      else
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005928:	461a      	mov	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	4293      	cmp	r3, r2
 800592e:	bf28      	it	cs
 8005930:	4613      	movcs	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8005938:	4293      	cmp	r3, r2
 800593a:	d313      	bcc.n	8005964 <tcpNagleAlgo+0x13a>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005944:	2301      	movs	r3, #1
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	460b      	mov	r3, r1
 800594e:	2118      	movs	r1, #24
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7fe fdf7 	bl	8004544 <tcpSendSegment>
 8005956:	4603      	mov	r3, r0
 8005958:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 800595a:	89fb      	ldrh	r3, [r7, #14]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d045      	beq.n	80059ec <tcpNagleAlgo+0x1c2>
               return error;
 8005960:	89fb      	ldrh	r3, [r7, #14]
 8005962:	e069      	b.n	8005a38 <tcpNagleAlgo+0x20e>
         }
         //Or if all queued data can be sent now
         else if(socket->sndNxt == socket->sndUna && socket->sndUser <= u)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596c:	429a      	cmp	r2, r3
 800596e:	d11a      	bne.n	80059a6 <tcpNagleAlgo+0x17c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005976:	461a      	mov	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4293      	cmp	r3, r2
 800597c:	d313      	bcc.n	80059a6 <tcpNagleAlgo+0x17c>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005986:	2301      	movs	r3, #1
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	460b      	mov	r3, r1
 8005990:	2118      	movs	r1, #24
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fe fdd6 	bl	8004544 <tcpSendSegment>
 8005998:	4603      	mov	r3, r0
 800599a:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 800599c:	89fb      	ldrh	r3, [r7, #14]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d024      	beq.n	80059ec <tcpNagleAlgo+0x1c2>
               return error;
 80059a2:	89fb      	ldrh	r3, [r7, #14]
 80059a4:	e048      	b.n	8005a38 <tcpNagleAlgo+0x20e>
         }
         //Or if at least a fraction of the maximum window can be sent
         else if(MIN(socket->sndUser, u) >= (socket->maxSndWnd / 2))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80059ac:	461a      	mov	r2, r3
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4293      	cmp	r3, r2
 80059b2:	bf28      	it	cs
 80059b4:	4613      	movcs	r3, r2
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 80059bc:	0852      	lsrs	r2, r2, #1
 80059be:	b292      	uxth	r2, r2
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d334      	bcc.n	8005a2e <tcpNagleAlgo+0x204>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80059cc:	2301      	movs	r3, #1
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	460b      	mov	r3, r1
 80059d6:	2118      	movs	r1, #24
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fe fdb3 	bl	8004544 <tcpSendSegment>
 80059de:	4603      	mov	r3, r0
 80059e0:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80059e2:	89fb      	ldrh	r3, [r7, #14]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <tcpNagleAlgo+0x1c2>
               return error;
 80059e8:	89fb      	ldrh	r3, [r7, #14]
 80059ea:	e025      	b.n	8005a38 <tcpNagleAlgo+0x20e>
            break;
         }
      }

      //Advance SND.NXT pointer
      socket->sndNxt += n;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	441a      	add	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	665a      	str	r2, [r3, #100]	; 0x64
      //Update the number of data buffered but not yet sent
      socket->sndUser -= n;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      //Update the size of the usable window
      u -= n;
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	617b      	str	r3, [r7, #20]
   while(socket->sndUser > 0)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f47f af26 	bne.w	800586c <tcpNagleAlgo+0x42>
 8005a20:	e006      	b.n	8005a30 <tcpNagleAlgo+0x206>
         break;
 8005a22:	bf00      	nop
 8005a24:	e004      	b.n	8005a30 <tcpNagleAlgo+0x206>
            break;
 8005a26:	bf00      	nop
 8005a28:	e002      	b.n	8005a30 <tcpNagleAlgo+0x206>
            break;
 8005a2a:	bf00      	nop
 8005a2c:	e000      	b.n	8005a30 <tcpNagleAlgo+0x206>
            break;
 8005a2e:	bf00      	nop
   }

   //Check whether the transmitter can accept more data
   tcpUpdateEvents(socket);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f82b 	bl	8005a8c <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <tcpChangeState>:
 * @param[in] socket Handle referencing the socket
 * @param[in] newState New TCP state to switch to
 **/

void tcpChangeState(Socket *socket, TcpState newState)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
   //Enter CLOSED state?
   if(newState == TCP_STATE_CLOSED)
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d110      	bne.n	8005a74 <tcpChangeState+0x34>
   {
      //Check previous state
      if(socket->state == TCP_STATE_LAST_ACK ||
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a58:	2b06      	cmp	r3, #6
 8005a5a:	d004      	beq.n	8005a66 <tcpChangeState+0x26>
         socket->state == TCP_STATE_TIME_WAIT)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
      if(socket->state == TCP_STATE_LAST_ACK ||
 8005a62:	2b0a      	cmp	r3, #10
 8005a64:	d103      	bne.n	8005a6e <tcpChangeState+0x2e>
      {
         //The connection has been closed properly
         socket->closedFlag = TRUE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005a6c:	e002      	b.n	8005a74 <tcpChangeState+0x34>
      }
      else
      {
         //The connection has been reset by the peer
         socket->resetFlag = TRUE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	651a      	str	r2, [r3, #80]	; 0x50
      }
   }

   //Enter the desired state
   socket->state = newState;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   //Update TCP related events
   tcpUpdateEvents(socket);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f805 	bl	8005a8c <tcpUpdateEvents>
}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <tcpUpdateEvents>:
 * @brief Update TCP related events
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateEvents(Socket *socket)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	63da      	str	r2, [r3, #60]	; 0x3c

   //Check current TCP state
   switch(socket->state)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa0:	2b0a      	cmp	r3, #10
 8005aa2:	d84d      	bhi.n	8005b40 <tcpUpdateEvents+0xb4>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <tcpUpdateEvents+0x20>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005b1b 	.word	0x08005b1b
 8005ab0:	08005b41 	.word	0x08005b41
 8005ab4:	08005b41 	.word	0x08005b41
 8005ab8:	08005b41 	.word	0x08005b41
 8005abc:	08005ad9 	.word	0x08005ad9
 8005ac0:	08005b01 	.word	0x08005b01
 8005ac4:	08005b01 	.word	0x08005b01
 8005ac8:	08005ad9 	.word	0x08005ad9
 8005acc:	08005ae7 	.word	0x08005ae7
 8005ad0:	08005b01 	.word	0x08005b01
 8005ad4:	08005b1b 	.word	0x08005b1b
   {
   //ESTABLISHED or FIN-WAIT-1 state?
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005adc:	f043 0201 	orr.w	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8005ae4:	e02d      	b.n	8005b42 <tcpUpdateEvents+0xb6>
   //FIN-WAIT-2 state?
   case TCP_STATE_FIN_WAIT_2:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	f043 0201 	orr.w	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	f043 0220 	orr.w	r2, r3, #32
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8005afe:	e020      	b.n	8005b42 <tcpUpdateEvents+0xb6>
   //CLOSE-WAIT, LAST-ACK or CLOSING state?
   case TCP_STATE_CLOSE_WAIT:
   case TCP_STATE_LAST_ACK:
   case TCP_STATE_CLOSING:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b04:	f043 0201 	orr.w	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8005b18:	e013      	b.n	8005b42 <tcpUpdateEvents+0xb6>
   //TIME-WAIT or CLOSED state?
   case TCP_STATE_TIME_WAIT:
   case TCP_STATE_CLOSED:
      socket->eventFlags |= SOCKET_EVENT_CLOSED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	f043 0202 	orr.w	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2a:	f043 0220 	orr.w	r2, r3, #32
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8005b3e:	e000      	b.n	8005b42 <tcpUpdateEvents+0xb6>
   //Any other state
   default:
      break;
 8005b40:	bf00      	nop
   }

   //Handle TX specific events
   if(socket->state == TCP_STATE_SYN_SENT ||
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d004      	beq.n	8005b56 <tcpUpdateEvents+0xca>
      socket->state == TCP_STATE_SYN_RECEIVED)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   if(socket->state == TCP_STATE_SYN_SENT ||
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d10c      	bne.n	8005b70 <tcpUpdateEvents+0xe4>
   {
      //Disallow write operations until the connection is established
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	f043 0208 	orr.w	r2, r3, #8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	f043 0210 	orr.w	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b6e:	e050      	b.n	8005c12 <tcpUpdateEvents+0x186>
   }
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d004      	beq.n	8005b84 <tcpUpdateEvents+0xf8>
      socket->state == TCP_STATE_CLOSE_WAIT)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 8005b80:	2b05      	cmp	r3, #5
 8005b82:	d12d      	bne.n	8005be0 <tcpUpdateEvents+0x154>
   {
      //Check whether the send buffer is full or not
      if((socket->sndUser + socket->sndNxt - socket->sndUna) < socket->txBufferSize)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b90:	441a      	add	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b96:	1ad2      	subs	r2, r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d205      	bcs.n	8005bae <tcpUpdateEvents+0x122>
         socket->eventFlags |= SOCKET_EVENT_TX_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	63da      	str	r2, [r3, #60]	; 0x3c

      //Check whether all the data in the send buffer has been transmitted
      if(!socket->sndUser)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d12b      	bne.n	8005c10 <tcpUpdateEvents+0x184>
      {
         //All the pending data has been sent out
         socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbc:	f043 0208 	orr.w	r2, r3, #8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	63da      	str	r2, [r3, #60]	; 0x3c

         //Check whether an acknowledgment has been received
         if(TCP_CMP_SEQ(socket->sndUna, socket->sndNxt) >= 0)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	db1e      	blt.n	8005c10 <tcpUpdateEvents+0x184>
            socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	f043 0210 	orr.w	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	63da      	str	r2, [r3, #60]	; 0x3c
      if(!socket->sndUser)
 8005bde:	e017      	b.n	8005c10 <tcpUpdateEvents+0x184>
      }
   }
   else if(socket->state != TCP_STATE_LISTEN)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d013      	beq.n	8005c12 <tcpUpdateEvents+0x186>
   {
      //Unblock user task if the connection is being closed
      socket->eventFlags |= SOCKET_EVENT_TX_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	f043 0204 	orr.w	r2, r3, #4
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	f043 0208 	orr.w	r2, r3, #8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	f043 0210 	orr.w	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c0e:	e000      	b.n	8005c12 <tcpUpdateEvents+0x186>
      if(!socket->sndUser)
 8005c10:	bf00      	nop
   }

   //Handle RX specific events
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d009      	beq.n	8005c30 <tcpUpdateEvents+0x1a4>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8005c22:	2b07      	cmp	r3, #7
 8005c24:	d004      	beq.n	8005c30 <tcpUpdateEvents+0x1a4>
      socket->state == TCP_STATE_FIN_WAIT_2)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d10b      	bne.n	8005c48 <tcpUpdateEvents+0x1bc>
   {
      //Data is available for reading?
      if(socket->rcvUser > 0)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d027      	beq.n	8005c8a <tcpUpdateEvents+0x1fe>
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c
      if(socket->rcvUser > 0)
 8005c46:	e020      	b.n	8005c8a <tcpUpdateEvents+0x1fe>
   }
   else if(socket->state == TCP_STATE_LISTEN)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d10b      	bne.n	8005c6a <tcpUpdateEvents+0x1de>
   {
      //If the socket is currently in the listen state, it will be marked
      //as readable if an incoming connection request has been received
      if(socket->synQueue != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d016      	beq.n	8005c8a <tcpUpdateEvents+0x1fe>
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c68:	e00f      	b.n	8005c8a <tcpUpdateEvents+0x1fe>
   }
   else if(socket->state != TCP_STATE_SYN_SENT &&
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d00a      	beq.n	8005c8a <tcpUpdateEvents+0x1fe>
      socket->state != TCP_STATE_SYN_RECEIVED)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   else if(socket->state != TCP_STATE_SYN_SENT &&
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d005      	beq.n	8005c8a <tcpUpdateEvents+0x1fe>
   {
      //Readability can also indicate that a request to close
      //the socket has been received from the peer
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	63da      	str	r2, [r3, #60]	; 0x3c
   }

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d011      	beq.n	8005cb6 <tcpUpdateEvents+0x22a>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d006      	beq.n	8005caa <tcpUpdateEvents+0x21e>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ca8:	e005      	b.n	8005cb6 <tcpUpdateEvents+0x22a>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	63da      	str	r2, [r3, #60]	; 0x3c
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	401a      	ands	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	63da      	str	r2, [r3, #60]	; 0x3c

   //Any event to signal?
   if(socket->eventFlags)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <tcpUpdateEvents+0x25c>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3334      	adds	r3, #52	; 0x34
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fa fcfc 	bl	80006ce <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <tcpUpdateEvents+0x25c>
         osSetEvent(socket->userEvent);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fa fcf3 	bl	80006ce <osSetEvent>
   }
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <tcpWaitForEvents>:
 * @param[in] timeout Maximum time to wait
 * @return Logic OR of all the TCP events that satisfied the wait
 **/

uint_t tcpWaitForEvents(Socket *socket, uint_t eventMask, systime_t timeout)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
   //Sanity check
   if(socket == NULL)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <tcpWaitForEvents+0x16>
      return 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e01c      	b.n	8005d40 <tcpWaitForEvents+0x50>

   //Only one of the events listed here may complete the wait
   socket->eventMask = eventMask;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	639a      	str	r2, [r3, #56]	; 0x38
   //Update TCP related events
   tcpUpdateEvents(socket);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f7ff febd 	bl	8005a8c <tcpUpdateEvents>

   //No event is signaled?
   if(!socket->eventFlags)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d110      	bne.n	8005d3c <tcpWaitForEvents+0x4c>
   {
      //Reset the event object
      osResetEvent(&socket->event);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3334      	adds	r3, #52	; 0x34
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fa fce2 	bl	80006e8 <osResetEvent>

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8005d24:	4808      	ldr	r0, [pc, #32]	; (8005d48 <tcpWaitForEvents+0x58>)
 8005d26:	f7fa fd46 	bl	80007b6 <osReleaseMutex>
      //Wait until an event is triggered
      osWaitForEvent(&socket->event, timeout);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3334      	adds	r3, #52	; 0x34
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fa fce7 	bl	8000704 <osWaitForEvent>
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8005d36:	4804      	ldr	r0, [pc, #16]	; (8005d48 <tcpWaitForEvents+0x58>)
 8005d38:	f7fa fd2e 	bl	8000798 <osAcquireMutex>
   }

   //Return the list of TCP events that satisfied the wait
   return socket->eventFlags;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	2000e460 	.word	0x2000e460

08005d4c <tcpWriteTxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteTxBuffer(Socket *socket, uint32_t seqNum,
   const uint8_t *data, size_t length)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8005d6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d6e:	fb02 f201 	mul.w	r2, r2, r1
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	441a      	add	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d808      	bhi.n	8005d98 <tcpWriteTxBuffer+0x4c>
   {
      //Copy the payload
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f103 00ac 	add.w	r0, r3, #172	; 0xac
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	f7fc fe14 	bl	80029be <netBufferWrite>
         offset, data, socket->txBufferSize - offset);
      //Wrap around to the beginning of the circular buffer
      netBufferWrite((NetBuffer *) &socket->txBuffer,
         0, data + socket->txBufferSize - offset, length - socket->txBufferSize + offset);
   }
}
 8005d96:	e020      	b.n	8005dda <tcpWriteTxBuffer+0x8e>
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f103 00ac 	add.w	r0, r3, #172	; 0xac
         offset, data, socket->txBufferSize - offset);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6979      	ldr	r1, [r7, #20]
 8005dac:	f7fc fe07 	bl	80029be <netBufferWrite>
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f103 00ac 	add.w	r0, r3, #172	; 0xac
         0, data + socket->txBufferSize - offset, length - socket->txBufferSize + offset);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	18d1      	adds	r1, r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	1ad2      	subs	r2, r2, r3
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	f7fc fdf2 	bl	80029be <netBufferWrite>
}
 8005dda:	bf00      	nop
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <tcpReadTxBuffer>:
 * @return Error code
 **/

error_t tcpReadTxBuffer(Socket *socket, uint32_t seqNum,
   NetBuffer *buffer, size_t length)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b086      	sub	sp, #24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	603b      	str	r3, [r7, #0]
   error_t error;

   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8005e00:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e04:	fb02 f201 	mul.w	r2, r2, r1
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	441a      	add	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d80a      	bhi.n	8005e32 <tcpReadTxBuffer+0x50>
   {
      //Copy the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc fc31 	bl	800268e <netBufferConcat>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	82fb      	strh	r3, [r7, #22]
 8005e30:	e020      	b.n	8005e74 <tcpReadTxBuffer+0x92>
         offset, length);
   }
   else
   {
      //Copy the first part of the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f103 01ac 	add.w	r1, r3, #172	; 0xac
         offset, socket->txBufferSize - offset);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7fc fc22 	bl	800268e <netBufferConcat>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8005e4e:	8afb      	ldrh	r3, [r7, #22]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10f      	bne.n	8005e74 <tcpReadTxBuffer+0x92>
      {
         //Wrap around to the beginning of the circular buffer
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f103 01ac 	add.w	r1, r3, #172	; 0xac
            0, length - socket->txBufferSize + offset);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	1ad2      	subs	r2, r2, r3
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	2200      	movs	r2, #0
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fc fc0f 	bl	800268e <netBufferConcat>
 8005e70:	4603      	mov	r3, r0
 8005e72:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 8005e74:	8afb      	ldrh	r3, [r7, #22]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <tcpWriteRxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteRxBuffer(Socket *socket, uint32_t seqNum,
   const NetBuffer *data, size_t dataOffset, size_t length)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b088      	sub	sp, #32
 8005e82:	af02      	add	r7, sp, #8
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 8005e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ea0:	fb02 f201 	mul.w	r2, r2, r1
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	441a      	add	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d80a      	bhi.n	8005ece <tcpWriteRxBuffer+0x50>
   {
      //Copy the payload
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 7098 	add.w	r0, r3, #304	; 0x130
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6979      	ldr	r1, [r7, #20]
 8005ec8:	f7fc fc7c 	bl	80027c4 <netBufferCopy>
         offset, data, dataOffset, socket->rxBufferSize - offset);
      //Wrap around to the beginning of the circular buffer
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
         dataOffset + socket->rxBufferSize - offset, length - socket->rxBufferSize + offset);
   }
}
 8005ecc:	e024      	b.n	8005f18 <tcpWriteRxBuffer+0x9a>
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 7098 	add.w	r0, r3, #304	; 0x130
         offset, data, dataOffset, socket->rxBufferSize - offset);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	f7fc fc6d 	bl	80027c4 <netBufferCopy>
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 7098 	add.w	r0, r3, #304	; 0x130
         dataOffset + socket->rxBufferSize - offset, length - socket->rxBufferSize + offset);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	441a      	add	r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	1ad1      	subs	r1, r2, r3
         dataOffset + socket->rxBufferSize - offset, length - socket->rxBufferSize + offset);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005f04:	6a3a      	ldr	r2, [r7, #32]
 8005f06:	1ad2      	subs	r2, r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	2100      	movs	r1, #0
 8005f14:	f7fc fc56 	bl	80027c4 <netBufferCopy>
}
 8005f18:	bf00      	nop
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <tcpDumpHeader>:
 * @param[in] irs Initial receive sequence number (needed to compute relative ACK number)
 **/

void tcpDumpHeader(const TcpHeader *segment, size_t length, uint32_t iss,
   uint32_t irs)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
      (segment->flags & TCP_FLAG_ACK) ? 'A' : '-',
      (segment->flags & TCP_FLAG_URG) ? 'U' : '-',
      ntohl(segment->seqNum), ntohl(segment->seqNum) - iss,
      ntohl(segment->ackNum), ntohl(segment->ackNum) - irs,
      ntohs(segment->window), length);
}
 8005f2e:	bf00      	nop
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <tcpTick>:
 * FIN-WAIT-2 timer and TIME-WAIT timer)
 *
 **/

void tcpTick(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af02      	add	r7, sp, #8
   uint_t i;
   uint_t n;
   uint_t u;

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e193      	b.n	8006270 <tcpTick+0x334>
   {
      //Shortcut to the current socket
      Socket *socket = socketTable + i;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f44f 720d 	mov.w	r2, #564	; 0x234
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	4aa2      	ldr	r2, [pc, #648]	; (80061dc <tcpTick+0x2a0>)
 8005f54:	4413      	add	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
      //Check socket type
      if(socket->type != SOCKET_TYPE_STREAM)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 817f 	bne.w	8006260 <tcpTick+0x324>
         continue;
      //Check the current state of the TCP state machine
      if(socket->state == TCP_STATE_CLOSED)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 817b 	beq.w	8006264 <tcpTick+0x328>
         continue;

      //Is there any packet in the retransmission queue?
      if(socket->retransmitQueue != NULL)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d06c      	beq.n	8006052 <tcpTick+0x116>
      {
         //Retransmission timeout?
         if(tcpTimerElapsed(&socket->retransmitTimer))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 f9ab 	bl	80062da <tcpTimerElapsed>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d063      	beq.n	8006052 <tcpTick+0x116>
         {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //When a TCP sender detects segment loss using the retransmission
            //timer and the given segment has not yet been resent by way of
            //the retransmission timer, the value of ssthresh must be updated
            if(!socket->retransmitCount)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d113      	bne.n	8005fbc <tcpTick+0x80>
            {
               //Amount of data that has been sent but not yet acknowledged
               uint_t flightSize = socket->sndNxt - socket->sndUna;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	60bb      	str	r3, [r7, #8]
               //Adjust ssthresh value
               socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	461a      	mov	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	bf38      	it	cc
 8005fb2:	4613      	movcc	r3, r2
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
            }

            //Furthermore, upon a timeout cwnd must be set to no more than
            //the loss window, LW, which equals 1 full-sized segment
            socket->cwnd = MIN(TCP_LOSS_WINDOW * socket->smss, socket->txBufferSize);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bf28      	it	cs
 8005fcc:	4613      	movcs	r3, r2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

            //After a retransmit timeout, record the highest sequence number
            //transmitted in the variable recover
            socket->recover = socket->sndNxt - 1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fda:	1e5a      	subs	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

            //Enter the fast loss recovery procedure
            socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
#endif
            //Make sure the maximum number of retransmissions has not been reached
            if(socket->retransmitCount < TCP_MAX_RETRIES)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d820      	bhi.n	8006036 <tcpTick+0xfa>
                  formatSystemTime(osGetSystemTime(), NULL), socket->retransmitCount + 1,
                  socket->retransmitQueue->length);

               //Retransmit the earliest segment that has not been
               //acknowledged by the TCP receiver
               tcpRetransmitSegment(socket);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff fb9d 	bl	8005734 <tcpRetransmitSegment>

               //Use exponential back-off algorithm to calculate the new RTO
               socket->rto = MIN(socket->rto * 2, TCP_MAX_RTO);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006006:	429a      	cmp	r2, r3
 8006008:	bf28      	it	cs
 800600a:	461a      	movcs	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
               //Restart retransmission timer
               tcpTimerStart(&socket->retransmitTimer, socket->rto);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601e:	4619      	mov	r1, r3
 8006020:	4610      	mov	r0, r2
 8006022:	f000 f92d 	bl	8006280 <tcpTimerStart>
               //Increment retransmission counter
               socket->retransmitCount++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8006034:	e009      	b.n	800604a <tcpTick+0x10e>
            }
            else
            {
               //The maximum number of retransmissions has been exceeded
               tcpChangeState(socket, TCP_STATE_CLOSED);
 8006036:	2100      	movs	r1, #0
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff fd01 	bl	8005a40 <tcpChangeState>
               //Turn off the retransmission timer
               tcpTimerStop(&socket->retransmitTimer);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006044:	4618      	mov	r0, r3
 8006046:	f000 f92f 	bl	80062a8 <tcpTimerStop>
            }

            //TCP must use Karn's algorithm for taking RTT samples. That is, RTT
            //samples must not be made using segments that were retransmitted
            socket->rttBusy = FALSE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         }
      }

      //Check the current state of the TCP state machine
      if(socket->state == TCP_STATE_CLOSED)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8105 	beq.w	8006268 <tcpTick+0x32c>
         continue;

      //The persist timer is used when the remote host advertises
      //a window size of zero
      if(!socket->sndWnd && socket->wndProbeInterval)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006064:	2b00      	cmp	r3, #0
 8006066:	d142      	bne.n	80060ee <tcpTick+0x1b2>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d03d      	beq.n	80060ee <tcpTick+0x1b2>
      {
         //Time to send a new probe?
         if(tcpTimerElapsed(&socket->persistTimer))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8006078:	4618      	mov	r0, r3
 800607a:	f000 f92e 	bl	80062da <tcpTimerElapsed>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d034      	beq.n	80060ee <tcpTick+0x1b2>
         {
            //Make sure the maximum number of retransmissions has not been reached
            if(socket->wndProbeCount < TCP_MAX_RETRIES)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800608a:	2b04      	cmp	r3, #4
 800608c:	d82b      	bhi.n	80060e6 <tcpTick+0x1aa>
               //Debug message
               TRACE_INFO("%s: TCP zero window probe #%u...\r\n",
                  formatSystemTime(osGetSystemTime(), NULL), socket->wndProbeCount + 1);

               //Zero window probes usually have the sequence number one less than expected
               tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt - 1, socket->rcvNxt, 0, FALSE);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006092:	1e5a      	subs	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8006098:	2300      	movs	r3, #0
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	2300      	movs	r3, #0
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	460b      	mov	r3, r1
 80060a2:	2110      	movs	r1, #16
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7fe fa4d 	bl	8004544 <tcpSendSegment>
               //The interval between successive probes should be increased exponentially
               socket->wndProbeInterval = MIN(socket->wndProbeInterval * 2, TCP_MAX_PROBE_INTERVAL);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80060b6:	429a      	cmp	r2, r3
 80060b8:	bf28      	it	cs
 80060ba:	461a      	movcs	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
               //Restart the persist timer
               tcpTimerStart(&socket->persistTimer, socket->wndProbeInterval);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f000 f8d5 	bl	8006280 <tcpTimerStart>
               //Increment window probe counter
               socket->wndProbeCount++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 80060e4:	e003      	b.n	80060ee <tcpTick+0x1b2>
            }
            else
            {
               //Enter CLOSED state
               tcpChangeState(socket, TCP_STATE_CLOSED);
 80060e6:	2100      	movs	r1, #0
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff fca9 	bl	8005a40 <tcpChangeState>

      //To avoid a deadlock, it is necessary to have a timeout to force
      //transmission of data, overriding the SWS avoidance algorithm. In
      //practice, this timeout should seldom occur (refer to RFC 1122,
      //section 4.2.3.4)
      if(socket->state == TCP_STATE_ESTABLISHED || socket->state == TCP_STATE_CLOSE_WAIT)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d004      	beq.n	8006102 <tcpTick+0x1c6>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060fe:	2b05      	cmp	r3, #5
 8006100:	d17f      	bne.n	8006202 <tcpTick+0x2c6>
      {
         //The override timeout occurred?
         if(socket->sndUser && tcpTimerElapsed(&socket->overrideTimer))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006108:	2b00      	cmp	r3, #0
 800610a:	d07a      	beq.n	8006202 <tcpTick+0x2c6>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f8e1 	bl	80062da <tcpTimerElapsed>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d071      	beq.n	8006202 <tcpTick+0x2c6>
         {
            //The amount of data that can be sent at any given time is
            //limited by the receiver window and the congestion window
            n = MIN(socket->sndWnd, socket->txBufferSize);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 800612a:	4293      	cmp	r3, r2
 800612c:	bf28      	it	cs
 800612e:	4613      	movcs	r3, r2
 8006130:	607b      	str	r3, [r7, #4]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //Check the congestion window
            n = MIN(n, socket->cwnd);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8006138:	461a      	mov	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4293      	cmp	r3, r2
 800613e:	bf28      	it	cs
 8006140:	4613      	movcs	r3, r2
 8006142:	607b      	str	r3, [r7, #4]
#endif
            //Retrieve the size of the usable window
            u = n - (socket->sndNxt - socket->sndUna);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

            //Send as much data as possible
            while(socket->sndUser > 0)
 8006154:	e03a      	b.n	80061cc <tcpTick+0x290>
            {
               //The usable window size may become zero or negative,
               //preventing packet transmission
               if((int_t) u <= 0)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	dd3d      	ble.n	80061d8 <tcpTick+0x29c>
                  break;

               //Calculate the number of bytes to send at a time
               n = MIN(u, socket->sndUser);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006162:	461a      	mov	r2, r3
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4293      	cmp	r3, r2
 8006168:	bf28      	it	cs
 800616a:	4613      	movcs	r3, r2
 800616c:	607b      	str	r3, [r7, #4]
               n = MIN(n, socket->smss);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006174:	461a      	mov	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4293      	cmp	r3, r2
 800617a:	bf28      	it	cs
 800617c:	4613      	movcs	r3, r2
 800617e:	607b      	str	r3, [r7, #4]

               //Send TCP segment
               error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8006188:	2301      	movs	r3, #1
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	460b      	mov	r3, r1
 8006192:	2118      	movs	r1, #24
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7fe f9d5 	bl	8004544 <tcpSendSegment>
 800619a:	4603      	mov	r3, r0
 800619c:	807b      	strh	r3, [r7, #2]
                  socket->sndNxt, socket->rcvNxt, n, TRUE);
               //Failed to send TCP segment?
               if(error)
 800619e:	887b      	ldrh	r3, [r7, #2]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d11d      	bne.n	80061e0 <tcpTick+0x2a4>
                  break;

               //Advance SND.NXT pointer
               socket->sndNxt += n;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	441a      	add	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	665a      	str	r2, [r3, #100]	; 0x64
               //Adjust the number of bytes buffered but not yet sent
               socket->sndUser -= n;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
               //Update the size of the usable window
               u -= n;
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	613b      	str	r3, [r7, #16]
            while(socket->sndUser > 0)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1bf      	bne.n	8006156 <tcpTick+0x21a>
 80061d6:	e004      	b.n	80061e2 <tcpTick+0x2a6>
                  break;
 80061d8:	bf00      	nop
 80061da:	e002      	b.n	80061e2 <tcpTick+0x2a6>
 80061dc:	2000e83c 	.word	0x2000e83c
                  break;
 80061e0:	bf00      	nop
            }

            //Check whether the transmitter can accept more data
            tcpUpdateEvents(socket);
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff fc52 	bl	8005a8c <tcpUpdateEvents>

            //Restart override timer if necessary
            if(socket->sndUser > 0)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <tcpTick+0x2c6>
               tcpTimerStart(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80061f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 f83f 	bl	8006280 <tcpTimerStart>
         }
      }

      //The FIN-WAIT-2 timer prevents the connection
      //from staying in the FIN-WAIT-2 state forever
      if(socket->state == TCP_STATE_FIN_WAIT_2)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006208:	2b08      	cmp	r3, #8
 800620a:	d10c      	bne.n	8006226 <tcpTick+0x2ea>
      {
         //Maximum FIN-WAIT-2 time has elapsed?
         if(tcpTimerElapsed(&socket->finWait2Timer))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f861 	bl	80062da <tcpTimerElapsed>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <tcpTick+0x2ea>
         {
            //Debug message
            TRACE_WARNING("TCP FIN-WAIT-2 timer elapsed...\r\n");
            //Enter CLOSED state
            tcpChangeState(socket, TCP_STATE_CLOSED);
 800621e:	2100      	movs	r1, #0
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fc0d 	bl	8005a40 <tcpChangeState>
         }
      }

      //TIME-WAIT timer
      if(socket->state == TCP_STATE_TIME_WAIT)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800622c:	2b0a      	cmp	r3, #10
 800622e:	d11c      	bne.n	800626a <tcpTick+0x32e>
      {
         //2MSL time has elapsed?
         if(tcpTimerElapsed(&socket->timeWaitTimer))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f84f 	bl	80062da <tcpTimerElapsed>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d013      	beq.n	800626a <tcpTick+0x32e>
         {
            //Debug message
            TRACE_WARNING("TCP 2MSL timer elapsed (socket %u)...\r\n", i);
            //Enter CLOSED state
            tcpChangeState(socket, TCP_STATE_CLOSED);
 8006242:	2100      	movs	r1, #0
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fbfb 	bl	8005a40 <tcpChangeState>

            //Dispose the socket if the user does not have the ownership anymore
            if(!socket->ownedFlag)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <tcpTick+0x32e>
            {
               //Delete the TCB
               tcpDeleteControlBlock(socket);
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff f80a 	bl	800526c <tcpDeleteControlBlock>
               //Mark the socket as closed
               socket->type = SOCKET_TYPE_UNUSED;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	605a      	str	r2, [r3, #4]
 800625e:	e004      	b.n	800626a <tcpTick+0x32e>
         continue;
 8006260:	bf00      	nop
 8006262:	e002      	b.n	800626a <tcpTick+0x32e>
         continue;
 8006264:	bf00      	nop
 8006266:	e000      	b.n	800626a <tcpTick+0x32e>
         continue;
 8006268:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	3301      	adds	r3, #1
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2b09      	cmp	r3, #9
 8006274:	f67f ae68 	bls.w	8005f48 <tcpTick+0xc>
            }
         }
      }
   }
}
 8006278:	bf00      	nop
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <tcpTimerStart>:
 * @param[in] timer Pointer to the timer structure
 * @param[in] delay Time interval
 **/

void tcpTimerStart(TcpTimer *timer, systime_t delay)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
   //Start timer
   timer->startTime = osGetSystemTime();
 800628a:	f7fa faa1 	bl	80007d0 <osGetSystemTime>
 800628e:	4602      	mov	r2, r0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	605a      	str	r2, [r3, #4]
   timer->interval = delay;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	609a      	str	r2, [r3, #8]

   //The timer is now running...
   timer->running = TRUE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	601a      	str	r2, [r3, #0]
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <tcpTimerStop>:
 * @brief Stop TCP timer
 * @param[in] timer Pointer to the timer structure
 **/

void tcpTimerStop(TcpTimer *timer)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
   //Stop timer
   timer->running = FALSE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <tcpTimerRunning>:
 * @param[in] timer Pointer to the timer structure
 * @return Timer state
 **/

bool_t tcpTimerRunning(TcpTimer *timer)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
   //Check whether the timer is running
   return timer->running;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <tcpTimerElapsed>:
 * @param[in] timer Pointer to the timer structure
 * @return Timer state
 **/

bool_t tcpTimerElapsed(TcpTimer *timer)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Check whether the timer is running
   if(!timer->running)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <tcpTimerElapsed+0x14>
      return FALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e00e      	b.n	800630c <tcpTimerElapsed+0x32>

   //Get current time
   time = osGetSystemTime();
 80062ee:	f7fa fa6f 	bl	80007d0 <osGetSystemTime>
 80062f2:	60f8      	str	r0, [r7, #12]

   //Check whether the specified time interval has elapsed
   if(timeCompare(time, timer->startTime + timer->interval) >= 0)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4413      	add	r3, r2
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	db01      	blt.n	800630a <tcpTimerElapsed+0x30>
      return TRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <tcpTimerElapsed+0x32>
   else
      return FALSE;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <udpInit>:
 * @brief UDP related initialization
 * @return Error code
 **/

error_t udpInit(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   udpDynamicPort = 0;
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <udpInit+0x2c>)
 800631a:	2200      	movs	r2, #0
 800631c:	801a      	strh	r2, [r3, #0]

   //Create a mutex to prevent simultaneous access to the callback table
   if(!osCreateMutex(&udpCallbackMutex))
 800631e:	4809      	ldr	r0, [pc, #36]	; (8006344 <udpInit+0x30>)
 8006320:	f7fa fa21 	bl	8000766 <osCreateMutex>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <udpInit+0x1a>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 800632a:	2365      	movs	r3, #101	; 0x65
 800632c:	e005      	b.n	800633a <udpInit+0x26>
   }

   //Initialize callback table
   memset(udpCallbackTable, 0, sizeof(udpCallbackTable));
 800632e:	22a0      	movs	r2, #160	; 0xa0
 8006330:	2100      	movs	r1, #0
 8006332:	4805      	ldr	r0, [pc, #20]	; (8006348 <udpInit+0x34>)
 8006334:	f013 fe92 	bl	801a05c <memset>

   //Successful initialization
   return NO_ERROR;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	2000c326 	.word	0x2000c326
 8006344:	2000fe48 	.word	0x2000fe48
 8006348:	2000fe4c 	.word	0x2000fe4c

0800634c <udpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t udpGetDynamicPort(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
   uint_t port;

   //Retrieve current port number
   port = udpDynamicPort;
 8006352:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <udpGetDynamicPort+0x58>)
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	607b      	str	r3, [r7, #4]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800635e:	d303      	bcc.n	8006368 <udpGetDynamicPort+0x1c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006366:	d307      	bcc.n	8006378 <udpGetDynamicPort+0x2c>
   {
      //Generate a random port number
      port = SOCKET_EPHEMERAL_PORT_MIN + netGetRand() %
 8006368:	f7fb ff16 	bl	8002198 <netGetRand>
 800636c:	4603      	mov	r3, r0
 800636e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006372:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8006376:	607b      	str	r3, [r7, #4]
         (SOCKET_EPHEMERAL_PORT_MAX - SOCKET_EPHEMERAL_PORT_MIN + 1);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800637e:	4293      	cmp	r3, r2
 8006380:	d806      	bhi.n	8006390 <udpGetDynamicPort+0x44>
   {
      //Increment port number
      udpDynamicPort = port + 1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	b29b      	uxth	r3, r3
 8006386:	3301      	adds	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <udpGetDynamicPort+0x58>)
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	e003      	b.n	8006398 <udpGetDynamicPort+0x4c>
   }
   else
   {
      //Wrap around if necessary
      udpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <udpGetDynamicPort+0x58>)
 8006392:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006396:	801a      	strh	r2, [r3, #0]
   }

   //Return an ephemeral port number
   return port;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	b29b      	uxth	r3, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000c326 	.word	0x2000c326

080063a8 <udpProcessDatagram>:
 * @return Error code
 **/

error_t udpProcessDatagram(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, const NetBuffer *buffer, size_t offset)
{
 80063a8:	b590      	push	{r4, r7, lr}
 80063aa:	b08f      	sub	sp, #60	; 0x3c
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
   Socket *socket;
   SocketQueueItem *queueItem;
   NetBuffer *p;

   //Retrieve the length of the UDP datagram
   length = netBufferGetLength(buffer) - offset;
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fc f86e 	bl	8002498 <netBufferGetLength>
 80063bc:	4602      	mov	r2, r0
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	623b      	str	r3, [r7, #32]

   //Ensure the UDP header is valid
   if(length < sizeof(UdpHeader))
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	2b07      	cmp	r3, #7
 80063c8:	d801      	bhi.n	80063ce <udpProcessDatagram+0x26>
      //reasons other than the lack of an application at the destination port
      MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
      UDP_MIB_INC_COUNTER32(udpInErrors, 1);

      //Report an error
      return ERROR_INVALID_HEADER;
 80063ca:	23d4      	movs	r3, #212	; 0xd4
 80063cc:	e129      	b.n	8006622 <udpProcessDatagram+0x27a>
   }

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fc f929 	bl	8002628 <netBufferAt>
 80063d6:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(header == NULL)
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <udpProcessDatagram+0x3a>
      return ERROR_FAILURE;
 80063de:	2301      	movs	r3, #1
 80063e0:	e11f      	b.n	8006622 <udpProcessDatagram+0x27a>

   //Debug message
   TRACE_INFO("UDP datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 80063e2:	69f8      	ldr	r0, [r7, #28]
 80063e4:	f000 fafc 	bl	80069e0 <udpDumpHeader>

   //When UDP runs over IPv6, the checksum is mandatory
   if(header->checksum != 0x0000 || pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	88db      	ldrh	r3, [r3, #6]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <udpProcessDatagram+0x52>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b28      	cmp	r3, #40	; 0x28
 80063f8:	d10e      	bne.n	8006418 <udpProcessDatagram+0x70>
   {
      //Verify UDP checksum
      if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	1d18      	adds	r0, r3, #4
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6819      	ldr	r1, [r3, #0]
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	f7fb fa7a 	bl	8001902 <ipCalcUpperLayerChecksumEx>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <udpProcessDatagram+0x70>
         //reasons other than the lack of an application at the destination port
         MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
         UDP_MIB_INC_COUNTER32(udpInErrors, 1);

         //Report an error
         return ERROR_WRONG_CHECKSUM;
 8006414:	23d5      	movs	r3, #213	; 0xd5
 8006416:	e104      	b.n	8006622 <udpProcessDatagram+0x27a>
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8006418:	2300      	movs	r3, #0
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800641c:	e065      	b.n	80064ea <udpProcessDatagram+0x142>
   {
      //Point to the current socket
      socket = socketTable + i;
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	f44f 720d 	mov.w	r2, #564	; 0x234
 8006424:	fb02 f303 	mul.w	r3, r2, r3
 8006428:	4a80      	ldr	r2, [pc, #512]	; (800662c <udpProcessDatagram+0x284>)
 800642a:	4413      	add	r3, r2
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28

      //UDP socket found?
      if(socket->type != SOCKET_TYPE_DGRAM)
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d147      	bne.n	80064c6 <udpProcessDatagram+0x11e>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d004      	beq.n	8006448 <udpProcessDatagram+0xa0>
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	429a      	cmp	r2, r3
 8006446:	d140      	bne.n	80064ca <udpProcessDatagram+0x122>
         continue;
      //Check destination port number
      if(socket->localPort == 0 || socket->localPort != ntohs(header->destPort))
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	8b1b      	ldrh	r3, [r3, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d03e      	beq.n	80064ce <udpProcessDatagram+0x126>
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	8b1c      	ldrh	r4, [r3, #24]
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	885b      	ldrh	r3, [r3, #2]
 8006458:	b29b      	uxth	r3, r3
 800645a:	4618      	mov	r0, r3
 800645c:	f7fa f8a0 	bl	80005a0 <swapInt16>
 8006460:	4603      	mov	r3, r0
 8006462:	429c      	cmp	r4, r3
 8006464:	d133      	bne.n	80064ce <udpProcessDatagram+0x126>
         continue;
      //Source port number filtering
      if(socket->remotePort != 0 && socket->remotePort != ntohs(header->srcPort))
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <udpProcessDatagram+0xdc>
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	4618      	mov	r0, r3
 800647a:	f7fa f891 	bl	80005a0 <swapInt16>
 800647e:	4603      	mov	r3, r0
 8006480:	429c      	cmp	r4, r3
 8006482:	d126      	bne.n	80064d2 <udpProcessDatagram+0x12a>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	d124      	bne.n	80064d6 <udpProcessDatagram+0x12e>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d009      	beq.n	80064a8 <udpProcessDatagram+0x100>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d11e      	bne.n	80064da <udpProcessDatagram+0x132>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	695a      	ldr	r2, [r3, #20]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d11a      	bne.n	80064de <udpProcessDatagram+0x136>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d020      	beq.n	80064f2 <udpProcessDatagram+0x14a>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d114      	bne.n	80064e2 <udpProcessDatagram+0x13a>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d016      	beq.n	80064f2 <udpProcessDatagram+0x14a>
               continue;
 80064c4:	e00e      	b.n	80064e4 <udpProcessDatagram+0x13c>
         continue;
 80064c6:	bf00      	nop
 80064c8:	e00c      	b.n	80064e4 <udpProcessDatagram+0x13c>
         continue;
 80064ca:	bf00      	nop
 80064cc:	e00a      	b.n	80064e4 <udpProcessDatagram+0x13c>
         continue;
 80064ce:	bf00      	nop
 80064d0:	e008      	b.n	80064e4 <udpProcessDatagram+0x13c>
         continue;
 80064d2:	bf00      	nop
 80064d4:	e006      	b.n	80064e4 <udpProcessDatagram+0x13c>
      else
#endif
      //Invalid packet received?
      {
         //This should never occur...
         continue;
 80064d6:	bf00      	nop
 80064d8:	e004      	b.n	80064e4 <udpProcessDatagram+0x13c>
               continue;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <udpProcessDatagram+0x13c>
               continue;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <udpProcessDatagram+0x13c>
               continue;
 80064e2:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	3301      	adds	r3, #1
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	2b09      	cmp	r3, #9
 80064ee:	d996      	bls.n	800641e <udpProcessDatagram+0x76>
 80064f0:	e000      	b.n	80064f4 <udpProcessDatagram+0x14c>
      }

      //The current socket meets all the criteria
      break;
 80064f2:	bf00      	nop
   }

   //Point to the payload
   offset += sizeof(UdpHeader);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	603b      	str	r3, [r7, #0]
   length -= sizeof(UdpHeader);
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	3b08      	subs	r3, #8
 80064fe:	623b      	str	r3, [r7, #32]

   //No matching socket found?
   if(i >= SOCKET_MAX_COUNT)
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	2b09      	cmp	r3, #9
 8006504:	d90b      	bls.n	800651e <udpProcessDatagram+0x176>
   {
      //Invoke user callback, if any
      error = udpInvokeRxCallback(interface, pseudoHeader, header, buffer, offset);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fa0b 	bl	800692c <udpInvokeRxCallback>
 8006516:	4603      	mov	r3, r0
 8006518:	82fb      	strh	r3, [r7, #22]
      //Return status code
      return error;
 800651a:	8afb      	ldrh	r3, [r7, #22]
 800651c:	e081      	b.n	8006622 <udpProcessDatagram+0x27a>
   }

   //Empty receive queue?
   if(!socket->receiveQueue)
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006524:	2b00      	cmp	r3, #0
 8006526:	d118      	bne.n	800655a <udpProcessDatagram+0x1b2>
   {
      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	3320      	adds	r3, #32
 800652c:	4618      	mov	r0, r3
 800652e:	f7fb ff71 	bl	8002414 <netBufferAlloc>
 8006532:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00c      	beq.n	8006554 <udpProcessDatagram+0x1ac>
      {
         //Point to the newly created item
         queueItem = netBufferAt(p, 0);
 800653a:	2100      	movs	r1, #0
 800653c:	69b8      	ldr	r0, [r7, #24]
 800653e:	f7fc f873 	bl	8002628 <netBufferAt>
 8006542:	6278      	str	r0, [r7, #36]	; 0x24
         queueItem->buffer = p;
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	619a      	str	r2, [r3, #24]
         //Add the newly created item to the queue
         socket->receiveQueue = queueItem;
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
 8006552:	e031      	b.n	80065b8 <udpProcessDatagram+0x210>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8006554:	2300      	movs	r3, #0
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
 8006558:	e02e      	b.n	80065b8 <udpProcessDatagram+0x210>
      }
   }
   else
   {
      //Point to the very first item
      queueItem = socket->receiveQueue;
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
      //Reach the last item in the receive queue
      for(i = 1; queueItem->next; i++)
 8006562:	2301      	movs	r3, #1
 8006564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006566:	e005      	b.n	8006574 <udpProcessDatagram+0x1cc>
         queueItem = queueItem->next;
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
      for(i = 1; queueItem->next; i++)
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	3301      	adds	r3, #1
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f5      	bne.n	8006568 <udpProcessDatagram+0x1c0>

      //Make sure the receive queue is not full
      if(i >= UDP_RX_QUEUE_SIZE)
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	2b03      	cmp	r3, #3
 8006580:	d901      	bls.n	8006586 <udpProcessDatagram+0x1de>
         return ERROR_RECEIVE_QUEUE_FULL;
 8006582:	23db      	movs	r3, #219	; 0xdb
 8006584:	e04d      	b.n	8006622 <udpProcessDatagram+0x27a>

      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	3320      	adds	r3, #32
 800658a:	4618      	mov	r0, r3
 800658c:	f7fb ff42 	bl	8002414 <netBufferAlloc>
 8006590:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <udpProcessDatagram+0x20c>
      {
         //Add the newly created item to the queue
         queueItem->next = netBufferAt(p, 0);
 8006598:	2100      	movs	r1, #0
 800659a:	69b8      	ldr	r0, [r7, #24]
 800659c:	f7fc f844 	bl	8002628 <netBufferAt>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
         queueItem->buffer = p;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	619a      	str	r2, [r3, #24]
 80065b2:	e001      	b.n	80065b8 <udpProcessDatagram+0x210>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
   }

   //Failed to allocate memory?
   if(queueItem == NULL)
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <udpProcessDatagram+0x21a>
      return ERROR_OUT_OF_MEMORY;
 80065be:	2364      	movs	r3, #100	; 0x64
 80065c0:	e02f      	b.n	8006622 <udpProcessDatagram+0x27a>

   //Initialize next field
   queueItem->next = NULL;
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
   //Record the source port number
   queueItem->srcPort = ntohs(header->srcPort);
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7f9 ffe6 	bl	80005a0 <swapInt16>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	819a      	strh	r2, [r3, #12]

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 remote address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b0c      	cmp	r3, #12
 80065e2:	d10d      	bne.n	8006600 <udpProcessDatagram+0x258>
   {
      //Save the source IPv4 address
      queueItem->srcIpAddr.length = sizeof(Ipv4Addr);
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	2204      	movs	r2, #4
 80065e8:	605a      	str	r2, [r3, #4]
      queueItem->srcIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	609a      	str	r2, [r3, #8]
      //Save the destination IPv4 address
      queueItem->destIpAddr.length = sizeof(Ipv4Addr);
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	2204      	movs	r2, #4
 80065f6:	611a      	str	r2, [r3, #16]
      queueItem->destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	615a      	str	r2, [r3, #20]
      queueItem->destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
   }
#endif

   //Offset to the payload
   queueItem->offset = sizeof(SocketQueueItem);
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	2220      	movs	r2, #32
 8006604:	61da      	str	r2, [r3, #28]
   //Copy the payload
   netBufferCopy(queueItem->buffer, queueItem->offset, buffer, offset, length);
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	6998      	ldr	r0, [r3, #24]
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	69d9      	ldr	r1, [r3, #28]
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	f7fc f8d5 	bl	80027c4 <netBufferCopy>

   //Notify user that data is available
   udpUpdateEvents(socket);
 800661a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661c:	f000 f8cd 	bl	80067ba <udpUpdateEvents>
   MIB2_INC_COUNTER32(udpGroup.udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);

   //Successful processing
   return NO_ERROR;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3734      	adds	r7, #52	; 0x34
 8006626:	46bd      	mov	sp, r7
 8006628:	bd90      	pop	{r4, r7, pc}
 800662a:	bf00      	nop
 800662c:	2000e83c 	.word	0x2000e83c

08006630 <udpSendDatagramEx>:
 **/

error_t udpSendDatagramEx(NetInterface *interface, const IpAddr *srcIpAddr,
   uint16_t srcPort, const IpAddr *destIpAddr, uint16_t destPort,
   NetBuffer *buffer, size_t offset, uint_t flags)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08e      	sub	sp, #56	; 0x38
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	4613      	mov	r3, r2
 800663e:	80fb      	strh	r3, [r7, #6]
   size_t length;
   UdpHeader *header;
   IpPseudoHeader pseudoHeader;

   //Make room for the UDP header
   offset -= sizeof(UdpHeader);
 8006640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006642:	3b08      	subs	r3, #8
 8006644:	643b      	str	r3, [r7, #64]	; 0x40
   //Retrieve the length of the datagram
   length = netBufferGetLength(buffer) - offset;
 8006646:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006648:	f7fb ff26 	bl	8002498 <netBufferGetLength>
 800664c:	4602      	mov	r2, r0
 800664e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 8006654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006656:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006658:	f7fb ffe6 	bl	8002628 <netBufferAt>
 800665c:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(header == NULL)
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <udpSendDatagramEx+0x38>
      return ERROR_FAILURE;
 8006664:	2301      	movs	r3, #1
 8006666:	e088      	b.n	800677a <udpSendDatagramEx+0x14a>

   //Format UDP header
   header->srcPort = htons(srcPort);
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 ff98 	bl	80005a0 <swapInt16>
 8006670:	4603      	mov	r3, r0
 8006672:	461a      	mov	r2, r3
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	801a      	strh	r2, [r3, #0]
   header->destPort = htons(destPort);
 8006678:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800667a:	4618      	mov	r0, r3
 800667c:	f7f9 ff90 	bl	80005a0 <swapInt16>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	805a      	strh	r2, [r3, #2]
   header->length = htons(length);
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	b29b      	uxth	r3, r3
 800668c:	4618      	mov	r0, r3
 800668e:	f7f9 ff87 	bl	80005a0 <swapInt16>
 8006692:	4603      	mov	r3, r0
 8006694:	461a      	mov	r2, r3
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	809a      	strh	r2, [r3, #4]
   header->checksum = 0;
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	2200      	movs	r2, #0
 800669e:	719a      	strb	r2, [r3, #6]
 80066a0:	2200      	movs	r2, #0
 80066a2:	71da      	strb	r2, [r3, #7]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(destIpAddr->length == sizeof(Ipv4Addr))
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d14e      	bne.n	800674a <udpSendDatagramEx+0x11a>
   {
      //Valid source IP address?
      if(srcIpAddr != NULL && srcIpAddr->length == sizeof(Ipv4Addr))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d007      	beq.n	80066c2 <udpSendDatagramEx+0x92>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d103      	bne.n	80066c2 <udpSendDatagramEx+0x92>
      {
         //Copy the source IP address
         pseudoHeader.ipv4Data.srcAddr = srcIpAddr->ipv4Addr;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	e01d      	b.n	80066fe <udpSendDatagramEx+0xce>
      {
         Ipv4Addr ipAddr;

         //Select the source IPv4 address and the relevant network interface
         //to use when sending data to the specified destination host
         error = ipv4SelectSourceAddr(&interface, destIpAddr->ipv4Addr,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	f107 0210 	add.w	r2, r7, #16
 80066ca:	f107 030c 	add.w	r3, r7, #12
 80066ce:	4618      	mov	r0, r3
 80066d0:	f002 f9ec 	bl	8008aac <ipv4SelectSourceAddr>
 80066d4:	4603      	mov	r3, r0
 80066d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            &ipAddr);

         //Check status code
         if(!error)
 80066d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d102      	bne.n	80066e4 <udpSendDatagramEx+0xb4>
         {
            //Copy the resulting source IP address
            pseudoHeader.ipv4Data.srcAddr = ipAddr;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	e00c      	b.n	80066fe <udpSendDatagramEx+0xce>
         }
         else
         {
            //Handle the special case where the destination address is the
            //broadcast address
            if(destIpAddr->ipv4Addr == IPV4_BROADCAST_ADDR && interface != NULL)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ec:	d105      	bne.n	80066fa <udpSendDatagramEx+0xca>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <udpSendDatagramEx+0xca>
            {
               //Use the unspecified address as source address
               pseudoHeader.ipv4Data.srcAddr = IPV4_UNSPECIFIED_ADDR;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
 80066f8:	e001      	b.n	80066fe <udpSendDatagramEx+0xce>
            }
            else
            {
               //Source address selection failed
               return error;
 80066fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066fc:	e03d      	b.n	800677a <udpSendDatagramEx+0x14a>
            }
         }
      }

      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 80066fe:	230c      	movs	r3, #12
 8006700:	617b      	str	r3, [r7, #20]
      pseudoHeader.ipv4Data.destAddr = destIpAddr->ipv4Addr;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	61fb      	str	r3, [r7, #28]
      pseudoHeader.ipv4Data.reserved = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	f887 3020 	strb.w	r3, [r7, #32]
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_UDP;
 800670e:	2311      	movs	r3, #17
 8006710:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      pseudoHeader.ipv4Data.length = htons(length);
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	b29b      	uxth	r3, r3
 8006718:	4618      	mov	r0, r3
 800671a:	f7f9 ff41 	bl	80005a0 <swapInt16>
 800671e:	4603      	mov	r3, r0
 8006720:	847b      	strh	r3, [r7, #34]	; 0x22

      //Calculate UDP header checksum
      header->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 8006722:	f107 0314 	add.w	r3, r7, #20
 8006726:	1d18      	adds	r0, r3, #4
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006730:	210c      	movs	r1, #12
 8006732:	f7fb f8e6 	bl	8001902 <ipCalcUpperLayerChecksumEx>
 8006736:	4603      	mov	r3, r0
 8006738:	461a      	mov	r2, r3
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	80da      	strh	r2, [r3, #6]
   }

   //If the computed checksum is zero, it is transmitted as all ones. An all
   //zero transmitted checksum value means that the transmitter generated no
   //checksum
   if(header->checksum == 0x0000)
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	88db      	ldrh	r3, [r3, #6]
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <udpSendDatagramEx+0x12c>
 8006748:	e001      	b.n	800674e <udpSendDatagramEx+0x11e>
      return ERROR_FAILURE;
 800674a:	2301      	movs	r3, #1
 800674c:	e015      	b.n	800677a <udpSendDatagramEx+0x14a>
   {
      header->checksum = 0xFFFF;
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006754:	719a      	strb	r2, [r3, #6]
 8006756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800675a:	71da      	strb	r2, [r3, #7]
   UDP_MIB_INC_COUNTER64(udpHCOutDatagrams, 1);

   //Debug message
   TRACE_INFO("Sending UDP datagram (%" PRIuSIZE " bytes)\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 800675c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800675e:	f000 f93f 	bl	80069e0 <udpDumpHeader>

   //Send UDP datagram
   error = ipSendDatagram(interface, &pseudoHeader, buffer, offset, flags);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f107 0114 	add.w	r1, r7, #20
 8006768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006770:	f7fa ff66 	bl	8001640 <ipSendDatagram>
 8006774:	4603      	mov	r3, r0
 8006776:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Return status code
   return error;
 8006778:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800677a:	4618      	mov	r0, r3
 800677c:	3730      	adds	r7, #48	; 0x30
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <udpAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *udpAllocBuffer(size_t length, size_t *offset)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;

   //Allocate a buffer to hold the UDP header and the payload
   buffer = ipAllocBuffer(length + sizeof(UdpHeader), offset);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3308      	adds	r3, #8
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f7fb f8de 	bl	8001954 <ipAllocBuffer>
 8006798:	60f8      	str	r0, [r7, #12]
   //Failed to allocate buffer?
   if(buffer == NULL)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <udpAllocBuffer+0x22>
      return NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e006      	b.n	80067b2 <udpAllocBuffer+0x30>

   //Offset to the first byte of the payload
   *offset += sizeof(UdpHeader);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f103 0208 	add.w	r2, r3, #8
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 80067b0:	68fb      	ldr	r3, [r7, #12]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <udpUpdateEvents>:
 * @brief Update UDP related events
 * @param[in] socket Handle referencing the socket
 **/

void udpUpdateEvents(Socket *socket)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	63da      	str	r2, [r3, #60]	; 0x3c

   //The socket is marked as readable if a datagram is pending in the queue
   if(socket->receiveQueue)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <udpUpdateEvents+0x24>
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	63da      	str	r2, [r3, #60]	; 0x3c

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d011      	beq.n	800680a <udpUpdateEvents+0x50>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <udpUpdateEvents+0x44>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80067fc:	e005      	b.n	800680a <udpUpdateEvents+0x50>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	63da      	str	r2, [r3, #60]	; 0x3c
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	401a      	ands	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	63da      	str	r2, [r3, #60]	; 0x3c

   //Any event to signal?
   if(socket->eventFlags)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <udpUpdateEvents+0x82>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3334      	adds	r3, #52	; 0x34
 8006824:	4618      	mov	r0, r3
 8006826:	f7f9 ff52 	bl	80006ce <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <udpUpdateEvents+0x82>
         osSetEvent(socket->userEvent);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	4618      	mov	r0, r3
 8006838:	f7f9 ff49 	bl	80006ce <osSetEvent>
   }
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <udpAttachRxCallback>:
 * @return Error code
 **/

error_t udpAttachRxCallback(NetInterface *interface,
   uint16_t port, UdpRxCallback callback, void *param)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	607a      	str	r2, [r7, #4]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	460b      	mov	r3, r1
 8006852:	817b      	strh	r3, [r7, #10]
   uint_t i;
   UdpRxCallbackDesc *entry;

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 8006854:	4817      	ldr	r0, [pc, #92]	; (80068b4 <udpAttachRxCallback+0x70>)
 8006856:	f7f9 ff9f 	bl	8000798 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	e018      	b.n	8006892 <udpAttachRxCallback+0x4e>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <udpAttachRxCallback+0x74>)
 8006866:	4413      	add	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

      //Check whether the entry is currently in used
      if(entry->callback == NULL)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10c      	bne.n	800688c <udpAttachRxCallback+0x48>
      {
         //Create a new entry
         entry->interface = interface;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]
         entry->port = port;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	897a      	ldrh	r2, [r7, #10]
 800687c:	809a      	strh	r2, [r3, #4]
         entry->callback = callback;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	609a      	str	r2, [r3, #8]
         entry->param = param;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	60da      	str	r2, [r3, #12]
         //We are done
         break;
 800688a:	e005      	b.n	8006898 <udpAttachRxCallback+0x54>
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	3301      	adds	r3, #1
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b09      	cmp	r3, #9
 8006896:	d9e3      	bls.n	8006860 <udpAttachRxCallback+0x1c>
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 8006898:	4806      	ldr	r0, [pc, #24]	; (80068b4 <udpAttachRxCallback+0x70>)
 800689a:	f7f9 ff8c 	bl	80007b6 <osReleaseMutex>

   //Failed to attach the specified user callback?
   if(i >= UDP_CALLBACK_TABLE_SIZE)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	d901      	bls.n	80068a8 <udpAttachRxCallback+0x64>
      return ERROR_OUT_OF_RESOURCES;
 80068a4:	2365      	movs	r3, #101	; 0x65
 80068a6:	e000      	b.n	80068aa <udpAttachRxCallback+0x66>

   //Successful processing
   return NO_ERROR;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	2000fe48 	.word	0x2000fe48
 80068b8:	2000fe4c 	.word	0x2000fe4c

080068bc <udpDetachRxCallback>:
 * @param[in] port UDP port number
 * @return Error code
 **/

error_t udpDetachRxCallback(NetInterface *interface, uint16_t port)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	807b      	strh	r3, [r7, #2]
   error_t error;
   uint_t i;
   UdpRxCallbackDesc *entry;

   //Initialize status code
   error = ERROR_FAILURE;
 80068c8:	2301      	movs	r3, #1
 80068ca:	82fb      	strh	r3, [r7, #22]

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 80068cc:	4815      	ldr	r0, [pc, #84]	; (8006924 <udpDetachRxCallback+0x68>)
 80068ce:	f7f9 ff63 	bl	8000798 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	e01a      	b.n	800690e <udpDetachRxCallback+0x52>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	4a12      	ldr	r2, [pc, #72]	; (8006928 <udpDetachRxCallback+0x6c>)
 80068de:	4413      	add	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]

      //Check whether the entry is currently in used
      if(entry->callback != NULL)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00e      	beq.n	8006908 <udpDetachRxCallback+0x4c>
      {
         //Does the specified port number match the current entry?
         if(entry->port == port && entry->interface == interface)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	889b      	ldrh	r3, [r3, #4]
 80068ee:	887a      	ldrh	r2, [r7, #2]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d109      	bne.n	8006908 <udpDetachRxCallback+0x4c>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d104      	bne.n	8006908 <udpDetachRxCallback+0x4c>
         {
            //Unregister user callback
            entry->callback = NULL;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	609a      	str	r2, [r3, #8]
            //A matching entry has been found
            error = NO_ERROR;
 8006904:	2300      	movs	r3, #0
 8006906:	82fb      	strh	r3, [r7, #22]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3301      	adds	r3, #1
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b09      	cmp	r3, #9
 8006912:	d9e1      	bls.n	80068d8 <udpDetachRxCallback+0x1c>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 8006914:	4803      	ldr	r0, [pc, #12]	; (8006924 <udpDetachRxCallback+0x68>)
 8006916:	f7f9 ff4e 	bl	80007b6 <osReleaseMutex>

   //Return status code
   return error;
 800691a:	8afb      	ldrh	r3, [r7, #22]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	2000fe48 	.word	0x2000fe48
 8006928:	2000fe4c 	.word	0x2000fe4c

0800692c <udpInvokeRxCallback>:
 * @return Error code
 **/

error_t udpInvokeRxCallback(NetInterface *interface, const IpPseudoHeader *pseudoHeader,
   const UdpHeader *header, const NetBuffer *buffer, size_t offset)
{
 800692c:	b590      	push	{r4, r7, lr}
 800692e:	b08b      	sub	sp, #44	; 0x2c
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
   uint_t i;
   void *param;
   UdpRxCallbackDesc *entry;

   //Initialize status code
   error = ERROR_PORT_UNREACHABLE;
 800693a:	23d2      	movs	r3, #210	; 0xd2
 800693c:	83fb      	strh	r3, [r7, #30]

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 800693e:	4826      	ldr	r0, [pc, #152]	; (80069d8 <udpInvokeRxCallback+0xac>)
 8006940:	f7f9 ff2a 	bl	8000798 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8006944:	2300      	movs	r3, #0
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	e03b      	b.n	80069c2 <udpInvokeRxCallback+0x96>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	4a23      	ldr	r2, [pc, #140]	; (80069dc <udpInvokeRxCallback+0xb0>)
 8006950:	4413      	add	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

      //Check whether the entry is currently in used
      if(entry->callback != NULL)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d02f      	beq.n	80069bc <udpInvokeRxCallback+0x90>
      {
         //Bound to a particular interface?
         if(entry->interface == NULL || entry->interface == interface)
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d004      	beq.n	800696e <udpInvokeRxCallback+0x42>
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	429a      	cmp	r2, r3
 800696c:	d126      	bne.n	80069bc <udpInvokeRxCallback+0x90>
         {
            //Does the specified port number match the current entry?
            if(entry->port == ntohs(header->destPort))
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	889c      	ldrh	r4, [r3, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	885b      	ldrh	r3, [r3, #2]
 8006976:	b29b      	uxth	r3, r3
 8006978:	4618      	mov	r0, r3
 800697a:	f7f9 fe11 	bl	80005a0 <swapInt16>
 800697e:	4603      	mov	r3, r0
 8006980:	429c      	cmp	r4, r3
 8006982:	d11b      	bne.n	80069bc <udpInvokeRxCallback+0x90>
            {
               //Retrieve callback parameter
               param = entry->param;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	613b      	str	r3, [r7, #16]

               //Release mutex to prevent any deadlock
               if(param == NULL)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d102      	bne.n	8006996 <udpInvokeRxCallback+0x6a>
                  osReleaseMutex(&udpCallbackMutex);
 8006990:	4811      	ldr	r0, [pc, #68]	; (80069d8 <udpInvokeRxCallback+0xac>)
 8006992:	f7f9 ff10 	bl	80007b6 <osReleaseMutex>

               //Invoke user callback function
               entry->callback(interface, pseudoHeader,
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	689c      	ldr	r4, [r3, #8]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	47a0      	blx	r4
                  header, buffer, offset, param);

               //Acquire mutex
               if(param == NULL)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d102      	bne.n	80069b8 <udpInvokeRxCallback+0x8c>
                  osAcquireMutex(&udpCallbackMutex);
 80069b2:	4809      	ldr	r0, [pc, #36]	; (80069d8 <udpInvokeRxCallback+0xac>)
 80069b4:	f7f9 fef0 	bl	8000798 <osAcquireMutex>

               //A matching entry has been found
               error = NO_ERROR;
 80069b8:	2300      	movs	r3, #0
 80069ba:	83fb      	strh	r3, [r7, #30]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	3301      	adds	r3, #1
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b09      	cmp	r3, #9
 80069c6:	d9c0      	bls.n	800694a <udpInvokeRxCallback+0x1e>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 80069c8:	4803      	ldr	r0, [pc, #12]	; (80069d8 <udpInvokeRxCallback+0xac>)
 80069ca:	f7f9 fef4 	bl	80007b6 <osReleaseMutex>
      UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
      UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);
   }

   //Return status code
   return error;
 80069ce:	8bfb      	ldrh	r3, [r7, #30]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3724      	adds	r7, #36	; 0x24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd90      	pop	{r4, r7, pc}
 80069d8:	2000fe48 	.word	0x2000fe48
 80069dc:	2000fe4c 	.word	0x2000fe4c

080069e0 <udpDumpHeader>:
 * @brief Dump UDP header for debugging purpose
 * @param[in] datagram Pointer to the UDP header
 **/

void udpDumpHeader(const UdpHeader *datagram)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
   //Dump UDP header contents
   TRACE_DEBUG("  Source Port = %" PRIu16 "\r\n", ntohs(datagram->srcPort));
   TRACE_DEBUG("  Destination Port = %" PRIu16 "\r\n", ntohs(datagram->destPort));
   TRACE_DEBUG("  Length = %" PRIu16 "\r\n", ntohs(datagram->length));
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(datagram->checksum));
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <dnsInit>:
 * @brief DNS cache initialization
 * @return Error code
 **/

error_t dnsInit(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
   //Initialize DNS cache
   memset(dnsCache, 0, sizeof(dnsCache));
 80069f8:	f44f 7250 	mov.w	r2, #832	; 0x340
 80069fc:	2100      	movs	r1, #0
 80069fe:	4803      	ldr	r0, [pc, #12]	; (8006a0c <dnsInit+0x18>)
 8006a00:	f013 fb2c 	bl	801a05c <memset>

   //Successful initialization
   return NO_ERROR;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2000feec 	.word	0x2000feec

08006a10 <dnsFlushCache>:
 * @brief Flush DNS cache
 * @param[in] interface Underlying network interface
 **/

void dnsFlushCache(NetInterface *interface)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
   uint_t i;
   DnsCacheEntry *entry;

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e015      	b.n	8006a4a <dnsFlushCache+0x3a>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2268      	movs	r2, #104	; 0x68
 8006a22:	fb02 f303 	mul.w	r3, r2, r3
 8006a26:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <dnsFlushCache+0x48>)
 8006a28:	4413      	add	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in used
      if(entry->state != DNS_STATE_NONE)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <dnsFlushCache+0x34>
      {
         //Delete DNS entries only for the given network interface
         if(entry->interface == interface)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d102      	bne.n	8006a44 <dnsFlushCache+0x34>
            dnsDeleteEntry(entry);
 8006a3e:	68b8      	ldr	r0, [r7, #8]
 8006a40:	f000 f84a 	bl	8006ad8 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b07      	cmp	r3, #7
 8006a4e:	d9e6      	bls.n	8006a1e <dnsFlushCache+0xe>
      }
   }
}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	2000feec 	.word	0x2000feec

08006a5c <dnsCreateEntry>:
 * @brief Create a new entry in the DNS cache
 * @return Pointer to the newly created entry
 **/

DnsCacheEntry *dnsCreateEntry(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
   systime_t time;
   DnsCacheEntry *entry;
   DnsCacheEntry *oldestEntry;

   //Get current time
   time = osGetSystemTime();
 8006a62:	f7f9 feb5 	bl	80007d0 <osGetSystemTime>
 8006a66:	6078      	str	r0, [r7, #4]

   //Keep track of the oldest entry
   oldestEntry = &dnsCache[0];
 8006a68:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <dnsCreateEntry+0x78>)
 8006a6a:	60bb      	str	r3, [r7, #8]

   //Loop through DNS cache entries
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e020      	b.n	8006ab4 <dnsCreateEntry+0x58>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2268      	movs	r2, #104	; 0x68
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <dnsCreateEntry+0x78>)
 8006a7c:	4413      	add	r3, r2
 8006a7e:	603b      	str	r3, [r7, #0]

      //Check whether the entry is currently in used or not
      if(entry->state == DNS_STATE_NONE)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d106      	bne.n	8006a96 <dnsCreateEntry+0x3a>
      {
         //Erase contents
         memset(entry, 0, sizeof(DnsCacheEntry));
 8006a88:	2268      	movs	r2, #104	; 0x68
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	6838      	ldr	r0, [r7, #0]
 8006a8e:	f013 fae5 	bl	801a05c <memset>
         //Return a pointer to the DNS entry
         return entry;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	e01a      	b.n	8006acc <dnsCreateEntry+0x70>
      }

      //Keep track of the oldest entry in the table
      if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	1ad2      	subs	r2, r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	1acb      	subs	r3, r1, r3
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d901      	bls.n	8006aae <dnsCreateEntry+0x52>
      {
         oldestEntry = entry;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b07      	cmp	r3, #7
 8006ab8:	d9db      	bls.n	8006a72 <dnsCreateEntry+0x16>
      }
   }

   //The oldest entry is removed whenever the table runs out of space
   dnsDeleteEntry(oldestEntry);
 8006aba:	68b8      	ldr	r0, [r7, #8]
 8006abc:	f000 f80c 	bl	8006ad8 <dnsDeleteEntry>
   //Erase contents
   memset(oldestEntry, 0, sizeof(DnsCacheEntry));
 8006ac0:	2268      	movs	r2, #104	; 0x68
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	68b8      	ldr	r0, [r7, #8]
 8006ac6:	f013 fac9 	bl	801a05c <memset>
   //Return a pointer to the DNS entry
   return oldestEntry;
 8006aca:	68bb      	ldr	r3, [r7, #8]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	2000feec 	.word	0x2000feec

08006ad8 <dnsDeleteEntry>:
 * @brief Delete the specified DNS cache entry
 * @param[in] entry Pointer to the DNS cache entry to be deleted
 **/

void dnsDeleteEntry(DnsCacheEntry *entry)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
   //Make sure the specified entry is valid
   if(entry != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d012      	beq.n	8006b0c <dnsDeleteEntry+0x34>
   {
#if (DNS_CLIENT_SUPPORT == ENABLED)
      //DNS resolver?
      if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	789b      	ldrb	r3, [r3, #2]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d10b      	bne.n	8006b06 <dnsDeleteEntry+0x2e>
      {
         //Name resolution in progress?
         if(entry->state == DNS_STATE_IN_PROGRESS)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d107      	bne.n	8006b06 <dnsDeleteEntry+0x2e>
         {
            //Unregister user callback
            udpDetachRxCallback(entry->interface, entry->port);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	899b      	ldrh	r3, [r3, #12]
 8006afe:	4619      	mov	r1, r3
 8006b00:	4610      	mov	r0, r2
 8006b02:	f7ff fedb 	bl	80068bc <udpDetachRxCallback>
         }
      }
#endif
      //Delete DNS cache entry
      entry->state = DNS_STATE_NONE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
   }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <dnsFindEntry>:
 *   if the specified domain name could not be found in the DNS cache
 **/

DnsCacheEntry *dnsFindEntry(NetInterface *interface,
   const char_t *name, HostType type, HostnameResolver protocol)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	461a      	mov	r2, r3
 8006b22:	460b      	mov	r3, r1
 8006b24:	71fb      	strb	r3, [r7, #7]
 8006b26:	4613      	mov	r3, r2
 8006b28:	71bb      	strb	r3, [r7, #6]
   uint_t i;
   DnsCacheEntry *entry;

   //Loop through DNS cache entries
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e037      	b.n	8006ba0 <dnsFindEntry+0x8c>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2268      	movs	r2, #104	; 0x68
 8006b34:	fb02 f303 	mul.w	r3, r2, r3
 8006b38:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <dnsFindEntry+0x9c>)
 8006b3a:	4413      	add	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]

      //Make sure that the entry is currently in used
      if(entry->state == DNS_STATE_NONE)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d022      	beq.n	8006b8c <dnsFindEntry+0x78>
         continue;

      //Filter out entries that do not match the specified criteria
      if(entry->interface != interface)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d11f      	bne.n	8006b90 <dnsFindEntry+0x7c>
         continue;
      if(entry->type != type && type != HOST_TYPE_ANY)
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	79fa      	ldrb	r2, [r7, #7]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d002      	beq.n	8006b60 <dnsFindEntry+0x4c>
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d119      	bne.n	8006b94 <dnsFindEntry+0x80>
         continue;
      if(entry->protocol != protocol && protocol != HOST_NAME_RESOLVER_ANY)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	789b      	ldrb	r3, [r3, #2]
 8006b64:	79ba      	ldrb	r2, [r7, #6]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d002      	beq.n	8006b70 <dnsFindEntry+0x5c>
 8006b6a:	79bb      	ldrb	r3, [r7, #6]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d113      	bne.n	8006b98 <dnsFindEntry+0x84>
         continue;

      //Does the entry match the specified domain name?
      if(name == NULL || !strcasecmp(entry->name, name))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d008      	beq.n	8006b88 <dnsFindEntry+0x74>
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	3310      	adds	r3, #16
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f013 fe15 	bl	801a7ac <strcasecmp>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d108      	bne.n	8006b9a <dnsFindEntry+0x86>
         return entry;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	e00d      	b.n	8006ba8 <dnsFindEntry+0x94>
         continue;
 8006b8c:	bf00      	nop
 8006b8e:	e004      	b.n	8006b9a <dnsFindEntry+0x86>
         continue;
 8006b90:	bf00      	nop
 8006b92:	e002      	b.n	8006b9a <dnsFindEntry+0x86>
         continue;
 8006b94:	bf00      	nop
 8006b96:	e000      	b.n	8006b9a <dnsFindEntry+0x86>
         continue;
 8006b98:	bf00      	nop
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b07      	cmp	r3, #7
 8006ba4:	d9c4      	bls.n	8006b30 <dnsFindEntry+0x1c>
   }

   //No matching entry in the DNS cache...
   return NULL;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	2000feec 	.word	0x2000feec

08006bb4 <dnsTick>:
 * manage DNS cache
 *
 **/

void dnsTick(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
   uint_t i;
   systime_t time;
   DnsCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 8006bba:	f7f9 fe09 	bl	80007d0 <osGetSystemTime>
 8006bbe:	6078      	str	r0, [r7, #4]

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60bb      	str	r3, [r7, #8]
 8006bc4:	e079      	b.n	8006cba <dnsTick+0x106>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2268      	movs	r2, #104	; 0x68
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	4a3e      	ldr	r2, [pc, #248]	; (8006cc8 <dnsTick+0x114>)
 8006bd0:	4413      	add	r3, r2
 8006bd2:	603b      	str	r3, [r7, #0]

      //Name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d15b      	bne.n	8006c94 <dnsTick+0xe0>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be4:	4413      	add	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	db62      	blt.n	8006cb4 <dnsTick+0x100>
         {
            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount > 0)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d025      	beq.n	8006c42 <dnsTick+0x8e>
            {
#if (DNS_CLIENT_SUPPORT == ENABLED)
               //DNS resolver?
               if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	789b      	ldrb	r3, [r3, #2]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d105      	bne.n	8006c0a <dnsTick+0x56>
               {
                  //Retransmit DNS query
                  error = dnsSendQuery(entry);
 8006bfe:	6838      	ldr	r0, [r7, #0]
 8006c00:	f000 f95a 	bl	8006eb8 <dnsSendQuery>
 8006c04:	4603      	mov	r3, r0
 8006c06:	81fb      	strh	r3, [r7, #14]
 8006c08:	e001      	b.n	8006c0e <dnsTick+0x5a>
               }
               else
#endif
               //Unknown protocol?
               {
                  error = ERROR_FAILURE;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	81fb      	strh	r3, [r7, #14]
               }

               //Query message successfully sent?
               if(!error)
 8006c0e:	89fb      	ldrh	r3, [r7, #14]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d112      	bne.n	8006c3a <dnsTick+0x86>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	659a      	str	r2, [r3, #88]	; 0x58
                  //The timeout value is doubled for each subsequent retransmission
                  entry->timeout = MIN(entry->timeout * 2, entry->maxTimeout);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	429a      	cmp	r2, r3
 8006c26:	bf28      	it	cs
 8006c28:	461a      	movcs	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c32:	1e5a      	subs	r2, r3, #1
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	665a      	str	r2, [r3, #100]	; 0x64
 8006c38:	e03c      	b.n	8006cb4 <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 8006c3a:	6838      	ldr	r0, [r7, #0]
 8006c3c:	f7ff ff4c 	bl	8006ad8 <dnsDeleteEntry>
 8006c40:	e038      	b.n	8006cb4 <dnsTick+0x100>
               }
            }
#if (DNS_CLIENT_SUPPORT == ENABLED)
            //DNS resolver?
            else if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	789b      	ldrb	r3, [r3, #2]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d120      	bne.n	8006c8c <dnsTick+0xd8>
            {
               //Select the next DNS server
               entry->dnsServerNum++;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	609a      	str	r2, [r3, #8]
               //Initialize retransmission counter
               entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2203      	movs	r2, #3
 8006c58:	665a      	str	r2, [r3, #100]	; 0x64
               //Send DNS query
               error = dnsSendQuery(entry);
 8006c5a:	6838      	ldr	r0, [r7, #0]
 8006c5c:	f000 f92c 	bl	8006eb8 <dnsSendQuery>
 8006c60:	4603      	mov	r3, r0
 8006c62:	81fb      	strh	r3, [r7, #14]

               //DNS message successfully sent?
               if(!error)
 8006c64:	89fb      	ldrh	r3, [r7, #14]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10c      	bne.n	8006c84 <dnsTick+0xd0>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	659a      	str	r2, [r3, #88]	; 0x58
                  //Set timeout value
                  entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c76:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c7c:	1e5a      	subs	r2, r3, #1
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	665a      	str	r2, [r3, #100]	; 0x64
 8006c82:	e017      	b.n	8006cb4 <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 8006c84:	6838      	ldr	r0, [r7, #0]
 8006c86:	f7ff ff27 	bl	8006ad8 <dnsDeleteEntry>
 8006c8a:	e013      	b.n	8006cb4 <dnsTick+0x100>
            }
#endif
            else
            {
               //The maximum number of retransmissions has been exceeded
               dnsDeleteEntry(entry);
 8006c8c:	6838      	ldr	r0, [r7, #0]
 8006c8e:	f7ff ff23 	bl	8006ad8 <dnsDeleteEntry>
 8006c92:	e00f      	b.n	8006cb4 <dnsTick+0x100>
            }
         }
      }
      //Name successfully resolved?
      else if(entry->state == DNS_STATE_RESOLVED)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d10b      	bne.n	8006cb4 <dnsTick+0x100>
      {
         //Check the lifetime of the current DNS cache entry
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	4413      	add	r3, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	db02      	blt.n	8006cb4 <dnsTick+0x100>
         {
            //Periodically time out DNS cache entries
            dnsDeleteEntry(entry);
 8006cae:	6838      	ldr	r0, [r7, #0]
 8006cb0:	f7ff ff12 	bl	8006ad8 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b07      	cmp	r3, #7
 8006cbe:	d982      	bls.n	8006bc6 <dnsTick+0x12>
         }
      }
   }
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	2000feec 	.word	0x2000feec

08006ccc <dnsResolve>:
 * @param[out] ipAddr IP address corresponding to the specified host name
 **/

error_t dnsResolve(NetInterface *interface, const char_t *name,
   HostType type, IpAddr *ipAddr)
{
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b089      	sub	sp, #36	; 0x24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	71fb      	strb	r3, [r7, #7]

#if (NET_RTOS_SUPPORT == ENABLED)
   systime_t delay;

   //Debug message
   TRACE_INFO("Resolving host name %s (DNS resolver)...\r\n", name);
 8006cdc:	f7f9 fcb0 	bl	8000640 <osSuspendAllTasks>
 8006ce0:	4b6f      	ldr	r3, [pc, #444]	; (8006ea0 <dnsResolve+0x1d4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	496e      	ldr	r1, [pc, #440]	; (8006ea4 <dnsResolve+0x1d8>)
 8006cea:	4618      	mov	r0, r3
 8006cec:	f013 f8d0 	bl	8019e90 <fiprintf>
 8006cf0:	f7f9 fcb1 	bl	8000656 <osResumeAllTasks>
#endif

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8006cf4:	486c      	ldr	r0, [pc, #432]	; (8006ea8 <dnsResolve+0x1dc>)
 8006cf6:	f7f9 fd4f 	bl	8000798 <osAcquireMutex>

   //Search the DNS cache for the specified host name
   entry = dnsFindEntry(interface, name, type, HOST_NAME_RESOLVER_DNS);
 8006cfa:	79fa      	ldrb	r2, [r7, #7]
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f7ff ff07 	bl	8006b14 <dnsFindEntry>
 8006d06:	6178      	str	r0, [r7, #20]

   //Check whether a matching entry has been found
   if(entry)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d015      	beq.n	8006d3a <dnsResolve+0x6e>
   {
      //Host name already resolved?
      if(entry->state == DNS_STATE_RESOLVED ||
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d003      	beq.n	8006d1e <dnsResolve+0x52>
         entry->state == DNS_STATE_PERMANENT)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	781b      	ldrb	r3, [r3, #0]
      if(entry->state == DNS_STATE_RESOLVED ||
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d109      	bne.n	8006d32 <dnsResolve+0x66>
      {
         //Return the corresponding IP address
         *ipAddr = entry->ipAddr;
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	3350      	adds	r3, #80	; 0x50
 8006d24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d28:	e882 0003 	stmia.w	r2, {r0, r1}
         //Successful host name resolution
         error = NO_ERROR;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	83fb      	strh	r3, [r7, #30]
 8006d30:	e05a      	b.n	8006de8 <dnsResolve+0x11c>
      }
      else
      {
         //Host name resolution is in progress...
         error = ERROR_IN_PROGRESS;
 8006d32:	f240 2303 	movw	r3, #515	; 0x203
 8006d36:	83fb      	strh	r3, [r7, #30]
 8006d38:	e056      	b.n	8006de8 <dnsResolve+0x11c>
      }
   }
   else
   {
      //If no entry exists, then create a new one
      entry = dnsCreateEntry();
 8006d3a:	f7ff fe8f 	bl	8006a5c <dnsCreateEntry>
 8006d3e:	6178      	str	r0, [r7, #20]

      //Record the host name whose IP address is unknown
      strcpy(entry->name, name);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	3310      	adds	r3, #16
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f013 fd5b 	bl	801a802 <strcpy>

      //Initialize DNS cache entry
      entry->type = type;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	79fa      	ldrb	r2, [r7, #7]
 8006d50:	705a      	strb	r2, [r3, #1]
      entry->protocol = HOST_NAME_RESOLVER_DNS;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2201      	movs	r2, #1
 8006d56:	709a      	strb	r2, [r3, #2]
      entry->interface = interface;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	605a      	str	r2, [r3, #4]
      //Select primary DNS server
      entry->dnsServerNum = 0;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2200      	movs	r2, #0
 8006d62:	609a      	str	r2, [r3, #8]

      //Get an ephemeral port number
      entry->port = udpGetDynamicPort();
 8006d64:	f7ff faf2 	bl	800634c <udpGetDynamicPort>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	819a      	strh	r2, [r3, #12]

      //An identifier is used by the DNS client to match replies
      //with corresponding requests
      entry->id = (uint16_t) netGetRand();
 8006d70:	f7fb fa12 	bl	8002198 <netGetRand>
 8006d74:	4603      	mov	r3, r0
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	81da      	strh	r2, [r3, #14]

      //Callback function to be called when a DNS response is received
      error = udpAttachRxCallback(interface, entry->port, dnsProcessResponse,
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	8999      	ldrh	r1, [r3, #12]
 8006d80:	2300      	movs	r3, #0
 8006d82:	4a4a      	ldr	r2, [pc, #296]	; (8006eac <dnsResolve+0x1e0>)
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff fd5d 	bl	8006844 <udpAttachRxCallback>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	83fb      	strh	r3, [r7, #30]
         NULL);

      //Check status code
      if(!error)
 8006d8e:	8bfb      	ldrh	r3, [r7, #30]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d129      	bne.n	8006de8 <dnsResolve+0x11c>
      {
         //Initialize retransmission counter
         entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2203      	movs	r2, #3
 8006d98:	665a      	str	r2, [r3, #100]	; 0x64
         //Send DNS query
         error = dnsSendQuery(entry);
 8006d9a:	6978      	ldr	r0, [r7, #20]
 8006d9c:	f000 f88c 	bl	8006eb8 <dnsSendQuery>
 8006da0:	4603      	mov	r3, r0
 8006da2:	83fb      	strh	r3, [r7, #30]

         //DNS message successfully sent?
         if(!error)
 8006da4:	8bfb      	ldrh	r3, [r7, #30]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d118      	bne.n	8006ddc <dnsResolve+0x110>
         {
            //Save the time at which the query message was sent
            entry->timestamp = osGetSystemTime();
 8006daa:	f7f9 fd11 	bl	80007d0 <osGetSystemTime>
 8006dae:	4602      	mov	r2, r0
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	659a      	str	r2, [r3, #88]	; 0x58
            //Set timeout value
            entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006dba:	65da      	str	r2, [r3, #92]	; 0x5c
            entry->maxTimeout = DNS_CLIENT_MAX_TIMEOUT;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc2:	661a      	str	r2, [r3, #96]	; 0x60
            //Decrement retransmission counter
            entry->retransmitCount--;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc8:	1e5a      	subs	r2, r3, #1
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	665a      	str	r2, [r3, #100]	; 0x64

            //Switch state
            entry->state = DNS_STATE_IN_PROGRESS;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	701a      	strb	r2, [r3, #0]
            //Host name resolution is in progress
            error = ERROR_IN_PROGRESS;
 8006dd4:	f240 2303 	movw	r3, #515	; 0x203
 8006dd8:	83fb      	strh	r3, [r7, #30]
 8006dda:	e005      	b.n	8006de8 <dnsResolve+0x11c>
         }
         else
         {
            //Unregister callback function
            udpDetachRxCallback(interface, entry->port);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	899b      	ldrh	r3, [r3, #12]
 8006de0:	4619      	mov	r1, r3
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff fd6a 	bl	80068bc <udpDetachRxCallback>
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8006de8:	482f      	ldr	r0, [pc, #188]	; (8006ea8 <dnsResolve+0x1dc>)
 8006dea:	f7f9 fce4 	bl	80007b6 <osReleaseMutex>

#if (NET_RTOS_SUPPORT == ENABLED)
   //Set default polling interval
   delay = DNS_CACHE_INIT_POLLING_INTERVAL;
 8006dee:	230a      	movs	r3, #10
 8006df0:	61bb      	str	r3, [r7, #24]

   //Wait the host name resolution to complete
   while(error == ERROR_IN_PROGRESS)
 8006df2:	e02a      	b.n	8006e4a <dnsResolve+0x17e>
   {
      //Wait until the next polling period
      osDelayTask(delay);
 8006df4:	69b8      	ldr	r0, [r7, #24]
 8006df6:	f7f9 fc18 	bl	800062a <osDelayTask>

      //Get exclusive access
      osAcquireMutex(&netMutex);
 8006dfa:	482b      	ldr	r0, [pc, #172]	; (8006ea8 <dnsResolve+0x1dc>)
 8006dfc:	f7f9 fccc 	bl	8000798 <osAcquireMutex>

      //Search the DNS cache for the specified host name
      entry = dnsFindEntry(interface, name, type, HOST_NAME_RESOLVER_DNS);
 8006e00:	79fa      	ldrb	r2, [r7, #7]
 8006e02:	2301      	movs	r3, #1
 8006e04:	68b9      	ldr	r1, [r7, #8]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff fe84 	bl	8006b14 <dnsFindEntry>
 8006e0c:	6178      	str	r0, [r7, #20]

      //Check whether a matching entry has been found
      if(entry)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00d      	beq.n	8006e30 <dnsResolve+0x164>
      {
         //Host name successfully resolved?
         if(entry->state == DNS_STATE_RESOLVED)
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d10b      	bne.n	8006e34 <dnsResolve+0x168>
         {
            //Return the corresponding IP address
            *ipAddr = entry->ipAddr;
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	3350      	adds	r3, #80	; 0x50
 8006e22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006e26:	e882 0003 	stmia.w	r2, {r0, r1}
            //Successful host name resolution
            error = NO_ERROR;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	83fb      	strh	r3, [r7, #30]
 8006e2e:	e001      	b.n	8006e34 <dnsResolve+0x168>
         }
      }
      else
      {
         //Host name resolution failed
         error = ERROR_FAILURE;
 8006e30:	2301      	movs	r3, #1
 8006e32:	83fb      	strh	r3, [r7, #30]
      }

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8006e34:	481c      	ldr	r0, [pc, #112]	; (8006ea8 <dnsResolve+0x1dc>)
 8006e36:	f7f9 fcbe 	bl	80007b6 <osReleaseMutex>

      //Backoff support for less aggressive polling
      delay = MIN(delay * 2, DNS_CACHE_MAX_POLLING_INTERVAL);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e42:	bf28      	it	cs
 8006e44:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 8006e48:	61bb      	str	r3, [r7, #24]
   while(error == ERROR_IN_PROGRESS)
 8006e4a:	8bfb      	ldrh	r3, [r7, #30]
 8006e4c:	f240 2203 	movw	r2, #515	; 0x203
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d0cf      	beq.n	8006df4 <dnsResolve+0x128>
   }

   //Check status code
   if(error)
 8006e54:	8bfb      	ldrh	r3, [r7, #30]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00c      	beq.n	8006e74 <dnsResolve+0x1a8>
   {
      //Failed to resolve host name
      TRACE_INFO("Host name resolution failed!\r\n");
 8006e5a:	f7f9 fbf1 	bl	8000640 <osSuspendAllTasks>
 8006e5e:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <dnsResolve+0x1d4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	221e      	movs	r2, #30
 8006e66:	2101      	movs	r1, #1
 8006e68:	4811      	ldr	r0, [pc, #68]	; (8006eb0 <dnsResolve+0x1e4>)
 8006e6a:	f013 f871 	bl	8019f50 <fwrite>
 8006e6e:	f7f9 fbf2 	bl	8000656 <osResumeAllTasks>
 8006e72:	e010      	b.n	8006e96 <dnsResolve+0x1ca>
   }
   else
   {
      //Successful host name resolution
      TRACE_INFO("Host name resolved to %s...\r\n", ipAddrToString(ipAddr, NULL));
 8006e74:	f7f9 fbe4 	bl	8000640 <osSuspendAllTasks>
 8006e78:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <dnsResolve+0x1d4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68dc      	ldr	r4, [r3, #12]
 8006e7e:	2100      	movs	r1, #0
 8006e80:	6838      	ldr	r0, [r7, #0]
 8006e82:	f7fa fda3 	bl	80019cc <ipAddrToString>
 8006e86:	4603      	mov	r3, r0
 8006e88:	461a      	mov	r2, r3
 8006e8a:	490a      	ldr	r1, [pc, #40]	; (8006eb4 <dnsResolve+0x1e8>)
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f012 ffff 	bl	8019e90 <fiprintf>
 8006e92:	f7f9 fbe0 	bl	8000656 <osResumeAllTasks>
   }
#endif

   //Return status code
   return error;
 8006e96:	8bfb      	ldrh	r3, [r7, #30]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3724      	adds	r7, #36	; 0x24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd90      	pop	{r4, r7, pc}
 8006ea0:	20000058 	.word	0x20000058
 8006ea4:	0801b370 	.word	0x0801b370
 8006ea8:	2000e460 	.word	0x2000e460
 8006eac:	08007071 	.word	0x08007071
 8006eb0:	0801b39c 	.word	0x0801b39c
 8006eb4:	0801b3bc 	.word	0x0801b3bc

08006eb8 <dnsSendQuery>:
 * @param[in] entry Pointer to a valid DNS cache entry
 * @return Error code
 **/

error_t dnsSendQuery(DnsCacheEntry *entry)
{
 8006eb8:	b590      	push	{r4, r7, lr}
 8006eba:	b091      	sub	sp, #68	; 0x44
 8006ebc:	af04      	add	r7, sp, #16
 8006ebe:	6078      	str	r0, [r7, #4]
   DnsQuestion *dnsQuestion;
   IpAddr destIpAddr;

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b10      	cmp	r3, #16
 8006ec6:	d11a      	bne.n	8006efe <dnsSendQuery+0x46>
   {
      //Point to the IPv4 context
      Ipv4Context *ipv4Context = &entry->interface->ipv4Context;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	338c      	adds	r3, #140	; 0x8c
 8006ece:	62fb      	str	r3, [r7, #44]	; 0x2c

      //Out of range index?
      if(entry->dnsServerNum >= IPV4_DNS_SERVER_LIST_SIZE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d902      	bls.n	8006ede <dnsSendQuery+0x26>
         return ERROR_NO_DNS_SERVER;
 8006ed8:	f240 2323 	movw	r3, #547	; 0x223
 8006edc:	e0bf      	b.n	800705e <dnsSendQuery+0x1a6>

      //Select the relevant DNS server
      destIpAddr.length = sizeof(Ipv4Addr);
 8006ede:	2304      	movs	r3, #4
 8006ee0:	60fb      	str	r3, [r7, #12]
      destIpAddr.ipv4Addr = ipv4Context->dnsServerList[entry->dnsServerNum];
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee8:	3308      	adds	r3, #8
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	613b      	str	r3, [r7, #16]

      //Make sure the IP address is valid
      if(destIpAddr.ipv4Addr == IPV4_UNSPECIFIED_ADDR)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <dnsSendQuery+0x4a>
         return ERROR_NO_DNS_SERVER;
 8006ef8:	f240 2323 	movw	r3, #547	; 0x223
 8006efc:	e0af      	b.n	800705e <dnsSendQuery+0x1a6>
   else
#endif
   //Invalid host type?
   {
      //Report an error
      return ERROR_INVALID_PARAMETER;
 8006efe:	2302      	movs	r3, #2
 8006f00:	e0ad      	b.n	800705e <dnsSendQuery+0x1a6>
   }

   //Allocate a memory buffer to hold the DNS query message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 8006f02:	f107 0314 	add.w	r3, r7, #20
 8006f06:	4619      	mov	r1, r3
 8006f08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006f0c:	f7ff fc39 	bl	8006782 <udpAllocBuffer>
 8006f10:	62b8      	str	r0, [r7, #40]	; 0x28
   //Failed to allocate buffer?
   if(buffer == NULL)
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <dnsSendQuery+0x64>
      return ERROR_OUT_OF_MEMORY;
 8006f18:	2364      	movs	r3, #100	; 0x64
 8006f1a:	e0a0      	b.n	800705e <dnsSendQuery+0x1a6>

   //Point to the DNS header
   message = netBufferAt(buffer, offset);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f22:	f7fb fb81 	bl	8002628 <netBufferAt>
 8006f26:	6278      	str	r0, [r7, #36]	; 0x24

   //Format DNS query message
   message->id = htons(entry->id);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	89db      	ldrh	r3, [r3, #14]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7f9 fb37 	bl	80005a0 <swapInt16>
 8006f32:	4603      	mov	r3, r0
 8006f34:	461a      	mov	r2, r3
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	801a      	strh	r2, [r3, #0]
   message->qr = 0;
 8006f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3c:	7893      	ldrb	r3, [r2, #2]
 8006f3e:	f36f 13c7 	bfc	r3, #7, #1
 8006f42:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 8006f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f46:	7893      	ldrb	r3, [r2, #2]
 8006f48:	f36f 03c6 	bfc	r3, #3, #4
 8006f4c:	7093      	strb	r3, [r2, #2]
   message->aa = 0;
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f50:	7893      	ldrb	r3, [r2, #2]
 8006f52:	f36f 0382 	bfc	r3, #2, #1
 8006f56:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 8006f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5a:	7893      	ldrb	r3, [r2, #2]
 8006f5c:	f36f 0341 	bfc	r3, #1, #1
 8006f60:	7093      	strb	r3, [r2, #2]
   message->rd = 1;
 8006f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f64:	7893      	ldrb	r3, [r2, #2]
 8006f66:	f043 0301 	orr.w	r3, r3, #1
 8006f6a:	7093      	strb	r3, [r2, #2]
   message->ra = 0;
 8006f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f6e:	78d3      	ldrb	r3, [r2, #3]
 8006f70:	f36f 13c7 	bfc	r3, #7, #1
 8006f74:	70d3      	strb	r3, [r2, #3]
   message->z = 0;
 8006f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f78:	78d3      	ldrb	r3, [r2, #3]
 8006f7a:	f36f 1306 	bfc	r3, #4, #3
 8006f7e:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 8006f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f82:	78d3      	ldrb	r3, [r2, #3]
 8006f84:	f36f 0303 	bfc	r3, #0, #4
 8006f88:	70d3      	strb	r3, [r2, #3]

   //The DNS query contains one question
   message->qdcount = HTONS(1);
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	711a      	strb	r2, [r3, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	719a      	strb	r2, [r3, #6]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	721a      	strb	r2, [r3, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	2200      	movs	r2, #0
 8006fb0:	729a      	strb	r2, [r3, #10]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	72da      	strb	r2, [r3, #11]

   //Length of the DNS query message
   length = sizeof(DnsHeader);
 8006fb6:	230c      	movs	r3, #12
 8006fb8:	623b      	str	r3, [r7, #32]

   //Encode the host name using the DNS name notation
   length += dnsEncodeName(entry->name, message->questions);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f103 0210 	add.w	r2, r3, #16
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	330c      	adds	r3, #12
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f000 f9d8 	bl	800737c <dnsEncodeName>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	623b      	str	r3, [r7, #32]

   //Point to the corresponding question structure
   dnsQuestion = DNS_GET_QUESTION(message, length);
 8006fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	4413      	add	r3, r2
 8006fda:	61fb      	str	r3, [r7, #28]

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	785b      	ldrb	r3, [r3, #1]
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d10d      	bne.n	8007000 <dnsSendQuery+0x148>
   {
      //Fill in question structure
      dnsQuestion->qtype = HTONS(DNS_RR_TYPE_A);
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f042 0201 	orr.w	r2, r2, #1
 8006ff0:	705a      	strb	r2, [r3, #1]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	709a      	strb	r2, [r3, #2]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	70da      	strb	r2, [r3, #3]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
   }
#endif

   //Update the length of the DNS query message
   length += sizeof(DnsQuestion);
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	3304      	adds	r3, #4
 8007004:	623b      	str	r3, [r7, #32]

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	4413      	add	r3, r2
 800700c:	4619      	mov	r1, r3
 800700e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007010:	f7fb fa64 	bl	80024dc <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending DNS message (%" PRIuSIZE " bytes)...\r\n", length);
 8007014:	f7f9 fb14 	bl	8000640 <osSuspendAllTasks>
 8007018:	4b13      	ldr	r3, [pc, #76]	; (8007068 <dnsSendQuery+0x1b0>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	6a3a      	ldr	r2, [r7, #32]
 8007020:	4912      	ldr	r1, [pc, #72]	; (800706c <dnsSendQuery+0x1b4>)
 8007022:	4618      	mov	r0, r3
 8007024:	f012 ff34 	bl	8019e90 <fiprintf>
 8007028:	f7f9 fb15 	bl	8000656 <osResumeAllTasks>
   //Dump message
   dnsDumpMessage(message, length);

   //Send DNS query message
   error = udpSendDatagramEx(entry->interface, NULL, entry->port,
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6858      	ldr	r0, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	8999      	ldrh	r1, [r3, #12]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f107 040c 	add.w	r4, r7, #12
 800703a:	2200      	movs	r2, #0
 800703c:	9203      	str	r2, [sp, #12]
 800703e:	9302      	str	r3, [sp, #8]
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	2335      	movs	r3, #53	; 0x35
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	4623      	mov	r3, r4
 800704a:	460a      	mov	r2, r1
 800704c:	2100      	movs	r1, #0
 800704e:	f7ff faef 	bl	8006630 <udpSendDatagramEx>
 8007052:	4603      	mov	r3, r0
 8007054:	837b      	strh	r3, [r7, #26]
      &destIpAddr, DNS_PORT, buffer, offset, 0);

   //Free previously allocated memory
   netBufferFree(buffer);
 8007056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007058:	f7fb fa0f 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800705c:	8b7b      	ldrh	r3, [r7, #26]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3734      	adds	r7, #52	; 0x34
 8007062:	46bd      	mov	sp, r7
 8007064:	bd90      	pop	{r4, r7, pc}
 8007066:	bf00      	nop
 8007068:	20000058 	.word	0x20000058
 800706c:	0801b3dc 	.word	0x0801b3dc

08007070 <dnsProcessResponse>:
 * @param[in] param Callback function parameter (not used)
 **/

void dnsProcessResponse(NetInterface *interface, const IpPseudoHeader *pseudoHeader,
   const UdpHeader *udpHeader, const NetBuffer *buffer, size_t offset, void *param)
{
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b08f      	sub	sp, #60	; 0x3c
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
   DnsQuestion *question;
   DnsResourceRecord *record;
   DnsCacheEntry *entry;

   //Retrieve the length of the DNS message
   length = netBufferGetLength(buffer) - offset;
 800707e:	6838      	ldr	r0, [r7, #0]
 8007080:	f7fb fa0a 	bl	8002498 <netBufferGetLength>
 8007084:	4602      	mov	r2, r0
 8007086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	623b      	str	r3, [r7, #32]

   //Ensure the DNS message is valid
   if(length < sizeof(DnsHeader))
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	2b0b      	cmp	r3, #11
 8007090:	f240 8150 	bls.w	8007334 <dnsProcessResponse+0x2c4>
      return;
   if(length > DNS_MESSAGE_MAX_SIZE)
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800709a:	f200 814d 	bhi.w	8007338 <dnsProcessResponse+0x2c8>
      return;

   //Point to the DNS message header
   message = netBufferAt(buffer, offset);
 800709e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070a0:	6838      	ldr	r0, [r7, #0]
 80070a2:	f7fb fac1 	bl	8002628 <netBufferAt>
 80070a6:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(message == NULL)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 8146 	beq.w	800733c <dnsProcessResponse+0x2cc>
      return;

   //Debug message
   TRACE_INFO("DNS message received (%" PRIuSIZE " bytes)...\r\n", length);
 80070b0:	f7f9 fac6 	bl	8000640 <osSuspendAllTasks>
 80070b4:	4bac      	ldr	r3, [pc, #688]	; (8007368 <dnsProcessResponse+0x2f8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	6a3a      	ldr	r2, [r7, #32]
 80070bc:	49ab      	ldr	r1, [pc, #684]	; (800736c <dnsProcessResponse+0x2fc>)
 80070be:	4618      	mov	r0, r3
 80070c0:	f012 fee6 	bl	8019e90 <fiprintf>
 80070c4:	f7f9 fac7 	bl	8000656 <osResumeAllTasks>
   //Dump message
   dnsDumpMessage(message, length);

   //Check message type
   if(!message->qr)
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	789b      	ldrb	r3, [r3, #2]
 80070cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8134 	beq.w	8007340 <dnsProcessResponse+0x2d0>
      return;

   //The DNS message shall contain one question
   if(ntohs(message->qdcount) != 1)
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	889b      	ldrh	r3, [r3, #4]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	4618      	mov	r0, r3
 80070e0:	f7f9 fa5e 	bl	80005a0 <swapInt16>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	f040 812c 	bne.w	8007344 <dnsProcessResponse+0x2d4>
      return;

   //Loop through DNS cache entries
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 80070ec:	2300      	movs	r3, #0
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f0:	e11b      	b.n	800732a <dnsProcessResponse+0x2ba>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	2268      	movs	r2, #104	; 0x68
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	4a9d      	ldr	r2, [pc, #628]	; (8007370 <dnsProcessResponse+0x300>)
 80070fc:	4413      	add	r3, r2
 80070fe:	61bb      	str	r3, [r7, #24]

      //DNS name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS &&
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	f040 810d 	bne.w	8007324 <dnsProcessResponse+0x2b4>
         entry->protocol == HOST_NAME_RESOLVER_DNS)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	789b      	ldrb	r3, [r3, #2]
      if(entry->state == DNS_STATE_IN_PROGRESS &&
 800710e:	2b01      	cmp	r3, #1
 8007110:	f040 8108 	bne.w	8007324 <dnsProcessResponse+0x2b4>
      {
         //Check destination port number
         if(entry->port == ntohs(udpHeader->destPort))
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	899c      	ldrh	r4, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	885b      	ldrh	r3, [r3, #2]
 800711c:	b29b      	uxth	r3, r3
 800711e:	4618      	mov	r0, r3
 8007120:	f7f9 fa3e 	bl	80005a0 <swapInt16>
 8007124:	4603      	mov	r3, r0
 8007126:	429c      	cmp	r4, r3
 8007128:	f040 80fc 	bne.w	8007324 <dnsProcessResponse+0x2b4>
         {
            //Compare identifier against the expected one
            if(ntohs(message->id) != entry->id)
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	4618      	mov	r0, r3
 8007134:	f7f9 fa34 	bl	80005a0 <swapInt16>
 8007138:	4603      	mov	r3, r0
 800713a:	461a      	mov	r2, r3
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	89db      	ldrh	r3, [r3, #14]
 8007140:	429a      	cmp	r2, r3
 8007142:	f040 8101 	bne.w	8007348 <dnsProcessResponse+0x2d8>
               break;

            //Point to the first question
            pos = sizeof(DnsHeader);
 8007146:	230c      	movs	r3, #12
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
            //Parse domain name
            pos = dnsParseName(message, length, pos, NULL, 0);
 800714a:	2300      	movs	r3, #0
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	2300      	movs	r3, #0
 8007150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007152:	6a39      	ldr	r1, [r7, #32]
 8007154:	69f8      	ldr	r0, [r7, #28]
 8007156:	f000 f97c 	bl	8007452 <dnsParseName>
 800715a:	6278      	str	r0, [r7, #36]	; 0x24

            //Invalid name?
            if(!pos)
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80f4 	beq.w	800734c <dnsProcessResponse+0x2dc>
               break;
            //Malformed DNS message?
            if((pos + sizeof(DnsQuestion)) > length)
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	3304      	adds	r3, #4
 8007168:	6a3a      	ldr	r2, [r7, #32]
 800716a:	429a      	cmp	r2, r3
 800716c:	f0c0 80f0 	bcc.w	8007350 <dnsProcessResponse+0x2e0>
               break;

            //Compare domain name
            if(dnsCompareName(message, length, sizeof(DnsHeader), entry->name, 0))
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	f103 0210 	add.w	r2, r3, #16
 8007176:	2300      	movs	r3, #0
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	4613      	mov	r3, r2
 800717c:	220c      	movs	r2, #12
 800717e:	6a39      	ldr	r1, [r7, #32]
 8007180:	69f8      	ldr	r0, [r7, #28]
 8007182:	f000 fa04 	bl	800758e <dnsCompareName>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	f040 80e3 	bne.w	8007354 <dnsProcessResponse+0x2e4>
               break;

            //Point to the corresponding entry
            question = DNS_GET_QUESTION(message, pos);
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	4413      	add	r3, r2
 8007194:	617b      	str	r3, [r7, #20]

            //Check the class of the query
            if(ntohs(question->qclass) != DNS_RR_CLASS_IN)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	885b      	ldrh	r3, [r3, #2]
 800719a:	b29b      	uxth	r3, r3
 800719c:	4618      	mov	r0, r3
 800719e:	f7f9 f9ff 	bl	80005a0 <swapInt16>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	f040 80d7 	bne.w	8007358 <dnsProcessResponse+0x2e8>
               break;

            //Check the type of the query
            if(entry->type == HOST_TYPE_IPV4 && ntohs(question->qtype) != DNS_RR_TYPE_A)
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d109      	bne.n	80071c6 <dnsProcessResponse+0x156>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7f9 f9f1 	bl	80005a0 <swapInt16>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	f040 80cb 	bne.w	800735c <dnsProcessResponse+0x2ec>
               break;
            if(entry->type == HOST_TYPE_IPV6 && ntohs(question->qtype) != DNS_RR_TYPE_AAAA)
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d109      	bne.n	80071e2 <dnsProcessResponse+0x172>
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7f9 f9e3 	bl	80005a0 <swapInt16>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b1c      	cmp	r3, #28
 80071de:	f040 80bf 	bne.w	8007360 <dnsProcessResponse+0x2f0>
               break;

            //Check return code
            if(message->rcode != DNS_RCODE_NO_ERROR)
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	78db      	ldrb	r3, [r3, #3]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <dnsProcessResponse+0x188>
            {
               //The entry should be deleted since name resolution has failed
               dnsDeleteEntry(entry);
 80071f0:	69b8      	ldr	r0, [r7, #24]
 80071f2:	f7ff fc71 	bl	8006ad8 <dnsDeleteEntry>
               //Exit immediately
               break;
 80071f6:	e0b4      	b.n	8007362 <dnsProcessResponse+0x2f2>
            }

            //Point to the first answer
            pos += sizeof(DnsQuestion);
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	3304      	adds	r3, #4
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24

            //Parse answer resource records
            for(j = 0; j < ntohs(message->ancount); j++)
 80071fe:	2300      	movs	r3, #0
 8007200:	62bb      	str	r3, [r7, #40]	; 0x28
 8007202:	e07c      	b.n	80072fe <dnsProcessResponse+0x28e>
            {
               //Parse domain name
               pos = dnsParseName(message, length, pos, NULL, 0);
 8007204:	2300      	movs	r3, #0
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	2300      	movs	r3, #0
 800720a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720c:	6a39      	ldr	r1, [r7, #32]
 800720e:	69f8      	ldr	r0, [r7, #28]
 8007210:	f000 f91f 	bl	8007452 <dnsParseName>
 8007214:	6278      	str	r0, [r7, #36]	; 0x24
               //Invalid name?
               if(!pos)
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	d07d      	beq.n	8007318 <dnsProcessResponse+0x2a8>
                  break;

               //Point to the associated resource record
               record = DNS_GET_RESOURCE_RECORD(message, pos);
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	4413      	add	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
               //Point to the resource data
               pos += sizeof(DnsResourceRecord);
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	330a      	adds	r3, #10
 8007228:	627b      	str	r3, [r7, #36]	; 0x24

               //Make sure the resource record is valid
               if(pos > length)
 800722a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	429a      	cmp	r2, r3
 8007230:	d874      	bhi.n	800731c <dnsProcessResponse+0x2ac>
                  break;
               if((pos + ntohs(record->rdlength)) > length)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	891b      	ldrh	r3, [r3, #8]
 8007236:	b29b      	uxth	r3, r3
 8007238:	4618      	mov	r0, r3
 800723a:	f7f9 f9b1 	bl	80005a0 <swapInt16>
 800723e:	4603      	mov	r3, r0
 8007240:	461a      	mov	r2, r3
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	4413      	add	r3, r2
 8007246:	6a3a      	ldr	r2, [r7, #32]
 8007248:	429a      	cmp	r2, r3
 800724a:	d369      	bcc.n	8007320 <dnsProcessResponse+0x2b0>
                  break;

#if (IPV4_SUPPORT == ENABLED)
               //IPv4 address expected?
               if(entry->type == HOST_TYPE_IPV4)
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b10      	cmp	r3, #16
 8007252:	d146      	bne.n	80072e2 <dnsProcessResponse+0x272>
               {
                  //A resource record found?
                  if(ntohs(record->rtype) == DNS_RR_TYPE_A &&
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	4618      	mov	r0, r3
 800725c:	f7f9 f9a0 	bl	80005a0 <swapInt16>
 8007260:	4603      	mov	r3, r0
 8007262:	2b01      	cmp	r3, #1
 8007264:	d13d      	bne.n	80072e2 <dnsProcessResponse+0x272>
                     ntohs(record->rdlength) == sizeof(Ipv4Addr))
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	891b      	ldrh	r3, [r3, #8]
 800726a:	b29b      	uxth	r3, r3
 800726c:	4618      	mov	r0, r3
 800726e:	f7f9 f997 	bl	80005a0 <swapInt16>
 8007272:	4603      	mov	r3, r0
                  if(ntohs(record->rtype) == DNS_RR_TYPE_A &&
 8007274:	2b04      	cmp	r3, #4
 8007276:	d134      	bne.n	80072e2 <dnsProcessResponse+0x272>
                  {
                     //Copy the IPv4 address
                     entry->ipAddr.length = sizeof(Ipv4Addr);
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	2204      	movs	r2, #4
 800727c:	651a      	str	r2, [r3, #80]	; 0x50
                     ipv4CopyAddr(&entry->ipAddr.ipv4Addr, record->rdata);
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	3354      	adds	r3, #84	; 0x54
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	320a      	adds	r2, #10
 8007286:	6812      	ldr	r2, [r2, #0]
 8007288:	601a      	str	r2, [r3, #0]

                     //Save current time
                     entry->timestamp = osGetSystemTime();
 800728a:	f7f9 faa1 	bl	80007d0 <osGetSystemTime>
 800728e:	4602      	mov	r2, r0
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	659a      	str	r2, [r3, #88]	; 0x58
                     //Save TTL value
                     entry->timeout = ntohl(record->ttl) * 1000;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	f7f9 f98f 	bl	80005bc <swapInt32>
 800729e:	4602      	mov	r2, r0
 80072a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072a4:	fb03 f202 	mul.w	r2, r3, r2
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	65da      	str	r2, [r3, #92]	; 0x5c

                     //Limit the lifetime of the DNS cache entries
                     if(entry->timeout >= DNS_MAX_LIFETIME)
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b0:	4a30      	ldr	r2, [pc, #192]	; (8007374 <dnsProcessResponse+0x304>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d902      	bls.n	80072bc <dnsProcessResponse+0x24c>
                        entry->timeout = DNS_MAX_LIFETIME;
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <dnsProcessResponse+0x308>)
 80072ba:	65da      	str	r2, [r3, #92]	; 0x5c
                     if(entry->timeout <= DNS_MIN_LIFETIME)
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072c4:	d803      	bhi.n	80072ce <dnsProcessResponse+0x25e>
                        entry->timeout = DNS_MIN_LIFETIME;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072cc:	65da      	str	r2, [r3, #92]	; 0x5c

                     //Unregister UDP callback function
                     udpDetachRxCallback(interface, entry->port);
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	899b      	ldrh	r3, [r3, #12]
 80072d2:	4619      	mov	r1, r3
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff faf1 	bl	80068bc <udpDetachRxCallback>
                     //Host name successfully resolved
                     entry->state = DNS_STATE_RESOLVED;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2202      	movs	r2, #2
 80072de:	701a      	strb	r2, [r3, #0]
                     //Exit immediately
                     break;
 80072e0:	e01f      	b.n	8007322 <dnsProcessResponse+0x2b2>
                     break;
                  }
               }
#endif
               //Point to the next resource record
               pos += ntohs(record->rdlength);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	891b      	ldrh	r3, [r3, #8]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7f9 f959 	bl	80005a0 <swapInt16>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	4413      	add	r3, r2
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
            for(j = 0; j < ntohs(message->ancount); j++)
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	3301      	adds	r3, #1
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	88db      	ldrh	r3, [r3, #6]
 8007302:	b29b      	uxth	r3, r3
 8007304:	4618      	mov	r0, r3
 8007306:	f7f9 f94b 	bl	80005a0 <swapInt16>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	4293      	cmp	r3, r2
 8007312:	f4ff af77 	bcc.w	8007204 <dnsProcessResponse+0x194>
            }

            //We are done
            break;
 8007316:	e024      	b.n	8007362 <dnsProcessResponse+0x2f2>
                  break;
 8007318:	bf00      	nop
 800731a:	e022      	b.n	8007362 <dnsProcessResponse+0x2f2>
                  break;
 800731c:	bf00      	nop
 800731e:	e020      	b.n	8007362 <dnsProcessResponse+0x2f2>
                  break;
 8007320:	bf00      	nop
            break;
 8007322:	e01e      	b.n	8007362 <dnsProcessResponse+0x2f2>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	3301      	adds	r3, #1
 8007328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	2b07      	cmp	r3, #7
 800732e:	f67f aee0 	bls.w	80070f2 <dnsProcessResponse+0x82>
 8007332:	e016      	b.n	8007362 <dnsProcessResponse+0x2f2>
      return;
 8007334:	bf00      	nop
 8007336:	e014      	b.n	8007362 <dnsProcessResponse+0x2f2>
      return;
 8007338:	bf00      	nop
 800733a:	e012      	b.n	8007362 <dnsProcessResponse+0x2f2>
      return;
 800733c:	bf00      	nop
 800733e:	e010      	b.n	8007362 <dnsProcessResponse+0x2f2>
      return;
 8007340:	bf00      	nop
 8007342:	e00e      	b.n	8007362 <dnsProcessResponse+0x2f2>
      return;
 8007344:	bf00      	nop
 8007346:	e00c      	b.n	8007362 <dnsProcessResponse+0x2f2>
               break;
 8007348:	bf00      	nop
 800734a:	e00a      	b.n	8007362 <dnsProcessResponse+0x2f2>
               break;
 800734c:	bf00      	nop
 800734e:	e008      	b.n	8007362 <dnsProcessResponse+0x2f2>
               break;
 8007350:	bf00      	nop
 8007352:	e006      	b.n	8007362 <dnsProcessResponse+0x2f2>
               break;
 8007354:	bf00      	nop
 8007356:	e004      	b.n	8007362 <dnsProcessResponse+0x2f2>
               break;
 8007358:	bf00      	nop
 800735a:	e002      	b.n	8007362 <dnsProcessResponse+0x2f2>
               break;
 800735c:	bf00      	nop
 800735e:	e000      	b.n	8007362 <dnsProcessResponse+0x2f2>
               break;
 8007360:	bf00      	nop
         }
      }
   }
}
 8007362:	3734      	adds	r7, #52	; 0x34
 8007364:	46bd      	mov	sp, r7
 8007366:	bd90      	pop	{r4, r7, pc}
 8007368:	20000058 	.word	0x20000058
 800736c:	0801b400 	.word	0x0801b400
 8007370:	2000feec 	.word	0x2000feec
 8007374:	0036ee7f 	.word	0x0036ee7f
 8007378:	0036ee80 	.word	0x0036ee80

0800737c <dnsEncodeName>:
 * @param[out] dest Pointer to the encoded domain name (optional parameter)
 * @return Length of the encoded domain name
 **/

size_t dnsEncodeName(const char_t *src, uint8_t *dest)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
   uint_t i = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
   size_t length = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	60bb      	str	r3, [r7, #8]

   //Parse input name
   while(1)
   {
      //End of string detected?
      if(src[i] == '\0')
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d11b      	bne.n	80073d2 <dnsEncodeName+0x56>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <dnsEncodeName+0x2a>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b3f      	cmp	r3, #63	; 0x3f
 80073a4:	d901      	bls.n	80073aa <dnsEncodeName+0x2e>
            return 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e04d      	b.n	8007446 <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d009      	beq.n	80073c4 <dnsEncodeName+0x48>
         {
            dest[0] = i;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	701a      	strb	r2, [r3, #0]
            dest[i + 1] = 0;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	4413      	add	r3, r2
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the resulting string
         length += i + 2;
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	3302      	adds	r3, #2
 80073cc:	60bb      	str	r3, [r7, #8]

         //Stop parsing the input string
         return length;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	e039      	b.n	8007446 <dnsEncodeName+0xca>
      }
      //Separator detected?
      else if(src[i] == '.')
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b2e      	cmp	r3, #46	; 0x2e
 80073dc:	d123      	bne.n	8007426 <dnsEncodeName+0xaa>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <dnsEncodeName+0x6e>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b3f      	cmp	r3, #63	; 0x3f
 80073e8:	d901      	bls.n	80073ee <dnsEncodeName+0x72>
            return 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	e02b      	b.n	8007446 <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <dnsEncodeName+0x80>
            dest[0] = i;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	701a      	strb	r2, [r3, #0]

         //Adjust the length of the resulting string
         length += i + 1;
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	3301      	adds	r3, #1
 8007404:	60bb      	str	r3, [r7, #8]

         //Advance write pointer
         if(dest != NULL)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <dnsEncodeName+0x9a>
            dest += i + 1;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3301      	adds	r3, #1
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	4413      	add	r3, r2
 8007414:	603b      	str	r3, [r7, #0]

         //Prepare to decode the next label
         src += i + 1;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3301      	adds	r3, #1
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	607b      	str	r3, [r7, #4]
         i = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e7b3      	b.n	800738e <dnsEncodeName+0x12>
      }
      //Any other character?
      else
      {
         //Copy current character
         if(dest != NULL)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d008      	beq.n	800743e <dnsEncodeName+0xc2>
            dest[i + 1] = src[i];
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	441a      	add	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	440b      	add	r3, r1
 800743a:	7812      	ldrb	r2, [r2, #0]
 800743c:	701a      	strb	r2, [r3, #0]

         //Point to the next character
         i++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
      if(src[i] == '\0')
 8007444:	e7a3      	b.n	800738e <dnsEncodeName+0x12>
      }
   }
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <dnsParseName>:
 * @return The position of the resource record that immediately follows the domain name
 **/

size_t dnsParseName(const DnsHeader *message,
   size_t length, size_t pos, char_t *dest, uint_t level)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b08a      	sub	sp, #40	; 0x28
 8007456:	af02      	add	r7, sp, #8
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *src;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	2b03      	cmp	r3, #3
 8007464:	d901      	bls.n	800746a <dnsParseName+0x18>
      return 0;
 8007466:	2300      	movs	r3, #0
 8007468:	e08d      	b.n	8007586 <dnsParseName+0x134>

   //Cast the input DNS message to byte array
   src = (uint8_t *) message;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 800746e:	e084      	b.n	800757a <dnsParseName+0x128>
   {
      //End marker found?
      if(src[pos] == 0)
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4413      	add	r3, r2
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d108      	bne.n	800748e <dnsParseName+0x3c>
      {
         //Properly terminate the string
         if(dest != NULL)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <dnsParseName+0x36>
            *dest = '\0';
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 1);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3301      	adds	r3, #1
 800748c:	e07b      	b.n	8007586 <dnsParseName+0x134>
      }
      //Compression tag found?
      else if(src[pos] >= DNS_COMPRESSION_TAG)
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4413      	add	r3, r2
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2bbf      	cmp	r3, #191	; 0xbf
 8007498:	d92a      	bls.n	80074f0 <dnsParseName+0x9e>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3301      	adds	r3, #1
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d801      	bhi.n	80074a8 <dnsParseName+0x56>
            return 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	e06e      	b.n	8007586 <dnsParseName+0x134>

         //Read the most significant byte of the pointer
         pointer = (src[pos] & ~DNS_COMPRESSION_TAG) << 8;
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80074b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074ba:	617b      	str	r3, [r7, #20]
         //Read the least significant byte of the pointer
         pointer |= src[pos + 1];
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3301      	adds	r3, #1
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	4413      	add	r3, r2
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]

         //Decode the remaining part of the domain name
         if(!dnsParseName(message, length, pointer, dest, level + 1))
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	3301      	adds	r3, #1
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f7ff ffb9 	bl	8007452 <dnsParseName>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <dnsParseName+0x98>
         {
            //Domain name decoding failed
            return 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e04d      	b.n	8007586 <dnsParseName+0x134>
         }

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 2);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3302      	adds	r3, #2
 80074ee:	e04a      	b.n	8007586 <dnsParseName+0x134>
      }
      //Valid label length?
      else if(src[pos] < DNS_LABEL_MAX_SIZE)
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4413      	add	r3, r2
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b3e      	cmp	r3, #62	; 0x3e
 80074fa:	d836      	bhi.n	800756a <dnsParseName+0x118>
      {
         //Get the length of the current label
         n = src[pos++];
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	61bb      	str	r3, [r7, #24]

         //Malformed DNS message?
         if((pos + n) > length)
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	4413      	add	r3, r2
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	429a      	cmp	r2, r3
 8007514:	d201      	bcs.n	800751a <dnsParseName+0xc8>
            return 0;
 8007516:	2300      	movs	r3, #0
 8007518:	e035      	b.n	8007586 <dnsParseName+0x134>

         //The last parameter is optional
         if(dest != NULL)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01f      	beq.n	8007560 <dnsParseName+0x10e>
         {
            //Copy current label
            memcpy(dest, src + pos, n);
 8007520:	69fa      	ldr	r2, [r7, #28]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	4619      	mov	r1, r3
 800752a:	6838      	ldr	r0, [r7, #0]
 800752c:	f012 fd72 	bl	801a014 <memcpy>

            //Advance read pointer
            pos += n;
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	4413      	add	r3, r2
 8007536:	607b      	str	r3, [r7, #4]
            //Advance write pointer
            dest += n;
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	4413      	add	r3, r2
 800753e:	603b      	str	r3, [r7, #0]

            //Append a separator if necessary
            if(pos < length && src[pos] != '\0')
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	429a      	cmp	r2, r3
 8007546:	d218      	bcs.n	800757a <dnsParseName+0x128>
 8007548:	69fa      	ldr	r2, [r7, #28]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4413      	add	r3, r2
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d012      	beq.n	800757a <dnsParseName+0x128>
               *(dest++) = '.';
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	603a      	str	r2, [r7, #0]
 800755a:	222e      	movs	r2, #46	; 0x2e
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	e00c      	b.n	800757a <dnsParseName+0x128>
         }
         else
         {
            //Advance read pointer
            pos += n;
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	4413      	add	r3, r2
 8007566:	607b      	str	r3, [r7, #4]
 8007568:	e007      	b.n	800757a <dnsParseName+0x128>
      }
      //Invalid label length?
      else
      {
         //Properly terminate the string
         if(dest != NULL)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <dnsParseName+0x124>
            *dest = '\0';
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	701a      	strb	r2, [r3, #0]
         //Domain name decoding failed
         return 0;
 8007576:	2300      	movs	r3, #0
 8007578:	e005      	b.n	8007586 <dnsParseName+0x134>
   while(pos < length)
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	429a      	cmp	r2, r3
 8007580:	f4ff af76 	bcc.w	8007470 <dnsParseName+0x1e>
      }
   }

   //Domain name decoding failed
   return 0;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3720      	adds	r7, #32
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <dnsCompareName>:
 *   second domain name lexicographically precedes the first name
 **/

int_t dnsCompareName(const DnsHeader *message, size_t length,
   size_t pos, const char_t *name, uint_t level)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b08a      	sub	sp, #40	; 0x28
 8007592:	af02      	add	r7, sp, #8
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	607a      	str	r2, [r7, #4]
 800759a:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *p;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d902      	bls.n	80075a8 <dnsCompareName+0x1a>
      return -2;
 80075a2:	f06f 0301 	mvn.w	r3, #1
 80075a6:	e076      	b.n	8007696 <dnsCompareName+0x108>

   //Cast the DNS message to byte array
   p = (uint8_t *) message;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 80075ac:	e06d      	b.n	800768a <dnsCompareName+0xfc>
   {
      //Retrieve the length of the current label
      n = p[pos];
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4413      	add	r3, r2
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	61bb      	str	r3, [r7, #24]

      //End marker found?
      if(n == 0)
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <dnsCompareName+0x42>
      {
         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0')
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <dnsCompareName+0x3e>
            return -1;
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075ca:	e064      	b.n	8007696 <dnsCompareName+0x108>

         //The domain names match each other
         return 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e062      	b.n	8007696 <dnsCompareName+0x108>
      }
      //Compression tag found?
      else if(n >= DNS_COMPRESSION_TAG)
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	2bbf      	cmp	r3, #191	; 0xbf
 80075d4:	d925      	bls.n	8007622 <dnsCompareName+0x94>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3301      	adds	r3, #1
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d801      	bhi.n	80075e4 <dnsCompareName+0x56>
            return FALSE;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e058      	b.n	8007696 <dnsCompareName+0x108>

         //Read the most significant byte of the pointer
         pointer = (p[pos] & ~DNS_COMPRESSION_TAG) << 8;
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4413      	add	r3, r2
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80075f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075f6:	613b      	str	r3, [r7, #16]
         //Read the least significant byte of the pointer
         pointer |= p[pos + 1];
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3301      	adds	r3, #1
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	4413      	add	r3, r2
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

         //Compare the remaining part
         res = dnsCompareName(message, length, pointer, name, level + 1);
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	3301      	adds	r3, #1
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff ffb9 	bl	800758e <dnsCompareName>
 800761c:	6178      	str	r0, [r7, #20]

         //Return comparison result
         return res;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	e039      	b.n	8007696 <dnsCompareName+0x108>
      }
      else
      {
         //Advance data pointer
         pos++;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3301      	adds	r3, #1
 8007626:	607b      	str	r3, [r7, #4]

         //Malformed DNS message?
         if((pos + n) > length)
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	4413      	add	r3, r2
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	429a      	cmp	r2, r3
 8007632:	d202      	bcs.n	800763a <dnsCompareName+0xac>
            return -2;
 8007634:	f06f 0301 	mvn.w	r3, #1
 8007638:	e02d      	b.n	8007696 <dnsCompareName+0x108>

         //Compare current label
         res = strncasecmp((char_t *) p + pos, name, n);
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4413      	add	r3, r2
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	4618      	mov	r0, r3
 8007646:	f013 f8e4 	bl	801a812 <strncasecmp>
 800764a:	6178      	str	r0, [r7, #20]
         //Any mismatch?
         if(res)
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <dnsCompareName+0xc8>
            return res;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	e01f      	b.n	8007696 <dnsCompareName+0x108>

         //Advance data pointer
         pos += n;
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	4413      	add	r3, r2
 800765c:	607b      	str	r3, [r7, #4]
         name += n;
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	4413      	add	r3, r2
 8007664:	603b      	str	r3, [r7, #0]

         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0' && *name != '.')
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d006      	beq.n	800767c <dnsCompareName+0xee>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b2e      	cmp	r3, #46	; 0x2e
 8007674:	d002      	beq.n	800767c <dnsCompareName+0xee>
            return -1;
 8007676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800767a:	e00c      	b.n	8007696 <dnsCompareName+0x108>

         //Skip the separator character, if any
         if(*name == '.')
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b2e      	cmp	r3, #46	; 0x2e
 8007682:	d102      	bne.n	800768a <dnsCompareName+0xfc>
            name++;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	603b      	str	r3, [r7, #0]
   while(pos < length)
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	429a      	cmp	r2, r3
 8007690:	d38d      	bcc.n	80075ae <dnsCompareName+0x20>
      }
   }

   //Malformed DNS message
   return -2;
 8007692:	f06f 0301 	mvn.w	r3, #1
}
 8007696:	4618      	mov	r0, r3
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <icmpProcessMessage>:
 **/

void icmpProcessMessage(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *buffer,
   size_t offset)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b086      	sub	sp, #24
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	603b      	str	r3, [r7, #0]
   //Total number of ICMP messages which the entity received
   MIB2_INC_COUNTER32(icmpGroup.icmpInMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsInMsgs, 1);

   //Retrieve the length of the ICMP message
   length = netBufferGetLength(buffer) - offset;
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7fa fef3 	bl	8002498 <netBufferGetLength>
 80076b2:	4602      	mov	r2, r0
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	617b      	str	r3, [r7, #20]

   //Ensure the message length is correct
   if(length < sizeof(IcmpHeader))
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d923      	bls.n	8007708 <icmpProcessMessage+0x6a>
      //Silently discard incoming message
      return;
   }

   //Point to the ICMP message header
   header = netBufferAt(buffer, offset);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fa ffb0 	bl	8002628 <netBufferAt>
 80076c8:	6138      	str	r0, [r7, #16]
   //Sanity check
   if(header == NULL)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01d      	beq.n	800770c <icmpProcessMessage+0x6e>
      return;

   //Debug message
   TRACE_INFO("ICMP message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpDumpMessage(header);
 80076d0:	6938      	ldr	r0, [r7, #16]
 80076d2:	f000 f9f7 	bl	8007ac4 <icmpDumpMessage>

   //Verify checksum value
   if(ipCalcChecksumEx(buffer, offset, length) != 0x0000)
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fa f892 	bl	8001804 <ipCalcChecksumEx>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d114      	bne.n	8007710 <icmpProcessMessage+0x72>
      //Drop incoming message
      return;
   }

   //Update ICMP statistics
   icmpUpdateInStats(header->type);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 f982 	bl	80079f4 <icmpUpdateInStats>

   //Check the type of ICMP message
   switch(header->type)
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d000      	beq.n	80076fa <icmpProcessMessage+0x5c>
   //Unknown type?
   default:
      //Debug message
      TRACE_WARNING("Unknown ICMP message type!\r\n");
      //Discard incoming ICMP message
      break;
 80076f8:	e00b      	b.n	8007712 <icmpProcessMessage+0x74>
      icmpProcessEchoRequest(interface, requestPseudoHeader, buffer, offset);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	68b9      	ldr	r1, [r7, #8]
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f809 	bl	8007718 <icmpProcessEchoRequest>
      break;
 8007706:	e004      	b.n	8007712 <icmpProcessMessage+0x74>
      return;
 8007708:	bf00      	nop
 800770a:	e002      	b.n	8007712 <icmpProcessMessage+0x74>
      return;
 800770c:	bf00      	nop
 800770e:	e000      	b.n	8007712 <icmpProcessMessage+0x74>
      return;
 8007710:	bf00      	nop
   }
}
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <icmpProcessEchoRequest>:
 **/

void icmpProcessEchoRequest(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *request,
   size_t requestOffset)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b092      	sub	sp, #72	; 0x48
 800771c:	af02      	add	r7, sp, #8
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
   IcmpEchoMessage *requestHeader;
   IcmpEchoMessage *replyHeader;
   Ipv4PseudoHeader replyPseudoHeader;

   //Retrieve the length of the Echo Request message
   requestLength = netBufferGetLength(request) - requestOffset;
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fa feb6 	bl	8002498 <netBufferGetLength>
 800772c:	4602      	mov	r2, r0
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Ensure the packet length is correct
   if(requestLength < sizeof(IcmpEchoMessage))
 8007734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007736:	2b07      	cmp	r3, #7
 8007738:	f240 80a1 	bls.w	800787e <icmpProcessEchoRequest+0x166>
      return;

   //Point to the Echo Request header
   requestHeader = netBufferAt(request, requestOffset);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fa ff72 	bl	8002628 <netBufferAt>
 8007744:	63b8      	str	r0, [r7, #56]	; 0x38
   //Sanity check
   if(requestHeader == NULL)
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 809a 	beq.w	8007882 <icmpProcessEchoRequest+0x16a>
      return;

   //Debug message
   TRACE_INFO("ICMP Echo Request message received (%" PRIuSIZE " bytes)...\r\n", requestLength);
   //Dump message contents for debugging purpose
   icmpDumpEchoMessage(requestHeader);
 800774e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007750:	f000 f9c2 	bl	8007ad8 <icmpDumpEchoMessage>

   //Check whether the destination address of the Echo Request message is
   //a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f001 faaf 	bl	8008cc0 <ipv4IsBroadcastAddr>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <icmpProcessEchoRequest+0x5c>
      ipv4IsMulticastAddr(requestPseudoHeader->destAddr))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 8007770:	2be0      	cmp	r3, #224	; 0xe0
 8007772:	d116      	bne.n	80077a2 <icmpProcessEchoRequest+0x8a>
   {
      Ipv4Addr ipAddr;

      //If support for broadcast Echo Request messages has been explicitly
      //disabled, then the host shall not respond to the incoming request
      if(!interface->ipv4Context.enableBroadcastEchoReq)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 8083 	beq.w	8007886 <icmpProcessEchoRequest+0x16e>
         return;

      //The source address of the reply must be a unicast address belonging to
      //the interface on which the broadcast Echo Request message was received
      error = ipv4SelectSourceAddr(&interface, requestPseudoHeader->srcAddr,
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	f107 0214 	add.w	r2, r7, #20
 8007788:	f107 030c 	add.w	r3, r7, #12
 800778c:	4618      	mov	r0, r3
 800778e:	f001 f98d 	bl	8008aac <ipv4SelectSourceAddr>
 8007792:	4603      	mov	r3, r0
 8007794:	86fb      	strh	r3, [r7, #54]	; 0x36
         &ipAddr);
      //Any error to report?
      if(error)
 8007796:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007798:	2b00      	cmp	r3, #0
 800779a:	d176      	bne.n	800788a <icmpProcessEchoRequest+0x172>
         return;

      //Copy the resulting source IP address
      replyPseudoHeader.srcAddr = ipAddr;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	61bb      	str	r3, [r7, #24]
   {
 80077a0:	e002      	b.n	80077a8 <icmpProcessEchoRequest+0x90>
   }
   else
   {
      //The destination address of the Echo Request message is a unicast address
      replyPseudoHeader.srcAddr = requestPseudoHeader->destAddr;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	61bb      	str	r3, [r7, #24]
   }

   //Allocate memory to hold the Echo Reply message
   reply = ipAllocBuffer(sizeof(IcmpEchoMessage), &replyOffset);
 80077a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ac:	4619      	mov	r1, r3
 80077ae:	2008      	movs	r0, #8
 80077b0:	f7fa f8d0 	bl	8001954 <ipAllocBuffer>
 80077b4:	6338      	str	r0, [r7, #48]	; 0x30
   //Failed to allocate memory?
   if(reply == NULL)
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d068      	beq.n	800788e <icmpProcessEchoRequest+0x176>
      return;

   //Point to the Echo Reply header
   replyHeader = netBufferAt(reply, replyOffset);
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	4619      	mov	r1, r3
 80077c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077c2:	f7fa ff31 	bl	8002628 <netBufferAt>
 80077c6:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Format Echo Reply header
   replyHeader->type = ICMP_TYPE_ECHO_REPLY;
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
   replyHeader->code = 0;
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	2200      	movs	r2, #0
 80077d2:	705a      	strb	r2, [r3, #1]
   replyHeader->checksum = 0;
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	2200      	movs	r2, #0
 80077d8:	709a      	strb	r2, [r3, #2]
 80077da:	2200      	movs	r2, #0
 80077dc:	70da      	strb	r2, [r3, #3]
   replyHeader->identifier = requestHeader->identifier;
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	889b      	ldrh	r3, [r3, #4]
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	809a      	strh	r2, [r3, #4]
   replyHeader->sequenceNumber = requestHeader->sequenceNumber;
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	88db      	ldrh	r3, [r3, #6]
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	80da      	strh	r2, [r3, #6]

   //Point to the first data byte
   requestOffset += sizeof(IcmpEchoMessage);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	603b      	str	r3, [r7, #0]
   requestLength -= sizeof(IcmpEchoMessage);
 80077f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fa:	3b08      	subs	r3, #8
 80077fc:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Copy data
   error = netBufferConcat(reply, request, requestOffset, requestLength);
 80077fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007806:	f7fa ff42 	bl	800268e <netBufferConcat>
 800780a:	4603      	mov	r3, r0
 800780c:	86fb      	strh	r3, [r7, #54]	; 0x36

   //Check status code
   if(!error)
 800780e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007810:	2b00      	cmp	r3, #0
 8007812:	d130      	bne.n	8007876 <icmpProcessEchoRequest+0x15e>
   {
      //Get the length of the resulting message
      replyLength = netBufferGetLength(reply) - replyOffset;
 8007814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007816:	f7fa fe3f 	bl	8002498 <netBufferGetLength>
 800781a:	4602      	mov	r2, r0
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	62bb      	str	r3, [r7, #40]	; 0x28
      //Calculate ICMP header checksum
      replyHeader->checksum = ipCalcChecksumEx(reply, replyOffset, replyLength);
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007826:	4619      	mov	r1, r3
 8007828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800782a:	f7f9 ffeb 	bl	8001804 <ipCalcChecksumEx>
 800782e:	4603      	mov	r3, r0
 8007830:	461a      	mov	r2, r3
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      replyPseudoHeader.destAddr = requestPseudoHeader->srcAddr;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	61fb      	str	r3, [r7, #28]
      replyPseudoHeader.reserved = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3020 	strb.w	r3, [r7, #32]
      replyPseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 8007842:	2301      	movs	r3, #1
 8007844:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      replyPseudoHeader.length = htons(replyLength);
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	b29b      	uxth	r3, r3
 800784c:	4618      	mov	r0, r3
 800784e:	f7f8 fea7 	bl	80005a0 <swapInt16>
 8007852:	4603      	mov	r3, r0
 8007854:	847b      	strh	r3, [r7, #34]	; 0x22

      //Update ICMP statistics
      icmpUpdateOutStats(ICMP_TYPE_ECHO_REPLY);
 8007856:	2000      	movs	r0, #0
 8007858:	f000 f900 	bl	8007a5c <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Echo Reply message (%" PRIuSIZE " bytes)...\r\n", replyLength);
      //Dump message contents for debugging purpose
      icmpDumpEchoMessage(replyHeader);
 800785c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800785e:	f000 f93b 	bl	8007ad8 <icmpDumpEchoMessage>

      //Send Echo Reply message
      ipv4SendDatagram(interface, &replyPseudoHeader, reply, replyOffset,
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007866:	f107 0118 	add.w	r1, r7, #24
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	4613      	mov	r3, r2
 8007870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007872:	f000 fb9a 	bl	8007faa <ipv4SendDatagram>
         IPV4_DEFAULT_TTL);
   }

   //Free previously allocated memory block
   netBufferFree(reply);
 8007876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007878:	f7fa fdff 	bl	800247a <netBufferFree>
 800787c:	e008      	b.n	8007890 <icmpProcessEchoRequest+0x178>
      return;
 800787e:	bf00      	nop
 8007880:	e006      	b.n	8007890 <icmpProcessEchoRequest+0x178>
      return;
 8007882:	bf00      	nop
 8007884:	e004      	b.n	8007890 <icmpProcessEchoRequest+0x178>
         return;
 8007886:	bf00      	nop
 8007888:	e002      	b.n	8007890 <icmpProcessEchoRequest+0x178>
         return;
 800788a:	bf00      	nop
 800788c:	e000      	b.n	8007890 <icmpProcessEchoRequest+0x178>
      return;
 800788e:	bf00      	nop
}
 8007890:	3740      	adds	r7, #64	; 0x40
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <icmpSendErrorMessage>:
 * @return Error code
 **/

error_t icmpSendErrorMessage(NetInterface *interface, uint8_t type, uint8_t code,
   uint8_t parameter, const NetBuffer *ipPacket, size_t ipPacketOffset)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b08e      	sub	sp, #56	; 0x38
 800789a:	af02      	add	r7, sp, #8
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	4608      	mov	r0, r1
 80078a0:	4611      	mov	r1, r2
 80078a2:	461a      	mov	r2, r3
 80078a4:	4603      	mov	r3, r0
 80078a6:	70fb      	strb	r3, [r7, #3]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70bb      	strb	r3, [r7, #2]
 80078ac:	4613      	mov	r3, r2
 80078ae:	707b      	strb	r3, [r7, #1]
   NetBuffer *icmpMessage;
   IcmpErrorMessage *icmpHeader;
   Ipv4PseudoHeader pseudoHeader;

   //Retrieve the length of the invoking IPv4 packet
   length = netBufferGetLength(ipPacket) - ipPacketOffset;
 80078b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078b2:	f7fa fdf1 	bl	8002498 <netBufferGetLength>
 80078b6:	4602      	mov	r2, r0
 80078b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28

   //Check the length of the IPv4 packet
   if(length < sizeof(Ipv4Header))
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	2b13      	cmp	r3, #19
 80078c2:	d801      	bhi.n	80078c8 <icmpSendErrorMessage+0x32>
      return ERROR_INVALID_LENGTH;
 80078c4:	23eb      	movs	r3, #235	; 0xeb
 80078c6:	e091      	b.n	80079ec <icmpSendErrorMessage+0x156>

   //Point to the header of the invoking packet
   ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 80078c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078cc:	f7fa feac 	bl	8002628 <netBufferAt>
 80078d0:	6278      	str	r0, [r7, #36]	; 0x24
   //Sanity check
   if(ipHeader == NULL)
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <icmpSendErrorMessage+0x46>
      return ERROR_FAILURE;
 80078d8:	2301      	movs	r3, #1
 80078da:	e087      	b.n	80079ec <icmpSendErrorMessage+0x156>

   //Never respond to a packet destined to a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 f9ec 	bl	8008cc0 <ipv4IsBroadcastAddr>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <icmpSendErrorMessage+0x64>
      ipv4IsMulticastAddr(ipHeader->destAddr))
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 80078f6:	2be0      	cmp	r3, #224	; 0xe0
 80078f8:	d101      	bne.n	80078fe <icmpSendErrorMessage+0x68>
   {
      //Report an error
      return ERROR_INVALID_ADDRESS;
 80078fa:	23e4      	movs	r3, #228	; 0xe4
 80078fc:	e076      	b.n	80079ec <icmpSendErrorMessage+0x156>
   }

   //Length of the data that will be returned along with the ICMP header
   length = MIN(length, (size_t) ipHeader->headerLength * 4 + 8);
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007906:	b2db      	uxtb	r3, r3
 8007908:	3302      	adds	r3, #2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800790e:	4293      	cmp	r3, r2
 8007910:	bf28      	it	cs
 8007912:	4613      	movcs	r3, r2
 8007914:	62bb      	str	r3, [r7, #40]	; 0x28

   //Allocate a memory buffer to hold the ICMP message
   icmpMessage = ipAllocBuffer(sizeof(IcmpErrorMessage), &offset);
 8007916:	f107 0318 	add.w	r3, r7, #24
 800791a:	4619      	mov	r1, r3
 800791c:	2008      	movs	r0, #8
 800791e:	f7fa f819 	bl	8001954 <ipAllocBuffer>
 8007922:	6238      	str	r0, [r7, #32]
   //Failed to allocate memory?
   if(icmpMessage == NULL)
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <icmpSendErrorMessage+0x98>
      return ERROR_OUT_OF_MEMORY;
 800792a:	2364      	movs	r3, #100	; 0x64
 800792c:	e05e      	b.n	80079ec <icmpSendErrorMessage+0x156>

   //Point to the ICMP header
   icmpHeader = netBufferAt(icmpMessage, offset);
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	4619      	mov	r1, r3
 8007932:	6a38      	ldr	r0, [r7, #32]
 8007934:	f7fa fe78 	bl	8002628 <netBufferAt>
 8007938:	61f8      	str	r0, [r7, #28]

   //Format ICMP message
   icmpHeader->type = type;
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	78fa      	ldrb	r2, [r7, #3]
 800793e:	701a      	strb	r2, [r3, #0]
   icmpHeader->code = code;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	78ba      	ldrb	r2, [r7, #2]
 8007944:	705a      	strb	r2, [r3, #1]
   icmpHeader->checksum = 0;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2200      	movs	r2, #0
 800794a:	709a      	strb	r2, [r3, #2]
 800794c:	2200      	movs	r2, #0
 800794e:	70da      	strb	r2, [r3, #3]
   icmpHeader->parameter = parameter;
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	787a      	ldrb	r2, [r7, #1]
 8007954:	711a      	strb	r2, [r3, #4]
   icmpHeader->unused = 0;
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	2200      	movs	r2, #0
 800795a:	715a      	strb	r2, [r3, #5]
 800795c:	2200      	movs	r2, #0
 800795e:	719a      	strb	r2, [r3, #6]
 8007960:	2200      	movs	r2, #0
 8007962:	71da      	strb	r2, [r3, #7]

   //Copy the IP header and the first 8 bytes of the original datagram data
   error = netBufferConcat(icmpMessage, ipPacket, ipPacketOffset, length);
 8007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800796a:	6a38      	ldr	r0, [r7, #32]
 800796c:	f7fa fe8f 	bl	800268e <netBufferConcat>
 8007970:	4603      	mov	r3, r0
 8007972:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Check status code
   if(!error)
 8007974:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007976:	2b00      	cmp	r3, #0
 8007978:	d134      	bne.n	80079e4 <icmpSendErrorMessage+0x14e>
   {
      //Get the length of the resulting message
      length = netBufferGetLength(icmpMessage) - offset;
 800797a:	6a38      	ldr	r0, [r7, #32]
 800797c:	f7fa fd8c 	bl	8002498 <netBufferGetLength>
 8007980:	4602      	mov	r2, r0
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
      //Message checksum calculation
      icmpHeader->checksum = ipCalcChecksumEx(icmpMessage, offset, length);
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800798c:	4619      	mov	r1, r3
 800798e:	6a38      	ldr	r0, [r7, #32]
 8007990:	f7f9 ff38 	bl	8001804 <ipCalcChecksumEx>
 8007994:	4603      	mov	r3, r0
 8007996:	461a      	mov	r2, r3
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      pseudoHeader.srcAddr = ipHeader->destAddr;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	60fb      	str	r3, [r7, #12]
      pseudoHeader.destAddr = ipHeader->srcAddr;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	613b      	str	r3, [r7, #16]
      pseudoHeader.reserved = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	753b      	strb	r3, [r7, #20]
      pseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 80079ac:	2301      	movs	r3, #1
 80079ae:	757b      	strb	r3, [r7, #21]
      pseudoHeader.length = htons(length);
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7f8 fdf3 	bl	80005a0 <swapInt16>
 80079ba:	4603      	mov	r3, r0
 80079bc:	82fb      	strh	r3, [r7, #22]

      //Update ICMP statistics
      icmpUpdateOutStats(type);
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 f84b 	bl	8007a5c <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Error message (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump message contents for debugging purpose
      icmpDumpErrorMessage(icmpHeader);
 80079c6:	69f8      	ldr	r0, [r7, #28]
 80079c8:	f000 f890 	bl	8007aec <icmpDumpErrorMessage>

      //Send ICMP Error message
      error = ipv4SendDatagram(interface, &pseudoHeader, icmpMessage, offset,
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	f107 010c 	add.w	r1, r7, #12
 80079d2:	2340      	movs	r3, #64	; 0x40
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4613      	mov	r3, r2
 80079d8:	6a3a      	ldr	r2, [r7, #32]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fae5 	bl	8007faa <ipv4SendDatagram>
 80079e0:	4603      	mov	r3, r0
 80079e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
         IPV4_DEFAULT_TTL);
   }

   //Free previously allocated memory
   netBufferFree(icmpMessage);
 80079e4:	6a38      	ldr	r0, [r7, #32]
 80079e6:	f7fa fd48 	bl	800247a <netBufferFree>

   //Return status code
   return error;
 80079ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3730      	adds	r7, #48	; 0x30
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <icmpUpdateInStats>:
 * @brief Update ICMP input statistics
 * @param[in] type ICMP message type
 **/

void icmpUpdateInStats(uint8_t type)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	71fb      	strb	r3, [r7, #7]
   //Check ICMP message type
   switch(type)
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	3b03      	subs	r3, #3
 8007a02:	2b0f      	cmp	r3, #15
 8007a04:	d822      	bhi.n	8007a4c <icmpUpdateInStats+0x58>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <icmpUpdateInStats+0x18>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a4d 	.word	0x08007a4d
 8007a10:	08007a4d 	.word	0x08007a4d
 8007a14:	08007a4d 	.word	0x08007a4d
 8007a18:	08007a4d 	.word	0x08007a4d
 8007a1c:	08007a4d 	.word	0x08007a4d
 8007a20:	08007a4d 	.word	0x08007a4d
 8007a24:	08007a4d 	.word	0x08007a4d
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a4d 	.word	0x08007a4d
 8007a30:	08007a4d 	.word	0x08007a4d
 8007a34:	08007a4d 	.word	0x08007a4d
 8007a38:	08007a4d 	.word	0x08007a4d
 8007a3c:	08007a4d 	.word	0x08007a4d
 8007a40:	08007a4d 	.word	0x08007a4d
 8007a44:	08007a4d 	.word	0x08007a4d
 8007a48:	08007a4d 	.word	0x08007a4d
      //Number of ICMP Address Mask Reply messages received
      MIB2_INC_COUNTER32(icmpGroup.icmpInAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 8007a4c:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsInPkts[type], 1);
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop

08007a5c <icmpUpdateOutStats>:
 * @brief Update ICMP output statistics
 * @param[in] type ICMPv6 message type
 **/

void icmpUpdateOutStats(uint8_t type)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	71fb      	strb	r3, [r7, #7]
   //Total number of ICMP messages which this entity attempted to send
   MIB2_INC_COUNTER32(icmpGroup.icmpOutMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsOutMsgs, 1);

   //Check ICMP message type
   switch(type)
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	3b03      	subs	r3, #3
 8007a6a:	2b0f      	cmp	r3, #15
 8007a6c:	d822      	bhi.n	8007ab4 <icmpUpdateOutStats+0x58>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <icmpUpdateOutStats+0x18>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007ab5 	.word	0x08007ab5
 8007a78:	08007ab5 	.word	0x08007ab5
 8007a7c:	08007ab5 	.word	0x08007ab5
 8007a80:	08007ab5 	.word	0x08007ab5
 8007a84:	08007ab5 	.word	0x08007ab5
 8007a88:	08007ab5 	.word	0x08007ab5
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007ab5 	.word	0x08007ab5
 8007a9c:	08007ab5 	.word	0x08007ab5
 8007aa0:	08007ab5 	.word	0x08007ab5
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007ab5 	.word	0x08007ab5
 8007aac:	08007ab5 	.word	0x08007ab5
 8007ab0:	08007ab5 	.word	0x08007ab5
      //Number of ICMP Address Mask Reply messages sent
      MIB2_INC_COUNTER32(icmpGroup.icmpOutAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 8007ab4:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsOutPkts[type], 1);
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop

08007ac4 <icmpDumpMessage>:
 * @brief Dump ICMP message for debugging purpose
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpMessage(const IcmpHeader *message)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <icmpDumpEchoMessage>:
 * @brief Dump ICMP Echo Request or Echo Reply message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpEchoMessage(const IcmpEchoMessage *message)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Identifier = 0x%04" PRIX16 "\r\n", ntohs(message->identifier));
   TRACE_DEBUG("  Sequence Number = 0x%04" PRIX16 "\r\n", ntohs(message->sequenceNumber));
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <icmpDumpErrorMessage>:
 * @brief Dump generic ICMP Error message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpErrorMessage(const IcmpErrorMessage *message)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Parameter = %" PRIu8 "\r\n", message->parameter);
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <ipv4Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ipv4Init(NetInterface *interface)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7fa ffb1 	bl	8002a70 <nicGetPhysicalInterface>
 8007b0e:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	338c      	adds	r3, #140	; 0x8c
 8007b14:	60bb      	str	r3, [r7, #8]

   //Clear the IPv4 context
   memset(context, 0, sizeof(Ipv4Context));
 8007b16:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	68b8      	ldr	r0, [r7, #8]
 8007b1e:	f012 fa9d 	bl	801a05c <memset>

   //Initialize interface specific variables
   context->linkMtu = physicalInterface->nicDriver->mtu;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	601a      	str	r2, [r3, #0]
   context->isRouter = FALSE;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	605a      	str	r2, [r3, #4]

   //Broadcast ICMP Echo Request messages are allowed by default
   context->enableBroadcastEchoReq = TRUE;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2201      	movs	r2, #1
 8007b36:	609a      	str	r2, [r3, #8]

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   context->identification = 0;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	819a      	strh	r2, [r3, #12]

   //Initialize the list of DNS servers
   memset(context->dnsServerList, 0, sizeof(context->dnsServerList));
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	3324      	adds	r3, #36	; 0x24
 8007b42:	2208      	movs	r2, #8
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f012 fa88 	bl	801a05c <memset>
   //Initialize the multicast filter table
   memset(context->multicastFilter, 0, sizeof(context->multicastFilter));
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	332c      	adds	r3, #44	; 0x2c
 8007b50:	2250      	movs	r2, #80	; 0x50
 8007b52:	2100      	movs	r1, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f012 fa81 	bl	801a05c <memset>

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Initialize the reassembly queue
   memset(context->fragQueue, 0, sizeof(context->fragQueue));
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	337c      	adds	r3, #124	; 0x7c
 8007b5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f012 fa79 	bl	801a05c <memset>
#endif

   //Successful initialization
   return NO_ERROR;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <ipv4SetHostAddr>:
 * @param[in] addr IPv4 host address
 * @return Error code
 **/

error_t ipv4SetHostAddr(NetInterface *interface, Ipv4Addr addr)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
   //Set IPv4 host address
   return ipv4SetHostAddrEx(interface, 0, addr);
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	2100      	movs	r1, #0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f806 	bl	8007b94 <ipv4SetHostAddrEx>
 8007b88:	4603      	mov	r3, r0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <ipv4SetHostAddrEx>:
 * @param[in] addr IPv4 host address
 * @return Error code
 **/

error_t ipv4SetHostAddrEx(NetInterface *interface, uint_t index, Ipv4Addr addr)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
   Ipv4AddrEntry *entry;

   //Check parameters
   if(interface == NULL)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <ipv4SetHostAddrEx+0x16>
      return ERROR_INVALID_PARAMETER;
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e02d      	b.n	8007c06 <ipv4SetHostAddrEx+0x72>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <ipv4SetHostAddrEx+0x22>
      return ERROR_OUT_OF_RANGE;
 8007bb0:	f240 1305 	movw	r3, #261	; 0x105
 8007bb4:	e027      	b.n	8007c06 <ipv4SetHostAddrEx+0x72>

   //The IPv4 address must be a valid unicast address
   if(ipv4IsMulticastAddr(addr))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bbc:	2be0      	cmp	r3, #224	; 0xe0
 8007bbe:	d101      	bne.n	8007bc4 <ipv4SetHostAddrEx+0x30>
      return ERROR_INVALID_ADDRESS;
 8007bc0:	23e4      	movs	r3, #228	; 0xe4
 8007bc2:	e020      	b.n	8007c06 <ipv4SetHostAddrEx+0x72>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8007bc4:	4812      	ldr	r0, [pc, #72]	; (8007c10 <ipv4SetHostAddrEx+0x7c>)
 8007bc6:	f7f8 fde7 	bl	8000798 <osAcquireMutex>

   //Point to the corresponding entry
   entry = &interface->ipv4Context.addrList[index];
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	3398      	adds	r3, #152	; 0x98
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	3304      	adds	r3, #4
 8007bdc:	617b      	str	r3, [r7, #20]

   //Set up host address
   entry->addr = addr;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	601a      	str	r2, [r3, #0]
   //Clear conflict flag
   entry->conflict = FALSE;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	609a      	str	r2, [r3, #8]

   //Check whether the new host address is valid
   if(addr != IPV4_UNSPECIFIED_ADDR)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <ipv4SetHostAddrEx+0x64>
   {
      //The use of the IPv4 address is now unrestricted
      entry->state = IPV4_ADDR_STATE_VALID;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	711a      	strb	r2, [r3, #4]
 8007bf6:	e002      	b.n	8007bfe <ipv4SetHostAddrEx+0x6a>
   }
   else
   {
      //The IPv4 address is no longer valid
      entry->state = IPV4_ADDR_STATE_INVALID;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	711a      	strb	r2, [r3, #4]
   //Restart mDNS probing process
   mdnsResponderStartProbing(interface->mdnsResponderContext);
#endif

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8007bfe:	4804      	ldr	r0, [pc, #16]	; (8007c10 <ipv4SetHostAddrEx+0x7c>)
 8007c00:	f7f8 fdd9 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	2000e460 	.word	0x2000e460

08007c14 <ipv4SetSubnetMask>:
 * @param[in] mask Subnet mask
 * @return Error code
 **/

error_t ipv4SetSubnetMask(NetInterface *interface, Ipv4Addr mask)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
   //Set subnet mask
   return ipv4SetSubnetMaskEx(interface, 0, mask);
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	2100      	movs	r1, #0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f806 	bl	8007c34 <ipv4SetSubnetMaskEx>
 8007c28:	4603      	mov	r3, r0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <ipv4SetSubnetMaskEx>:
 * @param[in] mask Subnet mask
 * @return Error code
 **/

error_t ipv4SetSubnetMaskEx(NetInterface *interface, uint_t index, Ipv4Addr mask)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(interface == NULL)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <ipv4SetSubnetMaskEx+0x16>
      return ERROR_INVALID_PARAMETER;
 8007c46:	2302      	movs	r3, #2
 8007c48:	e016      	b.n	8007c78 <ipv4SetSubnetMaskEx+0x44>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <ipv4SetSubnetMaskEx+0x22>
      return ERROR_OUT_OF_RANGE;
 8007c50:	f240 1305 	movw	r3, #261	; 0x105
 8007c54:	e010      	b.n	8007c78 <ipv4SetSubnetMaskEx+0x44>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8007c56:	480a      	ldr	r0, [pc, #40]	; (8007c80 <ipv4SetSubnetMaskEx+0x4c>)
 8007c58:	f7f8 fd9e 	bl	8000798 <osAcquireMutex>
   //Set up subnet mask
   interface->ipv4Context.addrList[index].subnetMask = mask;
 8007c5c:	68f9      	ldr	r1, [r7, #12]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	33a8      	adds	r3, #168	; 0xa8
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	601a      	str	r2, [r3, #0]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8007c70:	4803      	ldr	r0, [pc, #12]	; (8007c80 <ipv4SetSubnetMaskEx+0x4c>)
 8007c72:	f7f8 fda0 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	2000e460 	.word	0x2000e460

08007c84 <ipv4SetDefaultGateway>:
 * @param[in] addr Default gateway address
 * @return Error code
 **/

error_t ipv4SetDefaultGateway(NetInterface *interface, Ipv4Addr addr)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
   //Set default gateway
   return ipv4SetDefaultGatewayEx(interface, 0, addr);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	2100      	movs	r1, #0
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f806 	bl	8007ca4 <ipv4SetDefaultGatewayEx>
 8007c98:	4603      	mov	r3, r0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <ipv4SetDefaultGatewayEx>:
 * @return Error code
 **/

error_t ipv4SetDefaultGatewayEx(NetInterface *interface, uint_t index,
   Ipv4Addr addr)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(interface == NULL)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <ipv4SetDefaultGatewayEx+0x16>
      return ERROR_INVALID_PARAMETER;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	e01d      	b.n	8007cf6 <ipv4SetDefaultGatewayEx+0x52>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <ipv4SetDefaultGatewayEx+0x22>
      return ERROR_OUT_OF_RANGE;
 8007cc0:	f240 1305 	movw	r3, #261	; 0x105
 8007cc4:	e017      	b.n	8007cf6 <ipv4SetDefaultGatewayEx+0x52>

   //The IPv4 address must be a valid unicast address
   if(ipv4IsMulticastAddr(addr))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ccc:	2be0      	cmp	r3, #224	; 0xe0
 8007cce:	d101      	bne.n	8007cd4 <ipv4SetDefaultGatewayEx+0x30>
      return ERROR_INVALID_ADDRESS;
 8007cd0:	23e4      	movs	r3, #228	; 0xe4
 8007cd2:	e010      	b.n	8007cf6 <ipv4SetDefaultGatewayEx+0x52>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8007cd4:	480a      	ldr	r0, [pc, #40]	; (8007d00 <ipv4SetDefaultGatewayEx+0x5c>)
 8007cd6:	f7f8 fd5f 	bl	8000798 <osAcquireMutex>
   //Set up default gateway address
   interface->ipv4Context.addrList[index].defaultGateway = addr;
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	33ac      	adds	r3, #172	; 0xac
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8007cee:	4804      	ldr	r0, [pc, #16]	; (8007d00 <ipv4SetDefaultGatewayEx+0x5c>)
 8007cf0:	f7f8 fd61 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	2000e460 	.word	0x2000e460

08007d04 <ipv4LinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ipv4LinkChangeEvent(NetInterface *interface)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fa feaf 	bl	8002a70 <nicGetPhysicalInterface>
 8007d12:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	338c      	adds	r3, #140	; 0x8c
 8007d18:	60bb      	str	r3, [r7, #8]

   //Restore default MTU
   context->linkMtu = physicalInterface->nicDriver->mtu;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	601a      	str	r2, [r3, #0]
   arpFlushCache(interface);
#endif

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Flush the reassembly queue
   ipv4FlushFragQueue(interface);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fe11 	bl	800894c <ipv4FlushFragQueue>

#if (DHCP_CLIENT_SUPPORT == ENABLED)
   //Notify the DHCP client of link state changes
   dhcpClientLinkChangeEvent(interface->dhcpClientContext);
#endif
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <ipv4ProcessPacket>:
 * @param[in] packet Incoming IPv4 packet
 * @param[in] length Packet length including header and payload
 **/

void ipv4ProcessPacket(NetInterface *interface, Ipv4Header *packet, size_t length)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b08a      	sub	sp, #40	; 0x28
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Start of exception handling block
   do
   {
      //Ensure the packet length is greater than 20 bytes
      if(length < sizeof(Ipv4Header))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b13      	cmp	r3, #19
 8007d46:	d802      	bhi.n	8007d4e <ipv4ProcessPacket+0x1c>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 8007d48:	23eb      	movs	r3, #235	; 0xeb
 8007d4a:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8007d4c:	e09a      	b.n	8007e84 <ipv4ProcessPacket+0x152>
      }

      //Debug message
      TRACE_INFO("IPv4 packet received (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump IP header contents for debugging purpose
      ipv4DumpHeader(packet);
 8007d4e:	68b8      	ldr	r0, [r7, #8]
 8007d50:	f000 fab2 	bl	80082b8 <ipv4DumpHeader>

      //A packet whose version number is not 4 must be silently discarded
      if(packet->version != IPV4_VERSION)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f023 030f 	bic.w	r3, r3, #15
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d002      	beq.n	8007d68 <ipv4ProcessPacket+0x36>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8007d62:	23d4      	movs	r3, #212	; 0xd4
 8007d64:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8007d66:	e08d      	b.n	8007e84 <ipv4ProcessPacket+0x152>
      }

      //Valid IPv4 header shall contains more than five 32-bit words
      if(packet->headerLength < 5)
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d802      	bhi.n	8007d7c <ipv4ProcessPacket+0x4a>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8007d76:	23d4      	movs	r3, #212	; 0xd4
 8007d78:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8007d7a:	e083      	b.n	8007e84 <ipv4ProcessPacket+0x152>
      }

      //Ensure the total length is correct before processing the packet
      if(ntohs(packet->totalLength) < (packet->headerLength * 4))
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	885b      	ldrh	r3, [r3, #2]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7f8 fc0c 	bl	80005a0 <swapInt16>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	da02      	bge.n	8007da2 <ipv4ProcessPacket+0x70>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8007d9c:	23d4      	movs	r3, #212	; 0xd4
 8007d9e:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8007da0:	e070      	b.n	8007e84 <ipv4ProcessPacket+0x152>
      }

      //Truncated packet?
      if(length < ntohs(packet->totalLength))
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7f8 fbf9 	bl	80005a0 <swapInt16>
 8007dae:	4603      	mov	r3, r0
 8007db0:	461a      	mov	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d202      	bcs.n	8007dbe <ipv4ProcessPacket+0x8c>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 8007db8:	23eb      	movs	r3, #235	; 0xeb
 8007dba:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8007dbc:	e062      	b.n	8007e84 <ipv4ProcessPacket+0x152>
      }

      //Source address filtering
      if(ipv4CheckSourceAddr(interface, packet->srcAddr))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fdff 	bl	80089c8 <ipv4CheckSourceAddr>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <ipv4ProcessPacket+0xa4>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8007dd0:	23d4      	movs	r3, #212	; 0xd4
 8007dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8007dd4:	e056      	b.n	8007e84 <ipv4ProcessPacket+0x152>

#if defined(IPV4_PACKET_FORWARD_HOOK)
      IPV4_PACKET_FORWARD_HOOK(interface, packet, length);
#else
      //Destination address filtering
      if(ipv4CheckDestAddr(interface, packet->destAddr))
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fe0b 	bl	80089f8 <ipv4CheckDestAddr>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <ipv4ProcessPacket+0xbc>

         //Forward the packet according to the routing table
         ipv4ForwardPacket(interface, (NetBuffer *) &buffer, 0);
#else
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 8007de8:	23e4      	movs	r3, #228	; 0xe4
 8007dea:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
         //We are done
         break;
 8007dec:	e04a      	b.n	8007e84 <ipv4ProcessPacket+0x152>
      }
#endif

      //Packets addressed to a tentative address should be silently discarded
      if(ipv4IsTentativeAddr(interface, packet->destAddr))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	4619      	mov	r1, r3
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 ffa3 	bl	8008d40 <ipv4IsTentativeAddr>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <ipv4ProcessPacket+0xd4>
      {
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 8007e00:	23e4      	movs	r3, #228	; 0xe4
 8007e02:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8007e04:	e03e      	b.n	8007e84 <ipv4ProcessPacket+0x152>
      }

      //The host must verify the IP header checksum on every received datagram
      //and silently discard every datagram that has a bad checksum (refer to
      //RFC 1122, section 3.2.1.2)
      if(ipCalcChecksum(packet, packet->headerLength * 4) != 0x0000)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4619      	mov	r1, r3
 8007e14:	68b8      	ldr	r0, [r7, #8]
 8007e16:	f7f9 fc6b 	bl	80016f0 <ipCalcChecksum>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <ipv4ProcessPacket+0xf4>
      {
         //Debug message
         TRACE_WARNING("Wrong IP header checksum!\r\n");

         //Discard incoming packet
         error = ERROR_INVALID_HEADER;
 8007e20:	23d4      	movs	r3, #212	; 0xd4
 8007e22:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8007e24:	e02e      	b.n	8007e84 <ipv4ProcessPacket+0x152>
      }

      //Update IP statistics
      ipv4UpdateInStats(interface, packet->destAddr, length);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f001 f851 	bl	8008ed6 <ipv4UpdateInStats>

      //Convert the total length from network byte order
      length = ntohs(packet->totalLength);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	885b      	ldrh	r3, [r3, #2]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7f8 fbb0 	bl	80005a0 <swapInt16>
 8007e40:	4603      	mov	r3, r0
 8007e42:	607b      	str	r3, [r7, #4]

      //A fragmented packet was received?
      if(ntohs(packet->fragmentOffset) & (IPV4_FLAG_MF | IPV4_OFFSET_MASK))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	88db      	ldrh	r3, [r3, #6]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7f8 fba8 	bl	80005a0 <swapInt16>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <ipv4ProcessPacket+0x134>
      {
#if (IPV4_FRAG_SUPPORT == ENABLED)
         //Reassemble the original datagram
         ipv4ReassembleDatagram(interface, packet, length);
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 fabf 	bl	80083e2 <ipv4ReassembleDatagram>
 8007e64:	e00e      	b.n	8007e84 <ipv4ProcessPacket+0x152>
      else
      {
         NetBuffer1 buffer;

         //Unfragmented datagrams fit in a single chunk
         buffer.chunkCount = 1;
 8007e66:	2301      	movs	r3, #1
 8007e68:	617b      	str	r3, [r7, #20]
         buffer.maxChunkCount = 1;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	61bb      	str	r3, [r7, #24]
         buffer.chunk[0].address = packet;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	61fb      	str	r3, [r7, #28]
         buffer.chunk[0].length = (uint16_t) length;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	843b      	strh	r3, [r7, #32]

         //Pass the IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &buffer);
 8007e78:	f107 0314 	add.w	r3, r7, #20
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 f80c 	bl	8007e9c <ipv4ProcessDatagram>

      //End of exception handling block
   } while(0);

   //Invalid IPv4 packet received?
   if(error)
 8007e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d004      	beq.n	8007e94 <ipv4ProcessPacket+0x162>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 8007e8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f001 f842 	bl	8008f18 <ipv4UpdateErrorStats>
   }
}
 8007e94:	bf00      	nop
 8007e96:	3728      	adds	r7, #40	; 0x28
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <ipv4ProcessDatagram>:
 * @param[in] interface Underlying network interface
 * @param[in] buffer Multi-part buffer that holds the incoming IPv4 datagram
 **/

void ipv4ProcessDatagram(NetInterface *interface, const NetBuffer *buffer)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08c      	sub	sp, #48	; 0x30
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
   size_t length;
   Ipv4Header *header;
   IpPseudoHeader pseudoHeader;

   //Retrieve the length of the IPv4 datagram
   length = netBufferGetLength(buffer);
 8007ea6:	6838      	ldr	r0, [r7, #0]
 8007ea8:	f7fa faf6 	bl	8002498 <netBufferGetLength>
 8007eac:	6238      	str	r0, [r7, #32]

   //Point to the IPv4 header
   header = netBufferAt(buffer, 0);
 8007eae:	2100      	movs	r1, #0
 8007eb0:	6838      	ldr	r0, [r7, #0]
 8007eb2:	f7fa fbb9 	bl	8002628 <netBufferAt>
 8007eb6:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(header == NULL)
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d071      	beq.n	8007fa2 <ipv4ProcessDatagram+0x106>
      return;

   //Debug message
   TRACE_INFO("IPv4 datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump IP header contents for debugging purpose
   ipv4DumpHeader(header);
 8007ebe:	69f8      	ldr	r0, [r7, #28]
 8007ec0:	f000 f9fa 	bl	80082b8 <ipv4DumpHeader>

   //Get the offset to the payload
   offset = header->headerLength * 4;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	61bb      	str	r3, [r7, #24]
   //Compute the length of the payload
   length -= header->headerLength * 4;
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	623b      	str	r3, [r7, #32]

   //Form the IPv4 pseudo header
   pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	60bb      	str	r3, [r7, #8]
   pseudoHeader.ipv4Data.srcAddr = header->srcAddr;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	60fb      	str	r3, [r7, #12]
   pseudoHeader.ipv4Data.destAddr = header->destAddr;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	613b      	str	r3, [r7, #16]
   pseudoHeader.ipv4Data.reserved = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	753b      	strb	r3, [r7, #20]
   pseudoHeader.ipv4Data.protocol = header->protocol;
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	7a5b      	ldrb	r3, [r3, #9]
 8007efe:	757b      	strb	r3, [r7, #21]
   pseudoHeader.ipv4Data.length = htons(length);
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7f8 fb4b 	bl	80005a0 <swapInt16>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	82fb      	strh	r3, [r7, #22]
#if defined(IPV4_DATAGRAM_FORWARD_HOOK)
   IPV4_DATAGRAM_FORWARD_HOOK(interface, &pseudoHeader, buffer, offset);
#endif

   //Check the protocol field
   switch(header->protocol)
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	7a5b      	ldrb	r3, [r3, #9]
 8007f12:	2b06      	cmp	r3, #6
 8007f14:	d00e      	beq.n	8007f34 <ipv4ProcessDatagram+0x98>
 8007f16:	2b11      	cmp	r3, #17
 8007f18:	d016      	beq.n	8007f48 <ipv4ProcessDatagram+0xac>
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d11e      	bne.n	8007f5c <ipv4ProcessDatagram+0xc0>
   {
   //ICMP protocol?
   case IPV4_PROTOCOL_ICMP:
      //Process incoming ICMP message
      icmpProcessMessage(interface, &pseudoHeader.ipv4Data, buffer, offset);
 8007f1e:	f107 0308 	add.w	r3, r7, #8
 8007f22:	1d19      	adds	r1, r3, #4
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff fbb8 	bl	800769e <icmpProcessMessage>
#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Allow raw sockets to process ICMP messages
      rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset);
#endif
      //No error to report
      error = NO_ERROR;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Continue processing
      break;
 8007f32:	e016      	b.n	8007f62 <ipv4ProcessDatagram+0xc6>

#if (TCP_SUPPORT == ENABLED)
   //TCP protocol?
   case IPV4_PROTOCOL_TCP:
      //Process incoming TCP segment
      tcpProcessSegment(interface, &pseudoHeader, buffer, offset);
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7fb fc59 	bl	80037f4 <tcpProcessSegment>
      //No error to report
      error = NO_ERROR;
 8007f42:	2300      	movs	r3, #0
 8007f44:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Continue processing
      break;
 8007f46:	e00c      	b.n	8007f62 <ipv4ProcessDatagram+0xc6>

#if (UDP_SUPPORT == ENABLED)
   //UDP protocol?
   case IPV4_PROTOCOL_UDP:
      //Process incoming UDP datagram
      error = udpProcessDatagram(interface, &pseudoHeader, buffer, offset);
 8007f48:	f107 0108 	add.w	r1, r7, #8
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7fe fa29 	bl	80063a8 <udpProcessDatagram>
 8007f56:	4603      	mov	r3, r0
 8007f58:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Continue processing
      break;
 8007f5a:	e002      	b.n	8007f62 <ipv4ProcessDatagram+0xc6>
#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Allow raw sockets to process IPv4 packets
      error = rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset);
#else
      //Report an error
      error = ERROR_PROTOCOL_UNREACHABLE;
 8007f5c:	23d1      	movs	r3, #209	; 0xd1
 8007f5e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
      //Continue processing
      break;
 8007f60:	bf00      	nop
   }

   //Unreachable protocol?
   if(error == ERROR_PROTOCOL_UNREACHABLE)
 8007f62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f64:	2bd1      	cmp	r3, #209	; 0xd1
 8007f66:	d10e      	bne.n	8007f86 <ipv4ProcessDatagram+0xea>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 8007f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 ffd3 	bl	8008f18 <ipv4UpdateErrorStats>

      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 8007f72:	2300      	movs	r3, #0
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	2103      	movs	r1, #3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff fc88 	bl	8007896 <icmpSendErrorMessage>
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInDelivers, 1);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInDelivers, 1);
   }

   //Unreachable port?
   if(error == ERROR_PORT_UNREACHABLE)
 8007f86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f88:	2bd2      	cmp	r3, #210	; 0xd2
 8007f8a:	d10b      	bne.n	8007fa4 <ipv4ProcessDatagram+0x108>
   {
      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2300      	movs	r3, #0
 8007f96:	2203      	movs	r2, #3
 8007f98:	2103      	movs	r1, #3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff fc7b 	bl	8007896 <icmpSendErrorMessage>
 8007fa0:	e000      	b.n	8007fa4 <ipv4ProcessDatagram+0x108>
      return;
 8007fa2:	bf00      	nop
         ICMP_CODE_PORT_UNREACHABLE, 0, buffer, 0);
   }
}
 8007fa4:	3728      	adds	r7, #40	; 0x28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <ipv4SendDatagram>:
 * @return Error code
 **/

error_t ipv4SendDatagram(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, uint_t flags)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b08c      	sub	sp, #48	; 0x30
 8007fae:	af04      	add	r7, sp, #16
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	607a      	str	r2, [r7, #4]
 8007fb6:	603b      	str	r3, [r7, #0]
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutRequests, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutRequests, 1);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutRequests, 1);

   //Retrieve the length of payload
   length = netBufferGetLength(buffer) - offset;
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7fa fa6d 	bl	8002498 <netBufferGetLength>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	61bb      	str	r3, [r7, #24]

   //Check whether the TTL value is zero
   if((flags & IP_FLAG_TTL) == 0)
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d103      	bne.n	8007fd6 <ipv4SendDatagram+0x2c>
   {
      //Use default Time-To-Live value
      flags |= IPV4_DEFAULT_TTL;
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   }

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   id = interface->ipv4Context.identification++;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	b291      	uxth	r1, r2
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	f8a2 1098 	strh.w	r1, [r2, #152]	; 0x98
 8007fe6:	82fb      	strh	r3, [r7, #22]

   //If the payload length is smaller than the network
   //interface MTU then no fragmentation is needed
   if((length + sizeof(Ipv4Header)) <= interface->ipv4Context.linkMtu)
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f103 0214 	add.w	r2, r3, #20
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d80e      	bhi.n	8008016 <ipv4SendDatagram+0x6c>
   {
      //Send data as is
      error = ipv4SendPacket(interface, pseudoHeader, id, 0, buffer, offset,
 8007ff8:	8afa      	ldrh	r2, [r7, #22]
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	9302      	str	r3, [sp, #8]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	2300      	movs	r3, #0
 8008008:	68b9      	ldr	r1, [r7, #8]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f814 	bl	8008038 <ipv4SendPacket>
 8008010:	4603      	mov	r3, r0
 8008012:	83fb      	strh	r3, [r7, #30]
 8008014:	e00b      	b.n	800802e <ipv4SendDatagram+0x84>
   //then the device must fragment the data
   else
   {
#if (IPV4_FRAG_SUPPORT == ENABLED)
      //Fragment IP datagram into smaller packets
      error = ipv4FragmentDatagram(interface, pseudoHeader, id, buffer, offset,
 8008016:	8afa      	ldrh	r2, [r7, #22]
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f951 	bl	80082cc <ipv4FragmentDatagram>
 800802a:	4603      	mov	r3, r0
 800802c:	83fb      	strh	r3, [r7, #30]
      error = ERROR_MESSAGE_TOO_LONG;
#endif
   }

   //Return status code
   return error;
 800802e:	8bfb      	ldrh	r3, [r7, #30]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3720      	adds	r7, #32
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <ipv4SendPacket>:
 **/

error_t ipv4SendPacket(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   uint16_t fragId, size_t fragOffset, NetBuffer *buffer, size_t offset,
   uint_t flags)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	80fb      	strh	r3, [r7, #6]
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;
#endif

   //Is there enough space for the IPv4 header?
   if(offset < sizeof(Ipv4Header))
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	2b13      	cmp	r3, #19
 800804c:	d801      	bhi.n	8008052 <ipv4SendPacket+0x1a>
      return ERROR_INVALID_PARAMETER;
 800804e:	2302      	movs	r3, #2
 8008050:	e09a      	b.n	8008188 <ipv4SendPacket+0x150>

   //Make room for the header
   offset -= sizeof(Ipv4Header);
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	3b14      	subs	r3, #20
 8008056:	62fb      	str	r3, [r7, #44]	; 0x2c
   //Calculate the size of the entire packet, including header and data
   length = netBufferGetLength(buffer) - offset;
 8008058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800805a:	f7fa fa1d 	bl	8002498 <netBufferGetLength>
 800805e:	4602      	mov	r2, r0
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	61bb      	str	r3, [r7, #24]

   //Point to the IPv4 header
   packet = netBufferAt(buffer, offset);
 8008066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800806a:	f7fa fadd 	bl	8002628 <netBufferAt>
 800806e:	6178      	str	r0, [r7, #20]

   //Format IPv4 header
   packet->version = IPV4_VERSION;
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	7813      	ldrb	r3, [r2, #0]
 8008074:	2104      	movs	r1, #4
 8008076:	f361 1307 	bfi	r3, r1, #4, #4
 800807a:	7013      	strb	r3, [r2, #0]
   packet->headerLength = 5;
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	7813      	ldrb	r3, [r2, #0]
 8008080:	2105      	movs	r1, #5
 8008082:	f361 0303 	bfi	r3, r1, #0, #4
 8008086:	7013      	strb	r3, [r2, #0]
   packet->typeOfService = 0;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2200      	movs	r2, #0
 800808c:	705a      	strb	r2, [r3, #1]
   packet->totalLength = htons(length);
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	b29b      	uxth	r3, r3
 8008092:	4618      	mov	r0, r3
 8008094:	f7f8 fa84 	bl	80005a0 <swapInt16>
 8008098:	4603      	mov	r3, r0
 800809a:	461a      	mov	r2, r3
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	805a      	strh	r2, [r3, #2]
   packet->identification = htons(fragId);
 80080a0:	88fb      	ldrh	r3, [r7, #6]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7f8 fa7c 	bl	80005a0 <swapInt16>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	809a      	strh	r2, [r3, #4]
   packet->fragmentOffset = htons(fragOffset);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7f8 fa73 	bl	80005a0 <swapInt16>
 80080ba:	4603      	mov	r3, r0
 80080bc:	461a      	mov	r2, r3
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	80da      	strh	r2, [r3, #6]
   packet->timeToLive = flags & IP_FLAG_TTL;
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	721a      	strb	r2, [r3, #8]
   packet->protocol = pseudoHeader->protocol;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	7a5a      	ldrb	r2, [r3, #9]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	725a      	strb	r2, [r3, #9]
   packet->headerChecksum = 0;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2200      	movs	r2, #0
 80080d6:	729a      	strb	r2, [r3, #10]
 80080d8:	2200      	movs	r2, #0
 80080da:	72da      	strb	r2, [r3, #11]
   packet->srcAddr = pseudoHeader->srcAddr;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	60da      	str	r2, [r3, #12]
   packet->destAddr = pseudoHeader->destAddr;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	611a      	str	r2, [r3, #16]

   //Calculate IP header checksum
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
      packet->headerLength * 4);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	009b      	lsls	r3, r3, #2
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 80080f8:	461a      	mov	r2, r3
 80080fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fe:	f7f9 fb81 	bl	8001804 <ipCalcChecksumEx>
 8008102:	4603      	mov	r3, r0
 8008104:	461a      	mov	r2, r3
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	815a      	strh	r2, [r3, #10]

   //Ensure the source address is valid
   error = ipv4CheckSourceAddr(interface, pseudoHeader->srcAddr);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4619      	mov	r1, r3
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 fc59 	bl	80089c8 <ipv4CheckSourceAddr>
 8008116:	4603      	mov	r3, r0
 8008118:	83fb      	strh	r3, [r7, #30]
   //Invalid source address?
   if(error)
 800811a:	8bfb      	ldrh	r3, [r7, #30]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <ipv4SendPacket+0xec>
      return error;
 8008120:	8bfb      	ldrh	r3, [r7, #30]
 8008122:	e031      	b.n	8008188 <ipv4SendPacket+0x150>

   //Check destination address
   if(pseudoHeader->destAddr == IPV4_UNSPECIFIED_ADDR)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <ipv4SendPacket+0xfa>
   {
      //The unspecified address must not appear on the public Internet
      error = ERROR_INVALID_ADDRESS;
 800812c:	23e4      	movs	r3, #228	; 0xe4
 800812e:	83fb      	strh	r3, [r7, #30]
 8008130:	e029      	b.n	8008186 <ipv4SendPacket+0x14e>
   }
   else if(ipv4IsLocalHostAddr(pseudoHeader->destAddr))
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fe2c 	bl	8008d94 <ipv4IsLocalHostAddr>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <ipv4SendPacket+0x112>
         }
      }
#else
      //Addresses within the entire 127.0.0.0/8 block do not legitimately
      //appear on any network anywhere
      error = ERROR_NO_ROUTE;
 8008142:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008146:	83fb      	strh	r3, [r7, #30]
 8008148:	e01d      	b.n	8008186 <ipv4SendPacket+0x14e>
      }
      else
#endif
#if (PPP_SUPPORT == ENABLED)
      //PPP interface?
      if(interface->nicDriver != NULL &&
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814e:	2b00      	cmp	r3, #0
 8008150:	d017      	beq.n	8008182 <ipv4SendPacket+0x14a>
         interface->nicDriver->type == NIC_TYPE_PPP)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008156:	781b      	ldrb	r3, [r3, #0]
      if(interface->nicDriver != NULL &&
 8008158:	2b02      	cmp	r3, #2
 800815a:	d112      	bne.n	8008182 <ipv4SendPacket+0x14a>
      {
         //Update IP statistics
         ipv4UpdateOutStats(interface, pseudoHeader->destAddr, length);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	4619      	mov	r1, r3
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 fec6 	bl	8008ef6 <ipv4UpdateOutStats>

         //Debug message
         TRACE_INFO("Sending IPv4 packet (%" PRIuSIZE " bytes)...\r\n", length);
         //Dump IP header contents for debugging purpose
         ipv4DumpHeader(packet);
 800816a:	6978      	ldr	r0, [r7, #20]
 800816c:	f000 f8a4 	bl	80082b8 <ipv4DumpHeader>

         //Send PPP frame
         error = pppSendFrame(interface, buffer, offset, PPP_PROTOCOL_IP);
 8008170:	2321      	movs	r3, #33	; 0x21
 8008172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f004 fa82 	bl	800c680 <pppSendFrame>
 800817c:	4603      	mov	r3, r0
 800817e:	83fb      	strh	r3, [r7, #30]
 8008180:	e001      	b.n	8008186 <ipv4SendPacket+0x14e>
      else
#endif
      //Unknown interface type?
      {
         //Report an error
         error = ERROR_INVALID_INTERFACE;
 8008182:	2307      	movs	r3, #7
 8008184:	83fb      	strh	r3, [r7, #30]
      }
   }

   //Return status code
   return error;
 8008186:	8bfb      	ldrh	r3, [r7, #30]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <ipv4StringToAddr>:
 * @param[out] ipAddr Binary representation of the IPv4 address
 * @return Error code
 **/

error_t ipv4StringToAddr(const char_t *str, Ipv4Addr *ipAddr)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
   error_t error;
   int_t i = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	613b      	str	r3, [r7, #16]
   int_t value = -1;
 800819e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081a2:	60fb      	str	r3, [r7, #12]

   //Parse input string
   while(1)
   {
      //Decimal digit found?
      if(isdigit((uint8_t) *str))
 80081a4:	f011 ff06 	bl	8019fb4 <__locale_ctype_ptr>
 80081a8:	4602      	mov	r2, r0
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	3301      	adds	r3, #1
 80081b0:	4413      	add	r3, r2
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d015      	beq.n	80081e8 <ipv4StringToAddr+0x58>
      {
         //First digit to be decoded?
         if(value < 0)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	da01      	bge.n	80081c6 <ipv4StringToAddr+0x36>
            value = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]

         //Update the value of the current byte
         value = (value * 10) + (*str - '0');
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	461a      	mov	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	3b30      	subs	r3, #48	; 0x30
 80081d8:	4413      	add	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]

         //The resulting value shall be in range 0 to 255
         if(value > 255)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2bff      	cmp	r3, #255	; 0xff
 80081e0:	dd35      	ble.n	800824e <ipv4StringToAddr+0xbe>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 80081e2:	2369      	movs	r3, #105	; 0x69
 80081e4:	82fb      	strh	r3, [r7, #22]
            break;
 80081e6:	e036      	b.n	8008256 <ipv4StringToAddr+0xc6>
         }
      }
      //Dot separator found?
      else if(*str == '.' && i < 4)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b2e      	cmp	r3, #46	; 0x2e
 80081ee:	d115      	bne.n	800821c <ipv4StringToAddr+0x8c>
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	dc12      	bgt.n	800821c <ipv4StringToAddr+0x8c>
      {
         //Each dot must be preceded by a valid number
         if(value < 0)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	da02      	bge.n	8008202 <ipv4StringToAddr+0x72>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 80081fc:	2369      	movs	r3, #105	; 0x69
 80081fe:	82fb      	strh	r3, [r7, #22]
            break;
 8008200:	e029      	b.n	8008256 <ipv4StringToAddr+0xc6>
         }

         //Save the current byte
         ((uint8_t *) ipAddr)[i++] = value;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	613a      	str	r2, [r7, #16]
 8008208:	461a      	mov	r2, r3
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	4413      	add	r3, r2
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	701a      	strb	r2, [r3, #0]
         //Prepare to decode the next byte
         value = -1;
 8008214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	e018      	b.n	800824e <ipv4StringToAddr+0xbe>
      }
      //End of string detected?
      else if(*str == '\0' && i == 3)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d111      	bne.n	8008248 <ipv4StringToAddr+0xb8>
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2b03      	cmp	r3, #3
 8008228:	d10e      	bne.n	8008248 <ipv4StringToAddr+0xb8>
      {
         //The NULL character must be preceded by a valid number
         if(value < 0)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	da02      	bge.n	8008236 <ipv4StringToAddr+0xa6>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8008230:	2369      	movs	r3, #105	; 0x69
 8008232:	82fb      	strh	r3, [r7, #22]
            //The conversion succeeded
            error = NO_ERROR;
         }

         //We are done
         break;
 8008234:	e00f      	b.n	8008256 <ipv4StringToAddr+0xc6>
            ((uint8_t *) ipAddr)[i] = value;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	4413      	add	r3, r2
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]
            error = NO_ERROR;
 8008242:	2300      	movs	r3, #0
 8008244:	82fb      	strh	r3, [r7, #22]
         break;
 8008246:	e006      	b.n	8008256 <ipv4StringToAddr+0xc6>
      }
      //Invalid character...
      else
      {
         //The conversion failed
         error = ERROR_INVALID_SYNTAX;
 8008248:	2369      	movs	r3, #105	; 0x69
 800824a:	82fb      	strh	r3, [r7, #22]
         break;
 800824c:	e003      	b.n	8008256 <ipv4StringToAddr+0xc6>
      }

      //Point to the next character
      str++;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3301      	adds	r3, #1
 8008252:	607b      	str	r3, [r7, #4]
      if(isdigit((uint8_t) *str))
 8008254:	e7a6      	b.n	80081a4 <ipv4StringToAddr+0x14>
   }

   //Return status code
   return error;
 8008256:	8afb      	ldrh	r3, [r7, #22]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <ipv4AddrToString>:
 * @param[out] str NULL-terminated string representing the IPv4 address
 * @return Pointer to the formatted string
 **/

char_t *ipv4AddrToString(Ipv4Addr ipAddr, char_t *str)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
   uint8_t *p;
   static char_t buffer[16];

   //If the NULL pointer is given as parameter, then the internal buffer is used
   if(str == NULL)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <ipv4AddrToString+0x14>
      str = buffer;
 8008270:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <ipv4AddrToString+0x50>)
 8008272:	603b      	str	r3, [r7, #0]

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
 8008274:	1d3b      	adds	r3, r7, #4
 8008276:	60fb      	str	r3, [r7, #12]
   //Format IPv4 address
   sprintf(str, "%" PRIu8 ".%" PRIu8 ".%" PRIu8 ".%" PRIu8 "", p[0], p[1], p[2], p[3]);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	4619      	mov	r1, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3301      	adds	r3, #1
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3302      	adds	r3, #2
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3303      	adds	r3, #3
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	9200      	str	r2, [sp, #0]
 8008298:	4603      	mov	r3, r0
 800829a:	460a      	mov	r2, r1
 800829c:	4905      	ldr	r1, [pc, #20]	; (80082b4 <ipv4AddrToString+0x54>)
 800829e:	6838      	ldr	r0, [r7, #0]
 80082a0:	f012 fa64 	bl	801a76c <siprintf>

   //Return a pointer to the formatted string
   return str;
 80082a4:	683b      	ldr	r3, [r7, #0]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	2000c328 	.word	0x2000c328
 80082b4:	0801b428 	.word	0x0801b428

080082b8 <ipv4DumpHeader>:
 * @brief Dump IPv4 header for debugging purpose
 * @param[in] ipHeader Pointer to the IPv4 header
 **/

void ipv4DumpHeader(const Ipv4Header *ipHeader)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Time To Live = %" PRIu8 "\r\n", ipHeader->timeToLive);
   TRACE_DEBUG("  Protocol = %" PRIu8 "\r\n", ipHeader->protocol);
   TRACE_DEBUG("  Header Checksum = 0x%04" PRIX16 "\r\n", ntohs(ipHeader->headerChecksum));
   TRACE_DEBUG("  Src Addr = %s\r\n", ipv4AddrToString(ipHeader->srcAddr, NULL));
   TRACE_DEBUG("  Dest Addr = %s\r\n", ipv4AddrToString(ipHeader->destAddr, NULL));
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <ipv4FragmentDatagram>:
 **/

error_t ipv4FragmentDatagram(NetInterface *interface,
   Ipv4PseudoHeader *pseudoHeader, uint16_t id, const NetBuffer *payload,
   size_t payloadOffset, uint_t flags)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b090      	sub	sp, #64	; 0x40
 80082d0:	af04      	add	r7, sp, #16
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	4613      	mov	r3, r2
 80082da:	80fb      	strh	r3, [r7, #6]
   //Number of IP datagrams that would require fragmentation in order to be transmitted
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragReqds, 1);

   //Retrieve the length of the payload
   payloadLen = netBufferGetLength(payload) - payloadOffset;
 80082dc:	6838      	ldr	r0, [r7, #0]
 80082de:	f7fa f8db 	bl	8002498 <netBufferGetLength>
 80082e2:	4602      	mov	r2, r0
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	623b      	str	r3, [r7, #32]

   //Allocate a memory buffer to hold IP fragments
   fragment = ipAllocBuffer(0, &fragmentOffset);
 80082ea:	f107 0314 	add.w	r3, r7, #20
 80082ee:	4619      	mov	r1, r3
 80082f0:	2000      	movs	r0, #0
 80082f2:	f7f9 fb2f 	bl	8001954 <ipAllocBuffer>
 80082f6:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(!fragment)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <ipv4FragmentDatagram+0x36>
      return ERROR_OUT_OF_MEMORY;
 80082fe:	2364      	movs	r3, #100	; 0x64
 8008300:	e06b      	b.n	80083da <ipv4FragmentDatagram+0x10e>

   //Determine the maximum payload size for fragmented packets
   maxFragmentSize = interface->ipv4Context.linkMtu - sizeof(Ipv4Header);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008308:	3b14      	subs	r3, #20
 800830a:	61bb      	str	r3, [r7, #24]
   //The size shall be a multiple of 8-byte blocks
   maxFragmentSize -= (maxFragmentSize % 8);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f023 0307 	bic.w	r3, r3, #7
 8008312:	61bb      	str	r3, [r7, #24]

   //Initialize error code
   error = NO_ERROR;
 8008314:	2300      	movs	r3, #0
 8008316:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Split the payload into multiple IP fragments
   for(offset = 0; offset < payloadLen; offset += length)
 8008318:	2300      	movs	r3, #0
 800831a:	62bb      	str	r3, [r7, #40]	; 0x28
 800831c:	e051      	b.n	80083c2 <ipv4FragmentDatagram+0xf6>
   {
      //Flush the contents of the fragment
      error = netBufferSetLength(fragment, fragmentOffset);
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	4619      	mov	r1, r3
 8008322:	69f8      	ldr	r0, [r7, #28]
 8008324:	f7fa f8da 	bl	80024dc <netBufferSetLength>
 8008328:	4603      	mov	r3, r0
 800832a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Sanity check
      if(error)
 800832c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800832e:	2b00      	cmp	r3, #0
 8008330:	d14c      	bne.n	80083cc <ipv4FragmentDatagram+0x100>
         break;

      //Process the last fragment?
      if((payloadLen - offset) <= maxFragmentSize)
 8008332:	6a3a      	ldr	r2, [r7, #32]
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	429a      	cmp	r2, r3
 800833c:	d31d      	bcc.n	800837a <ipv4FragmentDatagram+0xae>
      {
         //Size of the current fragment
         length = payloadLen - offset;
 800833e:	6a3a      	ldr	r2, [r7, #32]
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 8008346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	441a      	add	r2, r3
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	69f8      	ldr	r0, [r7, #28]
 8008352:	f7fa f99c 	bl	800268e <netBufferConcat>

         //Do not set the MF flag for the last fragment
         error = ipv4SendPacket(interface, pseudoHeader, id,
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	08d8      	lsrs	r0, r3, #3
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	88f9      	ldrh	r1, [r7, #6]
 800835e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008360:	9202      	str	r2, [sp, #8]
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	4603      	mov	r3, r0
 800836a:	460a      	mov	r2, r1
 800836c:	68b9      	ldr	r1, [r7, #8]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff fe62 	bl	8008038 <ipv4SendPacket>
 8008374:	4603      	mov	r3, r0
 8008376:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008378:	e01c      	b.n	80083b4 <ipv4FragmentDatagram+0xe8>
            offset / 8, fragment, fragmentOffset, flags);
      }
      else
      {
         //Size of the current fragment (must be a multiple of 8-byte blocks)
         length = maxFragmentSize;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 800837e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	441a      	add	r2, r3
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	69f8      	ldr	r0, [r7, #28]
 800838a:	f7fa f980 	bl	800268e <netBufferConcat>

         //Fragmented packets must have the MF flag set
         error = ipv4SendPacket(interface, pseudoHeader, id,
            IPV4_FLAG_MF | (offset / 8), fragment, fragmentOffset, flags);
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	08db      	lsrs	r3, r3, #3
         error = ipv4SendPacket(interface, pseudoHeader, id,
 8008392:	f443 5000 	orr.w	r0, r3, #8192	; 0x2000
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	88f9      	ldrh	r1, [r7, #6]
 800839a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800839c:	9202      	str	r2, [sp, #8]
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	4603      	mov	r3, r0
 80083a6:	460a      	mov	r2, r1
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff fe44 	bl	8008038 <ipv4SendPacket>
 80083b0:	4603      	mov	r3, r0
 80083b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      //Failed to send current IP packet?
      if(error)
 80083b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <ipv4FragmentDatagram+0x104>
   for(offset = 0; offset < payloadLen; offset += length)
 80083ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	4413      	add	r3, r2
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80083c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d3a9      	bcc.n	800831e <ipv4FragmentDatagram+0x52>
 80083ca:	e002      	b.n	80083d2 <ipv4FragmentDatagram+0x106>
         break;
 80083cc:	bf00      	nop
 80083ce:	e000      	b.n	80083d2 <ipv4FragmentDatagram+0x106>
         break;
 80083d0:	bf00      	nop
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragOKs, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragOKs, 1);
   }

   //Free previously allocated memory
   netBufferFree(fragment);
 80083d2:	69f8      	ldr	r0, [r7, #28]
 80083d4:	f7fa f851 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 80083d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3730      	adds	r7, #48	; 0x30
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <ipv4ReassembleDatagram>:
 * @param[in] length Packet length including header and payload
 **/

void ipv4ReassembleDatagram(NetInterface *interface,
   const Ipv4Header *packet, size_t length)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b08c      	sub	sp, #48	; 0x30
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
   MIB2_INC_COUNTER32(ipGroup.ipReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmReqds, 1);

   //Get the length of the payload
   length -= packet->headerLength * 4;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	461a      	mov	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	607b      	str	r3, [r7, #4]
   //Convert the fragment offset from network byte order
   offset = ntohs(packet->fragmentOffset);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	88db      	ldrh	r3, [r3, #6]
 8008406:	b29b      	uxth	r3, r3
 8008408:	4618      	mov	r0, r3
 800840a:	f7f8 f8c9 	bl	80005a0 <swapInt16>
 800840e:	4603      	mov	r3, r0
 8008410:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Every fragment except the last must contain a multiple of 8 bytes of data
   if((offset & IPV4_FLAG_MF) && (length % 8))
 8008412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <ipv4ReassembleDatagram+0x46>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	2b00      	cmp	r3, #0
 8008424:	f040 816f 	bne.w	8008706 <ipv4ReassembleDatagram+0x324>
      //Drop the incoming fragment
      return;
   }

   //Calculate the index of the first byte
   dataFirst = (offset & IPV4_OFFSET_MASK) * 8;
 8008428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800842a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800842e:	b29b      	uxth	r3, r3
 8008430:	00db      	lsls	r3, r3, #3
 8008432:	84bb      	strh	r3, [r7, #36]	; 0x24
   //Calculate the index immediately following the last byte
   dataLast = dataFirst + (uint16_t) length;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	b29a      	uxth	r2, r3
 8008438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800843a:	4413      	add	r3, r2
 800843c:	847b      	strh	r3, [r7, #34]	; 0x22

   //Search for a matching IP datagram being reassembled
   frag = ipv4SearchFragQueue(interface, packet);
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 f9c7 	bl	80087d4 <ipv4SearchFragQueue>
 8008446:	61f8      	str	r0, [r7, #28]

   //No matching entry in the reassembly queue?
   if(frag == NULL)
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 815d 	beq.w	800870a <ipv4ReassembleDatagram+0x328>
      //Drop the incoming fragment
      return;
   }

   //The very first fragment requires special handling
   if(!(offset & IPV4_OFFSET_MASK))
 8008450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008452:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008456:	2b00      	cmp	r3, #0
 8008458:	d132      	bne.n	80084c0 <ipv4ReassembleDatagram+0xde>
   {
      //Calculate the length of the IP header including options
      frag->headerLength = packet->headerLength * 4;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008462:	b2db      	uxtb	r3, r3
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	461a      	mov	r2, r3
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	605a      	str	r2, [r3, #4]

      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + frag->dataLen) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	4413      	add	r3, r2
 8008476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800847a:	d906      	bls.n	800848a <ipv4ReassembleDatagram+0xa8>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	3310      	adds	r3, #16
 8008480:	2100      	movs	r1, #0
 8008482:	4618      	mov	r0, r3
 8008484:	f7fa f82a 	bl	80024dc <netBufferSetLength>
         //Exit immediately
         return;
 8008488:	e140      	b.n	800870c <ipv4ReassembleDatagram+0x32a>
      }

      //Make sure the IP header entirely fits in the first chunk
      if(frag->headerLength > frag->buffer.chunk[0].size)
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	8bd2      	ldrh	r2, [r2, #30]
 8008492:	4293      	cmp	r3, r2
 8008494:	d906      	bls.n	80084a4 <ipv4ReassembleDatagram+0xc2>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	3310      	adds	r3, #16
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f7fa f81d 	bl	80024dc <netBufferSetLength>
         //Exit immediately
         return;
 80084a2:	e133      	b.n	800870c <ipv4ReassembleDatagram+0x32a>
      }

      //Fix the length of the first chunk
      frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	839a      	strh	r2, [r3, #28]
      //Always take the IP header from the first fragment
      netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	f103 0010 	add.w	r0, r3, #16
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	2100      	movs	r1, #0
 80084bc:	f7fa fa7f 	bl	80029be <netBufferWrite>
   }

   //It may be necessary to increase the size of the buffer...
   if(dataLast > frag->dataLen)
 80084c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d927      	bls.n	800851a <ipv4ReassembleDatagram+0x138>
   {
      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + dataLast) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084d0:	4413      	add	r3, r2
 80084d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d6:	d906      	bls.n	80084e6 <ipv4ReassembleDatagram+0x104>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	3310      	adds	r3, #16
 80084dc:	2100      	movs	r1, #0
 80084de:	4618      	mov	r0, r3
 80084e0:	f7f9 fffc 	bl	80024dc <netBufferSetLength>
         //Exit immediately
         return;
 80084e4:	e112      	b.n	800870c <ipv4ReassembleDatagram+0x32a>
      }

      //Adjust the size of the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + dataLast + sizeof(Ipv4HoleDesc));
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084f2:	4413      	add	r3, r2
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 80084f4:	3306      	adds	r3, #6
 80084f6:	4619      	mov	r1, r3
 80084f8:	f7f9 fff0 	bl	80024dc <netBufferSetLength>
 80084fc:	4603      	mov	r3, r0
 80084fe:	837b      	strh	r3, [r7, #26]

      //Any error to report?
      if(error)
 8008500:	8b7b      	ldrh	r3, [r7, #26]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d006      	beq.n	8008514 <ipv4ReassembleDatagram+0x132>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	3310      	adds	r3, #16
 800850a:	2100      	movs	r1, #0
 800850c:	4618      	mov	r0, r3
 800850e:	f7f9 ffe5 	bl	80024dc <netBufferSetLength>
         //Exit immediately
         return;
 8008512:	e0fb      	b.n	800870c <ipv4ReassembleDatagram+0x32a>
      }

      //Actual length of the payload
      frag->dataLen = dataLast;
 8008514:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	609a      	str	r2, [r3, #8]
   }

   //Select the first hole descriptor from the list
   hole = ipv4FindHole(frag, frag->firstHole);
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	899b      	ldrh	r3, [r3, #12]
 800851e:	4619      	mov	r1, r3
 8008520:	69f8      	ldr	r0, [r7, #28]
 8008522:	f000 fa32 	bl	800898a <ipv4FindHole>
 8008526:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Keep track of the previous hole in the list
   prevHole = NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28

   //Iterate through the hole descriptors
   while(hole != NULL)
 800852c:	e08b      	b.n	8008646 <ipv4ReassembleDatagram+0x264>
   {
      //Save lower and upper boundaries for later use
      uint16_t holeFirst = hole->first;
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	781a      	ldrb	r2, [r3, #0]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	4313      	orrs	r3, r2
 8008538:	827b      	strh	r3, [r7, #18]
      uint16_t holeLast = hole->last;
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	789a      	ldrb	r2, [r3, #2]
 800853e:	78db      	ldrb	r3, [r3, #3]
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	4313      	orrs	r3, r2
 8008544:	823b      	strh	r3, [r7, #16]

      //Check whether the newly arrived fragment interacts with this hole
      //in some way
      if(dataFirst < holeLast && dataLast > holeFirst)
 8008546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008548:	8a3b      	ldrh	r3, [r7, #16]
 800854a:	429a      	cmp	r2, r3
 800854c:	d269      	bcs.n	8008622 <ipv4ReassembleDatagram+0x240>
 800854e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008550:	8a7b      	ldrh	r3, [r7, #18]
 8008552:	429a      	cmp	r2, r3
 8008554:	d965      	bls.n	8008622 <ipv4ReassembleDatagram+0x240>
      {
         //The current descriptor is no longer valid. We will destroy it,
         //and in the next two steps, we will determine whether or not it
         //is necessary to create any new hole descriptors
         if(prevHole != NULL)
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <ipv4ReassembleDatagram+0x186>
            prevHole->next = hole->next;
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	889b      	ldrh	r3, [r3, #4]
 8008560:	b29a      	uxth	r2, r3
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	809a      	strh	r2, [r3, #4]
 8008566:	e004      	b.n	8008572 <ipv4ReassembleDatagram+0x190>
         else
            frag->firstHole = hole->next;
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	889b      	ldrh	r3, [r3, #4]
 800856c:	b29a      	uxth	r2, r3
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	819a      	strh	r2, [r3, #12]

         //Is there still a hole at the beginning of the segment?
         if(dataFirst > holeFirst)
 8008572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008574:	8a7b      	ldrh	r3, [r7, #18]
 8008576:	429a      	cmp	r2, r3
 8008578:	d924      	bls.n	80085c4 <ipv4ReassembleDatagram+0x1e2>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, holeFirst);
 800857a:	8a7b      	ldrh	r3, [r7, #18]
 800857c:	4619      	mov	r1, r3
 800857e:	69f8      	ldr	r0, [r7, #28]
 8008580:	f000 fa03 	bl	800898a <ipv4FindHole>
 8008584:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = holeFirst;
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	8a7a      	ldrh	r2, [r7, #18]
 800858a:	801a      	strh	r2, [r3, #0]
            hole->last = dataFirst;
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008590:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00a      	beq.n	80085ae <ipv4ReassembleDatagram+0x1cc>
            {
               hole->next = prevHole->next;
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	889b      	ldrh	r3, [r3, #4]
 800859c:	b29a      	uxth	r2, r3
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	809a      	strh	r2, [r3, #4]
 80085ac:	e008      	b.n	80085c0 <ipv4ReassembleDatagram+0x1de>
            }
            else
            {
               hole->next = frag->firstHole;
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	899a      	ldrh	r2, [r3, #12]
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28
         }

         //Is there still a hole at the end of the segment?
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 80085c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80085c6:	8a3b      	ldrh	r3, [r7, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d22d      	bcs.n	8008628 <ipv4ReassembleDatagram+0x246>
 80085cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d028      	beq.n	8008628 <ipv4ReassembleDatagram+0x246>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, dataLast);
 80085d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085d8:	4619      	mov	r1, r3
 80085da:	69f8      	ldr	r0, [r7, #28]
 80085dc:	f000 f9d5 	bl	800898a <ipv4FindHole>
 80085e0:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = dataLast;
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80085e6:	801a      	strh	r2, [r3, #0]
            hole->last = holeLast;
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	8a3a      	ldrh	r2, [r7, #16]
 80085ec:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <ipv4ReassembleDatagram+0x228>
            {
               hole->next = prevHole->next;
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	889b      	ldrh	r3, [r3, #4]
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	b29a      	uxth	r2, r3
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	809a      	strh	r2, [r3, #4]
 8008608:	e008      	b.n	800861c <ipv4ReassembleDatagram+0x23a>
            }
            else
            {
               hole->next = frag->firstHole;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	899a      	ldrh	r2, [r3, #12]
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	b29a      	uxth	r2, r3
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 8008620:	e002      	b.n	8008628 <ipv4ReassembleDatagram+0x246>
         }
      }
      else
      {
         //The newly arrived fragment does not interact with the current hole
         prevHole = hole;
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	62bb      	str	r3, [r7, #40]	; 0x28
 8008626:	e000      	b.n	800862a <ipv4ReassembleDatagram+0x248>
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 8008628:	bf00      	nop
      }

      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <ipv4ReassembleDatagram+0x256>
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	889b      	ldrh	r3, [r3, #4]
 8008634:	b29b      	uxth	r3, r3
 8008636:	e001      	b.n	800863c <ipv4ReassembleDatagram+0x25a>
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	899b      	ldrh	r3, [r3, #12]
 800863c:	4619      	mov	r1, r3
 800863e:	69f8      	ldr	r0, [r7, #28]
 8008640:	f000 f9a3 	bl	800898a <ipv4FindHole>
 8008644:	62f8      	str	r0, [r7, #44]	; 0x2c
   while(hole != NULL)
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	2b00      	cmp	r3, #0
 800864a:	f47f af70 	bne.w	800852e <ipv4ReassembleDatagram+0x14c>
   }

   //Copy data from the fragment to the reassembly buffer
   netBufferWrite((NetBuffer *) &frag->buffer,
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	f103 0010 	add.w	r0, r3, #16
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	685a      	ldr	r2, [r3, #4]
   netBufferWrite((NetBuffer *) &frag->buffer,
 8008658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800865a:	18d1      	adds	r1, r2, r3
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008664:	b2db      	uxtb	r3, r3
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	461a      	mov	r2, r3
   netBufferWrite((NetBuffer *) &frag->buffer,
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	441a      	add	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f7fa f9a5 	bl	80029be <netBufferWrite>

   //Dump hole descriptor list
   ipv4DumpHoleList(frag);
 8008674:	69f8      	ldr	r0, [r7, #28]
 8008676:	f000 f99d 	bl	80089b4 <ipv4DumpHoleList>

   //If the hole descriptor list is empty, the reassembly process is now complete
   if(!ipv4FindHole(frag, frag->firstHole))
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	899b      	ldrh	r3, [r3, #12]
 800867e:	4619      	mov	r1, r3
 8008680:	69f8      	ldr	r0, [r7, #28]
 8008682:	f000 f982 	bl	800898a <ipv4FindHole>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d13f      	bne.n	800870c <ipv4ReassembleDatagram+0x32a>
   {
      //Discard the extra hole descriptor that follows the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + frag->dataLen);
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	689b      	ldr	r3, [r3, #8]
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800869a:	4413      	add	r3, r2
 800869c:	4619      	mov	r1, r3
 800869e:	f7f9 ff1d 	bl	80024dc <netBufferSetLength>
 80086a2:	4603      	mov	r3, r0
 80086a4:	837b      	strh	r3, [r7, #26]

      //Check status code
      if(error)
 80086a6:	8b7b      	ldrh	r3, [r7, #26]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d125      	bne.n	80086f8 <ipv4ReassembleDatagram+0x316>
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);
      }
      else
      {
         //Point to the IP header
         Ipv4Header *datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	3310      	adds	r3, #16
 80086b0:	2100      	movs	r1, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7f9 ffb8 	bl	8002628 <netBufferAt>
 80086b8:	6178      	str	r0, [r7, #20]

         //Fix IP header
         datagram->totalLength = htons(frag->headerLength + frag->dataLen);
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	b29a      	uxth	r2, r3
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	4413      	add	r3, r2
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f7 ff68 	bl	80005a0 <swapInt16>
 80086d0:	4603      	mov	r3, r0
 80086d2:	461a      	mov	r2, r3
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	805a      	strh	r2, [r3, #2]
         datagram->fragmentOffset = 0;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2200      	movs	r2, #0
 80086dc:	719a      	strb	r2, [r3, #6]
 80086de:	2200      	movs	r2, #0
 80086e0:	71da      	strb	r2, [r3, #7]
         datagram->headerChecksum = 0;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2200      	movs	r2, #0
 80086e6:	729a      	strb	r2, [r3, #10]
 80086e8:	2200      	movs	r2, #0
 80086ea:	72da      	strb	r2, [r3, #11]
         MIB2_INC_COUNTER32(ipGroup.ipReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmOKs, 1);

         //Pass the original IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &frag->buffer);
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	3310      	adds	r3, #16
 80086f0:	4619      	mov	r1, r3
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fbd2 	bl	8007e9c <ipv4ProcessDatagram>
      }

      //Release previously allocated memory
      netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	3310      	adds	r3, #16
 80086fc:	2100      	movs	r1, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f7f9 feec 	bl	80024dc <netBufferSetLength>
 8008704:	e002      	b.n	800870c <ipv4ReassembleDatagram+0x32a>
      return;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <ipv4ReassembleDatagram+0x32a>
      return;
 800870a:	bf00      	nop
   }
}
 800870c:	3730      	adds	r7, #48	; 0x30
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <ipv4FragTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void ipv4FragTick(NetInterface *interface)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b08a      	sub	sp, #40	; 0x28
 8008716:	af02      	add	r7, sp, #8
 8008718:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv4HoleDesc *hole;

   //Get current time
   time = osGetSystemTime();
 800871a:	f7f8 f859 	bl	80007d0 <osGetSystemTime>
 800871e:	61b8      	str	r0, [r7, #24]

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008720:	2300      	movs	r3, #0
 8008722:	61fb      	str	r3, [r7, #28]
 8008724:	e04f      	b.n	80087c6 <ipv4FragTick+0xb4>
   {
      //Point to the current entry in the reassembly queue
      Ipv4FragDesc *frag = &interface->ipv4Context.fragQueue[i];
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	4413      	add	r3, r2
 8008738:	3308      	adds	r3, #8
 800873a:	617b      	str	r3, [r7, #20]

      //Make sure the entry is currently in use
      if(frag->buffer.chunkCount > 0)
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d03d      	beq.n	80087c0 <ipv4FragTick+0xae>
      {
         //If the timer runs out, the partially-reassembled datagram must be
         //discarded and ICMP Time Exceeded message sent to the source host
         if((time - frag->timestamp) >= IPV4_FRAG_TIME_TO_LIVE)
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8008750:	4293      	cmp	r3, r2
 8008752:	d935      	bls.n	80087c0 <ipv4FragTick+0xae>
         {
            //Debug message
            TRACE_INFO("IPv4 fragment reassembly timeout...\r\n");
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(frag->buffer.chunk[0].address);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff fdad 	bl	80082b8 <ipv4DumpHeader>
            MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

            //Point to the first hole descriptor
            hole = ipv4FindHole(frag, frag->firstHole);
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	899b      	ldrh	r3, [r3, #12]
 8008762:	4619      	mov	r1, r3
 8008764:	6978      	ldr	r0, [r7, #20]
 8008766:	f000 f910 	bl	800898a <ipv4FindHole>
 800876a:	6138      	str	r0, [r7, #16]

            //Make sure the fragment zero has been received
            //before sending an ICMP message
            if(hole != NULL && hole->first > 0)
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d020      	beq.n	80087b4 <ipv4FragTick+0xa2>
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b29b      	uxth	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01b      	beq.n	80087b4 <ipv4FragTick+0xa2>
            {
               //Fix the size of the reconstructed datagram
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f103 0010 	add.w	r0, r3, #16
                  frag->headerLength + hole->first);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	8812      	ldrh	r2, [r2, #0]
 800878a:	b292      	uxth	r2, r2
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800878c:	4413      	add	r3, r2
 800878e:	4619      	mov	r1, r3
 8008790:	f7f9 fea4 	bl	80024dc <netBufferSetLength>
 8008794:	4603      	mov	r3, r0
 8008796:	81fb      	strh	r3, [r7, #14]

               //Check status code
               if(!error)
 8008798:	89fb      	ldrh	r3, [r7, #14]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10a      	bne.n	80087b4 <ipv4FragTick+0xa2>
               {
                  //Send an ICMP Time Exceeded message
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
                     ICMP_CODE_REASSEMBLY_TIME_EXCEEDED, 0, (NetBuffer *) &frag->buffer, 0);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	3310      	adds	r3, #16
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
 80087a2:	2200      	movs	r2, #0
 80087a4:	9201      	str	r2, [sp, #4]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	2300      	movs	r3, #0
 80087aa:	2201      	movs	r2, #1
 80087ac:	210b      	movs	r1, #11
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff f871 	bl	8007896 <icmpSendErrorMessage>
               }
            }

            //Drop the partially reconstructed datagram
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	3310      	adds	r3, #16
 80087b8:	2100      	movs	r1, #0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7f9 fe8e 	bl	80024dc <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	3301      	adds	r3, #1
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d9ac      	bls.n	8008726 <ipv4FragTick+0x14>
         }
      }
   }
}
 80087cc:	bf00      	nop
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <ipv4SearchFragQueue>:
 * @return Matching fragment descriptor
 **/

Ipv4FragDesc *ipv4SearchFragQueue(NetInterface *interface,
   const Ipv4Header *packet)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
   Ipv4Header *datagram;
   Ipv4FragDesc *frag;
   Ipv4HoleDesc *hole;

   //Search for a matching IP datagram being reassembled
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 80087de:	2300      	movs	r3, #0
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	e03b      	b.n	800885c <ipv4SearchFragQueue+0x88>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	3308      	adds	r3, #8
 80087f8:	61bb      	str	r3, [r7, #24]

      //Check whether the current entry is used?
      if(frag->buffer.chunkCount > 0)
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d029      	beq.n	8008856 <ipv4SearchFragQueue+0x82>
      {
         //Point to the corresponding datagram
         datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	3310      	adds	r3, #16
 8008806:	2100      	movs	r1, #0
 8008808:	4618      	mov	r0, r3
 800880a:	f7f9 ff0d 	bl	8002628 <netBufferAt>
 800880e:	60f8      	str	r0, [r7, #12]

         //Check source and destination addresses
         if(datagram->srcAddr != packet->srcAddr)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	429a      	cmp	r2, r3
 800881a:	d115      	bne.n	8008848 <ipv4SearchFragQueue+0x74>
            continue;
         if(datagram->destAddr != packet->destAddr)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	429a      	cmp	r2, r3
 8008826:	d111      	bne.n	800884c <ipv4SearchFragQueue+0x78>
            continue;
         //Compare identification and protocol fields
         if(datagram->identification != packet->identification)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	889b      	ldrh	r3, [r3, #4]
 800882c:	b29a      	uxth	r2, r3
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	889b      	ldrh	r3, [r3, #4]
 8008832:	b29b      	uxth	r3, r3
 8008834:	429a      	cmp	r2, r3
 8008836:	d10b      	bne.n	8008850 <ipv4SearchFragQueue+0x7c>
            continue;
         if(datagram->protocol != packet->protocol)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	7a5a      	ldrb	r2, [r3, #9]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	7a5b      	ldrb	r3, [r3, #9]
 8008840:	429a      	cmp	r2, r3
 8008842:	d107      	bne.n	8008854 <ipv4SearchFragQueue+0x80>
            continue;

         //A matching entry has been found in the reassembly queue
         return frag;
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	e07d      	b.n	8008944 <ipv4SearchFragQueue+0x170>
            continue;
 8008848:	bf00      	nop
 800884a:	e004      	b.n	8008856 <ipv4SearchFragQueue+0x82>
            continue;
 800884c:	bf00      	nop
 800884e:	e002      	b.n	8008856 <ipv4SearchFragQueue+0x82>
            continue;
 8008850:	bf00      	nop
 8008852:	e000      	b.n	8008856 <ipv4SearchFragQueue+0x82>
            continue;
 8008854:	bf00      	nop
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	3301      	adds	r3, #1
 800885a:	61fb      	str	r3, [r7, #28]
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	2b03      	cmp	r3, #3
 8008860:	d9c0      	bls.n	80087e4 <ipv4SearchFragQueue+0x10>
      }
   }

   //If the current packet does not match an existing entry
   //in the reassembly queue, then create a new entry
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
 8008866:	e069      	b.n	800893c <ipv4SearchFragQueue+0x168>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 8008868:	69fa      	ldr	r2, [r7, #28]
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	011b      	lsls	r3, r3, #4
 8008872:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	4413      	add	r3, r2
 800887a:	3308      	adds	r3, #8
 800887c:	61bb      	str	r3, [r7, #24]

      //The current entry is free?
      if(!frag->buffer.chunkCount)
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d157      	bne.n	8008936 <ipv4SearchFragQueue+0x162>
      {
         //Number of chunks that comprise the reassembly buffer
         frag->buffer.maxChunkCount = arraysize(frag->buffer.chunk);
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2207      	movs	r2, #7
 800888a:	615a      	str	r2, [r3, #20]

         //Allocate sufficient memory to hold the IPv4 header and
         //the first hole descriptor
         error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	3310      	adds	r3, #16
 8008890:	f240 6106 	movw	r1, #1542	; 0x606
 8008894:	4618      	mov	r0, r3
 8008896:	f7f9 fe21 	bl	80024dc <netBufferSetLength>
 800889a:	4603      	mov	r3, r0
 800889c:	82fb      	strh	r3, [r7, #22]
            NET_MEM_POOL_BUFFER_SIZE + sizeof(Ipv4HoleDesc));

         //Failed to allocate memory?
         if(error)
 800889e:	8afb      	ldrh	r3, [r7, #22]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <ipv4SearchFragQueue+0xe0>
         {
            //Clean up side effects
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	3310      	adds	r3, #16
 80088a8:	2100      	movs	r1, #0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7f9 fe16 	bl	80024dc <netBufferSetLength>
            //Exit immediately
            return NULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	e047      	b.n	8008944 <ipv4SearchFragQueue+0x170>
         }

         //Initial length of the reconstructed datagram
         frag->headerLength = packet->headerLength * 4;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	461a      	mov	r2, r3
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	605a      	str	r2, [r3, #4]
         frag->dataLen = 0;
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	2200      	movs	r2, #0
 80088ca:	609a      	str	r2, [r3, #8]

         //Fix the length of the first chunk
         frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	839a      	strh	r2, [r3, #28]
         //Copy IPv4 header from the incoming fragment
         netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	f103 0010 	add.w	r0, r3, #16
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	2100      	movs	r1, #0
 80088e4:	f7fa f86b 	bl	80029be <netBufferWrite>

         //Save current time
         frag->timestamp = osGetSystemTime();
 80088e8:	f7f7 ff72 	bl	80007d0 <osGetSystemTime>
 80088ec:	4602      	mov	r2, r0
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	601a      	str	r2, [r3, #0]
         //Create a new entry in the hole descriptor list
         frag->firstHole = 0;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	2200      	movs	r2, #0
 80088f6:	819a      	strh	r2, [r3, #12]

         //Point to first hole descriptor
         hole = ipv4FindHole(frag, frag->firstHole);
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	899b      	ldrh	r3, [r3, #12]
 80088fc:	4619      	mov	r1, r3
 80088fe:	69b8      	ldr	r0, [r7, #24]
 8008900:	f000 f843 	bl	800898a <ipv4FindHole>
 8008904:	6138      	str	r0, [r7, #16]
         //The entry describes the datagram as being completely missing
         hole->first = 0;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2200      	movs	r2, #0
 800890a:	701a      	strb	r2, [r3, #0]
 800890c:	2200      	movs	r2, #0
 800890e:	705a      	strb	r2, [r3, #1]
         hole->last = IPV4_INFINITY;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008916:	709a      	strb	r2, [r3, #2]
 8008918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800891c:	70da      	strb	r2, [r3, #3]
         hole->next = IPV4_INFINITY;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008924:	711a      	strb	r2, [r3, #4]
 8008926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800892a:	715a      	strb	r2, [r3, #5]

         //Dump hole descriptor list
         ipv4DumpHoleList(frag);
 800892c:	69b8      	ldr	r0, [r7, #24]
 800892e:	f000 f841 	bl	80089b4 <ipv4DumpHoleList>

         //Return the matching fragment descriptor
         return frag;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	e006      	b.n	8008944 <ipv4SearchFragQueue+0x170>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	3301      	adds	r3, #1
 800893a:	61fb      	str	r3, [r7, #28]
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	2b03      	cmp	r3, #3
 8008940:	d992      	bls.n	8008868 <ipv4SearchFragQueue+0x94>
      }
   }

   //The reassembly queue is full
   return NULL;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3720      	adds	r7, #32
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <ipv4FlushFragQueue>:
 * @brief Flush IPv4 reassembly queue
 * @param[in] interface Underlying network interface
 **/

void ipv4FlushFragQueue(NetInterface *interface)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008954:	2300      	movs	r3, #0
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e010      	b.n	800897c <ipv4FlushFragQueue+0x30>
   {
      //Drop any partially reconstructed datagram
      netBufferSetLength((NetBuffer *) &interface->ipv4Context.fragQueue[i].buffer, 0);
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4613      	mov	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4413      	add	r3, r2
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	4413      	add	r3, r2
 800896c:	3308      	adds	r3, #8
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f7f9 fdb3 	bl	80024dc <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3301      	adds	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b03      	cmp	r3, #3
 8008980:	d9eb      	bls.n	800895a <ipv4FlushFragQueue+0xe>
   }
}
 8008982:	bf00      	nop
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <ipv4FindHole>:
 * @return A pointer to the hole descriptor is returned if the
 *   specified offset is valid. Otherwise NULL is returned
 **/

Ipv4HoleDesc *ipv4FindHole(Ipv4FragDesc *frag, uint16_t offset)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	460b      	mov	r3, r1
 8008994:	807b      	strh	r3, [r7, #2]
   //Return a pointer to the hole descriptor
   return netBufferAt((NetBuffer *) &frag->buffer, frag->headerLength + offset);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f103 0010 	add.w	r0, r3, #16
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	887b      	ldrh	r3, [r7, #2]
 80089a2:	4413      	add	r3, r2
 80089a4:	4619      	mov	r1, r3
 80089a6:	f7f9 fe3f 	bl	8002628 <netBufferAt>
 80089aa:	4603      	mov	r3, r0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <ipv4DumpHoleList>:
 * @brief Dump hole descriptor list
 * @param[in] frag IPv4 fragment descriptor
 **/

void ipv4DumpHoleList(Ipv4FragDesc *frag)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
      TRACE_DEBUG("  %" PRIu16 " - %" PRIu16 "\r\n", hole->first, hole->last);
      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, hole->next);
   }
#endif
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <ipv4CheckSourceAddr>:
 * @param[in] ipAddr Source IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckSourceAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
   //Broadcast and multicast addresses must not be used as source address
   //(refer to RFC 1122, section 3.2.1.3)
   if(ipv4IsBroadcastAddr(interface, ipAddr) || ipv4IsMulticastAddr(ipAddr))
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f973 	bl	8008cc0 <ipv4IsBroadcastAddr>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d104      	bne.n	80089ea <ipv4CheckSourceAddr+0x22>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089e6:	2be0      	cmp	r3, #224	; 0xe0
 80089e8:	d101      	bne.n	80089ee <ipv4CheckSourceAddr+0x26>
   {
      //Debug message
      TRACE_WARNING("Wrong source IPv4 address!\r\n");
      //The source address not is acceptable
      return ERROR_INVALID_ADDRESS;
 80089ea:	23e4      	movs	r3, #228	; 0xe4
 80089ec:	e000      	b.n	80089f0 <ipv4CheckSourceAddr+0x28>
   }

   //The source address is acceptable
   return NO_ERROR;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <ipv4CheckDestAddr>:
 * @param[in] ipAddr Destination IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckDestAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;
   Ipv4AddrEntry *entry;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 8008a02:	23e4      	movs	r3, #228	; 0xe4
 8008a04:	82fb      	strh	r3, [r7, #22]

   //Broadcast address?
   if(ipv4IsBroadcastAddr(interface, ipAddr))
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f959 	bl	8008cc0 <ipv4IsBroadcastAddr>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <ipv4CheckDestAddr+0x22>
   {
      //Always accept broadcast address
      error = NO_ERROR;
 8008a14:	2300      	movs	r3, #0
 8008a16:	82fb      	strh	r3, [r7, #22]
 8008a18:	e043      	b.n	8008aa2 <ipv4CheckDestAddr+0xaa>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a20:	2be0      	cmp	r3, #224	; 0xe0
 8008a22:	d11f      	bne.n	8008a64 <ipv4CheckDestAddr+0x6c>
   {
      //Go through the multicast filter table
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8008a24:	2300      	movs	r3, #0
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	e018      	b.n	8008a5c <ipv4CheckDestAddr+0x64>
      {
         Ipv4FilterEntry *entry;

         //Point to the current entry
         entry = &interface->ipv4Context.multicastFilter[i];
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	33b0      	adds	r3, #176	; 0xb0
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	4413      	add	r3, r2
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	60bb      	str	r3, [r7, #8]

         //Valid entry?
         if(entry->refCount > 0)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <ipv4CheckDestAddr+0x5e>
         {
            //Check whether the destination IPv4 address matches
            //a relevant multicast address
            if(entry->addr == ipAddr)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d102      	bne.n	8008a56 <ipv4CheckDestAddr+0x5e>
            {
               //The multicast address is acceptable
               error = NO_ERROR;
 8008a50:	2300      	movs	r3, #0
 8008a52:	82fb      	strh	r3, [r7, #22]
               //Stop immediately
               break;
 8008a54:	e025      	b.n	8008aa2 <ipv4CheckDestAddr+0xaa>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d9e3      	bls.n	8008a2a <ipv4CheckDestAddr+0x32>
 8008a62:	e01e      	b.n	8008aa2 <ipv4CheckDestAddr+0xaa>
   }
   //Unicast address?
   else
   {
      //Loop through the list of IPv4 addresses assigned to the interface
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	e018      	b.n	8008a9c <ipv4CheckDestAddr+0xa4>
      {
         //Point to the current entry
         entry = &interface->ipv4Context.addrList[i];
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	3398      	adds	r3, #152	; 0x98
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	4413      	add	r3, r2
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	60fb      	str	r3, [r7, #12]

         //Valid entry?
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	791b      	ldrb	r3, [r3, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d007      	beq.n	8008a96 <ipv4CheckDestAddr+0x9e>
         {
            //Check whether the destination address matches a valid unicast
            //address assigned to the interface
            if(entry->addr == ipAddr)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d102      	bne.n	8008a96 <ipv4CheckDestAddr+0x9e>
            {
               //The destination address is acceptable
               error = NO_ERROR;
 8008a90:	2300      	movs	r3, #0
 8008a92:	82fb      	strh	r3, [r7, #22]
               //We are done
               break;
 8008a94:	e005      	b.n	8008aa2 <ipv4CheckDestAddr+0xaa>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	613b      	str	r3, [r7, #16]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0e3      	beq.n	8008a6a <ipv4CheckDestAddr+0x72>
         }
      }
   }

   //Return status code
   return error;
 8008aa2:	8afb      	ldrh	r3, [r7, #22]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <ipv4SelectSourceAddr>:
 * @return Error code
 **/

error_t ipv4SelectSourceAddr(NetInterface **interface,
   Ipv4Addr destAddr, Ipv4Addr *srcAddr)
{
 8008aac:	b590      	push	{r4, r7, lr}
 8008aae:	b08d      	sub	sp, #52	; 0x34
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
   NetInterface *bestInterface;
   Ipv4AddrEntry *currentAddr;
   Ipv4AddrEntry *bestAddr;

   //Initialize variables
   bestInterface = NULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	623b      	str	r3, [r7, #32]
   bestAddr = NULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	61fb      	str	r3, [r7, #28]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ac4:	e0e0      	b.n	8008c88 <ipv4SelectSourceAddr+0x1dc>
   {
      //Point to the current interface
      currentInterface = &netInterface[i];
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8008acc:	fb02 f303 	mul.w	r3, r2, r3
 8008ad0:	4a7a      	ldr	r2, [pc, #488]	; (8008cbc <ipv4SelectSourceAddr+0x210>)
 8008ad2:	4413      	add	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]

      //A network interface may be provided as a hint
      if(*interface != currentInterface && *interface != NULL)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d004      	beq.n	8008aea <ipv4SelectSourceAddr+0x3e>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 80cb 	bne.w	8008c80 <ipv4SelectSourceAddr+0x1d4>
         //Select the next interface in the list
         continue;
      }

      //A sort of the candidate source addresses is being performed
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 8008aea:	2300      	movs	r3, #0
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
 8008aee:	e0c2      	b.n	8008c76 <ipv4SelectSourceAddr+0x1ca>
      {
         //Point to the current entry
         currentAddr = &currentInterface->ipv4Context.addrList[j];
 8008af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af2:	4613      	mov	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	3398      	adds	r3, #152	; 0x98
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	4413      	add	r3, r2
 8008b00:	3304      	adds	r3, #4
 8008b02:	617b      	str	r3, [r7, #20]

         //Check the state of the address
         if(currentAddr->state == IPV4_ADDR_STATE_VALID)
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	f040 80b1 	bne.w	8008c70 <ipv4SelectSourceAddr+0x1c4>
         {
            //Select the first address as default
            if(bestAddr == NULL)
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d104      	bne.n	8008b1e <ipv4SelectSourceAddr+0x72>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8008b1c:	e0a8      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
            }

            //Prefer same address
            if(bestAddr->addr == destAddr)
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	f000 8098 	beq.w	8008c5a <ipv4SelectSourceAddr+0x1ae>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->addr == destAddr)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d104      	bne.n	8008b3e <ipv4SelectSourceAddr+0x92>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8008b3c:	e098      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
            }

            //Check whether the destination address matches the default gateway
            if(bestAddr->defaultGateway == destAddr)
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	f000 808a 	beq.w	8008c5e <ipv4SelectSourceAddr+0x1b2>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway == destAddr)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d104      	bne.n	8008b5e <ipv4SelectSourceAddr+0xb2>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8008b5c:	e088      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
            }

            //Prefer appropriate scope
            if(ipv4GetAddrScope(currentAddr->addr) < ipv4GetAddrScope(bestAddr->addr))
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f962 	bl	8008e2c <ipv4GetAddrScope>
 8008b68:	4604      	mov	r4, r0
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f95c 	bl	8008e2c <ipv4GetAddrScope>
 8008b74:	4603      	mov	r3, r0
 8008b76:	429c      	cmp	r4, r3
 8008b78:	d210      	bcs.n	8008b9c <ipv4SelectSourceAddr+0xf0>
            {
               if(ipv4GetAddrScope(currentAddr->addr) >= ipv4GetAddrScope(destAddr))
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f954 	bl	8008e2c <ipv4GetAddrScope>
 8008b84:	4604      	mov	r4, r0
 8008b86:	68b8      	ldr	r0, [r7, #8]
 8008b88:	f000 f950 	bl	8008e2c <ipv4GetAddrScope>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	429c      	cmp	r4, r3
 8008b90:	d367      	bcc.n	8008c62 <ipv4SelectSourceAddr+0x1b6>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 8008b9a:	e062      	b.n	8008c62 <ipv4SelectSourceAddr+0x1b6>
            }
            else if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(currentAddr->addr))
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 f943 	bl	8008e2c <ipv4GetAddrScope>
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 f93d 	bl	8008e2c <ipv4GetAddrScope>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	429c      	cmp	r4, r3
 8008bb6:	d210      	bcs.n	8008bda <ipv4SelectSourceAddr+0x12e>
            {
               if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(destAddr))
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 f935 	bl	8008e2c <ipv4GetAddrScope>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	68b8      	ldr	r0, [r7, #8]
 8008bc6:	f000 f931 	bl	8008e2c <ipv4GetAddrScope>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	429c      	cmp	r4, r3
 8008bce:	d24a      	bcs.n	8008c66 <ipv4SelectSourceAddr+0x1ba>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 8008bd8:	e045      	b.n	8008c66 <ipv4SelectSourceAddr+0x1ba>
            }

            //If the destination address lies on one of the subnets to which
            //the host is directly connected, the corresponding source address
            //may be chosen (refer to RFC 1122, section 3.3.4.3)
            if(ipv4IsOnSubnet(bestAddr, destAddr))
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	405a      	eors	r2, r3
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	4013      	ands	r3, r2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d11b      	bne.n	8008c24 <ipv4SelectSourceAddr+0x178>
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	405a      	eors	r2, r3
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d135      	bne.n	8008c6a <ipv4SelectSourceAddr+0x1be>
               {
                  //Use longest subnet mask
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 f946 	bl	8008e94 <ipv4GetPrefixLength>
 8008c08:	4604      	mov	r4, r0
                     ipv4GetPrefixLength(bestAddr->subnetMask))
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f940 	bl	8008e94 <ipv4GetPrefixLength>
 8008c14:	4603      	mov	r3, r0
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 8008c16:	429c      	cmp	r4, r3
 8008c18:	d927      	bls.n	8008c6a <ipv4SelectSourceAddr+0x1be>
                  {
                     //Give the current source address the higher precedence
                     bestInterface = currentInterface;
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	623b      	str	r3, [r7, #32]
                     bestAddr = currentAddr;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	61fb      	str	r3, [r7, #28]
                  }
               }

               //Select the next address in the list
               continue;
 8008c22:	e022      	b.n	8008c6a <ipv4SelectSourceAddr+0x1be>
            }
            else
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	405a      	eors	r2, r3
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	4013      	ands	r3, r2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <ipv4SelectSourceAddr+0x194>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	61fb      	str	r3, [r7, #28]

                  //Select the next address in the list
                  continue;
 8008c3e:	e017      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
            }

            //The default gateways may be consulted. If these gateways are
            //assigned to different interfaces, the interface corresponding
            //to the gateway with the highest preference may be chosen
            if(bestAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d112      	bne.n	8008c6e <ipv4SelectSourceAddr+0x1c2>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00f      	beq.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8008c58:	e00a      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
               continue;
 8008c5a:	bf00      	nop
 8008c5c:	e008      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
               continue;
 8008c5e:	bf00      	nop
 8008c60:	e006      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
               continue;
 8008c62:	bf00      	nop
 8008c64:	e004      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
               continue;
 8008c66:	bf00      	nop
 8008c68:	e002      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
               continue;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <ipv4SelectSourceAddr+0x1c4>
               continue;
 8008c6e:	bf00      	nop
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	3301      	adds	r3, #1
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f43f af39 	beq.w	8008af0 <ipv4SelectSourceAddr+0x44>
 8008c7e:	e000      	b.n	8008c82 <ipv4SelectSourceAddr+0x1d6>
         continue;
 8008c80:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	3301      	adds	r3, #1
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f43f af1b 	beq.w	8008ac6 <ipv4SelectSourceAddr+0x1a>
         }
      }
   }

   //Valid source address?
   if(bestAddr != NULL)
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <ipv4SelectSourceAddr+0x1fe>
   {
      //Return the out-going interface and the source address to be used
      *interface = bestInterface;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6a3a      	ldr	r2, [r7, #32]
 8008c9a:	601a      	str	r2, [r3, #0]
      *srcAddr = bestAddr->addr;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]

      //Successful source address selection
      error = NO_ERROR;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008ca8:	e002      	b.n	8008cb0 <ipv4SelectSourceAddr+0x204>
   }
   else
   {
      //Report an error
      error = ERROR_NO_ADDRESS;
 8008caa:	f240 13f7 	movw	r3, #503	; 0x1f7
 8008cae:	85fb      	strh	r3, [r7, #46]	; 0x2e
   }

   //Return status code
   return error;
 8008cb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3734      	adds	r7, #52	; 0x34
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd90      	pop	{r4, r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	2000e464 	.word	0x2000e464

08008cc0 <ipv4IsBroadcastAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a broadcast address, else FALSE
 **/

bool_t ipv4IsBroadcastAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Check whether the specified IPv4 address is the broadcast address
   if(ipAddr == IPV4_BROADCAST_ADDR)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cd0:	d101      	bne.n	8008cd6 <ipv4IsBroadcastAddr+0x16>
      return TRUE;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e02e      	b.n	8008d34 <ipv4IsBroadcastAddr+0x74>

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	e027      	b.n	8008d2c <ipv4IsBroadcastAddr+0x6c>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	3398      	adds	r3, #152	; 0x98
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	4413      	add	r3, r2
 8008cec:	3304      	adds	r3, #4
 8008cee:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	791b      	ldrb	r3, [r3, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d016      	beq.n	8008d26 <ipv4IsBroadcastAddr+0x66>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	405a      	eors	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4013      	ands	r3, r2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10d      	bne.n	8008d26 <ipv4IsBroadcastAddr+0x66>
         {
            //Make sure the subnet mask is not 255.255.255.255
            if(entry->subnetMask != IPV4_BROADCAST_ADDR)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d12:	d008      	beq.n	8008d26 <ipv4IsBroadcastAddr+0x66>
            {
               //Directed broadcast address?
               if((ipAddr | entry->subnetMask) == IPV4_BROADCAST_ADDR)
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	68da      	ldr	r2, [r3, #12]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d20:	d101      	bne.n	8008d26 <ipv4IsBroadcastAddr+0x66>
               {
                  return TRUE;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e006      	b.n	8008d34 <ipv4IsBroadcastAddr+0x74>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0d4      	beq.n	8008cdc <ipv4IsBroadcastAddr+0x1c>
         }
      }
   }

   //The specified IPv4 address is not a broadcast address
   return FALSE;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <ipv4IsTentativeAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a tentative address, else FALSE
 **/

bool_t ipv4IsTentativeAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	e017      	b.n	8008d80 <ipv4IsTentativeAddr+0x40>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	3398      	adds	r3, #152	; 0x98
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	4413      	add	r3, r2
 8008d60:	3304      	adds	r3, #4
 8008d62:	60bb      	str	r3, [r7, #8]

      //Tentative address?
      if(entry->state == IPV4_ADDR_STATE_TENTATIVE)
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	791b      	ldrb	r3, [r3, #4]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d106      	bne.n	8008d7a <ipv4IsTentativeAddr+0x3a>
      {
         //Check whether the specified address matches a valid unicast
         //address assigned to the interface
         if(entry->addr == ipAddr)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d101      	bne.n	8008d7a <ipv4IsTentativeAddr+0x3a>
         {
            //The specified IPv4 address is a tentative address
            return TRUE;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e006      	b.n	8008d88 <ipv4IsTentativeAddr+0x48>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0e4      	beq.n	8008d50 <ipv4IsTentativeAddr+0x10>
         }
      }
   }

   //The specified IPv4 address is not a tentative address
   return FALSE;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <ipv4IsLocalHostAddr>:
 * @return TRUE if the IPv4 address matches any address assigned to the host,
 *   else FALSE
 **/

bool_t ipv4IsLocalHostAddr(Ipv4Addr ipAddr)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b089      	sub	sp, #36	; 0x24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
   bool_t flag;
   NetInterface *interface;
   Ipv4AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]

   //Loopback address?
   if(ipv4IsLoopbackAddr(ipAddr))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b7f      	cmp	r3, #127	; 0x7f
 8008da6:	d102      	bne.n	8008dae <ipv4IsLocalHostAddr+0x1a>
   {
      //The 127.0.0.0/8 block is assigned for use as the host loopback address.
      //A datagram sent by a higher-level protocol to an address anywhere within
      //this block loops back inside the host (refer to RFC 5735, section 3)
      flag = TRUE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	617b      	str	r3, [r7, #20]
 8008dac:	e034      	b.n	8008e18 <ipv4IsLocalHostAddr+0x84>
   }
   else
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 8008dae:	2300      	movs	r3, #0
 8008db0:	61fb      	str	r3, [r7, #28]
 8008db2:	e02b      	b.n	8008e0c <ipv4IsLocalHostAddr+0x78>
      {
         //Point to the current interface
         interface = &netInterface[i];
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8008dba:	fb02 f303 	mul.w	r3, r2, r3
 8008dbe:	4a1a      	ldr	r2, [pc, #104]	; (8008e28 <ipv4IsLocalHostAddr+0x94>)
 8008dc0:	4413      	add	r3, r2
 8008dc2:	613b      	str	r3, [r7, #16]

         //Iterate through the list of addresses assigned to the interface
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	e017      	b.n	8008dfa <ipv4IsLocalHostAddr+0x66>
         {
            //Point to the current entry
            entry = &interface->ipv4Context.addrList[j];
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	3398      	adds	r3, #152	; 0x98
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4413      	add	r3, r2
 8008dda:	3304      	adds	r3, #4
 8008ddc:	60fb      	str	r3, [r7, #12]

            //Check whether the specified IPv4 address matches any address
            //assigned to the host
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	791b      	ldrb	r3, [r3, #4]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d106      	bne.n	8008df4 <ipv4IsLocalHostAddr+0x60>
               entry->addr == ipAddr)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d101      	bne.n	8008df4 <ipv4IsLocalHostAddr+0x60>
            {
               flag = TRUE;
 8008df0:	2301      	movs	r3, #1
 8008df2:	617b      	str	r3, [r7, #20]
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	3301      	adds	r3, #1
 8008df8:	61bb      	str	r3, [r7, #24]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <ipv4IsLocalHostAddr+0x72>
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0e1      	beq.n	8008dca <ipv4IsLocalHostAddr+0x36>
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d102      	bne.n	8008e18 <ipv4IsLocalHostAddr+0x84>
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0cd      	beq.n	8008db4 <ipv4IsLocalHostAddr+0x20>
         }
      }
   }

   //Return TRUE if the specified address matches any address assigned to the host
   return flag;
 8008e18:	697b      	ldr	r3, [r7, #20]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3724      	adds	r7, #36	; 0x24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	2000e464 	.word	0x2000e464

08008e2c <ipv4GetAddrScope>:
 * @param[in] ipAddr IPv4 address
 * @return IPv4 address scope
 **/

uint_t ipv4GetAddrScope(Ipv4Addr ipAddr)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
   uint_t scope;

   //Broadcast address?
   if(ipAddr == IPV4_BROADCAST_ADDR)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e3a:	d102      	bne.n	8008e42 <ipv4GetAddrScope+0x16>
   {
      //The broadcast address is never forwarded by the routers connecting
      //the local network to other networks
      scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e021      	b.n	8008e86 <ipv4GetAddrScope+0x5a>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e48:	2be0      	cmp	r3, #224	; 0xe0
 8008e4a:	d10a      	bne.n	8008e62 <ipv4GetAddrScope+0x36>
   {
      //Local Network Control Block?
      if((ipAddr & IPV4_MULTICAST_LNCB_MASK) == IPV4_MULTICAST_LNCB_PREFIX)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e52:	2be0      	cmp	r3, #224	; 0xe0
 8008e54:	d102      	bne.n	8008e5c <ipv4GetAddrScope+0x30>
      {
         //Addresses in the Local Network Control Block are used for protocol
         //control traffic that is not forwarded off link
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 8008e56:	2302      	movs	r3, #2
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	e014      	b.n	8008e86 <ipv4GetAddrScope+0x5a>
      }
      //Any other multicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	e011      	b.n	8008e86 <ipv4GetAddrScope+0x5a>
   }
   //Unicast address?
   else
   {
      //Loopback address?
      if((ipAddr & IPV4_LOOPBACK_MASK) == IPV4_LOOPBACK_PREFIX)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b7f      	cmp	r3, #127	; 0x7f
 8008e68:	d102      	bne.n	8008e70 <ipv4GetAddrScope+0x44>
      {
         //IPv4 loopback addresses, which have the prefix 127.0.0.0/8,
         //are assigned interface-local scope
         scope = IPV4_ADDR_SCOPE_INTERFACE_LOCAL;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	e00a      	b.n	8008e86 <ipv4GetAddrScope+0x5a>
      }
      //Link-local address?
      else if((ipAddr & IPV4_LINK_LOCAL_MASK) == IPV4_LINK_LOCAL_PREFIX)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d102      	bne.n	8008e82 <ipv4GetAddrScope+0x56>
      {
         //IPv4 auto-configuration addresses, which have the prefix
         //169.254.0.0/16, are assigned link-local scope
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	e001      	b.n	8008e86 <ipv4GetAddrScope+0x5a>
      }
      //Any other unicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 8008e82:	2303      	movs	r3, #3
 8008e84:	60fb      	str	r3, [r7, #12]
      }
   }

   //Return the scope of the specified IPv4 address
   return scope;
 8008e86:	68fb      	ldr	r3, [r7, #12]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <ipv4GetPrefixLength>:
 * @param[in] mask Subnet mask
 * @return Prefix length
 **/

uint_t ipv4GetPrefixLength(Ipv4Addr mask)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Convert from network byte order to host byte order
   mask = ntohl(mask);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7f7 fb8d 	bl	80005bc <swapInt32>
 8008ea2:	6078      	str	r0, [r7, #4]

   //Count of the number of leading 1 bits in the network mask
   for(i = 0; i < 32; i++)
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	e00b      	b.n	8008ec2 <ipv4GetPrefixLength+0x2e>
   {
      //Check the value of the current bit
      if(!(mask & (1U << (31 - i))))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f1c3 031f 	rsb	r3, r3, #31
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	409a      	lsls	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d006      	beq.n	8008eca <ipv4GetPrefixLength+0x36>
   for(i = 0; i < 32; i++)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b1f      	cmp	r3, #31
 8008ec6:	d9f0      	bls.n	8008eaa <ipv4GetPrefixLength+0x16>
 8008ec8:	e000      	b.n	8008ecc <ipv4GetPrefixLength+0x38>
         break;
 8008eca:	bf00      	nop
   }

   //Return prefix length
   return i;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <ipv4UpdateInStats>:
 * @param[in] length Length of the incoming IP packet
 **/

void ipv4UpdateInStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	60f8      	str	r0, [r7, #12]
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff feeb 	bl	8008cc0 <ipv4IsBroadcastAddr>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCInMcastOctets, length);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInMcastOctets, length);
   }
}
 8008eee:	bf00      	nop
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <ipv4UpdateOutStats>:
 * @param[in] length Length of the outgoing IP packet
 **/

void ipv4UpdateOutStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff fedb 	bl	8008cc0 <ipv4IsBroadcastAddr>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
   //for transmission
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutOctets, length);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutOctets, length);
}
 8008f0e:	bf00      	nop
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <ipv4UpdateErrorStats>:
 * @param[in] interface Underlying network interface
 * @param[in] error Status code describing the error
 **/

void ipv4UpdateErrorStats(NetInterface *interface, error_t error)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	807b      	strh	r3, [r7, #2]
   //Check error code
   switch(error)
 8008f24:	887b      	ldrh	r3, [r7, #2]
 8008f26:	3bd1      	subs	r3, #209	; 0xd1
 8008f28:	2b1a      	cmp	r3, #26
 8008f2a:	d839      	bhi.n	8008fa0 <ipv4UpdateErrorStats+0x88>
 8008f2c:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <ipv4UpdateErrorStats+0x1c>)
 8008f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f32:	bf00      	nop
 8008f34:	08008fa1 	.word	0x08008fa1
 8008f38:	08008fa1 	.word	0x08008fa1
 8008f3c:	08008fa1 	.word	0x08008fa1
 8008f40:	08008fa1 	.word	0x08008fa1
 8008f44:	08008fa1 	.word	0x08008fa1
 8008f48:	08008fa1 	.word	0x08008fa1
 8008f4c:	08008fa1 	.word	0x08008fa1
 8008f50:	08008fa1 	.word	0x08008fa1
 8008f54:	08008fa1 	.word	0x08008fa1
 8008f58:	08008fa1 	.word	0x08008fa1
 8008f5c:	08008fa1 	.word	0x08008fa1
 8008f60:	08008fa1 	.word	0x08008fa1
 8008f64:	08008fa1 	.word	0x08008fa1
 8008f68:	08008fa1 	.word	0x08008fa1
 8008f6c:	08008fa1 	.word	0x08008fa1
 8008f70:	08008fa1 	.word	0x08008fa1
 8008f74:	08008fa1 	.word	0x08008fa1
 8008f78:	08008fa1 	.word	0x08008fa1
 8008f7c:	08008fa1 	.word	0x08008fa1
 8008f80:	08008fa1 	.word	0x08008fa1
 8008f84:	08008fa1 	.word	0x08008fa1
 8008f88:	08008fa1 	.word	0x08008fa1
 8008f8c:	08008fa1 	.word	0x08008fa1
 8008f90:	08008fa1 	.word	0x08008fa1
 8008f94:	08008fa1 	.word	0x08008fa1
 8008f98:	08008fa1 	.word	0x08008fa1
 8008f9c:	08008fa1 	.word	0x08008fa1
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInTruncatedPkts, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInTruncatedPkts, 1);
      break;
   default:
      //Just for sanity
      break;
 8008fa0:	bf00      	nop
   }
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop

08008fb0 <modbusClientInit>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientInit(ModbusClientContext *context)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
#if (MODBUS_CLIENT_TLS_SUPPORT == ENABLED)
   error_t error;
#endif

   //Make sure the Modbus/TCP client context is valid
   if(context == NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <modbusClientInit+0x12>
      return ERROR_INVALID_PARAMETER;
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	e016      	b.n	8008ff0 <modbusClientInit+0x40>

   //Clear Modbus/TCP client context
   memset(context, 0, sizeof(ModbusClientContext));
 8008fc2:	f44f 720d 	mov.w	r2, #564	; 0x234
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f011 f847 	bl	801a05c <memset>
   if(error)
      return error;
#endif

   //Initialize Modbus/TCP client state
   context->state = MODBUS_CLIENT_STATE_DISCONNECTED;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	701a      	strb	r2, [r3, #0]

   //Default timeout
   context->timeout = MODBUS_CLIENT_DEFAULT_TIMEOUT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008fda:	611a      	str	r2, [r3, #16]
   //Default unit identifier
   context->unitId = MODBUS_DEFAULT_UNIT_ID;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	22ff      	movs	r2, #255	; 0xff
 8008fe0:	721a      	strb	r2, [r3, #8]

   //The transaction identifier is used to uniquely identify the matching
   //requests and responses
   context->transactionId = (uint16_t) netGetRand();
 8008fe2:	f7f9 f8d9 	bl	8002198 <netGetRand>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	815a      	strh	r2, [r3, #10]

   //Successful initialization
   return NO_ERROR;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <modbusClientBindToInterface>:
 * @return Error code
 **/

error_t modbusClientBindToInterface(ModbusClientContext *context,
   NetInterface *interface)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
   //Make sure the Modbus/TCP client context is valid
   if(context == NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <modbusClientBindToInterface+0x14>
      return ERROR_INVALID_PARAMETER;
 8009008:	2302      	movs	r3, #2
 800900a:	e003      	b.n	8009014 <modbusClientBindToInterface+0x1c>

   //Explicitly associate the Modbus/TCP client with the specified interface
   context->interface = interface;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	605a      	str	r2, [r3, #4]

   //Successful processing
   return NO_ERROR;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <modbusClientConnect>:
 * @return Error code
 **/

error_t modbusClientConnect(ModbusClientContext *context,
   const IpAddr *serverIpAddr, uint16_t serverPort)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //Check parameters
   if(context == NULL || serverIpAddr == NULL)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <modbusClientConnect+0x1a>
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <modbusClientConnect+0x1e>
      return ERROR_INVALID_PARAMETER;
 800903a:	2302      	movs	r3, #2
 800903c:	e04f      	b.n	80090de <modbusClientConnect+0xbe>

   //Initialize status code
   error = NO_ERROR;
 800903e:	2300      	movs	r3, #0
 8009040:	82fb      	strh	r3, [r7, #22]

   //Establish connection with the Modbus/TCP server
   while(!error)
 8009042:	e03a      	b.n	80090ba <modbusClientConnect+0x9a>
   {
      //Check current state
      if(context->state == MODBUS_CLIENT_STATE_DISCONNECTED)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d110      	bne.n	800906e <modbusClientConnect+0x4e>
      {
         //Open network connection
         error = modbusClientOpenConnection(context);
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 f8aa 	bl	80091a6 <modbusClientOpenConnection>
 8009052:	4603      	mov	r3, r0
 8009054:	82fb      	strh	r3, [r7, #22]

         //Check status code
         if(!error)
 8009056:	8afb      	ldrh	r3, [r7, #22]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d12e      	bne.n	80090ba <modbusClientConnect+0x9a>
         {
            //Save current time
            context->timestamp = osGetSystemTime();
 800905c:	f7f7 fbb8 	bl	80007d0 <osGetSystemTime>
 8009060:	4602      	mov	r2, r0
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	615a      	str	r2, [r3, #20]
            //Update Modbus/TCP client state
            context->state = MODBUS_CLIENT_STATE_CONNECTING;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	701a      	strb	r2, [r3, #0]
 800906c:	e025      	b.n	80090ba <modbusClientConnect+0x9a>
         }
      }
      else if(context->state == MODBUS_CLIENT_STATE_CONNECTING)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d11a      	bne.n	80090ac <modbusClientConnect+0x8c>
      {
         //Establish network connection
         error = modbusClientEstablishConnection(context, serverIpAddr,
 8009076:	88fb      	ldrh	r3, [r7, #6]
 8009078:	461a      	mov	r2, r3
 800907a:	68b9      	ldr	r1, [r7, #8]
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 f8c6 	bl	800920e <modbusClientEstablishConnection>
 8009082:	4603      	mov	r3, r0
 8009084:	82fb      	strh	r3, [r7, #22]
            serverPort);

         //Check status code
         if(error == NO_ERROR)
 8009086:	8afb      	ldrh	r3, [r7, #22]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d103      	bne.n	8009094 <modbusClientConnect+0x74>
         {
            //Update Modbus/TCP client state
            context->state = MODBUS_CLIENT_STATE_CONNECTED;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2202      	movs	r2, #2
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e012      	b.n	80090ba <modbusClientConnect+0x9a>
         }
         else if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 8009094:	8afb      	ldrh	r3, [r7, #22]
 8009096:	2bdd      	cmp	r3, #221	; 0xdd
 8009098:	d002      	beq.n	80090a0 <modbusClientConnect+0x80>
 800909a:	8afb      	ldrh	r3, [r7, #22]
 800909c:	2bdc      	cmp	r3, #220	; 0xdc
 800909e:	d10c      	bne.n	80090ba <modbusClientConnect+0x9a>
         {
            //Check whether the timeout has elapsed
            error = modbusClientCheckTimeout(context);
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 f875 	bl	8009190 <modbusClientCheckTimeout>
 80090a6:	4603      	mov	r3, r0
 80090a8:	82fb      	strh	r3, [r7, #22]
 80090aa:	e006      	b.n	80090ba <modbusClientConnect+0x9a>
         else
         {
            //A communication error has occured
         }
      }
      else if(context->state == MODBUS_CLIENT_STATE_CONNECTED)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d006      	beq.n	80090c2 <modbusClientConnect+0xa2>
         break;
      }
      else
      {
         //Invalid state
         error = ERROR_WRONG_STATE;
 80090b4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80090b8:	82fb      	strh	r3, [r7, #22]
   while(!error)
 80090ba:	8afb      	ldrh	r3, [r7, #22]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0c1      	beq.n	8009044 <modbusClientConnect+0x24>
 80090c0:	e000      	b.n	80090c4 <modbusClientConnect+0xa4>
         break;
 80090c2:	bf00      	nop
      }
   }

   //Failed to establish connection with the Modbus/TCP server?
   if(error != NO_ERROR && error != ERROR_WOULD_BLOCK)
 80090c4:	8afb      	ldrh	r3, [r7, #22]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d008      	beq.n	80090dc <modbusClientConnect+0xbc>
 80090ca:	8afb      	ldrh	r3, [r7, #22]
 80090cc:	2bdd      	cmp	r3, #221	; 0xdd
 80090ce:	d005      	beq.n	80090dc <modbusClientConnect+0xbc>
   {
      //Clean up side effects
      modbusClientCloseConnection(context);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 f8d0 	bl	8009276 <modbusClientCloseConnection>
      //Update Modbus/TCP client state
      context->state = MODBUS_CLIENT_STATE_DISCONNECTED;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	701a      	strb	r2, [r3, #0]
   }

   //Return status code
   return error;
 80090dc:	8afb      	ldrh	r3, [r7, #22]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <modbusClientDisconnect>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientDisconnect(ModbusClientContext *context)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
   error_t error;

   //Make sure the Modbus/TCP client context is valid
   if(context == NULL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <modbusClientDisconnect+0x12>
      return ERROR_INVALID_PARAMETER;
 80090f4:	2302      	movs	r3, #2
 80090f6:	e047      	b.n	8009188 <modbusClientDisconnect+0xa2>

   //Initialize status code
   error = NO_ERROR;
 80090f8:	2300      	movs	r3, #0
 80090fa:	81fb      	strh	r3, [r7, #14]

   //Gracefully disconnect from the Modbus/TCP server
   while(!error)
 80090fc:	e032      	b.n	8009164 <modbusClientDisconnect+0x7e>
   {
      //Check current state
      if(context->state == MODBUS_CLIENT_STATE_CONNECTED)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d108      	bne.n	8009118 <modbusClientDisconnect+0x32>
      {
         //Save current time
         context->timestamp = osGetSystemTime();
 8009106:	f7f7 fb63 	bl	80007d0 <osGetSystemTime>
 800910a:	4602      	mov	r2, r0
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	615a      	str	r2, [r3, #20]
         //Update Modbus/TCP client state
         context->state = MODBUS_CLIENT_STATE_DISCONNECTING;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2206      	movs	r2, #6
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	e025      	b.n	8009164 <modbusClientDisconnect+0x7e>
      }
      else if(context->state == MODBUS_CLIENT_STATE_DISCONNECTING)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b06      	cmp	r3, #6
 800911e:	d11a      	bne.n	8009156 <modbusClientDisconnect+0x70>
      {
         //Shutdown connection
         error = modbusClientShutdownConnection(context);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f88e 	bl	8009242 <modbusClientShutdownConnection>
 8009126:	4603      	mov	r3, r0
 8009128:	81fb      	strh	r3, [r7, #14]

         //Check status code
         if(error == NO_ERROR)
 800912a:	89fb      	ldrh	r3, [r7, #14]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d106      	bne.n	800913e <modbusClientDisconnect+0x58>
         {
            //Close connection
            modbusClientCloseConnection(context);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f8a0 	bl	8009276 <modbusClientCloseConnection>
            //Update Modbus/TCP client state
            context->state = MODBUS_CLIENT_STATE_DISCONNECTED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	701a      	strb	r2, [r3, #0]
 800913c:	e012      	b.n	8009164 <modbusClientDisconnect+0x7e>
         }
         else if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 800913e:	89fb      	ldrh	r3, [r7, #14]
 8009140:	2bdd      	cmp	r3, #221	; 0xdd
 8009142:	d002      	beq.n	800914a <modbusClientDisconnect+0x64>
 8009144:	89fb      	ldrh	r3, [r7, #14]
 8009146:	2bdc      	cmp	r3, #220	; 0xdc
 8009148:	d10c      	bne.n	8009164 <modbusClientDisconnect+0x7e>
         {
            //Check whether the timeout has elapsed
            error = modbusClientCheckTimeout(context);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f820 	bl	8009190 <modbusClientCheckTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	81fb      	strh	r3, [r7, #14]
 8009154:	e006      	b.n	8009164 <modbusClientDisconnect+0x7e>
         else
         {
            //A communication error has occured
         }
      }
      else if(context->state == MODBUS_CLIENT_STATE_DISCONNECTED)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d006      	beq.n	800916c <modbusClientDisconnect+0x86>
         break;
      }
      else
      {
         //Invalid state
         error = ERROR_WRONG_STATE;
 800915e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009162:	81fb      	strh	r3, [r7, #14]
   while(!error)
 8009164:	89fb      	ldrh	r3, [r7, #14]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0c9      	beq.n	80090fe <modbusClientDisconnect+0x18>
 800916a:	e000      	b.n	800916e <modbusClientDisconnect+0x88>
         break;
 800916c:	bf00      	nop
      }
   }

   //Failed to gracefully disconnect from the Modbus/TCP server?
   if(error != NO_ERROR && error != ERROR_WOULD_BLOCK)
 800916e:	89fb      	ldrh	r3, [r7, #14]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d008      	beq.n	8009186 <modbusClientDisconnect+0xa0>
 8009174:	89fb      	ldrh	r3, [r7, #14]
 8009176:	2bdd      	cmp	r3, #221	; 0xdd
 8009178:	d005      	beq.n	8009186 <modbusClientDisconnect+0xa0>
   {
      //Close connection
      modbusClientCloseConnection(context);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f87b 	bl	8009276 <modbusClientCloseConnection>
      //Update Modbus/TCP client state
      context->state = MODBUS_CLIENT_STATE_DISCONNECTED;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
   }

   //Return status code
   return error;
 8009186:	89fb      	ldrh	r3, [r7, #14]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <modbusClientCheckTimeout>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientCheckTimeout(ModbusClientContext *context)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]

   //Return status code
   return error;
#else
   //Report a timeout error
   return ERROR_TIMEOUT;
 8009198:	23dc      	movs	r3, #220	; 0xdc
#endif
}
 800919a:	4618      	mov	r0, r3
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <modbusClientOpenConnection>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientOpenConnection(ModbusClientContext *context)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
   error_t error;

   //Open a TCP socket
   context->socket = socketOpen(SOCKET_TYPE_STREAM, SOCKET_IP_PROTO_TCP);
 80091ae:	2106      	movs	r1, #6
 80091b0:	2001      	movs	r0, #1
 80091b2:	f7f9 fdb1 	bl	8002d18 <socketOpen>
 80091b6:	4602      	mov	r2, r0
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60da      	str	r2, [r3, #12]
   //Failed to open socket?
   if(context->socket == NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <modbusClientOpenConnection+0x22>
      return ERROR_OPEN_FAILED;
 80091c4:	23c8      	movs	r3, #200	; 0xc8
 80091c6:	e01e      	b.n	8009206 <modbusClientOpenConnection+0x60>

   //Associate the socket with the relevant interface
   error = socketBindToInterface(context->socket, context->interface);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f7f9 fe3e 	bl	8002e54 <socketSetInterface>
 80091d8:	4603      	mov	r3, r0
 80091da:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 80091dc:	89fb      	ldrh	r3, [r7, #14]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <modbusClientOpenConnection+0x40>
      return error;
 80091e2:	89fb      	ldrh	r3, [r7, #14]
 80091e4:	e00f      	b.n	8009206 <modbusClientOpenConnection+0x60>

   //Set timeout
   error = socketSetTimeout(context->socket, context->timeout);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	4619      	mov	r1, r3
 80091f0:	4610      	mov	r0, r2
 80091f2:	f7f9 fe15 	bl	8002e20 <socketSetTimeout>
 80091f6:	4603      	mov	r3, r0
 80091f8:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 80091fa:	89fb      	ldrh	r3, [r7, #14]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <modbusClientOpenConnection+0x5e>
      return error;
 8009200:	89fb      	ldrh	r3, [r7, #14]
 8009202:	e000      	b.n	8009206 <modbusClientOpenConnection+0x60>
         return error;
   }
#endif

   //Successful processing
   return NO_ERROR;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <modbusClientEstablishConnection>:
 * @return Error code
 **/

error_t modbusClientEstablishConnection(ModbusClientContext *context,
   const IpAddr *serverIpAddr, uint16_t serverPort)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b086      	sub	sp, #24
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	4613      	mov	r3, r2
 800921a:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //Establish TCP connection
   error = socketConnect(context->socket, serverIpAddr, serverPort);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	88fa      	ldrh	r2, [r7, #6]
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	4618      	mov	r0, r3
 8009226:	f7f9 fe29 	bl	8002e7c <socketConnect>
 800922a:	4603      	mov	r3, r0
 800922c:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 800922e:	8afb      	ldrh	r3, [r7, #22]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <modbusClientEstablishConnection+0x2a>
      return error;
 8009234:	8afb      	ldrh	r3, [r7, #22]
 8009236:	e000      	b.n	800923a <modbusClientEstablishConnection+0x2c>
         return error;
   }
#endif

   //Successful processing
   return NO_ERROR;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <modbusClientShutdownConnection>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientShutdownConnection(ModbusClientContext *context)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 800924a:	2300      	movs	r3, #0
 800924c:	81fb      	strh	r3, [r7, #14]
      error = tlsShutdown(context->tlsContext);
   }
#endif

   //Check status code
   if(!error)
 800924e:	89fb      	ldrh	r3, [r7, #14]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <modbusClientShutdownConnection+0x2a>
   {
      //Valid TCP socket?
      if(context->socket != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d007      	beq.n	800926c <modbusClientShutdownConnection+0x2a>
      {
         //Shutdown TCP connection
         error = socketShutdown(context->socket, SOCKET_SD_BOTH);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2102      	movs	r1, #2
 8009262:	4618      	mov	r0, r3
 8009264:	f7f9 fe54 	bl	8002f10 <socketShutdown>
 8009268:	4603      	mov	r3, r0
 800926a:	81fb      	strh	r3, [r7, #14]
      }
   }

   //Return status code
   return error;
 800926c:	89fb      	ldrh	r3, [r7, #14]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <modbusClientCloseConnection>:
 * @brief Close network connection
 * @param[in] context Pointer to the Modbus/TCP client context
 **/

void modbusClientCloseConnection(ModbusClientContext *context)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
      context->tlsContext = NULL;
   }
#endif

   //Close TCP connection
   if(context->socket != NULL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <modbusClientCloseConnection+0x20>
   {
      socketClose(context->socket);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	4618      	mov	r0, r3
 800928c:	f7f9 fe6e 	bl	8002f6c <socketClose>
      context->socket = NULL;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	60da      	str	r2, [r3, #12]
   }
}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
	...

080092a0 <chapStartAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapStartAuth(PppContext *context)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nStarting CHAP authentication...\r\n");
 80092a8:	f7f7 f9ca 	bl	8000640 <osSuspendAllTasks>
 80092ac:	4b15      	ldr	r3, [pc, #84]	; (8009304 <chapStartAuth+0x64>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	2223      	movs	r2, #35	; 0x23
 80092b4:	2101      	movs	r1, #1
 80092b6:	4814      	ldr	r0, [pc, #80]	; (8009308 <chapStartAuth+0x68>)
 80092b8:	f010 fe4a 	bl	8019f50 <fwrite>
 80092bc:	f7f7 f9cb 	bl	8000656 <osResumeAllTasks>

   //Check whether the other end of the PPP link is being authenticated
   if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80092c6:	f24c 2223 	movw	r2, #49699	; 0xc223
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d10a      	bne.n	80092e4 <chapStartAuth+0x44>
   {
      //Initialize restart counter
      context->chapFsm.restartCounter = CHAP_MAX_CHALLENGES;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2205      	movs	r2, #5
 80092d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
      //Send a Challenge packet
      chapSendChallenge(context);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa82 	bl	80097e0 <chapSendChallenge>
      //Switch to the Challenge-Sent state
      context->chapFsm.localState = CHAP_STATE_2_CHALLENGE_SENT;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   }

   //Check whether the other end of the PPP link is the authenticator
   if(context->peerConfig.authProtocol == PPP_PROTOCOL_CHAP)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 80092ea:	f24c 2223 	movw	r2, #49699	; 0xc223
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d103      	bne.n	80092fa <chapStartAuth+0x5a>
   {
      //Switch to the Started state
      context->chapFsm.peerState = CHAP_STATE_1_STARTED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   }

   //Successful processing
   return NO_ERROR;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20000058 	.word	0x20000058
 8009308:	0801b43c 	.word	0x0801b43c

0800930c <chapAbortAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapAbortAuth(PppContext *context)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nAborting CHAP authentication...\r\n");
 8009314:	f7f7 f994 	bl	8000640 <osSuspendAllTasks>
 8009318:	4b0b      	ldr	r3, [pc, #44]	; (8009348 <chapAbortAuth+0x3c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	2223      	movs	r2, #35	; 0x23
 8009320:	2101      	movs	r1, #1
 8009322:	480a      	ldr	r0, [pc, #40]	; (800934c <chapAbortAuth+0x40>)
 8009324:	f010 fe14 	bl	8019f50 <fwrite>
 8009328:	f7f7 f995 	bl	8000656 <osResumeAllTasks>

   //Abort CHAP authentication process
   context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   context->chapFsm.peerState = CHAP_STATE_0_INITIAL;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

   //Successful processing
   return NO_ERROR;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20000058 	.word	0x20000058
 800934c:	0801b460 	.word	0x0801b460

08009350 <chapTick>:
 * @brief CHAP timer handler
 * @param[in] context PPP context
 **/

void chapTick(PppContext *context)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->chapFsm.localState == CHAP_STATE_2_CHALLENGE_SENT)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800935e:	2b02      	cmp	r3, #2
 8009360:	d127      	bne.n	80093b2 <chapTick+0x62>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 8009362:	f7f7 fa35 	bl	80007d0 <osGetSystemTime>
 8009366:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->chapFsm.timestamp) >= CHAP_RESTART_TIMER)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8009376:	4293      	cmp	r3, r2
 8009378:	d91b      	bls.n	80093b2 <chapTick+0x62>
      {
         //Debug message
         TRACE_INFO("\r\nCHAP Timeout event\r\n");
 800937a:	f7f7 f961 	bl	8000640 <osSuspendAllTasks>
 800937e:	4b0f      	ldr	r3, [pc, #60]	; (80093bc <chapTick+0x6c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	2216      	movs	r2, #22
 8009386:	2101      	movs	r1, #1
 8009388:	480d      	ldr	r0, [pc, #52]	; (80093c0 <chapTick+0x70>)
 800938a:	f010 fde1 	bl	8019f50 <fwrite>
 800938e:	f7f7 f962 	bl	8000656 <osResumeAllTasks>

         //Check whether the restart counter is greater than zero
         if(context->chapFsm.restartCounter > 0)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <chapTick+0x54>
         {
            //Retransmit the Challenge packet
            chapSendChallenge(context);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa1f 	bl	80097e0 <chapSendChallenge>
            //Authentication failed
            lcpClose(context);
         }
      }
   }
}
 80093a2:	e006      	b.n	80093b2 <chapTick+0x62>
            context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            lcpClose(context);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 fa85 	bl	800a8bc <lcpClose>
}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000058 	.word	0x20000058
 80093c0:	0801b484 	.word	0x0801b484

080093c4 <chapProcessPacket>:
 * @param[in] length Length of the packet, in bytes
 **/

void chapProcessPacket(PppContext *context,
   const PppPacket *packet, size_t length)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming CHAP packet is valid
   if(length < sizeof(PppPacket))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d95a      	bls.n	800948c <chapProcessPacket+0xc8>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	885b      	ldrh	r3, [r3, #2]
 80093da:	b29b      	uxth	r3, r3
 80093dc:	4618      	mov	r0, r3
 80093de:	f7f7 f8df 	bl	80005a0 <swapInt16>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d351      	bcc.n	8009490 <chapProcessPacket+0xcc>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	885b      	ldrh	r3, [r3, #2]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7f7 f8d4 	bl	80005a0 <swapInt16>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d94a      	bls.n	8009494 <chapProcessPacket+0xd0>
      return;

   //Save the length of the CHAP packet
   length = ntohs(packet->length);
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	885b      	ldrh	r3, [r3, #2]
 8009402:	b29b      	uxth	r3, r3
 8009404:	4618      	mov	r0, r3
 8009406:	f7f7 f8cb 	bl	80005a0 <swapInt16>
 800940a:	4603      	mov	r3, r0
 800940c:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("CHAP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 800940e:	f7f7 f917 	bl	8000640 <osSuspendAllTasks>
 8009412:	4b24      	ldr	r3, [pc, #144]	; (80094a4 <chapProcessPacket+0xe0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	4923      	ldr	r1, [pc, #140]	; (80094a8 <chapProcessPacket+0xe4>)
 800941c:	4618      	mov	r0, r3
 800941e:	f010 fd37 	bl	8019e90 <fiprintf>
 8009422:	f7f7 f918 	bl	8000656 <osResumeAllTasks>
   //Dump CHAP packet contents for debugging purpose
   pppDumpPacket(packet, length, PPP_PROTOCOL_CHAP);

   //CHAP is done at initial link establishment, and could also be
   //requested after link establishment
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800942c:	2b02      	cmp	r3, #2
 800942e:	d004      	beq.n	800943a <chapProcessPacket+0x76>
      context->pppPhase != PPP_PHASE_NETWORK)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 8009436:	2b03      	cmp	r3, #3
 8009438:	d12e      	bne.n	8009498 <chapProcessPacket+0xd4>
      //Any packets received during any other phase must be silently discarded
      return;
   }

   //Check CHAP code field
   switch(packet->code)
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	3b01      	subs	r3, #1
 8009440:	2b03      	cmp	r3, #3
 8009442:	d82b      	bhi.n	800949c <chapProcessPacket+0xd8>
 8009444:	a201      	add	r2, pc, #4	; (adr r2, 800944c <chapProcessPacket+0x88>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	0800945d 	.word	0x0800945d
 8009450:	08009469 	.word	0x08009469
 8009454:	08009475 	.word	0x08009475
 8009458:	08009481 	.word	0x08009481
   {
   //Challenge packet?
   case CHAP_CODE_CHALLENGE:
      //Process Challenge packet
      chapProcessChallenge(context, (ChapChallengePacket *) packet, length);
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 f823 	bl	80094ac <chapProcessChallenge>
      break;
 8009466:	e01a      	b.n	800949e <chapProcessPacket+0xda>
   //Response packet?
   case CHAP_CODE_RESPONSE:
      //Process Response packet
      chapProcessResponse(context, (ChapResponsePacket *) packet, length);
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	68b9      	ldr	r1, [r7, #8]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f889 	bl	8009584 <chapProcessResponse>
      break;
 8009472:	e014      	b.n	800949e <chapProcessPacket+0xda>
   //Success packet?
   case CHAP_CODE_SUCCESS:
      //Process Success packet
      chapProcessSuccess(context, (ChapSuccessPacket *) packet, length);
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	68b9      	ldr	r1, [r7, #8]
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 f927 	bl	80096cc <chapProcessSuccess>
      break;
 800947e:	e00e      	b.n	800949e <chapProcessPacket+0xda>
   //Failure packet?
   case CHAP_CODE_FAILURE:
      //Process Failure packet
      chapProcessFailure(context, (ChapFailurePacket *) packet, length);
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	68b9      	ldr	r1, [r7, #8]
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 f971 	bl	800976c <chapProcessFailure>
      break;
 800948a:	e008      	b.n	800949e <chapProcessPacket+0xda>
      return;
 800948c:	bf00      	nop
 800948e:	e006      	b.n	800949e <chapProcessPacket+0xda>
      return;
 8009490:	bf00      	nop
 8009492:	e004      	b.n	800949e <chapProcessPacket+0xda>
      return;
 8009494:	bf00      	nop
 8009496:	e002      	b.n	800949e <chapProcessPacket+0xda>
      return;
 8009498:	bf00      	nop
 800949a:	e000      	b.n	800949e <chapProcessPacket+0xda>
   //Unknown code field
   default:
      //Silently drop the incoming packet
      break;
 800949c:	bf00      	nop
   }
}
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20000058 	.word	0x20000058
 80094a8:	0801b49c 	.word	0x0801b49c

080094ac <chapProcessChallenge>:
 * @return Error code
 **/

error_t chapProcessChallenge(PppContext *context,
   const ChapChallengePacket *challengePacket, size_t length)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b09e      	sub	sp, #120	; 0x78
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
   size_t n;
   Md5Context md5Context;

   //Debug message
   TRACE_INFO("\r\nCHAP Challenge packet received\r\n");
 80094b8:	f7f7 f8c2 	bl	8000640 <osSuspendAllTasks>
 80094bc:	4b2f      	ldr	r3, [pc, #188]	; (800957c <chapProcessChallenge+0xd0>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	2222      	movs	r2, #34	; 0x22
 80094c4:	2101      	movs	r1, #1
 80094c6:	482e      	ldr	r0, [pc, #184]	; (8009580 <chapProcessChallenge+0xd4>)
 80094c8:	f010 fd42 	bl	8019f50 <fwrite>
 80094cc:	f7f7 f8c3 	bl	8000656 <osResumeAllTasks>

   //Make sure the Challenge packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_CHAP)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 80094d6:	f24c 2223 	movw	r2, #49699	; 0xc223
 80094da:	4293      	cmp	r3, r2
 80094dc:	d001      	beq.n	80094e2 <chapProcessChallenge+0x36>
      return ERROR_FAILURE;
 80094de:	2301      	movs	r3, #1
 80094e0:	e048      	b.n	8009574 <chapProcessChallenge+0xc8>

   //Check the length of the packet
   if(length < sizeof(ChapChallengePacket))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	d801      	bhi.n	80094ec <chapProcessChallenge+0x40>
      return ERROR_INVALID_LENGTH;
 80094e8:	23eb      	movs	r3, #235	; 0xeb
 80094ea:	e043      	b.n	8009574 <chapProcessChallenge+0xc8>

   //Malformed Challenge packet?
   if(length < (sizeof(ChapChallengePacket) + challengePacket->valueSize))
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	791b      	ldrb	r3, [r3, #4]
 80094f0:	3305      	adds	r3, #5
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d201      	bcs.n	80094fc <chapProcessChallenge+0x50>
      return ERROR_INVALID_LENGTH;
 80094f8:	23eb      	movs	r3, #235	; 0xeb
 80094fa:	e03b      	b.n	8009574 <chapProcessChallenge+0xc8>

   //Save the Identifier field
   context->chapFsm.peerIdentifier = challengePacket->identifier;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	785a      	ldrb	r2, [r3, #1]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

   //Retrieve the length of the password
   n = strlen(context->password);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3340      	adds	r3, #64	; 0x40
 800950a:	4618      	mov	r0, r3
 800950c:	f7f6 fe70 	bl	80001f0 <strlen>
 8009510:	6778      	str	r0, [r7, #116]	; 0x74

   //The response value is the one-way hash calculated over a stream
   //of octets consisting of the identifier, followed by the secret,
   //followed by the challenge value
   md5Init(&md5Context);
 8009512:	f107 0310 	add.w	r3, r7, #16
 8009516:	4618      	mov	r0, r3
 8009518:	f7f7 f990 	bl	800083c <md5Init>
   md5Update(&md5Context, &challengePacket->identifier, sizeof(uint8_t));
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	1c59      	adds	r1, r3, #1
 8009520:	f107 0310 	add.w	r3, r7, #16
 8009524:	2201      	movs	r2, #1
 8009526:	4618      	mov	r0, r3
 8009528:	f7f7 f9b0 	bl	800088c <md5Update>
   md5Update(&md5Context, context->password, n);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009532:	f107 0310 	add.w	r3, r7, #16
 8009536:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009538:	4618      	mov	r0, r3
 800953a:	f7f7 f9a7 	bl	800088c <md5Update>
   md5Update(&md5Context, challengePacket->value, challengePacket->valueSize);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	1d59      	adds	r1, r3, #5
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	791b      	ldrb	r3, [r3, #4]
 8009546:	461a      	mov	r2, r3
 8009548:	f107 0310 	add.w	r3, r7, #16
 800954c:	4618      	mov	r0, r3
 800954e:	f7f7 f99d 	bl	800088c <md5Update>
   md5Final(&md5Context, NULL);
 8009552:	f107 0310 	add.w	r3, r7, #16
 8009556:	2100      	movs	r1, #0
 8009558:	4618      	mov	r0, r3
 800955a:	f7f7 f9e1 	bl	8000920 <md5Final>

   //Whenever a Challenge packet is received, the peer must send a Response packet
   chapSendResponse(context, md5Context.digest);
 800955e:	f107 0310 	add.w	r3, r7, #16
 8009562:	4619      	mov	r1, r3
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 f9cf 	bl	8009908 <chapSendResponse>

   //Switch to the Response-Sent state
   context->chapFsm.peerState = CHAP_STATE_4_RESPONSE_SENT;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2204      	movs	r2, #4
 800956e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

   //Successful processing
   return NO_ERROR;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3778      	adds	r7, #120	; 0x78
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000058 	.word	0x20000058
 8009580:	0801b4c4 	.word	0x0801b4c4

08009584 <chapProcessResponse>:
 * @return Error code
 **/

error_t chapProcessResponse(PppContext *context,
   const ChapResponsePacket *responsePacket, size_t length)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
   bool_t status;
   const uint8_t *p;

   //Debug message
   TRACE_INFO("\r\nCHAP Response packet received\r\n");
 8009590:	f7f7 f856 	bl	8000640 <osSuspendAllTasks>
 8009594:	4b4b      	ldr	r3, [pc, #300]	; (80096c4 <chapProcessResponse+0x140>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	2221      	movs	r2, #33	; 0x21
 800959c:	2101      	movs	r1, #1
 800959e:	484a      	ldr	r0, [pc, #296]	; (80096c8 <chapProcessResponse+0x144>)
 80095a0:	f010 fcd6 	bl	8019f50 <fwrite>
 80095a4:	f7f7 f857 	bl	8000656 <osResumeAllTasks>

   //Make sure the Response packet is acceptable
   if(context->localConfig.authProtocol != PPP_PROTOCOL_CHAP)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80095ae:	f24c 2223 	movw	r2, #49699	; 0xc223
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d001      	beq.n	80095ba <chapProcessResponse+0x36>
      return ERROR_FAILURE;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e07f      	b.n	80096ba <chapProcessResponse+0x136>

   //Check the length of the packet
   if(length < sizeof(ChapResponsePacket))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d801      	bhi.n	80095c4 <chapProcessResponse+0x40>
      return ERROR_INVALID_LENGTH;
 80095c0:	23eb      	movs	r3, #235	; 0xeb
 80095c2:	e07a      	b.n	80096ba <chapProcessResponse+0x136>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(responsePacket->identifier != context->chapFsm.localIdentifier)
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	785a      	ldrb	r2, [r3, #1]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d001      	beq.n	80095d6 <chapProcessResponse+0x52>
      return ERROR_WRONG_IDENTIFIER;
 80095d2:	23d6      	movs	r3, #214	; 0xd6
 80095d4:	e071      	b.n	80096ba <chapProcessResponse+0x136>

   //Malformed Response packet?
   if(length < (sizeof(ChapResponsePacket) + responsePacket->valueSize))
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	791b      	ldrb	r3, [r3, #4]
 80095da:	3305      	adds	r3, #5
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d201      	bcs.n	80095e6 <chapProcessResponse+0x62>
      return ERROR_INVALID_LENGTH;
 80095e2:	23eb      	movs	r3, #235	; 0xeb
 80095e4:	e069      	b.n	80096ba <chapProcessResponse+0x136>

   //The length of the response value depends upon the hash algorithm used
   if(responsePacket->valueSize != MD5_DIGEST_SIZE)
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	791b      	ldrb	r3, [r3, #4]
 80095ea:	2b10      	cmp	r3, #16
 80095ec:	d001      	beq.n	80095f2 <chapProcessResponse+0x6e>
      return ERROR_INVALID_LENGTH;
 80095ee:	23eb      	movs	r3, #235	; 0xeb
 80095f0:	e063      	b.n	80096ba <chapProcessResponse+0x136>

   //Retrieve the response value
   context->chapFsm.response = responsePacket->value;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	1d5a      	adds	r2, r3, #5
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

   //Point to the Name field
   p = responsePacket->value + responsePacket->valueSize;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	3305      	adds	r3, #5
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	7912      	ldrb	r2, [r2, #4]
 8009604:	4413      	add	r3, r2
 8009606:	613b      	str	r3, [r7, #16]
   //Retrieve the length of the Name field
   length -= sizeof(ChapResponsePacket) + responsePacket->valueSize;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	791b      	ldrb	r3, [r3, #4]
 800960c:	461a      	mov	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	1a9b      	subs	r3, r3, r2
 8009612:	3b05      	subs	r3, #5
 8009614:	607b      	str	r3, [r7, #4]

   //Limit the length of the string
   length = MIN(length, PPP_MAX_USERNAME_LEN);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b1f      	cmp	r3, #31
 800961a:	bf28      	it	cs
 800961c:	231f      	movcs	r3, #31
 800961e:	607b      	str	r3, [r7, #4]
   //Copy the name of the peer to be identified
   memcpy(context->peerName, p, length);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3360      	adds	r3, #96	; 0x60
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	6939      	ldr	r1, [r7, #16]
 8009628:	4618      	mov	r0, r3
 800962a:	f010 fcf3 	bl	801a014 <memcpy>
   //Properly terminate the string with a NULL character
   context->peerName[length] = '\0';
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4413      	add	r3, r2
 8009634:	3360      	adds	r3, #96	; 0x60
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]

   //Invoke user-defined callback, if any
   if(context->settings.authCallback != NULL)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <chapProcessResponse+0xd2>
   {
      //Perfom username and password verification
      status = context->settings.authCallback(context->interface,
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	6990      	ldr	r0, [r2, #24]
         context->peerName);
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	3260      	adds	r2, #96	; 0x60
      status = context->settings.authCallback(context->interface,
 800964e:	4611      	mov	r1, r2
 8009650:	4798      	blx	r3
 8009652:	6178      	str	r0, [r7, #20]
 8009654:	e001      	b.n	800965a <chapProcessResponse+0xd6>
   }
   else
   {
      //Unable to perform authentication...
      status = FALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]
   }

   //Whenever a Response packet is received, the authenticator compares the
   //Response Value with its own calculation of the expected value. Based on
   //this comparison, the authenticator must send a Success or Failure packet
   if(status)
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d021      	beq.n	80096a4 <chapProcessResponse+0x120>
   {
      //Send a Success packet
      chapSendSuccess(context);
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f9b9 	bl	80099d8 <chapSendSuccess>

      //Switch to the Success-Sent state
      context->chapFsm.localState = CHAP_STATE_6_SUCCESS_SENT;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2206      	movs	r2, #6
 800966a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      //The user has been successfully authenticated
      context->localAuthDone = TRUE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2201      	movs	r2, #1
 8009672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      //Check whether PPP authentication is complete
      if(context->localAuthDone && context->peerAuthDone)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800967c:	2b00      	cmp	r3, #0
 800967e:	d01b      	beq.n	80096b8 <chapProcessResponse+0x134>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009686:	2b00      	cmp	r3, #0
 8009688:	d016      	beq.n	80096b8 <chapProcessResponse+0x134>
      {
         //Check current PPP phase
         if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009690:	2b02      	cmp	r3, #2
 8009692:	d111      	bne.n	80096b8 <chapProcessResponse+0x134>
         {
            //Advance to the Network phase
            context->pppPhase = PPP_PHASE_NETWORK;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2203      	movs	r2, #3
 8009698:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
            //IPCP Open event
            ipcpOpen(context);
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 fa33 	bl	8009b08 <ipcpOpen>
 80096a2:	e009      	b.n	80096b8 <chapProcessResponse+0x134>
      }
   }
   else
   {
      //Send a Failure packet
      chapSendFailure(context);
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 f9e3 	bl	8009a70 <chapSendFailure>

      //Switch to the Failure-Sent state
      context->chapFsm.localState = CHAP_STATE_8_FAILURE_SENT;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2208      	movs	r2, #8
 80096ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      //The authenticator should take action to terminate the link
      lcpClose(context);
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f001 f902 	bl	800a8bc <lcpClose>
   }

   //Successful processing
   return NO_ERROR;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20000058 	.word	0x20000058
 80096c8:	0801b4e8 	.word	0x0801b4e8

080096cc <chapProcessSuccess>:
 * @return Error code
 **/

error_t chapProcessSuccess(PppContext *context,
   const ChapSuccessPacket *successPacket, size_t length)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nCHAP Success packet received\r\n");
 80096d8:	f7f6 ffb2 	bl	8000640 <osSuspendAllTasks>
 80096dc:	4b21      	ldr	r3, [pc, #132]	; (8009764 <chapProcessSuccess+0x98>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	2101      	movs	r1, #1
 80096e6:	4820      	ldr	r0, [pc, #128]	; (8009768 <chapProcessSuccess+0x9c>)
 80096e8:	f010 fc32 	bl	8019f50 <fwrite>
 80096ec:	f7f6 ffb3 	bl	8000656 <osResumeAllTasks>

   //Make sure the Success packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_CHAP)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 80096f6:	f24c 2223 	movw	r2, #49699	; 0xc223
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d001      	beq.n	8009702 <chapProcessSuccess+0x36>
      return ERROR_FAILURE;
 80096fe:	2301      	movs	r3, #1
 8009700:	e02c      	b.n	800975c <chapProcessSuccess+0x90>

   //Check the length of the packet
   if(length < sizeof(ChapSuccessPacket))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b03      	cmp	r3, #3
 8009706:	d801      	bhi.n	800970c <chapProcessSuccess+0x40>
      return ERROR_INVALID_LENGTH;
 8009708:	23eb      	movs	r3, #235	; 0xeb
 800970a:	e027      	b.n	800975c <chapProcessSuccess+0x90>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(successPacket->identifier != context->chapFsm.peerIdentifier)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	785a      	ldrb	r2, [r3, #1]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009716:	429a      	cmp	r2, r3
 8009718:	d001      	beq.n	800971e <chapProcessSuccess+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800971a:	23d6      	movs	r3, #214	; 0xd6
 800971c:	e01e      	b.n	800975c <chapProcessSuccess+0x90>

   //Switch to the Success-Rcvd state
   context->chapFsm.peerState = CHAP_STATE_7_SUCCESS_RCVD;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2207      	movs	r2, #7
 8009722:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   //The user name has been accepted by the authenticator
   context->peerAuthDone = TRUE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check whether PPP authentication is complete
   if(context->localAuthDone && context->peerAuthDone)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009734:	2b00      	cmp	r3, #0
 8009736:	d010      	beq.n	800975a <chapProcessSuccess+0x8e>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00b      	beq.n	800975a <chapProcessSuccess+0x8e>
   {
      //Check current PPP phase
      if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009748:	2b02      	cmp	r3, #2
 800974a:	d106      	bne.n	800975a <chapProcessSuccess+0x8e>
      {
         //Advance to the Network phase
         context->pppPhase = PPP_PHASE_NETWORK;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2203      	movs	r2, #3
 8009750:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
         //IPCP Open event
         ipcpOpen(context);
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f000 f9d7 	bl	8009b08 <ipcpOpen>
#endif
      }
   }

   //Successful processing
   return NO_ERROR;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	20000058 	.word	0x20000058
 8009768:	0801b50c 	.word	0x0801b50c

0800976c <chapProcessFailure>:
 * @return Error code
 **/

error_t chapProcessFailure(PppContext *context,
   const ChapFailurePacket *failurePacket, size_t length)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nCHAP Failure packet received\r\n");
 8009778:	f7f6 ff62 	bl	8000640 <osSuspendAllTasks>
 800977c:	4b16      	ldr	r3, [pc, #88]	; (80097d8 <chapProcessFailure+0x6c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	2220      	movs	r2, #32
 8009784:	2101      	movs	r1, #1
 8009786:	4815      	ldr	r0, [pc, #84]	; (80097dc <chapProcessFailure+0x70>)
 8009788:	f010 fbe2 	bl	8019f50 <fwrite>
 800978c:	f7f6 ff63 	bl	8000656 <osResumeAllTasks>

   //Make sure the Failure packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_CHAP)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8009796:	f24c 2223 	movw	r2, #49699	; 0xc223
 800979a:	4293      	cmp	r3, r2
 800979c:	d001      	beq.n	80097a2 <chapProcessFailure+0x36>
      return ERROR_FAILURE;
 800979e:	2301      	movs	r3, #1
 80097a0:	e015      	b.n	80097ce <chapProcessFailure+0x62>

   //Check the length of the packet
   if(length < sizeof(ChapFailurePacket))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d801      	bhi.n	80097ac <chapProcessFailure+0x40>
      return ERROR_INVALID_LENGTH;
 80097a8:	23eb      	movs	r3, #235	; 0xeb
 80097aa:	e010      	b.n	80097ce <chapProcessFailure+0x62>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(failurePacket->identifier != context->chapFsm.peerIdentifier)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	785a      	ldrb	r2, [r3, #1]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d001      	beq.n	80097be <chapProcessFailure+0x52>
      return ERROR_WRONG_IDENTIFIER;
 80097ba:	23d6      	movs	r3, #214	; 0xd6
 80097bc:	e007      	b.n	80097ce <chapProcessFailure+0x62>

   //Switch to the Failure-Rcvd state
   context->chapFsm.peerState = CHAP_STATE_9_FAILURE_RCVD;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2209      	movs	r2, #9
 80097c2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   //Authentication failed
   lcpClose(context);
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f001 f878 	bl	800a8bc <lcpClose>

   //Successful processing
   return NO_ERROR;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000058 	.word	0x20000058
 80097dc:	0801b530 	.word	0x0801b530

080097e0 <chapSendChallenge>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapSendChallenge(PppContext *context)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   ChapChallengePacket *challengePacket;

   //Retrieve the length of the username
   n = strlen(context->username);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3320      	adds	r3, #32
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7f6 fcff 	bl	80001f0 <strlen>
 80097f2:	61b8      	str	r0, [r7, #24]
   //Calculate the length of the Challenge packet
   length = sizeof(ChapChallengePacket) + MD5_DIGEST_SIZE + n;
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	3315      	adds	r3, #21
 80097f8:	617b      	str	r3, [r7, #20]

   //Allocate a buffer memory to hold the Challenge packet
   buffer = pppAllocBuffer(length, &offset);
 80097fa:	f107 0308 	add.w	r3, r7, #8
 80097fe:	4619      	mov	r1, r3
 8009800:	6978      	ldr	r0, [r7, #20]
 8009802:	f003 f8b3 	bl	800c96c <pppAllocBuffer>
 8009806:	6138      	str	r0, [r7, #16]
   //Failed to allocate memory?
   if(buffer == NULL)
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <chapSendChallenge+0x32>
      return ERROR_OUT_OF_MEMORY;
 800980e:	2364      	movs	r3, #100	; 0x64
 8009810:	e072      	b.n	80098f8 <chapSendChallenge+0x118>

   //Point to the Challenge packet
   challengePacket = netBufferAt(buffer, offset);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	4619      	mov	r1, r3
 8009816:	6938      	ldr	r0, [r7, #16]
 8009818:	f7f8 ff06 	bl	8002628 <netBufferAt>
 800981c:	60f8      	str	r0, [r7, #12]

   //Format packet header
   challengePacket->code = CHAP_CODE_CHALLENGE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2201      	movs	r2, #1
 8009822:	701a      	strb	r2, [r3, #0]
   challengePacket->identifier = ++context->chapFsm.localIdentifier;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800982a:	3301      	adds	r3, #1
 800982c:	b2da      	uxtb	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	705a      	strb	r2, [r3, #1]
   challengePacket->length = htons(length);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	b29b      	uxth	r3, r3
 8009842:	4618      	mov	r0, r3
 8009844:	f7f6 feac 	bl	80005a0 <swapInt16>
 8009848:	4603      	mov	r3, r0
 800984a:	461a      	mov	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	805a      	strh	r2, [r3, #2]
   challengePacket->valueSize = MD5_DIGEST_SIZE;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2210      	movs	r2, #16
 8009854:	711a      	strb	r2, [r3, #4]

   //Make sure that the callback function has been registered
   if(context->settings.randCallback != NULL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d009      	beq.n	8009872 <chapSendChallenge+0x92>
   {
      //Generate a random challenge value
      error = context->settings.randCallback(
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
         context->chapFsm.challenge, MD5_DIGEST_SIZE);
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	32e8      	adds	r2, #232	; 0xe8
      error = context->settings.randCallback(
 8009866:	2110      	movs	r1, #16
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	4603      	mov	r3, r0
 800986e:	83fb      	strh	r3, [r7, #30]
 8009870:	e001      	b.n	8009876 <chapSendChallenge+0x96>
   }
   else
   {
      //Report an error
      error = ERROR_FAILURE;
 8009872:	2301      	movs	r3, #1
 8009874:	83fb      	strh	r3, [r7, #30]
   }

   //Check status code
   if(!error)
 8009876:	8bfb      	ldrh	r3, [r7, #30]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d139      	bne.n	80098f0 <chapSendChallenge+0x110>
   {
      //Copy the challenge value
      memcpy(challengePacket->value, context->chapFsm.challenge, MD5_DIGEST_SIZE);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	1d58      	adds	r0, r3, #5
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	33e8      	adds	r3, #232	; 0xe8
 8009884:	2210      	movs	r2, #16
 8009886:	4619      	mov	r1, r3
 8009888:	f010 fbc4 	bl	801a014 <memcpy>

      //The Name field is one or more octets representing the
      //identification of the system transmitting the packet
      memcpy(challengePacket->value + MD5_DIGEST_SIZE, context->username, n);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3305      	adds	r3, #5
 8009890:	f103 0010 	add.w	r0, r3, #16
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3320      	adds	r3, #32
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	4619      	mov	r1, r3
 800989c:	f010 fbba 	bl	801a014 <memcpy>

      //Debug message
      TRACE_INFO("Sending CHAP Challenge packet (%" PRIuSIZE " bytes)...\r\n", length);
 80098a0:	f7f6 fece 	bl	8000640 <osSuspendAllTasks>
 80098a4:	4b16      	ldr	r3, [pc, #88]	; (8009900 <chapSendChallenge+0x120>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	4915      	ldr	r1, [pc, #84]	; (8009904 <chapSendChallenge+0x124>)
 80098ae:	4618      	mov	r0, r3
 80098b0:	f010 faee 	bl	8019e90 <fiprintf>
 80098b4:	f7f6 fecf 	bl	8000656 <osResumeAllTasks>
      //Dump packet contents for debugging purpose
      pppDumpPacket((PppPacket *) challengePacket, length, PPP_PROTOCOL_CHAP);

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6998      	ldr	r0, [r3, #24]
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	f24c 2323 	movw	r3, #49699	; 0xc223
 80098c2:	6939      	ldr	r1, [r7, #16]
 80098c4:	f002 fedc 	bl	800c680 <pppSendFrame>
 80098c8:	4603      	mov	r3, r0
 80098ca:	83fb      	strh	r3, [r7, #30]

      //The restart counter is decremented each time a Challenge packet is sent
      if(context->chapFsm.restartCounter > 0)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <chapSendChallenge+0x104>
         context->chapFsm.restartCounter--;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098dc:	1e5a      	subs	r2, r3, #1
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

      //Save the time at which the packet was sent
      context->chapFsm.timestamp = osGetSystemTime();
 80098e4:	f7f6 ff74 	bl	80007d0 <osGetSystemTime>
 80098e8:	4602      	mov	r2, r0
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 80098f0:	6938      	ldr	r0, [r7, #16]
 80098f2:	f7f8 fdc2 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 80098f6:	8bfb      	ldrh	r3, [r7, #30]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000058 	.word	0x20000058
 8009904:	0801b554 	.word	0x0801b554

08009908 <chapSendResponse>:
 * @param[in] value Response value
 * @return Error code
 **/

error_t chapSendResponse(PppContext *context, const uint8_t *value)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
   size_t offset;
   NetBuffer *buffer;
   ChapResponsePacket *responsePacket;

   //Retrieve the length of the username
   n = strlen(context->username);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3320      	adds	r3, #32
 8009916:	4618      	mov	r0, r3
 8009918:	f7f6 fc6a 	bl	80001f0 <strlen>
 800991c:	61f8      	str	r0, [r7, #28]
   //Calculate the length of the Response packet
   length = sizeof(ChapResponsePacket) + MD5_DIGEST_SIZE + n;
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	3315      	adds	r3, #21
 8009922:	61bb      	str	r3, [r7, #24]

   //Allocate a buffer memory to hold the Response packet
   buffer = pppAllocBuffer(length, &offset);
 8009924:	f107 0308 	add.w	r3, r7, #8
 8009928:	4619      	mov	r1, r3
 800992a:	69b8      	ldr	r0, [r7, #24]
 800992c:	f003 f81e 	bl	800c96c <pppAllocBuffer>
 8009930:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(buffer == NULL)
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <chapSendResponse+0x34>
      return ERROR_OUT_OF_MEMORY;
 8009938:	2364      	movs	r3, #100	; 0x64
 800993a:	e044      	b.n	80099c6 <chapSendResponse+0xbe>

   //Point to the Response packet
   responsePacket = netBufferAt(buffer, offset);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4619      	mov	r1, r3
 8009940:	6978      	ldr	r0, [r7, #20]
 8009942:	f7f8 fe71 	bl	8002628 <netBufferAt>
 8009946:	6138      	str	r0, [r7, #16]

   //Format packet header
   responsePacket->code = CHAP_CODE_RESPONSE;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	2202      	movs	r2, #2
 800994c:	701a      	strb	r2, [r3, #0]
   responsePacket->identifier = context->chapFsm.peerIdentifier;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	705a      	strb	r2, [r3, #1]
   responsePacket->length = htons(length);
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	b29b      	uxth	r3, r3
 800995c:	4618      	mov	r0, r3
 800995e:	f7f6 fe1f 	bl	80005a0 <swapInt16>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	805a      	strh	r2, [r3, #2]
   responsePacket->valueSize = MD5_DIGEST_SIZE;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	2210      	movs	r2, #16
 800996e:	711a      	strb	r2, [r3, #4]

   //Copy the Response value
   memcpy(responsePacket->value, value, MD5_DIGEST_SIZE);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	3305      	adds	r3, #5
 8009974:	2210      	movs	r2, #16
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f010 fb4b 	bl	801a014 <memcpy>

   //The Name field is one or more octets representing the
   //identification of the system transmitting the packet
   memcpy(responsePacket->value + MD5_DIGEST_SIZE, context->username, n);
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3305      	adds	r3, #5
 8009982:	f103 0010 	add.w	r0, r3, #16
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3320      	adds	r3, #32
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	4619      	mov	r1, r3
 800998e:	f010 fb41 	bl	801a014 <memcpy>

   //Debug message
   TRACE_INFO("Sending CHAP Response packet (%" PRIuSIZE " bytes)...\r\n", length);
 8009992:	f7f6 fe55 	bl	8000640 <osSuspendAllTasks>
 8009996:	4b0e      	ldr	r3, [pc, #56]	; (80099d0 <chapSendResponse+0xc8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	490d      	ldr	r1, [pc, #52]	; (80099d4 <chapSendResponse+0xcc>)
 80099a0:	4618      	mov	r0, r3
 80099a2:	f010 fa75 	bl	8019e90 <fiprintf>
 80099a6:	f7f6 fe56 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) responsePacket, length, PPP_PROTOCOL_CHAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6998      	ldr	r0, [r3, #24]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	f24c 2323 	movw	r3, #49699	; 0xc223
 80099b4:	6979      	ldr	r1, [r7, #20]
 80099b6:	f002 fe63 	bl	800c680 <pppSendFrame>
 80099ba:	4603      	mov	r3, r0
 80099bc:	81fb      	strh	r3, [r7, #14]

   //Free previously allocated memory block
   netBufferFree(buffer);
 80099be:	6978      	ldr	r0, [r7, #20]
 80099c0:	f7f8 fd5b 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 80099c4:	89fb      	ldrh	r3, [r7, #14]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000058 	.word	0x20000058
 80099d4:	0801b584 	.word	0x0801b584

080099d8 <chapSendSuccess>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapSendSuccess(PppContext *context)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppPacket *successPacket;

   //Retrieve the length of the Success packet
   length = sizeof(PppPacket);
 80099e0:	2304      	movs	r3, #4
 80099e2:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Success packet
   buffer = pppAllocBuffer(length, &offset);
 80099e4:	f107 030c 	add.w	r3, r7, #12
 80099e8:	4619      	mov	r1, r3
 80099ea:	69f8      	ldr	r0, [r7, #28]
 80099ec:	f002 ffbe 	bl	800c96c <pppAllocBuffer>
 80099f0:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <chapSendSuccess+0x24>
      return ERROR_OUT_OF_MEMORY;
 80099f8:	2364      	movs	r3, #100	; 0x64
 80099fa:	e030      	b.n	8009a5e <chapSendSuccess+0x86>

   //Point to the Success packet
   successPacket = netBufferAt(buffer, offset);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4619      	mov	r1, r3
 8009a00:	69b8      	ldr	r0, [r7, #24]
 8009a02:	f7f8 fe11 	bl	8002628 <netBufferAt>
 8009a06:	6178      	str	r0, [r7, #20]

   //Format packet header
   successPacket->code = CHAP_CODE_SUCCESS;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	701a      	strb	r2, [r3, #0]
   successPacket->identifier = context->chapFsm.localIdentifier;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	705a      	strb	r2, [r3, #1]
   successPacket->length = htons(length);
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7f6 fdbf 	bl	80005a0 <swapInt16>
 8009a22:	4603      	mov	r3, r0
 8009a24:	461a      	mov	r2, r3
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending CHAP Success packet (%" PRIuSIZE " bytes)...\r\n", length);
 8009a2a:	f7f6 fe09 	bl	8000640 <osSuspendAllTasks>
 8009a2e:	4b0e      	ldr	r3, [pc, #56]	; (8009a68 <chapSendSuccess+0x90>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	490d      	ldr	r1, [pc, #52]	; (8009a6c <chapSendSuccess+0x94>)
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f010 fa29 	bl	8019e90 <fiprintf>
 8009a3e:	f7f6 fe0a 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) successPacket, length, PPP_PROTOCOL_CHAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6998      	ldr	r0, [r3, #24]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	f24c 2323 	movw	r3, #49699	; 0xc223
 8009a4c:	69b9      	ldr	r1, [r7, #24]
 8009a4e:	f002 fe17 	bl	800c680 <pppSendFrame>
 8009a52:	4603      	mov	r3, r0
 8009a54:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 8009a56:	69b8      	ldr	r0, [r7, #24]
 8009a58:	f7f8 fd0f 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 8009a5c:	8a7b      	ldrh	r3, [r7, #18]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3720      	adds	r7, #32
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000058 	.word	0x20000058
 8009a6c:	0801b5b4 	.word	0x0801b5b4

08009a70 <chapSendFailure>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapSendFailure(PppContext *context)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppPacket *failurePacket;

   //Retrieve the length of the Failure packet
   length = sizeof(PppPacket);
 8009a78:	2304      	movs	r3, #4
 8009a7a:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Failure packet
   buffer = pppAllocBuffer(length, &offset);
 8009a7c:	f107 030c 	add.w	r3, r7, #12
 8009a80:	4619      	mov	r1, r3
 8009a82:	69f8      	ldr	r0, [r7, #28]
 8009a84:	f002 ff72 	bl	800c96c <pppAllocBuffer>
 8009a88:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <chapSendFailure+0x24>
      return ERROR_OUT_OF_MEMORY;
 8009a90:	2364      	movs	r3, #100	; 0x64
 8009a92:	e030      	b.n	8009af6 <chapSendFailure+0x86>

   //Point to the Failure packet
   failurePacket = netBufferAt(buffer, offset);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4619      	mov	r1, r3
 8009a98:	69b8      	ldr	r0, [r7, #24]
 8009a9a:	f7f8 fdc5 	bl	8002628 <netBufferAt>
 8009a9e:	6178      	str	r0, [r7, #20]

   //Format packet header
   failurePacket->code = CHAP_CODE_FAILURE;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	701a      	strb	r2, [r3, #0]
   failurePacket->identifier = context->chapFsm.localIdentifier;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	705a      	strb	r2, [r3, #1]
   failurePacket->length = htons(length);
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7f6 fd73 	bl	80005a0 <swapInt16>
 8009aba:	4603      	mov	r3, r0
 8009abc:	461a      	mov	r2, r3
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending CHAP Failure packet (%" PRIuSIZE " bytes)...\r\n", length);
 8009ac2:	f7f6 fdbd 	bl	8000640 <osSuspendAllTasks>
 8009ac6:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <chapSendFailure+0x90>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	490d      	ldr	r1, [pc, #52]	; (8009b04 <chapSendFailure+0x94>)
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f010 f9dd 	bl	8019e90 <fiprintf>
 8009ad6:	f7f6 fdbe 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) failurePacket, length, PPP_PROTOCOL_CHAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6998      	ldr	r0, [r3, #24]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	f24c 2323 	movw	r3, #49699	; 0xc223
 8009ae4:	69b9      	ldr	r1, [r7, #24]
 8009ae6:	f002 fdcb 	bl	800c680 <pppSendFrame>
 8009aea:	4603      	mov	r3, r0
 8009aec:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 8009aee:	69b8      	ldr	r0, [r7, #24]
 8009af0:	f7f8 fcc3 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 8009af4:	8a7b      	ldrh	r3, [r7, #18]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3720      	adds	r7, #32
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20000058 	.word	0x20000058
 8009b04:	0801b5e0 	.word	0x0801b5e0

08009b08 <ipcpOpen>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpOpen(PppContext *context)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nIPCP Open event\r\n");
 8009b10:	f7f6 fd96 	bl	8000640 <osSuspendAllTasks>
 8009b14:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <ipcpOpen+0x48>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	2213      	movs	r2, #19
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	480d      	ldr	r0, [pc, #52]	; (8009b54 <ipcpOpen+0x4c>)
 8009b20:	f010 fa16 	bl	8019f50 <fwrite>
 8009b24:	f7f6 fd97 	bl	8000656 <osResumeAllTasks>

   //The link is administratively available for traffic
   pppOpenEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	33a0      	adds	r3, #160	; 0xa0
 8009b2c:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <ipcpOpen+0x50>)
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f002 ff9b 	bl	800ca6c <pppOpenEvent>
   //The lower layer is ready to carry packets
   pppUpEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	33a0      	adds	r3, #160	; 0xa0
 8009b3a:	4a07      	ldr	r2, [pc, #28]	; (8009b58 <ipcpOpen+0x50>)
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f002 ff2c 	bl	800c99c <pppUpEvent>

   //Successful processing
   return NO_ERROR;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20000058 	.word	0x20000058
 8009b54:	0801b60c 	.word	0x0801b60c
 8009b58:	0801c3e8 	.word	0x0801c3e8

08009b5c <ipcpClose>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpClose(PppContext *context)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nIPCP Close event\r\n");
 8009b64:	f7f6 fd6c 	bl	8000640 <osSuspendAllTasks>
 8009b68:	4b0e      	ldr	r3, [pc, #56]	; (8009ba4 <ipcpClose+0x48>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	2214      	movs	r2, #20
 8009b70:	2101      	movs	r1, #1
 8009b72:	480d      	ldr	r0, [pc, #52]	; (8009ba8 <ipcpClose+0x4c>)
 8009b74:	f010 f9ec 	bl	8019f50 <fwrite>
 8009b78:	f7f6 fd6d 	bl	8000656 <osResumeAllTasks>

   //The lower layer is no longer ready to carry packets
   pppDownEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	33a0      	adds	r3, #160	; 0xa0
 8009b80:	4a0a      	ldr	r2, [pc, #40]	; (8009bac <ipcpClose+0x50>)
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f002 ff2d 	bl	800c9e4 <pppDownEvent>
   //The link is no longer available for traffic
   pppCloseEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	33a0      	adds	r3, #160	; 0xa0
 8009b8e:	4a07      	ldr	r2, [pc, #28]	; (8009bac <ipcpClose+0x50>)
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f002 ffae 	bl	800caf4 <pppCloseEvent>

   //Successful processing
   return NO_ERROR;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000058 	.word	0x20000058
 8009ba8:	0801b620 	.word	0x0801b620
 8009bac:	0801c3e8 	.word	0x0801c3e8

08009bb0 <ipcpTick>:
 *
 * @param[in] context PPP context
 **/

void ipcpTick(PppContext *context)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->ipcpFsm.state >= PPP_STATE_4_CLOSING &&
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d923      	bls.n	8009c0a <ipcpTick+0x5a>
      context->ipcpFsm.state <= PPP_STATE_8_ACK_SENT)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   if(context->ipcpFsm.state >= PPP_STATE_4_CLOSING &&
 8009bc8:	2b08      	cmp	r3, #8
 8009bca:	d81e      	bhi.n	8009c0a <ipcpTick+0x5a>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 8009bcc:	f7f6 fe00 	bl	80007d0 <osGetSystemTime>
 8009bd0:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->ipcpFsm.timestamp) >= PPP_RESTART_TIMER)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d912      	bls.n	8009c0a <ipcpTick+0x5a>
      {
         //Debug message
         TRACE_INFO("\r\nIPCP Timeout event\r\n");
 8009be4:	f7f6 fd2c 	bl	8000640 <osSuspendAllTasks>
 8009be8:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <ipcpTick+0x64>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	2216      	movs	r2, #22
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	4809      	ldr	r0, [pc, #36]	; (8009c18 <ipcpTick+0x68>)
 8009bf4:	f010 f9ac 	bl	8019f50 <fwrite>
 8009bf8:	f7f6 fd2d 	bl	8000656 <osResumeAllTasks>

         //The restart timer is used to retransmit Configure-Request
         //and Terminate-Request packets
         pppTimeoutEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	33a0      	adds	r3, #160	; 0xa0
 8009c00:	4a06      	ldr	r2, [pc, #24]	; (8009c1c <ipcpTick+0x6c>)
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f002 ffcf 	bl	800cba8 <pppTimeoutEvent>
      }
   }
}
 8009c0a:	bf00      	nop
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20000058 	.word	0x20000058
 8009c18:	0801b638 	.word	0x0801b638
 8009c1c:	0801c3e8 	.word	0x0801c3e8

08009c20 <ipcpProcessPacket>:
 * @param[in]  packet IPCP packet received from the peer
 * @param[in] length Length of the packet, in bytes
 **/

void ipcpProcessPacket(PppContext *context, const PppPacket *packet, size_t length)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming IPCP packet is valid
   if(length < sizeof(PppPacket))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d967      	bls.n	8009d02 <ipcpProcessPacket+0xe2>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	885b      	ldrh	r3, [r3, #2]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7f6 fcb1 	bl	80005a0 <swapInt16>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	461a      	mov	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d35e      	bcc.n	8009d06 <ipcpProcessPacket+0xe6>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	885b      	ldrh	r3, [r3, #2]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7f6 fca6 	bl	80005a0 <swapInt16>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d957      	bls.n	8009d0a <ipcpProcessPacket+0xea>
      return;

   //Save the length of the IPCP packet
   length = ntohs(packet->length);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	885b      	ldrh	r3, [r3, #2]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f6 fc9d 	bl	80005a0 <swapInt16>
 8009c66:	4603      	mov	r3, r0
 8009c68:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("IPCP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 8009c6a:	f7f6 fce9 	bl	8000640 <osSuspendAllTasks>
 8009c6e:	4b29      	ldr	r3, [pc, #164]	; (8009d14 <ipcpProcessPacket+0xf4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4928      	ldr	r1, [pc, #160]	; (8009d18 <ipcpProcessPacket+0xf8>)
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f010 f909 	bl	8019e90 <fiprintf>
 8009c7e:	f7f6 fcea 	bl	8000656 <osResumeAllTasks>
   //Dump IPCP packet contents for debugging purpose
   pppDumpPacket(packet, length, PPP_PROTOCOL_IPCP);

   //Check IPCP code field
   switch(packet->code)
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	2b06      	cmp	r3, #6
 8009c8a:	d834      	bhi.n	8009cf6 <ipcpProcessPacket+0xd6>
 8009c8c:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <ipcpProcessPacket+0x74>)
 8009c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c92:	bf00      	nop
 8009c94:	08009cb1 	.word	0x08009cb1
 8009c98:	08009cbb 	.word	0x08009cbb
 8009c9c:	08009cc5 	.word	0x08009cc5
 8009ca0:	08009ccf 	.word	0x08009ccf
 8009ca4:	08009cd9 	.word	0x08009cd9
 8009ca8:	08009ce3 	.word	0x08009ce3
 8009cac:	08009ced 	.word	0x08009ced
   {
   //Configure-Request packet?
   case PPP_CODE_CONFIGURE_REQ:
      //Process Configure-Request packet
      ipcpProcessConfigureReq(context, (PppConfigurePacket *) packet);
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f832 	bl	8009d1c <ipcpProcessConfigureReq>
      break;
 8009cb8:	e028      	b.n	8009d0c <ipcpProcessPacket+0xec>
   //Configure-Ack packet?
   case PPP_CODE_CONFIGURE_ACK:
      //Process Configure-Ack packet
      ipcpProcessConfigureAck(context, (PppConfigurePacket *) packet);
 8009cba:	68b9      	ldr	r1, [r7, #8]
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 f8b1 	bl	8009e24 <ipcpProcessConfigureAck>
      break;
 8009cc2:	e023      	b.n	8009d0c <ipcpProcessPacket+0xec>
   //Configure-Nak packet?
   case PPP_CODE_CONFIGURE_NAK:
      //Process Configure-Nak packet
      ipcpProcessConfigureNak(context, (PppConfigurePacket *) packet);
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 f8d8 	bl	8009e7c <ipcpProcessConfigureNak>
      break;
 8009ccc:	e01e      	b.n	8009d0c <ipcpProcessPacket+0xec>
   //Configure-Reject packet?
   case PPP_CODE_CONFIGURE_REJ:
      //Process Configure-Reject packet
      ipcpProcessConfigureReject(context, (PppConfigurePacket *) packet);
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f961 	bl	8009f98 <ipcpProcessConfigureReject>
      break;
 8009cd6:	e019      	b.n	8009d0c <ipcpProcessPacket+0xec>
   //Terminate-Request packet?
   case PPP_CODE_TERMINATE_REQ:
      //Process Terminate-Request packet
      ipcpProcessTerminateReq(context, (PppTerminatePacket *) packet);
 8009cd8:	68b9      	ldr	r1, [r7, #8]
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 f9cc 	bl	800a078 <ipcpProcessTerminateReq>
      break;
 8009ce0:	e014      	b.n	8009d0c <ipcpProcessPacket+0xec>
   //Terminate-Ack packet?
   case PPP_CODE_TERMINATE_ACK:
      //Process Terminate-Ack packet
      ipcpProcessTerminateAck(context, (PppTerminatePacket *) packet);
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f9eb 	bl	800a0c0 <ipcpProcessTerminateAck>
      break;
 8009cea:	e00f      	b.n	8009d0c <ipcpProcessPacket+0xec>
   //Code-Reject packet?
   case PPP_CODE_CODE_REJ:
      //Process Code-Reject packet
      ipcpProcessCodeRej(context, (PppCodeRejPacket *) packet);
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f000 fa0a 	bl	800a108 <ipcpProcessCodeRej>
      break;
 8009cf4:	e00a      	b.n	8009d0c <ipcpProcessPacket+0xec>
   //Unknown code field
   default:
      //The packet is un-interpretable
      ipcpProcessUnknownCode(context, packet);
 8009cf6:	68b9      	ldr	r1, [r7, #8]
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 fa4b 	bl	800a194 <ipcpProcessUnknownCode>
      break;
 8009cfe:	bf00      	nop
 8009d00:	e004      	b.n	8009d0c <ipcpProcessPacket+0xec>
      return;
 8009d02:	bf00      	nop
 8009d04:	e002      	b.n	8009d0c <ipcpProcessPacket+0xec>
      return;
 8009d06:	bf00      	nop
 8009d08:	e000      	b.n	8009d0c <ipcpProcessPacket+0xec>
      return;
 8009d0a:	bf00      	nop
   }
}
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000058 	.word	0x20000058
 8009d18:	0801b650 	.word	0x0801b650

08009d1c <ipcpProcessConfigureReq>:
 * @return Error code
 **/

error_t ipcpProcessConfigureReq(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08a      	sub	sp, #40	; 0x28
 8009d20:	af02      	add	r7, sp, #8
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
   bool_t notRecognizable;
   bool_t notAcceptable;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Configure-Request event\r\n");
 8009d26:	f7f6 fc8b 	bl	8000640 <osSuspendAllTasks>
 8009d2a:	4b3b      	ldr	r3, [pc, #236]	; (8009e18 <ipcpProcessConfigureReq+0xfc>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	2228      	movs	r2, #40	; 0x28
 8009d32:	2101      	movs	r1, #1
 8009d34:	4839      	ldr	r0, [pc, #228]	; (8009e1c <ipcpProcessConfigureReq+0x100>)
 8009d36:	f010 f90b 	bl	8019f50 <fwrite>
 8009d3a:	f7f6 fc8c 	bl	8000656 <osResumeAllTasks>

   //Initialize variables
   error = NO_ERROR;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	83fb      	strh	r3, [r7, #30]
   notRecognizable = FALSE;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]
   notAcceptable = FALSE;
 8009d46:	2300      	movs	r3, #0
 8009d48:	613b      	str	r3, [r7, #16]

   //Retrieve the length of the option list
   length = ntohs(configureReqPacket->length) - sizeof(PppConfigurePacket);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	885b      	ldrh	r3, [r3, #2]
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f6 fc25 	bl	80005a0 <swapInt16>
 8009d56:	4603      	mov	r3, r0
 8009d58:	3b04      	subs	r3, #4
 8009d5a:	61bb      	str	r3, [r7, #24]
   //Point to the first option
   option = (PppOption *) configureReqPacket->options;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	60fb      	str	r3, [r7, #12]

   //Parse configuration options
   while(length > 0)
 8009d62:	e026      	b.n	8009db2 <ipcpProcessConfigureReq+0x96>
   {
      //Parse current option
      error = ipcpParseOption(context, option, length, NULL);
 8009d64:	2300      	movs	r3, #0
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	68f9      	ldr	r1, [r7, #12]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fd24 	bl	800a7b8 <ipcpParseOption>
 8009d70:	4603      	mov	r3, r0
 8009d72:	83fb      	strh	r3, [r7, #30]

      //Any error to report?
      if(error == ERROR_INVALID_TYPE)
 8009d74:	8bfb      	ldrh	r3, [r7, #30]
 8009d76:	2bef      	cmp	r3, #239	; 0xef
 8009d78:	d104      	bne.n	8009d84 <ipcpProcessConfigureReq+0x68>
      {
         //Option not recognizable
         notRecognizable = TRUE;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	617b      	str	r3, [r7, #20]
         //Catch error
         error = NO_ERROR;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	83fb      	strh	r3, [r7, #30]
 8009d82:	e00a      	b.n	8009d9a <ipcpProcessConfigureReq+0x7e>
      }
      else if(error == ERROR_INVALID_VALUE)
 8009d84:	8bfb      	ldrh	r3, [r7, #30]
 8009d86:	2bf0      	cmp	r3, #240	; 0xf0
 8009d88:	d104      	bne.n	8009d94 <ipcpProcessConfigureReq+0x78>
      {
         //Option not acceptable for configuration
         notAcceptable = TRUE;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	613b      	str	r3, [r7, #16]
         //Catch error
         error = NO_ERROR;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	83fb      	strh	r3, [r7, #30]
 8009d92:	e002      	b.n	8009d9a <ipcpProcessConfigureReq+0x7e>
      }
      else if(error)
 8009d94:	8bfb      	ldrh	r3, [r7, #30]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10f      	bne.n	8009dba <ipcpProcessConfigureReq+0x9e>
         //Malformed Configure-Request packet
         break;
      }

      //Remaining bytes to process
      length -= option->length;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	785b      	ldrb	r3, [r3, #1]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	61bb      	str	r3, [r7, #24]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	785b      	ldrb	r3, [r3, #1]
 8009daa:	461a      	mov	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]
   while(length > 0)
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1d5      	bne.n	8009d64 <ipcpProcessConfigureReq+0x48>
 8009db8:	e000      	b.n	8009dbc <ipcpProcessConfigureReq+0xa0>
         break;
 8009dba:	bf00      	nop
   }

   //Valid Configure-Request packet received from the peer?
   if(!error)
 8009dbc:	8bfb      	ldrh	r3, [r7, #30]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d125      	bne.n	8009e0e <ipcpProcessConfigureReq+0xf2>
   {
      //Check flags
      if(notRecognizable)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00a      	beq.n	8009dde <ipcpProcessConfigureReq+0xc2>
      {
         //If some configuration options received in the Configure-Request are not
         //recognizable or not acceptable for negotiation, then the implementation
         //must transmit a Configure-Reject
         pppRcvConfigureReqEvent(context, &context->ipcpFsm, &ipcpCallbacks,
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8009dce:	2304      	movs	r3, #4
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	4a12      	ldr	r2, [pc, #72]	; (8009e20 <ipcpProcessConfigureReq+0x104>)
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f002 ff38 	bl	800cc4c <pppRcvConfigureReqEvent>
 8009ddc:	e017      	b.n	8009e0e <ipcpProcessConfigureReq+0xf2>
            configureReqPacket, PPP_CODE_CONFIGURE_REJ);
      }
      else if(notAcceptable)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <ipcpProcessConfigureReq+0xde>
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         pppRcvConfigureReqEvent(context, &context->ipcpFsm, &ipcpCallbacks,
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8009dea:	2303      	movs	r3, #3
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	4a0b      	ldr	r2, [pc, #44]	; (8009e20 <ipcpProcessConfigureReq+0x104>)
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f002 ff2a 	bl	800cc4c <pppRcvConfigureReqEvent>
 8009df8:	e009      	b.n	8009e0e <ipcpProcessConfigureReq+0xf2>
      else
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         pppRcvConfigureReqEvent(context, &context->ipcpFsm, &ipcpCallbacks,
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8009e00:	2302      	movs	r3, #2
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	4a06      	ldr	r2, [pc, #24]	; (8009e20 <ipcpProcessConfigureReq+0x104>)
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f002 ff1f 	bl	800cc4c <pppRcvConfigureReqEvent>
            configureReqPacket, PPP_CODE_CONFIGURE_ACK);
      }
   }

   //Return status code
   return error;
 8009e0e:	8bfb      	ldrh	r3, [r7, #30]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3720      	adds	r7, #32
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20000058 	.word	0x20000058
 8009e1c:	0801b678 	.word	0x0801b678
 8009e20:	0801c3e8 	.word	0x0801c3e8

08009e24 <ipcpProcessConfigureAck>:
 * @return Error code
 **/

error_t ipcpProcessConfigureAck(PppContext *context,
   const PppConfigurePacket *configureAckPacket)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Configure-Ack event\r\n");
 8009e2e:	f7f6 fc07 	bl	8000640 <osSuspendAllTasks>
 8009e32:	4b0f      	ldr	r3, [pc, #60]	; (8009e70 <ipcpProcessConfigureAck+0x4c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	2224      	movs	r2, #36	; 0x24
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	480d      	ldr	r0, [pc, #52]	; (8009e74 <ipcpProcessConfigureAck+0x50>)
 8009e3e:	f010 f887 	bl	8019f50 <fwrite>
 8009e42:	f7f6 fc08 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureAckPacket->identifier != context->ipcpFsm.identifier)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	785a      	ldrb	r2, [r3, #1]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d001      	beq.n	8009e58 <ipcpProcessConfigureAck+0x34>
      return ERROR_WRONG_IDENTIFIER;
 8009e54:	23d6      	movs	r3, #214	; 0xd6
 8009e56:	e007      	b.n	8009e68 <ipcpProcessConfigureAck+0x44>

   //A valid Configure-Ack packet has been received from the peer
   pppRcvConfigureAckEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	33a0      	adds	r3, #160	; 0xa0
 8009e5c:	4a06      	ldr	r2, [pc, #24]	; (8009e78 <ipcpProcessConfigureAck+0x54>)
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f003 f819 	bl	800ce98 <pppRcvConfigureAckEvent>

   //Successful processing
   return NO_ERROR;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	20000058 	.word	0x20000058
 8009e74:	0801b6a4 	.word	0x0801b6a4
 8009e78:	0801c3e8 	.word	0x0801c3e8

08009e7c <ipcpProcessConfigureNak>:
 * @return Error code
 **/

error_t ipcpProcessConfigureNak(PppContext *context,
   const PppConfigurePacket *configureNakPacket)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("IPCP Receive-Configure-Nak event\r\n");
 8009e86:	f7f6 fbdb 	bl	8000640 <osSuspendAllTasks>
 8009e8a:	4b40      	ldr	r3, [pc, #256]	; (8009f8c <ipcpProcessConfigureNak+0x110>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	2222      	movs	r2, #34	; 0x22
 8009e92:	2101      	movs	r1, #1
 8009e94:	483e      	ldr	r0, [pc, #248]	; (8009f90 <ipcpProcessConfigureNak+0x114>)
 8009e96:	f010 f85b 	bl	8019f50 <fwrite>
 8009e9a:	f7f6 fbdc 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureNakPacket->identifier != context->ipcpFsm.identifier)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	785a      	ldrb	r2, [r3, #1]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d001      	beq.n	8009eb0 <ipcpProcessConfigureNak+0x34>
      return ERROR_WRONG_IDENTIFIER;
 8009eac:	23d6      	movs	r3, #214	; 0xd6
 8009eae:	e069      	b.n	8009f84 <ipcpProcessConfigureNak+0x108>

   //Retrieve the length of the option list
   length = ntohs(configureNakPacket->length) - sizeof(PppConfigurePacket);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	885b      	ldrh	r3, [r3, #2]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7f6 fb72 	bl	80005a0 <swapInt16>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	3b04      	subs	r3, #4
 8009ec0:	61fb      	str	r3, [r7, #28]
   //Point to the first option
   option = (PppOption *) configureNakPacket->options;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	61bb      	str	r3, [r7, #24]

   //Parse configuration options
   while(length > 0)
 8009ec8:	e051      	b.n	8009f6e <ipcpProcessConfigureNak+0xf2>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	785b      	ldrb	r3, [r3, #1]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d801      	bhi.n	8009ed6 <ipcpProcessConfigureNak+0x5a>
         return ERROR_INVALID_LENGTH;
 8009ed2:	23eb      	movs	r3, #235	; 0xeb
 8009ed4:	e056      	b.n	8009f84 <ipcpProcessConfigureNak+0x108>
      if(option->length > length)
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	785b      	ldrb	r3, [r3, #1]
 8009eda:	461a      	mov	r2, r3
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d201      	bcs.n	8009ee6 <ipcpProcessConfigureNak+0x6a>
         return ERROR_INVALID_LENGTH;
 8009ee2:	23eb      	movs	r3, #235	; 0xeb
 8009ee4:	e04e      	b.n	8009f84 <ipcpProcessConfigureNak+0x108>

      //IP-Address option?
      if(option->type == IPCP_OPTION_IP_ADDRESS)
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d10e      	bne.n	8009f0c <ipcpProcessConfigureNak+0x90>
      {
         //Cast option
         IpcpIpAddressOption *ipAddressOption = (IpcpIpAddressOption *) option;
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	60fb      	str	r3, [r7, #12]

         //Check option length
         if(ipAddressOption->length != sizeof(IpcpIpAddressOption))
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b06      	cmp	r3, #6
 8009ef8:	d001      	beq.n	8009efe <ipcpProcessConfigureNak+0x82>
            return ERROR_INVALID_LENGTH;
 8009efa:	23eb      	movs	r3, #235	; 0xeb
 8009efc:	e042      	b.n	8009f84 <ipcpProcessConfigureNak+0x108>

         //Save IP address
         context->localConfig.ipAddr = ipAddressOption->ipAddr;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8009f0a:	e024      	b.n	8009f56 <ipcpProcessConfigureNak+0xda>
      }
      //Primary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_PRIMARY_DNS)
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b81      	cmp	r3, #129	; 0x81
 8009f12:	d10e      	bne.n	8009f32 <ipcpProcessConfigureNak+0xb6>
      {
         //Cast option
         IpcpPrimaryDnsOption *primaryDns = (IpcpPrimaryDnsOption *) option;
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	613b      	str	r3, [r7, #16]

         //Check option length
         if(primaryDns->length != sizeof(IpcpPrimaryDnsOption))
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	785b      	ldrb	r3, [r3, #1]
 8009f1c:	2b06      	cmp	r3, #6
 8009f1e:	d001      	beq.n	8009f24 <ipcpProcessConfigureNak+0xa8>
            return ERROR_INVALID_LENGTH;
 8009f20:	23eb      	movs	r3, #235	; 0xeb
 8009f22:	e02f      	b.n	8009f84 <ipcpProcessConfigureNak+0x108>

         //Save primary DNS server address
         context->localConfig.primaryDns = primaryDns->ipAddr;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8009f30:	e011      	b.n	8009f56 <ipcpProcessConfigureNak+0xda>
      }
      //Secondary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_SECONDARY_DNS)
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b83      	cmp	r3, #131	; 0x83
 8009f38:	d10d      	bne.n	8009f56 <ipcpProcessConfigureNak+0xda>
      {
         //Cast option
         IpcpSecondaryDnsOption *secondaryDns = (IpcpSecondaryDnsOption *) option;
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	617b      	str	r3, [r7, #20]

         //Check option length
         if(secondaryDns->length != sizeof(IpcpSecondaryDnsOption))
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	2b06      	cmp	r3, #6
 8009f44:	d001      	beq.n	8009f4a <ipcpProcessConfigureNak+0xce>
            return ERROR_INVALID_LENGTH;
 8009f46:	23eb      	movs	r3, #235	; 0xeb
 8009f48:	e01c      	b.n	8009f84 <ipcpProcessConfigureNak+0x108>

         //Save secondary DNS server address
         context->localConfig.secondaryDns = secondaryDns->ipAddr;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
      }

      //Remaining bytes to process
      length -= option->length;
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	785b      	ldrb	r3, [r3, #1]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	61fb      	str	r3, [r7, #28]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	785b      	ldrb	r3, [r3, #1]
 8009f66:	461a      	mov	r2, r3
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	61bb      	str	r3, [r7, #24]
   while(length > 0)
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1aa      	bne.n	8009eca <ipcpProcessConfigureNak+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	33a0      	adds	r3, #160	; 0xa0
 8009f78:	4a06      	ldr	r2, [pc, #24]	; (8009f94 <ipcpProcessConfigureNak+0x118>)
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f002 ffe1 	bl	800cf44 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3720      	adds	r7, #32
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20000058 	.word	0x20000058
 8009f90:	0801b6cc 	.word	0x0801b6cc
 8009f94:	0801c3e8 	.word	0x0801c3e8

08009f98 <ipcpProcessConfigureReject>:
 * @return Error code
 **/

error_t ipcpProcessConfigureReject(PppContext *context,
   const PppConfigurePacket *configureRejPacket)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Configure-Reject event\r\n");
 8009fa2:	f7f6 fb4d 	bl	8000640 <osSuspendAllTasks>
 8009fa6:	4b31      	ldr	r3, [pc, #196]	; (800a06c <ipcpProcessConfigureReject+0xd4>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	2227      	movs	r2, #39	; 0x27
 8009fae:	2101      	movs	r1, #1
 8009fb0:	482f      	ldr	r0, [pc, #188]	; (800a070 <ipcpProcessConfigureReject+0xd8>)
 8009fb2:	f00f ffcd 	bl	8019f50 <fwrite>
 8009fb6:	f7f6 fb4e 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureRejPacket->identifier != context->ipcpFsm.identifier)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	785a      	ldrb	r2, [r3, #1]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d001      	beq.n	8009fcc <ipcpProcessConfigureReject+0x34>
      return ERROR_WRONG_IDENTIFIER;
 8009fc8:	23d6      	movs	r3, #214	; 0xd6
 8009fca:	e04b      	b.n	800a064 <ipcpProcessConfigureReject+0xcc>

   //Retrieve the length of the option list
   length = ntohs(configureRejPacket->length) - sizeof(PppConfigurePacket);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	885b      	ldrh	r3, [r3, #2]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7f6 fae4 	bl	80005a0 <swapInt16>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	3b04      	subs	r3, #4
 8009fdc:	60fb      	str	r3, [r7, #12]
   //Point to the first option
   option = (PppOption *) configureRejPacket->options;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	60bb      	str	r3, [r7, #8]

   //Parse configuration options
   while(length > 0)
 8009fe4:	e033      	b.n	800a04e <ipcpProcessConfigureReject+0xb6>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	785b      	ldrb	r3, [r3, #1]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d801      	bhi.n	8009ff2 <ipcpProcessConfigureReject+0x5a>
         return ERROR_INVALID_LENGTH;
 8009fee:	23eb      	movs	r3, #235	; 0xeb
 8009ff0:	e038      	b.n	800a064 <ipcpProcessConfigureReject+0xcc>
      if(option->length > length)
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	785b      	ldrb	r3, [r3, #1]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d201      	bcs.n	800a002 <ipcpProcessConfigureReject+0x6a>
         return ERROR_INVALID_LENGTH;
 8009ffe:	23eb      	movs	r3, #235	; 0xeb
 800a000:	e030      	b.n	800a064 <ipcpProcessConfigureReject+0xcc>

      //IP-Address option?
      if(option->type == IPCP_OPTION_IP_ADDRESS)
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	2b03      	cmp	r3, #3
 800a008:	d104      	bne.n	800a014 <ipcpProcessConfigureReject+0x7c>
      {
         //The option is not recognized by the peer
         context->localConfig.ipAddrRejected = TRUE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800a012:	e010      	b.n	800a036 <ipcpProcessConfigureReject+0x9e>
      }
      //Primary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_PRIMARY_DNS)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	2b81      	cmp	r3, #129	; 0x81
 800a01a:	d104      	bne.n	800a026 <ipcpProcessConfigureReject+0x8e>
      {
         //The option is not recognized by the peer
         context->localConfig.primaryDnsRejected = TRUE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800a024:	e007      	b.n	800a036 <ipcpProcessConfigureReject+0x9e>
      }
      //Secondary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_SECONDARY_DNS)
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	2b83      	cmp	r3, #131	; 0x83
 800a02c:	d103      	bne.n	800a036 <ipcpProcessConfigureReject+0x9e>
      {
         //The option is not recognized by the peer
         context->localConfig.secondaryDnsRejected = TRUE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
      }

      //Remaining bytes to process
      length -= option->length;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	785b      	ldrb	r3, [r3, #1]
 800a03a:	461a      	mov	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	1a9b      	subs	r3, r3, r2
 800a040:	60fb      	str	r3, [r7, #12]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	785b      	ldrb	r3, [r3, #1]
 800a046:	461a      	mov	r2, r3
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4413      	add	r3, r2
 800a04c:	60bb      	str	r3, [r7, #8]
   while(length > 0)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1c8      	bne.n	8009fe6 <ipcpProcessConfigureReject+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	33a0      	adds	r3, #160	; 0xa0
 800a058:	4a06      	ldr	r2, [pc, #24]	; (800a074 <ipcpProcessConfigureReject+0xdc>)
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f002 ff71 	bl	800cf44 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20000058 	.word	0x20000058
 800a070:	0801b6f0 	.word	0x0801b6f0
 800a074:	0801c3e8 	.word	0x0801c3e8

0800a078 <ipcpProcessTerminateReq>:
 * @return Error code
 **/

error_t ipcpProcessTerminateReq(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Terminate-Request event\r\n");
 800a082:	f7f6 fadd 	bl	8000640 <osSuspendAllTasks>
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <ipcpProcessTerminateReq+0x3c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	2228      	movs	r2, #40	; 0x28
 800a08e:	2101      	movs	r1, #1
 800a090:	4809      	ldr	r0, [pc, #36]	; (800a0b8 <ipcpProcessTerminateReq+0x40>)
 800a092:	f00f ff5d 	bl	8019f50 <fwrite>
 800a096:	f7f6 fade 	bl	8000656 <osResumeAllTasks>

   //The Terminate-Request indicates the desire of the peer to close the connection
   pppRcvTerminateReqEvent(context, &context->ipcpFsm,
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	4a06      	ldr	r2, [pc, #24]	; (800a0bc <ipcpProcessTerminateReq+0x44>)
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f002 ffa1 	bl	800cfec <pppRcvTerminateReqEvent>
      &ipcpCallbacks, terminateReqPacket);

   //Successful processing
   return NO_ERROR;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000058 	.word	0x20000058
 800a0b8:	0801b718 	.word	0x0801b718
 800a0bc:	0801c3e8 	.word	0x0801c3e8

0800a0c0 <ipcpProcessTerminateAck>:
 * @return Error code
 **/

error_t ipcpProcessTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateAckPacket)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Terminate-Ack event\r\n");
 800a0ca:	f7f6 fab9 	bl	8000640 <osSuspendAllTasks>
 800a0ce:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <ipcpProcessTerminateAck+0x3c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	2224      	movs	r2, #36	; 0x24
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	4809      	ldr	r0, [pc, #36]	; (800a100 <ipcpProcessTerminateAck+0x40>)
 800a0da:	f00f ff39 	bl	8019f50 <fwrite>
 800a0de:	f7f6 faba 	bl	8000656 <osResumeAllTasks>

   //The Terminate-Ack packet is usually a response to a Terminate-Request
   //packet. This packet may also indicate that the peer is in Closed or
   //Stopped states, and serves to re-synchronize the link configuration
   pppRcvTerminateAckEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	33a0      	adds	r3, #160	; 0xa0
 800a0e6:	4a07      	ldr	r2, [pc, #28]	; (800a104 <ipcpProcessTerminateAck+0x44>)
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f002 ffc6 	bl	800d07c <pppRcvTerminateAckEvent>

   //Successful processing
   return NO_ERROR;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20000058 	.word	0x20000058
 800a100:	0801b744 	.word	0x0801b744
 800a104:	0801c3e8 	.word	0x0801c3e8

0800a108 <ipcpProcessCodeRej>:
 * @return Error code
 **/

error_t ipcpProcessCodeRej(PppContext *context,
   const PppCodeRejPacket *codeRejPacket)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
   size_t length;
   PppPacket *packet;

   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Code-Reject event\r\n");
 800a112:	f7f6 fa95 	bl	8000640 <osSuspendAllTasks>
 800a116:	4b1c      	ldr	r3, [pc, #112]	; (800a188 <ipcpProcessCodeRej+0x80>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	2222      	movs	r2, #34	; 0x22
 800a11e:	2101      	movs	r1, #1
 800a120:	481a      	ldr	r0, [pc, #104]	; (800a18c <ipcpProcessCodeRej+0x84>)
 800a122:	f00f ff15 	bl	8019f50 <fwrite>
 800a126:	f7f6 fa96 	bl	8000656 <osResumeAllTasks>

   //Point to the rejected packet
   packet = (PppPacket *) codeRejPacket->rejectedPacket;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	3304      	adds	r3, #4
 800a12e:	60fb      	str	r3, [r7, #12]
   //Retrieve the length of the rejected packet
   length = ntohs(codeRejPacket->length) - sizeof(PppCodeRejPacket);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	885b      	ldrh	r3, [r3, #2]
 800a134:	b29b      	uxth	r3, r3
 800a136:	4618      	mov	r0, r3
 800a138:	f7f6 fa32 	bl	80005a0 <swapInt16>
 800a13c:	4603      	mov	r3, r0
 800a13e:	3b04      	subs	r3, #4
 800a140:	60bb      	str	r3, [r7, #8]

   //Make sure the length of the rejected packet is valid
   if(length < sizeof(PppPacket))
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2b03      	cmp	r3, #3
 800a146:	d801      	bhi.n	800a14c <ipcpProcessCodeRej+0x44>
      return ERROR_INVALID_LENGTH;
 800a148:	23eb      	movs	r3, #235	; 0xeb
 800a14a:	e019      	b.n	800a180 <ipcpProcessCodeRej+0x78>

   //Check whether the rejected value is acceptable or catastrophic
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d003      	beq.n	800a15c <ipcpProcessCodeRej+0x54>
      packet->code > PPP_CODE_CODE_REJ)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	781b      	ldrb	r3, [r3, #0]
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 800a158:	2b07      	cmp	r3, #7
 800a15a:	d908      	bls.n	800a16e <ipcpProcessCodeRej+0x66>
   {
      //The RXJ+ event arises when the rejected value is acceptable, such
      //as a Code-Reject of an extended code, or a Protocol-Reject of a
      //NCP. These are within the scope of normal operation
      pppRcvCodeRejEvent(context, &context->ipcpFsm, &ipcpCallbacks, TRUE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800a162:	2301      	movs	r3, #1
 800a164:	4a0a      	ldr	r2, [pc, #40]	; (800a190 <ipcpProcessCodeRej+0x88>)
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f002 ffe8 	bl	800d13c <pppRcvCodeRejEvent>
 800a16c:	e007      	b.n	800a17e <ipcpProcessCodeRej+0x76>
   else
   {
      //The RXJ- event arises when the rejected value is catastrophic, such
      //as a Code-Reject of Configure-Request! This event communicates an
      //unrecoverable error that terminates the connection
      pppRcvCodeRejEvent(context, &context->ipcpFsm, &ipcpCallbacks, FALSE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800a174:	2300      	movs	r3, #0
 800a176:	4a06      	ldr	r2, [pc, #24]	; (800a190 <ipcpProcessCodeRej+0x88>)
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f002 ffdf 	bl	800d13c <pppRcvCodeRejEvent>
   }

   //Successful processing
   return NO_ERROR;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	20000058 	.word	0x20000058
 800a18c:	0801b76c 	.word	0x0801b76c
 800a190:	0801c3e8 	.word	0x0801c3e8

0800a194 <ipcpProcessUnknownCode>:
 * @return Error code
 **/

error_t ipcpProcessUnknownCode(PppContext *context,
   const PppPacket *packet)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Unknown-Code event\r\n");
 800a19e:	f7f6 fa4f 	bl	8000640 <osSuspendAllTasks>
 800a1a2:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <ipcpProcessUnknownCode+0x3c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	2223      	movs	r2, #35	; 0x23
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	4809      	ldr	r0, [pc, #36]	; (800a1d4 <ipcpProcessUnknownCode+0x40>)
 800a1ae:	f00f fecf 	bl	8019f50 <fwrite>
 800a1b2:	f7f6 fa50 	bl	8000656 <osResumeAllTasks>

   //This event occurs when an un-interpretable packet is received from
   //the peer. A Code-Reject packet is sent in response
   pppRcvUnknownCodeEvent(context, &context->ipcpFsm, &ipcpCallbacks, packet);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	4a06      	ldr	r2, [pc, #24]	; (800a1d8 <ipcpProcessUnknownCode+0x44>)
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f002 ffa3 	bl	800d10c <pppRcvUnknownCodeEvent>

   //Successful processing
   return NO_ERROR;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20000058 	.word	0x20000058
 800a1d4:	0801b790 	.word	0x0801b790
 800a1d8:	0801c3e8 	.word	0x0801c3e8

0800a1dc <ipcpThisLayerUp>:
 * @brief This-Layer-Up callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerUp(PppContext *context)
{
 800a1dc:	b590      	push	{r4, r7, lr}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Debug message
   TRACE_INFO("IPCP This-Layer-Up callback\r\n");
 800a1e4:	f7f6 fa2c 	bl	8000640 <osSuspendAllTasks>
 800a1e8:	4b48      	ldr	r3, [pc, #288]	; (800a30c <ipcpThisLayerUp+0x130>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	221d      	movs	r2, #29
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	4847      	ldr	r0, [pc, #284]	; (800a310 <ipcpThisLayerUp+0x134>)
 800a1f4:	f00f feac 	bl	8019f50 <fwrite>
 800a1f8:	f7f6 fa2d 	bl	8000656 <osResumeAllTasks>

   //Debug message
   TRACE_INFO("  Local IP Addr = %s\r\n", ipv4AddrToString(context->localConfig.ipAddr, NULL));
 800a1fc:	f7f6 fa20 	bl	8000640 <osSuspendAllTasks>
 800a200:	4b42      	ldr	r3, [pc, #264]	; (800a30c <ipcpThisLayerUp+0x130>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68dc      	ldr	r4, [r3, #12]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800a20c:	2100      	movs	r1, #0
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe f826 	bl	8008260 <ipv4AddrToString>
 800a214:	4603      	mov	r3, r0
 800a216:	461a      	mov	r2, r3
 800a218:	493e      	ldr	r1, [pc, #248]	; (800a314 <ipcpThisLayerUp+0x138>)
 800a21a:	4620      	mov	r0, r4
 800a21c:	f00f fe38 	bl	8019e90 <fiprintf>
 800a220:	f7f6 fa19 	bl	8000656 <osResumeAllTasks>
   TRACE_INFO("  Peer IP Addr = %s\r\n", ipv4AddrToString(context->peerConfig.ipAddr, NULL));
 800a224:	f7f6 fa0c 	bl	8000640 <osSuspendAllTasks>
 800a228:	4b38      	ldr	r3, [pc, #224]	; (800a30c <ipcpThisLayerUp+0x130>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68dc      	ldr	r4, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800a234:	2100      	movs	r1, #0
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe f812 	bl	8008260 <ipv4AddrToString>
 800a23c:	4603      	mov	r3, r0
 800a23e:	461a      	mov	r2, r3
 800a240:	4935      	ldr	r1, [pc, #212]	; (800a318 <ipcpThisLayerUp+0x13c>)
 800a242:	4620      	mov	r0, r4
 800a244:	f00f fe24 	bl	8019e90 <fiprintf>
 800a248:	f7f6 fa05 	bl	8000656 <osResumeAllTasks>
   TRACE_INFO("  Primary DNS = %s\r\n", ipv4AddrToString(context->localConfig.primaryDns, NULL));
 800a24c:	f7f6 f9f8 	bl	8000640 <osSuspendAllTasks>
 800a250:	4b2e      	ldr	r3, [pc, #184]	; (800a30c <ipcpThisLayerUp+0x130>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68dc      	ldr	r4, [r3, #12]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a25c:	2100      	movs	r1, #0
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fd fffe 	bl	8008260 <ipv4AddrToString>
 800a264:	4603      	mov	r3, r0
 800a266:	461a      	mov	r2, r3
 800a268:	492c      	ldr	r1, [pc, #176]	; (800a31c <ipcpThisLayerUp+0x140>)
 800a26a:	4620      	mov	r0, r4
 800a26c:	f00f fe10 	bl	8019e90 <fiprintf>
 800a270:	f7f6 f9f1 	bl	8000656 <osResumeAllTasks>
   TRACE_INFO("  Secondary DNS = %s\r\n", ipv4AddrToString(context->localConfig.secondaryDns, NULL));
 800a274:	f7f6 f9e4 	bl	8000640 <osSuspendAllTasks>
 800a278:	4b24      	ldr	r3, [pc, #144]	; (800a30c <ipcpThisLayerUp+0x130>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68dc      	ldr	r4, [r3, #12]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a284:	2100      	movs	r1, #0
 800a286:	4618      	mov	r0, r3
 800a288:	f7fd ffea 	bl	8008260 <ipv4AddrToString>
 800a28c:	4603      	mov	r3, r0
 800a28e:	461a      	mov	r2, r3
 800a290:	4923      	ldr	r1, [pc, #140]	; (800a320 <ipcpThisLayerUp+0x144>)
 800a292:	4620      	mov	r0, r4
 800a294:	f00f fdfc 	bl	8019e90 <fiprintf>
 800a298:	f7f6 f9dd 	bl	8000656 <osResumeAllTasks>

   //Point to the underlying interface
   interface = context->interface;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	60fb      	str	r3, [r7, #12]

   //Update IPv4 configuration
   interface->ipv4Context.addrList[0].addr = context->localConfig.ipAddr;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   interface->ipv4Context.addrList[0].state = IPV4_ADDR_STATE_VALID;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
   interface->ipv4Context.addrList[0].defaultGateway = context->peerConfig.ipAddr;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

   //Update the list of DNS servers
   interface->ipv4Context.dnsServerList[0] = context->localConfig.primaryDns;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#if (IPV4_DNS_SERVER_LIST_SIZE >= 2)
   interface->ipv4Context.dnsServerList[1] = context->localConfig.secondaryDns;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif

   //All the outgoing traffic will be routed to the other end of the link
   interface->ipv4Context.addrList[0].subnetMask = IPCP_DEFAULT_SUBNET_MASK;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //Link is up
   interface->linkState = TRUE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	67da      	str	r2, [r3, #124]	; 0x7c

   //Disable interrupts
   interface->nicDriver->disableIrq(interface);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	4798      	blx	r3
   //Process link state change event
   nicNotifyLinkChange(interface);
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7f8 fc71 	bl	8002bdc <nicNotifyLinkChange>
   //Re-enable interrupts
   interface->nicDriver->enableIrq(interface);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	4798      	blx	r3
}
 800a304:	bf00      	nop
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd90      	pop	{r4, r7, pc}
 800a30c:	20000058 	.word	0x20000058
 800a310:	0801b7b4 	.word	0x0801b7b4
 800a314:	0801b7d4 	.word	0x0801b7d4
 800a318:	0801b7ec 	.word	0x0801b7ec
 800a31c:	0801b804 	.word	0x0801b804
 800a320:	0801b81c 	.word	0x0801b81c

0800a324 <ipcpThisLayerDown>:
 * @brief This-Layer-Down callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerDown(PppContext *context)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Debug message
   TRACE_INFO("IPCP This-Layer-Down callback\r\n");
 800a32c:	f7f6 f988 	bl	8000640 <osSuspendAllTasks>
 800a330:	4b10      	ldr	r3, [pc, #64]	; (800a374 <ipcpThisLayerDown+0x50>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	221f      	movs	r2, #31
 800a338:	2101      	movs	r1, #1
 800a33a:	480f      	ldr	r0, [pc, #60]	; (800a378 <ipcpThisLayerDown+0x54>)
 800a33c:	f00f fe08 	bl	8019f50 <fwrite>
 800a340:	f7f6 f989 	bl	8000656 <osResumeAllTasks>

   //Point to the underlying interface
   interface = context->interface;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	60fb      	str	r3, [r7, #12]

   //Link is up
   interface->linkState = FALSE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	67da      	str	r2, [r3, #124]	; 0x7c

   //Disable interrupts
   interface->nicDriver->disableIrq(interface);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	4798      	blx	r3
   //Process link state change event
   nicNotifyLinkChange(interface);
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7f8 fc3e 	bl	8002bdc <nicNotifyLinkChange>
   //Re-enable interrupts
   interface->nicDriver->enableIrq(interface);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	4798      	blx	r3
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000058 	.word	0x20000058
 800a378:	0801b834 	.word	0x0801b834

0800a37c <ipcpThisLayerStarted>:
 * @brief This-Layer-Started callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerStarted(PppContext *context)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("IPCP This-Layer-Started callback\r\n");
 800a384:	f7f6 f95c 	bl	8000640 <osSuspendAllTasks>
 800a388:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <ipcpThisLayerStarted+0x28>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	2222      	movs	r2, #34	; 0x22
 800a390:	2101      	movs	r1, #1
 800a392:	4805      	ldr	r0, [pc, #20]	; (800a3a8 <ipcpThisLayerStarted+0x2c>)
 800a394:	f00f fddc 	bl	8019f50 <fwrite>
 800a398:	f7f6 f95d 	bl	8000656 <osResumeAllTasks>
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	20000058 	.word	0x20000058
 800a3a8:	0801b854 	.word	0x0801b854

0800a3ac <ipcpThisLayerFinished>:
 * @brief This-Layer-Finished callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerFinished(PppContext *context)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("IPCP This-Layer-Finished callback\r\n");
 800a3b4:	f7f6 f944 	bl	8000640 <osSuspendAllTasks>
 800a3b8:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <ipcpThisLayerFinished+0x28>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	2223      	movs	r2, #35	; 0x23
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	4805      	ldr	r0, [pc, #20]	; (800a3d8 <ipcpThisLayerFinished+0x2c>)
 800a3c4:	f00f fdc4 	bl	8019f50 <fwrite>
 800a3c8:	f7f6 f945 	bl	8000656 <osResumeAllTasks>
}
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	20000058 	.word	0x20000058
 800a3d8:	0801b878 	.word	0x0801b878

0800a3dc <ipcpInitRestartCount>:
 * @param[in] context PPP context
 * @param[in] value Restart counter value
 **/

void ipcpInitRestartCount(PppContext *context, uint_t value)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Initialize-Restart-Count callback\r\n");
 800a3e6:	f7f6 f92b 	bl	8000640 <osSuspendAllTasks>
 800a3ea:	4b09      	ldr	r3, [pc, #36]	; (800a410 <ipcpInitRestartCount+0x34>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	2228      	movs	r2, #40	; 0x28
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	4807      	ldr	r0, [pc, #28]	; (800a414 <ipcpInitRestartCount+0x38>)
 800a3f6:	f00f fdab 	bl	8019f50 <fwrite>
 800a3fa:	f7f6 f92c 	bl	8000656 <osResumeAllTasks>

   //Initialize restart counter
   context->ipcpFsm.restartCounter = value;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20000058 	.word	0x20000058
 800a414:	0801b89c 	.word	0x0801b89c

0800a418 <ipcpZeroRestartCount>:
 * @brief Zero-Restart-Count callback function
 * @param[in] context PPP context
 **/

void ipcpZeroRestartCount(PppContext *context)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("IPCP Zero-Restart-Count callback\r\n");
 800a420:	f7f6 f90e 	bl	8000640 <osSuspendAllTasks>
 800a424:	4b0b      	ldr	r3, [pc, #44]	; (800a454 <ipcpZeroRestartCount+0x3c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	2222      	movs	r2, #34	; 0x22
 800a42c:	2101      	movs	r1, #1
 800a42e:	480a      	ldr	r0, [pc, #40]	; (800a458 <ipcpZeroRestartCount+0x40>)
 800a430:	f00f fd8e 	bl	8019f50 <fwrite>
 800a434:	f7f6 f90f 	bl	8000656 <osResumeAllTasks>

   //Zero restart counter
   context->ipcpFsm.restartCounter = 0;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //The receiver of a Terminate-Request should wait for the peer to
   //disconnect, and must not disconnect until at least one Restart
   //time has passed after sending a Terminate-Ack
   context->ipcpFsm.timestamp = osGetSystemTime();
 800a440:	f7f6 f9c6 	bl	80007d0 <osGetSystemTime>
 800a444:	4602      	mov	r2, r0
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20000058 	.word	0x20000058
 800a458:	0801b8c8 	.word	0x0801b8c8

0800a45c <ipcpSendConfigureReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpSendConfigureReq(PppContext *context)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b088      	sub	sp, #32
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppConfigurePacket *configureReqPacket;

   //Debug message
   TRACE_INFO("IPCP Send-Configure-Request callback\r\n");
 800a464:	f7f6 f8ec 	bl	8000640 <osSuspendAllTasks>
 800a468:	4b4e      	ldr	r3, [pc, #312]	; (800a5a4 <ipcpSendConfigureReq+0x148>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	2226      	movs	r2, #38	; 0x26
 800a470:	2101      	movs	r1, #1
 800a472:	484d      	ldr	r0, [pc, #308]	; (800a5a8 <ipcpSendConfigureReq+0x14c>)
 800a474:	f00f fd6c 	bl	8019f50 <fwrite>
 800a478:	f7f6 f8ed 	bl	8000656 <osResumeAllTasks>

   //Allocate a buffer memory to hold the Configure-Request packet
   buffer = pppAllocBuffer(PPP_MAX_CONF_REQ_SIZE, &offset);
 800a47c:	f107 030c 	add.w	r3, r7, #12
 800a480:	4619      	mov	r1, r3
 800a482:	2080      	movs	r0, #128	; 0x80
 800a484:	f002 fa72 	bl	800c96c <pppAllocBuffer>
 800a488:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(buffer == NULL)
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <ipcpSendConfigureReq+0x38>
      return ERROR_OUT_OF_MEMORY;
 800a490:	2364      	movs	r3, #100	; 0x64
 800a492:	e083      	b.n	800a59c <ipcpSendConfigureReq+0x140>

   //Point to the Configure-Request packet
   configureReqPacket = netBufferAt(buffer, offset);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4619      	mov	r1, r3
 800a498:	69f8      	ldr	r0, [r7, #28]
 800a49a:	f7f8 f8c5 	bl	8002628 <netBufferAt>
 800a49e:	61b8      	str	r0, [r7, #24]

   //Format packet header
   configureReqPacket->code = PPP_CODE_CONFIGURE_REQ;
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	701a      	strb	r2, [r3, #0]
   configureReqPacket->identifier = ++context->ipcpFsm.identifier;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	705a      	strb	r2, [r3, #1]
   configureReqPacket->length = sizeof(PppConfigurePacket);
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f042 0204 	orr.w	r2, r2, #4
 800a4c8:	709a      	strb	r2, [r3, #2]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	70da      	strb	r2, [r3, #3]

   //Make sure the IP-Address option has not been previously rejected
   if(!context->localConfig.ipAddrRejected)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d107      	bne.n	800a4e8 <ipcpSendConfigureReq+0x8c>
   {
      //Add option
      pppAddOption(configureReqPacket, IPCP_OPTION_IP_ADDRESS,
         &context->localConfig.ipAddr, sizeof(Ipv4Addr));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f503 7296 	add.w	r2, r3, #300	; 0x12c
      pppAddOption(configureReqPacket, IPCP_OPTION_IP_ADDRESS,
 800a4de:	2304      	movs	r3, #4
 800a4e0:	2103      	movs	r1, #3
 800a4e2:	69b8      	ldr	r0, [r7, #24]
 800a4e4:	f003 fcb6 	bl	800de54 <pppAddOption>
   }

   //Make sure the Primary-DNS-Server-Address option has not been
   //previously rejected
   if(!context->localConfig.primaryDnsRejected)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d107      	bne.n	800a502 <ipcpSendConfigureReq+0xa6>
   {
      //Add option
      pppAddOption(configureReqPacket, IPCP_OPTION_PRIMARY_DNS,
         &context->localConfig.primaryDns, sizeof(Ipv4Addr));
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f503 729a 	add.w	r2, r3, #308	; 0x134
      pppAddOption(configureReqPacket, IPCP_OPTION_PRIMARY_DNS,
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	2181      	movs	r1, #129	; 0x81
 800a4fc:	69b8      	ldr	r0, [r7, #24]
 800a4fe:	f003 fca9 	bl	800de54 <pppAddOption>
   }

   //Make sure the Secondary-DNS-Server-Address option has not been
   //previously rejected
   if(!context->localConfig.secondaryDnsRejected)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d107      	bne.n	800a51c <ipcpSendConfigureReq+0xc0>
   {
      //Add option
      pppAddOption(configureReqPacket, IPCP_OPTION_SECONDARY_DNS,
         &context->localConfig.secondaryDns, sizeof(Ipv4Addr));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f503 729e 	add.w	r2, r3, #316	; 0x13c
      pppAddOption(configureReqPacket, IPCP_OPTION_SECONDARY_DNS,
 800a512:	2304      	movs	r3, #4
 800a514:	2183      	movs	r1, #131	; 0x83
 800a516:	69b8      	ldr	r0, [r7, #24]
 800a518:	f003 fc9c 	bl	800de54 <pppAddOption>
   }

   //Save packet length
   length = configureReqPacket->length;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	885b      	ldrh	r3, [r3, #2]
 800a520:	b29b      	uxth	r3, r3
 800a522:	617b      	str	r3, [r7, #20]
   //Convert length field to network byte order
   configureReqPacket->length = htons(length);
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	b29b      	uxth	r3, r3
 800a528:	4618      	mov	r0, r3
 800a52a:	f7f6 f839 	bl	80005a0 <swapInt16>
 800a52e:	4603      	mov	r3, r0
 800a530:	461a      	mov	r2, r3
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	805a      	strh	r2, [r3, #2]

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	4413      	add	r3, r2
 800a53c:	4619      	mov	r1, r3
 800a53e:	69f8      	ldr	r0, [r7, #28]
 800a540:	f7f7 ffcc 	bl	80024dc <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending Configure-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800a544:	f7f6 f87c 	bl	8000640 <osSuspendAllTasks>
 800a548:	4b16      	ldr	r3, [pc, #88]	; (800a5a4 <ipcpSendConfigureReq+0x148>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	4916      	ldr	r1, [pc, #88]	; (800a5ac <ipcpSendConfigureReq+0x150>)
 800a552:	4618      	mov	r0, r3
 800a554:	f00f fc9c 	bl	8019e90 <fiprintf>
 800a558:	f7f6 f87d 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) configureReqPacket, length, PPP_PROTOCOL_IPCP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_IPCP);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6998      	ldr	r0, [r3, #24]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	f248 0321 	movw	r3, #32801	; 0x8021
 800a566:	69f9      	ldr	r1, [r7, #28]
 800a568:	f002 f88a 	bl	800c680 <pppSendFrame>
 800a56c:	4603      	mov	r3, r0
 800a56e:	827b      	strh	r3, [r7, #18]

   //The restart counter is decremented each time a Configure-Request is sent
   if(context->ipcpFsm.restartCounter > 0)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a576:	2b00      	cmp	r3, #0
 800a578:	d006      	beq.n	800a588 <ipcpSendConfigureReq+0x12c>
      context->ipcpFsm.restartCounter--;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a580:	1e5a      	subs	r2, r3, #1
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //Save the time at which the packet was sent
   context->ipcpFsm.timestamp = osGetSystemTime();
 800a588:	f7f6 f922 	bl	80007d0 <osGetSystemTime>
 800a58c:	4602      	mov	r2, r0
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

   //Free previously allocated memory block
   netBufferFree(buffer);
 800a594:	69f8      	ldr	r0, [r7, #28]
 800a596:	f7f7 ff70 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800a59a:	8a7b      	ldrh	r3, [r7, #18]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3720      	adds	r7, #32
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000058 	.word	0x20000058
 800a5a8:	0801b8ec 	.word	0x0801b8ec
 800a5ac:	0801b914 	.word	0x0801b914

0800a5b0 <ipcpSendConfigureAck>:
 * @return Error code
 **/

error_t ipcpSendConfigureAck(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Configure-Ack callback\r\n");
 800a5ba:	f7f6 f841 	bl	8000640 <osSuspendAllTasks>
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <ipcpSendConfigureAck+0x3c>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	2222      	movs	r2, #34	; 0x22
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	4809      	ldr	r0, [pc, #36]	; (800a5f0 <ipcpSendConfigureAck+0x40>)
 800a5ca:	f00f fcc1 	bl	8019f50 <fwrite>
 800a5ce:	f7f6 f842 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Ack packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	f248 0221 	movw	r2, #32801	; 0x8021
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f003 f982 	bl	800d8e4 <pppSendConfigureAckNak>
 800a5e0:	4603      	mov	r3, r0
      PPP_PROTOCOL_IPCP, PPP_CODE_CONFIGURE_ACK);
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20000058 	.word	0x20000058
 800a5f0:	0801b948 	.word	0x0801b948

0800a5f4 <ipcpSendConfigureNak>:
 * @return Error code
 **/

error_t ipcpSendConfigureNak(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Configure-Nak callback\r\n");
 800a5fe:	f7f6 f81f 	bl	8000640 <osSuspendAllTasks>
 800a602:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <ipcpSendConfigureNak+0x3c>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	2222      	movs	r2, #34	; 0x22
 800a60a:	2101      	movs	r1, #1
 800a60c:	4809      	ldr	r0, [pc, #36]	; (800a634 <ipcpSendConfigureNak+0x40>)
 800a60e:	f00f fc9f 	bl	8019f50 <fwrite>
 800a612:	f7f6 f820 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Nak packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800a616:	2303      	movs	r3, #3
 800a618:	f248 0221 	movw	r2, #32801	; 0x8021
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f003 f960 	bl	800d8e4 <pppSendConfigureAckNak>
 800a624:	4603      	mov	r3, r0
      PPP_PROTOCOL_IPCP, PPP_CODE_CONFIGURE_NAK);
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20000058 	.word	0x20000058
 800a634:	0801b96c 	.word	0x0801b96c

0800a638 <ipcpSendConfigureRej>:
 * @return Error code
 **/

error_t ipcpSendConfigureRej(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Configure-Reject callback\r\n");
 800a642:	f7f5 fffd 	bl	8000640 <osSuspendAllTasks>
 800a646:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <ipcpSendConfigureRej+0x3c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	2225      	movs	r2, #37	; 0x25
 800a64e:	2101      	movs	r1, #1
 800a650:	4809      	ldr	r0, [pc, #36]	; (800a678 <ipcpSendConfigureRej+0x40>)
 800a652:	f00f fc7d 	bl	8019f50 <fwrite>
 800a656:	f7f5 fffe 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Reject packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800a65a:	2304      	movs	r3, #4
 800a65c:	f248 0221 	movw	r2, #32801	; 0x8021
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f003 f93e 	bl	800d8e4 <pppSendConfigureAckNak>
 800a668:	4603      	mov	r3, r0
      PPP_PROTOCOL_IPCP, PPP_CODE_CONFIGURE_REJ);
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20000058 	.word	0x20000058
 800a678:	0801b990 	.word	0x0801b990

0800a67c <ipcpSendTerminateReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpSendTerminateReq(PppContext *context)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
   error_t error;

   //Debug message
   TRACE_INFO("IPCP Send-Terminate-Request callback\r\n");
 800a684:	f7f5 ffdc 	bl	8000640 <osSuspendAllTasks>
 800a688:	4b19      	ldr	r3, [pc, #100]	; (800a6f0 <ipcpSendTerminateReq+0x74>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	2226      	movs	r2, #38	; 0x26
 800a690:	2101      	movs	r1, #1
 800a692:	4818      	ldr	r0, [pc, #96]	; (800a6f4 <ipcpSendTerminateReq+0x78>)
 800a694:	f00f fc5c 	bl	8019f50 <fwrite>
 800a698:	f7f5 ffdd 	bl	8000656 <osResumeAllTasks>

   //On transmission, the Identifier field must be changed
   context->ipcpFsm.identifier++;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

   //Send Terminate-Request packet
   error = pppSendTerminateReq(context, context->ipcpFsm.identifier, PPP_PROTOCOL_IPCP);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a6b2:	f248 0221 	movw	r2, #32801	; 0x8021
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f003 f9e7 	bl	800da8c <pppSendTerminateReq>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	81fb      	strh	r3, [r7, #14]

   //The restart counter is decremented each time a Terminate-Request is sent
   if(context->ipcpFsm.restartCounter > 0)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d006      	beq.n	800a6da <ipcpSendTerminateReq+0x5e>
      context->ipcpFsm.restartCounter--;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a6d2:	1e5a      	subs	r2, r3, #1
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //Save the time at which the packet was sent
   context->ipcpFsm.timestamp = osGetSystemTime();
 800a6da:	f7f6 f879 	bl	80007d0 <osGetSystemTime>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

   //Return status code
   return error;
 800a6e6:	89fb      	ldrh	r3, [r7, #14]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20000058 	.word	0x20000058
 800a6f4:	0801b9b8 	.word	0x0801b9b8

0800a6f8 <ipcpSendTerminateAck>:
 * @return Error code
 **/

error_t ipcpSendTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
   uint8_t identifier;

   //Debug message
   TRACE_INFO("IPCP Send-Terminate-Ack callback\r\n");
 800a702:	f7f5 ff9d 	bl	8000640 <osSuspendAllTasks>
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <ipcpSendTerminateAck+0x60>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	2222      	movs	r2, #34	; 0x22
 800a70e:	2101      	movs	r1, #1
 800a710:	4812      	ldr	r0, [pc, #72]	; (800a75c <ipcpSendTerminateAck+0x64>)
 800a712:	f00f fc1d 	bl	8019f50 <fwrite>
 800a716:	f7f5 ff9e 	bl	8000656 <osResumeAllTasks>

   //Check whether this Terminate-Ack acknowledges the reception of a
   //Terminate-Request packet
   if(terminateReqPacket != NULL)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <ipcpSendTerminateAck+0x30>
   {
      //The Identifier field of the Terminate-Request is copied into the
      //Identifier field of the Terminate-Ack packet
      identifier = terminateReqPacket->identifier;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	785b      	ldrb	r3, [r3, #1]
 800a724:	73fb      	strb	r3, [r7, #15]
 800a726:	e00b      	b.n	800a740 <ipcpSendTerminateAck+0x48>
   }
   else
   {
      //This Terminate-Ack packet serves to synchronize the automatons
      identifier = ++context->ipcpFsm.identifier;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a72e:	3301      	adds	r3, #1
 800a730:	b2da      	uxtb	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a73e:	73fb      	strb	r3, [r7, #15]
   }

   //Send Terminate-Ack packet
   return pppSendTerminateAck(context, identifier, PPP_PROTOCOL_IPCP);
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	f248 0221 	movw	r2, #32801	; 0x8021
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f003 f9eb 	bl	800db24 <pppSendTerminateAck>
 800a74e:	4603      	mov	r3, r0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000058 	.word	0x20000058
 800a75c:	0801b9e0 	.word	0x0801b9e0

0800a760 <ipcpSendCodeRej>:
 * @param[in] packet Un-interpretable packet received from the peer
 * @return Error code
 **/

error_t ipcpSendCodeRej(PppContext *context, const PppPacket *packet)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Code-Reject callback\r\n");
 800a76a:	f7f5 ff69 	bl	8000640 <osSuspendAllTasks>
 800a76e:	4b10      	ldr	r3, [pc, #64]	; (800a7b0 <ipcpSendCodeRej+0x50>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	2220      	movs	r2, #32
 800a776:	2101      	movs	r1, #1
 800a778:	480e      	ldr	r0, [pc, #56]	; (800a7b4 <ipcpSendCodeRej+0x54>)
 800a77a:	f00f fbe9 	bl	8019f50 <fwrite>
 800a77e:	f7f5 ff6a 	bl	8000656 <osResumeAllTasks>

   //The Identifier field must be changed for each Code-Reject sent
   context->ipcpFsm.identifier++;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a788:	3301      	adds	r3, #1
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

   //Send Code-Reject packet
   return pppSendCodeRej(context, packet, context->ipcpFsm.identifier, PPP_PROTOCOL_IPCP);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 800a798:	f248 0321 	movw	r3, #32801	; 0x8021
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f003 fa0c 	bl	800dbbc <pppSendCodeRej>
 800a7a4:	4603      	mov	r3, r0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000058 	.word	0x20000058
 800a7b4:	0801ba04 	.word	0x0801ba04

0800a7b8 <ipcpParseOption>:
 * @return Error code
 **/

error_t ipcpParseOption(PppContext *context, PppOption *option,
   size_t inPacketLen, PppConfigurePacket *outPacket)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	603b      	str	r3, [r7, #0]
   error_t error;

   //Malformed IPCP packet?
   if(inPacketLen < sizeof(PppOption))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d801      	bhi.n	800a7d0 <ipcpParseOption+0x18>
      return ERROR_INVALID_LENGTH;
 800a7cc:	23eb      	movs	r3, #235	; 0xeb
 800a7ce:	e02f      	b.n	800a830 <ipcpParseOption+0x78>

   //Check option length
   if(option->length < sizeof(PppOption))
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	785b      	ldrb	r3, [r3, #1]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d801      	bhi.n	800a7dc <ipcpParseOption+0x24>
      return ERROR_INVALID_LENGTH;
 800a7d8:	23eb      	movs	r3, #235	; 0xeb
 800a7da:	e029      	b.n	800a830 <ipcpParseOption+0x78>
   if(option->length > inPacketLen)
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d201      	bcs.n	800a7ec <ipcpParseOption+0x34>
      return ERROR_INVALID_LENGTH;
 800a7e8:	23eb      	movs	r3, #235	; 0xeb
 800a7ea:	e021      	b.n	800a830 <ipcpParseOption+0x78>

   //Check option type
   switch(option->type)
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b03      	cmp	r3, #3
 800a7f2:	d107      	bne.n	800a804 <ipcpParseOption+0x4c>
   {
   case IPCP_OPTION_IP_ADDRESS:
      //Check IP-Address option
      error = ipcpParseIpAddressOption(context, (IpcpIpAddressOption *) option, outPacket);
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	68b9      	ldr	r1, [r7, #8]
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f81d 	bl	800a838 <ipcpParseIpAddressOption>
 800a7fe:	4603      	mov	r3, r0
 800a800:	82fb      	strh	r3, [r7, #22]
      break;
 800a802:	e014      	b.n	800a82e <ipcpParseOption+0x76>
   default:
      //If some configuration options received in the Configure-Request are not
      //recognizable or not acceptable for negotiation, then the implementation
      //must transmit a Configure-Reject
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_REJ)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00e      	beq.n	800a828 <ipcpParseOption+0x70>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d10a      	bne.n	800a828 <ipcpParseOption+0x70>
      {
         //The options field of the Configure-Reject packet is filled
         //with the unrecognized options from the Configure-Request
         pppAddOption(outPacket, option->type, option->data,
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	7819      	ldrb	r1, [r3, #0]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, option->type, option->data,
 800a81e:	3b02      	subs	r3, #2
 800a820:	b2db      	uxtb	r3, r3
 800a822:	6838      	ldr	r0, [r7, #0]
 800a824:	f003 fb16 	bl	800de54 <pppAddOption>
      }

      //The option is not acceptable for negotiation
      error = ERROR_INVALID_TYPE;
 800a828:	23ef      	movs	r3, #239	; 0xef
 800a82a:	82fb      	strh	r3, [r7, #22]
      break;
 800a82c:	bf00      	nop
   }

   //Return status code
   return error;
 800a82e:	8afb      	ldrh	r3, [r7, #22]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <ipcpParseIpAddressOption>:
 * @return Error code
 **/

error_t ipcpParseIpAddressOption(PppContext *context,
   IpcpIpAddressOption *option, PppConfigurePacket *outPacket)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(IpcpIpAddressOption))
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b06      	cmp	r3, #6
 800a84a:	d130      	bne.n	800a8ae <ipcpParseIpAddressOption+0x76>
   {
      //Check whether the option value is acceptable
      if(option->ipAddr != IPV4_UNSPECIFIED_ADDR)
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d019      	beq.n	800a88a <ipcpParseIpAddressOption+0x52>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d013      	beq.n	800a884 <ipcpParseIpAddressOption+0x4c>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	2b02      	cmp	r3, #2
 800a862:	d10f      	bne.n	800a884 <ipcpParseIpAddressOption+0x4c>
         {
            //Save IP address
            context->peerConfig.ipAddr = option->ipAddr;
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
               (void *) &option->ipAddr, option->length - sizeof(PppOption));
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	1c9a      	adds	r2, r3, #2
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
 800a878:	3b02      	subs	r3, #2
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2103      	movs	r1, #3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f003 fae8 	bl	800de54 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 800a884:	2300      	movs	r3, #0
 800a886:	82fb      	strh	r3, [r7, #22]
 800a888:	e013      	b.n	800a8b2 <ipcpParseIpAddressOption+0x7a>
      }
      else
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00b      	beq.n	800a8a8 <ipcpParseIpAddressOption+0x70>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2b03      	cmp	r3, #3
 800a896:	d107      	bne.n	800a8a8 <ipcpParseIpAddressOption+0x70>
         {
            //The option must be modified to a value acceptable to the
            //Configure-Nak sender
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
               &context->peerConfig.ipAddr, sizeof(Ipv4Addr));
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 72ba 	add.w	r2, r3, #372	; 0x174
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
 800a89e:	2304      	movs	r3, #4
 800a8a0:	2103      	movs	r1, #3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f003 fad6 	bl	800de54 <pppAddOption>
         }

         //The value is not acceptable
         error = ERROR_INVALID_VALUE;
 800a8a8:	23f0      	movs	r3, #240	; 0xf0
 800a8aa:	82fb      	strh	r3, [r7, #22]
 800a8ac:	e001      	b.n	800a8b2 <ipcpParseIpAddressOption+0x7a>
      }
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800a8ae:	23eb      	movs	r3, #235	; 0xeb
 800a8b0:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800a8b2:	8afb      	ldrh	r3, [r7, #22]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3718      	adds	r7, #24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <lcpClose>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpClose(PppContext *context)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nLCP Close event\r\n");
 800a8c4:	f7f5 febc 	bl	8000640 <osSuspendAllTasks>
 800a8c8:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <lcpClose+0x38>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	2213      	movs	r2, #19
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	4809      	ldr	r0, [pc, #36]	; (800a8f8 <lcpClose+0x3c>)
 800a8d4:	f00f fb3c 	bl	8019f50 <fwrite>
 800a8d8:	f7f5 febd 	bl	8000656 <osResumeAllTasks>

   //The link is no longer available for traffic
   pppCloseEvent(context, &context->lcpFsm, &lcpCallbacks);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	338c      	adds	r3, #140	; 0x8c
 800a8e0:	4a06      	ldr	r2, [pc, #24]	; (800a8fc <lcpClose+0x40>)
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f002 f905 	bl	800caf4 <pppCloseEvent>

   //Successful processing
   return NO_ERROR;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	20000058 	.word	0x20000058
 800a8f8:	0801ba3c 	.word	0x0801ba3c
 800a8fc:	0801c420 	.word	0x0801c420

0800a900 <lcpTick>:
 *
 * @param[in] context PPP context
 **/

void lcpTick(PppContext *context)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->lcpFsm.state >= PPP_STATE_4_CLOSING &&
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d923      	bls.n	800a95a <lcpTick+0x5a>
      context->lcpFsm.state <= PPP_STATE_8_ACK_SENT)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   if(context->lcpFsm.state >= PPP_STATE_4_CLOSING &&
 800a918:	2b08      	cmp	r3, #8
 800a91a:	d81e      	bhi.n	800a95a <lcpTick+0x5a>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 800a91c:	f7f5 ff58 	bl	80007d0 <osGetSystemTime>
 800a920:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->lcpFsm.timestamp) >= PPP_RESTART_TIMER)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800a930:	4293      	cmp	r3, r2
 800a932:	d912      	bls.n	800a95a <lcpTick+0x5a>
      {
         //Debug message
         TRACE_INFO("\r\nLCP Timeout event\r\n");
 800a934:	f7f5 fe84 	bl	8000640 <osSuspendAllTasks>
 800a938:	4b0a      	ldr	r3, [pc, #40]	; (800a964 <lcpTick+0x64>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	2215      	movs	r2, #21
 800a940:	2101      	movs	r1, #1
 800a942:	4809      	ldr	r0, [pc, #36]	; (800a968 <lcpTick+0x68>)
 800a944:	f00f fb04 	bl	8019f50 <fwrite>
 800a948:	f7f5 fe85 	bl	8000656 <osResumeAllTasks>

         //The restart timer is used to retransmit Configure-Request
         //and Terminate-Request packets
         pppTimeoutEvent(context, &context->lcpFsm, &lcpCallbacks);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	338c      	adds	r3, #140	; 0x8c
 800a950:	4a06      	ldr	r2, [pc, #24]	; (800a96c <lcpTick+0x6c>)
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f002 f927 	bl	800cba8 <pppTimeoutEvent>
      }
   }
}
 800a95a:	bf00      	nop
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20000058 	.word	0x20000058
 800a968:	0801ba50 	.word	0x0801ba50
 800a96c:	0801c420 	.word	0x0801c420

0800a970 <lcpProcessPacket>:
 * @param[in] packet LCP packet received from the peer
 * @param[in] length Length of the packet, in bytes
 **/

void lcpProcessPacket(PppContext *context, const PppPacket *packet, size_t length)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming LCP packet is valid
   if(length < sizeof(PppPacket))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b03      	cmp	r3, #3
 800a980:	f240 8083 	bls.w	800aa8a <lcpProcessPacket+0x11a>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	885b      	ldrh	r3, [r3, #2]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7f5 fe08 	bl	80005a0 <swapInt16>
 800a990:	4603      	mov	r3, r0
 800a992:	461a      	mov	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4293      	cmp	r3, r2
 800a998:	d379      	bcc.n	800aa8e <lcpProcessPacket+0x11e>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	885b      	ldrh	r3, [r3, #2]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7f5 fdfd 	bl	80005a0 <swapInt16>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d972      	bls.n	800aa92 <lcpProcessPacket+0x122>
      return;

   //Save the length of the LCP packet
   length = ntohs(packet->length);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	885b      	ldrh	r3, [r3, #2]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7f5 fdf4 	bl	80005a0 <swapInt16>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("LCP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 800a9bc:	f7f5 fe40 	bl	8000640 <osSuspendAllTasks>
 800a9c0:	4b36      	ldr	r3, [pc, #216]	; (800aa9c <lcpProcessPacket+0x12c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	4935      	ldr	r1, [pc, #212]	; (800aaa0 <lcpProcessPacket+0x130>)
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f00f fa60 	bl	8019e90 <fiprintf>
 800a9d0:	f7f5 fe41 	bl	8000656 <osResumeAllTasks>
   //Dump LCP packet contents for debugging purpose
   pppDumpPacket(packet, length, PPP_PROTOCOL_LCP);

   //Check LCP code field
   switch(packet->code)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	2b0a      	cmp	r3, #10
 800a9dc:	d84f      	bhi.n	800aa7e <lcpProcessPacket+0x10e>
 800a9de:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <lcpProcessPacket+0x74>)
 800a9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e4:	0800aa11 	.word	0x0800aa11
 800a9e8:	0800aa1b 	.word	0x0800aa1b
 800a9ec:	0800aa25 	.word	0x0800aa25
 800a9f0:	0800aa2f 	.word	0x0800aa2f
 800a9f4:	0800aa39 	.word	0x0800aa39
 800a9f8:	0800aa43 	.word	0x0800aa43
 800a9fc:	0800aa4d 	.word	0x0800aa4d
 800aa00:	0800aa57 	.word	0x0800aa57
 800aa04:	0800aa61 	.word	0x0800aa61
 800aa08:	0800aa6b 	.word	0x0800aa6b
 800aa0c:	0800aa75 	.word	0x0800aa75
   {
   //Configure-Request packet?
   case PPP_CODE_CONFIGURE_REQ:
      //Process Configure-Request packet
      lcpProcessConfigureReq(context, (PppConfigurePacket *) packet);
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f000 f846 	bl	800aaa4 <lcpProcessConfigureReq>
      break;
 800aa18:	e03c      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Configure-Ack packet?
   case PPP_CODE_CONFIGURE_ACK:
      //Process Configure-Ack packet
      lcpProcessConfigureAck(context, (PppConfigurePacket *) packet);
 800aa1a:	68b9      	ldr	r1, [r7, #8]
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f8c5 	bl	800abac <lcpProcessConfigureAck>
      break;
 800aa22:	e037      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Configure-Nak packet?
   case PPP_CODE_CONFIGURE_NAK:
      //Process Configure-Nak packet
      lcpProcessConfigureNak(context, (PppConfigurePacket *) packet);
 800aa24:	68b9      	ldr	r1, [r7, #8]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 f8ec 	bl	800ac04 <lcpProcessConfigureNak>
      break;
 800aa2c:	e032      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Configure-Reject packet?
   case PPP_CODE_CONFIGURE_REJ:
      //Process Configure-Reject packet
      lcpProcessConfigureReject(context, (PppConfigurePacket *) packet);
 800aa2e:	68b9      	ldr	r1, [r7, #8]
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 f9cb 	bl	800adcc <lcpProcessConfigureReject>
      break;
 800aa36:	e02d      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Terminate-Request packet?
   case PPP_CODE_TERMINATE_REQ:
      //Process Terminate-Request packet
      lcpProcessTerminateReq(context, (PppTerminatePacket *) packet);
 800aa38:	68b9      	ldr	r1, [r7, #8]
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 fa6c 	bl	800af18 <lcpProcessTerminateReq>
      break;
 800aa40:	e028      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Terminate-Ack packet?
   case PPP_CODE_TERMINATE_ACK:
      //Process Terminate-Ack packet
      lcpProcessTerminateAck(context, (PppTerminatePacket *) packet);
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fa8b 	bl	800af60 <lcpProcessTerminateAck>
      break;
 800aa4a:	e023      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Code-Reject packet?
   case PPP_CODE_CODE_REJ:
      //Process Code-Reject packet
      lcpProcessCodeRej(context, (PppCodeRejPacket *) packet);
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f000 faaa 	bl	800afa8 <lcpProcessCodeRej>
      break;
 800aa54:	e01e      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Protocol-Reject packet?
   case PPP_CODE_PROTOCOL_REJ:
      //Process Protocol-Reject packet
      lcpProcessProtocolRej(context, (PppProtocolRejPacket *) packet);
 800aa56:	68b9      	ldr	r1, [r7, #8]
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 faeb 	bl	800b034 <lcpProcessProtocolRej>
      break;
 800aa5e:	e019      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Echo-Request packet?
   case PPP_CODE_ECHO_REQ:
      //Process Echo-Request packet
      lcpProcessEchoReq(context, (PppEchoPacket *) packet);
 800aa60:	68b9      	ldr	r1, [r7, #8]
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f000 fb52 	bl	800b10c <lcpProcessEchoReq>
      break;
 800aa68:	e014      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Echo-Reply packet?
   case PPP_CODE_ECHO_REP:
      //Process Echo-Reply packet
      lcpProcessEchoRep(context, (PppEchoPacket *) packet);
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 fb71 	bl	800b154 <lcpProcessEchoRep>
      break;
 800aa72:	e00f      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Discard-Request packet?
   case PPP_CODE_DISCARD_REQ:
      //Process Discard-Request packet
      lcpProcessDiscardReq(context, (PppDiscardReqPacket *) packet);
 800aa74:	68b9      	ldr	r1, [r7, #8]
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f000 fb86 	bl	800b188 <lcpProcessDiscardReq>
      break;
 800aa7c:	e00a      	b.n	800aa94 <lcpProcessPacket+0x124>
   //Unknown code field
   default:
      //The packet is un-interpretable
      lcpProcessUnknownCode(context, packet);
 800aa7e:	68b9      	ldr	r1, [r7, #8]
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f000 fb9b 	bl	800b1bc <lcpProcessUnknownCode>
      break;
 800aa86:	bf00      	nop
 800aa88:	e004      	b.n	800aa94 <lcpProcessPacket+0x124>
      return;
 800aa8a:	bf00      	nop
 800aa8c:	e002      	b.n	800aa94 <lcpProcessPacket+0x124>
      return;
 800aa8e:	bf00      	nop
 800aa90:	e000      	b.n	800aa94 <lcpProcessPacket+0x124>
      return;
 800aa92:	bf00      	nop
   }
}
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20000058 	.word	0x20000058
 800aaa0:	0801ba68 	.word	0x0801ba68

0800aaa4 <lcpProcessConfigureReq>:
 * @return Error code
 **/

error_t lcpProcessConfigureReq(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08a      	sub	sp, #40	; 0x28
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
   bool_t notRecognizable;
   bool_t notAcceptable;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Configure-Request event\r\n");
 800aaae:	f7f5 fdc7 	bl	8000640 <osSuspendAllTasks>
 800aab2:	4b3b      	ldr	r3, [pc, #236]	; (800aba0 <lcpProcessConfigureReq+0xfc>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	2227      	movs	r2, #39	; 0x27
 800aaba:	2101      	movs	r1, #1
 800aabc:	4839      	ldr	r0, [pc, #228]	; (800aba4 <lcpProcessConfigureReq+0x100>)
 800aabe:	f00f fa47 	bl	8019f50 <fwrite>
 800aac2:	f7f5 fdc8 	bl	8000656 <osResumeAllTasks>

   //Initialize variables
   error = NO_ERROR;
 800aac6:	2300      	movs	r3, #0
 800aac8:	83fb      	strh	r3, [r7, #30]
   notRecognizable = FALSE;
 800aaca:	2300      	movs	r3, #0
 800aacc:	617b      	str	r3, [r7, #20]
   notAcceptable = FALSE;
 800aace:	2300      	movs	r3, #0
 800aad0:	613b      	str	r3, [r7, #16]

   //Retrieve the length of the option list
   length = ntohs(configureReqPacket->length) - sizeof(PppConfigurePacket);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	885b      	ldrh	r3, [r3, #2]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	4618      	mov	r0, r3
 800aada:	f7f5 fd61 	bl	80005a0 <swapInt16>
 800aade:	4603      	mov	r3, r0
 800aae0:	3b04      	subs	r3, #4
 800aae2:	61bb      	str	r3, [r7, #24]
   //Point to the first option
   option = (PppOption *) configureReqPacket->options;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	3304      	adds	r3, #4
 800aae8:	60fb      	str	r3, [r7, #12]

   //Parse configuration options
   while(length > 0)
 800aaea:	e026      	b.n	800ab3a <lcpProcessConfigureReq+0x96>
   {
      //Parse current option
      error = lcpParseOption(context, option, length, NULL);
 800aaec:	2300      	movs	r3, #0
 800aaee:	69ba      	ldr	r2, [r7, #24]
 800aaf0:	68f9      	ldr	r1, [r7, #12]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fef2 	bl	800b8dc <lcpParseOption>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	83fb      	strh	r3, [r7, #30]

      //Any error to report?
      if(error == ERROR_INVALID_TYPE)
 800aafc:	8bfb      	ldrh	r3, [r7, #30]
 800aafe:	2bef      	cmp	r3, #239	; 0xef
 800ab00:	d104      	bne.n	800ab0c <lcpProcessConfigureReq+0x68>
      {
         //Option not recognizable
         notRecognizable = TRUE;
 800ab02:	2301      	movs	r3, #1
 800ab04:	617b      	str	r3, [r7, #20]
         //Catch error
         error = NO_ERROR;
 800ab06:	2300      	movs	r3, #0
 800ab08:	83fb      	strh	r3, [r7, #30]
 800ab0a:	e00a      	b.n	800ab22 <lcpProcessConfigureReq+0x7e>
      }
      else if(error == ERROR_INVALID_VALUE)
 800ab0c:	8bfb      	ldrh	r3, [r7, #30]
 800ab0e:	2bf0      	cmp	r3, #240	; 0xf0
 800ab10:	d104      	bne.n	800ab1c <lcpProcessConfigureReq+0x78>
      {
         //Option not acceptable for configuration
         notAcceptable = TRUE;
 800ab12:	2301      	movs	r3, #1
 800ab14:	613b      	str	r3, [r7, #16]
         //Catch error
         error = NO_ERROR;
 800ab16:	2300      	movs	r3, #0
 800ab18:	83fb      	strh	r3, [r7, #30]
 800ab1a:	e002      	b.n	800ab22 <lcpProcessConfigureReq+0x7e>
      }
      else if(error)
 800ab1c:	8bfb      	ldrh	r3, [r7, #30]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10f      	bne.n	800ab42 <lcpProcessConfigureReq+0x9e>
         //Malformed Configure-Request packet
         break;
      }

      //Remaining bytes to process
      length -= option->length;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	785b      	ldrb	r3, [r3, #1]
 800ab26:	461a      	mov	r2, r3
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	61bb      	str	r3, [r7, #24]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	785b      	ldrb	r3, [r3, #1]
 800ab32:	461a      	mov	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]
   while(length > 0)
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1d5      	bne.n	800aaec <lcpProcessConfigureReq+0x48>
 800ab40:	e000      	b.n	800ab44 <lcpProcessConfigureReq+0xa0>
         break;
 800ab42:	bf00      	nop
   }

   //Valid Configure-Request packet received from the peer?
   if(!error)
 800ab44:	8bfb      	ldrh	r3, [r7, #30]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d125      	bne.n	800ab96 <lcpProcessConfigureReq+0xf2>
   {
      //Check flags
      if(notRecognizable)
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00a      	beq.n	800ab66 <lcpProcessConfigureReq+0xc2>
      {
         //If some configuration options received in the Configure-Request are not
         //recognizable or not acceptable for negotiation, then the implementation
         //must transmit a Configure-Reject
         pppRcvConfigureReqEvent(context, &context->lcpFsm, &lcpCallbacks,
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800ab56:	2304      	movs	r3, #4
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	4a12      	ldr	r2, [pc, #72]	; (800aba8 <lcpProcessConfigureReq+0x104>)
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f002 f874 	bl	800cc4c <pppRcvConfigureReqEvent>
 800ab64:	e017      	b.n	800ab96 <lcpProcessConfigureReq+0xf2>
            configureReqPacket, PPP_CODE_CONFIGURE_REJ);
      }
      else if(notAcceptable)
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00a      	beq.n	800ab82 <lcpProcessConfigureReq+0xde>
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         pppRcvConfigureReqEvent(context, &context->lcpFsm, &lcpCallbacks,
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800ab72:	2303      	movs	r3, #3
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	4a0b      	ldr	r2, [pc, #44]	; (800aba8 <lcpProcessConfigureReq+0x104>)
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f002 f866 	bl	800cc4c <pppRcvConfigureReqEvent>
 800ab80:	e009      	b.n	800ab96 <lcpProcessConfigureReq+0xf2>
      else
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         pppRcvConfigureReqEvent(context, &context->lcpFsm, &lcpCallbacks,
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800ab88:	2302      	movs	r3, #2
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	4a06      	ldr	r2, [pc, #24]	; (800aba8 <lcpProcessConfigureReq+0x104>)
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f002 f85b 	bl	800cc4c <pppRcvConfigureReqEvent>
            configureReqPacket, PPP_CODE_CONFIGURE_ACK);
      }
   }

   //Return status code
   return error;
 800ab96:	8bfb      	ldrh	r3, [r7, #30]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3720      	adds	r7, #32
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	20000058 	.word	0x20000058
 800aba4:	0801ba8c 	.word	0x0801ba8c
 800aba8:	0801c420 	.word	0x0801c420

0800abac <lcpProcessConfigureAck>:
 * @return Error code
 **/

error_t lcpProcessConfigureAck(PppContext *context,
   const PppConfigurePacket *configureAckPacket)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Configure-Ack event\r\n");
 800abb6:	f7f5 fd43 	bl	8000640 <osSuspendAllTasks>
 800abba:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <lcpProcessConfigureAck+0x4c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	2223      	movs	r2, #35	; 0x23
 800abc2:	2101      	movs	r1, #1
 800abc4:	480d      	ldr	r0, [pc, #52]	; (800abfc <lcpProcessConfigureAck+0x50>)
 800abc6:	f00f f9c3 	bl	8019f50 <fwrite>
 800abca:	f7f5 fd44 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureAckPacket->identifier != context->lcpFsm.identifier)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	785a      	ldrb	r2, [r3, #1]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800abd8:	429a      	cmp	r2, r3
 800abda:	d001      	beq.n	800abe0 <lcpProcessConfigureAck+0x34>
      return ERROR_WRONG_IDENTIFIER;
 800abdc:	23d6      	movs	r3, #214	; 0xd6
 800abde:	e007      	b.n	800abf0 <lcpProcessConfigureAck+0x44>

   //A valid Configure-Ack packet has been received from the peer
   pppRcvConfigureAckEvent(context, &context->lcpFsm, &lcpCallbacks);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	338c      	adds	r3, #140	; 0x8c
 800abe4:	4a06      	ldr	r2, [pc, #24]	; (800ac00 <lcpProcessConfigureAck+0x54>)
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f002 f955 	bl	800ce98 <pppRcvConfigureAckEvent>

   //Successful processing
   return NO_ERROR;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	20000058 	.word	0x20000058
 800abfc:	0801bab4 	.word	0x0801bab4
 800ac00:	0801c420 	.word	0x0801c420

0800ac04 <lcpProcessConfigureNak>:
 * @return Error code
 **/

error_t lcpProcessConfigureNak(PppContext *context,
   const PppConfigurePacket *configureNakPacket)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("LCP Receive-Configure-Nak event\r\n");
 800ac0e:	f7f5 fd17 	bl	8000640 <osSuspendAllTasks>
 800ac12:	4b6b      	ldr	r3, [pc, #428]	; (800adc0 <lcpProcessConfigureNak+0x1bc>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	2221      	movs	r2, #33	; 0x21
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	4869      	ldr	r0, [pc, #420]	; (800adc4 <lcpProcessConfigureNak+0x1c0>)
 800ac1e:	f00f f997 	bl	8019f50 <fwrite>
 800ac22:	f7f5 fd18 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureNakPacket->identifier != context->lcpFsm.identifier)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	785a      	ldrb	r2, [r3, #1]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d001      	beq.n	800ac38 <lcpProcessConfigureNak+0x34>
      return ERROR_WRONG_IDENTIFIER;
 800ac34:	23d6      	movs	r3, #214	; 0xd6
 800ac36:	e0be      	b.n	800adb6 <lcpProcessConfigureNak+0x1b2>

   //Retrieve the length of the option list
   length = ntohs(configureNakPacket->length) - sizeof(PppConfigurePacket);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	885b      	ldrh	r3, [r3, #2]
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7f5 fcae 	bl	80005a0 <swapInt16>
 800ac44:	4603      	mov	r3, r0
 800ac46:	3b04      	subs	r3, #4
 800ac48:	61fb      	str	r3, [r7, #28]
   //Point to the first option
   option = (PppOption *) configureNakPacket->options;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	61bb      	str	r3, [r7, #24]

   //Parse configuration options
   while(length > 0)
 800ac50:	e0a5      	b.n	800ad9e <lcpProcessConfigureNak+0x19a>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	785b      	ldrb	r3, [r3, #1]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d801      	bhi.n	800ac5e <lcpProcessConfigureNak+0x5a>
         return ERROR_INVALID_LENGTH;
 800ac5a:	23eb      	movs	r3, #235	; 0xeb
 800ac5c:	e0ab      	b.n	800adb6 <lcpProcessConfigureNak+0x1b2>
      if(option->length > length)
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	785b      	ldrb	r3, [r3, #1]
 800ac62:	461a      	mov	r2, r3
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d201      	bcs.n	800ac6e <lcpProcessConfigureNak+0x6a>
         return ERROR_INVALID_LENGTH;
 800ac6a:	23eb      	movs	r3, #235	; 0xeb
 800ac6c:	e0a3      	b.n	800adb6 <lcpProcessConfigureNak+0x1b2>

      //Maximum-Receive-Unit option?
      if(option->type == LCP_OPTION_MRU)
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d129      	bne.n	800acca <lcpProcessConfigureNak+0xc6>
      {
         //Cast option
         LcpMruOption *mruOption = (LcpMruOption *) option;
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	60fb      	str	r3, [r7, #12]

         //Check option length
         if(mruOption->length != sizeof(LcpMruOption))
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	785b      	ldrb	r3, [r3, #1]
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d001      	beq.n	800ac86 <lcpProcessConfigureNak+0x82>
            return ERROR_INVALID_LENGTH;
 800ac82:	23eb      	movs	r3, #235	; 0xeb
 800ac84:	e097      	b.n	800adb6 <lcpProcessConfigureNak+0x1b2>

         //Save value
         context->localConfig.mru = ntohs(mruOption->mru);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	885b      	ldrh	r3, [r3, #2]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7f5 fc87 	bl	80005a0 <swapInt16>
 800ac92:	4603      	mov	r3, r0
 800ac94:	461a      	mov	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
         //Make sure the MRU is acceptable
         context->localConfig.mru = MAX(context->localConfig.mru, PPP_MIN_MRU);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	bf38      	it	cc
 800aca6:	2320      	movcc	r3, #32
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
         context->localConfig.mru = MIN(context->localConfig.mru, PPP_MAX_MRU);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800acb6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800acba:	4293      	cmp	r3, r2
 800acbc:	bf28      	it	cs
 800acbe:	4613      	movcs	r3, r2
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800acc8:	e05d      	b.n	800ad86 <lcpProcessConfigureNak+0x182>
      }
      else if(option->type == LCP_OPTION_ACCM)
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d112      	bne.n	800acf8 <lcpProcessConfigureNak+0xf4>
      {
         //Cast option
         LcpAccmOption *accmOption = (LcpAccmOption *) option;
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	613b      	str	r3, [r7, #16]

         //Check option length
         if(accmOption->length != sizeof(LcpAccmOption))
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	785b      	ldrb	r3, [r3, #1]
 800acda:	2b06      	cmp	r3, #6
 800acdc:	d001      	beq.n	800ace2 <lcpProcessConfigureNak+0xde>
            return ERROR_INVALID_LENGTH;
 800acde:	23eb      	movs	r3, #235	; 0xeb
 800ace0:	e069      	b.n	800adb6 <lcpProcessConfigureNak+0x1b2>

         //Save value
         context->localConfig.accm = ntohl(accmOption->accm);
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7f5 fc67 	bl	80005bc <swapInt32>
 800acee:	4602      	mov	r2, r0
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800acf6:	e046      	b.n	800ad86 <lcpProcessConfigureNak+0x182>
      }
      //Authentication-Protocol option?
      else if(option->type == LCP_OPTION_AUTH_PROTOCOL)
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2b03      	cmp	r3, #3
 800acfe:	d142      	bne.n	800ad86 <lcpProcessConfigureNak+0x182>
      {
         //Cast option
         LcpAuthProtocolOption *authProtocolOption = (LcpAuthProtocolOption *) option;
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	617b      	str	r3, [r7, #20]

         //Check option length
         if(authProtocolOption->length < sizeof(LcpAuthProtocolOption))
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	785b      	ldrb	r3, [r3, #1]
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	d801      	bhi.n	800ad10 <lcpProcessConfigureNak+0x10c>
            return ERROR_INVALID_LENGTH;
 800ad0c:	23eb      	movs	r3, #235	; 0xeb
 800ad0e:	e052      	b.n	800adb6 <lcpProcessConfigureNak+0x1b2>

         //Check the value provided by the peer
         if(ntohs(authProtocolOption->protocol) == PPP_PROTOCOL_PAP)
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	885b      	ldrh	r3, [r3, #2]
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7f5 fc42 	bl	80005a0 <swapInt16>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f24c 0323 	movw	r3, #49187	; 0xc023
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d10b      	bne.n	800ad40 <lcpProcessConfigureNak+0x13c>
         {
#if (PAP_SUPPORT == ENABLED)
            //Manage authentication policy
            if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d028      	beq.n	800ad86 <lcpProcessConfigureNak+0x182>
            {
               //Select PAP authentication protocol
               context->localConfig.authProtocol = PPP_PROTOCOL_PAP;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f24c 0223 	movw	r2, #49187	; 0xc023
 800ad3a:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800ad3e:	e022      	b.n	800ad86 <lcpProcessConfigureNak+0x182>
            }
#endif
         }
         else if(ntohs(authProtocolOption->protocol) == PPP_PROTOCOL_CHAP)
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	885b      	ldrh	r3, [r3, #2]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f5 fc2a 	bl	80005a0 <swapInt16>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f24c 2323 	movw	r3, #49699	; 0xc223
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d116      	bne.n	800ad86 <lcpProcessConfigureNak+0x182>
         {
#if (CHAP_SUPPORT == ENABLED)
            //Make sure that the length of the option is correct
            if(authProtocolOption->length > sizeof(LcpAuthProtocolOption))
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d912      	bls.n	800ad86 <lcpProcessConfigureNak+0x182>
            {
               //Check the algorithm identifier
               if(authProtocolOption->data[0] == CHAP_ALGO_ID_CHAP_MD5)
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	791b      	ldrb	r3, [r3, #4]
 800ad64:	2b05      	cmp	r3, #5
 800ad66:	d10e      	bne.n	800ad86 <lcpProcessConfigureNak+0x182>
               {
                  //Manage authentication policy
                  if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f003 0302 	and.w	r3, r3, #2
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d008      	beq.n	800ad86 <lcpProcessConfigureNak+0x182>
                  {
                     //Select CHAP with MD5 authentication protocol
                     context->localConfig.authProtocol = PPP_PROTOCOL_CHAP;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f24c 2223 	movw	r2, #49699	; 0xc223
 800ad7a:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                     context->localConfig.authAlgo = CHAP_ALGO_ID_CHAP_MD5;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2205      	movs	r2, #5
 800ad82:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
#endif
         }
      }

      //Remaining bytes to process
      length -= option->length;
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	785b      	ldrb	r3, [r3, #1]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	1a9b      	subs	r3, r3, r2
 800ad90:	61fb      	str	r3, [r7, #28]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	461a      	mov	r2, r3
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	61bb      	str	r3, [r7, #24]
   while(length > 0)
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f47f af56 	bne.w	800ac52 <lcpProcessConfigureNak+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->lcpFsm, &lcpCallbacks);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	338c      	adds	r3, #140	; 0x8c
 800adaa:	4a07      	ldr	r2, [pc, #28]	; (800adc8 <lcpProcessConfigureNak+0x1c4>)
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f002 f8c8 	bl	800cf44 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3720      	adds	r7, #32
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	20000058 	.word	0x20000058
 800adc4:	0801bad8 	.word	0x0801bad8
 800adc8:	0801c420 	.word	0x0801c420

0800adcc <lcpProcessConfigureReject>:
 * @return Error code
 **/

error_t lcpProcessConfigureReject(PppContext *context,
   const PppConfigurePacket *configureRejPacket)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Configure-Reject event\r\n");
 800add6:	f7f5 fc33 	bl	8000640 <osSuspendAllTasks>
 800adda:	4b4c      	ldr	r3, [pc, #304]	; (800af0c <lcpProcessConfigureReject+0x140>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	2226      	movs	r2, #38	; 0x26
 800ade2:	2101      	movs	r1, #1
 800ade4:	484a      	ldr	r0, [pc, #296]	; (800af10 <lcpProcessConfigureReject+0x144>)
 800ade6:	f00f f8b3 	bl	8019f50 <fwrite>
 800adea:	f7f5 fc34 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureRejPacket->identifier != context->lcpFsm.identifier)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	785a      	ldrb	r2, [r3, #1]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d001      	beq.n	800ae00 <lcpProcessConfigureReject+0x34>
      return ERROR_WRONG_IDENTIFIER;
 800adfc:	23d6      	movs	r3, #214	; 0xd6
 800adfe:	e081      	b.n	800af04 <lcpProcessConfigureReject+0x138>

   //Retrieve the length of the option list
   length = ntohs(configureRejPacket->length) - sizeof(PppConfigurePacket);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	885b      	ldrh	r3, [r3, #2]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7f5 fbca 	bl	80005a0 <swapInt16>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	3b04      	subs	r3, #4
 800ae10:	60fb      	str	r3, [r7, #12]
   //Point to the first option
   option = (PppOption *) configureRejPacket->options;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	3304      	adds	r3, #4
 800ae16:	60bb      	str	r3, [r7, #8]

   //Parse configuration options
   while(length > 0)
 800ae18:	e069      	b.n	800aeee <lcpProcessConfigureReject+0x122>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	785b      	ldrb	r3, [r3, #1]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d801      	bhi.n	800ae26 <lcpProcessConfigureReject+0x5a>
         return ERROR_INVALID_LENGTH;
 800ae22:	23eb      	movs	r3, #235	; 0xeb
 800ae24:	e06e      	b.n	800af04 <lcpProcessConfigureReject+0x138>
      if(option->length > length)
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	785b      	ldrb	r3, [r3, #1]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d201      	bcs.n	800ae36 <lcpProcessConfigureReject+0x6a>
         return ERROR_INVALID_LENGTH;
 800ae32:	23eb      	movs	r3, #235	; 0xeb
 800ae34:	e066      	b.n	800af04 <lcpProcessConfigureReject+0x138>

      //Maximum-Receive-Unit option?
      if(option->type == LCP_OPTION_MRU)
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d109      	bne.n	800ae52 <lcpProcessConfigureReject+0x86>
      {
         //The option is not recognized by the peer
         context->localConfig.mruRejected = TRUE;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
         //Restore default value
         context->localConfig.mru = PPP_DEFAULT_MRU;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ae4c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800ae50:	e041      	b.n	800aed6 <lcpProcessConfigureReject+0x10a>
      }
      //Async-Control-Character-Map option?
      else if(option->type == LCP_OPTION_ACCM)
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d109      	bne.n	800ae6e <lcpProcessConfigureReject+0xa2>
      {
         //The option is not recognized by the peer
         context->localConfig.accmRejected = TRUE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
         //Restore default value
         context->localConfig.accm = PPP_DEFAULT_ACCM;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800ae6c:	e033      	b.n	800aed6 <lcpProcessConfigureReject+0x10a>
      }
      //Authentication-Protocol option?
      else if(option->type == LCP_OPTION_AUTH_PROTOCOL)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d109      	bne.n	800ae8a <lcpProcessConfigureReject+0xbe>
      {
         //This is an unrecoverable error that terminates the connection
         pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, FALSE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	4a25      	ldr	r2, [pc, #148]	; (800af14 <lcpProcessConfigureReject+0x148>)
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f002 f95b 	bl	800d13c <pppRcvCodeRejEvent>
         //Exit immediately
         return ERROR_FAILURE;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e03c      	b.n	800af04 <lcpProcessConfigureReject+0x138>
      }
      //Magic-Number option?
      else if(option->type == LCP_OPTION_MAGIC_NUMBER)
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	d108      	bne.n	800aea4 <lcpProcessConfigureReject+0xd8>
      {
         //The option is not recognized by the peer
         context->localConfig.magicNumberRejected = TRUE;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
         //Restore default value
         context->localConfig.magicNumber = PPP_DEFAULT_MAGIC_NUMBER;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800aea2:	e018      	b.n	800aed6 <lcpProcessConfigureReject+0x10a>
      }
      //Protocol-Field-Compression option?
      else if(option->type == LCP_OPTION_PFC)
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	2b07      	cmp	r3, #7
 800aeaa:	d108      	bne.n	800aebe <lcpProcessConfigureReject+0xf2>
      {
         //The option is not recognized by the peer
         context->localConfig.pfcRejected = TRUE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
         //Restore default value
         context->localConfig.pfc = FALSE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 800aebc:	e00b      	b.n	800aed6 <lcpProcessConfigureReject+0x10a>
      }
      //Address-and-Control-Field-Compression option?
      else if(option->type == LCP_OPTION_ACFC)
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	d107      	bne.n	800aed6 <lcpProcessConfigureReject+0x10a>
      {
         //The option is not recognized by the peer
         context->localConfig.acfcRejected = TRUE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
         //Restore default value
         context->localConfig.acfc = FALSE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
      }

      //Remaining bytes to process
      length -= option->length;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	785b      	ldrb	r3, [r3, #1]
 800aeda:	461a      	mov	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	1a9b      	subs	r3, r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	461a      	mov	r2, r3
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4413      	add	r3, r2
 800aeec:	60bb      	str	r3, [r7, #8]
   while(length > 0)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d192      	bne.n	800ae1a <lcpProcessConfigureReject+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->lcpFsm, &lcpCallbacks);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	338c      	adds	r3, #140	; 0x8c
 800aef8:	4a06      	ldr	r2, [pc, #24]	; (800af14 <lcpProcessConfigureReject+0x148>)
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f002 f821 	bl	800cf44 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20000058 	.word	0x20000058
 800af10:	0801bafc 	.word	0x0801bafc
 800af14:	0801c420 	.word	0x0801c420

0800af18 <lcpProcessTerminateReq>:
 * @return Error code
 **/

error_t lcpProcessTerminateReq(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Terminate-Request event\r\n");
 800af22:	f7f5 fb8d 	bl	8000640 <osSuspendAllTasks>
 800af26:	4b0b      	ldr	r3, [pc, #44]	; (800af54 <lcpProcessTerminateReq+0x3c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	2227      	movs	r2, #39	; 0x27
 800af2e:	2101      	movs	r1, #1
 800af30:	4809      	ldr	r0, [pc, #36]	; (800af58 <lcpProcessTerminateReq+0x40>)
 800af32:	f00f f80d 	bl	8019f50 <fwrite>
 800af36:	f7f5 fb8e 	bl	8000656 <osResumeAllTasks>

   //The Terminate-Request indicates the desire of the peer to close the connection
   pppRcvTerminateReqEvent(context, &context->lcpFsm,
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	4a06      	ldr	r2, [pc, #24]	; (800af5c <lcpProcessTerminateReq+0x44>)
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f002 f851 	bl	800cfec <pppRcvTerminateReqEvent>
      &lcpCallbacks, terminateReqPacket);

   //Successful processing
   return NO_ERROR;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	20000058 	.word	0x20000058
 800af58:	0801bb24 	.word	0x0801bb24
 800af5c:	0801c420 	.word	0x0801c420

0800af60 <lcpProcessTerminateAck>:
 * @return Error code
 **/

error_t lcpProcessTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateAckPacket)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Terminate-Ack event\r\n");
 800af6a:	f7f5 fb69 	bl	8000640 <osSuspendAllTasks>
 800af6e:	4b0b      	ldr	r3, [pc, #44]	; (800af9c <lcpProcessTerminateAck+0x3c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	2223      	movs	r2, #35	; 0x23
 800af76:	2101      	movs	r1, #1
 800af78:	4809      	ldr	r0, [pc, #36]	; (800afa0 <lcpProcessTerminateAck+0x40>)
 800af7a:	f00e ffe9 	bl	8019f50 <fwrite>
 800af7e:	f7f5 fb6a 	bl	8000656 <osResumeAllTasks>

   //The Terminate-Ack packet is usually a response to a Terminate-Request
   //packet. This packet may also indicate that the peer is in Closed or
   //Stopped states, and serves to re-synchronize the link configuration
   pppRcvTerminateAckEvent(context, &context->lcpFsm, &lcpCallbacks);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	338c      	adds	r3, #140	; 0x8c
 800af86:	4a07      	ldr	r2, [pc, #28]	; (800afa4 <lcpProcessTerminateAck+0x44>)
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f002 f876 	bl	800d07c <pppRcvTerminateAckEvent>

   //Successful processing
   return NO_ERROR;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20000058 	.word	0x20000058
 800afa0:	0801bb4c 	.word	0x0801bb4c
 800afa4:	0801c420 	.word	0x0801c420

0800afa8 <lcpProcessCodeRej>:
 * @return Error code
 **/

error_t lcpProcessCodeRej(PppContext *context,
   const PppCodeRejPacket *codeRejPacket)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
   size_t length;
   PppPacket *packet;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Code-Reject event\r\n");
 800afb2:	f7f5 fb45 	bl	8000640 <osSuspendAllTasks>
 800afb6:	4b1c      	ldr	r3, [pc, #112]	; (800b028 <lcpProcessCodeRej+0x80>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	2221      	movs	r2, #33	; 0x21
 800afbe:	2101      	movs	r1, #1
 800afc0:	481a      	ldr	r0, [pc, #104]	; (800b02c <lcpProcessCodeRej+0x84>)
 800afc2:	f00e ffc5 	bl	8019f50 <fwrite>
 800afc6:	f7f5 fb46 	bl	8000656 <osResumeAllTasks>

   //Point to the rejected packet
   packet = (PppPacket *) codeRejPacket->rejectedPacket;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	3304      	adds	r3, #4
 800afce:	60fb      	str	r3, [r7, #12]
   //Retrieve the length of the rejected packet
   length = ntohs(codeRejPacket->length) - sizeof(PppCodeRejPacket);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	885b      	ldrh	r3, [r3, #2]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7f5 fae2 	bl	80005a0 <swapInt16>
 800afdc:	4603      	mov	r3, r0
 800afde:	3b04      	subs	r3, #4
 800afe0:	60bb      	str	r3, [r7, #8]

   //Make sure the length of the rejected packet is valid
   if(length < sizeof(PppPacket))
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d801      	bhi.n	800afec <lcpProcessCodeRej+0x44>
      return ERROR_INVALID_LENGTH;
 800afe8:	23eb      	movs	r3, #235	; 0xeb
 800afea:	e019      	b.n	800b020 <lcpProcessCodeRej+0x78>

   //Check whether the rejected value is acceptable or catastrophic
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d003      	beq.n	800affc <lcpProcessCodeRej+0x54>
      packet->code > PPP_CODE_DISCARD_REQ)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	781b      	ldrb	r3, [r3, #0]
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 800aff8:	2b0b      	cmp	r3, #11
 800affa:	d908      	bls.n	800b00e <lcpProcessCodeRej+0x66>
   {
      //The RXJ+ event arises when the rejected value is acceptable, such
      //as a Code-Reject of an extended code, or a Protocol-Reject of a
      //NCP. These are within the scope of normal operation
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, TRUE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b002:	2301      	movs	r3, #1
 800b004:	4a0a      	ldr	r2, [pc, #40]	; (800b030 <lcpProcessCodeRej+0x88>)
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f002 f898 	bl	800d13c <pppRcvCodeRejEvent>
 800b00c:	e007      	b.n	800b01e <lcpProcessCodeRej+0x76>
   else
   {
      //The RXJ- event arises when the rejected value is catastrophic, such
      //as a Code-Reject of Configure-Request! This event communicates an
      //unrecoverable error that terminates the connection
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, FALSE);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b014:	2300      	movs	r3, #0
 800b016:	4a06      	ldr	r2, [pc, #24]	; (800b030 <lcpProcessCodeRej+0x88>)
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f002 f88f 	bl	800d13c <pppRcvCodeRejEvent>
   }

   //Successful processing
   return NO_ERROR;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	20000058 	.word	0x20000058
 800b02c:	0801bb70 	.word	0x0801bb70
 800b030:	0801c420 	.word	0x0801c420

0800b034 <lcpProcessProtocolRej>:
 * @return Error code
 **/

error_t lcpProcessProtocolRej(PppContext *context,
   const PppProtocolRejPacket *protocolRejPacket)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
   size_t length;
   uint16_t protocol;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Protocol-Reject event\r\n");
 800b03e:	f7f5 faff 	bl	8000640 <osSuspendAllTasks>
 800b042:	4b2f      	ldr	r3, [pc, #188]	; (800b100 <lcpProcessProtocolRej+0xcc>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	2225      	movs	r2, #37	; 0x25
 800b04a:	2101      	movs	r1, #1
 800b04c:	482d      	ldr	r0, [pc, #180]	; (800b104 <lcpProcessProtocolRej+0xd0>)
 800b04e:	f00e ff7f 	bl	8019f50 <fwrite>
 800b052:	f7f5 fb00 	bl	8000656 <osResumeAllTasks>

   //Retrieve the length of the packet
   length = ntohs(protocolRejPacket->length);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	885b      	ldrh	r3, [r3, #2]
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7f5 fa9f 	bl	80005a0 <swapInt16>
 800b062:	4603      	mov	r3, r0
 800b064:	60fb      	str	r3, [r7, #12]

   //Make sure the length of the Protocol-Reject packet is valid
   if(length < sizeof(PppProtocolRejPacket))
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2b05      	cmp	r3, #5
 800b06a:	d801      	bhi.n	800b070 <lcpProcessProtocolRej+0x3c>
      return ERROR_INVALID_LENGTH;
 800b06c:	23eb      	movs	r3, #235	; 0xeb
 800b06e:	e042      	b.n	800b0f6 <lcpProcessProtocolRej+0xc2>

   //Convert the Rejected-Protocol field to host byte order
   protocol = ntohs(protocolRejPacket->rejectedProtocol);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	889b      	ldrh	r3, [r3, #4]
 800b074:	b29b      	uxth	r3, r3
 800b076:	4618      	mov	r0, r3
 800b078:	f7f5 fa92 	bl	80005a0 <swapInt16>
 800b07c:	4603      	mov	r3, r0
 800b07e:	817b      	strh	r3, [r7, #10]

   //Check Rejected-Protocol field value
   switch(protocol)
 800b080:	897b      	ldrh	r3, [r7, #10]
 800b082:	f248 0221 	movw	r2, #32801	; 0x8021
 800b086:	4293      	cmp	r3, r2
 800b088:	d01a      	beq.n	800b0c0 <lcpProcessProtocolRej+0x8c>
 800b08a:	f248 0221 	movw	r2, #32801	; 0x8021
 800b08e:	4293      	cmp	r3, r2
 800b090:	dc04      	bgt.n	800b09c <lcpProcessProtocolRej+0x68>
 800b092:	2b21      	cmp	r3, #33	; 0x21
 800b094:	d014      	beq.n	800b0c0 <lcpProcessProtocolRej+0x8c>
 800b096:	2b57      	cmp	r3, #87	; 0x57
 800b098:	d01f      	beq.n	800b0da <lcpProcessProtocolRej+0xa6>
      break;

   //Unknown protocol?
   default:
      //Just for sanity's sake...
      break;
 800b09a:	e02b      	b.n	800b0f4 <lcpProcessProtocolRej+0xc0>
   switch(protocol)
 800b09c:	f248 0257 	movw	r2, #32855	; 0x8057
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d01a      	beq.n	800b0da <lcpProcessProtocolRej+0xa6>
 800b0a4:	f24c 0221 	movw	r2, #49185	; 0xc021
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d000      	beq.n	800b0ae <lcpProcessProtocolRej+0x7a>
      break;
 800b0ac:	e022      	b.n	800b0f4 <lcpProcessProtocolRej+0xc0>
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, FALSE);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	4a14      	ldr	r2, [pc, #80]	; (800b108 <lcpProcessProtocolRej+0xd4>)
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f002 f83f 	bl	800d13c <pppRcvCodeRejEvent>
      break;
 800b0be:	e019      	b.n	800b0f4 <lcpProcessProtocolRej+0xc0>
      context->ipRejected = TRUE;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, TRUE);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	4a0d      	ldr	r2, [pc, #52]	; (800b108 <lcpProcessProtocolRej+0xd4>)
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f002 f832 	bl	800d13c <pppRcvCodeRejEvent>
      break;
 800b0d8:	e00c      	b.n	800b0f4 <lcpProcessProtocolRej+0xc0>
      context->ipv6Rejected = TRUE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, TRUE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4a07      	ldr	r2, [pc, #28]	; (800b108 <lcpProcessProtocolRej+0xd4>)
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f002 f825 	bl	800d13c <pppRcvCodeRejEvent>
      break;
 800b0f2:	bf00      	nop
   }

   //Successful processing
   return NO_ERROR;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20000058 	.word	0x20000058
 800b104:	0801bb94 	.word	0x0801bb94
 800b108:	0801c420 	.word	0x0801c420

0800b10c <lcpProcessEchoReq>:
 * @return Error code
 **/

error_t lcpProcessEchoReq(PppContext *context,
   const PppEchoPacket *echoReqPacket)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Echo-Request event\r\n");
 800b116:	f7f5 fa93 	bl	8000640 <osSuspendAllTasks>
 800b11a:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <lcpProcessEchoReq+0x3c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	2222      	movs	r2, #34	; 0x22
 800b122:	2101      	movs	r1, #1
 800b124:	4809      	ldr	r0, [pc, #36]	; (800b14c <lcpProcessEchoReq+0x40>)
 800b126:	f00e ff13 	bl	8019f50 <fwrite>
 800b12a:	f7f5 fa94 	bl	8000656 <osResumeAllTasks>

   //An Echo-Reply packet is transmitted to acknowledge the
   //reception of the Echo-Request packet
   pppRcvEchoReqEvent(context, &context->lcpFsm,
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	4a06      	ldr	r2, [pc, #24]	; (800b150 <lcpProcessEchoReq+0x44>)
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f002 f86f 	bl	800d21c <pppRcvEchoReqEvent>
      &lcpCallbacks, echoReqPacket);

   //Successful processing
   return NO_ERROR;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20000058 	.word	0x20000058
 800b14c:	0801bbbc 	.word	0x0801bbbc
 800b150:	0801c420 	.word	0x0801c420

0800b154 <lcpProcessEchoRep>:
 * @return Error code
 **/

error_t lcpProcessEchoRep(PppContext *context,
   const PppEchoPacket *echoRepPacket)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Echo-Reply event\r\n");
 800b15e:	f7f5 fa6f 	bl	8000640 <osSuspendAllTasks>
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <lcpProcessEchoRep+0x2c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	2220      	movs	r2, #32
 800b16a:	2101      	movs	r1, #1
 800b16c:	4805      	ldr	r0, [pc, #20]	; (800b184 <lcpProcessEchoRep+0x30>)
 800b16e:	f00e feef 	bl	8019f50 <fwrite>
 800b172:	f7f5 fa70 	bl	8000656 <osResumeAllTasks>

   //Successful processing
   return NO_ERROR;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20000058 	.word	0x20000058
 800b184:	0801bbe0 	.word	0x0801bbe0

0800b188 <lcpProcessDiscardReq>:
 * @return Error code
 **/

error_t lcpProcessDiscardReq(PppContext *context,
   const PppDiscardReqPacket *discardReqPacket)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Discard-Request event\r\n");
 800b192:	f7f5 fa55 	bl	8000640 <osSuspendAllTasks>
 800b196:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <lcpProcessDiscardReq+0x2c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	2225      	movs	r2, #37	; 0x25
 800b19e:	2101      	movs	r1, #1
 800b1a0:	4805      	ldr	r0, [pc, #20]	; (800b1b8 <lcpProcessDiscardReq+0x30>)
 800b1a2:	f00e fed5 	bl	8019f50 <fwrite>
 800b1a6:	f7f5 fa56 	bl	8000656 <osResumeAllTasks>

   //The receiver must silently discard any Discard-Request that it receives
   return NO_ERROR;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	20000058 	.word	0x20000058
 800b1b8:	0801bc04 	.word	0x0801bc04

0800b1bc <lcpProcessUnknownCode>:
 * @return Error code
 **/

error_t lcpProcessUnknownCode(PppContext *context,
   const PppPacket *packet)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Unknown-Code event\r\n");
 800b1c6:	f7f5 fa3b 	bl	8000640 <osSuspendAllTasks>
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <lcpProcessUnknownCode+0x3c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	2222      	movs	r2, #34	; 0x22
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	4809      	ldr	r0, [pc, #36]	; (800b1fc <lcpProcessUnknownCode+0x40>)
 800b1d6:	f00e febb 	bl	8019f50 <fwrite>
 800b1da:	f7f5 fa3c 	bl	8000656 <osResumeAllTasks>

   //This event occurs when an un-interpretable packet is received from
   //the peer. A Code-Reject packet is sent in response
   pppRcvUnknownCodeEvent(context, &context->lcpFsm, &lcpCallbacks, packet);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	4a06      	ldr	r2, [pc, #24]	; (800b200 <lcpProcessUnknownCode+0x44>)
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f001 ff8f 	bl	800d10c <pppRcvUnknownCodeEvent>

   //Successful processing
   return NO_ERROR;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20000058 	.word	0x20000058
 800b1fc:	0801bc2c 	.word	0x0801bc2c
 800b200:	0801c420 	.word	0x0801c420

0800b204 <lcpProcessUnknownProtocol>:
 * @return Error code
 **/

error_t lcpProcessUnknownProtocol(PppContext *context,
   uint16_t protocol, const uint8_t *information, size_t length)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af02      	add	r7, sp, #8
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	607a      	str	r2, [r7, #4]
 800b20e:	603b      	str	r3, [r7, #0]
 800b210:	460b      	mov	r3, r1
 800b212:	817b      	strh	r3, [r7, #10]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Unknown-Protocol event\r\n");
 800b214:	f7f5 fa14 	bl	8000640 <osSuspendAllTasks>
 800b218:	4b12      	ldr	r3, [pc, #72]	; (800b264 <lcpProcessUnknownProtocol+0x60>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	2226      	movs	r2, #38	; 0x26
 800b220:	2101      	movs	r1, #1
 800b222:	4811      	ldr	r0, [pc, #68]	; (800b268 <lcpProcessUnknownProtocol+0x64>)
 800b224:	f00e fe94 	bl	8019f50 <fwrite>
 800b228:	f7f5 fa15 	bl	8000656 <osResumeAllTasks>

   //The peer is attempting to use a protocol which is unsupported
   if(context->lcpFsm.state == PPP_STATE_9_OPENED)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b232:	2b09      	cmp	r3, #9
 800b234:	d111      	bne.n	800b25a <lcpProcessUnknownProtocol+0x56>
   {
      //The Identifier field must be changed for each Protocol-Reject sent
      context->lcpFsm.identifier++;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b23c:	3301      	adds	r3, #1
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

      //If the LCP automaton is in the Opened state, then this must be
      //reported back to the peer by transmitting a Protocol-Reject
      pppSendProtocolRej(context, context->lcpFsm.identifier,
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 800b24c:	897a      	ldrh	r2, [r7, #10]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f002 fd1d 	bl	800dc94 <pppSendProtocolRej>
         protocol, information, length);
   }

   //Successful processing
   return NO_ERROR;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	20000058 	.word	0x20000058
 800b268:	0801bc50 	.word	0x0801bc50

0800b26c <lcpThisLayerUp>:
 * @brief This-Layer-Up callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerUp(PppContext *context)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Up callback\r\n");
 800b274:	f7f5 f9e4 	bl	8000640 <osSuspendAllTasks>
 800b278:	4b32      	ldr	r3, [pc, #200]	; (800b344 <lcpThisLayerUp+0xd8>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	221c      	movs	r2, #28
 800b280:	2101      	movs	r1, #1
 800b282:	4831      	ldr	r0, [pc, #196]	; (800b348 <lcpThisLayerUp+0xdc>)
 800b284:	f00e fe64 	bl	8019f50 <fwrite>
 800b288:	f7f5 f9e5 	bl	8000656 <osResumeAllTasks>

   //Check whether the other end of the PPP link is being authenticated
   if(context->localConfig.authProtocol != 0)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800b292:	2b00      	cmp	r3, #0
 800b294:	d004      	beq.n	800b2a0 <lcpThisLayerUp+0x34>
      context->localAuthDone = FALSE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b29e:	e003      	b.n	800b2a8 <lcpThisLayerUp+0x3c>
   else
      context->localAuthDone = TRUE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

   //Check whether the other end of the PPP link is the authenticator
   if(context->peerConfig.authProtocol != 0)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d004      	beq.n	800b2bc <lcpThisLayerUp+0x50>
      context->peerAuthDone = FALSE;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b2ba:	e003      	b.n	800b2c4 <lcpThisLayerUp+0x58>
   else
      context->peerAuthDone = TRUE;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if (PAP_SUPPORT == ENABLED)
   //PAP authentication required?
   if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP ||
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800b2ca:	f24c 0223 	movw	r2, #49187	; 0xc023
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d006      	beq.n	800b2e0 <lcpThisLayerUp+0x74>
      context->peerConfig.authProtocol == PPP_PROTOCOL_PAP)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
   if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP ||
 800b2d8:	f24c 0223 	movw	r2, #49187	; 0xc023
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d106      	bne.n	800b2ee <lcpThisLayerUp+0x82>
   {
      //Advance to the Authentication phase
      context->pppPhase = PPP_PHASE_AUTHENTICATE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      //Start PAP authentication process
      papStartAuth(context);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fd51 	bl	800bd90 <papStartAuth>
   }
#endif
#if (CHAP_SUPPORT == ENABLED)
   //CHAP authentication required?
   if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP ||
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800b2f4:	f24c 2223 	movw	r2, #49699	; 0xc223
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d006      	beq.n	800b30a <lcpThisLayerUp+0x9e>
      context->peerConfig.authProtocol == PPP_PROTOCOL_CHAP)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
   if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP ||
 800b302:	f24c 2223 	movw	r2, #49699	; 0xc223
 800b306:	4293      	cmp	r3, r2
 800b308:	d106      	bne.n	800b318 <lcpThisLayerUp+0xac>
   {
      //Advance to the Authentication phase
      context->pppPhase = PPP_PHASE_AUTHENTICATE;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2202      	movs	r2, #2
 800b30e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      //Start CHAP authentication process
      chapStartAuth(context);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7fd ffc4 	bl	80092a0 <chapStartAuth>
   }
#endif

   //Check whether PPP authentication is complete
   if(context->localAuthDone && context->peerAuthDone)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00b      	beq.n	800b33a <lcpThisLayerUp+0xce>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d006      	beq.n	800b33a <lcpThisLayerUp+0xce>
   {
      //Advance to the Network phase
      context->pppPhase = PPP_PHASE_NETWORK;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2203      	movs	r2, #3
 800b330:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
      //IPCP Open event
      ipcpOpen(context);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7fe fbe7 	bl	8009b08 <ipcpOpen>
#if (IPV6_SUPPORT == ENABLED)
      //IPV6CP Open event
      ipv6cpOpen(context);
#endif
   }
}
 800b33a:	bf00      	nop
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20000058 	.word	0x20000058
 800b348:	0801bc78 	.word	0x0801bc78

0800b34c <lcpThisLayerDown>:
 * @brief This-Layer-Down callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerDown(PppContext *context)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Down callback\r\n");
 800b354:	f7f5 f974 	bl	8000640 <osSuspendAllTasks>
 800b358:	4b0d      	ldr	r3, [pc, #52]	; (800b390 <lcpThisLayerDown+0x44>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	221e      	movs	r2, #30
 800b360:	2101      	movs	r1, #1
 800b362:	480c      	ldr	r0, [pc, #48]	; (800b394 <lcpThisLayerDown+0x48>)
 800b364:	f00e fdf4 	bl	8019f50 <fwrite>
 800b368:	f7f5 f975 	bl	8000656 <osResumeAllTasks>

   //Advance to the Terminate phase
   context->pppPhase = PPP_PHASE_TERMINATE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2204      	movs	r2, #4
 800b370:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
   //IPCP Close event
   ipcpClose(context);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7fe fbf1 	bl	8009b5c <ipcpClose>
   ipv6cpClose(context);
#endif

#if (PAP_SUPPORT == ENABLED)
   //Abort PAP authentication process
   papAbortAuth(context);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fd3e 	bl	800bdfc <papAbortAuth>
#endif

#if (CHAP_SUPPORT == ENABLED)
   //Abort CHAP authentication process
   chapAbortAuth(context);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7fd ffc3 	bl	800930c <chapAbortAuth>
#endif
}
 800b386:	bf00      	nop
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000058 	.word	0x20000058
 800b394:	0801bc98 	.word	0x0801bc98

0800b398 <lcpThisLayerStarted>:
 * @brief This-Layer-Started callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerStarted(PppContext *context)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Started callback\r\n");
 800b3a0:	f7f5 f94e 	bl	8000640 <osSuspendAllTasks>
 800b3a4:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <lcpThisLayerStarted+0x28>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	2221      	movs	r2, #33	; 0x21
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	4805      	ldr	r0, [pc, #20]	; (800b3c4 <lcpThisLayerStarted+0x2c>)
 800b3b0:	f00e fdce 	bl	8019f50 <fwrite>
 800b3b4:	f7f5 f94f 	bl	8000656 <osResumeAllTasks>
}
 800b3b8:	bf00      	nop
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20000058 	.word	0x20000058
 800b3c4:	0801bcb8 	.word	0x0801bcb8

0800b3c8 <lcpThisLayerFinished>:
 * @brief This-Layer-Finished callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerFinished(PppContext *context)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Finished callback\r\n");
 800b3d0:	f7f5 f936 	bl	8000640 <osSuspendAllTasks>
 800b3d4:	4b0f      	ldr	r3, [pc, #60]	; (800b414 <lcpThisLayerFinished+0x4c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	2222      	movs	r2, #34	; 0x22
 800b3dc:	2101      	movs	r1, #1
 800b3de:	480e      	ldr	r0, [pc, #56]	; (800b418 <lcpThisLayerFinished+0x50>)
 800b3e0:	f00e fdb6 	bl	8019f50 <fwrite>
 800b3e4:	f7f5 f937 	bl	8000656 <osResumeAllTasks>

   //The link is no longer available for traffic
   pppCloseEvent(context, &context->lcpFsm, &lcpCallbacks);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	338c      	adds	r3, #140	; 0x8c
 800b3ec:	4a0b      	ldr	r2, [pc, #44]	; (800b41c <lcpThisLayerFinished+0x54>)
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f001 fb7f 	bl	800caf4 <pppCloseEvent>
   //The lower layer is no longer ready to carry packets
   pppDownEvent(context, &context->lcpFsm, &lcpCallbacks);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	338c      	adds	r3, #140	; 0x8c
 800b3fa:	4a08      	ldr	r2, [pc, #32]	; (800b41c <lcpThisLayerFinished+0x54>)
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f001 faf0 	bl	800c9e4 <pppDownEvent>

   //Advance to the Link Dead phase
   context->pppPhase = PPP_PHASE_DEAD;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800b40c:	bf00      	nop
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	20000058 	.word	0x20000058
 800b418:	0801bcdc 	.word	0x0801bcdc
 800b41c:	0801c420 	.word	0x0801c420

0800b420 <lcpInitRestartCount>:
 * @param[in] context PPP context
 * @param[in] value Restart counter value
 **/

void lcpInitRestartCount(PppContext *context, uint_t value)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Initialize-Restart-Count callback\r\n");
 800b42a:	f7f5 f909 	bl	8000640 <osSuspendAllTasks>
 800b42e:	4b09      	ldr	r3, [pc, #36]	; (800b454 <lcpInitRestartCount+0x34>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	2227      	movs	r2, #39	; 0x27
 800b436:	2101      	movs	r1, #1
 800b438:	4807      	ldr	r0, [pc, #28]	; (800b458 <lcpInitRestartCount+0x38>)
 800b43a:	f00e fd89 	bl	8019f50 <fwrite>
 800b43e:	f7f5 f90a 	bl	8000656 <osResumeAllTasks>

   //Initialize restart counter
   context->lcpFsm.restartCounter = value;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800b44a:	bf00      	nop
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	20000058 	.word	0x20000058
 800b458:	0801bd00 	.word	0x0801bd00

0800b45c <lcpZeroRestartCount>:
 * @brief Zero-Restart-Count callback function
 * @param[in] context PPP context
 **/

void lcpZeroRestartCount(PppContext *context)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP Zero-Restart-Count callback\r\n");
 800b464:	f7f5 f8ec 	bl	8000640 <osSuspendAllTasks>
 800b468:	4b0b      	ldr	r3, [pc, #44]	; (800b498 <lcpZeroRestartCount+0x3c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	2221      	movs	r2, #33	; 0x21
 800b470:	2101      	movs	r1, #1
 800b472:	480a      	ldr	r0, [pc, #40]	; (800b49c <lcpZeroRestartCount+0x40>)
 800b474:	f00e fd6c 	bl	8019f50 <fwrite>
 800b478:	f7f5 f8ed 	bl	8000656 <osResumeAllTasks>

   //Zero restart counter
   context->lcpFsm.restartCounter = 0;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   //The receiver of a Terminate-Request should wait for the peer to
   //disconnect, and must not disconnect until at least one Restart
   //time has passed after sending a Terminate-Ack
   context->lcpFsm.timestamp = osGetSystemTime();
 800b484:	f7f5 f9a4 	bl	80007d0 <osGetSystemTime>
 800b488:	4602      	mov	r2, r0
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800b490:	bf00      	nop
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	20000058 	.word	0x20000058
 800b49c:	0801bd28 	.word	0x0801bd28

0800b4a0 <lcpSendConfigureReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpSendConfigureReq(PppContext *context)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	; 0x28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppConfigurePacket *configureReqPacket;

   //Debug message
   TRACE_INFO("LCP Send-Configure-Request callback\r\n");
 800b4a8:	f7f5 f8ca 	bl	8000640 <osSuspendAllTasks>
 800b4ac:	4b76      	ldr	r3, [pc, #472]	; (800b688 <lcpSendConfigureReq+0x1e8>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	2225      	movs	r2, #37	; 0x25
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	4875      	ldr	r0, [pc, #468]	; (800b68c <lcpSendConfigureReq+0x1ec>)
 800b4b8:	f00e fd4a 	bl	8019f50 <fwrite>
 800b4bc:	f7f5 f8cb 	bl	8000656 <osResumeAllTasks>

   //Allocate a buffer memory to hold the Configure-Request packet
   buffer = pppAllocBuffer(PPP_MAX_CONF_REQ_SIZE, &offset);
 800b4c0:	f107 0314 	add.w	r3, r7, #20
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	2080      	movs	r0, #128	; 0x80
 800b4c8:	f001 fa50 	bl	800c96c <pppAllocBuffer>
 800b4cc:	6278      	str	r0, [r7, #36]	; 0x24
   //Failed to allocate memory?
   if(buffer == NULL)
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <lcpSendConfigureReq+0x38>
      return ERROR_OUT_OF_MEMORY;
 800b4d4:	2364      	movs	r3, #100	; 0x64
 800b4d6:	e0d2      	b.n	800b67e <lcpSendConfigureReq+0x1de>

   //Point to the Configure-Request packet
   configureReqPacket = netBufferAt(buffer, offset);
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4de:	f7f7 f8a3 	bl	8002628 <netBufferAt>
 800b4e2:	6238      	str	r0, [r7, #32]

   //Format packet header
   configureReqPacket->code = PPP_CODE_CONFIGURE_REQ;
 800b4e4:	6a3b      	ldr	r3, [r7, #32]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	701a      	strb	r2, [r3, #0]
   configureReqPacket->identifier = ++context->lcpFsm.identifier;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	705a      	strb	r2, [r3, #1]
   configureReqPacket->length = sizeof(PppConfigurePacket);
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	2200      	movs	r2, #0
 800b508:	f042 0204 	orr.w	r2, r2, #4
 800b50c:	709a      	strb	r2, [r3, #2]
 800b50e:	2200      	movs	r2, #0
 800b510:	70da      	strb	r2, [r3, #3]

   //Make sure the Maximum-Receive-Unit option has not been
   //previously rejected
   if(!context->localConfig.mruRejected)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10e      	bne.n	800b53a <lcpSendConfigureReq+0x9a>
   {
      //Convert MRU to network byte order
      uint16_t value = htons(context->localConfig.mru);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800b522:	4618      	mov	r0, r3
 800b524:	f7f5 f83c 	bl	80005a0 <swapInt16>
 800b528:	4603      	mov	r3, r0
 800b52a:	827b      	strh	r3, [r7, #18]
      //Add option
      pppAddOption(configureReqPacket, LCP_OPTION_MRU, &value, sizeof(uint16_t));
 800b52c:	f107 0212 	add.w	r2, r7, #18
 800b530:	2302      	movs	r3, #2
 800b532:	2101      	movs	r1, #1
 800b534:	6a38      	ldr	r0, [r7, #32]
 800b536:	f002 fc8d 	bl	800de54 <pppAddOption>
   }

   //Make sure the Async-Control-Character-Map option has not been
   //previously rejected
   if(!context->localConfig.accmRejected)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10e      	bne.n	800b562 <lcpSendConfigureReq+0xc2>
   {
      //Convert ACCM to network byte order
      uint32_t value = htonl(context->localConfig.accm);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7f5 f836 	bl	80005bc <swapInt32>
 800b550:	4603      	mov	r3, r0
 800b552:	60fb      	str	r3, [r7, #12]
      //Add option
      pppAddOption(configureReqPacket, LCP_OPTION_ACCM, &value, sizeof(uint32_t));
 800b554:	f107 020c 	add.w	r2, r7, #12
 800b558:	2304      	movs	r3, #4
 800b55a:	2102      	movs	r1, #2
 800b55c:	6a38      	ldr	r0, [r7, #32]
 800b55e:	f002 fc79 	bl	800de54 <pppAddOption>
   }

   //Make sure the Authentication-Protocol option has not been
   //previously rejected
   if(!context->localConfig.authProtocolRejected)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d128      	bne.n	800b5be <lcpSendConfigureReq+0x11e>
   {
      uint8_t value[3];

      //PAP authentication protocol?
      if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800b572:	f24c 0223 	movw	r2, #49187	; 0xc023
 800b576:	4293      	cmp	r3, r2
 800b578:	d10b      	bne.n	800b592 <lcpSendConfigureReq+0xf2>
      {
         //Format Authentication-Protocol option
         value[0] = MSB(PPP_PROTOCOL_PAP);
 800b57a:	23c0      	movs	r3, #192	; 0xc0
 800b57c:	723b      	strb	r3, [r7, #8]
         value[1] = LSB(PPP_PROTOCOL_PAP);
 800b57e:	2323      	movs	r3, #35	; 0x23
 800b580:	727b      	strb	r3, [r7, #9]

         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_AUTH_PROTOCOL, &value, 2);
 800b582:	f107 0208 	add.w	r2, r7, #8
 800b586:	2302      	movs	r3, #2
 800b588:	2103      	movs	r1, #3
 800b58a:	6a38      	ldr	r0, [r7, #32]
 800b58c:	f002 fc62 	bl	800de54 <pppAddOption>
 800b590:	e015      	b.n	800b5be <lcpSendConfigureReq+0x11e>
      }
      //CHAP authentication protocol?
      else if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800b598:	f24c 2223 	movw	r2, #49699	; 0xc223
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d10e      	bne.n	800b5be <lcpSendConfigureReq+0x11e>
      {
         //Format Authentication-Protocol option
         value[0] = MSB(PPP_PROTOCOL_CHAP);
 800b5a0:	23c2      	movs	r3, #194	; 0xc2
 800b5a2:	723b      	strb	r3, [r7, #8]
         value[1] = LSB(PPP_PROTOCOL_CHAP);
 800b5a4:	2323      	movs	r3, #35	; 0x23
 800b5a6:	727b      	strb	r3, [r7, #9]
         value[2] = context->localConfig.authAlgo;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800b5ae:	72bb      	strb	r3, [r7, #10]

         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_AUTH_PROTOCOL, &value, 3);
 800b5b0:	f107 0208 	add.w	r2, r7, #8
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	2103      	movs	r1, #3
 800b5b8:	6a38      	ldr	r0, [r7, #32]
 800b5ba:	f002 fc4b 	bl	800de54 <pppAddOption>
      }
   }

   //Make sure the Protocol-Field-Compression option has not been
   //previously rejected
   if(!context->localConfig.pfcRejected)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10a      	bne.n	800b5de <lcpSendConfigureReq+0x13e>
   {
      //Check whether compression of the Protocol field is supported
      if(context->localConfig.pfc)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d005      	beq.n	800b5de <lcpSendConfigureReq+0x13e>
      {
         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_PFC, NULL, 0);
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2107      	movs	r1, #7
 800b5d8:	6a38      	ldr	r0, [r7, #32]
 800b5da:	f002 fc3b 	bl	800de54 <pppAddOption>
      }
   }

   //Make sure the Address-and-Control-Field-Compression option has not been
   //previously rejected
   if(!context->localConfig.acfcRejected)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <lcpSendConfigureReq+0x15e>
   {
      //Check whether compression of the Address and Control fields is supported
      if(context->localConfig.acfc)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d005      	beq.n	800b5fe <lcpSendConfigureReq+0x15e>
      {
         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_ACFC, NULL, 0);
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2108      	movs	r1, #8
 800b5f8:	6a38      	ldr	r0, [r7, #32]
 800b5fa:	f002 fc2b 	bl	800de54 <pppAddOption>
      }
   }

   //Save packet length
   length = configureReqPacket->length;
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	885b      	ldrh	r3, [r3, #2]
 800b602:	b29b      	uxth	r3, r3
 800b604:	61fb      	str	r3, [r7, #28]
   //Convert length field to network byte order
   configureReqPacket->length = htons(length);
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f4 ffc8 	bl	80005a0 <swapInt16>
 800b610:	4603      	mov	r3, r0
 800b612:	461a      	mov	r2, r3
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	805a      	strh	r2, [r3, #2]

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	4413      	add	r3, r2
 800b61e:	4619      	mov	r1, r3
 800b620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b622:	f7f6 ff5b 	bl	80024dc <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending Configure-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800b626:	f7f5 f80b 	bl	8000640 <osSuspendAllTasks>
 800b62a:	4b17      	ldr	r3, [pc, #92]	; (800b688 <lcpSendConfigureReq+0x1e8>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	69fa      	ldr	r2, [r7, #28]
 800b632:	4917      	ldr	r1, [pc, #92]	; (800b690 <lcpSendConfigureReq+0x1f0>)
 800b634:	4618      	mov	r0, r3
 800b636:	f00e fc2b 	bl	8019e90 <fiprintf>
 800b63a:	f7f5 f80c 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) configureReqPacket, length, PPP_PROTOCOL_LCP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_LCP);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6998      	ldr	r0, [r3, #24]
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	f24c 0321 	movw	r3, #49185	; 0xc021
 800b648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b64a:	f001 f819 	bl	800c680 <pppSendFrame>
 800b64e:	4603      	mov	r3, r0
 800b650:	837b      	strh	r3, [r7, #26]

   //The restart counter is decremented each time a Configure-Request is sent
   if(context->lcpFsm.restartCounter > 0)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d006      	beq.n	800b66a <lcpSendConfigureReq+0x1ca>
      context->lcpFsm.restartCounter--;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b662:	1e5a      	subs	r2, r3, #1
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   //Save the time at which the packet was sent
   context->lcpFsm.timestamp = osGetSystemTime();
 800b66a:	f7f5 f8b1 	bl	80007d0 <osGetSystemTime>
 800b66e:	4602      	mov	r2, r0
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Free previously allocated memory block
   netBufferFree(buffer);
 800b676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b678:	f7f6 feff 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800b67c:	8b7b      	ldrh	r3, [r7, #26]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3728      	adds	r7, #40	; 0x28
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20000058 	.word	0x20000058
 800b68c:	0801bd4c 	.word	0x0801bd4c
 800b690:	0801bd74 	.word	0x0801bd74

0800b694 <lcpSendConfigureAck>:
 * @return Error code
 **/

error_t lcpSendConfigureAck(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Configure-Ack callback\r\n");
 800b69e:	f7f4 ffcf 	bl	8000640 <osSuspendAllTasks>
 800b6a2:	4b0b      	ldr	r3, [pc, #44]	; (800b6d0 <lcpSendConfigureAck+0x3c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	2221      	movs	r2, #33	; 0x21
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	4809      	ldr	r0, [pc, #36]	; (800b6d4 <lcpSendConfigureAck+0x40>)
 800b6ae:	f00e fc4f 	bl	8019f50 <fwrite>
 800b6b2:	f7f4 ffd0 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Ack packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	f24c 0221 	movw	r2, #49185	; 0xc021
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f002 f910 	bl	800d8e4 <pppSendConfigureAckNak>
 800b6c4:	4603      	mov	r3, r0
      PPP_PROTOCOL_LCP, PPP_CODE_CONFIGURE_ACK);
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20000058 	.word	0x20000058
 800b6d4:	0801bda8 	.word	0x0801bda8

0800b6d8 <lcpSendConfigureNak>:
 * @return Error code
 **/

error_t lcpSendConfigureNak(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Configure-Nak callback\r\n");
 800b6e2:	f7f4 ffad 	bl	8000640 <osSuspendAllTasks>
 800b6e6:	4b0b      	ldr	r3, [pc, #44]	; (800b714 <lcpSendConfigureNak+0x3c>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	2221      	movs	r2, #33	; 0x21
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	4809      	ldr	r0, [pc, #36]	; (800b718 <lcpSendConfigureNak+0x40>)
 800b6f2:	f00e fc2d 	bl	8019f50 <fwrite>
 800b6f6:	f7f4 ffae 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Nak packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	f24c 0221 	movw	r2, #49185	; 0xc021
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f002 f8ee 	bl	800d8e4 <pppSendConfigureAckNak>
 800b708:	4603      	mov	r3, r0
      PPP_PROTOCOL_LCP, PPP_CODE_CONFIGURE_NAK);
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	20000058 	.word	0x20000058
 800b718:	0801bdcc 	.word	0x0801bdcc

0800b71c <lcpSendConfigureRej>:
 * @return Error code
 **/

error_t lcpSendConfigureRej(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Configure-Reject callback\r\n");
 800b726:	f7f4 ff8b 	bl	8000640 <osSuspendAllTasks>
 800b72a:	4b0b      	ldr	r3, [pc, #44]	; (800b758 <lcpSendConfigureRej+0x3c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	2224      	movs	r2, #36	; 0x24
 800b732:	2101      	movs	r1, #1
 800b734:	4809      	ldr	r0, [pc, #36]	; (800b75c <lcpSendConfigureRej+0x40>)
 800b736:	f00e fc0b 	bl	8019f50 <fwrite>
 800b73a:	f7f4 ff8c 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Reject packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800b73e:	2304      	movs	r3, #4
 800b740:	f24c 0221 	movw	r2, #49185	; 0xc021
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f002 f8cc 	bl	800d8e4 <pppSendConfigureAckNak>
 800b74c:	4603      	mov	r3, r0
      PPP_PROTOCOL_LCP, PPP_CODE_CONFIGURE_REJ);
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20000058 	.word	0x20000058
 800b75c:	0801bdf0 	.word	0x0801bdf0

0800b760 <lcpSendTerminateReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpSendTerminateReq(PppContext *context)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
   error_t error;

   //Debug message
   TRACE_INFO("LCP Send-Terminate-Request callback\r\n");
 800b768:	f7f4 ff6a 	bl	8000640 <osSuspendAllTasks>
 800b76c:	4b19      	ldr	r3, [pc, #100]	; (800b7d4 <lcpSendTerminateReq+0x74>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	2225      	movs	r2, #37	; 0x25
 800b774:	2101      	movs	r1, #1
 800b776:	4818      	ldr	r0, [pc, #96]	; (800b7d8 <lcpSendTerminateReq+0x78>)
 800b778:	f00e fbea 	bl	8019f50 <fwrite>
 800b77c:	f7f4 ff6b 	bl	8000656 <osResumeAllTasks>

   //On transmission, the Identifier field must be changed
   context->lcpFsm.identifier++;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b786:	3301      	adds	r3, #1
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

   //Send Terminate-Request packet
   error = pppSendTerminateReq(context, context->lcpFsm.identifier, PPP_PROTOCOL_LCP);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b796:	f24c 0221 	movw	r2, #49185	; 0xc021
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f002 f975 	bl	800da8c <pppSendTerminateReq>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	81fb      	strh	r3, [r7, #14]

   //The restart counter is decremented each time a Terminate-Request is sent
   if(context->lcpFsm.restartCounter > 0)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d006      	beq.n	800b7be <lcpSendTerminateReq+0x5e>
      context->lcpFsm.restartCounter--;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7b6:	1e5a      	subs	r2, r3, #1
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   //Save the time at which the packet was sent
   context->lcpFsm.timestamp = osGetSystemTime();
 800b7be:	f7f5 f807 	bl	80007d0 <osGetSystemTime>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Return status code
   return error;
 800b7ca:	89fb      	ldrh	r3, [r7, #14]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	20000058 	.word	0x20000058
 800b7d8:	0801be18 	.word	0x0801be18

0800b7dc <lcpSendTerminateAck>:
 * @return Error code
 **/

error_t lcpSendTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
   uint8_t identifier;

   //Debug message
   TRACE_INFO("LCP Send-Terminate-Ack callback\r\n");
 800b7e6:	f7f4 ff2b 	bl	8000640 <osSuspendAllTasks>
 800b7ea:	4b14      	ldr	r3, [pc, #80]	; (800b83c <lcpSendTerminateAck+0x60>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	2221      	movs	r2, #33	; 0x21
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	4812      	ldr	r0, [pc, #72]	; (800b840 <lcpSendTerminateAck+0x64>)
 800b7f6:	f00e fbab 	bl	8019f50 <fwrite>
 800b7fa:	f7f4 ff2c 	bl	8000656 <osResumeAllTasks>

   //Check whether this Terminate-Ack acknowledges the reception of a
   //Terminate-Request packet
   if(terminateReqPacket != NULL)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d003      	beq.n	800b80c <lcpSendTerminateAck+0x30>
   {
      //The Identifier field of the Terminate-Request is copied into the
      //Identifier field of the Terminate-Ack packet
      identifier = terminateReqPacket->identifier;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	785b      	ldrb	r3, [r3, #1]
 800b808:	73fb      	strb	r3, [r7, #15]
 800b80a:	e00b      	b.n	800b824 <lcpSendTerminateAck+0x48>
   }
   else
   {
      //This Terminate-Ack packet serves to synchronize the automatons
      identifier = ++context->lcpFsm.identifier;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b812:	3301      	adds	r3, #1
 800b814:	b2da      	uxtb	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b822:	73fb      	strb	r3, [r7, #15]
   }

   //Send Terminate-Ack packet
   return pppSendTerminateAck(context, identifier, PPP_PROTOCOL_LCP);
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	f24c 0221 	movw	r2, #49185	; 0xc021
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f002 f979 	bl	800db24 <pppSendTerminateAck>
 800b832:	4603      	mov	r3, r0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20000058 	.word	0x20000058
 800b840:	0801be40 	.word	0x0801be40

0800b844 <lcpSendCodeRej>:
 * @param[in] packet Un-interpretable packet received from the peer
 * @return Error code
 **/

error_t lcpSendCodeRej(PppContext *context, const PppPacket *packet)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Code-Reject callback\r\n");
 800b84e:	f7f4 fef7 	bl	8000640 <osSuspendAllTasks>
 800b852:	4b10      	ldr	r3, [pc, #64]	; (800b894 <lcpSendCodeRej+0x50>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	221f      	movs	r2, #31
 800b85a:	2101      	movs	r1, #1
 800b85c:	480e      	ldr	r0, [pc, #56]	; (800b898 <lcpSendCodeRej+0x54>)
 800b85e:	f00e fb77 	bl	8019f50 <fwrite>
 800b862:	f7f4 fef8 	bl	8000656 <osResumeAllTasks>

   //The Identifier field must be changed for each Code-Reject sent
   context->lcpFsm.identifier++;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b86c:	3301      	adds	r3, #1
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

   //Send Code-Reject packet
   return pppSendCodeRej(context, packet, context->lcpFsm.identifier, PPP_PROTOCOL_LCP);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800b87c:	f24c 0321 	movw	r3, #49185	; 0xc021
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f002 f99a 	bl	800dbbc <pppSendCodeRej>
 800b888:	4603      	mov	r3, r0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	20000058 	.word	0x20000058
 800b898:	0801be64 	.word	0x0801be64

0800b89c <lcpSendEchoRep>:
 * @param[in] echoReqPacket Echo-Request packet received from the peer
 * @return Error code
 **/

error_t lcpSendEchoRep(PppContext *context, const PppEchoPacket *echoReqPacket)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Echo-Reply callback\r\n");
 800b8a6:	f7f4 fecb 	bl	8000640 <osSuspendAllTasks>
 800b8aa:	4b0a      	ldr	r3, [pc, #40]	; (800b8d4 <lcpSendEchoRep+0x38>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	221e      	movs	r2, #30
 800b8b2:	2101      	movs	r1, #1
 800b8b4:	4808      	ldr	r0, [pc, #32]	; (800b8d8 <lcpSendEchoRep+0x3c>)
 800b8b6:	f00e fb4b 	bl	8019f50 <fwrite>
 800b8ba:	f7f4 fecc 	bl	8000656 <osResumeAllTasks>

   //Send Echo-Reply packet
   return pppSendEchoRep(context, echoReqPacket, PPP_PROTOCOL_LCP);
 800b8be:	f24c 0221 	movw	r2, #49185	; 0xc021
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f002 fa51 	bl	800dd6c <pppSendEchoRep>
 800b8ca:	4603      	mov	r3, r0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	20000058 	.word	0x20000058
 800b8d8:	0801be84 	.word	0x0801be84

0800b8dc <lcpParseOption>:
 * @return Error code
 **/

error_t lcpParseOption(PppContext *context, PppOption *option,
   size_t inPacketLen, PppConfigurePacket *outPacket)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
   error_t error;

   //Malformed LCP packet?
   if(inPacketLen < sizeof(PppOption))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d801      	bhi.n	800b8f4 <lcpParseOption+0x18>
      return ERROR_INVALID_LENGTH;
 800b8f0:	23eb      	movs	r3, #235	; 0xeb
 800b8f2:	e06b      	b.n	800b9cc <lcpParseOption+0xf0>

   //Check option length
   if(option->length < sizeof(PppOption))
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	785b      	ldrb	r3, [r3, #1]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d801      	bhi.n	800b900 <lcpParseOption+0x24>
      return ERROR_INVALID_LENGTH;
 800b8fc:	23eb      	movs	r3, #235	; 0xeb
 800b8fe:	e065      	b.n	800b9cc <lcpParseOption+0xf0>
   if(option->length > inPacketLen)
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	785b      	ldrb	r3, [r3, #1]
 800b904:	461a      	mov	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4293      	cmp	r3, r2
 800b90a:	d201      	bcs.n	800b910 <lcpParseOption+0x34>
      return ERROR_INVALID_LENGTH;
 800b90c:	23eb      	movs	r3, #235	; 0xeb
 800b90e:	e05d      	b.n	800b9cc <lcpParseOption+0xf0>

   //Check option type
   switch(option->type)
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	3b01      	subs	r3, #1
 800b916:	2b07      	cmp	r3, #7
 800b918:	d842      	bhi.n	800b9a0 <lcpParseOption+0xc4>
 800b91a:	a201      	add	r2, pc, #4	; (adr r2, 800b920 <lcpParseOption+0x44>)
 800b91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b920:	0800b941 	.word	0x0800b941
 800b924:	0800b951 	.word	0x0800b951
 800b928:	0800b961 	.word	0x0800b961
 800b92c:	0800b9a1 	.word	0x0800b9a1
 800b930:	0800b971 	.word	0x0800b971
 800b934:	0800b9a1 	.word	0x0800b9a1
 800b938:	0800b981 	.word	0x0800b981
 800b93c:	0800b991 	.word	0x0800b991
   {
   case LCP_OPTION_MRU:
      //Check Maximum-Receive-Unit option
      error = lcpParseMruOption(context, (LcpMruOption *) option, outPacket);
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 f845 	bl	800b9d4 <lcpParseMruOption>
 800b94a:	4603      	mov	r3, r0
 800b94c:	82fb      	strh	r3, [r7, #22]
      break;
 800b94e:	e03c      	b.n	800b9ca <lcpParseOption+0xee>
   case LCP_OPTION_ACCM:
      //Check Async-Control-Character-Map option
      error = lcpParseAccmOption(context, (LcpAccmOption *) option, outPacket);
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	68b9      	ldr	r1, [r7, #8]
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 f88d 	bl	800ba74 <lcpParseAccmOption>
 800b95a:	4603      	mov	r3, r0
 800b95c:	82fb      	strh	r3, [r7, #22]
      break;
 800b95e:	e034      	b.n	800b9ca <lcpParseOption+0xee>
   case LCP_OPTION_AUTH_PROTOCOL:
      //Check Authentication-Protocol option
      error = lcpParseAuthProtocolOption(context, (LcpAuthProtocolOption *) option, outPacket);
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	68b9      	ldr	r1, [r7, #8]
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 f8b4 	bl	800bad2 <lcpParseAuthProtocolOption>
 800b96a:	4603      	mov	r3, r0
 800b96c:	82fb      	strh	r3, [r7, #22]
      break;
 800b96e:	e02c      	b.n	800b9ca <lcpParseOption+0xee>
   case LCP_OPTION_MAGIC_NUMBER:
      //Check Magic-Number option
      error = lcpParseMagicNumberOption(context, (LcpMagicNumberOption *) option, outPacket);
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 f992 	bl	800bc9e <lcpParseMagicNumberOption>
 800b97a:	4603      	mov	r3, r0
 800b97c:	82fb      	strh	r3, [r7, #22]
      break;
 800b97e:	e024      	b.n	800b9ca <lcpParseOption+0xee>
   case LCP_OPTION_PFC:
      //Check Protocol-Field-Compression option
      error = lcpParsePfcOption(context, (LcpPfcOption *) option, outPacket);
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 f9b9 	bl	800bcfc <lcpParsePfcOption>
 800b98a:	4603      	mov	r3, r0
 800b98c:	82fb      	strh	r3, [r7, #22]
      break;
 800b98e:	e01c      	b.n	800b9ca <lcpParseOption+0xee>
   case LCP_OPTION_ACFC:
      //Check Address-and-Control-Field-Compression option
      error = lcpParseAcfcOption(context, (LcpAcfcOption *) option, outPacket);
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	68b9      	ldr	r1, [r7, #8]
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f000 f9d6 	bl	800bd46 <lcpParseAcfcOption>
 800b99a:	4603      	mov	r3, r0
 800b99c:	82fb      	strh	r3, [r7, #22]
      break;
 800b99e:	e014      	b.n	800b9ca <lcpParseOption+0xee>
   default:
      //If some configuration options received in the Configure-Request are not
      //recognizable or not acceptable for negotiation, then the implementation
      //must transmit a Configure-Reject
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_REJ)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00e      	beq.n	800b9c4 <lcpParseOption+0xe8>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	d10a      	bne.n	800b9c4 <lcpParseOption+0xe8>
      {
         //The options field of the Configure-Reject packet is filled
         //with the unrecognized options from the Configure-Request
         pppAddOption(outPacket, option->type, option->data,
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	7819      	ldrb	r1, [r3, #0]
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, option->type, option->data,
 800b9ba:	3b02      	subs	r3, #2
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	6838      	ldr	r0, [r7, #0]
 800b9c0:	f002 fa48 	bl	800de54 <pppAddOption>
      }

      //The option is not acceptable for negotiation
      error = ERROR_INVALID_TYPE;
 800b9c4:	23ef      	movs	r3, #239	; 0xef
 800b9c6:	82fb      	strh	r3, [r7, #22]
      break;
 800b9c8:	bf00      	nop
   }

   //Return status code
   return error;
 800b9ca:	8afb      	ldrh	r3, [r7, #22]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3718      	adds	r7, #24
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <lcpParseMruOption>:
 * @return Error code
 **/

error_t lcpParseMruOption(PppContext *context,
   LcpMruOption *option, PppConfigurePacket *outPacket)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
   error_t error;
   uint16_t value;

   //Check length field
   if(option->length == sizeof(LcpMruOption))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	785b      	ldrb	r3, [r3, #1]
 800b9e4:	2b04      	cmp	r3, #4
 800b9e6:	d13e      	bne.n	800ba66 <lcpParseMruOption+0x92>
   {
      //Check whether the option value is acceptable
      if(ntohs(option->mru) >= PPP_MIN_MRU)
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	885b      	ldrh	r3, [r3, #2]
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f4 fdd6 	bl	80005a0 <swapInt16>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b1f      	cmp	r3, #31
 800b9f8:	d91e      	bls.n	800ba38 <lcpParseMruOption+0x64>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d018      	beq.n	800ba32 <lcpParseMruOption+0x5e>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	d114      	bne.n	800ba32 <lcpParseMruOption+0x5e>
         {
            //Save Maximum-Receive-Unit option
            context->peerConfig.mru = ntohl(option->mru);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	885b      	ldrh	r3, [r3, #2]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f4 fdd4 	bl	80005bc <swapInt32>
 800ba14:	4603      	mov	r3, r0
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, LCP_OPTION_MRU, (void *) &option->mru,
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	1c9a      	adds	r2, r3, #2
               option->length - sizeof(PppOption));
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, LCP_OPTION_MRU, (void *) &option->mru,
 800ba26:	3b02      	subs	r3, #2
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f002 fa11 	bl	800de54 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 800ba32:	2300      	movs	r3, #0
 800ba34:	82fb      	strh	r3, [r7, #22]
 800ba36:	e018      	b.n	800ba6a <lcpParseMruOption+0x96>
      }
      else
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d010      	beq.n	800ba60 <lcpParseMruOption+0x8c>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b03      	cmp	r3, #3
 800ba44:	d10c      	bne.n	800ba60 <lcpParseMruOption+0x8c>
         {
            //Use default value
            value = htons(PPP_DEFAULT_MRU);
 800ba46:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800ba4a:	f7f4 fda9 	bl	80005a0 <swapInt16>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	82bb      	strh	r3, [r7, #20]

            //The option must be modified to a value acceptable to the
            //Configure-Nak sender
            pppAddOption(outPacket, LCP_OPTION_MRU, &value, sizeof(uint16_t));
 800ba52:	f107 0214 	add.w	r2, r7, #20
 800ba56:	2302      	movs	r3, #2
 800ba58:	2101      	movs	r1, #1
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f002 f9fa 	bl	800de54 <pppAddOption>
         }

         //The value is not acceptable
         error = ERROR_INVALID_VALUE;
 800ba60:	23f0      	movs	r3, #240	; 0xf0
 800ba62:	82fb      	strh	r3, [r7, #22]
 800ba64:	e001      	b.n	800ba6a <lcpParseMruOption+0x96>
      }
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800ba66:	23eb      	movs	r3, #235	; 0xeb
 800ba68:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800ba6a:	8afb      	ldrh	r3, [r7, #22]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <lcpParseAccmOption>:
 * @return Error code
 **/

error_t lcpParseAccmOption(PppContext *context,
   LcpAccmOption *option, PppConfigurePacket *outPacket)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpAccmOption))
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	785b      	ldrb	r3, [r3, #1]
 800ba84:	2b06      	cmp	r3, #6
 800ba86:	d11d      	bne.n	800bac4 <lcpParseAccmOption+0x50>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d017      	beq.n	800babe <lcpParseAccmOption+0x4a>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d113      	bne.n	800babe <lcpParseAccmOption+0x4a>
      {
         //Save Async-Control-Character-Map option
         context->peerConfig.accm = ntohl(option->accm);
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7f4 fd8d 	bl	80005bc <swapInt32>
 800baa2:	4602      	mov	r2, r0
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_ACCM, (void *) &option->accm,
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, LCP_OPTION_ACCM, (void *) &option->accm,
 800bab2:	3b02      	subs	r3, #2
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2102      	movs	r1, #2
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f002 f9cb 	bl	800de54 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800babe:	2300      	movs	r3, #0
 800bac0:	82fb      	strh	r3, [r7, #22]
 800bac2:	e001      	b.n	800bac8 <lcpParseAccmOption+0x54>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800bac4:	23eb      	movs	r3, #235	; 0xeb
 800bac6:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800bac8:	8afb      	ldrh	r3, [r7, #22]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <lcpParseAuthProtocolOption>:
 * @return Error code
 **/

error_t lcpParseAuthProtocolOption(PppContext *context,
   LcpAuthProtocolOption *option, PppConfigurePacket *outPacket)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b086      	sub	sp, #24
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	607a      	str	r2, [r7, #4]
   error_t error;
   uint8_t value[3];

   //Assume an error condition...
   error = ERROR_INVALID_LENGTH;
 800bade:	23eb      	movs	r3, #235	; 0xeb
 800bae0:	82fb      	strh	r3, [r7, #22]

   //Check the length of the option
   if(option->length >= sizeof(LcpAuthProtocolOption))
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	785b      	ldrb	r3, [r3, #1]
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d924      	bls.n	800bb34 <lcpParseAuthProtocolOption+0x62>
   {
      //The Authentication-Protocol option for PAP must be exactly 4 bytes
      if(ntohs(option->protocol) == PPP_PROTOCOL_PAP)
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	885b      	ldrh	r3, [r3, #2]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7f4 fd55 	bl	80005a0 <swapInt16>
 800baf6:	4603      	mov	r3, r0
 800baf8:	461a      	mov	r2, r3
 800bafa:	f24c 0323 	movw	r3, #49187	; 0xc023
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d106      	bne.n	800bb10 <lcpParseAuthProtocolOption+0x3e>
      {
         if(option->length == 4)
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	785b      	ldrb	r3, [r3, #1]
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	d114      	bne.n	800bb34 <lcpParseAuthProtocolOption+0x62>
            error = NO_ERROR;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	82fb      	strh	r3, [r7, #22]
 800bb0e:	e011      	b.n	800bb34 <lcpParseAuthProtocolOption+0x62>
      }
      //The Authentication-Protocol option for CHAP must be exactly 5 bytes
      else if(ntohs(option->protocol) == PPP_PROTOCOL_CHAP)
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	885b      	ldrh	r3, [r3, #2]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7f4 fd42 	bl	80005a0 <swapInt16>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	461a      	mov	r2, r3
 800bb20:	f24c 2323 	movw	r3, #49699	; 0xc223
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d105      	bne.n	800bb34 <lcpParseAuthProtocolOption+0x62>
      {
         if(option->length == 5)
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	785b      	ldrb	r3, [r3, #1]
 800bb2c:	2b05      	cmp	r3, #5
 800bb2e:	d101      	bne.n	800bb34 <lcpParseAuthProtocolOption+0x62>
            error = NO_ERROR;
 800bb30:	2300      	movs	r3, #0
 800bb32:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Make sure the length field is valid
   if(!error)
 800bb34:	8afb      	ldrh	r3, [r7, #22]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f040 80ac 	bne.w	800bc94 <lcpParseAuthProtocolOption+0x1c2>
   {
      //PAP authentication protocol?
      if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP &&
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d025      	beq.n	800bb94 <lcpParseAuthProtocolOption+0xc2>
         ntohs(option->protocol) == PPP_PROTOCOL_PAP)
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	885b      	ldrh	r3, [r3, #2]
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7f4 fd26 	bl	80005a0 <swapInt16>
 800bb54:	4603      	mov	r3, r0
 800bb56:	461a      	mov	r2, r3
      if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP &&
 800bb58:	f24c 0323 	movw	r3, #49187	; 0xc023
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d119      	bne.n	800bb94 <lcpParseAuthProtocolOption+0xc2>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d013      	beq.n	800bb8e <lcpParseAuthProtocolOption+0xbc>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d10f      	bne.n	800bb8e <lcpParseAuthProtocolOption+0xbc>
         {
            //Save the authentication protocol to be used
            context->peerConfig.authProtocol = PPP_PROTOCOL_PAP;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f24c 0223 	movw	r2, #49187	; 0xc023
 800bb74:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	7819      	ldrb	r1, [r3, #0]
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	1c9a      	adds	r2, r3, #2
               option->length - sizeof(PppOption));
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800bb84:	3b02      	subs	r3, #2
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f002 f963 	bl	800de54 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	82fb      	strh	r3, [r7, #22]
 800bb92:	e07f      	b.n	800bc94 <lcpParseAuthProtocolOption+0x1c2>
      }
      //CHAP with MD5 authentication protocol?
      else if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5 &&
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f003 0302 	and.w	r3, r3, #2
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d02d      	beq.n	800bbfc <lcpParseAuthProtocolOption+0x12a>
         ntohs(option->protocol) == PPP_PROTOCOL_CHAP &&
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	885b      	ldrh	r3, [r3, #2]
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7f4 fcfa 	bl	80005a0 <swapInt16>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
      else if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5 &&
 800bbb0:	f24c 2323 	movw	r3, #49699	; 0xc223
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d121      	bne.n	800bbfc <lcpParseAuthProtocolOption+0x12a>
         option->data[0] == CHAP_ALGO_ID_CHAP_MD5)
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	791b      	ldrb	r3, [r3, #4]
         ntohs(option->protocol) == PPP_PROTOCOL_CHAP &&
 800bbbc:	2b05      	cmp	r3, #5
 800bbbe:	d11d      	bne.n	800bbfc <lcpParseAuthProtocolOption+0x12a>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d017      	beq.n	800bbf6 <lcpParseAuthProtocolOption+0x124>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d113      	bne.n	800bbf6 <lcpParseAuthProtocolOption+0x124>
         {
            //Save the authentication protocol to be used
            context->peerConfig.authProtocol = PPP_PROTOCOL_CHAP;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f24c 2223 	movw	r2, #49699	; 0xc223
 800bbd4:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
            context->peerConfig.authAlgo = CHAP_ALGO_ID_CHAP_MD5;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2205      	movs	r2, #5
 800bbdc:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	7819      	ldrb	r1, [r3, #0]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	1c9a      	adds	r2, r3, #2
               option->length - sizeof(PppOption));
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800bbec:	3b02      	subs	r3, #2
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f002 f92f 	bl	800de54 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	82fb      	strh	r3, [r7, #22]
 800bbfa:	e04b      	b.n	800bc94 <lcpParseAuthProtocolOption+0x1c2>
      }
      else
      {
         //PAP authentication protocol allowed?
         if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	f003 0301 	and.w	r3, r3, #1
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d014      	beq.n	800bc32 <lcpParseAuthProtocolOption+0x160>
         {
            //If all configuration options are recognizable, but some values are not
            //acceptable, then the implementation must transmit a Configure-Nak
            if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00e      	beq.n	800bc2c <lcpParseAuthProtocolOption+0x15a>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	d10a      	bne.n	800bc2c <lcpParseAuthProtocolOption+0x15a>
            {
               //Format Authentication-Protocol option
               value[0] = MSB(PPP_PROTOCOL_PAP);
 800bc16:	23c0      	movs	r3, #192	; 0xc0
 800bc18:	743b      	strb	r3, [r7, #16]
               value[1] = LSB(PPP_PROTOCOL_PAP);
 800bc1a:	2323      	movs	r3, #35	; 0x23
 800bc1c:	747b      	strb	r3, [r7, #17]

               //The option must be modified to a value acceptable to the
               //Configure-Nak sender
               pppAddOption(outPacket, LCP_OPTION_AUTH_PROTOCOL, value, 2);
 800bc1e:	f107 0210 	add.w	r2, r7, #16
 800bc22:	2302      	movs	r3, #2
 800bc24:	2103      	movs	r1, #3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f002 f914 	bl	800de54 <pppAddOption>
            }

            //The value is not acceptable
            error = ERROR_INVALID_VALUE;
 800bc2c:	23f0      	movs	r3, #240	; 0xf0
 800bc2e:	82fb      	strh	r3, [r7, #22]
 800bc30:	e030      	b.n	800bc94 <lcpParseAuthProtocolOption+0x1c2>
         }
         //CHAP with MD5 authentication protocol allowed?
         else if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d016      	beq.n	800bc6c <lcpParseAuthProtocolOption+0x19a>
         {
            //If all configuration options are recognizable, but some values are not
            //acceptable, then the implementation must transmit a Configure-Nak
            if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d010      	beq.n	800bc66 <lcpParseAuthProtocolOption+0x194>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d10c      	bne.n	800bc66 <lcpParseAuthProtocolOption+0x194>
            {
               //Format Authentication-Protocol option
               value[0] = MSB(PPP_PROTOCOL_CHAP);
 800bc4c:	23c2      	movs	r3, #194	; 0xc2
 800bc4e:	743b      	strb	r3, [r7, #16]
               value[1] = LSB(PPP_PROTOCOL_CHAP);
 800bc50:	2323      	movs	r3, #35	; 0x23
 800bc52:	747b      	strb	r3, [r7, #17]
               value[2] = CHAP_ALGO_ID_CHAP_MD5;
 800bc54:	2305      	movs	r3, #5
 800bc56:	74bb      	strb	r3, [r7, #18]

               //The option must be modified to a value acceptable to the
               //Configure-Nak sender
               pppAddOption(outPacket, LCP_OPTION_AUTH_PROTOCOL, value, 3);
 800bc58:	f107 0210 	add.w	r2, r7, #16
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	2103      	movs	r1, #3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f002 f8f7 	bl	800de54 <pppAddOption>
            }

            //The value is not acceptable
            error = ERROR_INVALID_VALUE;
 800bc66:	23f0      	movs	r3, #240	; 0xf0
 800bc68:	82fb      	strh	r3, [r7, #22]
 800bc6a:	e013      	b.n	800bc94 <lcpParseAuthProtocolOption+0x1c2>
         else
         {
            //If some configuration options received in the Configure-Request are not
            //recognizable or not acceptable for negotiation, then the implementation
            //must transmit a Configure-Reject
            if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_REJ)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00e      	beq.n	800bc90 <lcpParseAuthProtocolOption+0x1be>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	2b04      	cmp	r3, #4
 800bc78:	d10a      	bne.n	800bc90 <lcpParseAuthProtocolOption+0x1be>
            {
               //The options field of the Configure-Reject packet is filled
               //with the unrecognized options from the Configure-Request
               pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	7819      	ldrb	r1, [r3, #0]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	1c9a      	adds	r2, r3, #2
                  option->length - sizeof(PppOption));
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	785b      	ldrb	r3, [r3, #1]
               pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800bc86:	3b02      	subs	r3, #2
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f002 f8e2 	bl	800de54 <pppAddOption>
            }

            //The option is not acceptable for negotiation
            error = ERROR_INVALID_TYPE;
 800bc90:	23ef      	movs	r3, #239	; 0xef
 800bc92:	82fb      	strh	r3, [r7, #22]
         }
      }
   }

   //Return status code
   return error;
 800bc94:	8afb      	ldrh	r3, [r7, #22]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <lcpParseMagicNumberOption>:
 * @return Error code
 **/

error_t lcpParseMagicNumberOption(PppContext *context,
   LcpMagicNumberOption *option, PppConfigurePacket *outPacket)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b086      	sub	sp, #24
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	60f8      	str	r0, [r7, #12]
 800bca6:	60b9      	str	r1, [r7, #8]
 800bca8:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpMagicNumberOption))
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	785b      	ldrb	r3, [r3, #1]
 800bcae:	2b06      	cmp	r3, #6
 800bcb0:	d11d      	bne.n	800bcee <lcpParseMagicNumberOption+0x50>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d017      	beq.n	800bce8 <lcpParseMagicNumberOption+0x4a>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d113      	bne.n	800bce8 <lcpParseMagicNumberOption+0x4a>
      {
         //Save Magic-Number option
         context->peerConfig.magicNumber = ntohl(option->magicNumber);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7f4 fc78 	bl	80005bc <swapInt32>
 800bccc:	4602      	mov	r2, r0
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_MAGIC_NUMBER, (void *) &option->magicNumber,
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, LCP_OPTION_MAGIC_NUMBER, (void *) &option->magicNumber,
 800bcdc:	3b02      	subs	r3, #2
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2105      	movs	r1, #5
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f002 f8b6 	bl	800de54 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800bce8:	2300      	movs	r3, #0
 800bcea:	82fb      	strh	r3, [r7, #22]
 800bcec:	e001      	b.n	800bcf2 <lcpParseMagicNumberOption+0x54>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800bcee:	23eb      	movs	r3, #235	; 0xeb
 800bcf0:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800bcf2:	8afb      	ldrh	r3, [r7, #22]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3718      	adds	r7, #24
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <lcpParsePfcOption>:
 * @return Error code
 **/

error_t lcpParsePfcOption(PppContext *context,
   LcpPfcOption *option, PppConfigurePacket *outPacket)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpPfcOption))
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	785b      	ldrb	r3, [r3, #1]
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d113      	bne.n	800bd38 <lcpParsePfcOption+0x3c>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00d      	beq.n	800bd32 <lcpParsePfcOption+0x36>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d109      	bne.n	800bd32 <lcpParsePfcOption+0x36>
      {
         //Save Protocol-Field-Compression option
         context->peerConfig.pfc = TRUE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_PFC, NULL, 0);
 800bd26:	2300      	movs	r3, #0
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2107      	movs	r1, #7
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f002 f891 	bl	800de54 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800bd32:	2300      	movs	r3, #0
 800bd34:	82fb      	strh	r3, [r7, #22]
 800bd36:	e001      	b.n	800bd3c <lcpParsePfcOption+0x40>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800bd38:	23eb      	movs	r3, #235	; 0xeb
 800bd3a:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800bd3c:	8afb      	ldrh	r3, [r7, #22]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3718      	adds	r7, #24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <lcpParseAcfcOption>:
 * @return Error code
 **/

error_t lcpParseAcfcOption(PppContext *context,
   LcpAcfcOption *option, PppConfigurePacket *outPacket)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b086      	sub	sp, #24
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	60f8      	str	r0, [r7, #12]
 800bd4e:	60b9      	str	r1, [r7, #8]
 800bd50:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpAcfcOption))
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	785b      	ldrb	r3, [r3, #1]
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d113      	bne.n	800bd82 <lcpParseAcfcOption+0x3c>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00d      	beq.n	800bd7c <lcpParseAcfcOption+0x36>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d109      	bne.n	800bd7c <lcpParseAcfcOption+0x36>
      {
         //Save Address-and-Control-Field-Compression option
         context->peerConfig.acfc = TRUE;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_ACFC, NULL, 0);
 800bd70:	2300      	movs	r3, #0
 800bd72:	2200      	movs	r2, #0
 800bd74:	2108      	movs	r1, #8
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f002 f86c 	bl	800de54 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	82fb      	strh	r3, [r7, #22]
 800bd80:	e001      	b.n	800bd86 <lcpParseAcfcOption+0x40>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800bd82:	23eb      	movs	r3, #235	; 0xeb
 800bd84:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800bd86:	8afb      	ldrh	r3, [r7, #22]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <papStartAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t papStartAuth(PppContext *context)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nStarting PAP authentication...\r\n");
 800bd98:	f7f4 fc52 	bl	8000640 <osSuspendAllTasks>
 800bd9c:	4b15      	ldr	r3, [pc, #84]	; (800bdf4 <papStartAuth+0x64>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	2222      	movs	r2, #34	; 0x22
 800bda4:	2101      	movs	r1, #1
 800bda6:	4814      	ldr	r0, [pc, #80]	; (800bdf8 <papStartAuth+0x68>)
 800bda8:	f00e f8d2 	bl	8019f50 <fwrite>
 800bdac:	f7f4 fc53 	bl	8000656 <osResumeAllTasks>

   //Check whether the other end of the PPP link is being authenticated
   if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800bdb6:	f24c 0223 	movw	r2, #49187	; 0xc023
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d103      	bne.n	800bdc6 <papStartAuth+0x36>
   {
      //Switch to the Started state
      context->papFsm.localState = PAP_STATE_1_STARTED;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   }

   //Check whether the other end of the PPP link is the authenticator
   if(context->peerConfig.authProtocol == PPP_PROTOCOL_PAP)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800bdcc:	f24c 0223 	movw	r2, #49187	; 0xc023
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d10a      	bne.n	800bdea <papStartAuth+0x5a>
   {
      //Initialize restart counter
      context->papFsm.restartCounter = PAP_MAX_REQUESTS;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2205      	movs	r2, #5
 800bdd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      //Send Authenticate-Request packet
      papSendAuthReq(context);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f9ff 	bl	800c1e0 <papSendAuthReq>
      //Switch to the Req-Sent state
      context->papFsm.peerState = PAP_STATE_2_REQ_SENT;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2202      	movs	r2, #2
 800bde6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   }

   //Successful processing
   return NO_ERROR;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20000058 	.word	0x20000058
 800bdf8:	0801bea4 	.word	0x0801bea4

0800bdfc <papAbortAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t papAbortAuth(PppContext *context)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nAborting PAP authentication...\r\n");
 800be04:	f7f4 fc1c 	bl	8000640 <osSuspendAllTasks>
 800be08:	4b0b      	ldr	r3, [pc, #44]	; (800be38 <papAbortAuth+0x3c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	2222      	movs	r2, #34	; 0x22
 800be10:	2101      	movs	r1, #1
 800be12:	480a      	ldr	r0, [pc, #40]	; (800be3c <papAbortAuth+0x40>)
 800be14:	f00e f89c 	bl	8019f50 <fwrite>
 800be18:	f7f4 fc1d 	bl	8000656 <osResumeAllTasks>

   //Abort PAP authentication process
   context->papFsm.localState = PAP_STATE_0_INITIAL;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

   //Successful processing
   return NO_ERROR;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20000058 	.word	0x20000058
 800be3c:	0801bec8 	.word	0x0801bec8

0800be40 <papTick>:
 *
 * @param[in] context PPP context
 **/

void papTick(PppContext *context)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->papFsm.peerState == PAP_STATE_2_REQ_SENT)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d127      	bne.n	800bea2 <papTick+0x62>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 800be52:	f7f4 fcbd 	bl	80007d0 <osGetSystemTime>
 800be56:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->papFsm.timestamp) >= PAP_RESTART_TIMER)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800be66:	4293      	cmp	r3, r2
 800be68:	d91b      	bls.n	800bea2 <papTick+0x62>
      {
         //Debug message
         TRACE_INFO("\r\nPAP Timeout event\r\n");
 800be6a:	f7f4 fbe9 	bl	8000640 <osSuspendAllTasks>
 800be6e:	4b0f      	ldr	r3, [pc, #60]	; (800beac <papTick+0x6c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	2215      	movs	r2, #21
 800be76:	2101      	movs	r1, #1
 800be78:	480d      	ldr	r0, [pc, #52]	; (800beb0 <papTick+0x70>)
 800be7a:	f00e f869 	bl	8019f50 <fwrite>
 800be7e:	f7f4 fbea 	bl	8000656 <osResumeAllTasks>

         //Check whether the restart counter is greater than zero
         if(context->papFsm.restartCounter > 0)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d003      	beq.n	800be94 <papTick+0x54>
         {
            //Retransmit the Authenticate-Request packet
            papSendAuthReq(context);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 f9a7 	bl	800c1e0 <papSendAuthReq>
            //Authentication failed
            lcpClose(context);
         }
      }
   }
}
 800be92:	e006      	b.n	800bea2 <papTick+0x62>
            context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
            lcpClose(context);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7fe fd0d 	bl	800a8bc <lcpClose>
}
 800bea2:	bf00      	nop
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	20000058 	.word	0x20000058
 800beb0:	0801beec 	.word	0x0801beec

0800beb4 <papProcessPacket>:
 * @param[in] length Length of the packet, in bytes
 **/

void papProcessPacket(PppContext *context,
   const PppPacket *packet, size_t length)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming PAP packet is valid
   if(length < sizeof(PppPacket))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d94c      	bls.n	800bf60 <papProcessPacket+0xac>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	885b      	ldrh	r3, [r3, #2]
 800beca:	b29b      	uxth	r3, r3
 800becc:	4618      	mov	r0, r3
 800bece:	f7f4 fb67 	bl	80005a0 <swapInt16>
 800bed2:	4603      	mov	r3, r0
 800bed4:	461a      	mov	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4293      	cmp	r3, r2
 800beda:	d343      	bcc.n	800bf64 <papProcessPacket+0xb0>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	885b      	ldrh	r3, [r3, #2]
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7f4 fb5c 	bl	80005a0 <swapInt16>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b03      	cmp	r3, #3
 800beec:	d93c      	bls.n	800bf68 <papProcessPacket+0xb4>
      return;

   //Save the length of the PAP packet
   length = ntohs(packet->length);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	885b      	ldrh	r3, [r3, #2]
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7f4 fb53 	bl	80005a0 <swapInt16>
 800befa:	4603      	mov	r3, r0
 800befc:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("PAP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 800befe:	f7f4 fb9f 	bl	8000640 <osSuspendAllTasks>
 800bf02:	4b1c      	ldr	r3, [pc, #112]	; (800bf74 <papProcessPacket+0xc0>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	491b      	ldr	r1, [pc, #108]	; (800bf78 <papProcessPacket+0xc4>)
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f00d ffbf 	bl	8019e90 <fiprintf>
 800bf12:	f7f4 fba0 	bl	8000656 <osResumeAllTasks>
   pppDumpPacket(packet, length, PPP_PROTOCOL_PAP);

   //Because the Authenticate-Ack might be lost, the authenticator must
   //allow repeated Authenticate-Request packets after completing the
   //Authentication phase
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d004      	beq.n	800bf2a <papProcessPacket+0x76>
      context->pppPhase != PPP_PHASE_NETWORK)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d120      	bne.n	800bf6c <papProcessPacket+0xb8>
      //Any packets received during any other phase must be silently discarded
      return;
   }

   //Check PAP code field
   switch(packet->code)
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d00a      	beq.n	800bf48 <papProcessPacket+0x94>
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d00e      	beq.n	800bf54 <papProcessPacket+0xa0>
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d000      	beq.n	800bf3c <papProcessPacket+0x88>
      papProcessAuthNak(context, (PapAuthNakPacket *) packet, length);
      break;
   //Unknown code field
   default:
      //Silently drop the incoming packet
      break;
 800bf3a:	e018      	b.n	800bf6e <papProcessPacket+0xba>
      papProcessAuthReq(context, (PapAuthReqPacket *) packet, length);
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	68b9      	ldr	r1, [r7, #8]
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f000 f81b 	bl	800bf7c <papProcessAuthReq>
      break;
 800bf46:	e012      	b.n	800bf6e <papProcessPacket+0xba>
      papProcessAuthAck(context, (PapAuthAckPacket *) packet, length);
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 f8bd 	bl	800c0cc <papProcessAuthAck>
      break;
 800bf52:	e00c      	b.n	800bf6e <papProcessPacket+0xba>
      papProcessAuthNak(context, (PapAuthNakPacket *) packet, length);
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	68b9      	ldr	r1, [r7, #8]
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f000 f907 	bl	800c16c <papProcessAuthNak>
      break;
 800bf5e:	e006      	b.n	800bf6e <papProcessPacket+0xba>
      return;
 800bf60:	bf00      	nop
 800bf62:	e004      	b.n	800bf6e <papProcessPacket+0xba>
      return;
 800bf64:	bf00      	nop
 800bf66:	e002      	b.n	800bf6e <papProcessPacket+0xba>
      return;
 800bf68:	bf00      	nop
 800bf6a:	e000      	b.n	800bf6e <papProcessPacket+0xba>
      return;
 800bf6c:	bf00      	nop
   }
}
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	20000058 	.word	0x20000058
 800bf78:	0801bf04 	.word	0x0801bf04

0800bf7c <papProcessAuthReq>:
 * @return Error code
 **/

error_t papProcessAuthReq(PppContext *context,
   const PapAuthReqPacket *authReqPacket, size_t length)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
   bool_t status;
   size_t usernameLen;
   const uint8_t *p;

   //Debug message
   TRACE_INFO("\r\nPAP Authenticate-Request packet received\r\n");
 800bf88:	f7f4 fb5a 	bl	8000640 <osSuspendAllTasks>
 800bf8c:	4b4d      	ldr	r3, [pc, #308]	; (800c0c4 <papProcessAuthReq+0x148>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	222c      	movs	r2, #44	; 0x2c
 800bf94:	2101      	movs	r1, #1
 800bf96:	484c      	ldr	r0, [pc, #304]	; (800c0c8 <papProcessAuthReq+0x14c>)
 800bf98:	f00d ffda 	bl	8019f50 <fwrite>
 800bf9c:	f7f4 fb5b 	bl	8000656 <osResumeAllTasks>

   //Make sure the Authenticate-Request packet is acceptable
   if(context->localConfig.authProtocol != PPP_PROTOCOL_PAP)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800bfa6:	f24c 0223 	movw	r2, #49187	; 0xc023
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d001      	beq.n	800bfb2 <papProcessAuthReq+0x36>
      return ERROR_FAILURE;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e083      	b.n	800c0ba <papProcessAuthReq+0x13e>

   //Check the length of the packet
   if(length < sizeof(PapAuthReqPacket))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	d801      	bhi.n	800bfbc <papProcessAuthReq+0x40>
      return ERROR_INVALID_LENGTH;
 800bfb8:	23eb      	movs	r3, #235	; 0xeb
 800bfba:	e07e      	b.n	800c0ba <papProcessAuthReq+0x13e>

   //Retrieve the length of the Peer-ID field
   usernameLen = authReqPacket->peerIdLength;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	791b      	ldrb	r3, [r3, #4]
 800bfc0:	61bb      	str	r3, [r7, #24]

   //Malformed Authenticate-Request packet?
   if(length < (sizeof(PapAuthReqPacket) + 1 + usernameLen))
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	3306      	adds	r3, #6
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d201      	bcs.n	800bfd0 <papProcessAuthReq+0x54>
      return ERROR_INVALID_LENGTH;
 800bfcc:	23eb      	movs	r3, #235	; 0xeb
 800bfce:	e074      	b.n	800c0ba <papProcessAuthReq+0x13e>

   //Limit the length of the string
   usernameLen = MIN(usernameLen, PPP_MAX_USERNAME_LEN);
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	2b1f      	cmp	r3, #31
 800bfd4:	bf28      	it	cs
 800bfd6:	231f      	movcs	r3, #31
 800bfd8:	61bb      	str	r3, [r7, #24]
   //Copy the name of the peer to be identified
   memcpy(context->peerName, authReqPacket->peerId, usernameLen);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	3305      	adds	r3, #5
 800bfe4:	69ba      	ldr	r2, [r7, #24]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	f00e f814 	bl	801a014 <memcpy>
   //Properly terminate the string with a NULL character
   context->peerName[usernameLen] = '\0';
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	4413      	add	r3, r2
 800bff2:	3360      	adds	r3, #96	; 0x60
 800bff4:	2200      	movs	r2, #0
 800bff6:	701a      	strb	r2, [r3, #0]

   //Point to the Passwd-Length field
   p = authReqPacket->peerId + usernameLen;
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	1d5a      	adds	r2, r3, #5
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	4413      	add	r3, r2
 800c000:	617b      	str	r3, [r7, #20]

   //Save the length of Password field
   context->papFsm.passwordLen = p[0];
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   //Point to the Password field
   context->papFsm.password = p + 1;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

   //Malformed Authenticate-Request packet?
   if(length < (sizeof(PapAuthReqPacket) + 1 + usernameLen + context->papFsm.passwordLen))
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	4413      	add	r3, r2
 800c022:	3306      	adds	r3, #6
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	429a      	cmp	r2, r3
 800c028:	d201      	bcs.n	800c02e <papProcessAuthReq+0xb2>
      return ERROR_INVALID_LENGTH;
 800c02a:	23eb      	movs	r3, #235	; 0xeb
 800c02c:	e045      	b.n	800c0ba <papProcessAuthReq+0x13e>

   //Invoke user-defined callback, if any
   if(context->settings.authCallback != NULL)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d009      	beq.n	800c04a <papProcessAuthReq+0xce>
   {
      //Perfom username and password verification
      status = context->settings.authCallback(context->interface,
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	6990      	ldr	r0, [r2, #24]
         context->peerName);
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	3260      	adds	r2, #96	; 0x60
      status = context->settings.authCallback(context->interface,
 800c042:	4611      	mov	r1, r2
 800c044:	4798      	blx	r3
 800c046:	61f8      	str	r0, [r7, #28]
 800c048:	e001      	b.n	800c04e <papProcessAuthReq+0xd2>
   }
   else
   {
      //Unable to perform authentication...
      status = FALSE;
 800c04a:	2300      	movs	r3, #0
 800c04c:	61fb      	str	r3, [r7, #28]
   }

   //Successful authentication?
   if(status)
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d024      	beq.n	800c09e <papProcessAuthReq+0x122>
   {
      //If the Peer-ID/Password pair received in the Authenticate-Request
      //is both recognizable and acceptable, then the authenticator must
      //transmit an Authenticate-Ack packet
      papSendAuthAck(context, authReqPacket->identifier);
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	785b      	ldrb	r3, [r3, #1]
 800c058:	4619      	mov	r1, r3
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f000 f958 	bl	800c310 <papSendAuthAck>

      //Switch to the Ack-Sent state
      context->papFsm.localState = PAP_STATE_4_ACK_SENT;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2204      	movs	r2, #4
 800c064:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      //The user has been successfully authenticated
      context->localAuthDone = TRUE;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      //Check whether PPP authentication is complete
      if(context->localAuthDone && context->peerAuthDone)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c076:	2b00      	cmp	r3, #0
 800c078:	d01e      	beq.n	800c0b8 <papProcessAuthReq+0x13c>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c080:	2b00      	cmp	r3, #0
 800c082:	d019      	beq.n	800c0b8 <papProcessAuthReq+0x13c>
      {
         //Check current PPP phase
         if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d114      	bne.n	800c0b8 <papProcessAuthReq+0x13c>
         {
            //Advance to the Network phase
            context->pppPhase = PPP_PHASE_NETWORK;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2203      	movs	r2, #3
 800c092:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
            //IPCP Open event
            ipcpOpen(context);
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f7fd fd36 	bl	8009b08 <ipcpOpen>
 800c09c:	e00c      	b.n	800c0b8 <papProcessAuthReq+0x13c>
   else
   {
      //If the Peer-ID/Password pair received in the Authenticate-Request
      //is not recognizable or acceptable, then the authenticator must
      //transmit an Authenticate-Nak packet
      papSendAuthNak(context, authReqPacket->identifier);
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	785b      	ldrb	r3, [r3, #1]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f000 f981 	bl	800c3ac <papSendAuthNak>

      //Switch to the Nak-Sent state
      context->papFsm.localState = PAP_STATE_6_NAK_SENT;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2206      	movs	r2, #6
 800c0ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      //The authenticator should take action to terminate the link
      lcpClose(context);
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f7fe fc02 	bl	800a8bc <lcpClose>
   }

   //Successful processing
   return NO_ERROR;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3720      	adds	r7, #32
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	20000058 	.word	0x20000058
 800c0c8:	0801bf28 	.word	0x0801bf28

0800c0cc <papProcessAuthAck>:
 * @return Error code
 **/

error_t papProcessAuthAck(PppContext *context,
   const PapAuthAckPacket *authAckPacket, size_t length)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nPAP Authenticate-Ack packet received\r\n");
 800c0d8:	f7f4 fab2 	bl	8000640 <osSuspendAllTasks>
 800c0dc:	4b21      	ldr	r3, [pc, #132]	; (800c164 <papProcessAuthAck+0x98>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	2228      	movs	r2, #40	; 0x28
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	4820      	ldr	r0, [pc, #128]	; (800c168 <papProcessAuthAck+0x9c>)
 800c0e8:	f00d ff32 	bl	8019f50 <fwrite>
 800c0ec:	f7f4 fab3 	bl	8000656 <osResumeAllTasks>

   //Make sure the Authenticate-Ack packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_PAP)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800c0f6:	f24c 0223 	movw	r2, #49187	; 0xc023
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d001      	beq.n	800c102 <papProcessAuthAck+0x36>
      return ERROR_FAILURE;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e02c      	b.n	800c15c <papProcessAuthAck+0x90>

   //Check the length of the packet
   if(length < sizeof(PapAuthAckPacket))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b04      	cmp	r3, #4
 800c106:	d801      	bhi.n	800c10c <papProcessAuthAck+0x40>
      return ERROR_INVALID_LENGTH;
 800c108:	23eb      	movs	r3, #235	; 0xeb
 800c10a:	e027      	b.n	800c15c <papProcessAuthAck+0x90>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(authAckPacket->identifier != context->papFsm.identifier)
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	785a      	ldrb	r2, [r3, #1]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800c116:	429a      	cmp	r2, r3
 800c118:	d001      	beq.n	800c11e <papProcessAuthAck+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800c11a:	23d6      	movs	r3, #214	; 0xd6
 800c11c:	e01e      	b.n	800c15c <papProcessAuthAck+0x90>

   //Switch to the Ack-Rcvd state
   context->papFsm.peerState = PAP_STATE_5_ACK_RCVD;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2205      	movs	r2, #5
 800c122:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   //The user name has been accepted by the authenticator
   context->peerAuthDone = TRUE;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2201      	movs	r2, #1
 800c12a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check whether PPP authentication is complete
   if(context->localAuthDone && context->peerAuthDone)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c134:	2b00      	cmp	r3, #0
 800c136:	d010      	beq.n	800c15a <papProcessAuthAck+0x8e>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00b      	beq.n	800c15a <papProcessAuthAck+0x8e>
   {
      //Check current PPP phase
      if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d106      	bne.n	800c15a <papProcessAuthAck+0x8e>
      {
         //Advance to the Network phase
         context->pppPhase = PPP_PHASE_NETWORK;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2203      	movs	r2, #3
 800c150:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
         //IPCP Open event
         ipcpOpen(context);
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f7fd fcd7 	bl	8009b08 <ipcpOpen>
#endif
      }
   }

   //Successful processing
   return NO_ERROR;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20000058 	.word	0x20000058
 800c168:	0801bf58 	.word	0x0801bf58

0800c16c <papProcessAuthNak>:
 * @return Error code
 **/

error_t papProcessAuthNak(PppContext *context,
   const PapAuthNakPacket *authNakPacket, size_t length)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nPAP Authenticate-Nak packet received\r\n");
 800c178:	f7f4 fa62 	bl	8000640 <osSuspendAllTasks>
 800c17c:	4b16      	ldr	r3, [pc, #88]	; (800c1d8 <papProcessAuthNak+0x6c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	2228      	movs	r2, #40	; 0x28
 800c184:	2101      	movs	r1, #1
 800c186:	4815      	ldr	r0, [pc, #84]	; (800c1dc <papProcessAuthNak+0x70>)
 800c188:	f00d fee2 	bl	8019f50 <fwrite>
 800c18c:	f7f4 fa63 	bl	8000656 <osResumeAllTasks>

   //Make sure the Authenticate-Nak packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_PAP)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800c196:	f24c 0223 	movw	r2, #49187	; 0xc023
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d001      	beq.n	800c1a2 <papProcessAuthNak+0x36>
      return ERROR_FAILURE;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e015      	b.n	800c1ce <papProcessAuthNak+0x62>

   //Check the length of the packet
   if(length < sizeof(PapAuthNakPacket))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d801      	bhi.n	800c1ac <papProcessAuthNak+0x40>
      return ERROR_INVALID_LENGTH;
 800c1a8:	23eb      	movs	r3, #235	; 0xeb
 800c1aa:	e010      	b.n	800c1ce <papProcessAuthNak+0x62>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(authNakPacket->identifier != context->papFsm.identifier)
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	785a      	ldrb	r2, [r3, #1]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d001      	beq.n	800c1be <papProcessAuthNak+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800c1ba:	23d6      	movs	r3, #214	; 0xd6
 800c1bc:	e007      	b.n	800c1ce <papProcessAuthNak+0x62>

   //Switch to the Nak-Rcvd state
   context->papFsm.peerState = PAP_STATE_7_NAK_RCVD;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2207      	movs	r2, #7
 800c1c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   //Authentication failed
   lcpClose(context);
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f7fe fb78 	bl	800a8bc <lcpClose>

   //Successful processing
   return NO_ERROR;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20000058 	.word	0x20000058
 800c1dc:	0801bf84 	.word	0x0801bf84

0800c1e0 <papSendAuthReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t papSendAuthReq(PppContext *context)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08a      	sub	sp, #40	; 0x28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
   uint8_t *p;
   NetBuffer *buffer;
   PapAuthReqPacket *authReqPacket;

   //Get the length of the user name
   usernameLen = strlen(context->username);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3320      	adds	r3, #32
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7f3 ffff 	bl	80001f0 <strlen>
 800c1f2:	6278      	str	r0, [r7, #36]	; 0x24
   //Get the length of the password
   passwordLen = strlen(context->password);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3340      	adds	r3, #64	; 0x40
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7f3 fff9 	bl	80001f0 <strlen>
 800c1fe:	6238      	str	r0, [r7, #32]

   //Calculate the length of the Authenticate-Request packet
   length = sizeof(PapAuthReqPacket) + 1 + usernameLen + passwordLen;
 800c200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c202:	6a3b      	ldr	r3, [r7, #32]
 800c204:	4413      	add	r3, r2
 800c206:	3306      	adds	r3, #6
 800c208:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the packet
   buffer = pppAllocBuffer(length, &offset);
 800c20a:	f107 0308 	add.w	r3, r7, #8
 800c20e:	4619      	mov	r1, r3
 800c210:	69f8      	ldr	r0, [r7, #28]
 800c212:	f000 fbab 	bl	800c96c <pppAllocBuffer>
 800c216:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d101      	bne.n	800c222 <papSendAuthReq+0x42>
      return ERROR_OUT_OF_MEMORY;
 800c21e:	2364      	movs	r3, #100	; 0x64
 800c220:	e06e      	b.n	800c300 <papSendAuthReq+0x120>

   //Point to the Authenticate-Request packet
   authReqPacket = netBufferAt(buffer, offset);
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	4619      	mov	r1, r3
 800c226:	69b8      	ldr	r0, [r7, #24]
 800c228:	f7f6 f9fe 	bl	8002628 <netBufferAt>
 800c22c:	6178      	str	r0, [r7, #20]

   //Format packet header
   authReqPacket->code = PAP_CODE_AUTH_REQ;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2201      	movs	r2, #1
 800c232:	701a      	strb	r2, [r3, #0]
   authReqPacket->identifier = ++context->papFsm.identifier;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800c23a:	3301      	adds	r3, #1
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	705a      	strb	r2, [r3, #1]
   authReqPacket->length = htons(length);
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	b29b      	uxth	r3, r3
 800c252:	4618      	mov	r0, r3
 800c254:	f7f4 f9a4 	bl	80005a0 <swapInt16>
 800c258:	4603      	mov	r3, r0
 800c25a:	461a      	mov	r2, r3
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	805a      	strh	r2, [r3, #2]

   //The Peer-ID-Length field indicates the length of Peer-ID field
   authReqPacket->peerIdLength = usernameLen;
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	b2da      	uxtb	r2, r3
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	711a      	strb	r2, [r3, #4]
   //Append Peer-ID
   memcpy(authReqPacket->peerId, context->username, usernameLen);
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	1d58      	adds	r0, r3, #5
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3320      	adds	r3, #32
 800c270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c272:	4619      	mov	r1, r3
 800c274:	f00d fece 	bl	801a014 <memcpy>

   //Point to the Passwd-Length field
   p = authReqPacket->peerId + usernameLen;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	1d5a      	adds	r2, r3, #5
 800c27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27e:	4413      	add	r3, r2
 800c280:	613b      	str	r3, [r7, #16]
   //The Passwd-Length field indicates the length of Password field
   p[0] = passwordLen;
 800c282:	6a3b      	ldr	r3, [r7, #32]
 800c284:	b2da      	uxtb	r2, r3
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	701a      	strb	r2, [r3, #0]

   //Append Password
   memcpy(p + 1, context->password, passwordLen);
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	1c58      	adds	r0, r3, #1
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	3340      	adds	r3, #64	; 0x40
 800c292:	6a3a      	ldr	r2, [r7, #32]
 800c294:	4619      	mov	r1, r3
 800c296:	f00d febd 	bl	801a014 <memcpy>

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	4413      	add	r3, r2
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	69b8      	ldr	r0, [r7, #24]
 800c2a4:	f7f6 f91a 	bl	80024dc <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending PAP Authenticate-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800c2a8:	f7f4 f9ca 	bl	8000640 <osSuspendAllTasks>
 800c2ac:	4b16      	ldr	r3, [pc, #88]	; (800c308 <papSendAuthReq+0x128>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	69fa      	ldr	r2, [r7, #28]
 800c2b4:	4915      	ldr	r1, [pc, #84]	; (800c30c <papSendAuthReq+0x12c>)
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f00d fdea 	bl	8019e90 <fiprintf>
 800c2bc:	f7f4 f9cb 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) authReqPacket, length, PPP_PROTOCOL_PAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_PAP);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6998      	ldr	r0, [r3, #24]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	f24c 0323 	movw	r3, #49187	; 0xc023
 800c2ca:	69b9      	ldr	r1, [r7, #24]
 800c2cc:	f000 f9d8 	bl	800c680 <pppSendFrame>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	81fb      	strh	r3, [r7, #14]

   //The restart counter is decremented each time a Authenticate-Request is sent
   if(context->papFsm.restartCounter > 0)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d006      	beq.n	800c2ec <papSendAuthReq+0x10c>
      context->papFsm.restartCounter--;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c2e4:	1e5a      	subs	r2, r3, #1
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

   //Save the time at which the packet was sent
   context->papFsm.timestamp = osGetSystemTime();
 800c2ec:	f7f4 fa70 	bl	80007d0 <osGetSystemTime>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

   //Free previously allocated memory block
   netBufferFree(buffer);
 800c2f8:	69b8      	ldr	r0, [r7, #24]
 800c2fa:	f7f6 f8be 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800c2fe:	89fb      	ldrh	r3, [r7, #14]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3728      	adds	r7, #40	; 0x28
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	20000058 	.word	0x20000058
 800c30c:	0801bfb0 	.word	0x0801bfb0

0800c310 <papSendAuthAck>:
 * @param[in] identifier Identifier field
 * @return Error code
 **/

error_t papSendAuthAck(PppContext *context, uint8_t identifier)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
   size_t offset;
   NetBuffer *buffer;
   PapAuthAckPacket *authAckPacket;

   //Retrieve the length of the Authenticate-Ack packet
   length = sizeof(PapAuthAckPacket);
 800c31c:	2305      	movs	r3, #5
 800c31e:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Authenticate-Ack packet
   buffer = pppAllocBuffer(length, &offset);
 800c320:	f107 030c 	add.w	r3, r7, #12
 800c324:	4619      	mov	r1, r3
 800c326:	69f8      	ldr	r0, [r7, #28]
 800c328:	f000 fb20 	bl	800c96c <pppAllocBuffer>
 800c32c:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <papSendAuthAck+0x28>
      return ERROR_OUT_OF_MEMORY;
 800c334:	2364      	movs	r3, #100	; 0x64
 800c336:	e031      	b.n	800c39c <papSendAuthAck+0x8c>

   //Point to the Authenticate-Ack packet
   authAckPacket = netBufferAt(buffer, offset);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4619      	mov	r1, r3
 800c33c:	69b8      	ldr	r0, [r7, #24]
 800c33e:	f7f6 f973 	bl	8002628 <netBufferAt>
 800c342:	6178      	str	r0, [r7, #20]

   //Format packet header
   authAckPacket->code = PAP_CODE_AUTH_ACK;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	2202      	movs	r2, #2
 800c348:	701a      	strb	r2, [r3, #0]
   authAckPacket->identifier = identifier;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	78fa      	ldrb	r2, [r7, #3]
 800c34e:	705a      	strb	r2, [r3, #1]
   authAckPacket->length = htons(length);
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	b29b      	uxth	r3, r3
 800c354:	4618      	mov	r0, r3
 800c356:	f7f4 f923 	bl	80005a0 <swapInt16>
 800c35a:	4603      	mov	r3, r0
 800c35c:	461a      	mov	r2, r3
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	805a      	strh	r2, [r3, #2]

   //The Message field is zero or more octets, and its contents are
   //implementation dependent
   authAckPacket->msgLength = 0;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2200      	movs	r2, #0
 800c366:	711a      	strb	r2, [r3, #4]

   //Debug message
   TRACE_INFO("Sending PAP Authenticate-Ack packet (%" PRIuSIZE " bytes)...\r\n", length);
 800c368:	f7f4 f96a 	bl	8000640 <osSuspendAllTasks>
 800c36c:	4b0d      	ldr	r3, [pc, #52]	; (800c3a4 <papSendAuthAck+0x94>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	69fa      	ldr	r2, [r7, #28]
 800c374:	490c      	ldr	r1, [pc, #48]	; (800c3a8 <papSendAuthAck+0x98>)
 800c376:	4618      	mov	r0, r3
 800c378:	f00d fd8a 	bl	8019e90 <fiprintf>
 800c37c:	f7f4 f96b 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) authAckPacket, length, PPP_PROTOCOL_PAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_PAP);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6998      	ldr	r0, [r3, #24]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	f24c 0323 	movw	r3, #49187	; 0xc023
 800c38a:	69b9      	ldr	r1, [r7, #24]
 800c38c:	f000 f978 	bl	800c680 <pppSendFrame>
 800c390:	4603      	mov	r3, r0
 800c392:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800c394:	69b8      	ldr	r0, [r7, #24]
 800c396:	f7f6 f870 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800c39a:	8a7b      	ldrh	r3, [r7, #18]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3720      	adds	r7, #32
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	20000058 	.word	0x20000058
 800c3a8:	0801bfe8 	.word	0x0801bfe8

0800c3ac <papSendAuthNak>:
 * @param[in] identifier Identifier field
 * @return Error code
 **/

error_t papSendAuthNak(PppContext *context, uint8_t identifier)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	70fb      	strb	r3, [r7, #3]
   size_t offset;
   NetBuffer *buffer;
   PapAuthNakPacket *authNakPacket;

   //Retrieve the length of the Authenticate-Nak packet
   length = sizeof(PapAuthNakPacket);
 800c3b8:	2305      	movs	r3, #5
 800c3ba:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Authenticate-Nak packet
   buffer = pppAllocBuffer(length, &offset);
 800c3bc:	f107 030c 	add.w	r3, r7, #12
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	69f8      	ldr	r0, [r7, #28]
 800c3c4:	f000 fad2 	bl	800c96c <pppAllocBuffer>
 800c3c8:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <papSendAuthNak+0x28>
      return ERROR_OUT_OF_MEMORY;
 800c3d0:	2364      	movs	r3, #100	; 0x64
 800c3d2:	e031      	b.n	800c438 <papSendAuthNak+0x8c>

   //Point to the Authenticate-Nak packet
   authNakPacket = netBufferAt(buffer, offset);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	69b8      	ldr	r0, [r7, #24]
 800c3da:	f7f6 f925 	bl	8002628 <netBufferAt>
 800c3de:	6178      	str	r0, [r7, #20]

   //Format packet header
   authNakPacket->code = PAP_CODE_AUTH_NAK;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	2203      	movs	r2, #3
 800c3e4:	701a      	strb	r2, [r3, #0]
   authNakPacket->identifier = identifier;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	78fa      	ldrb	r2, [r7, #3]
 800c3ea:	705a      	strb	r2, [r3, #1]
   authNakPacket->length = htons(length);
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7f4 f8d5 	bl	80005a0 <swapInt16>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	805a      	strh	r2, [r3, #2]

   //The Message field is zero or more octets, and its contents are
   //implementation dependent
   authNakPacket->msgLength = 0;
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2200      	movs	r2, #0
 800c402:	711a      	strb	r2, [r3, #4]

   //Debug message
   TRACE_INFO("Sending PAP Authenticate-Nak packet (%" PRIuSIZE " bytes)...\r\n", length);
 800c404:	f7f4 f91c 	bl	8000640 <osSuspendAllTasks>
 800c408:	4b0d      	ldr	r3, [pc, #52]	; (800c440 <papSendAuthNak+0x94>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	69fa      	ldr	r2, [r7, #28]
 800c410:	490c      	ldr	r1, [pc, #48]	; (800c444 <papSendAuthNak+0x98>)
 800c412:	4618      	mov	r0, r3
 800c414:	f00d fd3c 	bl	8019e90 <fiprintf>
 800c418:	f7f4 f91d 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) authNakPacket, length, PPP_PROTOCOL_PAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_PAP);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6998      	ldr	r0, [r3, #24]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	f24c 0323 	movw	r3, #49187	; 0xc023
 800c426:	69b9      	ldr	r1, [r7, #24]
 800c428:	f000 f92a 	bl	800c680 <pppSendFrame>
 800c42c:	4603      	mov	r3, r0
 800c42e:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800c430:	69b8      	ldr	r0, [r7, #24]
 800c432:	f7f6 f822 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800c436:	8a7b      	ldrh	r3, [r7, #18]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3720      	adds	r7, #32
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	20000058 	.word	0x20000058
 800c444:	0801c01c 	.word	0x0801c01c

0800c448 <pppGetDefaultSettings>:
 * @brief Initialize settings with default values
 * @param[out] settings Structure that contains PPP settings
 **/

void pppGetDefaultSettings(PppSettings *settings)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
   //Use default interface
   settings->interface = netGetDefaultInterface();
 800c450:	f7f5 fe98 	bl	8002184 <netGetDefaultInterface>
 800c454:	4602      	mov	r2, r0
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	601a      	str	r2, [r3, #0]

   //Default MRU
   settings->mru = PPP_DEFAULT_MRU;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c460:	809a      	strh	r2, [r3, #4]
   //Default async control character map
   settings->accm = PPP_DEFAULT_ACCM;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c468:	609a      	str	r2, [r3, #8]
   //Allowed authentication protocols
   settings->authProtocol = PPP_AUTH_PROTOCOL_PAP | PPP_AUTH_PROTOCOL_CHAP_MD5;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2203      	movs	r2, #3
 800c46e:	60da      	str	r2, [r3, #12]

   //Random data generation callback function
   settings->randCallback = NULL;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	611a      	str	r2, [r3, #16]
   //PPP authentication callback function
   settings->authCallback = NULL;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	615a      	str	r2, [r3, #20]
}
 800c47c:	bf00      	nop
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <pppInit>:
 * @param[in] settings PPP specific settings
 * @return Error code
 **/

error_t pppInit(PppContext *context, const PppSettings *settings)
{
 800c484:	b5b0      	push	{r4, r5, r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
   error_t error;
   NetInterface *interface;

   //Debug message
   TRACE_INFO("PPP initialization\r\n");
 800c48e:	f7f4 f8d7 	bl	8000640 <osSuspendAllTasks>
 800c492:	4b27      	ldr	r3, [pc, #156]	; (800c530 <pppInit+0xac>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	2214      	movs	r2, #20
 800c49a:	2101      	movs	r1, #1
 800c49c:	4825      	ldr	r0, [pc, #148]	; (800c534 <pppInit+0xb0>)
 800c49e:	f00d fd57 	bl	8019f50 <fwrite>
 800c4a2:	f7f4 f8d8 	bl	8000656 <osResumeAllTasks>

   //Underlying network interface
   interface = settings->interface;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	60fb      	str	r3, [r7, #12]

   //Initialize PPP context
   memset(context, 0, sizeof(PppContext));
 800c4ac:	f243 7294 	movw	r2, #14228	; 0x3794
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f00d fdd2 	bl	801a05c <memset>

   //Save user settings
   context->settings = *settings;
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	4614      	mov	r4, r2
 800c4be:	461d      	mov	r5, r3
 800c4c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c4c8:	e884 0003 	stmia.w	r4, {r0, r1}
   //CHAP with MD5 authentication is not supported
   context->settings.authProtocol &= ~PPP_AUTH_PROTOCOL_CHAP_MD5;
#endif

   //Attach the PPP context to the network interface
   interface->pppContext = context;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

   //Initialize structure
   context->interface = interface;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	619a      	str	r2, [r3, #24]
   context->timeout = INFINITE_DELAY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4e0:	61da      	str	r2, [r3, #28]

   //Initialize PPP finite state machine
   context->pppPhase = PPP_PHASE_DEAD;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
   context->lcpFsm.state = PPP_STATE_0_INITIAL;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (IPV4_SUPPORT == ENABLED)
   //Initialize IPCP finite state machine
   context->ipcpFsm.state = PPP_STATE_0_INITIAL;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   context->ipv6cpFsm.state = PPP_STATE_0_INITIAL;
#endif

#if (PAP_SUPPORT == ENABLED)
   //Initialize PAP finite state machine
   context->papFsm.localState = PAP_STATE_0_INITIAL;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

#if (CHAP_SUPPORT == ENABLED)
   //Initialize CHAP finite state machine
   context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   context->chapFsm.peerState = CHAP_STATE_0_INITIAL;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
#endif

   //Attach PPP HDLC driver
   error = netSetDriver(interface, &pppHdlcDriver);
 800c51a:	4907      	ldr	r1, [pc, #28]	; (800c538 <pppInit+0xb4>)
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f7f5 fb5b 	bl	8001bd8 <netSetDriver>
 800c522:	4603      	mov	r3, r0
 800c524:	817b      	strh	r3, [r7, #10]

   //Return status code
   return error;
 800c526:	897b      	ldrh	r3, [r7, #10]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bdb0      	pop	{r4, r5, r7, pc}
 800c530:	20000058 	.word	0x20000058
 800c534:	0801c050 	.word	0x0801c050
 800c538:	0801c658 	.word	0x0801c658

0800c53c <pppTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void pppTick(NetInterface *interface)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
   PppContext *context;

   //PPP driver?
   if(interface->nicDriver->type == NIC_TYPE_PPP)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d10f      	bne.n	800c56e <pppTick+0x32>
   {
      //Point to the PPP context
      context = interface->pppContext;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c554:	60fb      	str	r3, [r7, #12]

      //Handle LCP retransmission timer
      lcpTick(context);
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f7fe f9d2 	bl	800a900 <lcpTick>

#if (IPV4_SUPPORT == ENABLED)
      //Handle IPCP retransmission timer
      ipcpTick(context);
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f7fd fb27 	bl	8009bb0 <ipcpTick>
      ipv6cpTick(context);
#endif

#if (PAP_SUPPORT == ENABLED)
      //Handle PAP timer
      papTick(context);
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7ff fc6c 	bl	800be40 <papTick>
#endif

#if (CHAP_SUPPORT == ENABLED)
      //Handle CHAP timer
      chapTick(context);
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f7fc fef1 	bl	8009350 <chapTick>
#endif
   }
}
 800c56e:	bf00      	nop
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <pppProcessFrame>:
 * @param[in] frame Incoming PPP frame to process
 * @param[in] length Total frame length
 **/

void pppProcessFrame(NetInterface *interface, uint8_t *frame, size_t length)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
#if (IPV6_SUPPORT == ENABLED)
   NetBuffer1 buffer;
#endif

   //Point to the PPP context
   context = interface->pppContext;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c58a:	61fb      	str	r3, [r7, #28]

   //Check the length of the PPP frame
   if(length < PPP_FCS_SIZE)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d96b      	bls.n	800c66a <pppProcessFrame+0xf2>

   //Debug message
   TRACE_DEBUG("PPP frame received (%" PRIuSIZE " bytes)...\r\n", length);

   //The value of the residue is 0x0F47 when no FCS errors are detected
   if(pppCalcFcs(frame, length) != 0x0F47)
 800c592:	6879      	ldr	r1, [r7, #4]
 800c594:	68b8      	ldr	r0, [r7, #8]
 800c596:	f000 f953 	bl	800c840 <pppCalcFcs>
 800c59a:	4603      	mov	r3, r0
 800c59c:	461a      	mov	r2, r3
 800c59e:	f640 7347 	movw	r3, #3911	; 0xf47
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d00c      	beq.n	800c5c0 <pppProcessFrame+0x48>
   {
      //Debug message
      TRACE_WARNING("Wrong FCS detected!\r\n");
 800c5a6:	f7f4 f84b 	bl	8000640 <osSuspendAllTasks>
 800c5aa:	4b33      	ldr	r3, [pc, #204]	; (800c678 <pppProcessFrame+0x100>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	2215      	movs	r2, #21
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	4831      	ldr	r0, [pc, #196]	; (800c67c <pppProcessFrame+0x104>)
 800c5b6:	f00d fccb 	bl	8019f50 <fwrite>
 800c5ba:	f7f4 f84c 	bl	8000656 <osResumeAllTasks>
      //Drop the received frame
      return;
 800c5be:	e057      	b.n	800c670 <pppProcessFrame+0xf8>
   }

   //Calculate the length of PPP frame excluding the FCS field
   length -= PPP_FCS_SIZE;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	3b02      	subs	r3, #2
 800c5c4:	607b      	str	r3, [r7, #4]

   //Decompress the frame header
   n = pppParseFrameHeader(frame, length, &protocol);
 800c5c6:	f107 0316 	add.w	r3, r7, #22
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	68b8      	ldr	r0, [r7, #8]
 800c5d0:	f000 f8e1 	bl	800c796 <pppParseFrameHeader>
 800c5d4:	61b8      	str	r0, [r7, #24]
   //Malformed PPP frame?
   if(!n)
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d048      	beq.n	800c66e <pppProcessFrame+0xf6>
      return;

   //Point to the payload field
   frame += n;
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	60bb      	str	r3, [r7, #8]
   length -= n;
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	607b      	str	r3, [r7, #4]

   //Check protocol field
   switch(protocol)
 800c5ec:	8afb      	ldrh	r3, [r7, #22]
 800c5ee:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d013      	beq.n	800c61e <pppProcessFrame+0xa6>
 800c5f6:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	dc06      	bgt.n	800c60c <pppProcessFrame+0x94>
 800c5fe:	2b21      	cmp	r3, #33	; 0x21
 800c600:	d019      	beq.n	800c636 <pppProcessFrame+0xbe>
 800c602:	f248 0221 	movw	r2, #32801	; 0x8021
 800c606:	4293      	cmp	r3, r2
 800c608:	d00f      	beq.n	800c62a <pppProcessFrame+0xb2>
 800c60a:	e026      	b.n	800c65a <pppProcessFrame+0xe2>
 800c60c:	f24c 0223 	movw	r2, #49187	; 0xc023
 800c610:	4293      	cmp	r3, r2
 800c612:	d016      	beq.n	800c642 <pppProcessFrame+0xca>
 800c614:	f24c 2223 	movw	r2, #49699	; 0xc223
 800c618:	4293      	cmp	r3, r2
 800c61a:	d018      	beq.n	800c64e <pppProcessFrame+0xd6>
 800c61c:	e01d      	b.n	800c65a <pppProcessFrame+0xe2>
   {
   //Link control protocol?
   case PPP_PROTOCOL_LCP:
      //Process incoming LCP packet
      lcpProcessPacket(context, (PppPacket *) frame, length);
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	68b9      	ldr	r1, [r7, #8]
 800c622:	69f8      	ldr	r0, [r7, #28]
 800c624:	f7fe f9a4 	bl	800a970 <lcpProcessPacket>
      break;
 800c628:	e022      	b.n	800c670 <pppProcessFrame+0xf8>

#if (IPV4_SUPPORT == ENABLED)
   //IP control protocol?
   case PPP_PROTOCOL_IPCP:
      //Process incoming IPCP packet
      ipcpProcessPacket(context, (PppPacket *) frame, length);
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	68b9      	ldr	r1, [r7, #8]
 800c62e:	69f8      	ldr	r0, [r7, #28]
 800c630:	f7fd faf6 	bl	8009c20 <ipcpProcessPacket>
      break;
 800c634:	e01c      	b.n	800c670 <pppProcessFrame+0xf8>
   //IP protocol?
   case PPP_PROTOCOL_IP:
      //Process incoming IPv4 packet
      ipv4ProcessPacket(interface, (Ipv4Header *) frame, length);
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	68b9      	ldr	r1, [r7, #8]
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f7fb fb79 	bl	8007d32 <ipv4ProcessPacket>
      break;
 800c640:	e016      	b.n	800c670 <pppProcessFrame+0xf8>

#if (PAP_SUPPORT == ENABLED)
   //PAP protocol?
   case PPP_PROTOCOL_PAP:
      //Process incoming PAP packet
      papProcessPacket(context, (PppPacket *) frame, length);
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	68b9      	ldr	r1, [r7, #8]
 800c646:	69f8      	ldr	r0, [r7, #28]
 800c648:	f7ff fc34 	bl	800beb4 <papProcessPacket>
      break;
 800c64c:	e010      	b.n	800c670 <pppProcessFrame+0xf8>

#if (CHAP_SUPPORT == ENABLED)
   //CHAP protocol?
   case PPP_PROTOCOL_CHAP:
      //Process incoming CHAP packet
      chapProcessPacket(context, (PppPacket *) frame, length);
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	68b9      	ldr	r1, [r7, #8]
 800c652:	69f8      	ldr	r0, [r7, #28]
 800c654:	f7fc feb6 	bl	80093c4 <chapProcessPacket>
      break;
 800c658:	e00a      	b.n	800c670 <pppProcessFrame+0xf8>
#endif

   //Unknown protocol field
   default:
      //The peer is attempting to use a protocol which is unsupported
      lcpProcessUnknownProtocol(context, protocol, frame, length);
 800c65a:	8af9      	ldrh	r1, [r7, #22]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	69f8      	ldr	r0, [r7, #28]
 800c662:	f7fe fdcf 	bl	800b204 <lcpProcessUnknownProtocol>
      break;
 800c666:	bf00      	nop
 800c668:	e002      	b.n	800c670 <pppProcessFrame+0xf8>
      return;
 800c66a:	bf00      	nop
 800c66c:	e000      	b.n	800c670 <pppProcessFrame+0xf8>
      return;
 800c66e:	bf00      	nop
   }
}
 800c670:	3720      	adds	r7, #32
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20000058 	.word	0x20000058
 800c67c:	0801c068 	.word	0x0801c068

0800c680 <pppSendFrame>:
 * @return Error code
 **/

error_t pppSendFrame(NetInterface *interface,
   NetBuffer *buffer, size_t offset, uint16_t protocol)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	807b      	strh	r3, [r7, #2]
   uint16_t fcs;
   uint8_t *p;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c694:	61fb      	str	r3, [r7, #28]

   //Check whether the Protocol field can be compressed
   if(context->peerConfig.pfc && MSB(protocol) == 0)
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d017      	beq.n	800c6d0 <pppSendFrame+0x50>
 800c6a0:	887b      	ldrh	r3, [r7, #2]
 800c6a2:	0a1b      	lsrs	r3, r3, #8
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d111      	bne.n	800c6d0 <pppSendFrame+0x50>
   {
      //Is there enough space in the buffer to store the compressed
      //Protocol field?
      if(offset < 1)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d101      	bne.n	800c6b6 <pppSendFrame+0x36>
         return ERROR_FAILURE;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e06b      	b.n	800c78e <pppSendFrame+0x10e>

      //Make room for the Protocol field
      offset--;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	607b      	str	r3, [r7, #4]
      //Move backward
      p = netBufferAt(buffer, offset);
 800c6bc:	6879      	ldr	r1, [r7, #4]
 800c6be:	68b8      	ldr	r0, [r7, #8]
 800c6c0:	f7f5 ffb2 	bl	8002628 <netBufferAt>
 800c6c4:	61b8      	str	r0, [r7, #24]
      //Compress the Protocol field
      p[0] = LSB(protocol);
 800c6c6:	887b      	ldrh	r3, [r7, #2]
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	e017      	b.n	800c700 <pppSendFrame+0x80>
   }
   else
   {
      //Is there enough space in the buffer to store the uncompressed
      //Protocol field?
      if(offset < 2)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d801      	bhi.n	800c6da <pppSendFrame+0x5a>
         return ERROR_FAILURE;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e059      	b.n	800c78e <pppSendFrame+0x10e>

      //Make room for the Protocol field
      offset -= 2;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3b02      	subs	r3, #2
 800c6de:	607b      	str	r3, [r7, #4]
      //Move backward
      p = netBufferAt(buffer, offset);
 800c6e0:	6879      	ldr	r1, [r7, #4]
 800c6e2:	68b8      	ldr	r0, [r7, #8]
 800c6e4:	f7f5 ffa0 	bl	8002628 <netBufferAt>
 800c6e8:	61b8      	str	r0, [r7, #24]
      //Do not compress the Protocol field
      p[0] = MSB(protocol);
 800c6ea:	887b      	ldrh	r3, [r7, #2]
 800c6ec:	0a1b      	lsrs	r3, r3, #8
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	b2da      	uxtb	r2, r3
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	701a      	strb	r2, [r3, #0]
      p[1] = LSB(protocol);
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	887a      	ldrh	r2, [r7, #2]
 800c6fc:	b2d2      	uxtb	r2, r2
 800c6fe:	701a      	strb	r2, [r3, #0]
   }

   //Check whether the Address and Control fields can be compressed
   if(context->peerConfig.acfc && protocol != PPP_PROTOCOL_LCP)
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800c706:	2b00      	cmp	r3, #0
 800c708:	d004      	beq.n	800c714 <pppSendFrame+0x94>
 800c70a:	887b      	ldrh	r3, [r7, #2]
 800c70c:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c710:	4293      	cmp	r3, r2
 800c712:	d113      	bne.n	800c73c <pppSendFrame+0xbc>
   }
   else
   {
      //Is there enough space in the buffer to store the uncompressed
      //Address and Control fields?
      if(offset < 2)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d801      	bhi.n	800c71e <pppSendFrame+0x9e>
         return ERROR_FAILURE;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e037      	b.n	800c78e <pppSendFrame+0x10e>

      //Make room for the Address and Control fields
      offset -= 2;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	3b02      	subs	r3, #2
 800c722:	607b      	str	r3, [r7, #4]
      //Move backward
      p = netBufferAt(buffer, offset);
 800c724:	6879      	ldr	r1, [r7, #4]
 800c726:	68b8      	ldr	r0, [r7, #8]
 800c728:	f7f5 ff7e 	bl	8002628 <netBufferAt>
 800c72c:	61b8      	str	r0, [r7, #24]
      //Do not compress the Address and Control fields
      p[0] = PPP_ADDR_FIELD;
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	22ff      	movs	r2, #255	; 0xff
 800c732:	701a      	strb	r2, [r3, #0]
      p[1] = PPP_CTRL_FIELD;
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	3301      	adds	r3, #1
 800c738:	2203      	movs	r2, #3
 800c73a:	701a      	strb	r2, [r3, #0]
   }

   //Retrieve the length of the frame
   length = netBufferGetLength(buffer) - offset;
 800c73c:	68b8      	ldr	r0, [r7, #8]
 800c73e:	f7f5 feab 	bl	8002498 <netBufferGetLength>
 800c742:	4602      	mov	r2, r0
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	617b      	str	r3, [r7, #20]

   //Compute FCS over the header and payload
   fcs = pppCalcFcsEx(buffer, offset, length);
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	68b8      	ldr	r0, [r7, #8]
 800c750:	f000 f8a2 	bl	800c898 <pppCalcFcsEx>
 800c754:	4603      	mov	r3, r0
 800c756:	823b      	strh	r3, [r7, #16]
   //The FCS is transmitted least significant octet first
   fcs = htole16(fcs);
 800c758:	8a3b      	ldrh	r3, [r7, #16]
 800c75a:	823b      	strh	r3, [r7, #16]

   //Append the calculated FCS value
   error = netBufferAppend(buffer, &fcs, PPP_FCS_SIZE);
 800c75c:	f107 0310 	add.w	r3, r7, #16
 800c760:	2202      	movs	r2, #2
 800c762:	4619      	mov	r1, r3
 800c764:	68b8      	ldr	r0, [r7, #8]
 800c766:	f7f6 f8f7 	bl	8002958 <netBufferAppend>
 800c76a:	4603      	mov	r3, r0
 800c76c:	827b      	strh	r3, [r7, #18]
   //Any error to report?
   if(error)
 800c76e:	8a7b      	ldrh	r3, [r7, #18]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <pppSendFrame+0xf8>
      return error;
 800c774:	8a7b      	ldrh	r3, [r7, #18]
 800c776:	e00a      	b.n	800c78e <pppSendFrame+0x10e>

   //Adjust frame length
   length += PPP_FCS_SIZE;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	3302      	adds	r3, #2
 800c77c:	617b      	str	r3, [r7, #20]
   //Debug message
   TRACE_DEBUG("Sending PPP frame (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG("  Protocol = 0x%04" PRIX16 "\r\n", protocol);

   //Send the resulting frame over the specified link
   error = nicSendPacket(interface, buffer, offset);
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	68b9      	ldr	r1, [r7, #8]
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f7f6 f9bc 	bl	8002b00 <nicSendPacket>
 800c788:	4603      	mov	r3, r0
 800c78a:	827b      	strh	r3, [r7, #18]
   //Return status code
   return error;
 800c78c:	8a7b      	ldrh	r3, [r7, #18]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3720      	adds	r7, #32
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <pppParseFrameHeader>:
 * @return If the PPP header was successfully parsed, the function returns the size
 *   of the PPP header, in bytes. If a parsing error occurred, zero is returned
 **/

size_t pppParseFrameHeader(const uint8_t *frame, size_t length, uint16_t *protocol)
{
 800c796:	b480      	push	{r7}
 800c798:	b087      	sub	sp, #28
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
   size_t n;

   //Size of the PPP header, in bytes
   n = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	617b      	str	r3, [r7, #20]

   //On reception, the Address and Control fields are decompressed by
   //examining the first two octets
   if(length >= 2)
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d90a      	bls.n	800c7c2 <pppParseFrameHeader+0x2c>
   {
      //If they contain the values 0xff and 0x03, they are assumed to be
      //the Address and Control fields. If not, it is assumed that the
      //fields were compressed and were not transmitted
      if(frame[0] == PPP_ADDR_FIELD && frame[1] == PPP_CTRL_FIELD)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	2bff      	cmp	r3, #255	; 0xff
 800c7b2:	d106      	bne.n	800c7c2 <pppParseFrameHeader+0x2c>
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	2b03      	cmp	r3, #3
 800c7bc:	d101      	bne.n	800c7c2 <pppParseFrameHeader+0x2c>
      {
         //Move to the Protocol field
         n = 2;
 800c7be:	2302      	movs	r3, #2
 800c7c0:	617b      	str	r3, [r7, #20]
      }
   }

   //Check the length of the PPP frame
   if(length >= (n + 1))
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d32f      	bcc.n	800c82c <pppParseFrameHeader+0x96>
   {
      //PPP Protocol field numbers are chosen such that some values may be
      //compressed into a single octet form which is clearly distinguishable
      //from the two octet form
      if(frame[n] & 0x01)
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	f003 0301 	and.w	r3, r3, #1
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00a      	beq.n	800c7f2 <pppParseFrameHeader+0x5c>
      {
         //The presence of a binary 1 as the LSB marks the last octet of
         //the Protocol field
         *protocol = frame[n];
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	801a      	strh	r2, [r3, #0]

         //Update the length of the header
         n++;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	617b      	str	r3, [r7, #20]
 800c7f0:	e01e      	b.n	800c830 <pppParseFrameHeader+0x9a>
      }
      else
      {
         //Check the length of the PPP frame
         if(length >= (n + 2))
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	3302      	adds	r3, #2
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d314      	bcc.n	800c826 <pppParseFrameHeader+0x90>
         {
            //The Protocol field is not compressed
            *protocol = (frame[n] << 8) | frame[n + 1];
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	4413      	add	r3, r2
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	021b      	lsls	r3, r3, #8
 800c806:	b21a      	sxth	r2, r3
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	3301      	adds	r3, #1
 800c80c:	68f9      	ldr	r1, [r7, #12]
 800c80e:	440b      	add	r3, r1
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	b21b      	sxth	r3, r3
 800c814:	4313      	orrs	r3, r2
 800c816:	b21b      	sxth	r3, r3
 800c818:	b29a      	uxth	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	801a      	strh	r2, [r3, #0]

            //Update the length of the header
            n += 2;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	3302      	adds	r3, #2
 800c822:	617b      	str	r3, [r7, #20]
 800c824:	e004      	b.n	800c830 <pppParseFrameHeader+0x9a>
         }
         else
         {
            //Malformed PPP frame
            n = 0;
 800c826:	2300      	movs	r3, #0
 800c828:	617b      	str	r3, [r7, #20]
 800c82a:	e001      	b.n	800c830 <pppParseFrameHeader+0x9a>
      }
   }
   else
   {
      //Malformed PPP frame
      n = 0;
 800c82c:	2300      	movs	r3, #0
 800c82e:	617b      	str	r3, [r7, #20]
   }

   //Return the size of the PPP header, in bytes
   return n;
 800c830:	697b      	ldr	r3, [r7, #20]
}
 800c832:	4618      	mov	r0, r3
 800c834:	371c      	adds	r7, #28
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
	...

0800c840 <pppCalcFcs>:
 * @param[in] length Number of bytes to process
 * @return Resulting FCS value
 **/

uint16_t pppCalcFcs(const uint8_t *data, size_t length)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
   size_t i;
   uint16_t fcs;

   //FCS preset value
   fcs = 0xFFFF;
 800c84a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c84e:	817b      	strh	r3, [r7, #10]

   //Loop through data
   for(i = 0; i < length; i++)
 800c850:	2300      	movs	r3, #0
 800c852:	60fb      	str	r3, [r7, #12]
 800c854:	e011      	b.n	800c87a <pppCalcFcs+0x3a>
   {
      //The message is processed byte by byte
      fcs = (fcs >> 8) ^ fcsTable[(fcs & 0xFF) ^ data[i]];
 800c856:	897b      	ldrh	r3, [r7, #10]
 800c858:	0a1b      	lsrs	r3, r3, #8
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	897b      	ldrh	r3, [r7, #10]
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	68f9      	ldr	r1, [r7, #12]
 800c864:	4401      	add	r1, r0
 800c866:	7809      	ldrb	r1, [r1, #0]
 800c868:	404b      	eors	r3, r1
 800c86a:	490a      	ldr	r1, [pc, #40]	; (800c894 <pppCalcFcs+0x54>)
 800c86c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c870:	4053      	eors	r3, r2
 800c872:	817b      	strh	r3, [r7, #10]
   for(i = 0; i < length; i++)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	3301      	adds	r3, #1
 800c878:	60fb      	str	r3, [r7, #12]
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d3e9      	bcc.n	800c856 <pppCalcFcs+0x16>
   }

   //Return 1's complement value
   return ~fcs;
 800c882:	897b      	ldrh	r3, [r7, #10]
 800c884:	43db      	mvns	r3, r3
 800c886:	b29b      	uxth	r3, r3
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3714      	adds	r7, #20
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr
 800c894:	0801c458 	.word	0x0801c458

0800c898 <pppCalcFcsEx>:
 * @param[in] length Number of bytes to process
 * @return Resulting FCS value
 **/

uint16_t pppCalcFcsEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 800c898:	b480      	push	{r7}
 800c89a:	b089      	sub	sp, #36	; 0x24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint16_t fcs;
   uint8_t *p;

   //FCS preset value
   fcs = 0xFFFF;
 800c8a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8a8:	82fb      	strh	r3, [r7, #22]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	61fb      	str	r3, [r7, #28]
 800c8ae:	e04a      	b.n	800c946 <pppCalcFcsEx+0xae>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	4413      	add	r3, r2
 800c8ba:	889b      	ldrh	r3, [r3, #4]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d233      	bcs.n	800c92c <pppCalcFcsEx+0x94>
      {
         //Point to the first data byte
         p = (uint8_t *) buffer->chunk[i].address + offset;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	3201      	adds	r2, #1
 800c8ca:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	613b      	str	r3, [r7, #16]
         //Compute the number of bytes to process
         n = MIN(buffer->chunk[i].length - offset, length);
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	00db      	lsls	r3, r3, #3
 800c8dc:	4413      	add	r3, r2
 800c8de:	889b      	ldrh	r3, [r3, #4]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	bf28      	it	cs
 800c8ec:	4613      	movcs	r3, r2
 800c8ee:	61bb      	str	r3, [r7, #24]
         //Adjust byte counter
         length -= n;
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	607b      	str	r3, [r7, #4]

         //Process current chunk
         while(n > 0)
 800c8f8:	e012      	b.n	800c920 <pppCalcFcsEx+0x88>
         {
            //The message is processed byte by byte
            fcs = (fcs >> 8) ^ fcsTable[(fcs & 0xFF) ^ *p];
 800c8fa:	8afb      	ldrh	r3, [r7, #22]
 800c8fc:	0a1b      	lsrs	r3, r3, #8
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	8afb      	ldrh	r3, [r7, #22]
 800c902:	b2db      	uxtb	r3, r3
 800c904:	6939      	ldr	r1, [r7, #16]
 800c906:	7809      	ldrb	r1, [r1, #0]
 800c908:	404b      	eors	r3, r1
 800c90a:	4917      	ldr	r1, [pc, #92]	; (800c968 <pppCalcFcsEx+0xd0>)
 800c90c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c910:	4053      	eors	r3, r2
 800c912:	82fb      	strh	r3, [r7, #22]

            //Next byte
            p++;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	3301      	adds	r3, #1
 800c918:	613b      	str	r3, [r7, #16]
            n--;
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	3b01      	subs	r3, #1
 800c91e:	61bb      	str	r3, [r7, #24]
         while(n > 0)
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1e9      	bne.n	800c8fa <pppCalcFcsEx+0x62>
         }

         //Process the next block from the start
         offset = 0;
 800c926:	2300      	movs	r3, #0
 800c928:	60bb      	str	r3, [r7, #8]
 800c92a:	e009      	b.n	800c940 <pppCalcFcsEx+0xa8>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	3301      	adds	r3, #1
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	4413      	add	r3, r2
 800c936:	889b      	ldrh	r3, [r3, #4]
 800c938:	461a      	mov	r2, r3
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	1a9b      	subs	r3, r3, r2
 800c93e:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	3301      	adds	r3, #1
 800c944:	61fb      	str	r3, [r7, #28]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	69fa      	ldr	r2, [r7, #28]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d202      	bcs.n	800c956 <pppCalcFcsEx+0xbe>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1ac      	bne.n	800c8b0 <pppCalcFcsEx+0x18>
      }
   }

   //Return 1's complement value
   return ~fcs;
 800c956:	8afb      	ldrh	r3, [r7, #22]
 800c958:	43db      	mvns	r3, r3
 800c95a:	b29b      	uxth	r3, r3
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3724      	adds	r7, #36	; 0x24
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr
 800c968:	0801c458 	.word	0x0801c458

0800c96c <pppAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *pppAllocBuffer(size_t length, size_t *offset)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;

   //Allocate a buffer to hold the Ethernet header and the payload
   buffer = netBufferAlloc(length + PPP_FRAME_HEADER_SIZE);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3304      	adds	r3, #4
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7f5 fd4a 	bl	8002414 <netBufferAlloc>
 800c980:	60f8      	str	r0, [r7, #12]
   //Failed to allocate buffer?
   if(buffer == NULL)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <pppAllocBuffer+0x20>
      return NULL;
 800c988:	2300      	movs	r3, #0
 800c98a:	e003      	b.n	800c994 <pppAllocBuffer+0x28>

   //Offset to the first byte of the payload
   *offset = PPP_FRAME_HEADER_SIZE;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	2204      	movs	r2, #4
 800c990:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 800c992:	68fb      	ldr	r3, [r7, #12]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <pppUpEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppUpEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <pppUpEvent+0x1a>
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d005      	beq.n	800c9c0 <pppUpEvent+0x24>
      break;
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800c9b4:	e012      	b.n	800c9dc <pppUpEvent+0x40>
      pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800c9b6:	2102      	movs	r1, #2
 800c9b8:	68b8      	ldr	r0, [r7, #8]
 800c9ba:	f000 fc4d 	bl	800d258 <pppChangeState>
      break;
 800c9be:	e00d      	b.n	800c9dc <pppUpEvent+0x40>
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	210a      	movs	r1, #10
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	4798      	blx	r3
      callbacks->sendConfigureReq(context);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	699b      	ldr	r3, [r3, #24]
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	4798      	blx	r3
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800c9d2:	2106      	movs	r1, #6
 800c9d4:	68b8      	ldr	r0, [r7, #8]
 800c9d6:	f000 fc3f 	bl	800d258 <pppChangeState>
      break;
 800c9da:	bf00      	nop
   }
}
 800c9dc:	bf00      	nop
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <pppDownEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppDownEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3b02      	subs	r3, #2
 800c9f6:	2b07      	cmp	r3, #7
 800c9f8:	d833      	bhi.n	800ca62 <pppDownEvent+0x7e>
 800c9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ca00 <pppDownEvent+0x1c>)
 800c9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca00:	0800ca21 	.word	0x0800ca21
 800ca04:	0800ca2b 	.word	0x0800ca2b
 800ca08:	0800ca3d 	.word	0x0800ca3d
 800ca0c:	0800ca47 	.word	0x0800ca47
 800ca10:	0800ca47 	.word	0x0800ca47
 800ca14:	0800ca47 	.word	0x0800ca47
 800ca18:	0800ca47 	.word	0x0800ca47
 800ca1c:	0800ca51 	.word	0x0800ca51
   {
   case PPP_STATE_2_CLOSED:
      //Switch to the Initial state
      pppChangeState(fsm, PPP_STATE_0_INITIAL);
 800ca20:	2100      	movs	r1, #0
 800ca22:	68b8      	ldr	r0, [r7, #8]
 800ca24:	f000 fc18 	bl	800d258 <pppChangeState>
      break;
 800ca28:	e01c      	b.n	800ca64 <pppDownEvent+0x80>
   case PPP_STATE_3_STOPPED:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	68b8      	ldr	r0, [r7, #8]
 800ca2e:	f000 fc13 	bl	800d258 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Starting state. The lower layer is needed for the link
      callbacks->thisLayerStarted(context);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	4798      	blx	r3
      break;
 800ca3a:	e013      	b.n	800ca64 <pppDownEvent+0x80>
   case PPP_STATE_4_CLOSING:
      //Switch to the Initial state
      pppChangeState(fsm, PPP_STATE_0_INITIAL);
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	68b8      	ldr	r0, [r7, #8]
 800ca40:	f000 fc0a 	bl	800d258 <pppChangeState>
      break;
 800ca44:	e00e      	b.n	800ca64 <pppDownEvent+0x80>
   case PPP_STATE_5_STOPPING:
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800ca46:	2101      	movs	r1, #1
 800ca48:	68b8      	ldr	r0, [r7, #8]
 800ca4a:	f000 fc05 	bl	800d258 <pppChangeState>
      break;
 800ca4e:	e009      	b.n	800ca64 <pppDownEvent+0x80>
   case PPP_STATE_9_OPENED:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800ca50:	2101      	movs	r1, #1
 800ca52:	68b8      	ldr	r0, [r7, #8]
 800ca54:	f000 fc00 	bl	800d258 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	4798      	blx	r3
      break;
 800ca60:	e000      	b.n	800ca64 <pppDownEvent+0x80>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800ca62:	bf00      	nop
   }
}
 800ca64:	bf00      	nop
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <pppOpenEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppOpenEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b09      	cmp	r3, #9
 800ca7e:	d833      	bhi.n	800cae8 <pppOpenEvent+0x7c>
 800ca80:	a201      	add	r2, pc, #4	; (adr r2, 800ca88 <pppOpenEvent+0x1c>)
 800ca82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca86:	bf00      	nop
 800ca88:	0800cab1 	.word	0x0800cab1
 800ca8c:	0800cae9 	.word	0x0800cae9
 800ca90:	0800cac3 	.word	0x0800cac3
 800ca94:	0800cae9 	.word	0x0800cae9
 800ca98:	0800cadf 	.word	0x0800cadf
 800ca9c:	0800cae9 	.word	0x0800cae9
 800caa0:	0800cae9 	.word	0x0800cae9
 800caa4:	0800cae9 	.word	0x0800cae9
 800caa8:	0800cae9 	.word	0x0800cae9
 800caac:	0800cae9 	.word	0x0800cae9
   {
   case PPP_STATE_0_INITIAL:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800cab0:	2101      	movs	r1, #1
 800cab2:	68b8      	ldr	r0, [r7, #8]
 800cab4:	f000 fbd0 	bl	800d258 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Starting state. The lower layer is needed for the link
      callbacks->thisLayerStarted(context);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	4798      	blx	r3
      break;
 800cac0:	e013      	b.n	800caea <pppOpenEvent+0x7e>
   case PPP_STATE_1_STARTING:
      //Stay in current state
      break;
   case PPP_STATE_2_CLOSED:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	210a      	movs	r1, #10
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	4798      	blx	r3
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800cad4:	2106      	movs	r1, #6
 800cad6:	68b8      	ldr	r0, [r7, #8]
 800cad8:	f000 fbbe 	bl	800d258 <pppChangeState>
      break;
 800cadc:	e005      	b.n	800caea <pppOpenEvent+0x7e>
   case PPP_STATE_3_STOPPED:
      //Stay in current state
      break;
   case PPP_STATE_4_CLOSING:
      //Switch to the Stopping state
      pppChangeState(fsm, PPP_STATE_5_STOPPING);
 800cade:	2105      	movs	r1, #5
 800cae0:	68b8      	ldr	r0, [r7, #8]
 800cae2:	f000 fbb9 	bl	800d258 <pppChangeState>
      break;
 800cae6:	e000      	b.n	800caea <pppOpenEvent+0x7e>
      break;
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800cae8:	bf00      	nop
   }
}
 800caea:	bf00      	nop
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop

0800caf4 <pppCloseEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppCloseEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b09      	cmp	r3, #9
 800cb06:	d84a      	bhi.n	800cb9e <pppCloseEvent+0xaa>
 800cb08:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <pppCloseEvent+0x1c>)
 800cb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0e:	bf00      	nop
 800cb10:	0800cb9f 	.word	0x0800cb9f
 800cb14:	0800cb39 	.word	0x0800cb39
 800cb18:	0800cb9f 	.word	0x0800cb9f
 800cb1c:	0800cb4b 	.word	0x0800cb4b
 800cb20:	0800cb9f 	.word	0x0800cb9f
 800cb24:	0800cb55 	.word	0x0800cb55
 800cb28:	0800cb5f 	.word	0x0800cb5f
 800cb2c:	0800cb5f 	.word	0x0800cb5f
 800cb30:	0800cb5f 	.word	0x0800cb5f
 800cb34:	0800cb7b 	.word	0x0800cb7b
   case PPP_STATE_0_INITIAL:
      //Stay in current state
      break;
   case PPP_STATE_1_STARTING:
      //Switch to the Initial state
      pppChangeState(fsm, PPP_STATE_0_INITIAL);
 800cb38:	2100      	movs	r1, #0
 800cb3a:	68b8      	ldr	r0, [r7, #8]
 800cb3c:	f000 fb8c 	bl	800d258 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Initial, Closed or Stopped states. The lower layer is no longer
      //needed for the link
      callbacks->thisLayerFinished(context);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	4798      	blx	r3
      break;
 800cb48:	e02a      	b.n	800cba0 <pppCloseEvent+0xac>
   case PPP_STATE_2_CLOSED:
      //Stay in current state
      break;
   case PPP_STATE_3_STOPPED:
      //Switch to the Closed state
      pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800cb4a:	2102      	movs	r1, #2
 800cb4c:	68b8      	ldr	r0, [r7, #8]
 800cb4e:	f000 fb83 	bl	800d258 <pppChangeState>
      break;
 800cb52:	e025      	b.n	800cba0 <pppCloseEvent+0xac>
   case PPP_STATE_4_CLOSING:
      //Stay in current state
      break;
   case PPP_STATE_5_STOPPING:
      //Switch to the Closing state
      pppChangeState(fsm, PPP_STATE_4_CLOSING);
 800cb54:	2104      	movs	r1, #4
 800cb56:	68b8      	ldr	r0, [r7, #8]
 800cb58:	f000 fb7e 	bl	800d258 <pppChangeState>
      break;
 800cb5c:	e020      	b.n	800cba0 <pppCloseEvent+0xac>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_TERMINATE);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	2102      	movs	r1, #2
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	4798      	blx	r3
      //Send Terminate-Request packet
      callbacks->sendTerminateReq(context);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	4798      	blx	r3
      //Switch to the Closing state
      pppChangeState(fsm, PPP_STATE_4_CLOSING);
 800cb70:	2104      	movs	r1, #4
 800cb72:	68b8      	ldr	r0, [r7, #8]
 800cb74:	f000 fb70 	bl	800d258 <pppChangeState>
      break;
 800cb78:	e012      	b.n	800cba0 <pppCloseEvent+0xac>
   case PPP_STATE_9_OPENED:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_TERMINATE);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	2102      	movs	r1, #2
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	4798      	blx	r3
      //Send Terminate-Request packet
      callbacks->sendTerminateReq(context);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	4798      	blx	r3
      //Switch to the Closing state
      pppChangeState(fsm, PPP_STATE_4_CLOSING);
 800cb8c:	2104      	movs	r1, #4
 800cb8e:	68b8      	ldr	r0, [r7, #8]
 800cb90:	f000 fb62 	bl	800d258 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	4798      	blx	r3
      break;
 800cb9c:	e000      	b.n	800cba0 <pppCloseEvent+0xac>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800cb9e:	bf00      	nop
   }
}
 800cba0:	bf00      	nop
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <pppTimeoutEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppTimeoutEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
   //The restart counter is greater than zero (TO+ event)
   if(fsm->restartCounter > 0)
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d024      	beq.n	800cc06 <pppTimeoutEvent+0x5e>
   {
      //Check current state
      switch(fsm->state)
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3b04      	subs	r3, #4
 800cbc2:	2b04      	cmp	r3, #4
 800cbc4:	d83a      	bhi.n	800cc3c <pppTimeoutEvent+0x94>
 800cbc6:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <pppTimeoutEvent+0x24>)
 800cbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbcc:	0800cbe1 	.word	0x0800cbe1
 800cbd0:	0800cbe1 	.word	0x0800cbe1
 800cbd4:	0800cbeb 	.word	0x0800cbeb
 800cbd8:	0800cbeb 	.word	0x0800cbeb
 800cbdc:	0800cbfd 	.word	0x0800cbfd
      {
      case PPP_STATE_4_CLOSING:
      case PPP_STATE_5_STOPPING:
         //Send Terminate-Request packet
         callbacks->sendTerminateReq(context);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	4798      	blx	r3
         //Stay in current state
         break;
 800cbe8:	e02b      	b.n	800cc42 <pppTimeoutEvent+0x9a>
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
         //Send Configuration-Request packet
         callbacks->sendConfigureReq(context);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	699b      	ldr	r3, [r3, #24]
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800cbf2:	2106      	movs	r1, #6
 800cbf4:	68b8      	ldr	r0, [r7, #8]
 800cbf6:	f000 fb2f 	bl	800d258 <pppChangeState>
         break;
 800cbfa:	e022      	b.n	800cc42 <pppTimeoutEvent+0x9a>
      case PPP_STATE_8_ACK_SENT:
         //Send Configuration-Request packet
         callbacks->sendConfigureReq(context);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	699b      	ldr	r3, [r3, #24]
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	4798      	blx	r3
         //Stay in current state
         break;
 800cc04:	e01d      	b.n	800cc42 <pppTimeoutEvent+0x9a>
   }
   //The restart counter is not greater than zero (TO- event)
   else
   {
      //Check current state
      switch(fsm->state)
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2b04      	cmp	r3, #4
 800cc0c:	d004      	beq.n	800cc18 <pppTimeoutEvent+0x70>
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d316      	bcc.n	800cc40 <pppTimeoutEvent+0x98>
 800cc12:	2b08      	cmp	r3, #8
 800cc14:	d814      	bhi.n	800cc40 <pppTimeoutEvent+0x98>
 800cc16:	e008      	b.n	800cc2a <pppTimeoutEvent+0x82>
      {
      case PPP_STATE_4_CLOSING:
         //Switch to the Closed state
         pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800cc18:	2102      	movs	r1, #2
 800cc1a:	68b8      	ldr	r0, [r7, #8]
 800cc1c:	f000 fb1c 	bl	800d258 <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	4798      	blx	r3
         break;
 800cc28:	e00b      	b.n	800cc42 <pppTimeoutEvent+0x9a>
      case PPP_STATE_5_STOPPING:
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
      case PPP_STATE_8_ACK_SENT:
         //Switch to the Stopped state
         pppChangeState(fsm, PPP_STATE_3_STOPPED);
 800cc2a:	2103      	movs	r1, #3
 800cc2c:	68b8      	ldr	r0, [r7, #8]
 800cc2e:	f000 fb13 	bl	800d258 <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	4798      	blx	r3
         break;
 800cc3a:	e002      	b.n	800cc42 <pppTimeoutEvent+0x9a>
         break;
 800cc3c:	bf00      	nop
 800cc3e:	e000      	b.n	800cc42 <pppTimeoutEvent+0x9a>
      default:
         //This event cannot occur in a properly implemented automaton.
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
 800cc40:	bf00      	nop
      }
   }
}
 800cc42:	bf00      	nop
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop

0800cc4c <pppRcvConfigureReqEvent>:
 * @param[in] code Tells whether the configuration options are acceptable
 **/

void pppRcvConfigureReqEvent(PppContext *context, PppFsm *fsm, const PppCallbacks *callbacks,
   const PppConfigurePacket *configureReqPacket, PppCode code)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
 800cc58:	603b      	str	r3, [r7, #0]
   //Check whether the configuration options are acceptable
   if(code == PPP_CODE_CONFIGURE_ACK)
 800cc5a:	7e3b      	ldrb	r3, [r7, #24]
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d162      	bne.n	800cd26 <pppRcvConfigureReqEvent+0xda>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      switch(fsm->state)
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	3b02      	subs	r3, #2
 800cc66:	2b07      	cmp	r3, #7
 800cc68:	f200 810b 	bhi.w	800ce82 <pppRcvConfigureReqEvent+0x236>
 800cc6c:	a201      	add	r2, pc, #4	; (adr r2, 800cc74 <pppRcvConfigureReqEvent+0x28>)
 800cc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc72:	bf00      	nop
 800cc74:	0800cc95 	.word	0x0800cc95
 800cc78:	0800cca1 	.word	0x0800cca1
 800cc7c:	0800ce83 	.word	0x0800ce83
 800cc80:	0800ce83 	.word	0x0800ce83
 800cc84:	0800ccc7 	.word	0x0800ccc7
 800cc88:	0800ccdb 	.word	0x0800ccdb
 800cc8c:	0800ccf7 	.word	0x0800ccf7
 800cc90:	0800cd03 	.word	0x0800cd03
      {
      case PPP_STATE_2_CLOSED:
         //Send Terminate-Ack packet
         callbacks->sendTerminateAck(context, NULL);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	2100      	movs	r1, #0
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	4798      	blx	r3
         //Stay in current state
         break;
 800cc9e:	e0f7      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_3_STOPPED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	210a      	movs	r1, #10
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	4798      	blx	r3
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	4798      	blx	r3
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	69db      	ldr	r3, [r3, #28]
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	4798      	blx	r3
         //Switch to the Ack-Sent state
         pppChangeState(fsm, PPP_STATE_8_ACK_SENT);
 800ccbc:	2108      	movs	r1, #8
 800ccbe:	68b8      	ldr	r0, [r7, #8]
 800ccc0:	f000 faca 	bl	800d258 <pppChangeState>
         break;
 800ccc4:	e0e4      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_5_STOPPING:
         //Stay in current state
         break;
      case PPP_STATE_6_REQ_SENT:
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	6839      	ldr	r1, [r7, #0]
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	4798      	blx	r3
         //Switch to the Ack-Sent state
         pppChangeState(fsm, PPP_STATE_8_ACK_SENT);
 800ccd0:	2108      	movs	r1, #8
 800ccd2:	68b8      	ldr	r0, [r7, #8]
 800ccd4:	f000 fac0 	bl	800d258 <pppChangeState>
         break;
 800ccd8:	e0da      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_7_ACK_RCVD:
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	69db      	ldr	r3, [r3, #28]
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	4798      	blx	r3
         //Switch to the Opened state
         pppChangeState(fsm, PPP_STATE_9_OPENED);
 800cce4:	2109      	movs	r1, #9
 800cce6:	68b8      	ldr	r0, [r7, #8]
 800cce8:	f000 fab6 	bl	800d258 <pppChangeState>
         //Indicate to the upper layers that the automaton is entering the
         //Opened state. The link is available for network traffic
         callbacks->thisLayerUp(context);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	4798      	blx	r3
         break;
 800ccf4:	e0cc      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_8_ACK_SENT:
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	6839      	ldr	r1, [r7, #0]
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	4798      	blx	r3
         //Stay in current state
         break;
 800cd00:	e0c6      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_9_OPENED:
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	699b      	ldr	r3, [r3, #24]
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	4798      	blx	r3
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	6839      	ldr	r1, [r7, #0]
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	4798      	blx	r3
         //Switch to the Ack-Sent state
         pppChangeState(fsm, PPP_STATE_8_ACK_SENT);
 800cd14:	2108      	movs	r1, #8
 800cd16:	68b8      	ldr	r0, [r7, #8]
 800cd18:	f000 fa9e 	bl	800d258 <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	4798      	blx	r3
         break;
 800cd24:	e0b4      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
      }
   }
   else if(code == PPP_CODE_CONFIGURE_NAK)
 800cd26:	7e3b      	ldrb	r3, [r7, #24]
 800cd28:	2b03      	cmp	r3, #3
 800cd2a:	d154      	bne.n	800cdd6 <pppRcvConfigureReqEvent+0x18a>
   {
      //If all configuration options are recognizable, but some values are not
      //acceptable, then the implementation must transmit a Configure-Nak
      switch(fsm->state)
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	3b02      	subs	r3, #2
 800cd32:	2b07      	cmp	r3, #7
 800cd34:	f200 80a7 	bhi.w	800ce86 <pppRcvConfigureReqEvent+0x23a>
 800cd38:	a201      	add	r2, pc, #4	; (adr r2, 800cd40 <pppRcvConfigureReqEvent+0xf4>)
 800cd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3e:	bf00      	nop
 800cd40:	0800cd61 	.word	0x0800cd61
 800cd44:	0800cd6d 	.word	0x0800cd6d
 800cd48:	0800ce87 	.word	0x0800ce87
 800cd4c:	0800ce87 	.word	0x0800ce87
 800cd50:	0800cd93 	.word	0x0800cd93
 800cd54:	0800cd93 	.word	0x0800cd93
 800cd58:	0800cd9f 	.word	0x0800cd9f
 800cd5c:	0800cdb3 	.word	0x0800cdb3
      {
      case PPP_STATE_2_CLOSED:
         //Send Terminate-Ack packet
         callbacks->sendTerminateAck(context, NULL);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd64:	2100      	movs	r1, #0
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	4798      	blx	r3
         //Stay in current state
         break;
 800cd6a:	e091      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_3_STOPPED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	210a      	movs	r1, #10
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	4798      	blx	r3
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	4798      	blx	r3
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	6839      	ldr	r1, [r7, #0]
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800cd88:	2106      	movs	r1, #6
 800cd8a:	68b8      	ldr	r0, [r7, #8]
 800cd8c:	f000 fa64 	bl	800d258 <pppChangeState>
         break;
 800cd90:	e07e      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
         //Stay in current state
         break;
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6a1b      	ldr	r3, [r3, #32]
 800cd96:	6839      	ldr	r1, [r7, #0]
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	4798      	blx	r3
         //Stay in current state
         break;
 800cd9c:	e078      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_8_ACK_SENT:
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	6839      	ldr	r1, [r7, #0]
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800cda8:	2106      	movs	r1, #6
 800cdaa:	68b8      	ldr	r0, [r7, #8]
 800cdac:	f000 fa54 	bl	800d258 <pppChangeState>
         break;
 800cdb0:	e06e      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_9_OPENED:
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	4798      	blx	r3
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a1b      	ldr	r3, [r3, #32]
 800cdbe:	6839      	ldr	r1, [r7, #0]
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800cdc4:	2106      	movs	r1, #6
 800cdc6:	68b8      	ldr	r0, [r7, #8]
 800cdc8:	f000 fa46 	bl	800d258 <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	4798      	blx	r3
         break;
 800cdd4:	e05c      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
      }
   }
   else if(code == PPP_CODE_CONFIGURE_REJ)
 800cdd6:	7e3b      	ldrb	r3, [r7, #24]
 800cdd8:	2b04      	cmp	r3, #4
 800cdda:	d156      	bne.n	800ce8a <pppRcvConfigureReqEvent+0x23e>
   {
      //If some configuration options received in the Configure-Request are not
      //recognizable or not acceptable for negotiation, then the implementation
      //must transmit a Configure-Reject
      switch(fsm->state)
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3b02      	subs	r3, #2
 800cde2:	2b07      	cmp	r3, #7
 800cde4:	d853      	bhi.n	800ce8e <pppRcvConfigureReqEvent+0x242>
 800cde6:	a201      	add	r2, pc, #4	; (adr r2, 800cdec <pppRcvConfigureReqEvent+0x1a0>)
 800cde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdec:	0800ce0d 	.word	0x0800ce0d
 800cdf0:	0800ce19 	.word	0x0800ce19
 800cdf4:	0800ce8f 	.word	0x0800ce8f
 800cdf8:	0800ce8f 	.word	0x0800ce8f
 800cdfc:	0800ce3f 	.word	0x0800ce3f
 800ce00:	0800ce3f 	.word	0x0800ce3f
 800ce04:	0800ce4b 	.word	0x0800ce4b
 800ce08:	0800ce5f 	.word	0x0800ce5f
      {
      case PPP_STATE_2_CLOSED:
         //Send Terminate-Ack packet
         callbacks->sendTerminateAck(context, NULL);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce10:	2100      	movs	r1, #0
 800ce12:	68f8      	ldr	r0, [r7, #12]
 800ce14:	4798      	blx	r3
         //Stay in current state
         break;
 800ce16:	e03b      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_3_STOPPED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	210a      	movs	r1, #10
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	4798      	blx	r3
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	4798      	blx	r3
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce2e:	6839      	ldr	r1, [r7, #0]
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800ce34:	2106      	movs	r1, #6
 800ce36:	68b8      	ldr	r0, [r7, #8]
 800ce38:	f000 fa0e 	bl	800d258 <pppChangeState>
         break;
 800ce3c:	e028      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
         //Stay in current state
         break;
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce42:	6839      	ldr	r1, [r7, #0]
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	4798      	blx	r3
         //Stay in current state
         break;
 800ce48:	e022      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_8_ACK_SENT:
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800ce54:	2106      	movs	r1, #6
 800ce56:	68b8      	ldr	r0, [r7, #8]
 800ce58:	f000 f9fe 	bl	800d258 <pppChangeState>
         break;
 800ce5c:	e018      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_9_OPENED:
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	699b      	ldr	r3, [r3, #24]
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	4798      	blx	r3
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800ce70:	2106      	movs	r1, #6
 800ce72:	68b8      	ldr	r0, [r7, #8]
 800ce74:	f000 f9f0 	bl	800d258 <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	4798      	blx	r3
         break;
 800ce80:	e006      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
         break;
 800ce82:	bf00      	nop
 800ce84:	e004      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
         break;
 800ce86:	bf00      	nop
 800ce88:	e002      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
         //This event cannot occur in a properly implemented automaton.
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
      }
   }
 800ce8a:	bf00      	nop
 800ce8c:	e000      	b.n	800ce90 <pppRcvConfigureReqEvent+0x244>
         break;
 800ce8e:	bf00      	nop
}
 800ce90:	bf00      	nop
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <pppRcvConfigureAckEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppRcvConfigureAckEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	3b02      	subs	r3, #2
 800ceaa:	2b07      	cmp	r3, #7
 800ceac:	d845      	bhi.n	800cf3a <pppRcvConfigureAckEvent+0xa2>
 800ceae:	a201      	add	r2, pc, #4	; (adr r2, 800ceb4 <pppRcvConfigureAckEvent+0x1c>)
 800ceb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb4:	0800ced5 	.word	0x0800ced5
 800ceb8:	0800ced5 	.word	0x0800ced5
 800cebc:	0800cf3b 	.word	0x0800cf3b
 800cec0:	0800cf3b 	.word	0x0800cf3b
 800cec4:	0800cee1 	.word	0x0800cee1
 800cec8:	0800cef3 	.word	0x0800cef3
 800cecc:	0800cf05 	.word	0x0800cf05
 800ced0:	0800cf21 	.word	0x0800cf21
   {
   case PPP_STATE_2_CLOSED:
   case PPP_STATE_3_STOPPED:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, NULL);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	2100      	movs	r1, #0
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	4798      	blx	r3
      //Stay in current state
      break;
 800cede:	e02d      	b.n	800cf3c <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_5_STOPPING:
      //Stay in current state
      break;
   case PPP_STATE_6_REQ_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	210a      	movs	r1, #10
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	4798      	blx	r3
      //Switch to the Ack-Rcvd state
      fsm->state = PPP_STATE_7_ACK_RCVD;
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2207      	movs	r2, #7
 800ceee:	601a      	str	r2, [r3, #0]
      break;
 800cef0:	e024      	b.n	800cf3c <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_7_ACK_RCVD:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800cefa:	2106      	movs	r1, #6
 800cefc:	68b8      	ldr	r0, [r7, #8]
 800cefe:	f000 f9ab 	bl	800d258 <pppChangeState>
      break;
 800cf02:	e01b      	b.n	800cf3c <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_8_ACK_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	210a      	movs	r1, #10
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	4798      	blx	r3
      //Switch to the Opened state
      pppChangeState(fsm, PPP_STATE_9_OPENED);
 800cf0e:	2109      	movs	r1, #9
 800cf10:	68b8      	ldr	r0, [r7, #8]
 800cf12:	f000 f9a1 	bl	800d258 <pppChangeState>
      //Indicate to the upper layers that the automaton is entering the
      //Opened state. The link is available for network traffic
      callbacks->thisLayerUp(context);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	4798      	blx	r3
      break;
 800cf1e:	e00d      	b.n	800cf3c <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_9_OPENED:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800cf28:	2106      	movs	r1, #6
 800cf2a:	68b8      	ldr	r0, [r7, #8]
 800cf2c:	f000 f994 	bl	800d258 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	4798      	blx	r3
      break;
 800cf38:	e000      	b.n	800cf3c <pppRcvConfigureAckEvent+0xa4>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800cf3a:	bf00      	nop
   }
}
 800cf3c:	bf00      	nop
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <pppRcvConfigureNakEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppRcvConfigureNakEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	3b02      	subs	r3, #2
 800cf56:	2b07      	cmp	r3, #7
 800cf58:	d842      	bhi.n	800cfe0 <pppRcvConfigureNakEvent+0x9c>
 800cf5a:	a201      	add	r2, pc, #4	; (adr r2, 800cf60 <pppRcvConfigureNakEvent+0x1c>)
 800cf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf60:	0800cf81 	.word	0x0800cf81
 800cf64:	0800cf81 	.word	0x0800cf81
 800cf68:	0800cfe1 	.word	0x0800cfe1
 800cf6c:	0800cfe1 	.word	0x0800cfe1
 800cf70:	0800cf8d 	.word	0x0800cf8d
 800cf74:	0800cfa1 	.word	0x0800cfa1
 800cf78:	0800cfb3 	.word	0x0800cfb3
 800cf7c:	0800cfc7 	.word	0x0800cfc7
   {
   case PPP_STATE_2_CLOSED:
   case PPP_STATE_3_STOPPED:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, NULL);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	2100      	movs	r1, #0
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	4798      	blx	r3
      //Stay in current state
      break;
 800cf8a:	e02a      	b.n	800cfe2 <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_5_STOPPING:
      //Stay in current state
      break;
   case PPP_STATE_6_REQ_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	210a      	movs	r1, #10
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	4798      	blx	r3
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	699b      	ldr	r3, [r3, #24]
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	4798      	blx	r3
      //Stay in current state
      break;
 800cf9e:	e020      	b.n	800cfe2 <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_7_ACK_RCVD:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	699b      	ldr	r3, [r3, #24]
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800cfa8:	2106      	movs	r1, #6
 800cfaa:	68b8      	ldr	r0, [r7, #8]
 800cfac:	f000 f954 	bl	800d258 <pppChangeState>
      break;
 800cfb0:	e017      	b.n	800cfe2 <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_8_ACK_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	210a      	movs	r1, #10
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	4798      	blx	r3
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	699b      	ldr	r3, [r3, #24]
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	4798      	blx	r3
      //Stay in current state
      break;
 800cfc4:	e00d      	b.n	800cfe2 <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_9_OPENED:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	699b      	ldr	r3, [r3, #24]
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800cfce:	2106      	movs	r1, #6
 800cfd0:	68b8      	ldr	r0, [r7, #8]
 800cfd2:	f000 f941 	bl	800d258 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	4798      	blx	r3
      break;
 800cfde:	e000      	b.n	800cfe2 <pppRcvConfigureNakEvent+0x9e>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800cfe0:	bf00      	nop
   }
}
 800cfe2:	bf00      	nop
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop

0800cfec <pppRcvTerminateReqEvent>:
 * @param[in] terminateReqPacket Terminate-Request packet received from the peer
 **/

void pppRcvTerminateReqEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, const PppTerminatePacket *terminateReqPacket)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
 800cff8:	603b      	str	r3, [r7, #0]
   //Check current state
   switch(fsm->state)
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	3b02      	subs	r3, #2
 800d000:	2b07      	cmp	r3, #7
 800d002:	d835      	bhi.n	800d070 <pppRcvTerminateReqEvent+0x84>
 800d004:	a201      	add	r2, pc, #4	; (adr r2, 800d00c <pppRcvTerminateReqEvent+0x20>)
 800d006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00a:	bf00      	nop
 800d00c:	0800d02d 	.word	0x0800d02d
 800d010:	0800d02d 	.word	0x0800d02d
 800d014:	0800d02d 	.word	0x0800d02d
 800d018:	0800d02d 	.word	0x0800d02d
 800d01c:	0800d039 	.word	0x0800d039
 800d020:	0800d039 	.word	0x0800d039
 800d024:	0800d039 	.word	0x0800d039
 800d028:	0800d04d 	.word	0x0800d04d
   case PPP_STATE_2_CLOSED:
   case PPP_STATE_3_STOPPED:
   case PPP_STATE_4_CLOSING:
   case PPP_STATE_5_STOPPING:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, terminateReqPacket);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	4798      	blx	r3
      //Stay in current state
      break;
 800d036:	e01c      	b.n	800d072 <pppRcvTerminateReqEvent+0x86>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, terminateReqPacket);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03c:	6839      	ldr	r1, [r7, #0]
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800d042:	2106      	movs	r1, #6
 800d044:	68b8      	ldr	r0, [r7, #8]
 800d046:	f000 f907 	bl	800d258 <pppChangeState>
      break;
 800d04a:	e012      	b.n	800d072 <pppRcvTerminateReqEvent+0x86>
   case PPP_STATE_9_OPENED:
      //Zero restart counter
      callbacks->zeroRestartCount(context);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	695b      	ldr	r3, [r3, #20]
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	4798      	blx	r3
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, terminateReqPacket);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	4798      	blx	r3
      //Switch to the Stopping state
      pppChangeState(fsm, PPP_STATE_5_STOPPING);
 800d05e:	2105      	movs	r1, #5
 800d060:	68b8      	ldr	r0, [r7, #8]
 800d062:	f000 f8f9 	bl	800d258 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	4798      	blx	r3
      break;
 800d06e:	e000      	b.n	800d072 <pppRcvTerminateReqEvent+0x86>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800d070:	bf00      	nop
   }
}
 800d072:	bf00      	nop
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop

0800d07c <pppRcvTerminateAckEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppRcvTerminateAckEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	3b02      	subs	r3, #2
 800d08e:	2b07      	cmp	r3, #7
 800d090:	d836      	bhi.n	800d100 <pppRcvTerminateAckEvent+0x84>
 800d092:	a201      	add	r2, pc, #4	; (adr r2, 800d098 <pppRcvTerminateAckEvent+0x1c>)
 800d094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d098:	0800d101 	.word	0x0800d101
 800d09c:	0800d101 	.word	0x0800d101
 800d0a0:	0800d0b9 	.word	0x0800d0b9
 800d0a4:	0800d0cb 	.word	0x0800d0cb
 800d0a8:	0800d0dd 	.word	0x0800d0dd
 800d0ac:	0800d0dd 	.word	0x0800d0dd
 800d0b0:	0800d101 	.word	0x0800d101
 800d0b4:	0800d0e7 	.word	0x0800d0e7
   case PPP_STATE_3_STOPPED:
      //Stay in current state
      break;
   case PPP_STATE_4_CLOSING:
      //Switch to the Closed state
      pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800d0b8:	2102      	movs	r1, #2
 800d0ba:	68b8      	ldr	r0, [r7, #8]
 800d0bc:	f000 f8cc 	bl	800d258 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Initial, Closed or Stopped states. The lower layer is no longer
      //needed for the link
      callbacks->thisLayerFinished(context);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	4798      	blx	r3
      break;
 800d0c8:	e01b      	b.n	800d102 <pppRcvTerminateAckEvent+0x86>
   case PPP_STATE_5_STOPPING:
      //Switch to the Stopped state
      pppChangeState(fsm, PPP_STATE_3_STOPPED);
 800d0ca:	2103      	movs	r1, #3
 800d0cc:	68b8      	ldr	r0, [r7, #8]
 800d0ce:	f000 f8c3 	bl	800d258 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Initial, Closed or Stopped states. The lower layer is no longer
      //needed for the link
      callbacks->thisLayerFinished(context);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	4798      	blx	r3
      break;
 800d0da:	e012      	b.n	800d102 <pppRcvTerminateAckEvent+0x86>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800d0dc:	2106      	movs	r1, #6
 800d0de:	68b8      	ldr	r0, [r7, #8]
 800d0e0:	f000 f8ba 	bl	800d258 <pppChangeState>
      break;
 800d0e4:	e00d      	b.n	800d102 <pppRcvTerminateAckEvent+0x86>
   case PPP_STATE_8_ACK_SENT:
      //Stay in current state
      break;
   case PPP_STATE_9_OPENED:
      //Send Configure-Req packet
      callbacks->sendConfigureReq(context);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800d0ee:	2106      	movs	r1, #6
 800d0f0:	68b8      	ldr	r0, [r7, #8]
 800d0f2:	f000 f8b1 	bl	800d258 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	4798      	blx	r3
      break;
 800d0fe:	e000      	b.n	800d102 <pppRcvTerminateAckEvent+0x86>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800d100:	bf00      	nop
   }
}
 800d102:	bf00      	nop
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop

0800d10c <pppRcvUnknownCodeEvent>:
 * @param[in] packet Un-interpretable packet received from the peer
 **/

void pppRcvUnknownCodeEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, const PppPacket *packet)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
 800d118:	603b      	str	r3, [r7, #0]
   //Check current state
   switch(fsm->state)
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	3b02      	subs	r3, #2
 800d120:	2b07      	cmp	r3, #7
 800d122:	d805      	bhi.n	800d130 <pppRcvUnknownCodeEvent+0x24>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
   case PPP_STATE_9_OPENED:
      //Send Reject-Code packet
      callbacks->sendCodeRej(context, packet);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d128:	6839      	ldr	r1, [r7, #0]
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	4798      	blx	r3
      //Stay in current state
      break;
 800d12e:	e000      	b.n	800d132 <pppRcvUnknownCodeEvent+0x26>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800d130:	bf00      	nop
   }
}
 800d132:	bf00      	nop
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <pppRcvCodeRejEvent>:
 *   is acceptable or catastrophic
 **/

void pppRcvCodeRejEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, bool_t acceptable)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
   //Check whether the rejected value is acceptable or catastrophic
   if(acceptable)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d01c      	beq.n	800d18a <pppRcvCodeRejEvent+0x4e>
   {
      //The RXJ+ event arises when the rejected value is acceptable, such
      //as a Code-Reject of an extended code, or a Protocol-Reject of a
      //NCP. These are within the scope of normal operation
      switch(fsm->state)
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	3b02      	subs	r3, #2
 800d156:	2b07      	cmp	r3, #7
 800d158:	d859      	bhi.n	800d20e <pppRcvCodeRejEvent+0xd2>
 800d15a:	a201      	add	r2, pc, #4	; (adr r2, 800d160 <pppRcvCodeRejEvent+0x24>)
 800d15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d160:	0800d20f 	.word	0x0800d20f
 800d164:	0800d20f 	.word	0x0800d20f
 800d168:	0800d20f 	.word	0x0800d20f
 800d16c:	0800d20f 	.word	0x0800d20f
 800d170:	0800d20f 	.word	0x0800d20f
 800d174:	0800d181 	.word	0x0800d181
 800d178:	0800d20f 	.word	0x0800d20f
 800d17c:	0800d20f 	.word	0x0800d20f
      case PPP_STATE_6_REQ_SENT:
         //Stay in current state
         break;
      case PPP_STATE_7_ACK_RCVD:
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800d180:	2106      	movs	r1, #6
 800d182:	68b8      	ldr	r0, [r7, #8]
 800d184:	f000 f868 	bl	800d258 <pppChangeState>
         break;
 800d188:	e044      	b.n	800d214 <pppRcvCodeRejEvent+0xd8>
   {
      //The RXJ- event arises when the rejected value is catastrophic,
      //such as a Code-Reject of Configure-Request, or a Protocol-Reject
      //of LCP! This event communicates an unrecoverable error that
      //terminates the connection
      switch(fsm->state)
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	3b02      	subs	r3, #2
 800d190:	2b07      	cmp	r3, #7
 800d192:	d83e      	bhi.n	800d212 <pppRcvCodeRejEvent+0xd6>
 800d194:	a201      	add	r2, pc, #4	; (adr r2, 800d19c <pppRcvCodeRejEvent+0x60>)
 800d196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19a:	bf00      	nop
 800d19c:	0800d1bd 	.word	0x0800d1bd
 800d1a0:	0800d1bd 	.word	0x0800d1bd
 800d1a4:	0800d1c7 	.word	0x0800d1c7
 800d1a8:	0800d1d9 	.word	0x0800d1d9
 800d1ac:	0800d1d9 	.word	0x0800d1d9
 800d1b0:	0800d1d9 	.word	0x0800d1d9
 800d1b4:	0800d1d9 	.word	0x0800d1d9
 800d1b8:	0800d1eb 	.word	0x0800d1eb
      case PPP_STATE_2_CLOSED:
      case PPP_STATE_3_STOPPED:
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	4798      	blx	r3
         //Stay in current state
         break;
 800d1c4:	e026      	b.n	800d214 <pppRcvCodeRejEvent+0xd8>
      case PPP_STATE_4_CLOSING:
         //Switch to the Closed state
         pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800d1c6:	2102      	movs	r1, #2
 800d1c8:	68b8      	ldr	r0, [r7, #8]
 800d1ca:	f000 f845 	bl	800d258 <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	4798      	blx	r3
         break;
 800d1d6:	e01d      	b.n	800d214 <pppRcvCodeRejEvent+0xd8>
      case PPP_STATE_5_STOPPING:
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
      case PPP_STATE_8_ACK_SENT:
         //Switch to the Stopped state
         pppChangeState(fsm, PPP_STATE_3_STOPPED);
 800d1d8:	2103      	movs	r1, #3
 800d1da:	68b8      	ldr	r0, [r7, #8]
 800d1dc:	f000 f83c 	bl	800d258 <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	4798      	blx	r3
         break;
 800d1e8:	e014      	b.n	800d214 <pppRcvCodeRejEvent+0xd8>
      case PPP_STATE_9_OPENED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_TERMINATE);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	2102      	movs	r1, #2
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	4798      	blx	r3
         //Send Terminate-Req packet
         callbacks->sendTerminateReq(context);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	4798      	blx	r3
         //Switch to the Stopping state
         pppChangeState(fsm, PPP_STATE_5_STOPPING);
 800d1fc:	2105      	movs	r1, #5
 800d1fe:	68b8      	ldr	r0, [r7, #8]
 800d200:	f000 f82a 	bl	800d258 <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	4798      	blx	r3
         break;
 800d20c:	e002      	b.n	800d214 <pppRcvCodeRejEvent+0xd8>
         break;
 800d20e:	bf00      	nop
 800d210:	e000      	b.n	800d214 <pppRcvCodeRejEvent+0xd8>
      default:
         //This event cannot occur in a properly implemented automaton.
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
 800d212:	bf00      	nop
      }
   }
}
 800d214:	bf00      	nop
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <pppRcvEchoReqEvent>:
 * @param[in] echoReqPacket Echo-Request packet received from the peer
 **/

void pppRcvEchoReqEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, const PppEchoPacket *echoReqPacket)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	603b      	str	r3, [r7, #0]
   //Check current state
   switch(fsm->state)
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d30a      	bcc.n	800d248 <pppRcvEchoReqEvent+0x2c>
 800d232:	2b08      	cmp	r3, #8
 800d234:	d90a      	bls.n	800d24c <pppRcvEchoReqEvent+0x30>
 800d236:	2b09      	cmp	r3, #9
 800d238:	d000      	beq.n	800d23c <pppRcvEchoReqEvent+0x20>
      break;
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800d23a:	e005      	b.n	800d248 <pppRcvEchoReqEvent+0x2c>
      callbacks->sendEchoRep(context, echoReqPacket);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d240:	6839      	ldr	r1, [r7, #0]
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	4798      	blx	r3
      break;
 800d246:	e002      	b.n	800d24e <pppRcvEchoReqEvent+0x32>
      break;
 800d248:	bf00      	nop
 800d24a:	e000      	b.n	800d24e <pppRcvEchoReqEvent+0x32>
      break;
 800d24c:	bf00      	nop
   }
}
 800d24e:	bf00      	nop
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
	...

0800d258 <pppChangeState>:
 * @param[in,out] fsm Finite state machine
 * @param[in] newState New PPP state to switch to
 **/

void pppChangeState(PppFsm *fsm, PppState newState)
{
 800d258:	b590      	push	{r4, r7, lr}
 800d25a:	b085      	sub	sp, #20
 800d25c:	af02      	add	r7, sp, #8
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	70fb      	strb	r3, [r7, #3]
      "ACK_SENT", //8
      "OPENED"    //9
   };

   //Sanity check
   if(fsm->state < arraysize(stateLabel) && newState < arraysize(stateLabel))
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b09      	cmp	r3, #9
 800d26a:	d81c      	bhi.n	800d2a6 <pppChangeState+0x4e>
 800d26c:	78fb      	ldrb	r3, [r7, #3]
 800d26e:	2b09      	cmp	r3, #9
 800d270:	d819      	bhi.n	800d2a6 <pppChangeState+0x4e>
   {
      //Debug message
      TRACE_INFO("PPP FSM: %s (%u) -> %s (%u)\r\n", stateLabel[fsm->state],
 800d272:	f7f3 f9e5 	bl	8000640 <osSuspendAllTasks>
 800d276:	4b0f      	ldr	r3, [pc, #60]	; (800d2b4 <pppChangeState+0x5c>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	68d8      	ldr	r0, [r3, #12]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a0d      	ldr	r2, [pc, #52]	; (800d2b8 <pppChangeState+0x60>)
 800d282:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681c      	ldr	r4, [r3, #0]
 800d28a:	78fb      	ldrb	r3, [r7, #3]
 800d28c:	4a0a      	ldr	r2, [pc, #40]	; (800d2b8 <pppChangeState+0x60>)
 800d28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d292:	78fa      	ldrb	r2, [r7, #3]
 800d294:	9201      	str	r2, [sp, #4]
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	4623      	mov	r3, r4
 800d29a:	460a      	mov	r2, r1
 800d29c:	4907      	ldr	r1, [pc, #28]	; (800d2bc <pppChangeState+0x64>)
 800d29e:	f00c fdf7 	bl	8019e90 <fiprintf>
 800d2a2:	f7f3 f9d8 	bl	8000656 <osResumeAllTasks>
         fsm->state, stateLabel[newState], newState);
   }
#endif

   //Switch to the new state
   fsm->state = newState;
 800d2a6:	78fa      	ldrb	r2, [r7, #3]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	601a      	str	r2, [r3, #0]
}
 800d2ac:	bf00      	nop
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd90      	pop	{r4, r7, pc}
 800d2b4:	20000058 	.word	0x20000058
 800d2b8:	20000000 	.word	0x20000000
 800d2bc:	0801c080 	.word	0x0801c080

0800d2c0 <pppHdlcDriverInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppHdlcDriverInit(NetInterface *interface)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
   PppContext *context;

   //Debug message
   TRACE_INFO("Initializing PPP HDLC driver...\r\n");
 800d2c8:	f7f3 f9ba 	bl	8000640 <osSuspendAllTasks>
 800d2cc:	4b22      	ldr	r3, [pc, #136]	; (800d358 <pppHdlcDriverInit+0x98>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	2221      	movs	r2, #33	; 0x21
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	4821      	ldr	r0, [pc, #132]	; (800d35c <pppHdlcDriverInit+0x9c>)
 800d2d8:	f00c fe3a 	bl	8019f50 <fwrite>
 800d2dc:	f7f3 f9bb 	bl	8000656 <osResumeAllTasks>

   //Point to the PPP context
   context = interface->pppContext;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2e6:	60fb      	str	r3, [r7, #12]

   //Initialize variables
   context->txBufferLen = 0;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d2ee:	3318      	adds	r3, #24
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	601a      	str	r2, [r3, #0]
   context->txWriteIndex = 0;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d2fa:	331c      	adds	r3, #28
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	601a      	str	r2, [r3, #0]
   context->txReadIndex = 0;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800d306:	2200      	movs	r2, #0
 800d308:	601a      	str	r2, [r3, #0]
   context->rxBufferLen = 0;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d310:	3304      	adds	r3, #4
 800d312:	2200      	movs	r2, #0
 800d314:	601a      	str	r2, [r3, #0]
   context->rxWriteIndex = 0;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d31c:	3308      	adds	r3, #8
 800d31e:	2200      	movs	r2, #0
 800d320:	601a      	str	r2, [r3, #0]
   context->rxReadIndex = 0;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d328:	330c      	adds	r3, #12
 800d32a:	2200      	movs	r2, #0
 800d32c:	601a      	str	r2, [r3, #0]
   context->rxFrameCount = 0;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d334:	3310      	adds	r3, #16
 800d336:	2200      	movs	r2, #0
 800d338:	601a      	str	r2, [r3, #0]

   //Initialize UART
   interface->uartDriver->init();
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4798      	blx	r3

   //Accept any packets from the upper layer
   osSetEvent(&interface->nicTxEvent);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	3370      	adds	r3, #112	; 0x70
 800d346:	4618      	mov	r0, r3
 800d348:	f7f3 f9c1 	bl	80006ce <osSetEvent>

   //Successful initialization
   return NO_ERROR;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20000058 	.word	0x20000058
 800d35c:	0801c104 	.word	0x0801c104

0800d360 <pppHdlcDriverTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverTick(NetInterface *interface)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
}
 800d368:	bf00      	nop
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <pppHdlcDriverEnableIrq>:
 * @brief Enable interrupts
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverEnableIrq(NetInterface *interface)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
   //Enable UART interrupts
   interface->uartDriver->enableIrq();
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	4798      	blx	r3
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <pppHdlcDriverDisableIrq>:
 * @brief Disable interrupts
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverDisableIrq(NetInterface *interface)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
   //USART interrupts are always enabled
}
 800d394:	bf00      	nop
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <pppHdlcDriverEventHandler>:
 * @brief PPP HDLC driver event handler
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverEventHandler(NetInterface *interface)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d3ae:	60fb      	str	r3, [r7, #12]

   //Check PPP state
   if(interface->pppContext->pppPhase != PPP_PHASE_DEAD)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d3b6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d017      	beq.n	800d3ee <pppHdlcDriverEventHandler+0x4e>
   {
      //Process all pending packets
      while(context->rxFrameCount > 0)
 800d3be:	e00f      	b.n	800d3e0 <pppHdlcDriverEventHandler+0x40>
      {
         //Read incoming packet
         pppHdlcDriverReceivePacket(interface);
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f8e9 	bl	800d598 <pppHdlcDriverReceivePacket>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d3c6:	b672      	cpsid	i

         //Enter critical section
         __disable_irq();
         //Decrement frame counter
         context->rxFrameCount--;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d3ce:	3310      	adds	r3, #16
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	1e5a      	subs	r2, r3, #1
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d3da:	3310      	adds	r3, #16
 800d3dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d3de:	b662      	cpsie	i
      while(context->rxFrameCount > 0)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d3e6:	3310      	adds	r3, #16
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1e8      	bne.n	800d3c0 <pppHdlcDriverEventHandler+0x20>
         //Exit critical section
         __enable_irq();
      }
   }
}
 800d3ee:	bf00      	nop
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <pppHdlcDriverSendPacket>:
 * @return Error code
 **/

error_t pppHdlcDriverSendPacket(NetInterface *interface,
   const NetBuffer *buffer, size_t offset)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b08c      	sub	sp, #48	; 0x30
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	60f8      	str	r0, [r7, #12]
 800d3fe:	60b9      	str	r1, [r7, #8]
 800d400:	607a      	str	r2, [r7, #4]
   uint16_t protocol;
   uint32_t accm;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d408:	623b      	str	r3, [r7, #32]

   //Point to the beginning of the frame
   p = netBufferAt(buffer, offset);
 800d40a:	6879      	ldr	r1, [r7, #4]
 800d40c:	68b8      	ldr	r0, [r7, #8]
 800d40e:	f7f5 f90b 	bl	8002628 <netBufferAt>
 800d412:	61f8      	str	r0, [r7, #28]

   //Parse the PPP frame header
   pppParseFrameHeader(p, PPP_FRAME_HEADER_SIZE, &protocol);
 800d414:	f107 0316 	add.w	r3, r7, #22
 800d418:	461a      	mov	r2, r3
 800d41a:	2104      	movs	r1, #4
 800d41c:	69f8      	ldr	r0, [r7, #28]
 800d41e:	f7ff f9ba 	bl	800c796 <pppParseFrameHeader>

   //Check Protocol field
   if(protocol == PPP_PROTOCOL_IP || protocol == PPP_PROTOCOL_IPV6)
 800d422:	8afb      	ldrh	r3, [r7, #22]
 800d424:	2b21      	cmp	r3, #33	; 0x21
 800d426:	d002      	beq.n	800d42e <pppHdlcDriverSendPacket+0x38>
 800d428:	8afb      	ldrh	r3, [r7, #22]
 800d42a:	2b57      	cmp	r3, #87	; 0x57
 800d42c:	d104      	bne.n	800d438 <pppHdlcDriverSendPacket+0x42>
   {
      //Use the ACCM value that has been negotiated
      accm = context->peerConfig.accm;
 800d42e:	6a3b      	ldr	r3, [r7, #32]
 800d430:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d434:	627b      	str	r3, [r7, #36]	; 0x24
 800d436:	e002      	b.n	800d43e <pppHdlcDriverSendPacket+0x48>
   }
   else
   {
      //Use default ACCM mapping
      accm = PPP_DEFAULT_ACCM;
 800d438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d43c:	627b      	str	r3, [r7, #36]	; 0x24
   }

   //Send flag
   pppHdlcDriverWriteTxQueue(context, PPP_FLAG_CHAR);
 800d43e:	217e      	movs	r1, #126	; 0x7e
 800d440:	6a38      	ldr	r0, [r7, #32]
 800d442:	f000 f920 	bl	800d686 <pppHdlcDriverWriteTxQueue>

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 800d446:	2300      	movs	r3, #0
 800d448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d44a:	e084      	b.n	800d556 <pppHdlcDriverSendPacket+0x160>
   {
      //Is there any data to copy from the current chunk?
      if(offset < buffer->chunk[i].length)
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d450:	3301      	adds	r3, #1
 800d452:	00db      	lsls	r3, r3, #3
 800d454:	4413      	add	r3, r2
 800d456:	889b      	ldrh	r3, [r3, #4]
 800d458:	461a      	mov	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d26d      	bcs.n	800d53c <pppHdlcDriverSendPacket+0x146>
      {
         //Point to the first byte to be read
         p = (uint8_t *) buffer->chunk[i].address + offset;
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d464:	3201      	adds	r2, #1
 800d466:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4413      	add	r3, r2
 800d46e:	61fb      	str	r3, [r7, #28]
         //Compute the number of bytes to copy at a time
         n = buffer->chunk[i].length - offset;
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d474:	3301      	adds	r3, #1
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	4413      	add	r3, r2
 800d47a:	889b      	ldrh	r3, [r3, #4]
 800d47c:	461a      	mov	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	61bb      	str	r3, [r7, #24]

         //Copy data to TX queue
         for(j = 0; j < n; j++)
 800d484:	2300      	movs	r3, #0
 800d486:	62bb      	str	r3, [r7, #40]	; 0x28
 800d488:	e051      	b.n	800d52e <pppHdlcDriverSendPacket+0x138>
         {
            if(p[j] < PPP_MASK_CHAR)
 800d48a:	69fa      	ldr	r2, [r7, #28]
 800d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48e:	4413      	add	r3, r2
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	2b1f      	cmp	r3, #31
 800d494:	d824      	bhi.n	800d4e0 <pppHdlcDriverSendPacket+0xea>
            {
               //Check whether the character is flagged
               if(accm & (1 << p[j]))
 800d496:	69fa      	ldr	r2, [r7, #28]
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	4413      	add	r3, r2
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	461a      	mov	r2, r3
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	4093      	lsls	r3, r2
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d00f      	beq.n	800d4ce <pppHdlcDriverSendPacket+0xd8>
               {
                  pppHdlcDriverWriteTxQueue(context, PPP_ESC_CHAR);
 800d4ae:	217d      	movs	r1, #125	; 0x7d
 800d4b0:	6a38      	ldr	r0, [r7, #32]
 800d4b2:	f000 f8e8 	bl	800d686 <pppHdlcDriverWriteTxQueue>
                  pppHdlcDriverWriteTxQueue(context, p[j] ^ PPP_MASK_CHAR);
 800d4b6:	69fa      	ldr	r2, [r7, #28]
 800d4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ba:	4413      	add	r3, r2
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	f083 0320 	eor.w	r3, r3, #32
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6a38      	ldr	r0, [r7, #32]
 800d4c8:	f000 f8dd 	bl	800d686 <pppHdlcDriverWriteTxQueue>
 800d4cc:	e02c      	b.n	800d528 <pppHdlcDriverSendPacket+0x132>
               }
               else
               {
                  //Enqueue current character
                  pppHdlcDriverWriteTxQueue(context, p[j]);
 800d4ce:	69fa      	ldr	r2, [r7, #28]
 800d4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d2:	4413      	add	r3, r2
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	6a38      	ldr	r0, [r7, #32]
 800d4da:	f000 f8d4 	bl	800d686 <pppHdlcDriverWriteTxQueue>
 800d4de:	e023      	b.n	800d528 <pppHdlcDriverSendPacket+0x132>
               }
            }
            else if(p[j] == PPP_ESC_CHAR || p[j] == PPP_FLAG_CHAR)
 800d4e0:	69fa      	ldr	r2, [r7, #28]
 800d4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e4:	4413      	add	r3, r2
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	2b7d      	cmp	r3, #125	; 0x7d
 800d4ea:	d005      	beq.n	800d4f8 <pppHdlcDriverSendPacket+0x102>
 800d4ec:	69fa      	ldr	r2, [r7, #28]
 800d4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f0:	4413      	add	r3, r2
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b7e      	cmp	r3, #126	; 0x7e
 800d4f6:	d10f      	bne.n	800d518 <pppHdlcDriverSendPacket+0x122>
            {
               pppHdlcDriverWriteTxQueue(context, PPP_ESC_CHAR);
 800d4f8:	217d      	movs	r1, #125	; 0x7d
 800d4fa:	6a38      	ldr	r0, [r7, #32]
 800d4fc:	f000 f8c3 	bl	800d686 <pppHdlcDriverWriteTxQueue>
               pppHdlcDriverWriteTxQueue(context, p[j] ^ PPP_MASK_CHAR);
 800d500:	69fa      	ldr	r2, [r7, #28]
 800d502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d504:	4413      	add	r3, r2
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	f083 0320 	eor.w	r3, r3, #32
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	4619      	mov	r1, r3
 800d510:	6a38      	ldr	r0, [r7, #32]
 800d512:	f000 f8b8 	bl	800d686 <pppHdlcDriverWriteTxQueue>
 800d516:	e007      	b.n	800d528 <pppHdlcDriverSendPacket+0x132>
            }
            else
            {
               //Enqueue current character
               pppHdlcDriverWriteTxQueue(context, p[j]);
 800d518:	69fa      	ldr	r2, [r7, #28]
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	4413      	add	r3, r2
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	4619      	mov	r1, r3
 800d522:	6a38      	ldr	r0, [r7, #32]
 800d524:	f000 f8af 	bl	800d686 <pppHdlcDriverWriteTxQueue>
         for(j = 0; j < n; j++)
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	3301      	adds	r3, #1
 800d52c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d52e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	429a      	cmp	r2, r3
 800d534:	d3a9      	bcc.n	800d48a <pppHdlcDriverSendPacket+0x94>
            }
         }

         //Process the next block from the start
         offset = 0;
 800d536:	2300      	movs	r3, #0
 800d538:	607b      	str	r3, [r7, #4]
 800d53a:	e009      	b.n	800d550 <pppHdlcDriverSendPacket+0x15a>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	3301      	adds	r3, #1
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	4413      	add	r3, r2
 800d546:	889b      	ldrh	r3, [r3, #4]
 800d548:	461a      	mov	r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	1a9b      	subs	r3, r3, r2
 800d54e:	607b      	str	r3, [r7, #4]
   for(i = 0; i < buffer->chunkCount; i++)
 800d550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d552:	3301      	adds	r3, #1
 800d554:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d55c:	429a      	cmp	r2, r3
 800d55e:	f4ff af75 	bcc.w	800d44c <pppHdlcDriverSendPacket+0x56>
      }
   }

   //Send flag
   pppHdlcDriverWriteTxQueue(context, PPP_FLAG_CHAR);
 800d562:	217e      	movs	r1, #126	; 0x7e
 800d564:	6a38      	ldr	r0, [r7, #32]
 800d566:	f000 f88e 	bl	800d686 <pppHdlcDriverWriteTxQueue>

   //Start transferring data
   interface->uartDriver->startTx();
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	4798      	blx	r3

   //Check whether the TX queue is available for writing
   if(context->txBufferLen <= (PPP_TX_BUFFER_SIZE - 3006))
 800d572:	6a3b      	ldr	r3, [r7, #32]
 800d574:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d578:	3318      	adds	r3, #24
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f240 4242 	movw	r2, #1090	; 0x442
 800d580:	4293      	cmp	r3, r2
 800d582:	d804      	bhi.n	800d58e <pppHdlcDriverSendPacket+0x198>
   {
      //The transmitter can accept another packet
      osSetEvent(&interface->nicTxEvent);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	3370      	adds	r3, #112	; 0x70
 800d588:	4618      	mov	r0, r3
 800d58a:	f7f3 f8a0 	bl	80006ce <osSetEvent>
   }

   //Data successfully written
   return NO_ERROR;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3730      	adds	r7, #48	; 0x30
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <pppHdlcDriverReceivePacket>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppHdlcDriverReceivePacket(NetInterface *interface)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b088      	sub	sp, #32
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
   bool_t escFlag;
   uint32_t accm;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d5a6:	617b      	str	r3, [r7, #20]
   //Retrieve ACCM
   accm = context->localConfig.accm;
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d5ae:	613b      	str	r3, [r7, #16]

   //Length of the original PPP frame
   n = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	61fb      	str	r3, [r7, #28]
   //This flag tells whether the next character is escaped
   escFlag = FALSE;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	61bb      	str	r3, [r7, #24]

   //The receiver must reverse the octet stuffing procedure
   while(n < PPP_MAX_FRAME_SIZE && context->rxBufferLen > 0)
 800d5b8:	e03c      	b.n	800d634 <pppHdlcDriverReceivePacket+0x9c>
   {
      //Read a single character
      c = pppHdlcDriverReadRxQueue(context);
 800d5ba:	6978      	ldr	r0, [r7, #20]
 800d5bc:	f000 f89f 	bl	800d6fe <pppHdlcDriverReadRxQueue>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73fb      	strb	r3, [r7, #15]

      if(c < PPP_MASK_CHAR)
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
 800d5c6:	2b1f      	cmp	r3, #31
 800d5c8:	d811      	bhi.n	800d5ee <pppHdlcDriverReceivePacket+0x56>
      {
         //Check whether the character is flagged
         if(accm & (1 << c))
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	4013      	ands	r3, r2
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d12b      	bne.n	800d634 <pppHdlcDriverReceivePacket+0x9c>
            //The extra characters must be removed from the incoming data stream
         }
         else
         {
            //Copy current character
            context->frame[n++] = c;
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	1c5a      	adds	r2, r3, #1
 800d5e0:	61fa      	str	r2, [r7, #28]
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	7bfa      	ldrb	r2, [r7, #15]
 800d5e8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800d5ec:	e022      	b.n	800d634 <pppHdlcDriverReceivePacket+0x9c>
         }
      }
      else if(c == PPP_ESC_CHAR)
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
 800d5f0:	2b7d      	cmp	r3, #125	; 0x7d
 800d5f2:	d102      	bne.n	800d5fa <pppHdlcDriverReceivePacket+0x62>
      {
         //All occurrences of 0x7D indicate that the next character is escaped
         escFlag = TRUE;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	61bb      	str	r3, [r7, #24]
 800d5f8:	e01c      	b.n	800d634 <pppHdlcDriverReceivePacket+0x9c>
      }
      else if(c == PPP_FLAG_CHAR)
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
 800d5fc:	2b7e      	cmp	r3, #126	; 0x7e
 800d5fe:	d026      	beq.n	800d64e <pppHdlcDriverReceivePacket+0xb6>
      {
         //0x7E flag found
         break;
      }
      else if(escFlag)
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d00e      	beq.n	800d624 <pppHdlcDriverReceivePacket+0x8c>
      {
         //The character is XOR'ed with 0x20
         context->frame[n++] = c ^ PPP_MASK_CHAR;
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	1c5a      	adds	r2, r3, #1
 800d60a:	61fa      	str	r2, [r7, #28]
 800d60c:	7bfa      	ldrb	r2, [r7, #15]
 800d60e:	f082 0220 	eor.w	r2, r2, #32
 800d612:	b2d1      	uxtb	r1, r2
 800d614:	697a      	ldr	r2, [r7, #20]
 800d616:	4413      	add	r3, r2
 800d618:	460a      	mov	r2, r1
 800d61a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
         escFlag = FALSE;
 800d61e:	2300      	movs	r3, #0
 800d620:	61bb      	str	r3, [r7, #24]
 800d622:	e007      	b.n	800d634 <pppHdlcDriverReceivePacket+0x9c>
      }
      else
      {
         //Copy current character
         context->frame[n++] = c;
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	61fa      	str	r2, [r7, #28]
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	4413      	add	r3, r2
 800d62e:	7bfa      	ldrb	r2, [r7, #15]
 800d630:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
   while(n < PPP_MAX_FRAME_SIZE && context->rxBufferLen > 0)
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	f240 52e1 	movw	r2, #1505	; 0x5e1
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d808      	bhi.n	800d650 <pppHdlcDriverReceivePacket+0xb8>
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d644:	3304      	adds	r3, #4
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1b6      	bne.n	800d5ba <pppHdlcDriverReceivePacket+0x22>
 800d64c:	e000      	b.n	800d650 <pppHdlcDriverReceivePacket+0xb8>
         break;
 800d64e:	bf00      	nop
      }
   }

   //Check whether a valid PPP frame has been received
   if(n > 0)
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d007      	beq.n	800d666 <pppHdlcDriverReceivePacket+0xce>
      //Debug message
      TRACE_DEBUG("PPP frame received (%" PRIuSIZE " bytes)...\r\n", n);
      TRACE_DEBUG_ARRAY("  ", context->frame, n);

      //Pass the packet to the upper layer
      nicProcessPacket(interface, context->frame, n);
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d65c:	69fa      	ldr	r2, [r7, #28]
 800d65e:	4619      	mov	r1, r3
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7f5 fa95 	bl	8002b90 <nicProcessPacket>
   }

   //Successful read operation
   return NO_ERROR;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3720      	adds	r7, #32
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <pppHdlcDriverUpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppHdlcDriverUpdateMacAddrFilter(NetInterface *interface)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
   //Not implemented
   return NO_ERROR;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <pppHdlcDriverWriteTxQueue>:
 * @param[in] context Pointer to the PPP context
 * @param[in] c Character to be written
 **/

void pppHdlcDriverWriteTxQueue(PppContext *context, uint8_t c)
{
 800d686:	b480      	push	{r7}
 800d688:	b083      	sub	sp, #12
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	460b      	mov	r3, r1
 800d690:	70fb      	strb	r3, [r7, #3]
   //Enqueue the character
   context->txBuffer[context->txWriteIndex] = c;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d698:	331c      	adds	r3, #28
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	4413      	add	r3, r2
 800d6a0:	78fa      	ldrb	r2, [r7, #3]
 800d6a2:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

   //Increment index and wrap around if necessary
   if(++context->txWriteIndex >= PPP_TX_BUFFER_SIZE)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d6ac:	331c      	adds	r3, #28
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	1c5a      	adds	r2, r3, #1
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d6b8:	331c      	adds	r3, #28
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d6c2:	331c      	adds	r3, #28
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6ca:	d305      	bcc.n	800d6d8 <pppHdlcDriverWriteTxQueue+0x52>
      context->txWriteIndex = 0;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d6d2:	331c      	adds	r3, #28
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6d8:	b672      	cpsid	i

   //Enter critical section
   __disable_irq();
   //Update the length of the queue
   context->txBufferLen++;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d6e0:	3318      	adds	r3, #24
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	1c5a      	adds	r2, r3, #1
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d6ec:	3318      	adds	r3, #24
 800d6ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d6f0:	b662      	cpsie	i
   //Exit critical section
   __enable_irq();
}
 800d6f2:	bf00      	nop
 800d6f4:	370c      	adds	r7, #12
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <pppHdlcDriverReadRxQueue>:
 * @param[in] context Pointer to the PPP context
 * @return Character read from the queue
 **/

uint8_t pppHdlcDriverReadRxQueue(PppContext *context)
{
 800d6fe:	b480      	push	{r7}
 800d700:	b085      	sub	sp, #20
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
   uint8_t c;

   //Read a single character
   c = context->rxBuffer[context->rxReadIndex];
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d70c:	330c      	adds	r3, #12
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	4413      	add	r3, r2
 800d714:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800d718:	3304      	adds	r3, #4
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	73fb      	strb	r3, [r7, #15]

   //Increment index and wrap around if necessary
   if(++context->rxReadIndex >= PPP_RX_BUFFER_SIZE)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d724:	330c      	adds	r3, #12
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d730:	330c      	adds	r3, #12
 800d732:	601a      	str	r2, [r3, #0]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d73a:	330c      	adds	r3, #12
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d742:	d305      	bcc.n	800d750 <pppHdlcDriverReadRxQueue+0x52>
      context->rxReadIndex = 0;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d74a:	330c      	adds	r3, #12
 800d74c:	2200      	movs	r2, #0
 800d74e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800d750:	b672      	cpsid	i

   //Enter critical section
   __disable_irq();
   //Update the length of the queue
   context->rxBufferLen--;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d758:	3304      	adds	r3, #4
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	1e5a      	subs	r2, r3, #1
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d764:	3304      	adds	r3, #4
 800d766:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d768:	b662      	cpsie	i
   //Exit critical section
   __enable_irq();

   //Return the character that has been read
   return c;
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3714      	adds	r7, #20
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <pppHdlcDriverReadTxQueue>:
 * @param[out] c Character read from the queue
 * @return TRUE if a context switch is required
 **/

bool_t pppHdlcDriverReadTxQueue(NetInterface *interface, int_t *c)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
   bool_t flag;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d788:	60bb      	str	r3, [r7, #8]
   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60fb      	str	r3, [r7, #12]

   //Any data pending in the TX queue?
   if(context->txBufferLen > 0)
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d794:	3318      	adds	r3, #24
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d03a      	beq.n	800d812 <pppHdlcDriverReadTxQueue+0x9a>
   {
      //Read a single character
      *c = context->txBuffer[context->txReadIndex];
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	f893 3776 	ldrb.w	r3, [r3, #1910]	; 0x776
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	601a      	str	r2, [r3, #0]

      //Increment index and wrap around if necessary
      if(++context->txReadIndex >= PPP_TX_BUFFER_SIZE)
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	1c5a      	adds	r2, r3, #1
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7d0:	d304      	bcc.n	800d7dc <pppHdlcDriverReadTxQueue+0x64>
         context->txReadIndex = 0;
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]

      //Update the length of the queue
      context->txBufferLen--;
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d7e2:	3318      	adds	r3, #24
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	1e5a      	subs	r2, r3, #1
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d7ee:	3318      	adds	r3, #24
 800d7f0:	601a      	str	r2, [r3, #0]

      //Check whether the TX is available for writing
      if(context->txBufferLen == (PPP_TX_BUFFER_SIZE - 3006))
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800d7f8:	3318      	adds	r3, #24
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f240 4242 	movw	r2, #1090	; 0x442
 800d800:	4293      	cmp	r3, r2
 800d802:	d10a      	bne.n	800d81a <pppHdlcDriverReadTxQueue+0xa2>
      {
         flag = osSetEventFromIsr(&interface->nicTxEvent);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	3370      	adds	r3, #112	; 0x70
 800d808:	4618      	mov	r0, r3
 800d80a:	f7f2 ff9e 	bl	800074a <osSetEventFromIsr>
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	e003      	b.n	800d81a <pppHdlcDriverReadTxQueue+0xa2>
      }
   }
   else
   {
      //The TX queue is empty
      *c = EOF;
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d818:	601a      	str	r2, [r3, #0]
   }

   //The return value tells whether a context switch is required
   return flag;
 800d81a:	68fb      	ldr	r3, [r7, #12]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <pppHdlcDriverWriteRxQueue>:
 * @param[in] c Character to be written
 * @return TRUE if a context switch is required
 **/

bool_t pppHdlcDriverWriteRxQueue(NetInterface *interface, uint8_t c)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	460b      	mov	r3, r1
 800d82e:	70fb      	strb	r3, [r7, #3]
   bool_t flag;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d836:	60bb      	str	r3, [r7, #8]
   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 800d838:	2300      	movs	r3, #0
 800d83a:	60fb      	str	r3, [r7, #12]

   //Make sure the RX queue is not full
   if(context->rxBufferLen < PPP_RX_BUFFER_SIZE)
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d842:	3304      	adds	r3, #4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d84a:	d244      	bcs.n	800d8d6 <pppHdlcDriverWriteRxQueue+0xb2>
   {
      //Enqueue the character
      context->rxBuffer[context->rxWriteIndex] = c;
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d852:	3308      	adds	r3, #8
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	4413      	add	r3, r2
 800d85a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800d85e:	3304      	adds	r3, #4
 800d860:	78fa      	ldrb	r2, [r7, #3]
 800d862:	701a      	strb	r2, [r3, #0]

      //Increment index and wrap around if necessary
      if(++context->rxWriteIndex >= PPP_RX_BUFFER_SIZE)
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d86a:	3308      	adds	r3, #8
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	1c5a      	adds	r2, r3, #1
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d876:	3308      	adds	r3, #8
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d880:	3308      	adds	r3, #8
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d888:	d305      	bcc.n	800d896 <pppHdlcDriverWriteRxQueue+0x72>
         context->rxWriteIndex = 0;
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d890:	3308      	adds	r3, #8
 800d892:	2200      	movs	r2, #0
 800d894:	601a      	str	r2, [r3, #0]

      //Update the length of the queue
      context->rxBufferLen++;
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d89c:	3304      	adds	r3, #4
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	601a      	str	r2, [r3, #0]

      //0x7E flag found?
      if(c == PPP_FLAG_CHAR)
 800d8ac:	78fb      	ldrb	r3, [r7, #3]
 800d8ae:	2b7e      	cmp	r3, #126	; 0x7e
 800d8b0:	d111      	bne.n	800d8d6 <pppHdlcDriverWriteRxQueue+0xb2>
      {
         //Increment frame counter
         context->rxFrameCount++;
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d8b8:	3310      	adds	r3, #16
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	1c5a      	adds	r2, r3, #1
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800d8c4:	3310      	adds	r3, #16
 800d8c6:	601a      	str	r2, [r3, #0]

         //A complete HDLC frame has been received
         interface->nicEvent = TRUE;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	675a      	str	r2, [r3, #116]	; 0x74
         //Notify the TCP/IP stack of the event
         flag = osSetEventFromIsr(&netEvent);
 800d8ce:	4804      	ldr	r0, [pc, #16]	; (800d8e0 <pppHdlcDriverWriteRxQueue+0xbc>)
 800d8d0:	f7f2 ff3b 	bl	800074a <osSetEventFromIsr>
 800d8d4:	60f8      	str	r0, [r7, #12]
      }
   }

   //The return value tells whether a context switch is required
   return flag;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	2000e458 	.word	0x2000e458

0800d8e4 <pppSendConfigureAckNak>:
 * @return Error code
 **/

error_t pppSendConfigureAckNak(PppContext *context,
   const PppConfigurePacket *configureReqPacket, PppProtocol protocol, PppCode code)
{
 800d8e4:	b590      	push	{r4, r7, lr}
 800d8e6:	b08b      	sub	sp, #44	; 0x2c
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	80fb      	strh	r3, [r7, #6]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	717b      	strb	r3, [r7, #5]
   NetBuffer *buffer;
   PppConfigurePacket *configureAckNakPacket;
   PppOption *option;

   //Initialize status code
   error = NO_ERROR;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	83fb      	strh	r3, [r7, #30]
   //Retrieve the length of the Configure-Request packet
   length = ntohs(configureReqPacket->length);
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	885b      	ldrh	r3, [r3, #2]
 800d902:	b29b      	uxth	r3, r3
 800d904:	4618      	mov	r0, r3
 800d906:	f7f2 fe4b 	bl	80005a0 <swapInt16>
 800d90a:	4603      	mov	r3, r0
 800d90c:	627b      	str	r3, [r7, #36]	; 0x24

   //Allocate a buffer memory to hold the Configure-Ack, Nak or Reject packet
   buffer = pppAllocBuffer(length, &offset);
 800d90e:	f107 0310 	add.w	r3, r7, #16
 800d912:	4619      	mov	r1, r3
 800d914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d916:	f7ff f829 	bl	800c96c <pppAllocBuffer>
 800d91a:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <pppSendConfigureAckNak+0x42>
      return ERROR_OUT_OF_MEMORY;
 800d922:	2364      	movs	r3, #100	; 0x64
 800d924:	e0a5      	b.n	800da72 <pppSendConfigureAckNak+0x18e>

   //Point to the beginning of the packet
   configureAckNakPacket = netBufferAt(buffer, offset);
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	4619      	mov	r1, r3
 800d92a:	69b8      	ldr	r0, [r7, #24]
 800d92c:	f7f4 fe7c 	bl	8002628 <netBufferAt>
 800d930:	6178      	str	r0, [r7, #20]

   //Format packet header
   configureAckNakPacket->code = code;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	797a      	ldrb	r2, [r7, #5]
 800d936:	701a      	strb	r2, [r3, #0]
   configureAckNakPacket->identifier = configureReqPacket->identifier;
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	785a      	ldrb	r2, [r3, #1]
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	705a      	strb	r2, [r3, #1]
   configureAckNakPacket->length = sizeof(PppConfigurePacket);
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	2200      	movs	r2, #0
 800d944:	f042 0204 	orr.w	r2, r2, #4
 800d948:	709a      	strb	r2, [r3, #2]
 800d94a:	2200      	movs	r2, #0
 800d94c:	70da      	strb	r2, [r3, #3]

   //Retrieve the length of the option list
   length -= sizeof(PppConfigurePacket);
 800d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d950:	3b04      	subs	r3, #4
 800d952:	627b      	str	r3, [r7, #36]	; 0x24
   //Point to the first option
   option = (PppOption *) configureReqPacket->options;
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	3304      	adds	r3, #4
 800d958:	623b      	str	r3, [r7, #32]

   //Parse configuration options
   while(length > 0)
 800d95a:	e022      	b.n	800d9a2 <pppSendConfigureAckNak+0xbe>
   {
      //LCP protocol?
      if(protocol == PPP_PROTOCOL_LCP)
 800d95c:	88fb      	ldrh	r3, [r7, #6]
 800d95e:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d962:	4293      	cmp	r3, r2
 800d964:	d106      	bne.n	800d974 <pppSendConfigureAckNak+0x90>
      {
         //Parse LCP option
         lcpParseOption(context, option, length, configureAckNakPacket);
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d96a:	6a39      	ldr	r1, [r7, #32]
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f7fd ffb5 	bl	800b8dc <lcpParseOption>
 800d972:	e00a      	b.n	800d98a <pppSendConfigureAckNak+0xa6>
      }
#if (IPV4_SUPPORT == ENABLED)
      //IPCP protocol?
      else if(protocol == PPP_PROTOCOL_IPCP)
 800d974:	88fb      	ldrh	r3, [r7, #6]
 800d976:	f248 0221 	movw	r2, #32801	; 0x8021
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d105      	bne.n	800d98a <pppSendConfigureAckNak+0xa6>
      {
         //Parse IPCP option
         ipcpParseOption(context, option, length, configureAckNakPacket);
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d982:	6a39      	ldr	r1, [r7, #32]
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f7fc ff17 	bl	800a7b8 <ipcpParseOption>
         ipv6cpParseOption(context, option, length, configureAckNakPacket);
      }
#endif

      //Remaining bytes to process
      length -= option->length;
 800d98a:	6a3b      	ldr	r3, [r7, #32]
 800d98c:	785b      	ldrb	r3, [r3, #1]
 800d98e:	461a      	mov	r2, r3
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	1a9b      	subs	r3, r3, r2
 800d994:	627b      	str	r3, [r7, #36]	; 0x24
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	785b      	ldrb	r3, [r3, #1]
 800d99a:	461a      	mov	r2, r3
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	4413      	add	r3, r2
 800d9a0:	623b      	str	r3, [r7, #32]
   while(length > 0)
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1d9      	bne.n	800d95c <pppSendConfigureAckNak+0x78>
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + configureAckNakPacket->length);
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	885b      	ldrh	r3, [r3, #2]
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	69b8      	ldr	r0, [r7, #24]
 800d9b8:	f7f4 fd90 	bl	80024dc <netBufferSetLength>
   //Convert length field to network byte order
   configureAckNakPacket->length = htons(configureAckNakPacket->length);
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	885b      	ldrh	r3, [r3, #2]
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7f2 fdec 	bl	80005a0 <swapInt16>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	805a      	strh	r2, [r3, #2]

   //Debug message
   if(code == PPP_CODE_CONFIGURE_ACK)
 800d9d0:	797b      	ldrb	r3, [r7, #5]
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	d113      	bne.n	800d9fe <pppSendConfigureAckNak+0x11a>
   {
      TRACE_INFO("Sending Configure-Ack packet (%" PRIuSIZE " bytes)...\r\n",
 800d9d6:	f7f2 fe33 	bl	8000640 <osSuspendAllTasks>
 800d9da:	4b28      	ldr	r3, [pc, #160]	; (800da7c <pppSendConfigureAckNak+0x198>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	68dc      	ldr	r4, [r3, #12]
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	885b      	ldrh	r3, [r3, #2]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7f2 fdda 	bl	80005a0 <swapInt16>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	4923      	ldr	r1, [pc, #140]	; (800da80 <pppSendConfigureAckNak+0x19c>)
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f00c fa4c 	bl	8019e90 <fiprintf>
 800d9f8:	f7f2 fe2d 	bl	8000656 <osResumeAllTasks>
 800d9fc:	e02c      	b.n	800da58 <pppSendConfigureAckNak+0x174>
         ntohs(configureAckNakPacket->length));
   }
   else if(code == PPP_CODE_CONFIGURE_NAK)
 800d9fe:	797b      	ldrb	r3, [r7, #5]
 800da00:	2b03      	cmp	r3, #3
 800da02:	d113      	bne.n	800da2c <pppSendConfigureAckNak+0x148>
   {
      TRACE_INFO("Sending Configure-Nak packet (%" PRIuSIZE " bytes)...\r\n",
 800da04:	f7f2 fe1c 	bl	8000640 <osSuspendAllTasks>
 800da08:	4b1c      	ldr	r3, [pc, #112]	; (800da7c <pppSendConfigureAckNak+0x198>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	68dc      	ldr	r4, [r3, #12]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	885b      	ldrh	r3, [r3, #2]
 800da12:	b29b      	uxth	r3, r3
 800da14:	4618      	mov	r0, r3
 800da16:	f7f2 fdc3 	bl	80005a0 <swapInt16>
 800da1a:	4603      	mov	r3, r0
 800da1c:	461a      	mov	r2, r3
 800da1e:	4919      	ldr	r1, [pc, #100]	; (800da84 <pppSendConfigureAckNak+0x1a0>)
 800da20:	4620      	mov	r0, r4
 800da22:	f00c fa35 	bl	8019e90 <fiprintf>
 800da26:	f7f2 fe16 	bl	8000656 <osResumeAllTasks>
 800da2a:	e015      	b.n	800da58 <pppSendConfigureAckNak+0x174>
         ntohs(configureAckNakPacket->length));
   }
   else if(code == PPP_CODE_CONFIGURE_REJ)
 800da2c:	797b      	ldrb	r3, [r7, #5]
 800da2e:	2b04      	cmp	r3, #4
 800da30:	d112      	bne.n	800da58 <pppSendConfigureAckNak+0x174>
   {
      TRACE_INFO("Sending Configure-Reject packet (%" PRIuSIZE " bytes)...\r\n",
 800da32:	f7f2 fe05 	bl	8000640 <osSuspendAllTasks>
 800da36:	4b11      	ldr	r3, [pc, #68]	; (800da7c <pppSendConfigureAckNak+0x198>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68dc      	ldr	r4, [r3, #12]
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	885b      	ldrh	r3, [r3, #2]
 800da40:	b29b      	uxth	r3, r3
 800da42:	4618      	mov	r0, r3
 800da44:	f7f2 fdac 	bl	80005a0 <swapInt16>
 800da48:	4603      	mov	r3, r0
 800da4a:	461a      	mov	r2, r3
 800da4c:	490e      	ldr	r1, [pc, #56]	; (800da88 <pppSendConfigureAckNak+0x1a4>)
 800da4e:	4620      	mov	r0, r4
 800da50:	f00c fa1e 	bl	8019e90 <fiprintf>
 800da54:	f7f2 fdff 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) configureAckNakPacket,
      ntohs(configureAckNakPacket->length), protocol);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, protocol);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6998      	ldr	r0, [r3, #24]
 800da5c:	693a      	ldr	r2, [r7, #16]
 800da5e:	88fb      	ldrh	r3, [r7, #6]
 800da60:	69b9      	ldr	r1, [r7, #24]
 800da62:	f7fe fe0d 	bl	800c680 <pppSendFrame>
 800da66:	4603      	mov	r3, r0
 800da68:	83fb      	strh	r3, [r7, #30]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800da6a:	69b8      	ldr	r0, [r7, #24]
 800da6c:	f7f4 fd05 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800da70:	8bfb      	ldrh	r3, [r7, #30]
}
 800da72:	4618      	mov	r0, r3
 800da74:	372c      	adds	r7, #44	; 0x2c
 800da76:	46bd      	mov	sp, r7
 800da78:	bd90      	pop	{r4, r7, pc}
 800da7a:	bf00      	nop
 800da7c:	20000058 	.word	0x20000058
 800da80:	0801c138 	.word	0x0801c138
 800da84:	0801c168 	.word	0x0801c168
 800da88:	0801c198 	.word	0x0801c198

0800da8c <pppSendTerminateReq>:
 * @return Error code
 **/

error_t pppSendTerminateReq(PppContext *context,
   uint8_t identifier, PppProtocol protocol)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b088      	sub	sp, #32
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	70fb      	strb	r3, [r7, #3]
 800da98:	4613      	mov	r3, r2
 800da9a:	803b      	strh	r3, [r7, #0]
   size_t offset;
   NetBuffer *buffer;
   PppTerminatePacket *terminateReqPacket;

   //Length of the Terminate-Request packet
   length = sizeof(PppTerminatePacket);
 800da9c:	2304      	movs	r3, #4
 800da9e:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Terminate-Request packet
   buffer = pppAllocBuffer(length, &offset);
 800daa0:	f107 030c 	add.w	r3, r7, #12
 800daa4:	4619      	mov	r1, r3
 800daa6:	69f8      	ldr	r0, [r7, #28]
 800daa8:	f7fe ff60 	bl	800c96c <pppAllocBuffer>
 800daac:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d101      	bne.n	800dab8 <pppSendTerminateReq+0x2c>
      return ERROR_OUT_OF_MEMORY;
 800dab4:	2364      	movs	r3, #100	; 0x64
 800dab6:	e02d      	b.n	800db14 <pppSendTerminateReq+0x88>

   //Point to the Terminate-Request packet
   terminateReqPacket = netBufferAt(buffer, offset);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	4619      	mov	r1, r3
 800dabc:	69b8      	ldr	r0, [r7, #24]
 800dabe:	f7f4 fdb3 	bl	8002628 <netBufferAt>
 800dac2:	6178      	str	r0, [r7, #20]

   //Format packet header
   terminateReqPacket->code = PPP_CODE_TERMINATE_REQ;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	2205      	movs	r2, #5
 800dac8:	701a      	strb	r2, [r3, #0]
   terminateReqPacket->identifier = identifier;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	78fa      	ldrb	r2, [r7, #3]
 800dace:	705a      	strb	r2, [r3, #1]
   terminateReqPacket->length = htons(length);
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7f2 fd63 	bl	80005a0 <swapInt16>
 800dada:	4603      	mov	r3, r0
 800dadc:	461a      	mov	r2, r3
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending Terminate-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800dae2:	f7f2 fdad 	bl	8000640 <osSuspendAllTasks>
 800dae6:	4b0d      	ldr	r3, [pc, #52]	; (800db1c <pppSendTerminateReq+0x90>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	69fa      	ldr	r2, [r7, #28]
 800daee:	490c      	ldr	r1, [pc, #48]	; (800db20 <pppSendTerminateReq+0x94>)
 800daf0:	4618      	mov	r0, r3
 800daf2:	f00c f9cd 	bl	8019e90 <fiprintf>
 800daf6:	f7f2 fdae 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) terminateReqPacket, length, protocol);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, protocol);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6998      	ldr	r0, [r3, #24]
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	883b      	ldrh	r3, [r7, #0]
 800db02:	69b9      	ldr	r1, [r7, #24]
 800db04:	f7fe fdbc 	bl	800c680 <pppSendFrame>
 800db08:	4603      	mov	r3, r0
 800db0a:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800db0c:	69b8      	ldr	r0, [r7, #24]
 800db0e:	f7f4 fcb4 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800db12:	8a7b      	ldrh	r3, [r7, #18]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3720      	adds	r7, #32
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	20000058 	.word	0x20000058
 800db20:	0801c1c8 	.word	0x0801c1c8

0800db24 <pppSendTerminateAck>:
 * @return Error code
 **/

error_t pppSendTerminateAck(PppContext *context,
   uint8_t identifier, PppProtocol protocol)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b088      	sub	sp, #32
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
 800db30:	4613      	mov	r3, r2
 800db32:	803b      	strh	r3, [r7, #0]
   size_t offset;
   NetBuffer *buffer;
   PppTerminatePacket *terminateAckPacket;

   //Length of the Terminate-Ack packet
   length = sizeof(PppTerminatePacket);
 800db34:	2304      	movs	r3, #4
 800db36:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Terminate-Ack packet
   buffer = pppAllocBuffer(length, &offset);
 800db38:	f107 030c 	add.w	r3, r7, #12
 800db3c:	4619      	mov	r1, r3
 800db3e:	69f8      	ldr	r0, [r7, #28]
 800db40:	f7fe ff14 	bl	800c96c <pppAllocBuffer>
 800db44:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <pppSendTerminateAck+0x2c>
      return ERROR_OUT_OF_MEMORY;
 800db4c:	2364      	movs	r3, #100	; 0x64
 800db4e:	e02d      	b.n	800dbac <pppSendTerminateAck+0x88>

   //Point to the Terminate-Ack packet
   terminateAckPacket = netBufferAt(buffer, offset);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	4619      	mov	r1, r3
 800db54:	69b8      	ldr	r0, [r7, #24]
 800db56:	f7f4 fd67 	bl	8002628 <netBufferAt>
 800db5a:	6178      	str	r0, [r7, #20]

   //Format packet header
   terminateAckPacket->code = PPP_CODE_TERMINATE_ACK;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	2206      	movs	r2, #6
 800db60:	701a      	strb	r2, [r3, #0]
   terminateAckPacket->identifier = identifier;
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	78fa      	ldrb	r2, [r7, #3]
 800db66:	705a      	strb	r2, [r3, #1]
   terminateAckPacket->length = htons(length);
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7f2 fd17 	bl	80005a0 <swapInt16>
 800db72:	4603      	mov	r3, r0
 800db74:	461a      	mov	r2, r3
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending Terminate-Ack packet (%" PRIuSIZE " bytes)...\r\n", length);
 800db7a:	f7f2 fd61 	bl	8000640 <osSuspendAllTasks>
 800db7e:	4b0d      	ldr	r3, [pc, #52]	; (800dbb4 <pppSendTerminateAck+0x90>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	69fa      	ldr	r2, [r7, #28]
 800db86:	490c      	ldr	r1, [pc, #48]	; (800dbb8 <pppSendTerminateAck+0x94>)
 800db88:	4618      	mov	r0, r3
 800db8a:	f00c f981 	bl	8019e90 <fiprintf>
 800db8e:	f7f2 fd62 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) terminateAckPacket, length, protocol);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, protocol);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6998      	ldr	r0, [r3, #24]
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	883b      	ldrh	r3, [r7, #0]
 800db9a:	69b9      	ldr	r1, [r7, #24]
 800db9c:	f7fe fd70 	bl	800c680 <pppSendFrame>
 800dba0:	4603      	mov	r3, r0
 800dba2:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800dba4:	69b8      	ldr	r0, [r7, #24]
 800dba6:	f7f4 fc68 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800dbaa:	8a7b      	ldrh	r3, [r7, #18]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3720      	adds	r7, #32
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	20000058 	.word	0x20000058
 800dbb8:	0801c1fc 	.word	0x0801c1fc

0800dbbc <pppSendCodeRej>:
 * @return Error code
 **/

error_t pppSendCodeRej(PppContext *context, const PppPacket *packet,
   uint8_t identifier, PppProtocol protocol)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b08a      	sub	sp, #40	; 0x28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	461a      	mov	r2, r3
 800dbca:	460b      	mov	r3, r1
 800dbcc:	71fb      	strb	r3, [r7, #7]
 800dbce:	4613      	mov	r3, r2
 800dbd0:	80bb      	strh	r3, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppCodeRejPacket *codeRejPacket;

   //Calculate the length of the Code-Reject packet
   length = ntohs(packet->length) + sizeof(PppCodeRejPacket);
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	885b      	ldrh	r3, [r3, #2]
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7f2 fce1 	bl	80005a0 <swapInt16>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	623b      	str	r3, [r7, #32]

   //The rejected packet must be truncated to comply with
   //the peer's established MRU
   length = MIN(length, context->peerConfig.mru);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800dbea:	461a      	mov	r2, r3
 800dbec:	6a3b      	ldr	r3, [r7, #32]
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	bf28      	it	cs
 800dbf2:	4613      	movcs	r3, r2
 800dbf4:	623b      	str	r3, [r7, #32]

   //Allocate a buffer memory to hold the Code-Reject packet
   buffer = pppAllocBuffer(sizeof(PppCodeRejPacket), &offset);
 800dbf6:	f107 0314 	add.w	r3, r7, #20
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	2004      	movs	r0, #4
 800dbfe:	f7fe feb5 	bl	800c96c <pppAllocBuffer>
 800dc02:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(buffer == NULL)
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d101      	bne.n	800dc0e <pppSendCodeRej+0x52>
      return ERROR_OUT_OF_MEMORY;
 800dc0a:	2364      	movs	r3, #100	; 0x64
 800dc0c:	e039      	b.n	800dc82 <pppSendCodeRej+0xc6>

   //Point to the Code-Reject packet
   codeRejPacket = netBufferAt(buffer, offset);
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	4619      	mov	r1, r3
 800dc12:	69f8      	ldr	r0, [r7, #28]
 800dc14:	f7f4 fd08 	bl	8002628 <netBufferAt>
 800dc18:	61b8      	str	r0, [r7, #24]

   //Format packet header
   codeRejPacket->code = PPP_CODE_CODE_REJ;
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	2207      	movs	r2, #7
 800dc1e:	701a      	strb	r2, [r3, #0]
   codeRejPacket->identifier = identifier;
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	79fa      	ldrb	r2, [r7, #7]
 800dc24:	705a      	strb	r2, [r3, #1]
   codeRejPacket->length = htons(length);
 800dc26:	6a3b      	ldr	r3, [r7, #32]
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7f2 fcb8 	bl	80005a0 <swapInt16>
 800dc30:	4603      	mov	r3, r0
 800dc32:	461a      	mov	r2, r3
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	805a      	strh	r2, [r3, #2]

   //The Rejected-Packet field contains a copy of the packet which is being rejected
   error = netBufferAppend(buffer, packet, length - sizeof(PppCodeRejPacket));
 800dc38:	6a3b      	ldr	r3, [r7, #32]
 800dc3a:	3b04      	subs	r3, #4
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	69f8      	ldr	r0, [r7, #28]
 800dc42:	f7f4 fe89 	bl	8002958 <netBufferAppend>
 800dc46:	4603      	mov	r3, r0
 800dc48:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 800dc4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d114      	bne.n	800dc7a <pppSendCodeRej+0xbe>
   {
      //Debug message
      TRACE_INFO("Sending Code-Reject packet (%" PRIuSIZE " bytes)...\r\n", length);
 800dc50:	f7f2 fcf6 	bl	8000640 <osSuspendAllTasks>
 800dc54:	4b0d      	ldr	r3, [pc, #52]	; (800dc8c <pppSendCodeRej+0xd0>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	6a3a      	ldr	r2, [r7, #32]
 800dc5c:	490c      	ldr	r1, [pc, #48]	; (800dc90 <pppSendCodeRej+0xd4>)
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f00c f916 	bl	8019e90 <fiprintf>
 800dc64:	f7f2 fcf7 	bl	8000656 <osResumeAllTasks>

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, protocol);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6998      	ldr	r0, [r3, #24]
 800dc6c:	697a      	ldr	r2, [r7, #20]
 800dc6e:	88bb      	ldrh	r3, [r7, #4]
 800dc70:	69f9      	ldr	r1, [r7, #28]
 800dc72:	f7fe fd05 	bl	800c680 <pppSendFrame>
 800dc76:	4603      	mov	r3, r0
 800dc78:	84fb      	strh	r3, [r7, #38]	; 0x26
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800dc7a:	69f8      	ldr	r0, [r7, #28]
 800dc7c:	f7f4 fbfd 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800dc80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3728      	adds	r7, #40	; 0x28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	20000058 	.word	0x20000058
 800dc90:	0801c22c 	.word	0x0801c22c

0800dc94 <pppSendProtocolRej>:
 * @return Error code
 **/

error_t pppSendProtocolRej(PppContext *context, uint8_t identifier,
   uint16_t protocol, const uint8_t *information, size_t length)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b088      	sub	sp, #32
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	607b      	str	r3, [r7, #4]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	72fb      	strb	r3, [r7, #11]
 800dca2:	4613      	mov	r3, r2
 800dca4:	813b      	strh	r3, [r7, #8]
   size_t offset;
   NetBuffer *buffer;
   PppProtocolRejPacket *protocolRejPacket;

   //Calculate the length of the Protocol-Reject packet
   length += sizeof(PppProtocolRejPacket);
 800dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca8:	3306      	adds	r3, #6
 800dcaa:	62bb      	str	r3, [r7, #40]	; 0x28

   //The Rejected-Information must be truncated to comply with
   //the peer's established MRU
   length = MIN(length, context->peerConfig.mru);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	bf28      	it	cs
 800dcba:	4613      	movcs	r3, r2
 800dcbc:	62bb      	str	r3, [r7, #40]	; 0x28

   //Allocate a buffer memory to hold the Protocol-Reject packet
   buffer = pppAllocBuffer(sizeof(PppProtocolRejPacket), &offset);
 800dcbe:	f107 0310 	add.w	r3, r7, #16
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	2006      	movs	r0, #6
 800dcc6:	f7fe fe51 	bl	800c96c <pppAllocBuffer>
 800dcca:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <pppSendProtocolRej+0x42>
      return ERROR_OUT_OF_MEMORY;
 800dcd2:	2364      	movs	r3, #100	; 0x64
 800dcd4:	e042      	b.n	800dd5c <pppSendProtocolRej+0xc8>

   //Point to the Protocol-Reject packet
   protocolRejPacket = netBufferAt(buffer, offset);
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	4619      	mov	r1, r3
 800dcda:	69b8      	ldr	r0, [r7, #24]
 800dcdc:	f7f4 fca4 	bl	8002628 <netBufferAt>
 800dce0:	6178      	str	r0, [r7, #20]

   //Format packet header
   protocolRejPacket->code = PPP_CODE_PROTOCOL_REJ;
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	2208      	movs	r2, #8
 800dce6:	701a      	strb	r2, [r3, #0]
   protocolRejPacket->identifier = identifier;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	7afa      	ldrb	r2, [r7, #11]
 800dcec:	705a      	strb	r2, [r3, #1]
   protocolRejPacket->length = htons(length);
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7f2 fc54 	bl	80005a0 <swapInt16>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	805a      	strh	r2, [r3, #2]
   protocolRejPacket->rejectedProtocol = htons(protocol);
 800dd00:	893b      	ldrh	r3, [r7, #8]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7f2 fc4c 	bl	80005a0 <swapInt16>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	809a      	strh	r2, [r3, #4]

   //The Rejected-Information field contains a copy of the
   //packet which is being rejected
   error = netBufferAppend(buffer, information,
 800dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd12:	3b06      	subs	r3, #6
 800dd14:	461a      	mov	r2, r3
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	69b8      	ldr	r0, [r7, #24]
 800dd1a:	f7f4 fe1d 	bl	8002958 <netBufferAppend>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	83fb      	strh	r3, [r7, #30]
      length - sizeof(PppProtocolRejPacket));

   //Check status code
   if(!error)
 800dd22:	8bfb      	ldrh	r3, [r7, #30]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d115      	bne.n	800dd54 <pppSendProtocolRej+0xc0>
   {
      //Debug message
      TRACE_INFO("Sending Protocol-Reject packet (%" PRIuSIZE " bytes)...\r\n", length);
 800dd28:	f7f2 fc8a 	bl	8000640 <osSuspendAllTasks>
 800dd2c:	4b0d      	ldr	r3, [pc, #52]	; (800dd64 <pppSendProtocolRej+0xd0>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd34:	490c      	ldr	r1, [pc, #48]	; (800dd68 <pppSendProtocolRej+0xd4>)
 800dd36:	4618      	mov	r0, r3
 800dd38:	f00c f8aa 	bl	8019e90 <fiprintf>
 800dd3c:	f7f2 fc8b 	bl	8000656 <osResumeAllTasks>

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_LCP);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6998      	ldr	r0, [r3, #24]
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	f24c 0321 	movw	r3, #49185	; 0xc021
 800dd4a:	69b9      	ldr	r1, [r7, #24]
 800dd4c:	f7fe fc98 	bl	800c680 <pppSendFrame>
 800dd50:	4603      	mov	r3, r0
 800dd52:	83fb      	strh	r3, [r7, #30]
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800dd54:	69b8      	ldr	r0, [r7, #24]
 800dd56:	f7f4 fb90 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800dd5a:	8bfb      	ldrh	r3, [r7, #30]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3720      	adds	r7, #32
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	20000058 	.word	0x20000058
 800dd68:	0801c258 	.word	0x0801c258

0800dd6c <pppSendEchoRep>:
 * @return Error code
 **/

error_t pppSendEchoRep(PppContext *context,
   const PppEchoPacket *echoReqPacket, PppProtocol protocol)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08a      	sub	sp, #40	; 0x28
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	4613      	mov	r3, r2
 800dd78:	80fb      	strh	r3, [r7, #6]
   size_t offset;
   NetBuffer *buffer;
   PppEchoPacket *echoRepPacket;

   //Retrieve the length of the Echo-Request packet
   length = ntohs(echoReqPacket->length);
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	885b      	ldrh	r3, [r3, #2]
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7f2 fc0d 	bl	80005a0 <swapInt16>
 800dd86:	4603      	mov	r3, r0
 800dd88:	623b      	str	r3, [r7, #32]

   //Make sure the length is valid
   if(length < sizeof(PppEchoPacket))
 800dd8a:	6a3b      	ldr	r3, [r7, #32]
 800dd8c:	2b07      	cmp	r3, #7
 800dd8e:	d801      	bhi.n	800dd94 <pppSendEchoRep+0x28>
      return ERROR_INVALID_LENGTH;
 800dd90:	23eb      	movs	r3, #235	; 0xeb
 800dd92:	e056      	b.n	800de42 <pppSendEchoRep+0xd6>
   if(length > context->peerConfig.mru)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	6a3b      	ldr	r3, [r7, #32]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d901      	bls.n	800dda6 <pppSendEchoRep+0x3a>
      return ERROR_INVALID_LENGTH;
 800dda2:	23eb      	movs	r3, #235	; 0xeb
 800dda4:	e04d      	b.n	800de42 <pppSendEchoRep+0xd6>

   //Allocate a buffer memory to hold the Echo-Reply packet
   buffer = pppAllocBuffer(sizeof(PppEchoPacket), &offset);
 800dda6:	f107 0314 	add.w	r3, r7, #20
 800ddaa:	4619      	mov	r1, r3
 800ddac:	2008      	movs	r0, #8
 800ddae:	f7fe fddd 	bl	800c96c <pppAllocBuffer>
 800ddb2:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(buffer == NULL)
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d101      	bne.n	800ddbe <pppSendEchoRep+0x52>
      return ERROR_OUT_OF_MEMORY;
 800ddba:	2364      	movs	r3, #100	; 0x64
 800ddbc:	e041      	b.n	800de42 <pppSendEchoRep+0xd6>

   //Point to the Echo-Reply packet
   echoRepPacket = netBufferAt(buffer, offset);
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	69f8      	ldr	r0, [r7, #28]
 800ddc4:	f7f4 fc30 	bl	8002628 <netBufferAt>
 800ddc8:	61b8      	str	r0, [r7, #24]

   //Format packet header
   echoRepPacket->code = PPP_CODE_ECHO_REP;
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	220a      	movs	r2, #10
 800ddce:	701a      	strb	r2, [r3, #0]
   echoRepPacket->identifier = echoReqPacket->identifier;
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	785a      	ldrb	r2, [r3, #1]
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	705a      	strb	r2, [r3, #1]
   echoRepPacket->length = htons(length);
 800ddd8:	6a3b      	ldr	r3, [r7, #32]
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7f2 fbdf 	bl	80005a0 <swapInt16>
 800dde2:	4603      	mov	r3, r0
 800dde4:	461a      	mov	r2, r3
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	805a      	strh	r2, [r3, #2]
   echoRepPacket->magicNumber = context->localConfig.magicNumber;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	605a      	str	r2, [r3, #4]

   //The data field of the Echo-Request packet is copied into the data
   //field of the Echo-Reply packet
   error = netBufferAppend(buffer, echoReqPacket->data, length - sizeof(PppEchoPacket));
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	f103 0108 	add.w	r1, r3, #8
 800ddfa:	6a3b      	ldr	r3, [r7, #32]
 800ddfc:	3b08      	subs	r3, #8
 800ddfe:	461a      	mov	r2, r3
 800de00:	69f8      	ldr	r0, [r7, #28]
 800de02:	f7f4 fda9 	bl	8002958 <netBufferAppend>
 800de06:	4603      	mov	r3, r0
 800de08:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 800de0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d114      	bne.n	800de3a <pppSendEchoRep+0xce>
   {
      //Debug message
      TRACE_INFO("Sending Echo-Reply packet (%" PRIuSIZE " bytes)...\r\n", length);
 800de10:	f7f2 fc16 	bl	8000640 <osSuspendAllTasks>
 800de14:	4b0d      	ldr	r3, [pc, #52]	; (800de4c <pppSendEchoRep+0xe0>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	6a3a      	ldr	r2, [r7, #32]
 800de1c:	490c      	ldr	r1, [pc, #48]	; (800de50 <pppSendEchoRep+0xe4>)
 800de1e:	4618      	mov	r0, r3
 800de20:	f00c f836 	bl	8019e90 <fiprintf>
 800de24:	f7f2 fc17 	bl	8000656 <osResumeAllTasks>

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, protocol);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6998      	ldr	r0, [r3, #24]
 800de2c:	697a      	ldr	r2, [r7, #20]
 800de2e:	88fb      	ldrh	r3, [r7, #6]
 800de30:	69f9      	ldr	r1, [r7, #28]
 800de32:	f7fe fc25 	bl	800c680 <pppSendFrame>
 800de36:	4603      	mov	r3, r0
 800de38:	84fb      	strh	r3, [r7, #38]	; 0x26
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800de3a:	69f8      	ldr	r0, [r7, #28]
 800de3c:	f7f4 fb1d 	bl	800247a <netBufferFree>
   //Return status code
   return error;
 800de40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800de42:	4618      	mov	r0, r3
 800de44:	3728      	adds	r7, #40	; 0x28
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	20000058 	.word	0x20000058
 800de50:	0801c288 	.word	0x0801c288

0800de54 <pppAddOption>:
 * @return Error code
 **/

error_t pppAddOption(PppConfigurePacket *packet, uint8_t optionType,
   const void *optionValue, uint8_t optionLen)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	607a      	str	r2, [r7, #4]
 800de5e:	461a      	mov	r2, r3
 800de60:	460b      	mov	r3, r1
 800de62:	72fb      	strb	r3, [r7, #11]
 800de64:	4613      	mov	r3, r2
 800de66:	72bb      	strb	r3, [r7, #10]
   PppOption *option;

   //Make sure the length is valid
   if(optionLen > (UINT8_MAX - sizeof(PppOption)))
 800de68:	7abb      	ldrb	r3, [r7, #10]
 800de6a:	2bfd      	cmp	r3, #253	; 0xfd
 800de6c:	d901      	bls.n	800de72 <pppAddOption+0x1e>
      return ERROR_INVALID_LENGTH;
 800de6e:	23eb      	movs	r3, #235	; 0xeb
 800de70:	e021      	b.n	800deb6 <pppAddOption+0x62>

   //Point to the end of the Configure packet
   option = (PppOption *) ((uint8_t *) packet + packet->length);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	885b      	ldrh	r3, [r3, #2]
 800de76:	b29b      	uxth	r3, r3
 800de78:	461a      	mov	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	4413      	add	r3, r2
 800de7e:	617b      	str	r3, [r7, #20]

   //Write specified option at current location
   option->type = optionType;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	7afa      	ldrb	r2, [r7, #11]
 800de84:	701a      	strb	r2, [r3, #0]
   option->length = optionLen + sizeof(PppOption);
 800de86:	7abb      	ldrb	r3, [r7, #10]
 800de88:	3302      	adds	r3, #2
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	705a      	strb	r2, [r3, #1]
   //Copy option data
   memcpy(option->data, optionValue, optionLen);
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	3302      	adds	r3, #2
 800de94:	7aba      	ldrb	r2, [r7, #10]
 800de96:	6879      	ldr	r1, [r7, #4]
 800de98:	4618      	mov	r0, r3
 800de9a:	f00c f8bb 	bl	801a014 <memcpy>

   //Update the length of the Configure packet
   packet->length += optionLen + sizeof(PppOption);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	885b      	ldrh	r3, [r3, #2]
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	7abb      	ldrb	r3, [r7, #10]
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	4413      	add	r3, r2
 800deaa:	b29b      	uxth	r3, r3
 800deac:	3302      	adds	r3, #2
 800deae:	b29a      	uxth	r2, r3
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	805a      	strh	r2, [r3, #2]

   //Successful processing
   return NO_ERROR;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b082      	sub	sp, #8
 800dec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dec8:	2003      	movs	r0, #3
 800deca:	f000 f95b 	bl	800e184 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800dece:	200f      	movs	r0, #15
 800ded0:	f000 f80e 	bl	800def0 <HAL_InitTick>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d002      	beq.n	800dee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800deda:	2301      	movs	r3, #1
 800dedc:	71fb      	strb	r3, [r7, #7]
 800dede:	e001      	b.n	800dee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800dee0:	f00b f976 	bl	80191d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800dee4:	79fb      	ldrb	r3, [r7, #7]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
	...

0800def0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800defc:	4b16      	ldr	r3, [pc, #88]	; (800df58 <HAL_InitTick+0x68>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d022      	beq.n	800df4a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800df04:	4b15      	ldr	r3, [pc, #84]	; (800df5c <HAL_InitTick+0x6c>)
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	4b13      	ldr	r3, [pc, #76]	; (800df58 <HAL_InitTick+0x68>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800df10:	fbb1 f3f3 	udiv	r3, r1, r3
 800df14:	fbb2 f3f3 	udiv	r3, r2, r3
 800df18:	4618      	mov	r0, r3
 800df1a:	f000 f968 	bl	800e1ee <HAL_SYSTICK_Config>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10f      	bne.n	800df44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b0f      	cmp	r3, #15
 800df28:	d809      	bhi.n	800df3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800df2a:	2200      	movs	r2, #0
 800df2c:	6879      	ldr	r1, [r7, #4]
 800df2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df32:	f000 f932 	bl	800e19a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800df36:	4a0a      	ldr	r2, [pc, #40]	; (800df60 <HAL_InitTick+0x70>)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6013      	str	r3, [r2, #0]
 800df3c:	e007      	b.n	800df4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800df3e:	2301      	movs	r3, #1
 800df40:	73fb      	strb	r3, [r7, #15]
 800df42:	e004      	b.n	800df4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800df44:	2301      	movs	r3, #1
 800df46:	73fb      	strb	r3, [r7, #15]
 800df48:	e001      	b.n	800df4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800df4a:	2301      	movs	r3, #1
 800df4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	2000002c 	.word	0x2000002c
 800df5c:	20000054 	.word	0x20000054
 800df60:	20000028 	.word	0x20000028

0800df64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800df64:	b480      	push	{r7}
 800df66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800df68:	4b05      	ldr	r3, [pc, #20]	; (800df80 <HAL_IncTick+0x1c>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	4b05      	ldr	r3, [pc, #20]	; (800df84 <HAL_IncTick+0x20>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4413      	add	r3, r2
 800df72:	4a03      	ldr	r2, [pc, #12]	; (800df80 <HAL_IncTick+0x1c>)
 800df74:	6013      	str	r3, [r2, #0]
}
 800df76:	bf00      	nop
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	20010238 	.word	0x20010238
 800df84:	2000002c 	.word	0x2000002c

0800df88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0
  return uwTick;
 800df8c:	4b03      	ldr	r3, [pc, #12]	; (800df9c <HAL_GetTick+0x14>)
 800df8e:	681b      	ldr	r3, [r3, #0]
}
 800df90:	4618      	mov	r0, r3
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	20010238 	.word	0x20010238

0800dfa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800dfa8:	f7ff ffee 	bl	800df88 <HAL_GetTick>
 800dfac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfb8:	d004      	beq.n	800dfc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800dfba:	4b09      	ldr	r3, [pc, #36]	; (800dfe0 <HAL_Delay+0x40>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800dfc4:	bf00      	nop
 800dfc6:	f7ff ffdf 	bl	800df88 <HAL_GetTick>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	1ad3      	subs	r3, r2, r3
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d8f7      	bhi.n	800dfc6 <HAL_Delay+0x26>
  {
  }
}
 800dfd6:	bf00      	nop
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	2000002c 	.word	0x2000002c

0800dfe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f003 0307 	and.w	r3, r3, #7
 800dff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dff4:	4b0c      	ldr	r3, [pc, #48]	; (800e028 <__NVIC_SetPriorityGrouping+0x44>)
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e000:	4013      	ands	r3, r2
 800e002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e00c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e016:	4a04      	ldr	r2, [pc, #16]	; (800e028 <__NVIC_SetPriorityGrouping+0x44>)
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	60d3      	str	r3, [r2, #12]
}
 800e01c:	bf00      	nop
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	e000ed00 	.word	0xe000ed00

0800e02c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e02c:	b480      	push	{r7}
 800e02e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e030:	4b04      	ldr	r3, [pc, #16]	; (800e044 <__NVIC_GetPriorityGrouping+0x18>)
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	0a1b      	lsrs	r3, r3, #8
 800e036:	f003 0307 	and.w	r3, r3, #7
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	e000ed00 	.word	0xe000ed00

0800e048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	4603      	mov	r3, r0
 800e050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e056:	2b00      	cmp	r3, #0
 800e058:	db0b      	blt.n	800e072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e05a:	79fb      	ldrb	r3, [r7, #7]
 800e05c:	f003 021f 	and.w	r2, r3, #31
 800e060:	4907      	ldr	r1, [pc, #28]	; (800e080 <__NVIC_EnableIRQ+0x38>)
 800e062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e066:	095b      	lsrs	r3, r3, #5
 800e068:	2001      	movs	r0, #1
 800e06a:	fa00 f202 	lsl.w	r2, r0, r2
 800e06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800e072:	bf00      	nop
 800e074:	370c      	adds	r7, #12
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	e000e100 	.word	0xe000e100

0800e084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	4603      	mov	r3, r0
 800e08c:	6039      	str	r1, [r7, #0]
 800e08e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e094:	2b00      	cmp	r3, #0
 800e096:	db0a      	blt.n	800e0ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	490c      	ldr	r1, [pc, #48]	; (800e0d0 <__NVIC_SetPriority+0x4c>)
 800e09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0a2:	0112      	lsls	r2, r2, #4
 800e0a4:	b2d2      	uxtb	r2, r2
 800e0a6:	440b      	add	r3, r1
 800e0a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e0ac:	e00a      	b.n	800e0c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	4908      	ldr	r1, [pc, #32]	; (800e0d4 <__NVIC_SetPriority+0x50>)
 800e0b4:	79fb      	ldrb	r3, [r7, #7]
 800e0b6:	f003 030f 	and.w	r3, r3, #15
 800e0ba:	3b04      	subs	r3, #4
 800e0bc:	0112      	lsls	r2, r2, #4
 800e0be:	b2d2      	uxtb	r2, r2
 800e0c0:	440b      	add	r3, r1
 800e0c2:	761a      	strb	r2, [r3, #24]
}
 800e0c4:	bf00      	nop
 800e0c6:	370c      	adds	r7, #12
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr
 800e0d0:	e000e100 	.word	0xe000e100
 800e0d4:	e000ed00 	.word	0xe000ed00

0800e0d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b089      	sub	sp, #36	; 0x24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f003 0307 	and.w	r3, r3, #7
 800e0ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	f1c3 0307 	rsb	r3, r3, #7
 800e0f2:	2b04      	cmp	r3, #4
 800e0f4:	bf28      	it	cs
 800e0f6:	2304      	movcs	r3, #4
 800e0f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	2b06      	cmp	r3, #6
 800e100:	d902      	bls.n	800e108 <NVIC_EncodePriority+0x30>
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	3b03      	subs	r3, #3
 800e106:	e000      	b.n	800e10a <NVIC_EncodePriority+0x32>
 800e108:	2300      	movs	r3, #0
 800e10a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e10c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	fa02 f303 	lsl.w	r3, r2, r3
 800e116:	43da      	mvns	r2, r3
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	401a      	ands	r2, r3
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e120:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	fa01 f303 	lsl.w	r3, r1, r3
 800e12a:	43d9      	mvns	r1, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e130:	4313      	orrs	r3, r2
         );
}
 800e132:	4618      	mov	r0, r3
 800e134:	3724      	adds	r7, #36	; 0x24
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr
	...

0800e140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	3b01      	subs	r3, #1
 800e14c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e150:	d301      	bcc.n	800e156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e152:	2301      	movs	r3, #1
 800e154:	e00f      	b.n	800e176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e156:	4a0a      	ldr	r2, [pc, #40]	; (800e180 <SysTick_Config+0x40>)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	3b01      	subs	r3, #1
 800e15c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e15e:	210f      	movs	r1, #15
 800e160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e164:	f7ff ff8e 	bl	800e084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e168:	4b05      	ldr	r3, [pc, #20]	; (800e180 <SysTick_Config+0x40>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e16e:	4b04      	ldr	r3, [pc, #16]	; (800e180 <SysTick_Config+0x40>)
 800e170:	2207      	movs	r2, #7
 800e172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3708      	adds	r7, #8
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	e000e010 	.word	0xe000e010

0800e184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff ff29 	bl	800dfe4 <__NVIC_SetPriorityGrouping>
}
 800e192:	bf00      	nop
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b086      	sub	sp, #24
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	60b9      	str	r1, [r7, #8]
 800e1a4:	607a      	str	r2, [r7, #4]
 800e1a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e1ac:	f7ff ff3e 	bl	800e02c <__NVIC_GetPriorityGrouping>
 800e1b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	68b9      	ldr	r1, [r7, #8]
 800e1b6:	6978      	ldr	r0, [r7, #20]
 800e1b8:	f7ff ff8e 	bl	800e0d8 <NVIC_EncodePriority>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7ff ff5d 	bl	800e084 <__NVIC_SetPriority>
}
 800e1ca:	bf00      	nop
 800e1cc:	3718      	adds	r7, #24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b082      	sub	sp, #8
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	4603      	mov	r3, r0
 800e1da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e1dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7ff ff31 	bl	800e048 <__NVIC_EnableIRQ>
}
 800e1e6:	bf00      	nop
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b082      	sub	sp, #8
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7ff ffa2 	bl	800e140 <SysTick_Config>
 800e1fc:	4603      	mov	r3, r0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e208:	b480      	push	{r7}
 800e20a:	b087      	sub	sp, #28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e212:	2300      	movs	r3, #0
 800e214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e216:	e166      	b.n	800e4e6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	2101      	movs	r1, #1
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	fa01 f303 	lsl.w	r3, r1, r3
 800e224:	4013      	ands	r3, r2
 800e226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 8158 	beq.w	800e4e0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	2b02      	cmp	r3, #2
 800e236:	d003      	beq.n	800e240 <HAL_GPIO_Init+0x38>
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	2b12      	cmp	r3, #18
 800e23e:	d123      	bne.n	800e288 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	08da      	lsrs	r2, r3, #3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	3208      	adds	r2, #8
 800e248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e24c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	f003 0307 	and.w	r3, r3, #7
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	220f      	movs	r2, #15
 800e258:	fa02 f303 	lsl.w	r3, r2, r3
 800e25c:	43db      	mvns	r3, r3
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	4013      	ands	r3, r2
 800e262:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	691a      	ldr	r2, [r3, #16]
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	f003 0307 	and.w	r3, r3, #7
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	fa02 f303 	lsl.w	r3, r2, r3
 800e274:	693a      	ldr	r2, [r7, #16]
 800e276:	4313      	orrs	r3, r2
 800e278:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	08da      	lsrs	r2, r3, #3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	3208      	adds	r2, #8
 800e282:	6939      	ldr	r1, [r7, #16]
 800e284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	005b      	lsls	r3, r3, #1
 800e292:	2203      	movs	r2, #3
 800e294:	fa02 f303 	lsl.w	r3, r2, r3
 800e298:	43db      	mvns	r3, r3
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	4013      	ands	r3, r2
 800e29e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	f003 0203 	and.w	r2, r3, #3
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	005b      	lsls	r3, r3, #1
 800e2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e2b0:	693a      	ldr	r2, [r7, #16]
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	693a      	ldr	r2, [r7, #16]
 800e2ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d00b      	beq.n	800e2dc <HAL_GPIO_Init+0xd4>
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d007      	beq.n	800e2dc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e2d0:	2b11      	cmp	r3, #17
 800e2d2:	d003      	beq.n	800e2dc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	2b12      	cmp	r3, #18
 800e2da:	d130      	bne.n	800e33e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	2203      	movs	r2, #3
 800e2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e2ec:	43db      	mvns	r3, r3
 800e2ee:	693a      	ldr	r2, [r7, #16]
 800e2f0:	4013      	ands	r3, r2
 800e2f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	68da      	ldr	r2, [r3, #12]
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	005b      	lsls	r3, r3, #1
 800e2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e300:	693a      	ldr	r2, [r7, #16]
 800e302:	4313      	orrs	r3, r2
 800e304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e312:	2201      	movs	r2, #1
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	fa02 f303 	lsl.w	r3, r2, r3
 800e31a:	43db      	mvns	r3, r3
 800e31c:	693a      	ldr	r2, [r7, #16]
 800e31e:	4013      	ands	r3, r2
 800e320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	091b      	lsrs	r3, r3, #4
 800e328:	f003 0201 	and.w	r2, r3, #1
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	fa02 f303 	lsl.w	r3, r2, r3
 800e332:	693a      	ldr	r2, [r7, #16]
 800e334:	4313      	orrs	r3, r2
 800e336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	693a      	ldr	r2, [r7, #16]
 800e33c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	005b      	lsls	r3, r3, #1
 800e348:	2203      	movs	r2, #3
 800e34a:	fa02 f303 	lsl.w	r3, r2, r3
 800e34e:	43db      	mvns	r3, r3
 800e350:	693a      	ldr	r2, [r7, #16]
 800e352:	4013      	ands	r3, r2
 800e354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	689a      	ldr	r2, [r3, #8]
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	005b      	lsls	r3, r3, #1
 800e35e:	fa02 f303 	lsl.w	r3, r2, r3
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	4313      	orrs	r3, r2
 800e366:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	693a      	ldr	r2, [r7, #16]
 800e36c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 80b2 	beq.w	800e4e0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e37c:	4b61      	ldr	r3, [pc, #388]	; (800e504 <HAL_GPIO_Init+0x2fc>)
 800e37e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e380:	4a60      	ldr	r2, [pc, #384]	; (800e504 <HAL_GPIO_Init+0x2fc>)
 800e382:	f043 0301 	orr.w	r3, r3, #1
 800e386:	6613      	str	r3, [r2, #96]	; 0x60
 800e388:	4b5e      	ldr	r3, [pc, #376]	; (800e504 <HAL_GPIO_Init+0x2fc>)
 800e38a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e38c:	f003 0301 	and.w	r3, r3, #1
 800e390:	60bb      	str	r3, [r7, #8]
 800e392:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800e394:	4a5c      	ldr	r2, [pc, #368]	; (800e508 <HAL_GPIO_Init+0x300>)
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	089b      	lsrs	r3, r3, #2
 800e39a:	3302      	adds	r3, #2
 800e39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	f003 0303 	and.w	r3, r3, #3
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	220f      	movs	r2, #15
 800e3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e3b0:	43db      	mvns	r3, r3
 800e3b2:	693a      	ldr	r2, [r7, #16]
 800e3b4:	4013      	ands	r3, r2
 800e3b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e3be:	d02b      	beq.n	800e418 <HAL_GPIO_Init+0x210>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	4a52      	ldr	r2, [pc, #328]	; (800e50c <HAL_GPIO_Init+0x304>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d025      	beq.n	800e414 <HAL_GPIO_Init+0x20c>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	4a51      	ldr	r2, [pc, #324]	; (800e510 <HAL_GPIO_Init+0x308>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d01f      	beq.n	800e410 <HAL_GPIO_Init+0x208>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4a50      	ldr	r2, [pc, #320]	; (800e514 <HAL_GPIO_Init+0x30c>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d019      	beq.n	800e40c <HAL_GPIO_Init+0x204>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	4a4f      	ldr	r2, [pc, #316]	; (800e518 <HAL_GPIO_Init+0x310>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d013      	beq.n	800e408 <HAL_GPIO_Init+0x200>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4a4e      	ldr	r2, [pc, #312]	; (800e51c <HAL_GPIO_Init+0x314>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d00d      	beq.n	800e404 <HAL_GPIO_Init+0x1fc>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4a4d      	ldr	r2, [pc, #308]	; (800e520 <HAL_GPIO_Init+0x318>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d007      	beq.n	800e400 <HAL_GPIO_Init+0x1f8>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4a4c      	ldr	r2, [pc, #304]	; (800e524 <HAL_GPIO_Init+0x31c>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d101      	bne.n	800e3fc <HAL_GPIO_Init+0x1f4>
 800e3f8:	2307      	movs	r3, #7
 800e3fa:	e00e      	b.n	800e41a <HAL_GPIO_Init+0x212>
 800e3fc:	2308      	movs	r3, #8
 800e3fe:	e00c      	b.n	800e41a <HAL_GPIO_Init+0x212>
 800e400:	2306      	movs	r3, #6
 800e402:	e00a      	b.n	800e41a <HAL_GPIO_Init+0x212>
 800e404:	2305      	movs	r3, #5
 800e406:	e008      	b.n	800e41a <HAL_GPIO_Init+0x212>
 800e408:	2304      	movs	r3, #4
 800e40a:	e006      	b.n	800e41a <HAL_GPIO_Init+0x212>
 800e40c:	2303      	movs	r3, #3
 800e40e:	e004      	b.n	800e41a <HAL_GPIO_Init+0x212>
 800e410:	2302      	movs	r3, #2
 800e412:	e002      	b.n	800e41a <HAL_GPIO_Init+0x212>
 800e414:	2301      	movs	r3, #1
 800e416:	e000      	b.n	800e41a <HAL_GPIO_Init+0x212>
 800e418:	2300      	movs	r3, #0
 800e41a:	697a      	ldr	r2, [r7, #20]
 800e41c:	f002 0203 	and.w	r2, r2, #3
 800e420:	0092      	lsls	r2, r2, #2
 800e422:	4093      	lsls	r3, r2
 800e424:	693a      	ldr	r2, [r7, #16]
 800e426:	4313      	orrs	r3, r2
 800e428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e42a:	4937      	ldr	r1, [pc, #220]	; (800e508 <HAL_GPIO_Init+0x300>)
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	089b      	lsrs	r3, r3, #2
 800e430:	3302      	adds	r3, #2
 800e432:	693a      	ldr	r2, [r7, #16]
 800e434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800e438:	4b3b      	ldr	r3, [pc, #236]	; (800e528 <HAL_GPIO_Init+0x320>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	43db      	mvns	r3, r3
 800e442:	693a      	ldr	r2, [r7, #16]
 800e444:	4013      	ands	r3, r2
 800e446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e450:	2b00      	cmp	r3, #0
 800e452:	d003      	beq.n	800e45c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	4313      	orrs	r3, r2
 800e45a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e45c:	4a32      	ldr	r2, [pc, #200]	; (800e528 <HAL_GPIO_Init+0x320>)
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800e462:	4b31      	ldr	r3, [pc, #196]	; (800e528 <HAL_GPIO_Init+0x320>)
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	43db      	mvns	r3, r3
 800e46c:	693a      	ldr	r2, [r7, #16]
 800e46e:	4013      	ands	r3, r2
 800e470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d003      	beq.n	800e486 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800e47e:	693a      	ldr	r2, [r7, #16]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	4313      	orrs	r3, r2
 800e484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e486:	4a28      	ldr	r2, [pc, #160]	; (800e528 <HAL_GPIO_Init+0x320>)
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e48c:	4b26      	ldr	r3, [pc, #152]	; (800e528 <HAL_GPIO_Init+0x320>)
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	43db      	mvns	r3, r3
 800e496:	693a      	ldr	r2, [r7, #16]
 800e498:	4013      	ands	r3, r2
 800e49a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d003      	beq.n	800e4b0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800e4a8:	693a      	ldr	r2, [r7, #16]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e4b0:	4a1d      	ldr	r2, [pc, #116]	; (800e528 <HAL_GPIO_Init+0x320>)
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800e4b6:	4b1c      	ldr	r3, [pc, #112]	; (800e528 <HAL_GPIO_Init+0x320>)
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	43db      	mvns	r3, r3
 800e4c0:	693a      	ldr	r2, [r7, #16]
 800e4c2:	4013      	ands	r3, r2
 800e4c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800e4d2:	693a      	ldr	r2, [r7, #16]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e4da:	4a13      	ldr	r2, [pc, #76]	; (800e528 <HAL_GPIO_Init+0x320>)
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	fa22 f303 	lsr.w	r3, r2, r3
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f47f ae91 	bne.w	800e218 <HAL_GPIO_Init+0x10>
  }
}
 800e4f6:	bf00      	nop
 800e4f8:	371c      	adds	r7, #28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	40021000 	.word	0x40021000
 800e508:	40010000 	.word	0x40010000
 800e50c:	48000400 	.word	0x48000400
 800e510:	48000800 	.word	0x48000800
 800e514:	48000c00 	.word	0x48000c00
 800e518:	48001000 	.word	0x48001000
 800e51c:	48001400 	.word	0x48001400
 800e520:	48001800 	.word	0x48001800
 800e524:	48001c00 	.word	0x48001c00
 800e528:	40010400 	.word	0x40010400

0800e52c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	807b      	strh	r3, [r7, #2]
 800e538:	4613      	mov	r3, r2
 800e53a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e53c:	787b      	ldrb	r3, [r7, #1]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d003      	beq.n	800e54a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e542:	887a      	ldrh	r2, [r7, #2]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e548:	e002      	b.n	800e550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e54a:	887a      	ldrh	r2, [r7, #2]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e550:	bf00      	nop
 800e552:	370c      	adds	r7, #12
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	460b      	mov	r3, r1
 800e566:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	695a      	ldr	r2, [r3, #20]
 800e56c:	887b      	ldrh	r3, [r7, #2]
 800e56e:	4013      	ands	r3, r2
 800e570:	2b00      	cmp	r3, #0
 800e572:	d003      	beq.n	800e57c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e574:	887a      	ldrh	r2, [r7, #2]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800e57a:	e002      	b.n	800e582 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e57c:	887a      	ldrh	r2, [r7, #2]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	619a      	str	r2, [r3, #24]
}
 800e582:	bf00      	nop
 800e584:	370c      	adds	r7, #12
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800e58e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e590:	b08f      	sub	sp, #60	; 0x3c
 800e592:	af0a      	add	r7, sp, #40	; 0x28
 800e594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	e054      	b.n	800e64a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d106      	bne.n	800e5c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f00b f998 	bl	80198f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2203      	movs	r2, #3
 800e5c4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d102      	bne.n	800e5da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f003 fc60 	bl	8011ea4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	603b      	str	r3, [r7, #0]
 800e5ea:	687e      	ldr	r6, [r7, #4]
 800e5ec:	466d      	mov	r5, sp
 800e5ee:	f106 0410 	add.w	r4, r6, #16
 800e5f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e5f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e5fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e5fe:	e885 0003 	stmia.w	r5, {r0, r1}
 800e602:	1d33      	adds	r3, r6, #4
 800e604:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e606:	6838      	ldr	r0, [r7, #0]
 800e608:	f003 fbe9 	bl	8011dde <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2101      	movs	r1, #1
 800e612:	4618      	mov	r0, r3
 800e614:	f003 fc57 	bl	8011ec6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	603b      	str	r3, [r7, #0]
 800e61e:	687e      	ldr	r6, [r7, #4]
 800e620:	466d      	mov	r5, sp
 800e622:	f106 0410 	add.w	r4, r6, #16
 800e626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e62a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e62c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e62e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e632:	e885 0003 	stmia.w	r5, {r0, r1}
 800e636:	1d33      	adds	r3, r6, #4
 800e638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e63a:	6838      	ldr	r0, [r7, #0]
 800e63c:	f003 fd66 	bl	801210c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2201      	movs	r2, #1
 800e644:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3714      	adds	r7, #20
 800e64e:	46bd      	mov	sp, r7
 800e650:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e652 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800e652:	b590      	push	{r4, r7, lr}
 800e654:	b089      	sub	sp, #36	; 0x24
 800e656:	af04      	add	r7, sp, #16
 800e658:	6078      	str	r0, [r7, #4]
 800e65a:	4608      	mov	r0, r1
 800e65c:	4611      	mov	r1, r2
 800e65e:	461a      	mov	r2, r3
 800e660:	4603      	mov	r3, r0
 800e662:	70fb      	strb	r3, [r7, #3]
 800e664:	460b      	mov	r3, r1
 800e666:	70bb      	strb	r3, [r7, #2]
 800e668:	4613      	mov	r3, r2
 800e66a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800e672:	2b01      	cmp	r3, #1
 800e674:	d101      	bne.n	800e67a <HAL_HCD_HC_Init+0x28>
 800e676:	2302      	movs	r3, #2
 800e678:	e07f      	b.n	800e77a <HAL_HCD_HC_Init+0x128>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800e682:	78fa      	ldrb	r2, [r7, #3]
 800e684:	6879      	ldr	r1, [r7, #4]
 800e686:	4613      	mov	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	4413      	add	r3, r2
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	440b      	add	r3, r1
 800e690:	333d      	adds	r3, #61	; 0x3d
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800e696:	78fa      	ldrb	r2, [r7, #3]
 800e698:	6879      	ldr	r1, [r7, #4]
 800e69a:	4613      	mov	r3, r2
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	4413      	add	r3, r2
 800e6a0:	00db      	lsls	r3, r3, #3
 800e6a2:	440b      	add	r3, r1
 800e6a4:	3338      	adds	r3, #56	; 0x38
 800e6a6:	787a      	ldrb	r2, [r7, #1]
 800e6a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800e6aa:	78fa      	ldrb	r2, [r7, #3]
 800e6ac:	6879      	ldr	r1, [r7, #4]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	00db      	lsls	r3, r3, #3
 800e6b6:	440b      	add	r3, r1
 800e6b8:	3340      	adds	r3, #64	; 0x40
 800e6ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e6bc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800e6be:	78fa      	ldrb	r2, [r7, #3]
 800e6c0:	6879      	ldr	r1, [r7, #4]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	4413      	add	r3, r2
 800e6c8:	00db      	lsls	r3, r3, #3
 800e6ca:	440b      	add	r3, r1
 800e6cc:	3339      	adds	r3, #57	; 0x39
 800e6ce:	78fa      	ldrb	r2, [r7, #3]
 800e6d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800e6d2:	78fa      	ldrb	r2, [r7, #3]
 800e6d4:	6879      	ldr	r1, [r7, #4]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	4413      	add	r3, r2
 800e6dc:	00db      	lsls	r3, r3, #3
 800e6de:	440b      	add	r3, r1
 800e6e0:	333f      	adds	r3, #63	; 0x3f
 800e6e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e6e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800e6e8:	78fa      	ldrb	r2, [r7, #3]
 800e6ea:	78bb      	ldrb	r3, [r7, #2]
 800e6ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6f0:	b2d8      	uxtb	r0, r3
 800e6f2:	6879      	ldr	r1, [r7, #4]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	440b      	add	r3, r1
 800e6fe:	333a      	adds	r3, #58	; 0x3a
 800e700:	4602      	mov	r2, r0
 800e702:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800e704:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	da0a      	bge.n	800e722 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800e70c:	78fa      	ldrb	r2, [r7, #3]
 800e70e:	6879      	ldr	r1, [r7, #4]
 800e710:	4613      	mov	r3, r2
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	4413      	add	r3, r2
 800e716:	00db      	lsls	r3, r3, #3
 800e718:	440b      	add	r3, r1
 800e71a:	333b      	adds	r3, #59	; 0x3b
 800e71c:	2201      	movs	r2, #1
 800e71e:	701a      	strb	r2, [r3, #0]
 800e720:	e009      	b.n	800e736 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800e722:	78fa      	ldrb	r2, [r7, #3]
 800e724:	6879      	ldr	r1, [r7, #4]
 800e726:	4613      	mov	r3, r2
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	4413      	add	r3, r2
 800e72c:	00db      	lsls	r3, r3, #3
 800e72e:	440b      	add	r3, r1
 800e730:	333b      	adds	r3, #59	; 0x3b
 800e732:	2200      	movs	r2, #0
 800e734:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800e736:	78fa      	ldrb	r2, [r7, #3]
 800e738:	6879      	ldr	r1, [r7, #4]
 800e73a:	4613      	mov	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	4413      	add	r3, r2
 800e740:	00db      	lsls	r3, r3, #3
 800e742:	440b      	add	r3, r1
 800e744:	333c      	adds	r3, #60	; 0x3c
 800e746:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e74a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	787c      	ldrb	r4, [r7, #1]
 800e752:	78ba      	ldrb	r2, [r7, #2]
 800e754:	78f9      	ldrb	r1, [r7, #3]
 800e756:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e758:	9302      	str	r3, [sp, #8]
 800e75a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	4623      	mov	r3, r4
 800e768:	f003 fe14 	bl	8012394 <USB_HC_Init>
 800e76c:	4603      	mov	r3, r0
 800e76e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2200      	movs	r2, #0
 800e774:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800e778:	7bfb      	ldrb	r3, [r7, #15]
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd90      	pop	{r4, r7, pc}

0800e782 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800e782:	b580      	push	{r7, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
 800e78a:	460b      	mov	r3, r1
 800e78c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800e78e:	2300      	movs	r3, #0
 800e790:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d101      	bne.n	800e7a0 <HAL_HCD_HC_Halt+0x1e>
 800e79c:	2302      	movs	r3, #2
 800e79e:	e00f      	b.n	800e7c0 <HAL_HCD_HC_Halt+0x3e>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	78fa      	ldrb	r2, [r7, #3]
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f003 fff2 	bl	801279a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800e7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3710      	adds	r7, #16
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	4608      	mov	r0, r1
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	70fb      	strb	r3, [r7, #3]
 800e7da:	460b      	mov	r3, r1
 800e7dc:	70bb      	strb	r3, [r7, #2]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800e7e2:	78fa      	ldrb	r2, [r7, #3]
 800e7e4:	6879      	ldr	r1, [r7, #4]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	00db      	lsls	r3, r3, #3
 800e7ee:	440b      	add	r3, r1
 800e7f0:	333b      	adds	r3, #59	; 0x3b
 800e7f2:	78ba      	ldrb	r2, [r7, #2]
 800e7f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800e7f6:	78fa      	ldrb	r2, [r7, #3]
 800e7f8:	6879      	ldr	r1, [r7, #4]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4413      	add	r3, r2
 800e800:	00db      	lsls	r3, r3, #3
 800e802:	440b      	add	r3, r1
 800e804:	333f      	adds	r3, #63	; 0x3f
 800e806:	787a      	ldrb	r2, [r7, #1]
 800e808:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800e80a:	7c3b      	ldrb	r3, [r7, #16]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d10a      	bne.n	800e826 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800e810:	78fa      	ldrb	r2, [r7, #3]
 800e812:	6879      	ldr	r1, [r7, #4]
 800e814:	4613      	mov	r3, r2
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	4413      	add	r3, r2
 800e81a:	00db      	lsls	r3, r3, #3
 800e81c:	440b      	add	r3, r1
 800e81e:	3342      	adds	r3, #66	; 0x42
 800e820:	2203      	movs	r2, #3
 800e822:	701a      	strb	r2, [r3, #0]
 800e824:	e009      	b.n	800e83a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e826:	78fa      	ldrb	r2, [r7, #3]
 800e828:	6879      	ldr	r1, [r7, #4]
 800e82a:	4613      	mov	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	4413      	add	r3, r2
 800e830:	00db      	lsls	r3, r3, #3
 800e832:	440b      	add	r3, r1
 800e834:	3342      	adds	r3, #66	; 0x42
 800e836:	2202      	movs	r2, #2
 800e838:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800e83a:	787b      	ldrb	r3, [r7, #1]
 800e83c:	2b03      	cmp	r3, #3
 800e83e:	f200 80d6 	bhi.w	800e9ee <HAL_HCD_HC_SubmitRequest+0x226>
 800e842:	a201      	add	r2, pc, #4	; (adr r2, 800e848 <HAL_HCD_HC_SubmitRequest+0x80>)
 800e844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e848:	0800e859 	.word	0x0800e859
 800e84c:	0800e9d9 	.word	0x0800e9d9
 800e850:	0800e8c5 	.word	0x0800e8c5
 800e854:	0800e94f 	.word	0x0800e94f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800e858:	7c3b      	ldrb	r3, [r7, #16]
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	f040 80c9 	bne.w	800e9f2 <HAL_HCD_HC_SubmitRequest+0x22a>
 800e860:	78bb      	ldrb	r3, [r7, #2]
 800e862:	2b00      	cmp	r3, #0
 800e864:	f040 80c5 	bne.w	800e9f2 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 800e868:	8b3b      	ldrh	r3, [r7, #24]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d109      	bne.n	800e882 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800e86e:	78fa      	ldrb	r2, [r7, #3]
 800e870:	6879      	ldr	r1, [r7, #4]
 800e872:	4613      	mov	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	00db      	lsls	r3, r3, #3
 800e87a:	440b      	add	r3, r1
 800e87c:	3351      	adds	r3, #81	; 0x51
 800e87e:	2201      	movs	r2, #1
 800e880:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800e882:	78fa      	ldrb	r2, [r7, #3]
 800e884:	6879      	ldr	r1, [r7, #4]
 800e886:	4613      	mov	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	4413      	add	r3, r2
 800e88c:	00db      	lsls	r3, r3, #3
 800e88e:	440b      	add	r3, r1
 800e890:	3351      	adds	r3, #81	; 0x51
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d10a      	bne.n	800e8ae <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e898:	78fa      	ldrb	r2, [r7, #3]
 800e89a:	6879      	ldr	r1, [r7, #4]
 800e89c:	4613      	mov	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	00db      	lsls	r3, r3, #3
 800e8a4:	440b      	add	r3, r1
 800e8a6:	3342      	adds	r3, #66	; 0x42
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800e8ac:	e0a1      	b.n	800e9f2 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e8ae:	78fa      	ldrb	r2, [r7, #3]
 800e8b0:	6879      	ldr	r1, [r7, #4]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4413      	add	r3, r2
 800e8b8:	00db      	lsls	r3, r3, #3
 800e8ba:	440b      	add	r3, r1
 800e8bc:	3342      	adds	r3, #66	; 0x42
 800e8be:	2202      	movs	r2, #2
 800e8c0:	701a      	strb	r2, [r3, #0]
      break;
 800e8c2:	e096      	b.n	800e9f2 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800e8c4:	78bb      	ldrb	r3, [r7, #2]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d120      	bne.n	800e90c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800e8ca:	78fa      	ldrb	r2, [r7, #3]
 800e8cc:	6879      	ldr	r1, [r7, #4]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	4413      	add	r3, r2
 800e8d4:	00db      	lsls	r3, r3, #3
 800e8d6:	440b      	add	r3, r1
 800e8d8:	3351      	adds	r3, #81	; 0x51
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10a      	bne.n	800e8f6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e8e0:	78fa      	ldrb	r2, [r7, #3]
 800e8e2:	6879      	ldr	r1, [r7, #4]
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	4413      	add	r3, r2
 800e8ea:	00db      	lsls	r3, r3, #3
 800e8ec:	440b      	add	r3, r1
 800e8ee:	3342      	adds	r3, #66	; 0x42
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800e8f4:	e07e      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e8f6:	78fa      	ldrb	r2, [r7, #3]
 800e8f8:	6879      	ldr	r1, [r7, #4]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	4413      	add	r3, r2
 800e900:	00db      	lsls	r3, r3, #3
 800e902:	440b      	add	r3, r1
 800e904:	3342      	adds	r3, #66	; 0x42
 800e906:	2202      	movs	r2, #2
 800e908:	701a      	strb	r2, [r3, #0]
      break;
 800e90a:	e073      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800e90c:	78fa      	ldrb	r2, [r7, #3]
 800e90e:	6879      	ldr	r1, [r7, #4]
 800e910:	4613      	mov	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4413      	add	r3, r2
 800e916:	00db      	lsls	r3, r3, #3
 800e918:	440b      	add	r3, r1
 800e91a:	3350      	adds	r3, #80	; 0x50
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10a      	bne.n	800e938 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e922:	78fa      	ldrb	r2, [r7, #3]
 800e924:	6879      	ldr	r1, [r7, #4]
 800e926:	4613      	mov	r3, r2
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	4413      	add	r3, r2
 800e92c:	00db      	lsls	r3, r3, #3
 800e92e:	440b      	add	r3, r1
 800e930:	3342      	adds	r3, #66	; 0x42
 800e932:	2200      	movs	r2, #0
 800e934:	701a      	strb	r2, [r3, #0]
      break;
 800e936:	e05d      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e938:	78fa      	ldrb	r2, [r7, #3]
 800e93a:	6879      	ldr	r1, [r7, #4]
 800e93c:	4613      	mov	r3, r2
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	4413      	add	r3, r2
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	440b      	add	r3, r1
 800e946:	3342      	adds	r3, #66	; 0x42
 800e948:	2202      	movs	r2, #2
 800e94a:	701a      	strb	r2, [r3, #0]
      break;
 800e94c:	e052      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800e94e:	78bb      	ldrb	r3, [r7, #2]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d120      	bne.n	800e996 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800e954:	78fa      	ldrb	r2, [r7, #3]
 800e956:	6879      	ldr	r1, [r7, #4]
 800e958:	4613      	mov	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	4413      	add	r3, r2
 800e95e:	00db      	lsls	r3, r3, #3
 800e960:	440b      	add	r3, r1
 800e962:	3351      	adds	r3, #81	; 0x51
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10a      	bne.n	800e980 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e96a:	78fa      	ldrb	r2, [r7, #3]
 800e96c:	6879      	ldr	r1, [r7, #4]
 800e96e:	4613      	mov	r3, r2
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4413      	add	r3, r2
 800e974:	00db      	lsls	r3, r3, #3
 800e976:	440b      	add	r3, r1
 800e978:	3342      	adds	r3, #66	; 0x42
 800e97a:	2200      	movs	r2, #0
 800e97c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800e97e:	e039      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e980:	78fa      	ldrb	r2, [r7, #3]
 800e982:	6879      	ldr	r1, [r7, #4]
 800e984:	4613      	mov	r3, r2
 800e986:	009b      	lsls	r3, r3, #2
 800e988:	4413      	add	r3, r2
 800e98a:	00db      	lsls	r3, r3, #3
 800e98c:	440b      	add	r3, r1
 800e98e:	3342      	adds	r3, #66	; 0x42
 800e990:	2202      	movs	r2, #2
 800e992:	701a      	strb	r2, [r3, #0]
      break;
 800e994:	e02e      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800e996:	78fa      	ldrb	r2, [r7, #3]
 800e998:	6879      	ldr	r1, [r7, #4]
 800e99a:	4613      	mov	r3, r2
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	4413      	add	r3, r2
 800e9a0:	00db      	lsls	r3, r3, #3
 800e9a2:	440b      	add	r3, r1
 800e9a4:	3350      	adds	r3, #80	; 0x50
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10a      	bne.n	800e9c2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e9ac:	78fa      	ldrb	r2, [r7, #3]
 800e9ae:	6879      	ldr	r1, [r7, #4]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	4413      	add	r3, r2
 800e9b6:	00db      	lsls	r3, r3, #3
 800e9b8:	440b      	add	r3, r1
 800e9ba:	3342      	adds	r3, #66	; 0x42
 800e9bc:	2200      	movs	r2, #0
 800e9be:	701a      	strb	r2, [r3, #0]
      break;
 800e9c0:	e018      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800e9c2:	78fa      	ldrb	r2, [r7, #3]
 800e9c4:	6879      	ldr	r1, [r7, #4]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	009b      	lsls	r3, r3, #2
 800e9ca:	4413      	add	r3, r2
 800e9cc:	00db      	lsls	r3, r3, #3
 800e9ce:	440b      	add	r3, r1
 800e9d0:	3342      	adds	r3, #66	; 0x42
 800e9d2:	2202      	movs	r2, #2
 800e9d4:	701a      	strb	r2, [r3, #0]
      break;
 800e9d6:	e00d      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800e9d8:	78fa      	ldrb	r2, [r7, #3]
 800e9da:	6879      	ldr	r1, [r7, #4]
 800e9dc:	4613      	mov	r3, r2
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4413      	add	r3, r2
 800e9e2:	00db      	lsls	r3, r3, #3
 800e9e4:	440b      	add	r3, r1
 800e9e6:	3342      	adds	r3, #66	; 0x42
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	701a      	strb	r2, [r3, #0]
      break;
 800e9ec:	e002      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800e9ee:	bf00      	nop
 800e9f0:	e000      	b.n	800e9f4 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800e9f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800e9f4:	78fa      	ldrb	r2, [r7, #3]
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	00db      	lsls	r3, r3, #3
 800ea00:	440b      	add	r3, r1
 800ea02:	3344      	adds	r3, #68	; 0x44
 800ea04:	697a      	ldr	r2, [r7, #20]
 800ea06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800ea08:	78fa      	ldrb	r2, [r7, #3]
 800ea0a:	8b39      	ldrh	r1, [r7, #24]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4413      	add	r3, r2
 800ea14:	00db      	lsls	r3, r3, #3
 800ea16:	4403      	add	r3, r0
 800ea18:	3348      	adds	r3, #72	; 0x48
 800ea1a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800ea1c:	78fa      	ldrb	r2, [r7, #3]
 800ea1e:	6879      	ldr	r1, [r7, #4]
 800ea20:	4613      	mov	r3, r2
 800ea22:	009b      	lsls	r3, r3, #2
 800ea24:	4413      	add	r3, r2
 800ea26:	00db      	lsls	r3, r3, #3
 800ea28:	440b      	add	r3, r1
 800ea2a:	335c      	adds	r3, #92	; 0x5c
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800ea30:	78fa      	ldrb	r2, [r7, #3]
 800ea32:	6879      	ldr	r1, [r7, #4]
 800ea34:	4613      	mov	r3, r2
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	4413      	add	r3, r2
 800ea3a:	00db      	lsls	r3, r3, #3
 800ea3c:	440b      	add	r3, r1
 800ea3e:	334c      	adds	r3, #76	; 0x4c
 800ea40:	2200      	movs	r2, #0
 800ea42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800ea44:	78fa      	ldrb	r2, [r7, #3]
 800ea46:	6879      	ldr	r1, [r7, #4]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4413      	add	r3, r2
 800ea4e:	00db      	lsls	r3, r3, #3
 800ea50:	440b      	add	r3, r1
 800ea52:	3339      	adds	r3, #57	; 0x39
 800ea54:	78fa      	ldrb	r2, [r7, #3]
 800ea56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800ea58:	78fa      	ldrb	r2, [r7, #3]
 800ea5a:	6879      	ldr	r1, [r7, #4]
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4413      	add	r3, r2
 800ea62:	00db      	lsls	r3, r3, #3
 800ea64:	440b      	add	r3, r1
 800ea66:	335d      	adds	r3, #93	; 0x5d
 800ea68:	2200      	movs	r2, #0
 800ea6a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6818      	ldr	r0, [r3, #0]
 800ea70:	78fa      	ldrb	r2, [r7, #3]
 800ea72:	4613      	mov	r3, r2
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4413      	add	r3, r2
 800ea78:	00db      	lsls	r3, r3, #3
 800ea7a:	3338      	adds	r3, #56	; 0x38
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	4413      	add	r3, r2
 800ea80:	4619      	mov	r1, r3
 800ea82:	f003 fd79 	bl	8012578 <USB_HC_StartXfer>
 800ea86:	4603      	mov	r3, r0
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f003 faed 	bl	8012086 <USB_GetMode>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	f040 80f1 	bne.w	800ec96 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4618      	mov	r0, r3
 800eaba:	f003 fad1 	bl	8012060 <USB_ReadInterrupts>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 80e7 	beq.w	800ec94 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f003 fac8 	bl	8012060 <USB_ReadInterrupts>
 800ead0:	4603      	mov	r3, r0
 800ead2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ead6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eada:	d104      	bne.n	800eae6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800eae4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f003 fab8 	bl	8012060 <USB_ReadInterrupts>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eaf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eafa:	d104      	bne.n	800eb06 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eb04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f003 faa8 	bl	8012060 <USB_ReadInterrupts>
 800eb10:	4603      	mov	r3, r0
 800eb12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eb16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eb1a:	d104      	bne.n	800eb26 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800eb24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f003 fa98 	bl	8012060 <USB_ReadInterrupts>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f003 0302 	and.w	r3, r3, #2
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	d103      	bne.n	800eb42 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2202      	movs	r2, #2
 800eb40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f003 fa8a 	bl	8012060 <USB_ReadInterrupts>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb56:	d117      	bne.n	800eb88 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800eb66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800eb6a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f00a ff41 	bl	80199f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2101      	movs	r1, #1
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f003 fb45 	bl	8012208 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800eb86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f003 fa67 	bl	8012060 <USB_ReadInterrupts>
 800eb92:	4603      	mov	r3, r0
 800eb94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eb9c:	d102      	bne.n	800eba4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f001 f870 	bl	800fc84 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f003 fa59 	bl	8012060 <USB_ReadInterrupts>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	f003 0308 	and.w	r3, r3, #8
 800ebb4:	2b08      	cmp	r3, #8
 800ebb6:	d106      	bne.n	800ebc6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f00a feff 	bl	80199bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2208      	movs	r2, #8
 800ebc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f003 fa48 	bl	8012060 <USB_ReadInterrupts>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ebda:	d138      	bne.n	800ec4e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f003 fdc9 	bl	8012778 <USB_HC_ReadInterrupt>
 800ebe6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800ebe8:	2300      	movs	r3, #0
 800ebea:	617b      	str	r3, [r7, #20]
 800ebec:	e025      	b.n	800ec3a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	f003 030f 	and.w	r3, r3, #15
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebfa:	f003 0301 	and.w	r3, r3, #1
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d018      	beq.n	800ec34 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	015a      	lsls	r2, r3, #5
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	4413      	add	r3, r2
 800ec0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec18:	d106      	bne.n	800ec28 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	4619      	mov	r1, r3
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 f8ba 	bl	800ed9a <HCD_HC_IN_IRQHandler>
 800ec26:	e005      	b.n	800ec34 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 fc26 	bl	800f480 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	3301      	adds	r3, #1
 800ec38:	617b      	str	r3, [r7, #20]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	697a      	ldr	r2, [r7, #20]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d3d4      	bcc.n	800ebee <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ec4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f003 fa04 	bl	8012060 <USB_ReadInterrupts>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	f003 0310 	and.w	r3, r3, #16
 800ec5e:	2b10      	cmp	r3, #16
 800ec60:	d101      	bne.n	800ec66 <HAL_HCD_IRQHandler+0x1d6>
 800ec62:	2301      	movs	r3, #1
 800ec64:	e000      	b.n	800ec68 <HAL_HCD_IRQHandler+0x1d8>
 800ec66:	2300      	movs	r3, #0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d014      	beq.n	800ec96 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	699a      	ldr	r2, [r3, #24]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f022 0210 	bic.w	r2, r2, #16
 800ec7a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f000 ff55 	bl	800fb2c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	699a      	ldr	r2, [r3, #24]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f042 0210 	orr.w	r2, r2, #16
 800ec90:	619a      	str	r2, [r3, #24]
 800ec92:	e000      	b.n	800ec96 <HAL_HCD_IRQHandler+0x206>
      return;
 800ec94:	bf00      	nop
    }
  }
}
 800ec96:	3718      	adds	r7, #24
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d101      	bne.n	800ecb2 <HAL_HCD_Start+0x16>
 800ecae:	2302      	movs	r3, #2
 800ecb0:	e013      	b.n	800ecda <HAL_HCD_Start+0x3e>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f003 f8df 	bl	8011e82 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2101      	movs	r1, #1
 800ecca:	4618      	mov	r0, r3
 800eccc:	f003 fb00 	bl	80122d0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800ecd8:	2300      	movs	r3, #0
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b082      	sub	sp, #8
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d101      	bne.n	800ecf8 <HAL_HCD_Stop+0x16>
 800ecf4:	2302      	movs	r3, #2
 800ecf6:	e00d      	b.n	800ed14 <HAL_HCD_Stop+0x32>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f003 fe47 	bl	8012998 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800ed12:	2300      	movs	r3, #0
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3708      	adds	r7, #8
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f003 faa7 	bl	801227c <USB_ResetPort>
 800ed2e:	4603      	mov	r3, r0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3708      	adds	r7, #8
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b083      	sub	sp, #12
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	460b      	mov	r3, r1
 800ed42:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800ed44:	78fa      	ldrb	r2, [r7, #3]
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4413      	add	r3, r2
 800ed4e:	00db      	lsls	r3, r3, #3
 800ed50:	440b      	add	r3, r1
 800ed52:	335c      	adds	r3, #92	; 0x5c
 800ed54:	781b      	ldrb	r3, [r3, #0]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	370c      	adds	r7, #12
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr

0800ed62 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b082      	sub	sp, #8
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f003 fafe 	bl	8012370 <USB_GetCurrentFrame>
 800ed74:	4603      	mov	r3, r0
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3708      	adds	r7, #8
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b082      	sub	sp, #8
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f003 fad9 	bl	8012342 <USB_GetHostSpeed>
 800ed90:	4603      	mov	r3, r0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3708      	adds	r7, #8
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b086      	sub	sp, #24
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	460b      	mov	r3, r1
 800eda4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800edb0:	78fb      	ldrb	r3, [r7, #3]
 800edb2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	015a      	lsls	r2, r3, #5
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	4413      	add	r3, r2
 800edbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	f003 0304 	and.w	r3, r3, #4
 800edc6:	2b04      	cmp	r3, #4
 800edc8:	d119      	bne.n	800edfe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	015a      	lsls	r2, r3, #5
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	4413      	add	r3, r2
 800edd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800edd6:	461a      	mov	r2, r3
 800edd8:	2304      	movs	r3, #4
 800edda:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	015a      	lsls	r2, r3, #5
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	4413      	add	r3, r2
 800ede4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	0151      	lsls	r1, r2, #5
 800edee:	693a      	ldr	r2, [r7, #16]
 800edf0:	440a      	add	r2, r1
 800edf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800edf6:	f043 0302 	orr.w	r3, r3, #2
 800edfa:	60d3      	str	r3, [r2, #12]
 800edfc:	e095      	b.n	800ef2a <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	015a      	lsls	r2, r3, #5
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	4413      	add	r3, r2
 800ee06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	f003 0320 	and.w	r3, r3, #32
 800ee10:	2b20      	cmp	r3, #32
 800ee12:	d109      	bne.n	800ee28 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	015a      	lsls	r2, r3, #5
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee20:	461a      	mov	r2, r3
 800ee22:	2320      	movs	r3, #32
 800ee24:	6093      	str	r3, [r2, #8]
 800ee26:	e080      	b.n	800ef2a <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	015a      	lsls	r2, r3, #5
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	4413      	add	r3, r2
 800ee30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	f003 0308 	and.w	r3, r3, #8
 800ee3a:	2b08      	cmp	r3, #8
 800ee3c:	d134      	bne.n	800eea8 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	015a      	lsls	r2, r3, #5
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	4413      	add	r3, r2
 800ee46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	68fa      	ldr	r2, [r7, #12]
 800ee4e:	0151      	lsls	r1, r2, #5
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	440a      	add	r2, r1
 800ee54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ee58:	f043 0302 	orr.w	r3, r3, #2
 800ee5c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800ee5e:	6879      	ldr	r1, [r7, #4]
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	4613      	mov	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	4413      	add	r3, r2
 800ee68:	00db      	lsls	r3, r3, #3
 800ee6a:	440b      	add	r3, r1
 800ee6c:	335d      	adds	r3, #93	; 0x5d
 800ee6e:	2205      	movs	r2, #5
 800ee70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	015a      	lsls	r2, r3, #5
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	4413      	add	r3, r2
 800ee7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee7e:	461a      	mov	r2, r3
 800ee80:	2310      	movs	r3, #16
 800ee82:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	015a      	lsls	r2, r3, #5
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee90:	461a      	mov	r2, r3
 800ee92:	2308      	movs	r3, #8
 800ee94:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	b2d2      	uxtb	r2, r2
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f003 fc7a 	bl	801279a <USB_HC_Halt>
 800eea6:	e040      	b.n	800ef2a <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	015a      	lsls	r2, r3, #5
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	4413      	add	r3, r2
 800eeb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eeba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eebe:	d134      	bne.n	800ef2a <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	015a      	lsls	r2, r3, #5
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	4413      	add	r3, r2
 800eec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	0151      	lsls	r1, r2, #5
 800eed2:	693a      	ldr	r2, [r7, #16]
 800eed4:	440a      	add	r2, r1
 800eed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eeda:	f043 0302 	orr.w	r3, r3, #2
 800eede:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	68fa      	ldr	r2, [r7, #12]
 800eee6:	b2d2      	uxtb	r2, r2
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f003 fc55 	bl	801279a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	015a      	lsls	r2, r3, #5
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eefc:	461a      	mov	r2, r3
 800eefe:	2310      	movs	r3, #16
 800ef00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800ef02:	6879      	ldr	r1, [r7, #4]
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	4613      	mov	r3, r2
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	4413      	add	r3, r2
 800ef0c:	00db      	lsls	r3, r3, #3
 800ef0e:	440b      	add	r3, r1
 800ef10:	335d      	adds	r3, #93	; 0x5d
 800ef12:	2208      	movs	r2, #8
 800ef14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	015a      	lsls	r2, r3, #5
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef22:	461a      	mov	r2, r3
 800ef24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef28:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	015a      	lsls	r2, r3, #5
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	4413      	add	r3, r2
 800ef32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ef3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef40:	d122      	bne.n	800ef88 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	015a      	lsls	r2, r3, #5
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	4413      	add	r3, r2
 800ef4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	68fa      	ldr	r2, [r7, #12]
 800ef52:	0151      	lsls	r1, r2, #5
 800ef54:	693a      	ldr	r2, [r7, #16]
 800ef56:	440a      	add	r2, r1
 800ef58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ef5c:	f043 0302 	orr.w	r3, r3, #2
 800ef60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	b2d2      	uxtb	r2, r2
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f003 fc14 	bl	801279a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	015a      	lsls	r2, r3, #5
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	4413      	add	r3, r2
 800ef7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef7e:	461a      	mov	r2, r3
 800ef80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef84:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800ef86:	e277      	b.n	800f478 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	015a      	lsls	r2, r3, #5
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	4413      	add	r3, r2
 800ef90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef94:	689b      	ldr	r3, [r3, #8]
 800ef96:	f003 0301 	and.w	r3, r3, #1
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	f040 80a1 	bne.w	800f0e2 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 800efa0:	6879      	ldr	r1, [r7, #4]
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	4613      	mov	r3, r2
 800efa6:	009b      	lsls	r3, r3, #2
 800efa8:	4413      	add	r3, r2
 800efaa:	00db      	lsls	r3, r3, #3
 800efac:	440b      	add	r3, r1
 800efae:	335d      	adds	r3, #93	; 0x5d
 800efb0:	2201      	movs	r2, #1
 800efb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800efb4:	6879      	ldr	r1, [r7, #4]
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	4613      	mov	r3, r2
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	4413      	add	r3, r2
 800efbe:	00db      	lsls	r3, r3, #3
 800efc0:	440b      	add	r3, r1
 800efc2:	3358      	adds	r3, #88	; 0x58
 800efc4:	2200      	movs	r2, #0
 800efc6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	015a      	lsls	r2, r3, #5
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	4413      	add	r3, r2
 800efd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800efd4:	461a      	mov	r2, r3
 800efd6:	2301      	movs	r3, #1
 800efd8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800efda:	6879      	ldr	r1, [r7, #4]
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	4613      	mov	r3, r2
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	4413      	add	r3, r2
 800efe4:	00db      	lsls	r3, r3, #3
 800efe6:	440b      	add	r3, r1
 800efe8:	333f      	adds	r3, #63	; 0x3f
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00a      	beq.n	800f006 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800eff0:	6879      	ldr	r1, [r7, #4]
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	4613      	mov	r3, r2
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4413      	add	r3, r2
 800effa:	00db      	lsls	r3, r3, #3
 800effc:	440b      	add	r3, r1
 800effe:	333f      	adds	r3, #63	; 0x3f
 800f000:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800f002:	2b02      	cmp	r3, #2
 800f004:	d121      	bne.n	800f04a <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	015a      	lsls	r2, r3, #5
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	4413      	add	r3, r2
 800f00e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	0151      	lsls	r1, r2, #5
 800f018:	693a      	ldr	r2, [r7, #16]
 800f01a:	440a      	add	r2, r1
 800f01c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f020:	f043 0302 	orr.w	r3, r3, #2
 800f024:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	b2d2      	uxtb	r2, r2
 800f02e:	4611      	mov	r1, r2
 800f030:	4618      	mov	r0, r3
 800f032:	f003 fbb2 	bl	801279a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	015a      	lsls	r2, r3, #5
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	4413      	add	r3, r2
 800f03e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f042:	461a      	mov	r2, r3
 800f044:	2310      	movs	r3, #16
 800f046:	6093      	str	r3, [r2, #8]
 800f048:	e034      	b.n	800f0b4 <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800f04a:	6879      	ldr	r1, [r7, #4]
 800f04c:	68fa      	ldr	r2, [r7, #12]
 800f04e:	4613      	mov	r3, r2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	00db      	lsls	r3, r3, #3
 800f056:	440b      	add	r3, r1
 800f058:	333f      	adds	r3, #63	; 0x3f
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	2b03      	cmp	r3, #3
 800f05e:	d129      	bne.n	800f0b4 <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	015a      	lsls	r2, r3, #5
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	4413      	add	r3, r2
 800f068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68fa      	ldr	r2, [r7, #12]
 800f070:	0151      	lsls	r1, r2, #5
 800f072:	693a      	ldr	r2, [r7, #16]
 800f074:	440a      	add	r2, r1
 800f076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f07a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f07e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800f080:	6879      	ldr	r1, [r7, #4]
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	4613      	mov	r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	4413      	add	r3, r2
 800f08a:	00db      	lsls	r3, r3, #3
 800f08c:	440b      	add	r3, r1
 800f08e:	335c      	adds	r3, #92	; 0x5c
 800f090:	2201      	movs	r2, #1
 800f092:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	b2d8      	uxtb	r0, r3
 800f098:	6879      	ldr	r1, [r7, #4]
 800f09a:	68fa      	ldr	r2, [r7, #12]
 800f09c:	4613      	mov	r3, r2
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4413      	add	r3, r2
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	440b      	add	r3, r1
 800f0a6:	335c      	adds	r3, #92	; 0x5c
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	4601      	mov	r1, r0
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f00a fcae 	bl	8019a10 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800f0b4:	6879      	ldr	r1, [r7, #4]
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	4413      	add	r3, r2
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	440b      	add	r3, r1
 800f0c2:	3350      	adds	r3, #80	; 0x50
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	f083 0301 	eor.w	r3, r3, #1
 800f0ca:	b2d8      	uxtb	r0, r3
 800f0cc:	6879      	ldr	r1, [r7, #4]
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	4413      	add	r3, r2
 800f0d6:	00db      	lsls	r3, r3, #3
 800f0d8:	440b      	add	r3, r1
 800f0da:	3350      	adds	r3, #80	; 0x50
 800f0dc:	4602      	mov	r2, r0
 800f0de:	701a      	strb	r2, [r3, #0]
}
 800f0e0:	e1ca      	b.n	800f478 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	015a      	lsls	r2, r3, #5
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	f003 0302 	and.w	r3, r3, #2
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	f040 80f1 	bne.w	800f2dc <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	015a      	lsls	r2, r3, #5
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	4413      	add	r3, r2
 800f102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	0151      	lsls	r1, r2, #5
 800f10c:	693a      	ldr	r2, [r7, #16]
 800f10e:	440a      	add	r2, r1
 800f110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f114:	f023 0302 	bic.w	r3, r3, #2
 800f118:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800f11a:	6879      	ldr	r1, [r7, #4]
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	4613      	mov	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	00db      	lsls	r3, r3, #3
 800f126:	440b      	add	r3, r1
 800f128:	335d      	adds	r3, #93	; 0x5d
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d10a      	bne.n	800f146 <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800f130:	6879      	ldr	r1, [r7, #4]
 800f132:	68fa      	ldr	r2, [r7, #12]
 800f134:	4613      	mov	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	4413      	add	r3, r2
 800f13a:	00db      	lsls	r3, r3, #3
 800f13c:	440b      	add	r3, r1
 800f13e:	335c      	adds	r3, #92	; 0x5c
 800f140:	2201      	movs	r2, #1
 800f142:	701a      	strb	r2, [r3, #0]
 800f144:	e0b0      	b.n	800f2a8 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800f146:	6879      	ldr	r1, [r7, #4]
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	4613      	mov	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	00db      	lsls	r3, r3, #3
 800f152:	440b      	add	r3, r1
 800f154:	335d      	adds	r3, #93	; 0x5d
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	2b05      	cmp	r3, #5
 800f15a:	d10a      	bne.n	800f172 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800f15c:	6879      	ldr	r1, [r7, #4]
 800f15e:	68fa      	ldr	r2, [r7, #12]
 800f160:	4613      	mov	r3, r2
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	4413      	add	r3, r2
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	440b      	add	r3, r1
 800f16a:	335c      	adds	r3, #92	; 0x5c
 800f16c:	2205      	movs	r2, #5
 800f16e:	701a      	strb	r2, [r3, #0]
 800f170:	e09a      	b.n	800f2a8 <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800f172:	6879      	ldr	r1, [r7, #4]
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	4613      	mov	r3, r2
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	4413      	add	r3, r2
 800f17c:	00db      	lsls	r3, r3, #3
 800f17e:	440b      	add	r3, r1
 800f180:	335d      	adds	r3, #93	; 0x5d
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	2b06      	cmp	r3, #6
 800f186:	d00a      	beq.n	800f19e <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800f188:	6879      	ldr	r1, [r7, #4]
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	4613      	mov	r3, r2
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	4413      	add	r3, r2
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	440b      	add	r3, r1
 800f196:	335d      	adds	r3, #93	; 0x5d
 800f198:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800f19a:	2b08      	cmp	r3, #8
 800f19c:	d156      	bne.n	800f24c <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 800f19e:	6879      	ldr	r1, [r7, #4]
 800f1a0:	68fa      	ldr	r2, [r7, #12]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	4413      	add	r3, r2
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	440b      	add	r3, r1
 800f1ac:	3358      	adds	r3, #88	; 0x58
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	1c59      	adds	r1, r3, #1
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	4413      	add	r3, r2
 800f1bc:	00db      	lsls	r3, r3, #3
 800f1be:	4403      	add	r3, r0
 800f1c0:	3358      	adds	r3, #88	; 0x58
 800f1c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800f1c4:	6879      	ldr	r1, [r7, #4]
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	4413      	add	r3, r2
 800f1ce:	00db      	lsls	r3, r3, #3
 800f1d0:	440b      	add	r3, r1
 800f1d2:	3358      	adds	r3, #88	; 0x58
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2b03      	cmp	r3, #3
 800f1d8:	d914      	bls.n	800f204 <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800f1da:	6879      	ldr	r1, [r7, #4]
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	4613      	mov	r3, r2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	00db      	lsls	r3, r3, #3
 800f1e6:	440b      	add	r3, r1
 800f1e8:	3358      	adds	r3, #88	; 0x58
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800f1ee:	6879      	ldr	r1, [r7, #4]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	009b      	lsls	r3, r3, #2
 800f1f6:	4413      	add	r3, r2
 800f1f8:	00db      	lsls	r3, r3, #3
 800f1fa:	440b      	add	r3, r1
 800f1fc:	335c      	adds	r3, #92	; 0x5c
 800f1fe:	2204      	movs	r2, #4
 800f200:	701a      	strb	r2, [r3, #0]
 800f202:	e009      	b.n	800f218 <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800f204:	6879      	ldr	r1, [r7, #4]
 800f206:	68fa      	ldr	r2, [r7, #12]
 800f208:	4613      	mov	r3, r2
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	4413      	add	r3, r2
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	440b      	add	r3, r1
 800f212:	335c      	adds	r3, #92	; 0x5c
 800f214:	2202      	movs	r2, #2
 800f216:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	015a      	lsls	r2, r3, #5
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	4413      	add	r3, r2
 800f220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f22e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f236:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	015a      	lsls	r2, r3, #5
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	4413      	add	r3, r2
 800f240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f244:	461a      	mov	r2, r3
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	6013      	str	r3, [r2, #0]
 800f24a:	e02d      	b.n	800f2a8 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	4613      	mov	r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4413      	add	r3, r2
 800f256:	00db      	lsls	r3, r3, #3
 800f258:	440b      	add	r3, r1
 800f25a:	335d      	adds	r3, #93	; 0x5d
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d122      	bne.n	800f2a8 <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800f262:	6879      	ldr	r1, [r7, #4]
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	4613      	mov	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	4413      	add	r3, r2
 800f26c:	00db      	lsls	r3, r3, #3
 800f26e:	440b      	add	r3, r1
 800f270:	335c      	adds	r3, #92	; 0x5c
 800f272:	2202      	movs	r2, #2
 800f274:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	015a      	lsls	r2, r3, #5
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	4413      	add	r3, r2
 800f27e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f28c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f294:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	015a      	lsls	r2, r3, #5
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	4413      	add	r3, r2
 800f29e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	015a      	lsls	r2, r3, #5
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	2302      	movs	r3, #2
 800f2b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	b2d8      	uxtb	r0, r3
 800f2be:	6879      	ldr	r1, [r7, #4]
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	4413      	add	r3, r2
 800f2c8:	00db      	lsls	r3, r3, #3
 800f2ca:	440b      	add	r3, r1
 800f2cc:	335c      	adds	r3, #92	; 0x5c
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	4601      	mov	r1, r0
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f00a fb9b 	bl	8019a10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800f2da:	e0cd      	b.n	800f478 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2ee:	2b80      	cmp	r3, #128	; 0x80
 800f2f0:	d13e      	bne.n	800f370 <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	015a      	lsls	r2, r3, #5
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	0151      	lsls	r1, r2, #5
 800f304:	693a      	ldr	r2, [r7, #16]
 800f306:	440a      	add	r2, r1
 800f308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f30c:	f043 0302 	orr.w	r3, r3, #2
 800f310:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800f312:	6879      	ldr	r1, [r7, #4]
 800f314:	68fa      	ldr	r2, [r7, #12]
 800f316:	4613      	mov	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4413      	add	r3, r2
 800f31c:	00db      	lsls	r3, r3, #3
 800f31e:	440b      	add	r3, r1
 800f320:	3358      	adds	r3, #88	; 0x58
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	1c59      	adds	r1, r3, #1
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	4613      	mov	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	4413      	add	r3, r2
 800f330:	00db      	lsls	r3, r3, #3
 800f332:	4403      	add	r3, r0
 800f334:	3358      	adds	r3, #88	; 0x58
 800f336:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800f338:	6879      	ldr	r1, [r7, #4]
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	4613      	mov	r3, r2
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	4413      	add	r3, r2
 800f342:	00db      	lsls	r3, r3, #3
 800f344:	440b      	add	r3, r1
 800f346:	335d      	adds	r3, #93	; 0x5d
 800f348:	2206      	movs	r2, #6
 800f34a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	b2d2      	uxtb	r2, r2
 800f354:	4611      	mov	r1, r2
 800f356:	4618      	mov	r0, r3
 800f358:	f003 fa1f 	bl	801279a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	015a      	lsls	r2, r3, #5
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	4413      	add	r3, r2
 800f364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f368:	461a      	mov	r2, r3
 800f36a:	2380      	movs	r3, #128	; 0x80
 800f36c:	6093      	str	r3, [r2, #8]
}
 800f36e:	e083      	b.n	800f478 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	015a      	lsls	r2, r3, #5
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	4413      	add	r3, r2
 800f378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f37c:	689b      	ldr	r3, [r3, #8]
 800f37e:	f003 0310 	and.w	r3, r3, #16
 800f382:	2b10      	cmp	r3, #16
 800f384:	d178      	bne.n	800f478 <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800f386:	6879      	ldr	r1, [r7, #4]
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	4613      	mov	r3, r2
 800f38c:	009b      	lsls	r3, r3, #2
 800f38e:	4413      	add	r3, r2
 800f390:	00db      	lsls	r3, r3, #3
 800f392:	440b      	add	r3, r1
 800f394:	333f      	adds	r3, #63	; 0x3f
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d122      	bne.n	800f3e2 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800f39c:	6879      	ldr	r1, [r7, #4]
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	4613      	mov	r3, r2
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	4413      	add	r3, r2
 800f3a6:	00db      	lsls	r3, r3, #3
 800f3a8:	440b      	add	r3, r1
 800f3aa:	3358      	adds	r3, #88	; 0x58
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	015a      	lsls	r2, r3, #5
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	4413      	add	r3, r2
 800f3b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	0151      	lsls	r1, r2, #5
 800f3c2:	693a      	ldr	r2, [r7, #16]
 800f3c4:	440a      	add	r2, r1
 800f3c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f3ca:	f043 0302 	orr.w	r3, r3, #2
 800f3ce:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68fa      	ldr	r2, [r7, #12]
 800f3d6:	b2d2      	uxtb	r2, r2
 800f3d8:	4611      	mov	r1, r2
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f003 f9dd 	bl	801279a <USB_HC_Halt>
 800f3e0:	e041      	b.n	800f466 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800f3e2:	6879      	ldr	r1, [r7, #4]
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	4413      	add	r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	440b      	add	r3, r1
 800f3f0:	333f      	adds	r3, #63	; 0x3f
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00a      	beq.n	800f40e <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800f3f8:	6879      	ldr	r1, [r7, #4]
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	4413      	add	r3, r2
 800f402:	00db      	lsls	r3, r3, #3
 800f404:	440b      	add	r3, r1
 800f406:	333f      	adds	r3, #63	; 0x3f
 800f408:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d12b      	bne.n	800f466 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800f40e:	6879      	ldr	r1, [r7, #4]
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	4613      	mov	r3, r2
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	4413      	add	r3, r2
 800f418:	00db      	lsls	r3, r3, #3
 800f41a:	440b      	add	r3, r1
 800f41c:	3358      	adds	r3, #88	; 0x58
 800f41e:	2200      	movs	r2, #0
 800f420:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800f422:	6879      	ldr	r1, [r7, #4]
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	4613      	mov	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	4413      	add	r3, r2
 800f42c:	00db      	lsls	r3, r3, #3
 800f42e:	440b      	add	r3, r1
 800f430:	335d      	adds	r3, #93	; 0x5d
 800f432:	2203      	movs	r2, #3
 800f434:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	015a      	lsls	r2, r3, #5
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	4413      	add	r3, r2
 800f43e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f442:	68db      	ldr	r3, [r3, #12]
 800f444:	68fa      	ldr	r2, [r7, #12]
 800f446:	0151      	lsls	r1, r2, #5
 800f448:	693a      	ldr	r2, [r7, #16]
 800f44a:	440a      	add	r2, r1
 800f44c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f450:	f043 0302 	orr.w	r3, r3, #2
 800f454:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	b2d2      	uxtb	r2, r2
 800f45e:	4611      	mov	r1, r2
 800f460:	4618      	mov	r0, r3
 800f462:	f003 f99a 	bl	801279a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	015a      	lsls	r2, r3, #5
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	4413      	add	r3, r2
 800f46e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f472:	461a      	mov	r2, r3
 800f474:	2310      	movs	r3, #16
 800f476:	6093      	str	r3, [r2, #8]
}
 800f478:	bf00      	nop
 800f47a:	3718      	adds	r7, #24
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800f496:	78fb      	ldrb	r3, [r7, #3]
 800f498:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	015a      	lsls	r2, r3, #5
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	f003 0304 	and.w	r3, r3, #4
 800f4ac:	2b04      	cmp	r3, #4
 800f4ae:	d119      	bne.n	800f4e4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	015a      	lsls	r2, r3, #5
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4bc:	461a      	mov	r2, r3
 800f4be:	2304      	movs	r3, #4
 800f4c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	015a      	lsls	r2, r3, #5
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	0151      	lsls	r1, r2, #5
 800f4d4:	693a      	ldr	r2, [r7, #16]
 800f4d6:	440a      	add	r2, r1
 800f4d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f4dc:	f043 0302 	orr.w	r3, r3, #2
 800f4e0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800f4e2:	e31e      	b.n	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	015a      	lsls	r2, r3, #5
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	f003 0320 	and.w	r3, r3, #32
 800f4f6:	2b20      	cmp	r3, #32
 800f4f8:	d141      	bne.n	800f57e <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	015a      	lsls	r2, r3, #5
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	4413      	add	r3, r2
 800f502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f506:	461a      	mov	r2, r3
 800f508:	2320      	movs	r3, #32
 800f50a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800f50c:	6879      	ldr	r1, [r7, #4]
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	4613      	mov	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	4413      	add	r3, r2
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	440b      	add	r3, r1
 800f51a:	333d      	adds	r3, #61	; 0x3d
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	f040 82ff 	bne.w	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800f524:	6879      	ldr	r1, [r7, #4]
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	4613      	mov	r3, r2
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	4413      	add	r3, r2
 800f52e:	00db      	lsls	r3, r3, #3
 800f530:	440b      	add	r3, r1
 800f532:	333d      	adds	r3, #61	; 0x3d
 800f534:	2200      	movs	r2, #0
 800f536:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800f538:	6879      	ldr	r1, [r7, #4]
 800f53a:	68fa      	ldr	r2, [r7, #12]
 800f53c:	4613      	mov	r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	4413      	add	r3, r2
 800f542:	00db      	lsls	r3, r3, #3
 800f544:	440b      	add	r3, r1
 800f546:	335c      	adds	r3, #92	; 0x5c
 800f548:	2202      	movs	r2, #2
 800f54a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	015a      	lsls	r2, r3, #5
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	4413      	add	r3, r2
 800f554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	0151      	lsls	r1, r2, #5
 800f55e:	693a      	ldr	r2, [r7, #16]
 800f560:	440a      	add	r2, r1
 800f562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f566:	f043 0302 	orr.w	r3, r3, #2
 800f56a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68fa      	ldr	r2, [r7, #12]
 800f572:	b2d2      	uxtb	r2, r2
 800f574:	4611      	mov	r1, r2
 800f576:	4618      	mov	r0, r3
 800f578:	f003 f90f 	bl	801279a <USB_HC_Halt>
}
 800f57c:	e2d1      	b.n	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	015a      	lsls	r2, r3, #5
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	4413      	add	r3, r2
 800f586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f590:	2b40      	cmp	r3, #64	; 0x40
 800f592:	d13f      	bne.n	800f614 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800f594:	6879      	ldr	r1, [r7, #4]
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	4613      	mov	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4413      	add	r3, r2
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	440b      	add	r3, r1
 800f5a2:	335d      	adds	r3, #93	; 0x5d
 800f5a4:	2204      	movs	r2, #4
 800f5a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800f5a8:	6879      	ldr	r1, [r7, #4]
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	440b      	add	r3, r1
 800f5b6:	333d      	adds	r3, #61	; 0x3d
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800f5bc:	6879      	ldr	r1, [r7, #4]
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4413      	add	r3, r2
 800f5c6:	00db      	lsls	r3, r3, #3
 800f5c8:	440b      	add	r3, r1
 800f5ca:	3358      	adds	r3, #88	; 0x58
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	015a      	lsls	r2, r3, #5
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	0151      	lsls	r1, r2, #5
 800f5e2:	693a      	ldr	r2, [r7, #16]
 800f5e4:	440a      	add	r2, r1
 800f5e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f5ea:	f043 0302 	orr.w	r3, r3, #2
 800f5ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	b2d2      	uxtb	r2, r2
 800f5f8:	4611      	mov	r1, r2
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f003 f8cd 	bl	801279a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	015a      	lsls	r2, r3, #5
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	4413      	add	r3, r2
 800f608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f60c:	461a      	mov	r2, r3
 800f60e:	2340      	movs	r3, #64	; 0x40
 800f610:	6093      	str	r3, [r2, #8]
}
 800f612:	e286      	b.n	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	015a      	lsls	r2, r3, #5
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	4413      	add	r3, r2
 800f61c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f62a:	d122      	bne.n	800f672 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	015a      	lsls	r2, r3, #5
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	4413      	add	r3, r2
 800f634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	0151      	lsls	r1, r2, #5
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	440a      	add	r2, r1
 800f642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f646:	f043 0302 	orr.w	r3, r3, #2
 800f64a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	68fa      	ldr	r2, [r7, #12]
 800f652:	b2d2      	uxtb	r2, r2
 800f654:	4611      	mov	r1, r2
 800f656:	4618      	mov	r0, r3
 800f658:	f003 f89f 	bl	801279a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	015a      	lsls	r2, r3, #5
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	4413      	add	r3, r2
 800f664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f668:	461a      	mov	r2, r3
 800f66a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f66e:	6093      	str	r3, [r2, #8]
}
 800f670:	e257      	b.n	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	015a      	lsls	r2, r3, #5
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	4413      	add	r3, r2
 800f67a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	f003 0301 	and.w	r3, r3, #1
 800f684:	2b01      	cmp	r3, #1
 800f686:	d135      	bne.n	800f6f4 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800f688:	6879      	ldr	r1, [r7, #4]
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	4613      	mov	r3, r2
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	4413      	add	r3, r2
 800f692:	00db      	lsls	r3, r3, #3
 800f694:	440b      	add	r3, r1
 800f696:	3358      	adds	r3, #88	; 0x58
 800f698:	2200      	movs	r2, #0
 800f69a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	015a      	lsls	r2, r3, #5
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	0151      	lsls	r1, r2, #5
 800f6ae:	693a      	ldr	r2, [r7, #16]
 800f6b0:	440a      	add	r2, r1
 800f6b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f6b6:	f043 0302 	orr.w	r3, r3, #2
 800f6ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	b2d2      	uxtb	r2, r2
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f003 f867 	bl	801279a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	015a      	lsls	r2, r3, #5
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f6d8:	461a      	mov	r2, r3
 800f6da:	2301      	movs	r3, #1
 800f6dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800f6de:	6879      	ldr	r1, [r7, #4]
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	4413      	add	r3, r2
 800f6e8:	00db      	lsls	r3, r3, #3
 800f6ea:	440b      	add	r3, r1
 800f6ec:	335d      	adds	r3, #93	; 0x5d
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	701a      	strb	r2, [r3, #0]
}
 800f6f2:	e216      	b.n	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	015a      	lsls	r2, r3, #5
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	f003 0308 	and.w	r3, r3, #8
 800f706:	2b08      	cmp	r3, #8
 800f708:	d12b      	bne.n	800f762 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	015a      	lsls	r2, r3, #5
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	4413      	add	r3, r2
 800f712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f716:	461a      	mov	r2, r3
 800f718:	2308      	movs	r3, #8
 800f71a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	015a      	lsls	r2, r3, #5
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	4413      	add	r3, r2
 800f724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	0151      	lsls	r1, r2, #5
 800f72e:	693a      	ldr	r2, [r7, #16]
 800f730:	440a      	add	r2, r1
 800f732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f736:	f043 0302 	orr.w	r3, r3, #2
 800f73a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	68fa      	ldr	r2, [r7, #12]
 800f742:	b2d2      	uxtb	r2, r2
 800f744:	4611      	mov	r1, r2
 800f746:	4618      	mov	r0, r3
 800f748:	f003 f827 	bl	801279a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800f74c:	6879      	ldr	r1, [r7, #4]
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	4613      	mov	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4413      	add	r3, r2
 800f756:	00db      	lsls	r3, r3, #3
 800f758:	440b      	add	r3, r1
 800f75a:	335d      	adds	r3, #93	; 0x5d
 800f75c:	2205      	movs	r2, #5
 800f75e:	701a      	strb	r2, [r3, #0]
}
 800f760:	e1df      	b.n	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	015a      	lsls	r2, r3, #5
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	4413      	add	r3, r2
 800f76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	f003 0310 	and.w	r3, r3, #16
 800f774:	2b10      	cmp	r3, #16
 800f776:	d135      	bne.n	800f7e4 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800f778:	6879      	ldr	r1, [r7, #4]
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	4613      	mov	r3, r2
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	4413      	add	r3, r2
 800f782:	00db      	lsls	r3, r3, #3
 800f784:	440b      	add	r3, r1
 800f786:	3358      	adds	r3, #88	; 0x58
 800f788:	2200      	movs	r2, #0
 800f78a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800f78c:	6879      	ldr	r1, [r7, #4]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	4613      	mov	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	00db      	lsls	r3, r3, #3
 800f798:	440b      	add	r3, r1
 800f79a:	335d      	adds	r3, #93	; 0x5d
 800f79c:	2203      	movs	r2, #3
 800f79e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	015a      	lsls	r2, r3, #5
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	0151      	lsls	r1, r2, #5
 800f7b2:	693a      	ldr	r2, [r7, #16]
 800f7b4:	440a      	add	r2, r1
 800f7b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f7ba:	f043 0302 	orr.w	r3, r3, #2
 800f7be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	b2d2      	uxtb	r2, r2
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f002 ffe5 	bl	801279a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	015a      	lsls	r2, r3, #5
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7dc:	461a      	mov	r2, r3
 800f7de:	2310      	movs	r3, #16
 800f7e0:	6093      	str	r3, [r2, #8]
}
 800f7e2:	e19e      	b.n	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	015a      	lsls	r2, r3, #5
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7f6:	2b80      	cmp	r3, #128	; 0x80
 800f7f8:	d12b      	bne.n	800f852 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	015a      	lsls	r2, r3, #5
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	4413      	add	r3, r2
 800f802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	0151      	lsls	r1, r2, #5
 800f80c:	693a      	ldr	r2, [r7, #16]
 800f80e:	440a      	add	r2, r1
 800f810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f814:	f043 0302 	orr.w	r3, r3, #2
 800f818:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	b2d2      	uxtb	r2, r2
 800f822:	4611      	mov	r1, r2
 800f824:	4618      	mov	r0, r3
 800f826:	f002 ffb8 	bl	801279a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800f82a:	6879      	ldr	r1, [r7, #4]
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	4613      	mov	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	4413      	add	r3, r2
 800f834:	00db      	lsls	r3, r3, #3
 800f836:	440b      	add	r3, r1
 800f838:	335d      	adds	r3, #93	; 0x5d
 800f83a:	2206      	movs	r2, #6
 800f83c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	015a      	lsls	r2, r3, #5
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	4413      	add	r3, r2
 800f846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f84a:	461a      	mov	r2, r3
 800f84c:	2380      	movs	r3, #128	; 0x80
 800f84e:	6093      	str	r3, [r2, #8]
}
 800f850:	e167      	b.n	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	015a      	lsls	r2, r3, #5
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	4413      	add	r3, r2
 800f85a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f868:	d135      	bne.n	800f8d6 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	015a      	lsls	r2, r3, #5
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	4413      	add	r3, r2
 800f872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	68fa      	ldr	r2, [r7, #12]
 800f87a:	0151      	lsls	r1, r2, #5
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	440a      	add	r2, r1
 800f880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f884:	f043 0302 	orr.w	r3, r3, #2
 800f888:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	b2d2      	uxtb	r2, r2
 800f892:	4611      	mov	r1, r2
 800f894:	4618      	mov	r0, r3
 800f896:	f002 ff80 	bl	801279a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	015a      	lsls	r2, r3, #5
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	2310      	movs	r3, #16
 800f8aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	015a      	lsls	r2, r3, #5
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800f8c0:	6879      	ldr	r1, [r7, #4]
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4413      	add	r3, r2
 800f8ca:	00db      	lsls	r3, r3, #3
 800f8cc:	440b      	add	r3, r1
 800f8ce:	335d      	adds	r3, #93	; 0x5d
 800f8d0:	2208      	movs	r2, #8
 800f8d2:	701a      	strb	r2, [r3, #0]
}
 800f8d4:	e125      	b.n	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	015a      	lsls	r2, r3, #5
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	4413      	add	r3, r2
 800f8de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8e2:	689b      	ldr	r3, [r3, #8]
 800f8e4:	f003 0302 	and.w	r3, r3, #2
 800f8e8:	2b02      	cmp	r3, #2
 800f8ea:	f040 811a 	bne.w	800fb22 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	015a      	lsls	r2, r3, #5
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	4413      	add	r3, r2
 800f8f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	0151      	lsls	r1, r2, #5
 800f900:	693a      	ldr	r2, [r7, #16]
 800f902:	440a      	add	r2, r1
 800f904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f908:	f023 0302 	bic.w	r3, r3, #2
 800f90c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800f90e:	6879      	ldr	r1, [r7, #4]
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	4613      	mov	r3, r2
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	4413      	add	r3, r2
 800f918:	00db      	lsls	r3, r3, #3
 800f91a:	440b      	add	r3, r1
 800f91c:	335d      	adds	r3, #93	; 0x5d
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	2b01      	cmp	r3, #1
 800f922:	d137      	bne.n	800f994 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800f924:	6879      	ldr	r1, [r7, #4]
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	4613      	mov	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	4413      	add	r3, r2
 800f92e:	00db      	lsls	r3, r3, #3
 800f930:	440b      	add	r3, r1
 800f932:	335c      	adds	r3, #92	; 0x5c
 800f934:	2201      	movs	r2, #1
 800f936:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800f938:	6879      	ldr	r1, [r7, #4]
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	4613      	mov	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4413      	add	r3, r2
 800f942:	00db      	lsls	r3, r3, #3
 800f944:	440b      	add	r3, r1
 800f946:	333f      	adds	r3, #63	; 0x3f
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b02      	cmp	r3, #2
 800f94c:	d00b      	beq.n	800f966 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800f94e:	6879      	ldr	r1, [r7, #4]
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	4613      	mov	r3, r2
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	4413      	add	r3, r2
 800f958:	00db      	lsls	r3, r3, #3
 800f95a:	440b      	add	r3, r1
 800f95c:	333f      	adds	r3, #63	; 0x3f
 800f95e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800f960:	2b03      	cmp	r3, #3
 800f962:	f040 80c5 	bne.w	800faf0 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800f966:	6879      	ldr	r1, [r7, #4]
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	4613      	mov	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	4413      	add	r3, r2
 800f970:	00db      	lsls	r3, r3, #3
 800f972:	440b      	add	r3, r1
 800f974:	3351      	adds	r3, #81	; 0x51
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	f083 0301 	eor.w	r3, r3, #1
 800f97c:	b2d8      	uxtb	r0, r3
 800f97e:	6879      	ldr	r1, [r7, #4]
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	4613      	mov	r3, r2
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	4413      	add	r3, r2
 800f988:	00db      	lsls	r3, r3, #3
 800f98a:	440b      	add	r3, r1
 800f98c:	3351      	adds	r3, #81	; 0x51
 800f98e:	4602      	mov	r2, r0
 800f990:	701a      	strb	r2, [r3, #0]
 800f992:	e0ad      	b.n	800faf0 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800f994:	6879      	ldr	r1, [r7, #4]
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	4613      	mov	r3, r2
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	00db      	lsls	r3, r3, #3
 800f9a0:	440b      	add	r3, r1
 800f9a2:	335d      	adds	r3, #93	; 0x5d
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	2b03      	cmp	r3, #3
 800f9a8:	d10a      	bne.n	800f9c0 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800f9aa:	6879      	ldr	r1, [r7, #4]
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4413      	add	r3, r2
 800f9b4:	00db      	lsls	r3, r3, #3
 800f9b6:	440b      	add	r3, r1
 800f9b8:	335c      	adds	r3, #92	; 0x5c
 800f9ba:	2202      	movs	r2, #2
 800f9bc:	701a      	strb	r2, [r3, #0]
 800f9be:	e097      	b.n	800faf0 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800f9c0:	6879      	ldr	r1, [r7, #4]
 800f9c2:	68fa      	ldr	r2, [r7, #12]
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	4413      	add	r3, r2
 800f9ca:	00db      	lsls	r3, r3, #3
 800f9cc:	440b      	add	r3, r1
 800f9ce:	335d      	adds	r3, #93	; 0x5d
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	2b04      	cmp	r3, #4
 800f9d4:	d10a      	bne.n	800f9ec <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800f9d6:	6879      	ldr	r1, [r7, #4]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	4613      	mov	r3, r2
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4413      	add	r3, r2
 800f9e0:	00db      	lsls	r3, r3, #3
 800f9e2:	440b      	add	r3, r1
 800f9e4:	335c      	adds	r3, #92	; 0x5c
 800f9e6:	2202      	movs	r2, #2
 800f9e8:	701a      	strb	r2, [r3, #0]
 800f9ea:	e081      	b.n	800faf0 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800f9ec:	6879      	ldr	r1, [r7, #4]
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	009b      	lsls	r3, r3, #2
 800f9f4:	4413      	add	r3, r2
 800f9f6:	00db      	lsls	r3, r3, #3
 800f9f8:	440b      	add	r3, r1
 800f9fa:	335d      	adds	r3, #93	; 0x5d
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	2b05      	cmp	r3, #5
 800fa00:	d10a      	bne.n	800fa18 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800fa02:	6879      	ldr	r1, [r7, #4]
 800fa04:	68fa      	ldr	r2, [r7, #12]
 800fa06:	4613      	mov	r3, r2
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	4413      	add	r3, r2
 800fa0c:	00db      	lsls	r3, r3, #3
 800fa0e:	440b      	add	r3, r1
 800fa10:	335c      	adds	r3, #92	; 0x5c
 800fa12:	2205      	movs	r2, #5
 800fa14:	701a      	strb	r2, [r3, #0]
 800fa16:	e06b      	b.n	800faf0 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800fa18:	6879      	ldr	r1, [r7, #4]
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	4413      	add	r3, r2
 800fa22:	00db      	lsls	r3, r3, #3
 800fa24:	440b      	add	r3, r1
 800fa26:	335d      	adds	r3, #93	; 0x5d
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	2b06      	cmp	r3, #6
 800fa2c:	d00a      	beq.n	800fa44 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800fa2e:	6879      	ldr	r1, [r7, #4]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	4613      	mov	r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	4413      	add	r3, r2
 800fa38:	00db      	lsls	r3, r3, #3
 800fa3a:	440b      	add	r3, r1
 800fa3c:	335d      	adds	r3, #93	; 0x5d
 800fa3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800fa40:	2b08      	cmp	r3, #8
 800fa42:	d155      	bne.n	800faf0 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800fa44:	6879      	ldr	r1, [r7, #4]
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	4613      	mov	r3, r2
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	4413      	add	r3, r2
 800fa4e:	00db      	lsls	r3, r3, #3
 800fa50:	440b      	add	r3, r1
 800fa52:	3358      	adds	r3, #88	; 0x58
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	1c59      	adds	r1, r3, #1
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	009b      	lsls	r3, r3, #2
 800fa60:	4413      	add	r3, r2
 800fa62:	00db      	lsls	r3, r3, #3
 800fa64:	4403      	add	r3, r0
 800fa66:	3358      	adds	r3, #88	; 0x58
 800fa68:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800fa6a:	6879      	ldr	r1, [r7, #4]
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	4413      	add	r3, r2
 800fa74:	00db      	lsls	r3, r3, #3
 800fa76:	440b      	add	r3, r1
 800fa78:	3358      	adds	r3, #88	; 0x58
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	2b03      	cmp	r3, #3
 800fa7e:	d914      	bls.n	800faaa <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800fa80:	6879      	ldr	r1, [r7, #4]
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	4613      	mov	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	00db      	lsls	r3, r3, #3
 800fa8c:	440b      	add	r3, r1
 800fa8e:	3358      	adds	r3, #88	; 0x58
 800fa90:	2200      	movs	r2, #0
 800fa92:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800fa94:	6879      	ldr	r1, [r7, #4]
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	4413      	add	r3, r2
 800fa9e:	00db      	lsls	r3, r3, #3
 800faa0:	440b      	add	r3, r1
 800faa2:	335c      	adds	r3, #92	; 0x5c
 800faa4:	2204      	movs	r2, #4
 800faa6:	701a      	strb	r2, [r3, #0]
 800faa8:	e009      	b.n	800fabe <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800faaa:	6879      	ldr	r1, [r7, #4]
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4613      	mov	r3, r2
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	4413      	add	r3, r2
 800fab4:	00db      	lsls	r3, r3, #3
 800fab6:	440b      	add	r3, r1
 800fab8:	335c      	adds	r3, #92	; 0x5c
 800faba:	2202      	movs	r2, #2
 800fabc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	015a      	lsls	r2, r3, #5
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	4413      	add	r3, r2
 800fac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fad4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fadc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	015a      	lsls	r2, r3, #5
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	4413      	add	r3, r2
 800fae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800faea:	461a      	mov	r2, r3
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	015a      	lsls	r2, r3, #5
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	4413      	add	r3, r2
 800faf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fafc:	461a      	mov	r2, r3
 800fafe:	2302      	movs	r3, #2
 800fb00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	b2d8      	uxtb	r0, r3
 800fb06:	6879      	ldr	r1, [r7, #4]
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	4413      	add	r3, r2
 800fb10:	00db      	lsls	r3, r3, #3
 800fb12:	440b      	add	r3, r1
 800fb14:	335c      	adds	r3, #92	; 0x5c
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	461a      	mov	r2, r3
 800fb1a:	4601      	mov	r1, r0
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f009 ff77 	bl	8019a10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800fb22:	bf00      	nop
 800fb24:	3718      	adds	r7, #24
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
	...

0800fb2c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b08a      	sub	sp, #40	; 0x28
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	6a1b      	ldr	r3, [r3, #32]
 800fb44:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	f003 030f 	and.w	r3, r3, #15
 800fb4c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	0c5b      	lsrs	r3, r3, #17
 800fb52:	f003 030f 	and.w	r3, r3, #15
 800fb56:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	091b      	lsrs	r3, r3, #4
 800fb5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fb60:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	2b02      	cmp	r3, #2
 800fb66:	d003      	beq.n	800fb70 <HCD_RXQLVL_IRQHandler+0x44>
 800fb68:	2b05      	cmp	r3, #5
 800fb6a:	f000 8082 	beq.w	800fc72 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800fb6e:	e083      	b.n	800fc78 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d07f      	beq.n	800fc76 <HCD_RXQLVL_IRQHandler+0x14a>
 800fb76:	6879      	ldr	r1, [r7, #4]
 800fb78:	69ba      	ldr	r2, [r7, #24]
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	4413      	add	r3, r2
 800fb80:	00db      	lsls	r3, r3, #3
 800fb82:	440b      	add	r3, r1
 800fb84:	3344      	adds	r3, #68	; 0x44
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d074      	beq.n	800fc76 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6818      	ldr	r0, [r3, #0]
 800fb90:	6879      	ldr	r1, [r7, #4]
 800fb92:	69ba      	ldr	r2, [r7, #24]
 800fb94:	4613      	mov	r3, r2
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	4413      	add	r3, r2
 800fb9a:	00db      	lsls	r3, r3, #3
 800fb9c:	440b      	add	r3, r1
 800fb9e:	3344      	adds	r3, #68	; 0x44
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	b292      	uxth	r2, r2
 800fba6:	4619      	mov	r1, r3
 800fba8:	f002 fa31 	bl	801200e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800fbac:	6879      	ldr	r1, [r7, #4]
 800fbae:	69ba      	ldr	r2, [r7, #24]
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4413      	add	r3, r2
 800fbb6:	00db      	lsls	r3, r3, #3
 800fbb8:	440b      	add	r3, r1
 800fbba:	3344      	adds	r3, #68	; 0x44
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	18d1      	adds	r1, r2, r3
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	69ba      	ldr	r2, [r7, #24]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	4413      	add	r3, r2
 800fbcc:	00db      	lsls	r3, r3, #3
 800fbce:	4403      	add	r3, r0
 800fbd0:	3344      	adds	r3, #68	; 0x44
 800fbd2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800fbd4:	6879      	ldr	r1, [r7, #4]
 800fbd6:	69ba      	ldr	r2, [r7, #24]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	009b      	lsls	r3, r3, #2
 800fbdc:	4413      	add	r3, r2
 800fbde:	00db      	lsls	r3, r3, #3
 800fbe0:	440b      	add	r3, r1
 800fbe2:	334c      	adds	r3, #76	; 0x4c
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	18d1      	adds	r1, r2, r3
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	69ba      	ldr	r2, [r7, #24]
 800fbee:	4613      	mov	r3, r2
 800fbf0:	009b      	lsls	r3, r3, #2
 800fbf2:	4413      	add	r3, r2
 800fbf4:	00db      	lsls	r3, r3, #3
 800fbf6:	4403      	add	r3, r0
 800fbf8:	334c      	adds	r3, #76	; 0x4c
 800fbfa:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	015a      	lsls	r2, r3, #5
 800fc00:	6a3b      	ldr	r3, [r7, #32]
 800fc02:	4413      	add	r3, r2
 800fc04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc08:	691a      	ldr	r2, [r3, #16]
 800fc0a:	4b1d      	ldr	r3, [pc, #116]	; (800fc80 <HCD_RXQLVL_IRQHandler+0x154>)
 800fc0c:	4013      	ands	r3, r2
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d031      	beq.n	800fc76 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	015a      	lsls	r2, r3, #5
 800fc16:	6a3b      	ldr	r3, [r7, #32]
 800fc18:	4413      	add	r3, r2
 800fc1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fc28:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fc30:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	015a      	lsls	r2, r3, #5
 800fc36:	6a3b      	ldr	r3, [r7, #32]
 800fc38:	4413      	add	r3, r2
 800fc3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc3e:	461a      	mov	r2, r3
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800fc44:	6879      	ldr	r1, [r7, #4]
 800fc46:	69ba      	ldr	r2, [r7, #24]
 800fc48:	4613      	mov	r3, r2
 800fc4a:	009b      	lsls	r3, r3, #2
 800fc4c:	4413      	add	r3, r2
 800fc4e:	00db      	lsls	r3, r3, #3
 800fc50:	440b      	add	r3, r1
 800fc52:	3350      	adds	r3, #80	; 0x50
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	f083 0301 	eor.w	r3, r3, #1
 800fc5a:	b2d8      	uxtb	r0, r3
 800fc5c:	6879      	ldr	r1, [r7, #4]
 800fc5e:	69ba      	ldr	r2, [r7, #24]
 800fc60:	4613      	mov	r3, r2
 800fc62:	009b      	lsls	r3, r3, #2
 800fc64:	4413      	add	r3, r2
 800fc66:	00db      	lsls	r3, r3, #3
 800fc68:	440b      	add	r3, r1
 800fc6a:	3350      	adds	r3, #80	; 0x50
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	701a      	strb	r2, [r3, #0]
      break;
 800fc70:	e001      	b.n	800fc76 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800fc72:	bf00      	nop
 800fc74:	e000      	b.n	800fc78 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800fc76:	bf00      	nop
  }
}
 800fc78:	bf00      	nop
 800fc7a:	3728      	adds	r7, #40	; 0x28
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	1ff80000 	.word	0x1ff80000

0800fc84 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800fcb0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f003 0302 	and.w	r3, r3, #2
 800fcb8:	2b02      	cmp	r3, #2
 800fcba:	d113      	bne.n	800fce4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f003 0301 	and.w	r3, r3, #1
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d10a      	bne.n	800fcdc <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	699a      	ldr	r2, [r3, #24]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800fcd4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f009 fe7e 	bl	80199d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	f043 0302 	orr.w	r3, r3, #2
 800fce2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f003 0308 	and.w	r3, r3, #8
 800fcea:	2b08      	cmp	r3, #8
 800fcec:	d147      	bne.n	800fd7e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	f043 0308 	orr.w	r3, r3, #8
 800fcf4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f003 0304 	and.w	r3, r3, #4
 800fcfc:	2b04      	cmp	r3, #4
 800fcfe:	d129      	bne.n	800fd54 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	699b      	ldr	r3, [r3, #24]
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d113      	bne.n	800fd30 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800fd0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fd12:	d106      	bne.n	800fd22 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2102      	movs	r1, #2
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f002 fa74 	bl	8012208 <USB_InitFSLSPClkSel>
 800fd20:	e011      	b.n	800fd46 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2101      	movs	r1, #1
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f002 fa6d 	bl	8012208 <USB_InitFSLSPClkSel>
 800fd2e:	e00a      	b.n	800fd46 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d106      	bne.n	800fd46 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd3e:	461a      	mov	r2, r3
 800fd40:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fd44:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f009 fe74 	bl	8019a34 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f009 fe43 	bl	80199d8 <HAL_HCD_Connect_Callback>
 800fd52:	e014      	b.n	800fd7e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f009 fe7b 	bl	8019a50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	693a      	ldr	r2, [r7, #16]
 800fd64:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fd68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800fd6c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	699a      	ldr	r2, [r3, #24]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800fd7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f003 0320 	and.w	r3, r3, #32
 800fd84:	2b20      	cmp	r3, #32
 800fd86:	d103      	bne.n	800fd90 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	f043 0320 	orr.w	r3, r3, #32
 800fd8e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fd96:	461a      	mov	r2, r3
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	6013      	str	r3, [r2, #0]
}
 800fd9c:	bf00      	nop
 800fd9e:	3718      	adds	r7, #24
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800fda4:	b480      	push	{r7}
 800fda6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fda8:	4b05      	ldr	r3, [pc, #20]	; (800fdc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a04      	ldr	r2, [pc, #16]	; (800fdc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800fdae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fdb2:	6013      	str	r3, [r2, #0]
}
 800fdb4:	bf00      	nop
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop
 800fdc0:	40007000 	.word	0x40007000

0800fdc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800fdc8:	4b04      	ldr	r3, [pc, #16]	; (800fddc <HAL_PWREx_GetVoltageRange+0x18>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	40007000 	.word	0x40007000

0800fde0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b085      	sub	sp, #20
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdee:	d130      	bne.n	800fe52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800fdf0:	4b23      	ldr	r3, [pc, #140]	; (800fe80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fdf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdfc:	d038      	beq.n	800fe70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800fdfe:	4b20      	ldr	r3, [pc, #128]	; (800fe80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800fe06:	4a1e      	ldr	r2, [pc, #120]	; (800fe80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fe08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fe0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800fe0e:	4b1d      	ldr	r3, [pc, #116]	; (800fe84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2232      	movs	r2, #50	; 0x32
 800fe14:	fb02 f303 	mul.w	r3, r2, r3
 800fe18:	4a1b      	ldr	r2, [pc, #108]	; (800fe88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800fe1a:	fba2 2303 	umull	r2, r3, r2, r3
 800fe1e:	0c9b      	lsrs	r3, r3, #18
 800fe20:	3301      	adds	r3, #1
 800fe22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800fe24:	e002      	b.n	800fe2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800fe2c:	4b14      	ldr	r3, [pc, #80]	; (800fe80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fe2e:	695b      	ldr	r3, [r3, #20]
 800fe30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe38:	d102      	bne.n	800fe40 <HAL_PWREx_ControlVoltageScaling+0x60>
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1f2      	bne.n	800fe26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800fe40:	4b0f      	ldr	r3, [pc, #60]	; (800fe80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fe42:	695b      	ldr	r3, [r3, #20]
 800fe44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe4c:	d110      	bne.n	800fe70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800fe4e:	2303      	movs	r3, #3
 800fe50:	e00f      	b.n	800fe72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800fe52:	4b0b      	ldr	r3, [pc, #44]	; (800fe80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fe5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe5e:	d007      	beq.n	800fe70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800fe60:	4b07      	ldr	r3, [pc, #28]	; (800fe80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800fe68:	4a05      	ldr	r2, [pc, #20]	; (800fe80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800fe6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fe6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800fe70:	2300      	movs	r3, #0
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3714      	adds	r7, #20
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	40007000 	.word	0x40007000
 800fe84:	20000054 	.word	0x20000054
 800fe88:	431bde83 	.word	0x431bde83

0800fe8c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800fe90:	4b05      	ldr	r3, [pc, #20]	; (800fea8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	4a04      	ldr	r2, [pc, #16]	; (800fea8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800fe96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fe9a:	6053      	str	r3, [r2, #4]
}
 800fe9c:	bf00      	nop
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	40007000 	.word	0x40007000

0800feac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800feac:	b480      	push	{r7}
 800feae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800feb0:	4b05      	ldr	r3, [pc, #20]	; (800fec8 <HAL_PWREx_EnableVddIO2+0x1c>)
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	4a04      	ldr	r2, [pc, #16]	; (800fec8 <HAL_PWREx_EnableVddIO2+0x1c>)
 800feb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800feba:	6053      	str	r3, [r2, #4]
}
 800febc:	bf00      	nop
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	40007000 	.word	0x40007000

0800fecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b088      	sub	sp, #32
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800feda:	2301      	movs	r3, #1
 800fedc:	e3db      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fede:	4ba4      	ldr	r3, [pc, #656]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	f003 030c 	and.w	r3, r3, #12
 800fee6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fee8:	4ba1      	ldr	r3, [pc, #644]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	f003 0303 	and.w	r3, r3, #3
 800fef0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f003 0310 	and.w	r3, r3, #16
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	f000 80e1 	beq.w	80100c2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d007      	beq.n	800ff16 <HAL_RCC_OscConfig+0x4a>
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	2b0c      	cmp	r3, #12
 800ff0a:	f040 8088 	bne.w	801001e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	f040 8084 	bne.w	801001e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ff16:	4b96      	ldr	r3, [pc, #600]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f003 0302 	and.w	r3, r3, #2
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d005      	beq.n	800ff2e <HAL_RCC_OscConfig+0x62>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d101      	bne.n	800ff2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e3b3      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6a1a      	ldr	r2, [r3, #32]
 800ff32:	4b8f      	ldr	r3, [pc, #572]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f003 0308 	and.w	r3, r3, #8
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d004      	beq.n	800ff48 <HAL_RCC_OscConfig+0x7c>
 800ff3e:	4b8c      	ldr	r3, [pc, #560]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff46:	e005      	b.n	800ff54 <HAL_RCC_OscConfig+0x88>
 800ff48:	4b89      	ldr	r3, [pc, #548]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff4e:	091b      	lsrs	r3, r3, #4
 800ff50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d223      	bcs.n	800ffa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6a1b      	ldr	r3, [r3, #32]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f000 fd47 	bl	80109f0 <RCC_SetFlashLatencyFromMSIRange>
 800ff62:	4603      	mov	r3, r0
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d001      	beq.n	800ff6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e394      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ff6c:	4b80      	ldr	r3, [pc, #512]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a7f      	ldr	r2, [pc, #508]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff72:	f043 0308 	orr.w	r3, r3, #8
 800ff76:	6013      	str	r3, [r2, #0]
 800ff78:	4b7d      	ldr	r3, [pc, #500]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6a1b      	ldr	r3, [r3, #32]
 800ff84:	497a      	ldr	r1, [pc, #488]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff86:	4313      	orrs	r3, r2
 800ff88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ff8a:	4b79      	ldr	r3, [pc, #484]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	69db      	ldr	r3, [r3, #28]
 800ff96:	021b      	lsls	r3, r3, #8
 800ff98:	4975      	ldr	r1, [pc, #468]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	604b      	str	r3, [r1, #4]
 800ff9e:	e022      	b.n	800ffe6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ffa0:	4b73      	ldr	r3, [pc, #460]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4a72      	ldr	r2, [pc, #456]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ffa6:	f043 0308 	orr.w	r3, r3, #8
 800ffaa:	6013      	str	r3, [r2, #0]
 800ffac:	4b70      	ldr	r3, [pc, #448]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a1b      	ldr	r3, [r3, #32]
 800ffb8:	496d      	ldr	r1, [pc, #436]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ffbe:	4b6c      	ldr	r3, [pc, #432]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	69db      	ldr	r3, [r3, #28]
 800ffca:	021b      	lsls	r3, r3, #8
 800ffcc:	4968      	ldr	r1, [pc, #416]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6a1b      	ldr	r3, [r3, #32]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f000 fd0a 	bl	80109f0 <RCC_SetFlashLatencyFromMSIRange>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e357      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ffe6:	f000 fc41 	bl	801086c <HAL_RCC_GetSysClockFreq>
 800ffea:	4601      	mov	r1, r0
 800ffec:	4b60      	ldr	r3, [pc, #384]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	091b      	lsrs	r3, r3, #4
 800fff2:	f003 030f 	and.w	r3, r3, #15
 800fff6:	4a5f      	ldr	r2, [pc, #380]	; (8010174 <HAL_RCC_OscConfig+0x2a8>)
 800fff8:	5cd3      	ldrb	r3, [r2, r3]
 800fffa:	f003 031f 	and.w	r3, r3, #31
 800fffe:	fa21 f303 	lsr.w	r3, r1, r3
 8010002:	4a5d      	ldr	r2, [pc, #372]	; (8010178 <HAL_RCC_OscConfig+0x2ac>)
 8010004:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8010006:	4b5d      	ldr	r3, [pc, #372]	; (801017c <HAL_RCC_OscConfig+0x2b0>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4618      	mov	r0, r3
 801000c:	f7fd ff70 	bl	800def0 <HAL_InitTick>
 8010010:	4603      	mov	r3, r0
 8010012:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8010014:	7bfb      	ldrb	r3, [r7, #15]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d052      	beq.n	80100c0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 801001a:	7bfb      	ldrb	r3, [r7, #15]
 801001c:	e33b      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	699b      	ldr	r3, [r3, #24]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d032      	beq.n	801008c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010026:	4b52      	ldr	r3, [pc, #328]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a51      	ldr	r2, [pc, #324]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 801002c:	f043 0301 	orr.w	r3, r3, #1
 8010030:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010032:	f7fd ffa9 	bl	800df88 <HAL_GetTick>
 8010036:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010038:	e008      	b.n	801004c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801003a:	f7fd ffa5 	bl	800df88 <HAL_GetTick>
 801003e:	4602      	mov	r2, r0
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	2b02      	cmp	r3, #2
 8010046:	d901      	bls.n	801004c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8010048:	2303      	movs	r3, #3
 801004a:	e324      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801004c:	4b48      	ldr	r3, [pc, #288]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f003 0302 	and.w	r3, r3, #2
 8010054:	2b00      	cmp	r3, #0
 8010056:	d0f0      	beq.n	801003a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010058:	4b45      	ldr	r3, [pc, #276]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a44      	ldr	r2, [pc, #272]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 801005e:	f043 0308 	orr.w	r3, r3, #8
 8010062:	6013      	str	r3, [r2, #0]
 8010064:	4b42      	ldr	r3, [pc, #264]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6a1b      	ldr	r3, [r3, #32]
 8010070:	493f      	ldr	r1, [pc, #252]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010072:	4313      	orrs	r3, r2
 8010074:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010076:	4b3e      	ldr	r3, [pc, #248]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	69db      	ldr	r3, [r3, #28]
 8010082:	021b      	lsls	r3, r3, #8
 8010084:	493a      	ldr	r1, [pc, #232]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010086:	4313      	orrs	r3, r2
 8010088:	604b      	str	r3, [r1, #4]
 801008a:	e01a      	b.n	80100c2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801008c:	4b38      	ldr	r3, [pc, #224]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a37      	ldr	r2, [pc, #220]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010092:	f023 0301 	bic.w	r3, r3, #1
 8010096:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010098:	f7fd ff76 	bl	800df88 <HAL_GetTick>
 801009c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801009e:	e008      	b.n	80100b2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80100a0:	f7fd ff72 	bl	800df88 <HAL_GetTick>
 80100a4:	4602      	mov	r2, r0
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d901      	bls.n	80100b2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80100ae:	2303      	movs	r3, #3
 80100b0:	e2f1      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80100b2:	4b2f      	ldr	r3, [pc, #188]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f003 0302 	and.w	r3, r3, #2
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1f0      	bne.n	80100a0 <HAL_RCC_OscConfig+0x1d4>
 80100be:	e000      	b.n	80100c2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80100c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f003 0301 	and.w	r3, r3, #1
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d074      	beq.n	80101b8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80100ce:	69bb      	ldr	r3, [r7, #24]
 80100d0:	2b08      	cmp	r3, #8
 80100d2:	d005      	beq.n	80100e0 <HAL_RCC_OscConfig+0x214>
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	2b0c      	cmp	r3, #12
 80100d8:	d10e      	bne.n	80100f8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2b03      	cmp	r3, #3
 80100de:	d10b      	bne.n	80100f8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80100e0:	4b23      	ldr	r3, [pc, #140]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d064      	beq.n	80101b6 <HAL_RCC_OscConfig+0x2ea>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d160      	bne.n	80101b6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80100f4:	2301      	movs	r3, #1
 80100f6:	e2ce      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010100:	d106      	bne.n	8010110 <HAL_RCC_OscConfig+0x244>
 8010102:	4b1b      	ldr	r3, [pc, #108]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a1a      	ldr	r2, [pc, #104]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801010c:	6013      	str	r3, [r2, #0]
 801010e:	e01d      	b.n	801014c <HAL_RCC_OscConfig+0x280>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010118:	d10c      	bne.n	8010134 <HAL_RCC_OscConfig+0x268>
 801011a:	4b15      	ldr	r3, [pc, #84]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4a14      	ldr	r2, [pc, #80]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010124:	6013      	str	r3, [r2, #0]
 8010126:	4b12      	ldr	r3, [pc, #72]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4a11      	ldr	r2, [pc, #68]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 801012c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010130:	6013      	str	r3, [r2, #0]
 8010132:	e00b      	b.n	801014c <HAL_RCC_OscConfig+0x280>
 8010134:	4b0e      	ldr	r3, [pc, #56]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4a0d      	ldr	r2, [pc, #52]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 801013a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801013e:	6013      	str	r3, [r2, #0]
 8010140:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a0a      	ldr	r2, [pc, #40]	; (8010170 <HAL_RCC_OscConfig+0x2a4>)
 8010146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801014a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d01c      	beq.n	801018e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010154:	f7fd ff18 	bl	800df88 <HAL_GetTick>
 8010158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801015a:	e011      	b.n	8010180 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801015c:	f7fd ff14 	bl	800df88 <HAL_GetTick>
 8010160:	4602      	mov	r2, r0
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	1ad3      	subs	r3, r2, r3
 8010166:	2b64      	cmp	r3, #100	; 0x64
 8010168:	d90a      	bls.n	8010180 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 801016a:	2303      	movs	r3, #3
 801016c:	e293      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
 801016e:	bf00      	nop
 8010170:	40021000 	.word	0x40021000
 8010174:	0801c698 	.word	0x0801c698
 8010178:	20000054 	.word	0x20000054
 801017c:	20000028 	.word	0x20000028
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010180:	4bae      	ldr	r3, [pc, #696]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010188:	2b00      	cmp	r3, #0
 801018a:	d0e7      	beq.n	801015c <HAL_RCC_OscConfig+0x290>
 801018c:	e014      	b.n	80101b8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801018e:	f7fd fefb 	bl	800df88 <HAL_GetTick>
 8010192:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010194:	e008      	b.n	80101a8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010196:	f7fd fef7 	bl	800df88 <HAL_GetTick>
 801019a:	4602      	mov	r2, r0
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	1ad3      	subs	r3, r2, r3
 80101a0:	2b64      	cmp	r3, #100	; 0x64
 80101a2:	d901      	bls.n	80101a8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80101a4:	2303      	movs	r3, #3
 80101a6:	e276      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80101a8:	4ba4      	ldr	r3, [pc, #656]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d1f0      	bne.n	8010196 <HAL_RCC_OscConfig+0x2ca>
 80101b4:	e000      	b.n	80101b8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80101b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f003 0302 	and.w	r3, r3, #2
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d060      	beq.n	8010286 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80101c4:	69bb      	ldr	r3, [r7, #24]
 80101c6:	2b04      	cmp	r3, #4
 80101c8:	d005      	beq.n	80101d6 <HAL_RCC_OscConfig+0x30a>
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	2b0c      	cmp	r3, #12
 80101ce:	d119      	bne.n	8010204 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	2b02      	cmp	r3, #2
 80101d4:	d116      	bne.n	8010204 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80101d6:	4b99      	ldr	r3, [pc, #612]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d005      	beq.n	80101ee <HAL_RCC_OscConfig+0x322>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d101      	bne.n	80101ee <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80101ea:	2301      	movs	r3, #1
 80101ec:	e253      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80101ee:	4b93      	ldr	r3, [pc, #588]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	691b      	ldr	r3, [r3, #16]
 80101fa:	061b      	lsls	r3, r3, #24
 80101fc:	498f      	ldr	r1, [pc, #572]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80101fe:	4313      	orrs	r3, r2
 8010200:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010202:	e040      	b.n	8010286 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d023      	beq.n	8010254 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801020c:	4b8b      	ldr	r3, [pc, #556]	; (801043c <HAL_RCC_OscConfig+0x570>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a8a      	ldr	r2, [pc, #552]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010218:	f7fd feb6 	bl	800df88 <HAL_GetTick>
 801021c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801021e:	e008      	b.n	8010232 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010220:	f7fd feb2 	bl	800df88 <HAL_GetTick>
 8010224:	4602      	mov	r2, r0
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	1ad3      	subs	r3, r2, r3
 801022a:	2b02      	cmp	r3, #2
 801022c:	d901      	bls.n	8010232 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 801022e:	2303      	movs	r3, #3
 8010230:	e231      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010232:	4b82      	ldr	r3, [pc, #520]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801023a:	2b00      	cmp	r3, #0
 801023c:	d0f0      	beq.n	8010220 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801023e:	4b7f      	ldr	r3, [pc, #508]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	691b      	ldr	r3, [r3, #16]
 801024a:	061b      	lsls	r3, r3, #24
 801024c:	497b      	ldr	r1, [pc, #492]	; (801043c <HAL_RCC_OscConfig+0x570>)
 801024e:	4313      	orrs	r3, r2
 8010250:	604b      	str	r3, [r1, #4]
 8010252:	e018      	b.n	8010286 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010254:	4b79      	ldr	r3, [pc, #484]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4a78      	ldr	r2, [pc, #480]	; (801043c <HAL_RCC_OscConfig+0x570>)
 801025a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801025e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010260:	f7fd fe92 	bl	800df88 <HAL_GetTick>
 8010264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010266:	e008      	b.n	801027a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010268:	f7fd fe8e 	bl	800df88 <HAL_GetTick>
 801026c:	4602      	mov	r2, r0
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	1ad3      	subs	r3, r2, r3
 8010272:	2b02      	cmp	r3, #2
 8010274:	d901      	bls.n	801027a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8010276:	2303      	movs	r3, #3
 8010278:	e20d      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801027a:	4b70      	ldr	r3, [pc, #448]	; (801043c <HAL_RCC_OscConfig+0x570>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1f0      	bne.n	8010268 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f003 0308 	and.w	r3, r3, #8
 801028e:	2b00      	cmp	r3, #0
 8010290:	d03c      	beq.n	801030c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	695b      	ldr	r3, [r3, #20]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d01c      	beq.n	80102d4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801029a:	4b68      	ldr	r3, [pc, #416]	; (801043c <HAL_RCC_OscConfig+0x570>)
 801029c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80102a0:	4a66      	ldr	r2, [pc, #408]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80102a2:	f043 0301 	orr.w	r3, r3, #1
 80102a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102aa:	f7fd fe6d 	bl	800df88 <HAL_GetTick>
 80102ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80102b0:	e008      	b.n	80102c4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80102b2:	f7fd fe69 	bl	800df88 <HAL_GetTick>
 80102b6:	4602      	mov	r2, r0
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	1ad3      	subs	r3, r2, r3
 80102bc:	2b02      	cmp	r3, #2
 80102be:	d901      	bls.n	80102c4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80102c0:	2303      	movs	r3, #3
 80102c2:	e1e8      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80102c4:	4b5d      	ldr	r3, [pc, #372]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80102c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80102ca:	f003 0302 	and.w	r3, r3, #2
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d0ef      	beq.n	80102b2 <HAL_RCC_OscConfig+0x3e6>
 80102d2:	e01b      	b.n	801030c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80102d4:	4b59      	ldr	r3, [pc, #356]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80102d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80102da:	4a58      	ldr	r2, [pc, #352]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80102dc:	f023 0301 	bic.w	r3, r3, #1
 80102e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102e4:	f7fd fe50 	bl	800df88 <HAL_GetTick>
 80102e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80102ea:	e008      	b.n	80102fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80102ec:	f7fd fe4c 	bl	800df88 <HAL_GetTick>
 80102f0:	4602      	mov	r2, r0
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	d901      	bls.n	80102fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80102fa:	2303      	movs	r3, #3
 80102fc:	e1cb      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80102fe:	4b4f      	ldr	r3, [pc, #316]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010304:	f003 0302 	and.w	r3, r3, #2
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1ef      	bne.n	80102ec <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f003 0304 	and.w	r3, r3, #4
 8010314:	2b00      	cmp	r3, #0
 8010316:	f000 80a5 	beq.w	8010464 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 801031a:	2300      	movs	r3, #0
 801031c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801031e:	4b47      	ldr	r3, [pc, #284]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10d      	bne.n	8010346 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801032a:	4b44      	ldr	r3, [pc, #272]	; (801043c <HAL_RCC_OscConfig+0x570>)
 801032c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801032e:	4a43      	ldr	r2, [pc, #268]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010334:	6593      	str	r3, [r2, #88]	; 0x58
 8010336:	4b41      	ldr	r3, [pc, #260]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801033a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801033e:	60bb      	str	r3, [r7, #8]
 8010340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010342:	2301      	movs	r3, #1
 8010344:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010346:	4b3e      	ldr	r3, [pc, #248]	; (8010440 <HAL_RCC_OscConfig+0x574>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801034e:	2b00      	cmp	r3, #0
 8010350:	d118      	bne.n	8010384 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010352:	4b3b      	ldr	r3, [pc, #236]	; (8010440 <HAL_RCC_OscConfig+0x574>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4a3a      	ldr	r2, [pc, #232]	; (8010440 <HAL_RCC_OscConfig+0x574>)
 8010358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801035c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801035e:	f7fd fe13 	bl	800df88 <HAL_GetTick>
 8010362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010364:	e008      	b.n	8010378 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010366:	f7fd fe0f 	bl	800df88 <HAL_GetTick>
 801036a:	4602      	mov	r2, r0
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	1ad3      	subs	r3, r2, r3
 8010370:	2b02      	cmp	r3, #2
 8010372:	d901      	bls.n	8010378 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8010374:	2303      	movs	r3, #3
 8010376:	e18e      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010378:	4b31      	ldr	r3, [pc, #196]	; (8010440 <HAL_RCC_OscConfig+0x574>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010380:	2b00      	cmp	r3, #0
 8010382:	d0f0      	beq.n	8010366 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	2b01      	cmp	r3, #1
 801038a:	d108      	bne.n	801039e <HAL_RCC_OscConfig+0x4d2>
 801038c:	4b2b      	ldr	r3, [pc, #172]	; (801043c <HAL_RCC_OscConfig+0x570>)
 801038e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010392:	4a2a      	ldr	r2, [pc, #168]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010394:	f043 0301 	orr.w	r3, r3, #1
 8010398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801039c:	e024      	b.n	80103e8 <HAL_RCC_OscConfig+0x51c>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	2b05      	cmp	r3, #5
 80103a4:	d110      	bne.n	80103c8 <HAL_RCC_OscConfig+0x4fc>
 80103a6:	4b25      	ldr	r3, [pc, #148]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80103a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103ac:	4a23      	ldr	r2, [pc, #140]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80103ae:	f043 0304 	orr.w	r3, r3, #4
 80103b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80103b6:	4b21      	ldr	r3, [pc, #132]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80103b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103bc:	4a1f      	ldr	r2, [pc, #124]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80103be:	f043 0301 	orr.w	r3, r3, #1
 80103c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80103c6:	e00f      	b.n	80103e8 <HAL_RCC_OscConfig+0x51c>
 80103c8:	4b1c      	ldr	r3, [pc, #112]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80103ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103ce:	4a1b      	ldr	r2, [pc, #108]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80103d0:	f023 0301 	bic.w	r3, r3, #1
 80103d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80103d8:	4b18      	ldr	r3, [pc, #96]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80103da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103de:	4a17      	ldr	r2, [pc, #92]	; (801043c <HAL_RCC_OscConfig+0x570>)
 80103e0:	f023 0304 	bic.w	r3, r3, #4
 80103e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	689b      	ldr	r3, [r3, #8]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d016      	beq.n	801041e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80103f0:	f7fd fdca 	bl	800df88 <HAL_GetTick>
 80103f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80103f6:	e00a      	b.n	801040e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80103f8:	f7fd fdc6 	bl	800df88 <HAL_GetTick>
 80103fc:	4602      	mov	r2, r0
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	1ad3      	subs	r3, r2, r3
 8010402:	f241 3288 	movw	r2, #5000	; 0x1388
 8010406:	4293      	cmp	r3, r2
 8010408:	d901      	bls.n	801040e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 801040a:	2303      	movs	r3, #3
 801040c:	e143      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801040e:	4b0b      	ldr	r3, [pc, #44]	; (801043c <HAL_RCC_OscConfig+0x570>)
 8010410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010414:	f003 0302 	and.w	r3, r3, #2
 8010418:	2b00      	cmp	r3, #0
 801041a:	d0ed      	beq.n	80103f8 <HAL_RCC_OscConfig+0x52c>
 801041c:	e019      	b.n	8010452 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801041e:	f7fd fdb3 	bl	800df88 <HAL_GetTick>
 8010422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8010424:	e00e      	b.n	8010444 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010426:	f7fd fdaf 	bl	800df88 <HAL_GetTick>
 801042a:	4602      	mov	r2, r0
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	1ad3      	subs	r3, r2, r3
 8010430:	f241 3288 	movw	r2, #5000	; 0x1388
 8010434:	4293      	cmp	r3, r2
 8010436:	d905      	bls.n	8010444 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8010438:	2303      	movs	r3, #3
 801043a:	e12c      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
 801043c:	40021000 	.word	0x40021000
 8010440:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8010444:	4b96      	ldr	r3, [pc, #600]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 8010446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801044a:	f003 0302 	and.w	r3, r3, #2
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1e9      	bne.n	8010426 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010452:	7ffb      	ldrb	r3, [r7, #31]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d105      	bne.n	8010464 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010458:	4b91      	ldr	r3, [pc, #580]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 801045a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801045c:	4a90      	ldr	r2, [pc, #576]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 801045e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010462:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f003 0320 	and.w	r3, r3, #32
 801046c:	2b00      	cmp	r3, #0
 801046e:	d03c      	beq.n	80104ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010474:	2b00      	cmp	r3, #0
 8010476:	d01c      	beq.n	80104b2 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010478:	4b89      	ldr	r3, [pc, #548]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 801047a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801047e:	4a88      	ldr	r2, [pc, #544]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 8010480:	f043 0301 	orr.w	r3, r3, #1
 8010484:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010488:	f7fd fd7e 	bl	800df88 <HAL_GetTick>
 801048c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801048e:	e008      	b.n	80104a2 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010490:	f7fd fd7a 	bl	800df88 <HAL_GetTick>
 8010494:	4602      	mov	r2, r0
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	2b02      	cmp	r3, #2
 801049c:	d901      	bls.n	80104a2 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 801049e:	2303      	movs	r3, #3
 80104a0:	e0f9      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80104a2:	4b7f      	ldr	r3, [pc, #508]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80104a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80104a8:	f003 0302 	and.w	r3, r3, #2
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d0ef      	beq.n	8010490 <HAL_RCC_OscConfig+0x5c4>
 80104b0:	e01b      	b.n	80104ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80104b2:	4b7b      	ldr	r3, [pc, #492]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80104b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80104b8:	4a79      	ldr	r2, [pc, #484]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80104ba:	f023 0301 	bic.w	r3, r3, #1
 80104be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80104c2:	f7fd fd61 	bl	800df88 <HAL_GetTick>
 80104c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80104c8:	e008      	b.n	80104dc <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80104ca:	f7fd fd5d 	bl	800df88 <HAL_GetTick>
 80104ce:	4602      	mov	r2, r0
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	1ad3      	subs	r3, r2, r3
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	d901      	bls.n	80104dc <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80104d8:	2303      	movs	r3, #3
 80104da:	e0dc      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80104dc:	4b70      	ldr	r3, [pc, #448]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80104de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80104e2:	f003 0302 	and.w	r3, r3, #2
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d1ef      	bne.n	80104ca <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	f000 80d0 	beq.w	8010694 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	2b0c      	cmp	r3, #12
 80104f8:	f000 808d 	beq.w	8010616 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010500:	2b02      	cmp	r3, #2
 8010502:	d15a      	bne.n	80105ba <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010504:	4b66      	ldr	r3, [pc, #408]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4a65      	ldr	r2, [pc, #404]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 801050a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801050e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010510:	f7fd fd3a 	bl	800df88 <HAL_GetTick>
 8010514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010516:	e008      	b.n	801052a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010518:	f7fd fd36 	bl	800df88 <HAL_GetTick>
 801051c:	4602      	mov	r2, r0
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	1ad3      	subs	r3, r2, r3
 8010522:	2b02      	cmp	r3, #2
 8010524:	d901      	bls.n	801052a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8010526:	2303      	movs	r3, #3
 8010528:	e0b5      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801052a:	4b5d      	ldr	r3, [pc, #372]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010532:	2b00      	cmp	r3, #0
 8010534:	d1f0      	bne.n	8010518 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010536:	4b5a      	ldr	r3, [pc, #360]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 8010538:	68da      	ldr	r2, [r3, #12]
 801053a:	4b5a      	ldr	r3, [pc, #360]	; (80106a4 <HAL_RCC_OscConfig+0x7d8>)
 801053c:	4013      	ands	r3, r2
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010546:	3a01      	subs	r2, #1
 8010548:	0112      	lsls	r2, r2, #4
 801054a:	4311      	orrs	r1, r2
 801054c:	687a      	ldr	r2, [r7, #4]
 801054e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010550:	0212      	lsls	r2, r2, #8
 8010552:	4311      	orrs	r1, r2
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010558:	0852      	lsrs	r2, r2, #1
 801055a:	3a01      	subs	r2, #1
 801055c:	0552      	lsls	r2, r2, #21
 801055e:	4311      	orrs	r1, r2
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010564:	0852      	lsrs	r2, r2, #1
 8010566:	3a01      	subs	r2, #1
 8010568:	0652      	lsls	r2, r2, #25
 801056a:	4311      	orrs	r1, r2
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010570:	06d2      	lsls	r2, r2, #27
 8010572:	430a      	orrs	r2, r1
 8010574:	494a      	ldr	r1, [pc, #296]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 8010576:	4313      	orrs	r3, r2
 8010578:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801057a:	4b49      	ldr	r3, [pc, #292]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	4a48      	ldr	r2, [pc, #288]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 8010580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010584:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010586:	4b46      	ldr	r3, [pc, #280]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 8010588:	68db      	ldr	r3, [r3, #12]
 801058a:	4a45      	ldr	r2, [pc, #276]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 801058c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010590:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010592:	f7fd fcf9 	bl	800df88 <HAL_GetTick>
 8010596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010598:	e008      	b.n	80105ac <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801059a:	f7fd fcf5 	bl	800df88 <HAL_GetTick>
 801059e:	4602      	mov	r2, r0
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	2b02      	cmp	r3, #2
 80105a6:	d901      	bls.n	80105ac <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80105a8:	2303      	movs	r3, #3
 80105aa:	e074      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80105ac:	4b3c      	ldr	r3, [pc, #240]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d0f0      	beq.n	801059a <HAL_RCC_OscConfig+0x6ce>
 80105b8:	e06c      	b.n	8010694 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80105ba:	4b39      	ldr	r3, [pc, #228]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4a38      	ldr	r2, [pc, #224]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80105c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80105c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80105c6:	4b36      	ldr	r3, [pc, #216]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d105      	bne.n	80105de <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80105d2:	4b33      	ldr	r3, [pc, #204]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	4a32      	ldr	r2, [pc, #200]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80105d8:	f023 0303 	bic.w	r3, r3, #3
 80105dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80105de:	4b30      	ldr	r3, [pc, #192]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80105e0:	68db      	ldr	r3, [r3, #12]
 80105e2:	4a2f      	ldr	r2, [pc, #188]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 80105e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80105e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80105ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80105ee:	f7fd fccb 	bl	800df88 <HAL_GetTick>
 80105f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80105f4:	e008      	b.n	8010608 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80105f6:	f7fd fcc7 	bl	800df88 <HAL_GetTick>
 80105fa:	4602      	mov	r2, r0
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	1ad3      	subs	r3, r2, r3
 8010600:	2b02      	cmp	r3, #2
 8010602:	d901      	bls.n	8010608 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8010604:	2303      	movs	r3, #3
 8010606:	e046      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010608:	4b25      	ldr	r3, [pc, #148]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1f0      	bne.n	80105f6 <HAL_RCC_OscConfig+0x72a>
 8010614:	e03e      	b.n	8010694 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061a:	2b01      	cmp	r3, #1
 801061c:	d101      	bne.n	8010622 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801061e:	2301      	movs	r3, #1
 8010620:	e039      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8010622:	4b1f      	ldr	r3, [pc, #124]	; (80106a0 <HAL_RCC_OscConfig+0x7d4>)
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	f003 0203 	and.w	r2, r3, #3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010632:	429a      	cmp	r2, r3
 8010634:	d12c      	bne.n	8010690 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010640:	3b01      	subs	r3, #1
 8010642:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8010644:	429a      	cmp	r2, r3
 8010646:	d123      	bne.n	8010690 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010652:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8010654:	429a      	cmp	r2, r3
 8010656:	d11b      	bne.n	8010690 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010662:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010664:	429a      	cmp	r2, r3
 8010666:	d113      	bne.n	8010690 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010672:	085b      	lsrs	r3, r3, #1
 8010674:	3b01      	subs	r3, #1
 8010676:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8010678:	429a      	cmp	r2, r3
 801067a:	d109      	bne.n	8010690 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010686:	085b      	lsrs	r3, r3, #1
 8010688:	3b01      	subs	r3, #1
 801068a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801068c:	429a      	cmp	r2, r3
 801068e:	d001      	beq.n	8010694 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8010690:	2301      	movs	r3, #1
 8010692:	e000      	b.n	8010696 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8010694:	2300      	movs	r3, #0
}
 8010696:	4618      	mov	r0, r3
 8010698:	3720      	adds	r7, #32
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	40021000 	.word	0x40021000
 80106a4:	019d808c 	.word	0x019d808c

080106a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d101      	bne.n	80106bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80106b8:	2301      	movs	r3, #1
 80106ba:	e0c8      	b.n	801084e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80106bc:	4b66      	ldr	r3, [pc, #408]	; (8010858 <HAL_RCC_ClockConfig+0x1b0>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f003 0307 	and.w	r3, r3, #7
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d910      	bls.n	80106ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80106ca:	4b63      	ldr	r3, [pc, #396]	; (8010858 <HAL_RCC_ClockConfig+0x1b0>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	f023 0207 	bic.w	r2, r3, #7
 80106d2:	4961      	ldr	r1, [pc, #388]	; (8010858 <HAL_RCC_ClockConfig+0x1b0>)
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	4313      	orrs	r3, r2
 80106d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80106da:	4b5f      	ldr	r3, [pc, #380]	; (8010858 <HAL_RCC_ClockConfig+0x1b0>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	f003 0307 	and.w	r3, r3, #7
 80106e2:	683a      	ldr	r2, [r7, #0]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d001      	beq.n	80106ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80106e8:	2301      	movs	r3, #1
 80106ea:	e0b0      	b.n	801084e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f003 0301 	and.w	r3, r3, #1
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d04c      	beq.n	8010792 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	2b03      	cmp	r3, #3
 80106fe:	d107      	bne.n	8010710 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010700:	4b56      	ldr	r3, [pc, #344]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010708:	2b00      	cmp	r3, #0
 801070a:	d121      	bne.n	8010750 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 801070c:	2301      	movs	r3, #1
 801070e:	e09e      	b.n	801084e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	2b02      	cmp	r3, #2
 8010716:	d107      	bne.n	8010728 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010718:	4b50      	ldr	r3, [pc, #320]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010720:	2b00      	cmp	r3, #0
 8010722:	d115      	bne.n	8010750 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8010724:	2301      	movs	r3, #1
 8010726:	e092      	b.n	801084e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d107      	bne.n	8010740 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010730:	4b4a      	ldr	r3, [pc, #296]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f003 0302 	and.w	r3, r3, #2
 8010738:	2b00      	cmp	r3, #0
 801073a:	d109      	bne.n	8010750 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801073c:	2301      	movs	r3, #1
 801073e:	e086      	b.n	801084e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010740:	4b46      	ldr	r3, [pc, #280]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010748:	2b00      	cmp	r3, #0
 801074a:	d101      	bne.n	8010750 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801074c:	2301      	movs	r3, #1
 801074e:	e07e      	b.n	801084e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010750:	4b42      	ldr	r3, [pc, #264]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	f023 0203 	bic.w	r2, r3, #3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	493f      	ldr	r1, [pc, #252]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 801075e:	4313      	orrs	r3, r2
 8010760:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010762:	f7fd fc11 	bl	800df88 <HAL_GetTick>
 8010766:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010768:	e00a      	b.n	8010780 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801076a:	f7fd fc0d 	bl	800df88 <HAL_GetTick>
 801076e:	4602      	mov	r2, r0
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	1ad3      	subs	r3, r2, r3
 8010774:	f241 3288 	movw	r2, #5000	; 0x1388
 8010778:	4293      	cmp	r3, r2
 801077a:	d901      	bls.n	8010780 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 801077c:	2303      	movs	r3, #3
 801077e:	e066      	b.n	801084e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010780:	4b36      	ldr	r3, [pc, #216]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	f003 020c 	and.w	r2, r3, #12
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	429a      	cmp	r2, r3
 8010790:	d1eb      	bne.n	801076a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f003 0302 	and.w	r3, r3, #2
 801079a:	2b00      	cmp	r3, #0
 801079c:	d008      	beq.n	80107b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801079e:	4b2f      	ldr	r3, [pc, #188]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 80107a0:	689b      	ldr	r3, [r3, #8]
 80107a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	689b      	ldr	r3, [r3, #8]
 80107aa:	492c      	ldr	r1, [pc, #176]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 80107ac:	4313      	orrs	r3, r2
 80107ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80107b0:	4b29      	ldr	r3, [pc, #164]	; (8010858 <HAL_RCC_ClockConfig+0x1b0>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f003 0307 	and.w	r3, r3, #7
 80107b8:	683a      	ldr	r2, [r7, #0]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d210      	bcs.n	80107e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80107be:	4b26      	ldr	r3, [pc, #152]	; (8010858 <HAL_RCC_ClockConfig+0x1b0>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f023 0207 	bic.w	r2, r3, #7
 80107c6:	4924      	ldr	r1, [pc, #144]	; (8010858 <HAL_RCC_ClockConfig+0x1b0>)
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	4313      	orrs	r3, r2
 80107cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80107ce:	4b22      	ldr	r3, [pc, #136]	; (8010858 <HAL_RCC_ClockConfig+0x1b0>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f003 0307 	and.w	r3, r3, #7
 80107d6:	683a      	ldr	r2, [r7, #0]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d001      	beq.n	80107e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80107dc:	2301      	movs	r3, #1
 80107de:	e036      	b.n	801084e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	f003 0304 	and.w	r3, r3, #4
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d008      	beq.n	80107fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80107ec:	4b1b      	ldr	r3, [pc, #108]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 80107ee:	689b      	ldr	r3, [r3, #8]
 80107f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	4918      	ldr	r1, [pc, #96]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 80107fa:	4313      	orrs	r3, r2
 80107fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f003 0308 	and.w	r3, r3, #8
 8010806:	2b00      	cmp	r3, #0
 8010808:	d009      	beq.n	801081e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801080a:	4b14      	ldr	r3, [pc, #80]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 801080c:	689b      	ldr	r3, [r3, #8]
 801080e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	691b      	ldr	r3, [r3, #16]
 8010816:	00db      	lsls	r3, r3, #3
 8010818:	4910      	ldr	r1, [pc, #64]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 801081a:	4313      	orrs	r3, r2
 801081c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801081e:	f000 f825 	bl	801086c <HAL_RCC_GetSysClockFreq>
 8010822:	4601      	mov	r1, r0
 8010824:	4b0d      	ldr	r3, [pc, #52]	; (801085c <HAL_RCC_ClockConfig+0x1b4>)
 8010826:	689b      	ldr	r3, [r3, #8]
 8010828:	091b      	lsrs	r3, r3, #4
 801082a:	f003 030f 	and.w	r3, r3, #15
 801082e:	4a0c      	ldr	r2, [pc, #48]	; (8010860 <HAL_RCC_ClockConfig+0x1b8>)
 8010830:	5cd3      	ldrb	r3, [r2, r3]
 8010832:	f003 031f 	and.w	r3, r3, #31
 8010836:	fa21 f303 	lsr.w	r3, r1, r3
 801083a:	4a0a      	ldr	r2, [pc, #40]	; (8010864 <HAL_RCC_ClockConfig+0x1bc>)
 801083c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801083e:	4b0a      	ldr	r3, [pc, #40]	; (8010868 <HAL_RCC_ClockConfig+0x1c0>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	4618      	mov	r0, r3
 8010844:	f7fd fb54 	bl	800def0 <HAL_InitTick>
 8010848:	4603      	mov	r3, r0
 801084a:	72fb      	strb	r3, [r7, #11]

  return status;
 801084c:	7afb      	ldrb	r3, [r7, #11]
}
 801084e:	4618      	mov	r0, r3
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	40022000 	.word	0x40022000
 801085c:	40021000 	.word	0x40021000
 8010860:	0801c698 	.word	0x0801c698
 8010864:	20000054 	.word	0x20000054
 8010868:	20000028 	.word	0x20000028

0801086c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801086c:	b480      	push	{r7}
 801086e:	b089      	sub	sp, #36	; 0x24
 8010870:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8010872:	2300      	movs	r3, #0
 8010874:	61fb      	str	r3, [r7, #28]
 8010876:	2300      	movs	r3, #0
 8010878:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801087a:	4b3d      	ldr	r3, [pc, #244]	; (8010970 <HAL_RCC_GetSysClockFreq+0x104>)
 801087c:	689b      	ldr	r3, [r3, #8]
 801087e:	f003 030c 	and.w	r3, r3, #12
 8010882:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010884:	4b3a      	ldr	r3, [pc, #232]	; (8010970 <HAL_RCC_GetSysClockFreq+0x104>)
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	f003 0303 	and.w	r3, r3, #3
 801088c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d005      	beq.n	80108a0 <HAL_RCC_GetSysClockFreq+0x34>
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	2b0c      	cmp	r3, #12
 8010898:	d121      	bne.n	80108de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2b01      	cmp	r3, #1
 801089e:	d11e      	bne.n	80108de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80108a0:	4b33      	ldr	r3, [pc, #204]	; (8010970 <HAL_RCC_GetSysClockFreq+0x104>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	f003 0308 	and.w	r3, r3, #8
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d107      	bne.n	80108bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80108ac:	4b30      	ldr	r3, [pc, #192]	; (8010970 <HAL_RCC_GetSysClockFreq+0x104>)
 80108ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80108b2:	0a1b      	lsrs	r3, r3, #8
 80108b4:	f003 030f 	and.w	r3, r3, #15
 80108b8:	61fb      	str	r3, [r7, #28]
 80108ba:	e005      	b.n	80108c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80108bc:	4b2c      	ldr	r3, [pc, #176]	; (8010970 <HAL_RCC_GetSysClockFreq+0x104>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	091b      	lsrs	r3, r3, #4
 80108c2:	f003 030f 	and.w	r3, r3, #15
 80108c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80108c8:	4a2a      	ldr	r2, [pc, #168]	; (8010974 <HAL_RCC_GetSysClockFreq+0x108>)
 80108ca:	69fb      	ldr	r3, [r7, #28]
 80108cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d10d      	bne.n	80108f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80108dc:	e00a      	b.n	80108f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	2b04      	cmp	r3, #4
 80108e2:	d102      	bne.n	80108ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80108e4:	4b24      	ldr	r3, [pc, #144]	; (8010978 <HAL_RCC_GetSysClockFreq+0x10c>)
 80108e6:	61bb      	str	r3, [r7, #24]
 80108e8:	e004      	b.n	80108f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	2b08      	cmp	r3, #8
 80108ee:	d101      	bne.n	80108f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80108f0:	4b22      	ldr	r3, [pc, #136]	; (801097c <HAL_RCC_GetSysClockFreq+0x110>)
 80108f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	2b0c      	cmp	r3, #12
 80108f8:	d133      	bne.n	8010962 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80108fa:	4b1d      	ldr	r3, [pc, #116]	; (8010970 <HAL_RCC_GetSysClockFreq+0x104>)
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	f003 0303 	and.w	r3, r3, #3
 8010902:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	2b02      	cmp	r3, #2
 8010908:	d002      	beq.n	8010910 <HAL_RCC_GetSysClockFreq+0xa4>
 801090a:	2b03      	cmp	r3, #3
 801090c:	d003      	beq.n	8010916 <HAL_RCC_GetSysClockFreq+0xaa>
 801090e:	e005      	b.n	801091c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8010910:	4b19      	ldr	r3, [pc, #100]	; (8010978 <HAL_RCC_GetSysClockFreq+0x10c>)
 8010912:	617b      	str	r3, [r7, #20]
      break;
 8010914:	e005      	b.n	8010922 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8010916:	4b19      	ldr	r3, [pc, #100]	; (801097c <HAL_RCC_GetSysClockFreq+0x110>)
 8010918:	617b      	str	r3, [r7, #20]
      break;
 801091a:	e002      	b.n	8010922 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	617b      	str	r3, [r7, #20]
      break;
 8010920:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010922:	4b13      	ldr	r3, [pc, #76]	; (8010970 <HAL_RCC_GetSysClockFreq+0x104>)
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	091b      	lsrs	r3, r3, #4
 8010928:	f003 0307 	and.w	r3, r3, #7
 801092c:	3301      	adds	r3, #1
 801092e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8010930:	4b0f      	ldr	r3, [pc, #60]	; (8010970 <HAL_RCC_GetSysClockFreq+0x104>)
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	0a1b      	lsrs	r3, r3, #8
 8010936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801093a:	697a      	ldr	r2, [r7, #20]
 801093c:	fb02 f203 	mul.w	r2, r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	fbb2 f3f3 	udiv	r3, r2, r3
 8010946:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8010948:	4b09      	ldr	r3, [pc, #36]	; (8010970 <HAL_RCC_GetSysClockFreq+0x104>)
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	0e5b      	lsrs	r3, r3, #25
 801094e:	f003 0303 	and.w	r3, r3, #3
 8010952:	3301      	adds	r3, #1
 8010954:	005b      	lsls	r3, r3, #1
 8010956:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8010958:	697a      	ldr	r2, [r7, #20]
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010960:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010962:	69bb      	ldr	r3, [r7, #24]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3724      	adds	r7, #36	; 0x24
 8010968:	46bd      	mov	sp, r7
 801096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096e:	4770      	bx	lr
 8010970:	40021000 	.word	0x40021000
 8010974:	0801c6b0 	.word	0x0801c6b0
 8010978:	00f42400 	.word	0x00f42400
 801097c:	007a1200 	.word	0x007a1200

08010980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010980:	b480      	push	{r7}
 8010982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010984:	4b03      	ldr	r3, [pc, #12]	; (8010994 <HAL_RCC_GetHCLKFreq+0x14>)
 8010986:	681b      	ldr	r3, [r3, #0]
}
 8010988:	4618      	mov	r0, r3
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	20000054 	.word	0x20000054

08010998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801099c:	f7ff fff0 	bl	8010980 <HAL_RCC_GetHCLKFreq>
 80109a0:	4601      	mov	r1, r0
 80109a2:	4b06      	ldr	r3, [pc, #24]	; (80109bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80109a4:	689b      	ldr	r3, [r3, #8]
 80109a6:	0a1b      	lsrs	r3, r3, #8
 80109a8:	f003 0307 	and.w	r3, r3, #7
 80109ac:	4a04      	ldr	r2, [pc, #16]	; (80109c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80109ae:	5cd3      	ldrb	r3, [r2, r3]
 80109b0:	f003 031f 	and.w	r3, r3, #31
 80109b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	40021000 	.word	0x40021000
 80109c0:	0801c6a8 	.word	0x0801c6a8

080109c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80109c8:	f7ff ffda 	bl	8010980 <HAL_RCC_GetHCLKFreq>
 80109cc:	4601      	mov	r1, r0
 80109ce:	4b06      	ldr	r3, [pc, #24]	; (80109e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	0adb      	lsrs	r3, r3, #11
 80109d4:	f003 0307 	and.w	r3, r3, #7
 80109d8:	4a04      	ldr	r2, [pc, #16]	; (80109ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80109da:	5cd3      	ldrb	r3, [r2, r3]
 80109dc:	f003 031f 	and.w	r3, r3, #31
 80109e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	40021000 	.word	0x40021000
 80109ec:	0801c6a8 	.word	0x0801c6a8

080109f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b086      	sub	sp, #24
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80109f8:	2300      	movs	r3, #0
 80109fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80109fc:	4b2a      	ldr	r3, [pc, #168]	; (8010aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80109fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d003      	beq.n	8010a10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010a08:	f7ff f9dc 	bl	800fdc4 <HAL_PWREx_GetVoltageRange>
 8010a0c:	6178      	str	r0, [r7, #20]
 8010a0e:	e014      	b.n	8010a3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8010a10:	4b25      	ldr	r3, [pc, #148]	; (8010aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a14:	4a24      	ldr	r2, [pc, #144]	; (8010aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8010a1c:	4b22      	ldr	r3, [pc, #136]	; (8010aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010a24:	60fb      	str	r3, [r7, #12]
 8010a26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8010a28:	f7ff f9cc 	bl	800fdc4 <HAL_PWREx_GetVoltageRange>
 8010a2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8010a2e:	4b1e      	ldr	r3, [pc, #120]	; (8010aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a32:	4a1d      	ldr	r2, [pc, #116]	; (8010aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010a38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a40:	d10b      	bne.n	8010a5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b80      	cmp	r3, #128	; 0x80
 8010a46:	d919      	bls.n	8010a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2ba0      	cmp	r3, #160	; 0xa0
 8010a4c:	d902      	bls.n	8010a54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010a4e:	2302      	movs	r3, #2
 8010a50:	613b      	str	r3, [r7, #16]
 8010a52:	e013      	b.n	8010a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010a54:	2301      	movs	r3, #1
 8010a56:	613b      	str	r3, [r7, #16]
 8010a58:	e010      	b.n	8010a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2b80      	cmp	r3, #128	; 0x80
 8010a5e:	d902      	bls.n	8010a66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010a60:	2303      	movs	r3, #3
 8010a62:	613b      	str	r3, [r7, #16]
 8010a64:	e00a      	b.n	8010a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2b80      	cmp	r3, #128	; 0x80
 8010a6a:	d102      	bne.n	8010a72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010a6c:	2302      	movs	r3, #2
 8010a6e:	613b      	str	r3, [r7, #16]
 8010a70:	e004      	b.n	8010a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2b70      	cmp	r3, #112	; 0x70
 8010a76:	d101      	bne.n	8010a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010a78:	2301      	movs	r3, #1
 8010a7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010a7c:	4b0b      	ldr	r3, [pc, #44]	; (8010aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f023 0207 	bic.w	r2, r3, #7
 8010a84:	4909      	ldr	r1, [pc, #36]	; (8010aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	4313      	orrs	r3, r2
 8010a8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010a8c:	4b07      	ldr	r3, [pc, #28]	; (8010aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f003 0307 	and.w	r3, r3, #7
 8010a94:	693a      	ldr	r2, [r7, #16]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d001      	beq.n	8010a9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	e000      	b.n	8010aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8010a9e:	2300      	movs	r3, #0
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3718      	adds	r7, #24
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	40021000 	.word	0x40021000
 8010aac:	40022000 	.word	0x40022000

08010ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010ab8:	2300      	movs	r3, #0
 8010aba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010abc:	2300      	movs	r3, #0
 8010abe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d03f      	beq.n	8010b4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ad4:	d01c      	beq.n	8010b10 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8010ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ada:	d802      	bhi.n	8010ae2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d00e      	beq.n	8010afe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8010ae0:	e01f      	b.n	8010b22 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8010ae2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010ae6:	d003      	beq.n	8010af0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8010ae8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010aec:	d01c      	beq.n	8010b28 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8010aee:	e018      	b.n	8010b22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010af0:	4b85      	ldr	r3, [pc, #532]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	4a84      	ldr	r2, [pc, #528]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010afa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010afc:	e015      	b.n	8010b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3304      	adds	r3, #4
 8010b02:	2100      	movs	r1, #0
 8010b04:	4618      	mov	r0, r3
 8010b06:	f000 fadb 	bl	80110c0 <RCCEx_PLLSAI1_Config>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010b0e:	e00c      	b.n	8010b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	3320      	adds	r3, #32
 8010b14:	2100      	movs	r1, #0
 8010b16:	4618      	mov	r0, r3
 8010b18:	f000 fbc2 	bl	80112a0 <RCCEx_PLLSAI2_Config>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010b20:	e003      	b.n	8010b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010b22:	2301      	movs	r3, #1
 8010b24:	74fb      	strb	r3, [r7, #19]
      break;
 8010b26:	e000      	b.n	8010b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8010b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010b2a:	7cfb      	ldrb	r3, [r7, #19]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d10b      	bne.n	8010b48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010b30:	4b75      	ldr	r3, [pc, #468]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b3e:	4972      	ldr	r1, [pc, #456]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010b40:	4313      	orrs	r3, r2
 8010b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8010b46:	e001      	b.n	8010b4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b48:	7cfb      	ldrb	r3, [r7, #19]
 8010b4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d03f      	beq.n	8010bd8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010b60:	d01c      	beq.n	8010b9c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8010b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010b66:	d802      	bhi.n	8010b6e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d00e      	beq.n	8010b8a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8010b6c:	e01f      	b.n	8010bae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010b72:	d003      	beq.n	8010b7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8010b74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010b78:	d01c      	beq.n	8010bb4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8010b7a:	e018      	b.n	8010bae <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010b7c:	4b62      	ldr	r3, [pc, #392]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	4a61      	ldr	r2, [pc, #388]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010b88:	e015      	b.n	8010bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	3304      	adds	r3, #4
 8010b8e:	2100      	movs	r1, #0
 8010b90:	4618      	mov	r0, r3
 8010b92:	f000 fa95 	bl	80110c0 <RCCEx_PLLSAI1_Config>
 8010b96:	4603      	mov	r3, r0
 8010b98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010b9a:	e00c      	b.n	8010bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	3320      	adds	r3, #32
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f000 fb7c 	bl	80112a0 <RCCEx_PLLSAI2_Config>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010bac:	e003      	b.n	8010bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8010bb2:	e000      	b.n	8010bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8010bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010bb6:	7cfb      	ldrb	r3, [r7, #19]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d10b      	bne.n	8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010bbc:	4b52      	ldr	r3, [pc, #328]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bca:	494f      	ldr	r1, [pc, #316]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010bcc:	4313      	orrs	r3, r2
 8010bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8010bd2:	e001      	b.n	8010bd8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010bd4:	7cfb      	ldrb	r3, [r7, #19]
 8010bd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 80a0 	beq.w	8010d26 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010be6:	2300      	movs	r3, #0
 8010be8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010bea:	4b47      	ldr	r3, [pc, #284]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d101      	bne.n	8010bfa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	e000      	b.n	8010bfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d00d      	beq.n	8010c1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010c00:	4b41      	ldr	r3, [pc, #260]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c04:	4a40      	ldr	r2, [pc, #256]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8010c0c:	4b3e      	ldr	r3, [pc, #248]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c14:	60bb      	str	r3, [r7, #8]
 8010c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010c18:	2301      	movs	r3, #1
 8010c1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010c1c:	4b3b      	ldr	r3, [pc, #236]	; (8010d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4a3a      	ldr	r2, [pc, #232]	; (8010d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8010c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010c28:	f7fd f9ae 	bl	800df88 <HAL_GetTick>
 8010c2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010c2e:	e009      	b.n	8010c44 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010c30:	f7fd f9aa 	bl	800df88 <HAL_GetTick>
 8010c34:	4602      	mov	r2, r0
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	1ad3      	subs	r3, r2, r3
 8010c3a:	2b02      	cmp	r3, #2
 8010c3c:	d902      	bls.n	8010c44 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8010c3e:	2303      	movs	r3, #3
 8010c40:	74fb      	strb	r3, [r7, #19]
        break;
 8010c42:	e005      	b.n	8010c50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010c44:	4b31      	ldr	r3, [pc, #196]	; (8010d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d0ef      	beq.n	8010c30 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8010c50:	7cfb      	ldrb	r3, [r7, #19]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d15c      	bne.n	8010d10 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010c56:	4b2c      	ldr	r3, [pc, #176]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d01f      	beq.n	8010ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c6e:	697a      	ldr	r2, [r7, #20]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d019      	beq.n	8010ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010c74:	4b24      	ldr	r3, [pc, #144]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010c80:	4b21      	ldr	r3, [pc, #132]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c86:	4a20      	ldr	r2, [pc, #128]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010c90:	4b1d      	ldr	r3, [pc, #116]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c96:	4a1c      	ldr	r2, [pc, #112]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010ca0:	4a19      	ldr	r2, [pc, #100]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	f003 0301 	and.w	r3, r3, #1
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d016      	beq.n	8010ce0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010cb2:	f7fd f969 	bl	800df88 <HAL_GetTick>
 8010cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010cb8:	e00b      	b.n	8010cd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010cba:	f7fd f965 	bl	800df88 <HAL_GetTick>
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d902      	bls.n	8010cd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8010ccc:	2303      	movs	r3, #3
 8010cce:	74fb      	strb	r3, [r7, #19]
            break;
 8010cd0:	e006      	b.n	8010ce0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010cd2:	4b0d      	ldr	r3, [pc, #52]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cd8:	f003 0302 	and.w	r3, r3, #2
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d0ec      	beq.n	8010cba <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8010ce0:	7cfb      	ldrb	r3, [r7, #19]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d10c      	bne.n	8010d00 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010ce6:	4b08      	ldr	r3, [pc, #32]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cf6:	4904      	ldr	r1, [pc, #16]	; (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8010cfe:	e009      	b.n	8010d14 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010d00:	7cfb      	ldrb	r3, [r7, #19]
 8010d02:	74bb      	strb	r3, [r7, #18]
 8010d04:	e006      	b.n	8010d14 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8010d06:	bf00      	nop
 8010d08:	40021000 	.word	0x40021000
 8010d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d10:	7cfb      	ldrb	r3, [r7, #19]
 8010d12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010d14:	7c7b      	ldrb	r3, [r7, #17]
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	d105      	bne.n	8010d26 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010d1a:	4ba6      	ldr	r3, [pc, #664]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d1e:	4aa5      	ldr	r2, [pc, #660]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010d24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f003 0301 	and.w	r3, r3, #1
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d00a      	beq.n	8010d48 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010d32:	4ba0      	ldr	r3, [pc, #640]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d38:	f023 0203 	bic.w	r2, r3, #3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d40:	499c      	ldr	r1, [pc, #624]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010d42:	4313      	orrs	r3, r2
 8010d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f003 0302 	and.w	r3, r3, #2
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d00a      	beq.n	8010d6a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010d54:	4b97      	ldr	r3, [pc, #604]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d5a:	f023 020c 	bic.w	r2, r3, #12
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d62:	4994      	ldr	r1, [pc, #592]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010d64:	4313      	orrs	r3, r2
 8010d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	f003 0304 	and.w	r3, r3, #4
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00a      	beq.n	8010d8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010d76:	4b8f      	ldr	r3, [pc, #572]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d84:	498b      	ldr	r1, [pc, #556]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010d86:	4313      	orrs	r3, r2
 8010d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f003 0308 	and.w	r3, r3, #8
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00a      	beq.n	8010dae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010d98:	4b86      	ldr	r3, [pc, #536]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010da6:	4983      	ldr	r1, [pc, #524]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010da8:	4313      	orrs	r3, r2
 8010daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f003 0310 	and.w	r3, r3, #16
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00a      	beq.n	8010dd0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8010dba:	4b7e      	ldr	r3, [pc, #504]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dc8:	497a      	ldr	r1, [pc, #488]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f003 0320 	and.w	r3, r3, #32
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00a      	beq.n	8010df2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010ddc:	4b75      	ldr	r3, [pc, #468]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010dea:	4972      	ldr	r1, [pc, #456]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010dec:	4313      	orrs	r3, r2
 8010dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00a      	beq.n	8010e14 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010dfe:	4b6d      	ldr	r3, [pc, #436]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e0c:	4969      	ldr	r1, [pc, #420]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d00a      	beq.n	8010e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010e20:	4b64      	ldr	r3, [pc, #400]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e2e:	4961      	ldr	r1, [pc, #388]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e30:	4313      	orrs	r3, r2
 8010e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00a      	beq.n	8010e58 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010e42:	4b5c      	ldr	r3, [pc, #368]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e50:	4958      	ldr	r1, [pc, #352]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e52:	4313      	orrs	r3, r2
 8010e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00a      	beq.n	8010e7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010e64:	4b53      	ldr	r3, [pc, #332]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e72:	4950      	ldr	r1, [pc, #320]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e74:	4313      	orrs	r3, r2
 8010e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d00a      	beq.n	8010e9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010e86:	4b4b      	ldr	r3, [pc, #300]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e94:	4947      	ldr	r1, [pc, #284]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010e96:	4313      	orrs	r3, r2
 8010e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d00a      	beq.n	8010ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010ea8:	4b42      	ldr	r3, [pc, #264]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010eae:	f023 0203 	bic.w	r2, r3, #3
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010eb6:	493f      	ldr	r1, [pc, #252]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010eb8:	4313      	orrs	r3, r2
 8010eba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d028      	beq.n	8010f1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010eca:	4b3a      	ldr	r3, [pc, #232]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ed0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ed8:	4936      	ldr	r1, [pc, #216]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010eda:	4313      	orrs	r3, r2
 8010edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010ee8:	d106      	bne.n	8010ef8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010eea:	4b32      	ldr	r3, [pc, #200]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010eec:	68db      	ldr	r3, [r3, #12]
 8010eee:	4a31      	ldr	r2, [pc, #196]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ef4:	60d3      	str	r3, [r2, #12]
 8010ef6:	e011      	b.n	8010f1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010f00:	d10c      	bne.n	8010f1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	3304      	adds	r3, #4
 8010f06:	2101      	movs	r1, #1
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f000 f8d9 	bl	80110c0 <RCCEx_PLLSAI1_Config>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8010f12:	7cfb      	ldrb	r3, [r7, #19]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d001      	beq.n	8010f1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8010f18:	7cfb      	ldrb	r3, [r7, #19]
 8010f1a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d028      	beq.n	8010f7a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8010f28:	4b22      	ldr	r3, [pc, #136]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f36:	491f      	ldr	r1, [pc, #124]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010f46:	d106      	bne.n	8010f56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010f48:	4b1a      	ldr	r3, [pc, #104]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	4a19      	ldr	r2, [pc, #100]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f52:	60d3      	str	r3, [r2, #12]
 8010f54:	e011      	b.n	8010f7a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010f5e:	d10c      	bne.n	8010f7a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	3304      	adds	r3, #4
 8010f64:	2101      	movs	r1, #1
 8010f66:	4618      	mov	r0, r3
 8010f68:	f000 f8aa 	bl	80110c0 <RCCEx_PLLSAI1_Config>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010f70:	7cfb      	ldrb	r3, [r7, #19]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d001      	beq.n	8010f7a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8010f76:	7cfb      	ldrb	r3, [r7, #19]
 8010f78:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d02a      	beq.n	8010fdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010f86:	4b0b      	ldr	r3, [pc, #44]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f94:	4907      	ldr	r1, [pc, #28]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010f96:	4313      	orrs	r3, r2
 8010f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010fa4:	d108      	bne.n	8010fb8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010fa6:	4b03      	ldr	r3, [pc, #12]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	4a02      	ldr	r2, [pc, #8]	; (8010fb4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8010fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010fb0:	60d3      	str	r3, [r2, #12]
 8010fb2:	e013      	b.n	8010fdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8010fb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010fc0:	d10c      	bne.n	8010fdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	2101      	movs	r1, #1
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f000 f879 	bl	80110c0 <RCCEx_PLLSAI1_Config>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010fd2:	7cfb      	ldrb	r3, [r7, #19]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d001      	beq.n	8010fdc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8010fd8:	7cfb      	ldrb	r3, [r7, #19]
 8010fda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d02f      	beq.n	8011048 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010fe8:	4b2c      	ldr	r3, [pc, #176]	; (801109c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ff6:	4929      	ldr	r1, [pc, #164]	; (801109c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011006:	d10d      	bne.n	8011024 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	3304      	adds	r3, #4
 801100c:	2102      	movs	r1, #2
 801100e:	4618      	mov	r0, r3
 8011010:	f000 f856 	bl	80110c0 <RCCEx_PLLSAI1_Config>
 8011014:	4603      	mov	r3, r0
 8011016:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011018:	7cfb      	ldrb	r3, [r7, #19]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d014      	beq.n	8011048 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 801101e:	7cfb      	ldrb	r3, [r7, #19]
 8011020:	74bb      	strb	r3, [r7, #18]
 8011022:	e011      	b.n	8011048 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801102c:	d10c      	bne.n	8011048 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	3320      	adds	r3, #32
 8011032:	2102      	movs	r1, #2
 8011034:	4618      	mov	r0, r3
 8011036:	f000 f933 	bl	80112a0 <RCCEx_PLLSAI2_Config>
 801103a:	4603      	mov	r3, r0
 801103c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801103e:	7cfb      	ldrb	r3, [r7, #19]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d001      	beq.n	8011048 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8011044:	7cfb      	ldrb	r3, [r7, #19]
 8011046:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011050:	2b00      	cmp	r3, #0
 8011052:	d00b      	beq.n	801106c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011054:	4b11      	ldr	r3, [pc, #68]	; (801109c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801105a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011064:	490d      	ldr	r1, [pc, #52]	; (801109c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011066:	4313      	orrs	r3, r2
 8011068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011074:	2b00      	cmp	r3, #0
 8011076:	d00b      	beq.n	8011090 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011078:	4b08      	ldr	r3, [pc, #32]	; (801109c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801107e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011088:	4904      	ldr	r1, [pc, #16]	; (801109c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801108a:	4313      	orrs	r3, r2
 801108c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8011090:	7cbb      	ldrb	r3, [r7, #18]
}
 8011092:	4618      	mov	r0, r3
 8011094:	3718      	adds	r7, #24
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	40021000 	.word	0x40021000

080110a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80110a0:	b480      	push	{r7}
 80110a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80110a4:	4b05      	ldr	r3, [pc, #20]	; (80110bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4a04      	ldr	r2, [pc, #16]	; (80110bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80110aa:	f043 0304 	orr.w	r3, r3, #4
 80110ae:	6013      	str	r3, [r2, #0]
}
 80110b0:	bf00      	nop
 80110b2:	46bd      	mov	sp, r7
 80110b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b8:	4770      	bx	lr
 80110ba:	bf00      	nop
 80110bc:	40021000 	.word	0x40021000

080110c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b084      	sub	sp, #16
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80110ca:	2300      	movs	r3, #0
 80110cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80110ce:	4b73      	ldr	r3, [pc, #460]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 80110d0:	68db      	ldr	r3, [r3, #12]
 80110d2:	f003 0303 	and.w	r3, r3, #3
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d018      	beq.n	801110c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80110da:	4b70      	ldr	r3, [pc, #448]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	f003 0203 	and.w	r2, r3, #3
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d10d      	bne.n	8011106 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
       ||
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d009      	beq.n	8011106 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80110f2:	4b6a      	ldr	r3, [pc, #424]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	091b      	lsrs	r3, r3, #4
 80110f8:	f003 0307 	and.w	r3, r3, #7
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	685b      	ldr	r3, [r3, #4]
       ||
 8011102:	429a      	cmp	r2, r3
 8011104:	d044      	beq.n	8011190 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8011106:	2301      	movs	r3, #1
 8011108:	73fb      	strb	r3, [r7, #15]
 801110a:	e041      	b.n	8011190 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2b02      	cmp	r3, #2
 8011112:	d00c      	beq.n	801112e <RCCEx_PLLSAI1_Config+0x6e>
 8011114:	2b03      	cmp	r3, #3
 8011116:	d013      	beq.n	8011140 <RCCEx_PLLSAI1_Config+0x80>
 8011118:	2b01      	cmp	r3, #1
 801111a:	d120      	bne.n	801115e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801111c:	4b5f      	ldr	r3, [pc, #380]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f003 0302 	and.w	r3, r3, #2
 8011124:	2b00      	cmp	r3, #0
 8011126:	d11d      	bne.n	8011164 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8011128:	2301      	movs	r3, #1
 801112a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801112c:	e01a      	b.n	8011164 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801112e:	4b5b      	ldr	r3, [pc, #364]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011136:	2b00      	cmp	r3, #0
 8011138:	d116      	bne.n	8011168 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 801113a:	2301      	movs	r3, #1
 801113c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801113e:	e013      	b.n	8011168 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8011140:	4b56      	ldr	r3, [pc, #344]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10f      	bne.n	801116c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801114c:	4b53      	ldr	r3, [pc, #332]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011154:	2b00      	cmp	r3, #0
 8011156:	d109      	bne.n	801116c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8011158:	2301      	movs	r3, #1
 801115a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801115c:	e006      	b.n	801116c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 801115e:	2301      	movs	r3, #1
 8011160:	73fb      	strb	r3, [r7, #15]
      break;
 8011162:	e004      	b.n	801116e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8011164:	bf00      	nop
 8011166:	e002      	b.n	801116e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8011168:	bf00      	nop
 801116a:	e000      	b.n	801116e <RCCEx_PLLSAI1_Config+0xae>
      break;
 801116c:	bf00      	nop
    }

    if(status == HAL_OK)
 801116e:	7bfb      	ldrb	r3, [r7, #15]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d10d      	bne.n	8011190 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8011174:	4b49      	ldr	r3, [pc, #292]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6819      	ldr	r1, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	3b01      	subs	r3, #1
 8011186:	011b      	lsls	r3, r3, #4
 8011188:	430b      	orrs	r3, r1
 801118a:	4944      	ldr	r1, [pc, #272]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 801118c:	4313      	orrs	r3, r2
 801118e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8011190:	7bfb      	ldrb	r3, [r7, #15]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d17c      	bne.n	8011290 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8011196:	4b41      	ldr	r3, [pc, #260]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a40      	ldr	r2, [pc, #256]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 801119c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80111a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80111a2:	f7fc fef1 	bl	800df88 <HAL_GetTick>
 80111a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80111a8:	e009      	b.n	80111be <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80111aa:	f7fc feed 	bl	800df88 <HAL_GetTick>
 80111ae:	4602      	mov	r2, r0
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	1ad3      	subs	r3, r2, r3
 80111b4:	2b02      	cmp	r3, #2
 80111b6:	d902      	bls.n	80111be <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80111b8:	2303      	movs	r3, #3
 80111ba:	73fb      	strb	r3, [r7, #15]
        break;
 80111bc:	e005      	b.n	80111ca <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80111be:	4b37      	ldr	r3, [pc, #220]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d1ef      	bne.n	80111aa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80111ca:	7bfb      	ldrb	r3, [r7, #15]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d15f      	bne.n	8011290 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d110      	bne.n	80111f8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80111d6:	4b31      	ldr	r3, [pc, #196]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 80111d8:	691b      	ldr	r3, [r3, #16]
 80111da:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80111de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80111e2:	687a      	ldr	r2, [r7, #4]
 80111e4:	6892      	ldr	r2, [r2, #8]
 80111e6:	0211      	lsls	r1, r2, #8
 80111e8:	687a      	ldr	r2, [r7, #4]
 80111ea:	68d2      	ldr	r2, [r2, #12]
 80111ec:	06d2      	lsls	r2, r2, #27
 80111ee:	430a      	orrs	r2, r1
 80111f0:	492a      	ldr	r1, [pc, #168]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 80111f2:	4313      	orrs	r3, r2
 80111f4:	610b      	str	r3, [r1, #16]
 80111f6:	e027      	b.n	8011248 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d112      	bne.n	8011224 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80111fe:	4b27      	ldr	r3, [pc, #156]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 8011200:	691b      	ldr	r3, [r3, #16]
 8011202:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8011206:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	6892      	ldr	r2, [r2, #8]
 801120e:	0211      	lsls	r1, r2, #8
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	6912      	ldr	r2, [r2, #16]
 8011214:	0852      	lsrs	r2, r2, #1
 8011216:	3a01      	subs	r2, #1
 8011218:	0552      	lsls	r2, r2, #21
 801121a:	430a      	orrs	r2, r1
 801121c:	491f      	ldr	r1, [pc, #124]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 801121e:	4313      	orrs	r3, r2
 8011220:	610b      	str	r3, [r1, #16]
 8011222:	e011      	b.n	8011248 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011224:	4b1d      	ldr	r3, [pc, #116]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 8011226:	691b      	ldr	r3, [r3, #16]
 8011228:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 801122c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	6892      	ldr	r2, [r2, #8]
 8011234:	0211      	lsls	r1, r2, #8
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	6952      	ldr	r2, [r2, #20]
 801123a:	0852      	lsrs	r2, r2, #1
 801123c:	3a01      	subs	r2, #1
 801123e:	0652      	lsls	r2, r2, #25
 8011240:	430a      	orrs	r2, r1
 8011242:	4916      	ldr	r1, [pc, #88]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 8011244:	4313      	orrs	r3, r2
 8011246:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8011248:	4b14      	ldr	r3, [pc, #80]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	4a13      	ldr	r2, [pc, #76]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 801124e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011252:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011254:	f7fc fe98 	bl	800df88 <HAL_GetTick>
 8011258:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801125a:	e009      	b.n	8011270 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801125c:	f7fc fe94 	bl	800df88 <HAL_GetTick>
 8011260:	4602      	mov	r2, r0
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	1ad3      	subs	r3, r2, r3
 8011266:	2b02      	cmp	r3, #2
 8011268:	d902      	bls.n	8011270 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 801126a:	2303      	movs	r3, #3
 801126c:	73fb      	strb	r3, [r7, #15]
          break;
 801126e:	e005      	b.n	801127c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011270:	4b0a      	ldr	r3, [pc, #40]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011278:	2b00      	cmp	r3, #0
 801127a:	d0ef      	beq.n	801125c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 801127c:	7bfb      	ldrb	r3, [r7, #15]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d106      	bne.n	8011290 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8011282:	4b06      	ldr	r3, [pc, #24]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 8011284:	691a      	ldr	r2, [r3, #16]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	699b      	ldr	r3, [r3, #24]
 801128a:	4904      	ldr	r1, [pc, #16]	; (801129c <RCCEx_PLLSAI1_Config+0x1dc>)
 801128c:	4313      	orrs	r3, r2
 801128e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8011290:	7bfb      	ldrb	r3, [r7, #15]
}
 8011292:	4618      	mov	r0, r3
 8011294:	3710      	adds	r7, #16
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	40021000 	.word	0x40021000

080112a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80112aa:	2300      	movs	r3, #0
 80112ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80112ae:	4b68      	ldr	r3, [pc, #416]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	f003 0303 	and.w	r3, r3, #3
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d018      	beq.n	80112ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80112ba:	4b65      	ldr	r3, [pc, #404]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	f003 0203 	and.w	r2, r3, #3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d10d      	bne.n	80112e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
       ||
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d009      	beq.n	80112e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80112d2:	4b5f      	ldr	r3, [pc, #380]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	091b      	lsrs	r3, r3, #4
 80112d8:	f003 0307 	and.w	r3, r3, #7
 80112dc:	1c5a      	adds	r2, r3, #1
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	685b      	ldr	r3, [r3, #4]
       ||
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d044      	beq.n	8011370 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80112e6:	2301      	movs	r3, #1
 80112e8:	73fb      	strb	r3, [r7, #15]
 80112ea:	e041      	b.n	8011370 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b02      	cmp	r3, #2
 80112f2:	d00c      	beq.n	801130e <RCCEx_PLLSAI2_Config+0x6e>
 80112f4:	2b03      	cmp	r3, #3
 80112f6:	d013      	beq.n	8011320 <RCCEx_PLLSAI2_Config+0x80>
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d120      	bne.n	801133e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80112fc:	4b54      	ldr	r3, [pc, #336]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f003 0302 	and.w	r3, r3, #2
 8011304:	2b00      	cmp	r3, #0
 8011306:	d11d      	bne.n	8011344 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8011308:	2301      	movs	r3, #1
 801130a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801130c:	e01a      	b.n	8011344 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801130e:	4b50      	ldr	r3, [pc, #320]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011316:	2b00      	cmp	r3, #0
 8011318:	d116      	bne.n	8011348 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 801131a:	2301      	movs	r3, #1
 801131c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801131e:	e013      	b.n	8011348 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8011320:	4b4b      	ldr	r3, [pc, #300]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011328:	2b00      	cmp	r3, #0
 801132a:	d10f      	bne.n	801134c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801132c:	4b48      	ldr	r3, [pc, #288]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011334:	2b00      	cmp	r3, #0
 8011336:	d109      	bne.n	801134c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8011338:	2301      	movs	r3, #1
 801133a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801133c:	e006      	b.n	801134c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 801133e:	2301      	movs	r3, #1
 8011340:	73fb      	strb	r3, [r7, #15]
      break;
 8011342:	e004      	b.n	801134e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8011344:	bf00      	nop
 8011346:	e002      	b.n	801134e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8011348:	bf00      	nop
 801134a:	e000      	b.n	801134e <RCCEx_PLLSAI2_Config+0xae>
      break;
 801134c:	bf00      	nop
    }

    if(status == HAL_OK)
 801134e:	7bfb      	ldrb	r3, [r7, #15]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d10d      	bne.n	8011370 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8011354:	4b3e      	ldr	r3, [pc, #248]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6819      	ldr	r1, [r3, #0]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	3b01      	subs	r3, #1
 8011366:	011b      	lsls	r3, r3, #4
 8011368:	430b      	orrs	r3, r1
 801136a:	4939      	ldr	r1, [pc, #228]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 801136c:	4313      	orrs	r3, r2
 801136e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8011370:	7bfb      	ldrb	r3, [r7, #15]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d166      	bne.n	8011444 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8011376:	4b36      	ldr	r3, [pc, #216]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	4a35      	ldr	r2, [pc, #212]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 801137c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011382:	f7fc fe01 	bl	800df88 <HAL_GetTick>
 8011386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011388:	e009      	b.n	801139e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801138a:	f7fc fdfd 	bl	800df88 <HAL_GetTick>
 801138e:	4602      	mov	r2, r0
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	2b02      	cmp	r3, #2
 8011396:	d902      	bls.n	801139e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8011398:	2303      	movs	r3, #3
 801139a:	73fb      	strb	r3, [r7, #15]
        break;
 801139c:	e005      	b.n	80113aa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801139e:	4b2c      	ldr	r3, [pc, #176]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d1ef      	bne.n	801138a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80113aa:	7bfb      	ldrb	r3, [r7, #15]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d149      	bne.n	8011444 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d110      	bne.n	80113d8 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80113b6:	4b26      	ldr	r3, [pc, #152]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80113b8:	695b      	ldr	r3, [r3, #20]
 80113ba:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80113be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	6892      	ldr	r2, [r2, #8]
 80113c6:	0211      	lsls	r1, r2, #8
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	68d2      	ldr	r2, [r2, #12]
 80113cc:	06d2      	lsls	r2, r2, #27
 80113ce:	430a      	orrs	r2, r1
 80113d0:	491f      	ldr	r1, [pc, #124]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80113d2:	4313      	orrs	r3, r2
 80113d4:	614b      	str	r3, [r1, #20]
 80113d6:	e011      	b.n	80113fc <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80113d8:	4b1d      	ldr	r3, [pc, #116]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80113da:	695b      	ldr	r3, [r3, #20]
 80113dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80113e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	6892      	ldr	r2, [r2, #8]
 80113e8:	0211      	lsls	r1, r2, #8
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	6912      	ldr	r2, [r2, #16]
 80113ee:	0852      	lsrs	r2, r2, #1
 80113f0:	3a01      	subs	r2, #1
 80113f2:	0652      	lsls	r2, r2, #25
 80113f4:	430a      	orrs	r2, r1
 80113f6:	4916      	ldr	r1, [pc, #88]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80113f8:	4313      	orrs	r3, r2
 80113fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80113fc:	4b14      	ldr	r3, [pc, #80]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	4a13      	ldr	r2, [pc, #76]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 8011402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011406:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011408:	f7fc fdbe 	bl	800df88 <HAL_GetTick>
 801140c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801140e:	e009      	b.n	8011424 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8011410:	f7fc fdba 	bl	800df88 <HAL_GetTick>
 8011414:	4602      	mov	r2, r0
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	2b02      	cmp	r3, #2
 801141c:	d902      	bls.n	8011424 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 801141e:	2303      	movs	r3, #3
 8011420:	73fb      	strb	r3, [r7, #15]
          break;
 8011422:	e005      	b.n	8011430 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011424:	4b0a      	ldr	r3, [pc, #40]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801142c:	2b00      	cmp	r3, #0
 801142e:	d0ef      	beq.n	8011410 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8011430:	7bfb      	ldrb	r3, [r7, #15]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8011436:	4b06      	ldr	r3, [pc, #24]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 8011438:	695a      	ldr	r2, [r3, #20]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	695b      	ldr	r3, [r3, #20]
 801143e:	4904      	ldr	r1, [pc, #16]	; (8011450 <RCCEx_PLLSAI2_Config+0x1b0>)
 8011440:	4313      	orrs	r3, r2
 8011442:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8011444:	7bfb      	ldrb	r3, [r7, #15]
}
 8011446:	4618      	mov	r0, r3
 8011448:	3710      	adds	r7, #16
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	40021000 	.word	0x40021000

08011454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d101      	bne.n	8011466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011462:	2301      	movs	r3, #1
 8011464:	e040      	b.n	80114e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801146a:	2b00      	cmp	r3, #0
 801146c:	d106      	bne.n	801147c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2200      	movs	r2, #0
 8011472:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f007 fed2 	bl	8019220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2224      	movs	r2, #36	; 0x24
 8011480:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f022 0201 	bic.w	r2, r2, #1
 8011490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f000 f82c 	bl	80114f0 <UART_SetConfig>
 8011498:	4603      	mov	r3, r0
 801149a:	2b01      	cmp	r3, #1
 801149c:	d101      	bne.n	80114a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801149e:	2301      	movs	r3, #1
 80114a0:	e022      	b.n	80114e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d002      	beq.n	80114b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f000 fb68 	bl	8011b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	685a      	ldr	r2, [r3, #4]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80114be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	689a      	ldr	r2, [r3, #8]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80114ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f042 0201 	orr.w	r2, r2, #1
 80114de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f000 fbef 	bl	8011cc4 <UART_CheckIdleState>
 80114e6:	4603      	mov	r3, r0
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80114f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80114f4:	b088      	sub	sp, #32
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80114fa:	2300      	movs	r3, #0
 80114fc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80114fe:	2300      	movs	r3, #0
 8011500:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8011502:	2300      	movs	r3, #0
 8011504:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	689a      	ldr	r2, [r3, #8]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	691b      	ldr	r3, [r3, #16]
 801150e:	431a      	orrs	r2, r3
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	695b      	ldr	r3, [r3, #20]
 8011514:	431a      	orrs	r2, r3
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	69db      	ldr	r3, [r3, #28]
 801151a:	4313      	orrs	r3, r2
 801151c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	4bac      	ldr	r3, [pc, #688]	; (80117d8 <UART_SetConfig+0x2e8>)
 8011526:	4013      	ands	r3, r2
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	6812      	ldr	r2, [r2, #0]
 801152c:	69f9      	ldr	r1, [r7, #28]
 801152e:	430b      	orrs	r3, r1
 8011530:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	68da      	ldr	r2, [r3, #12]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	430a      	orrs	r2, r1
 8011546:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	699b      	ldr	r3, [r3, #24]
 801154c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	4aa2      	ldr	r2, [pc, #648]	; (80117dc <UART_SetConfig+0x2ec>)
 8011554:	4293      	cmp	r3, r2
 8011556:	d004      	beq.n	8011562 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6a1b      	ldr	r3, [r3, #32]
 801155c:	69fa      	ldr	r2, [r7, #28]
 801155e:	4313      	orrs	r3, r2
 8011560:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	69fa      	ldr	r2, [r7, #28]
 8011572:	430a      	orrs	r2, r1
 8011574:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	4a99      	ldr	r2, [pc, #612]	; (80117e0 <UART_SetConfig+0x2f0>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d121      	bne.n	80115c4 <UART_SetConfig+0xd4>
 8011580:	4b98      	ldr	r3, [pc, #608]	; (80117e4 <UART_SetConfig+0x2f4>)
 8011582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011586:	f003 0303 	and.w	r3, r3, #3
 801158a:	2b03      	cmp	r3, #3
 801158c:	d816      	bhi.n	80115bc <UART_SetConfig+0xcc>
 801158e:	a201      	add	r2, pc, #4	; (adr r2, 8011594 <UART_SetConfig+0xa4>)
 8011590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011594:	080115a5 	.word	0x080115a5
 8011598:	080115b1 	.word	0x080115b1
 801159c:	080115ab 	.word	0x080115ab
 80115a0:	080115b7 	.word	0x080115b7
 80115a4:	2301      	movs	r3, #1
 80115a6:	76fb      	strb	r3, [r7, #27]
 80115a8:	e0e8      	b.n	801177c <UART_SetConfig+0x28c>
 80115aa:	2302      	movs	r3, #2
 80115ac:	76fb      	strb	r3, [r7, #27]
 80115ae:	e0e5      	b.n	801177c <UART_SetConfig+0x28c>
 80115b0:	2304      	movs	r3, #4
 80115b2:	76fb      	strb	r3, [r7, #27]
 80115b4:	e0e2      	b.n	801177c <UART_SetConfig+0x28c>
 80115b6:	2308      	movs	r3, #8
 80115b8:	76fb      	strb	r3, [r7, #27]
 80115ba:	e0df      	b.n	801177c <UART_SetConfig+0x28c>
 80115bc:	2310      	movs	r3, #16
 80115be:	76fb      	strb	r3, [r7, #27]
 80115c0:	bf00      	nop
 80115c2:	e0db      	b.n	801177c <UART_SetConfig+0x28c>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4a87      	ldr	r2, [pc, #540]	; (80117e8 <UART_SetConfig+0x2f8>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d134      	bne.n	8011638 <UART_SetConfig+0x148>
 80115ce:	4b85      	ldr	r3, [pc, #532]	; (80117e4 <UART_SetConfig+0x2f4>)
 80115d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115d4:	f003 030c 	and.w	r3, r3, #12
 80115d8:	2b0c      	cmp	r3, #12
 80115da:	d829      	bhi.n	8011630 <UART_SetConfig+0x140>
 80115dc:	a201      	add	r2, pc, #4	; (adr r2, 80115e4 <UART_SetConfig+0xf4>)
 80115de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e2:	bf00      	nop
 80115e4:	08011619 	.word	0x08011619
 80115e8:	08011631 	.word	0x08011631
 80115ec:	08011631 	.word	0x08011631
 80115f0:	08011631 	.word	0x08011631
 80115f4:	08011625 	.word	0x08011625
 80115f8:	08011631 	.word	0x08011631
 80115fc:	08011631 	.word	0x08011631
 8011600:	08011631 	.word	0x08011631
 8011604:	0801161f 	.word	0x0801161f
 8011608:	08011631 	.word	0x08011631
 801160c:	08011631 	.word	0x08011631
 8011610:	08011631 	.word	0x08011631
 8011614:	0801162b 	.word	0x0801162b
 8011618:	2300      	movs	r3, #0
 801161a:	76fb      	strb	r3, [r7, #27]
 801161c:	e0ae      	b.n	801177c <UART_SetConfig+0x28c>
 801161e:	2302      	movs	r3, #2
 8011620:	76fb      	strb	r3, [r7, #27]
 8011622:	e0ab      	b.n	801177c <UART_SetConfig+0x28c>
 8011624:	2304      	movs	r3, #4
 8011626:	76fb      	strb	r3, [r7, #27]
 8011628:	e0a8      	b.n	801177c <UART_SetConfig+0x28c>
 801162a:	2308      	movs	r3, #8
 801162c:	76fb      	strb	r3, [r7, #27]
 801162e:	e0a5      	b.n	801177c <UART_SetConfig+0x28c>
 8011630:	2310      	movs	r3, #16
 8011632:	76fb      	strb	r3, [r7, #27]
 8011634:	bf00      	nop
 8011636:	e0a1      	b.n	801177c <UART_SetConfig+0x28c>
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	4a6b      	ldr	r2, [pc, #428]	; (80117ec <UART_SetConfig+0x2fc>)
 801163e:	4293      	cmp	r3, r2
 8011640:	d120      	bne.n	8011684 <UART_SetConfig+0x194>
 8011642:	4b68      	ldr	r3, [pc, #416]	; (80117e4 <UART_SetConfig+0x2f4>)
 8011644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011648:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801164c:	2b10      	cmp	r3, #16
 801164e:	d00f      	beq.n	8011670 <UART_SetConfig+0x180>
 8011650:	2b10      	cmp	r3, #16
 8011652:	d802      	bhi.n	801165a <UART_SetConfig+0x16a>
 8011654:	2b00      	cmp	r3, #0
 8011656:	d005      	beq.n	8011664 <UART_SetConfig+0x174>
 8011658:	e010      	b.n	801167c <UART_SetConfig+0x18c>
 801165a:	2b20      	cmp	r3, #32
 801165c:	d005      	beq.n	801166a <UART_SetConfig+0x17a>
 801165e:	2b30      	cmp	r3, #48	; 0x30
 8011660:	d009      	beq.n	8011676 <UART_SetConfig+0x186>
 8011662:	e00b      	b.n	801167c <UART_SetConfig+0x18c>
 8011664:	2300      	movs	r3, #0
 8011666:	76fb      	strb	r3, [r7, #27]
 8011668:	e088      	b.n	801177c <UART_SetConfig+0x28c>
 801166a:	2302      	movs	r3, #2
 801166c:	76fb      	strb	r3, [r7, #27]
 801166e:	e085      	b.n	801177c <UART_SetConfig+0x28c>
 8011670:	2304      	movs	r3, #4
 8011672:	76fb      	strb	r3, [r7, #27]
 8011674:	e082      	b.n	801177c <UART_SetConfig+0x28c>
 8011676:	2308      	movs	r3, #8
 8011678:	76fb      	strb	r3, [r7, #27]
 801167a:	e07f      	b.n	801177c <UART_SetConfig+0x28c>
 801167c:	2310      	movs	r3, #16
 801167e:	76fb      	strb	r3, [r7, #27]
 8011680:	bf00      	nop
 8011682:	e07b      	b.n	801177c <UART_SetConfig+0x28c>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4a59      	ldr	r2, [pc, #356]	; (80117f0 <UART_SetConfig+0x300>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d120      	bne.n	80116d0 <UART_SetConfig+0x1e0>
 801168e:	4b55      	ldr	r3, [pc, #340]	; (80117e4 <UART_SetConfig+0x2f4>)
 8011690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011694:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011698:	2b40      	cmp	r3, #64	; 0x40
 801169a:	d00f      	beq.n	80116bc <UART_SetConfig+0x1cc>
 801169c:	2b40      	cmp	r3, #64	; 0x40
 801169e:	d802      	bhi.n	80116a6 <UART_SetConfig+0x1b6>
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d005      	beq.n	80116b0 <UART_SetConfig+0x1c0>
 80116a4:	e010      	b.n	80116c8 <UART_SetConfig+0x1d8>
 80116a6:	2b80      	cmp	r3, #128	; 0x80
 80116a8:	d005      	beq.n	80116b6 <UART_SetConfig+0x1c6>
 80116aa:	2bc0      	cmp	r3, #192	; 0xc0
 80116ac:	d009      	beq.n	80116c2 <UART_SetConfig+0x1d2>
 80116ae:	e00b      	b.n	80116c8 <UART_SetConfig+0x1d8>
 80116b0:	2300      	movs	r3, #0
 80116b2:	76fb      	strb	r3, [r7, #27]
 80116b4:	e062      	b.n	801177c <UART_SetConfig+0x28c>
 80116b6:	2302      	movs	r3, #2
 80116b8:	76fb      	strb	r3, [r7, #27]
 80116ba:	e05f      	b.n	801177c <UART_SetConfig+0x28c>
 80116bc:	2304      	movs	r3, #4
 80116be:	76fb      	strb	r3, [r7, #27]
 80116c0:	e05c      	b.n	801177c <UART_SetConfig+0x28c>
 80116c2:	2308      	movs	r3, #8
 80116c4:	76fb      	strb	r3, [r7, #27]
 80116c6:	e059      	b.n	801177c <UART_SetConfig+0x28c>
 80116c8:	2310      	movs	r3, #16
 80116ca:	76fb      	strb	r3, [r7, #27]
 80116cc:	bf00      	nop
 80116ce:	e055      	b.n	801177c <UART_SetConfig+0x28c>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	4a47      	ldr	r2, [pc, #284]	; (80117f4 <UART_SetConfig+0x304>)
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d124      	bne.n	8011724 <UART_SetConfig+0x234>
 80116da:	4b42      	ldr	r3, [pc, #264]	; (80117e4 <UART_SetConfig+0x2f4>)
 80116dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80116e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116e8:	d012      	beq.n	8011710 <UART_SetConfig+0x220>
 80116ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116ee:	d802      	bhi.n	80116f6 <UART_SetConfig+0x206>
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d007      	beq.n	8011704 <UART_SetConfig+0x214>
 80116f4:	e012      	b.n	801171c <UART_SetConfig+0x22c>
 80116f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116fa:	d006      	beq.n	801170a <UART_SetConfig+0x21a>
 80116fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011700:	d009      	beq.n	8011716 <UART_SetConfig+0x226>
 8011702:	e00b      	b.n	801171c <UART_SetConfig+0x22c>
 8011704:	2300      	movs	r3, #0
 8011706:	76fb      	strb	r3, [r7, #27]
 8011708:	e038      	b.n	801177c <UART_SetConfig+0x28c>
 801170a:	2302      	movs	r3, #2
 801170c:	76fb      	strb	r3, [r7, #27]
 801170e:	e035      	b.n	801177c <UART_SetConfig+0x28c>
 8011710:	2304      	movs	r3, #4
 8011712:	76fb      	strb	r3, [r7, #27]
 8011714:	e032      	b.n	801177c <UART_SetConfig+0x28c>
 8011716:	2308      	movs	r3, #8
 8011718:	76fb      	strb	r3, [r7, #27]
 801171a:	e02f      	b.n	801177c <UART_SetConfig+0x28c>
 801171c:	2310      	movs	r3, #16
 801171e:	76fb      	strb	r3, [r7, #27]
 8011720:	bf00      	nop
 8011722:	e02b      	b.n	801177c <UART_SetConfig+0x28c>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4a2c      	ldr	r2, [pc, #176]	; (80117dc <UART_SetConfig+0x2ec>)
 801172a:	4293      	cmp	r3, r2
 801172c:	d124      	bne.n	8011778 <UART_SetConfig+0x288>
 801172e:	4b2d      	ldr	r3, [pc, #180]	; (80117e4 <UART_SetConfig+0x2f4>)
 8011730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011734:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801173c:	d012      	beq.n	8011764 <UART_SetConfig+0x274>
 801173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011742:	d802      	bhi.n	801174a <UART_SetConfig+0x25a>
 8011744:	2b00      	cmp	r3, #0
 8011746:	d007      	beq.n	8011758 <UART_SetConfig+0x268>
 8011748:	e012      	b.n	8011770 <UART_SetConfig+0x280>
 801174a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801174e:	d006      	beq.n	801175e <UART_SetConfig+0x26e>
 8011750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011754:	d009      	beq.n	801176a <UART_SetConfig+0x27a>
 8011756:	e00b      	b.n	8011770 <UART_SetConfig+0x280>
 8011758:	2300      	movs	r3, #0
 801175a:	76fb      	strb	r3, [r7, #27]
 801175c:	e00e      	b.n	801177c <UART_SetConfig+0x28c>
 801175e:	2302      	movs	r3, #2
 8011760:	76fb      	strb	r3, [r7, #27]
 8011762:	e00b      	b.n	801177c <UART_SetConfig+0x28c>
 8011764:	2304      	movs	r3, #4
 8011766:	76fb      	strb	r3, [r7, #27]
 8011768:	e008      	b.n	801177c <UART_SetConfig+0x28c>
 801176a:	2308      	movs	r3, #8
 801176c:	76fb      	strb	r3, [r7, #27]
 801176e:	e005      	b.n	801177c <UART_SetConfig+0x28c>
 8011770:	2310      	movs	r3, #16
 8011772:	76fb      	strb	r3, [r7, #27]
 8011774:	bf00      	nop
 8011776:	e001      	b.n	801177c <UART_SetConfig+0x28c>
 8011778:	2310      	movs	r3, #16
 801177a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4a16      	ldr	r2, [pc, #88]	; (80117dc <UART_SetConfig+0x2ec>)
 8011782:	4293      	cmp	r3, r2
 8011784:	f040 80fa 	bne.w	801197c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011788:	7efb      	ldrb	r3, [r7, #27]
 801178a:	2b08      	cmp	r3, #8
 801178c:	d836      	bhi.n	80117fc <UART_SetConfig+0x30c>
 801178e:	a201      	add	r2, pc, #4	; (adr r2, 8011794 <UART_SetConfig+0x2a4>)
 8011790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011794:	080117b9 	.word	0x080117b9
 8011798:	080117fd 	.word	0x080117fd
 801179c:	080117c1 	.word	0x080117c1
 80117a0:	080117fd 	.word	0x080117fd
 80117a4:	080117c7 	.word	0x080117c7
 80117a8:	080117fd 	.word	0x080117fd
 80117ac:	080117fd 	.word	0x080117fd
 80117b0:	080117fd 	.word	0x080117fd
 80117b4:	080117cf 	.word	0x080117cf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80117b8:	f7ff f8ee 	bl	8010998 <HAL_RCC_GetPCLK1Freq>
 80117bc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80117be:	e020      	b.n	8011802 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80117c0:	4b0d      	ldr	r3, [pc, #52]	; (80117f8 <UART_SetConfig+0x308>)
 80117c2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80117c4:	e01d      	b.n	8011802 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80117c6:	f7ff f851 	bl	801086c <HAL_RCC_GetSysClockFreq>
 80117ca:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80117cc:	e019      	b.n	8011802 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80117ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117d2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80117d4:	e015      	b.n	8011802 <UART_SetConfig+0x312>
 80117d6:	bf00      	nop
 80117d8:	efff69f3 	.word	0xefff69f3
 80117dc:	40008000 	.word	0x40008000
 80117e0:	40013800 	.word	0x40013800
 80117e4:	40021000 	.word	0x40021000
 80117e8:	40004400 	.word	0x40004400
 80117ec:	40004800 	.word	0x40004800
 80117f0:	40004c00 	.word	0x40004c00
 80117f4:	40005000 	.word	0x40005000
 80117f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80117fc:	2301      	movs	r3, #1
 80117fe:	74fb      	strb	r3, [r7, #19]
        break;
 8011800:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2b00      	cmp	r3, #0
 8011806:	f000 81ac 	beq.w	8011b62 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	685a      	ldr	r2, [r3, #4]
 801180e:	4613      	mov	r3, r2
 8011810:	005b      	lsls	r3, r3, #1
 8011812:	4413      	add	r3, r2
 8011814:	68fa      	ldr	r2, [r7, #12]
 8011816:	429a      	cmp	r2, r3
 8011818:	d305      	bcc.n	8011826 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	429a      	cmp	r2, r3
 8011824:	d902      	bls.n	801182c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8011826:	2301      	movs	r3, #1
 8011828:	74fb      	strb	r3, [r7, #19]
 801182a:	e19a      	b.n	8011b62 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 801182c:	7efb      	ldrb	r3, [r7, #27]
 801182e:	2b08      	cmp	r3, #8
 8011830:	f200 8091 	bhi.w	8011956 <UART_SetConfig+0x466>
 8011834:	a201      	add	r2, pc, #4	; (adr r2, 801183c <UART_SetConfig+0x34c>)
 8011836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801183a:	bf00      	nop
 801183c:	08011861 	.word	0x08011861
 8011840:	08011957 	.word	0x08011957
 8011844:	080118ad 	.word	0x080118ad
 8011848:	08011957 	.word	0x08011957
 801184c:	080118e1 	.word	0x080118e1
 8011850:	08011957 	.word	0x08011957
 8011854:	08011957 	.word	0x08011957
 8011858:	08011957 	.word	0x08011957
 801185c:	0801192d 	.word	0x0801192d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8011860:	f7ff f89a 	bl	8010998 <HAL_RCC_GetPCLK1Freq>
 8011864:	4603      	mov	r3, r0
 8011866:	4619      	mov	r1, r3
 8011868:	f04f 0200 	mov.w	r2, #0
 801186c:	f04f 0300 	mov.w	r3, #0
 8011870:	f04f 0400 	mov.w	r4, #0
 8011874:	0214      	lsls	r4, r2, #8
 8011876:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 801187a:	020b      	lsls	r3, r1, #8
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	6852      	ldr	r2, [r2, #4]
 8011880:	0852      	lsrs	r2, r2, #1
 8011882:	4611      	mov	r1, r2
 8011884:	f04f 0200 	mov.w	r2, #0
 8011888:	eb13 0b01 	adds.w	fp, r3, r1
 801188c:	eb44 0c02 	adc.w	ip, r4, r2
 8011890:	4658      	mov	r0, fp
 8011892:	4661      	mov	r1, ip
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	f04f 0400 	mov.w	r4, #0
 801189c:	461a      	mov	r2, r3
 801189e:	4623      	mov	r3, r4
 80118a0:	f7ee fcfe 	bl	80002a0 <__aeabi_uldivmod>
 80118a4:	4603      	mov	r3, r0
 80118a6:	460c      	mov	r4, r1
 80118a8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80118aa:	e057      	b.n	801195c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	085b      	lsrs	r3, r3, #1
 80118b2:	f04f 0400 	mov.w	r4, #0
 80118b6:	49b1      	ldr	r1, [pc, #708]	; (8011b7c <UART_SetConfig+0x68c>)
 80118b8:	f04f 0200 	mov.w	r2, #0
 80118bc:	eb13 0b01 	adds.w	fp, r3, r1
 80118c0:	eb44 0c02 	adc.w	ip, r4, r2
 80118c4:	4658      	mov	r0, fp
 80118c6:	4661      	mov	r1, ip
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	f04f 0400 	mov.w	r4, #0
 80118d0:	461a      	mov	r2, r3
 80118d2:	4623      	mov	r3, r4
 80118d4:	f7ee fce4 	bl	80002a0 <__aeabi_uldivmod>
 80118d8:	4603      	mov	r3, r0
 80118da:	460c      	mov	r4, r1
 80118dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80118de:	e03d      	b.n	801195c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80118e0:	f7fe ffc4 	bl	801086c <HAL_RCC_GetSysClockFreq>
 80118e4:	4603      	mov	r3, r0
 80118e6:	4619      	mov	r1, r3
 80118e8:	f04f 0200 	mov.w	r2, #0
 80118ec:	f04f 0300 	mov.w	r3, #0
 80118f0:	f04f 0400 	mov.w	r4, #0
 80118f4:	0214      	lsls	r4, r2, #8
 80118f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80118fa:	020b      	lsls	r3, r1, #8
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	6852      	ldr	r2, [r2, #4]
 8011900:	0852      	lsrs	r2, r2, #1
 8011902:	4611      	mov	r1, r2
 8011904:	f04f 0200 	mov.w	r2, #0
 8011908:	eb13 0b01 	adds.w	fp, r3, r1
 801190c:	eb44 0c02 	adc.w	ip, r4, r2
 8011910:	4658      	mov	r0, fp
 8011912:	4661      	mov	r1, ip
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	f04f 0400 	mov.w	r4, #0
 801191c:	461a      	mov	r2, r3
 801191e:	4623      	mov	r3, r4
 8011920:	f7ee fcbe 	bl	80002a0 <__aeabi_uldivmod>
 8011924:	4603      	mov	r3, r0
 8011926:	460c      	mov	r4, r1
 8011928:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 801192a:	e017      	b.n	801195c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	085b      	lsrs	r3, r3, #1
 8011932:	f04f 0400 	mov.w	r4, #0
 8011936:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 801193a:	f144 0100 	adc.w	r1, r4, #0
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	f04f 0400 	mov.w	r4, #0
 8011946:	461a      	mov	r2, r3
 8011948:	4623      	mov	r3, r4
 801194a:	f7ee fca9 	bl	80002a0 <__aeabi_uldivmod>
 801194e:	4603      	mov	r3, r0
 8011950:	460c      	mov	r4, r1
 8011952:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8011954:	e002      	b.n	801195c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8011956:	2301      	movs	r3, #1
 8011958:	74fb      	strb	r3, [r7, #19]
            break;
 801195a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011962:	d308      	bcc.n	8011976 <UART_SetConfig+0x486>
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801196a:	d204      	bcs.n	8011976 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	697a      	ldr	r2, [r7, #20]
 8011972:	60da      	str	r2, [r3, #12]
 8011974:	e0f5      	b.n	8011b62 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8011976:	2301      	movs	r3, #1
 8011978:	74fb      	strb	r3, [r7, #19]
 801197a:	e0f2      	b.n	8011b62 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	69db      	ldr	r3, [r3, #28]
 8011980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011984:	d17f      	bne.n	8011a86 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8011986:	7efb      	ldrb	r3, [r7, #27]
 8011988:	2b08      	cmp	r3, #8
 801198a:	d85c      	bhi.n	8011a46 <UART_SetConfig+0x556>
 801198c:	a201      	add	r2, pc, #4	; (adr r2, 8011994 <UART_SetConfig+0x4a4>)
 801198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011992:	bf00      	nop
 8011994:	080119b9 	.word	0x080119b9
 8011998:	080119d7 	.word	0x080119d7
 801199c:	080119f5 	.word	0x080119f5
 80119a0:	08011a47 	.word	0x08011a47
 80119a4:	08011a11 	.word	0x08011a11
 80119a8:	08011a47 	.word	0x08011a47
 80119ac:	08011a47 	.word	0x08011a47
 80119b0:	08011a47 	.word	0x08011a47
 80119b4:	08011a2f 	.word	0x08011a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80119b8:	f7fe ffee 	bl	8010998 <HAL_RCC_GetPCLK1Freq>
 80119bc:	4603      	mov	r3, r0
 80119be:	005a      	lsls	r2, r3, #1
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	085b      	lsrs	r3, r3, #1
 80119c6:	441a      	add	r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80119d4:	e03a      	b.n	8011a4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80119d6:	f7fe fff5 	bl	80109c4 <HAL_RCC_GetPCLK2Freq>
 80119da:	4603      	mov	r3, r0
 80119dc:	005a      	lsls	r2, r3, #1
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	085b      	lsrs	r3, r3, #1
 80119e4:	441a      	add	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80119f2:	e02b      	b.n	8011a4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	085b      	lsrs	r3, r3, #1
 80119fa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80119fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	6852      	ldr	r2, [r2, #4]
 8011a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8011a0e:	e01d      	b.n	8011a4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8011a10:	f7fe ff2c 	bl	801086c <HAL_RCC_GetSysClockFreq>
 8011a14:	4603      	mov	r3, r0
 8011a16:	005a      	lsls	r2, r3, #1
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	085b      	lsrs	r3, r3, #1
 8011a1e:	441a      	add	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8011a2c:	e00e      	b.n	8011a4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	085b      	lsrs	r3, r3, #1
 8011a34:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8011a44:	e002      	b.n	8011a4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8011a46:	2301      	movs	r3, #1
 8011a48:	74fb      	strb	r3, [r7, #19]
        break;
 8011a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	2b0f      	cmp	r3, #15
 8011a50:	d916      	bls.n	8011a80 <UART_SetConfig+0x590>
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a58:	d212      	bcs.n	8011a80 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	f023 030f 	bic.w	r3, r3, #15
 8011a62:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	085b      	lsrs	r3, r3, #1
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	f003 0307 	and.w	r3, r3, #7
 8011a6e:	b29a      	uxth	r2, r3
 8011a70:	897b      	ldrh	r3, [r7, #10]
 8011a72:	4313      	orrs	r3, r2
 8011a74:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	897a      	ldrh	r2, [r7, #10]
 8011a7c:	60da      	str	r2, [r3, #12]
 8011a7e:	e070      	b.n	8011b62 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8011a80:	2301      	movs	r3, #1
 8011a82:	74fb      	strb	r3, [r7, #19]
 8011a84:	e06d      	b.n	8011b62 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8011a86:	7efb      	ldrb	r3, [r7, #27]
 8011a88:	2b08      	cmp	r3, #8
 8011a8a:	d859      	bhi.n	8011b40 <UART_SetConfig+0x650>
 8011a8c:	a201      	add	r2, pc, #4	; (adr r2, 8011a94 <UART_SetConfig+0x5a4>)
 8011a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a92:	bf00      	nop
 8011a94:	08011ab9 	.word	0x08011ab9
 8011a98:	08011ad5 	.word	0x08011ad5
 8011a9c:	08011af1 	.word	0x08011af1
 8011aa0:	08011b41 	.word	0x08011b41
 8011aa4:	08011b0d 	.word	0x08011b0d
 8011aa8:	08011b41 	.word	0x08011b41
 8011aac:	08011b41 	.word	0x08011b41
 8011ab0:	08011b41 	.word	0x08011b41
 8011ab4:	08011b29 	.word	0x08011b29
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8011ab8:	f7fe ff6e 	bl	8010998 <HAL_RCC_GetPCLK1Freq>
 8011abc:	4602      	mov	r2, r0
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	085b      	lsrs	r3, r3, #1
 8011ac4:	441a      	add	r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8011ad2:	e038      	b.n	8011b46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8011ad4:	f7fe ff76 	bl	80109c4 <HAL_RCC_GetPCLK2Freq>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	085b      	lsrs	r3, r3, #1
 8011ae0:	441a      	add	r2, r3
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8011aee:	e02a      	b.n	8011b46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	085b      	lsrs	r3, r3, #1
 8011af6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8011afa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	6852      	ldr	r2, [r2, #4]
 8011b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8011b0a:	e01c      	b.n	8011b46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8011b0c:	f7fe feae 	bl	801086c <HAL_RCC_GetSysClockFreq>
 8011b10:	4602      	mov	r2, r0
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	085b      	lsrs	r3, r3, #1
 8011b18:	441a      	add	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8011b26:	e00e      	b.n	8011b46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	085b      	lsrs	r3, r3, #1
 8011b2e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8011b3e:	e002      	b.n	8011b46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8011b40:	2301      	movs	r3, #1
 8011b42:	74fb      	strb	r3, [r7, #19]
        break;
 8011b44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	2b0f      	cmp	r3, #15
 8011b4a:	d908      	bls.n	8011b5e <UART_SetConfig+0x66e>
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b52:	d204      	bcs.n	8011b5e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	697a      	ldr	r2, [r7, #20]
 8011b5a:	60da      	str	r2, [r3, #12]
 8011b5c:	e001      	b.n	8011b62 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8011b5e:	2301      	movs	r3, #1
 8011b60:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2200      	movs	r2, #0
 8011b66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8011b6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3720      	adds	r7, #32
 8011b74:	46bd      	mov	sp, r7
 8011b76:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8011b7a:	bf00      	nop
 8011b7c:	f4240000 	.word	0xf4240000

08011b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b083      	sub	sp, #12
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b8c:	f003 0301 	and.w	r3, r3, #1
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d00a      	beq.n	8011baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	430a      	orrs	r2, r1
 8011ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bae:	f003 0302 	and.w	r3, r3, #2
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d00a      	beq.n	8011bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	685b      	ldr	r3, [r3, #4]
 8011bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	430a      	orrs	r2, r1
 8011bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd0:	f003 0304 	and.w	r3, r3, #4
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d00a      	beq.n	8011bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	430a      	orrs	r2, r1
 8011bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf2:	f003 0308 	and.w	r3, r3, #8
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d00a      	beq.n	8011c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	430a      	orrs	r2, r1
 8011c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c14:	f003 0310 	and.w	r3, r3, #16
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d00a      	beq.n	8011c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	689b      	ldr	r3, [r3, #8]
 8011c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	430a      	orrs	r2, r1
 8011c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c36:	f003 0320 	and.w	r3, r3, #32
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d00a      	beq.n	8011c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	689b      	ldr	r3, [r3, #8]
 8011c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	430a      	orrs	r2, r1
 8011c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d01a      	beq.n	8011c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	430a      	orrs	r2, r1
 8011c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c7e:	d10a      	bne.n	8011c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	430a      	orrs	r2, r1
 8011c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d00a      	beq.n	8011cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	430a      	orrs	r2, r1
 8011cb6:	605a      	str	r2, [r3, #4]
  }
}
 8011cb8:	bf00      	nop
 8011cba:	370c      	adds	r7, #12
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b086      	sub	sp, #24
 8011cc8:	af02      	add	r7, sp, #8
 8011cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8011cd2:	f7fc f959 	bl	800df88 <HAL_GetTick>
 8011cd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	f003 0308 	and.w	r3, r3, #8
 8011ce2:	2b08      	cmp	r3, #8
 8011ce4:	d10e      	bne.n	8011d04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ce6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f000 f82a 	bl	8011d4e <UART_WaitOnFlagUntilTimeout>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d001      	beq.n	8011d04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d00:	2303      	movs	r3, #3
 8011d02:	e020      	b.n	8011d46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	f003 0304 	and.w	r3, r3, #4
 8011d0e:	2b04      	cmp	r3, #4
 8011d10:	d10e      	bne.n	8011d30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d16:	9300      	str	r3, [sp, #0]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 f814 	bl	8011d4e <UART_WaitOnFlagUntilTimeout>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d2c:	2303      	movs	r3, #3
 8011d2e:	e00a      	b.n	8011d46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2220      	movs	r2, #32
 8011d34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2220      	movs	r2, #32
 8011d3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8011d44:	2300      	movs	r3, #0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}

08011d4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b084      	sub	sp, #16
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	60f8      	str	r0, [r7, #12]
 8011d56:	60b9      	str	r1, [r7, #8]
 8011d58:	603b      	str	r3, [r7, #0]
 8011d5a:	4613      	mov	r3, r2
 8011d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d5e:	e02a      	b.n	8011db6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d60:	69bb      	ldr	r3, [r7, #24]
 8011d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d66:	d026      	beq.n	8011db6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d68:	f7fc f90e 	bl	800df88 <HAL_GetTick>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	69ba      	ldr	r2, [r7, #24]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d302      	bcc.n	8011d7e <UART_WaitOnFlagUntilTimeout+0x30>
 8011d78:	69bb      	ldr	r3, [r7, #24]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d11b      	bne.n	8011db6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011d8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	689a      	ldr	r2, [r3, #8]
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f022 0201 	bic.w	r2, r2, #1
 8011d9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	2220      	movs	r2, #32
 8011da2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2220      	movs	r2, #32
 8011da8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	2200      	movs	r2, #0
 8011dae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8011db2:	2303      	movs	r3, #3
 8011db4:	e00f      	b.n	8011dd6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	69da      	ldr	r2, [r3, #28]
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	68ba      	ldr	r2, [r7, #8]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	bf0c      	ite	eq
 8011dc6:	2301      	moveq	r3, #1
 8011dc8:	2300      	movne	r3, #0
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	461a      	mov	r2, r3
 8011dce:	79fb      	ldrb	r3, [r7, #7]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d0c5      	beq.n	8011d60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011dd4:	2300      	movs	r3, #0
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3710      	adds	r7, #16
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}

08011dde <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011dde:	b084      	sub	sp, #16
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	f107 001c 	add.w	r0, r7, #28
 8011dec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d122      	bne.n	8011e3c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	68db      	ldr	r3, [r3, #12]
 8011e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d105      	bne.n	8011e30 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 f937 	bl	80120a4 <USB_CoreReset>
 8011e36:	4603      	mov	r3, r0
 8011e38:	73fb      	strb	r3, [r7, #15]
 8011e3a:	e01a      	b.n	8011e72 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f000 f92b 	bl	80120a4 <USB_CoreReset>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d106      	bne.n	8011e66 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	639a      	str	r2, [r3, #56]	; 0x38
 8011e64:	e005      	b.n	8011e72 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8011e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3710      	adds	r7, #16
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011e7e:	b004      	add	sp, #16
 8011e80:	4770      	bx	lr

08011e82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e82:	b480      	push	{r7}
 8011e84:	b083      	sub	sp, #12
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	689b      	ldr	r3, [r3, #8]
 8011e8e:	f043 0201 	orr.w	r2, r3, #1
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e96:	2300      	movs	r3, #0
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	689b      	ldr	r3, [r3, #8]
 8011eb0:	f023 0201 	bic.w	r2, r3, #1
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011eb8:	2300      	movs	r3, #0
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	370c      	adds	r7, #12
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr

08011ec6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b082      	sub	sp, #8
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
 8011ece:	460b      	mov	r3, r1
 8011ed0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011ede:	78fb      	ldrb	r3, [r7, #3]
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	d106      	bne.n	8011ef2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	60da      	str	r2, [r3, #12]
 8011ef0:	e00b      	b.n	8011f0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011ef2:	78fb      	ldrb	r3, [r7, #3]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d106      	bne.n	8011f06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	60da      	str	r2, [r3, #12]
 8011f04:	e001      	b.n	8011f0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011f06:	2301      	movs	r3, #1
 8011f08:	e003      	b.n	8011f12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011f0a:	2032      	movs	r0, #50	; 0x32
 8011f0c:	f7fc f848 	bl	800dfa0 <HAL_Delay>

  return HAL_OK;
 8011f10:	2300      	movs	r3, #0
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
	...

08011f1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b085      	sub	sp, #20
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011f26:	2300      	movs	r3, #0
 8011f28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	019b      	lsls	r3, r3, #6
 8011f2e:	f043 0220 	orr.w	r2, r3, #32
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	3301      	adds	r3, #1
 8011f3a:	60fb      	str	r3, [r7, #12]
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	4a09      	ldr	r2, [pc, #36]	; (8011f64 <USB_FlushTxFifo+0x48>)
 8011f40:	4293      	cmp	r3, r2
 8011f42:	d901      	bls.n	8011f48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011f44:	2303      	movs	r3, #3
 8011f46:	e006      	b.n	8011f56 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	691b      	ldr	r3, [r3, #16]
 8011f4c:	f003 0320 	and.w	r3, r3, #32
 8011f50:	2b20      	cmp	r3, #32
 8011f52:	d0f0      	beq.n	8011f36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011f54:	2300      	movs	r3, #0
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3714      	adds	r7, #20
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop
 8011f64:	00030d40 	.word	0x00030d40

08011f68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b085      	sub	sp, #20
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011f70:	2300      	movs	r3, #0
 8011f72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2210      	movs	r2, #16
 8011f78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	60fb      	str	r3, [r7, #12]
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	4a09      	ldr	r2, [pc, #36]	; (8011fa8 <USB_FlushRxFifo+0x40>)
 8011f84:	4293      	cmp	r3, r2
 8011f86:	d901      	bls.n	8011f8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011f88:	2303      	movs	r3, #3
 8011f8a:	e006      	b.n	8011f9a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	691b      	ldr	r3, [r3, #16]
 8011f90:	f003 0310 	and.w	r3, r3, #16
 8011f94:	2b10      	cmp	r3, #16
 8011f96:	d0f0      	beq.n	8011f7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011f98:	2300      	movs	r3, #0
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3714      	adds	r7, #20
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop
 8011fa8:	00030d40 	.word	0x00030d40

08011fac <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8011fac:	b480      	push	{r7}
 8011fae:	b089      	sub	sp, #36	; 0x24
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	60f8      	str	r0, [r7, #12]
 8011fb4:	60b9      	str	r1, [r7, #8]
 8011fb6:	4611      	mov	r1, r2
 8011fb8:	461a      	mov	r2, r3
 8011fba:	460b      	mov	r3, r1
 8011fbc:	71fb      	strb	r3, [r7, #7]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8011fca:	88bb      	ldrh	r3, [r7, #4]
 8011fcc:	3303      	adds	r3, #3
 8011fce:	089b      	lsrs	r3, r3, #2
 8011fd0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	61bb      	str	r3, [r7, #24]
 8011fd6:	e00f      	b.n	8011ff8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011fd8:	79fb      	ldrb	r3, [r7, #7]
 8011fda:	031a      	lsls	r2, r3, #12
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	4413      	add	r3, r2
 8011fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	69fb      	ldr	r3, [r7, #28]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	6013      	str	r3, [r2, #0]
    pSrc++;
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	3304      	adds	r3, #4
 8011ff0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	61bb      	str	r3, [r7, #24]
 8011ff8:	69ba      	ldr	r2, [r7, #24]
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d3eb      	bcc.n	8011fd8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8012000:	2300      	movs	r3, #0
}
 8012002:	4618      	mov	r0, r3
 8012004:	3724      	adds	r7, #36	; 0x24
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr

0801200e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801200e:	b480      	push	{r7}
 8012010:	b089      	sub	sp, #36	; 0x24
 8012012:	af00      	add	r7, sp, #0
 8012014:	60f8      	str	r0, [r7, #12]
 8012016:	60b9      	str	r1, [r7, #8]
 8012018:	4613      	mov	r3, r2
 801201a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012024:	88fb      	ldrh	r3, [r7, #6]
 8012026:	3303      	adds	r3, #3
 8012028:	089b      	lsrs	r3, r3, #2
 801202a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801202c:	2300      	movs	r3, #0
 801202e:	61bb      	str	r3, [r7, #24]
 8012030:	e00b      	b.n	801204a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012038:	681a      	ldr	r2, [r3, #0]
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	601a      	str	r2, [r3, #0]
    pDest++;
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	3304      	adds	r3, #4
 8012042:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012044:	69bb      	ldr	r3, [r7, #24]
 8012046:	3301      	adds	r3, #1
 8012048:	61bb      	str	r3, [r7, #24]
 801204a:	69ba      	ldr	r2, [r7, #24]
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	429a      	cmp	r2, r3
 8012050:	d3ef      	bcc.n	8012032 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012052:	69fb      	ldr	r3, [r7, #28]
}
 8012054:	4618      	mov	r0, r3
 8012056:	3724      	adds	r7, #36	; 0x24
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012060:	b480      	push	{r7}
 8012062:	b085      	sub	sp, #20
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	695b      	ldr	r3, [r3, #20]
 801206c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	699b      	ldr	r3, [r3, #24]
 8012072:	68fa      	ldr	r2, [r7, #12]
 8012074:	4013      	ands	r3, r2
 8012076:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012078:	68fb      	ldr	r3, [r7, #12]
}
 801207a:	4618      	mov	r0, r3
 801207c:	3714      	adds	r7, #20
 801207e:	46bd      	mov	sp, r7
 8012080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012084:	4770      	bx	lr

08012086 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012086:	b480      	push	{r7}
 8012088:	b083      	sub	sp, #12
 801208a:	af00      	add	r7, sp, #0
 801208c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	695b      	ldr	r3, [r3, #20]
 8012092:	f003 0301 	and.w	r3, r3, #1
}
 8012096:	4618      	mov	r0, r3
 8012098:	370c      	adds	r7, #12
 801209a:	46bd      	mov	sp, r7
 801209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a0:	4770      	bx	lr
	...

080120a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80120ac:	2300      	movs	r3, #0
 80120ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	3301      	adds	r3, #1
 80120b4:	60fb      	str	r3, [r7, #12]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	4a13      	ldr	r2, [pc, #76]	; (8012108 <USB_CoreReset+0x64>)
 80120ba:	4293      	cmp	r3, r2
 80120bc:	d901      	bls.n	80120c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80120be:	2303      	movs	r3, #3
 80120c0:	e01b      	b.n	80120fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	691b      	ldr	r3, [r3, #16]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	daf2      	bge.n	80120b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80120ca:	2300      	movs	r3, #0
 80120cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	691b      	ldr	r3, [r3, #16]
 80120d2:	f043 0201 	orr.w	r2, r3, #1
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	3301      	adds	r3, #1
 80120de:	60fb      	str	r3, [r7, #12]
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	4a09      	ldr	r2, [pc, #36]	; (8012108 <USB_CoreReset+0x64>)
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d901      	bls.n	80120ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80120e8:	2303      	movs	r3, #3
 80120ea:	e006      	b.n	80120fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	691b      	ldr	r3, [r3, #16]
 80120f0:	f003 0301 	and.w	r3, r3, #1
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d0f0      	beq.n	80120da <USB_CoreReset+0x36>

  return HAL_OK;
 80120f8:	2300      	movs	r3, #0
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3714      	adds	r7, #20
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr
 8012106:	bf00      	nop
 8012108:	00030d40 	.word	0x00030d40

0801210c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801210c:	b084      	sub	sp, #16
 801210e:	b580      	push	{r7, lr}
 8012110:	b084      	sub	sp, #16
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
 8012116:	f107 001c 	add.w	r0, r7, #28
 801211a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012128:	461a      	mov	r2, r3
 801212a:	2300      	movs	r3, #0
 801212c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012132:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801213e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	68ba      	ldr	r2, [r7, #8]
 8012150:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012154:	f023 0304 	bic.w	r3, r3, #4
 8012158:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 801215a:	2110      	movs	r1, #16
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f7ff fedd 	bl	8011f1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7ff ff00 	bl	8011f68 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8012168:	2300      	movs	r3, #0
 801216a:	60fb      	str	r3, [r7, #12]
 801216c:	e015      	b.n	801219a <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	015a      	lsls	r2, r3, #5
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	4413      	add	r3, r2
 8012176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801217a:	461a      	mov	r2, r3
 801217c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012180:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	015a      	lsls	r2, r3, #5
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	4413      	add	r3, r2
 801218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801218e:	461a      	mov	r2, r3
 8012190:	2300      	movs	r3, #0
 8012192:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	3301      	adds	r3, #1
 8012198:	60fb      	str	r3, [r7, #12]
 801219a:	6a3b      	ldr	r3, [r7, #32]
 801219c:	68fa      	ldr	r2, [r7, #12]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d3e5      	bcc.n	801216e <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80121a2:	2101      	movs	r1, #1
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 f893 	bl	80122d0 <USB_DriveVbus>

  HAL_Delay(200U);
 80121aa:	20c8      	movs	r0, #200	; 0xc8
 80121ac:	f7fb fef8 	bl	800dfa0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2200      	movs	r2, #0
 80121b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121bc:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2280      	movs	r2, #128	; 0x80
 80121c2:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	4a0d      	ldr	r2, [pc, #52]	; (80121fc <USB_HostInit+0xf0>)
 80121c8:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	4a0c      	ldr	r2, [pc, #48]	; (8012200 <USB_HostInit+0xf4>)
 80121ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	699b      	ldr	r3, [r3, #24]
 80121d6:	f043 0210 	orr.w	r2, r3, #16
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	699a      	ldr	r2, [r3, #24]
 80121e2:	4b08      	ldr	r3, [pc, #32]	; (8012204 <USB_HostInit+0xf8>)
 80121e4:	4313      	orrs	r3, r2
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80121ea:	2300      	movs	r3, #0
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3710      	adds	r7, #16
 80121f0:	46bd      	mov	sp, r7
 80121f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80121f6:	b004      	add	sp, #16
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop
 80121fc:	00600080 	.word	0x00600080
 8012200:	004000e0 	.word	0x004000e0
 8012204:	a3200008 	.word	0xa3200008

08012208 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8012208:	b480      	push	{r7}
 801220a:	b085      	sub	sp, #20
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	460b      	mov	r3, r1
 8012212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012226:	f023 0303 	bic.w	r3, r3, #3
 801222a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	78fb      	ldrb	r3, [r7, #3]
 8012236:	f003 0303 	and.w	r3, r3, #3
 801223a:	68f9      	ldr	r1, [r7, #12]
 801223c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012240:	4313      	orrs	r3, r2
 8012242:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8012244:	78fb      	ldrb	r3, [r7, #3]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d107      	bne.n	801225a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012250:	461a      	mov	r2, r3
 8012252:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8012256:	6053      	str	r3, [r2, #4]
 8012258:	e009      	b.n	801226e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801225a:	78fb      	ldrb	r3, [r7, #3]
 801225c:	2b02      	cmp	r3, #2
 801225e:	d106      	bne.n	801226e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012266:	461a      	mov	r2, r3
 8012268:	f241 7370 	movw	r3, #6000	; 0x1770
 801226c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 801226e:	2300      	movs	r3, #0
}
 8012270:	4618      	mov	r0, r3
 8012272:	3714      	adds	r7, #20
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr

0801227c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b084      	sub	sp, #16
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8012288:	2300      	movs	r3, #0
 801228a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801229c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	68fa      	ldr	r2, [r7, #12]
 80122a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80122a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80122aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80122ac:	2064      	movs	r0, #100	; 0x64
 80122ae:	f7fb fe77 	bl	800dfa0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80122ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80122be:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80122c0:	200a      	movs	r0, #10
 80122c2:	f7fb fe6d 	bl	800dfa0 <HAL_Delay>

  return HAL_OK;
 80122c6:	2300      	movs	r3, #0
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3710      	adds	r7, #16
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b085      	sub	sp, #20
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	460b      	mov	r3, r1
 80122da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80122e0:	2300      	movs	r3, #0
 80122e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80122f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d109      	bne.n	8012314 <USB_DriveVbus+0x44>
 8012300:	78fb      	ldrb	r3, [r7, #3]
 8012302:	2b01      	cmp	r3, #1
 8012304:	d106      	bne.n	8012314 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	68fa      	ldr	r2, [r7, #12]
 801230a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801230e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012312:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801231a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801231e:	d109      	bne.n	8012334 <USB_DriveVbus+0x64>
 8012320:	78fb      	ldrb	r3, [r7, #3]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d106      	bne.n	8012334 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	68fa      	ldr	r2, [r7, #12]
 801232a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801232e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012332:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8012334:	2300      	movs	r3, #0
}
 8012336:	4618      	mov	r0, r3
 8012338:	3714      	adds	r7, #20
 801233a:	46bd      	mov	sp, r7
 801233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012340:	4770      	bx	lr

08012342 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012342:	b480      	push	{r7}
 8012344:	b085      	sub	sp, #20
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801234e:	2300      	movs	r3, #0
 8012350:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	0c5b      	lsrs	r3, r3, #17
 8012360:	f003 0303 	and.w	r3, r3, #3
}
 8012364:	4618      	mov	r0, r3
 8012366:	3714      	adds	r7, #20
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr

08012370 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8012370:	b480      	push	{r7}
 8012372:	b085      	sub	sp, #20
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012382:	689b      	ldr	r3, [r3, #8]
 8012384:	b29b      	uxth	r3, r3
}
 8012386:	4618      	mov	r0, r3
 8012388:	3714      	adds	r7, #20
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr
	...

08012394 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8012394:	b480      	push	{r7}
 8012396:	b087      	sub	sp, #28
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	4608      	mov	r0, r1
 801239e:	4611      	mov	r1, r2
 80123a0:	461a      	mov	r2, r3
 80123a2:	4603      	mov	r3, r0
 80123a4:	70fb      	strb	r3, [r7, #3]
 80123a6:	460b      	mov	r3, r1
 80123a8:	70bb      	strb	r3, [r7, #2]
 80123aa:	4613      	mov	r3, r2
 80123ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80123ae:	2300      	movs	r3, #0
 80123b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80123b6:	78fb      	ldrb	r3, [r7, #3]
 80123b8:	015a      	lsls	r2, r3, #5
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	4413      	add	r3, r2
 80123be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123c2:	461a      	mov	r2, r3
 80123c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80123ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123ce:	2b03      	cmp	r3, #3
 80123d0:	d867      	bhi.n	80124a2 <USB_HC_Init+0x10e>
 80123d2:	a201      	add	r2, pc, #4	; (adr r2, 80123d8 <USB_HC_Init+0x44>)
 80123d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123d8:	080123e9 	.word	0x080123e9
 80123dc:	08012465 	.word	0x08012465
 80123e0:	080123e9 	.word	0x080123e9
 80123e4:	08012427 	.word	0x08012427
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80123e8:	78fb      	ldrb	r3, [r7, #3]
 80123ea:	015a      	lsls	r2, r3, #5
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	4413      	add	r3, r2
 80123f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123f4:	461a      	mov	r2, r3
 80123f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80123fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80123fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012400:	2b00      	cmp	r3, #0
 8012402:	da51      	bge.n	80124a8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012404:	78fb      	ldrb	r3, [r7, #3]
 8012406:	015a      	lsls	r2, r3, #5
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	4413      	add	r3, r2
 801240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	78fa      	ldrb	r2, [r7, #3]
 8012414:	0151      	lsls	r1, r2, #5
 8012416:	68ba      	ldr	r2, [r7, #8]
 8012418:	440a      	add	r2, r1
 801241a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012422:	60d3      	str	r3, [r2, #12]
      }
      break;
 8012424:	e040      	b.n	80124a8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012426:	78fb      	ldrb	r3, [r7, #3]
 8012428:	015a      	lsls	r2, r3, #5
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	4413      	add	r3, r2
 801242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012432:	461a      	mov	r2, r3
 8012434:	f240 639d 	movw	r3, #1693	; 0x69d
 8012438:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801243a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801243e:	2b00      	cmp	r3, #0
 8012440:	da34      	bge.n	80124ac <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012442:	78fb      	ldrb	r3, [r7, #3]
 8012444:	015a      	lsls	r2, r3, #5
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	4413      	add	r3, r2
 801244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801244e:	68db      	ldr	r3, [r3, #12]
 8012450:	78fa      	ldrb	r2, [r7, #3]
 8012452:	0151      	lsls	r1, r2, #5
 8012454:	68ba      	ldr	r2, [r7, #8]
 8012456:	440a      	add	r2, r1
 8012458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801245c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012460:	60d3      	str	r3, [r2, #12]
      }

      break;
 8012462:	e023      	b.n	80124ac <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012464:	78fb      	ldrb	r3, [r7, #3]
 8012466:	015a      	lsls	r2, r3, #5
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	4413      	add	r3, r2
 801246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012470:	461a      	mov	r2, r3
 8012472:	f240 2325 	movw	r3, #549	; 0x225
 8012476:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012478:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801247c:	2b00      	cmp	r3, #0
 801247e:	da17      	bge.n	80124b0 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8012480:	78fb      	ldrb	r3, [r7, #3]
 8012482:	015a      	lsls	r2, r3, #5
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	4413      	add	r3, r2
 8012488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801248c:	68db      	ldr	r3, [r3, #12]
 801248e:	78fa      	ldrb	r2, [r7, #3]
 8012490:	0151      	lsls	r1, r2, #5
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	440a      	add	r2, r1
 8012496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801249a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801249e:	60d3      	str	r3, [r2, #12]
      }
      break;
 80124a0:	e006      	b.n	80124b0 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80124a2:	2301      	movs	r3, #1
 80124a4:	75fb      	strb	r3, [r7, #23]
      break;
 80124a6:	e004      	b.n	80124b2 <USB_HC_Init+0x11e>
      break;
 80124a8:	bf00      	nop
 80124aa:	e002      	b.n	80124b2 <USB_HC_Init+0x11e>
      break;
 80124ac:	bf00      	nop
 80124ae:	e000      	b.n	80124b2 <USB_HC_Init+0x11e>
      break;
 80124b0:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80124b8:	699a      	ldr	r2, [r3, #24]
 80124ba:	78fb      	ldrb	r3, [r7, #3]
 80124bc:	f003 030f 	and.w	r3, r3, #15
 80124c0:	2101      	movs	r1, #1
 80124c2:	fa01 f303 	lsl.w	r3, r1, r3
 80124c6:	68b9      	ldr	r1, [r7, #8]
 80124c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80124cc:	4313      	orrs	r3, r2
 80124ce:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	699b      	ldr	r3, [r3, #24]
 80124d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80124dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	da03      	bge.n	80124ec <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80124e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124e8:	613b      	str	r3, [r7, #16]
 80124ea:	e001      	b.n	80124f0 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80124ec:	2300      	movs	r3, #0
 80124ee:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80124f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80124f4:	2b02      	cmp	r3, #2
 80124f6:	d103      	bne.n	8012500 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80124f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80124fc:	60fb      	str	r3, [r7, #12]
 80124fe:	e001      	b.n	8012504 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8012500:	2300      	movs	r3, #0
 8012502:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012504:	787b      	ldrb	r3, [r7, #1]
 8012506:	059b      	lsls	r3, r3, #22
 8012508:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801250c:	78bb      	ldrb	r3, [r7, #2]
 801250e:	02db      	lsls	r3, r3, #11
 8012510:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012514:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012516:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801251a:	049b      	lsls	r3, r3, #18
 801251c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012520:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8012522:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012524:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8012528:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801252e:	78fb      	ldrb	r3, [r7, #3]
 8012530:	0159      	lsls	r1, r3, #5
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	440b      	add	r3, r1
 8012536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801253a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012540:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8012542:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012546:	2b03      	cmp	r3, #3
 8012548:	d10f      	bne.n	801256a <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 801254a:	78fb      	ldrb	r3, [r7, #3]
 801254c:	015a      	lsls	r2, r3, #5
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	4413      	add	r3, r2
 8012552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	78fa      	ldrb	r2, [r7, #3]
 801255a:	0151      	lsls	r1, r2, #5
 801255c:	68ba      	ldr	r2, [r7, #8]
 801255e:	440a      	add	r2, r1
 8012560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012564:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012568:	6013      	str	r3, [r2, #0]
  }

  return ret;
 801256a:	7dfb      	ldrb	r3, [r7, #23]
}
 801256c:	4618      	mov	r0, r3
 801256e:	371c      	adds	r7, #28
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr

08012578 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b088      	sub	sp, #32
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	785b      	ldrb	r3, [r3, #1]
 801258a:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 801258c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012590:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d018      	beq.n	80125cc <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	691b      	ldr	r3, [r3, #16]
 801259e:	683a      	ldr	r2, [r7, #0]
 80125a0:	8912      	ldrh	r2, [r2, #8]
 80125a2:	4413      	add	r3, r2
 80125a4:	3b01      	subs	r3, #1
 80125a6:	683a      	ldr	r2, [r7, #0]
 80125a8:	8912      	ldrh	r2, [r2, #8]
 80125aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80125ae:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80125b0:	8bfa      	ldrh	r2, [r7, #30]
 80125b2:	8a7b      	ldrh	r3, [r7, #18]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d90b      	bls.n	80125d0 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80125b8:	8a7b      	ldrh	r3, [r7, #18]
 80125ba:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80125bc:	8bfb      	ldrh	r3, [r7, #30]
 80125be:	683a      	ldr	r2, [r7, #0]
 80125c0:	8912      	ldrh	r2, [r2, #8]
 80125c2:	fb02 f203 	mul.w	r2, r2, r3
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	611a      	str	r2, [r3, #16]
 80125ca:	e001      	b.n	80125d0 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80125cc:	2301      	movs	r3, #1
 80125ce:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	78db      	ldrb	r3, [r3, #3]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d006      	beq.n	80125e6 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80125d8:	8bfb      	ldrh	r3, [r7, #30]
 80125da:	683a      	ldr	r2, [r7, #0]
 80125dc:	8912      	ldrh	r2, [r2, #8]
 80125de:	fb02 f203 	mul.w	r2, r2, r3
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	691b      	ldr	r3, [r3, #16]
 80125ea:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80125ee:	8bfb      	ldrh	r3, [r7, #30]
 80125f0:	04d9      	lsls	r1, r3, #19
 80125f2:	4b5f      	ldr	r3, [pc, #380]	; (8012770 <USB_HC_StartXfer+0x1f8>)
 80125f4:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80125f6:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	7a9b      	ldrb	r3, [r3, #10]
 80125fc:	075b      	lsls	r3, r3, #29
 80125fe:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8012602:	6979      	ldr	r1, [r7, #20]
 8012604:	0148      	lsls	r0, r1, #5
 8012606:	69b9      	ldr	r1, [r7, #24]
 8012608:	4401      	add	r1, r0
 801260a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801260e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8012610:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012618:	689b      	ldr	r3, [r3, #8]
 801261a:	f003 0301 	and.w	r3, r3, #1
 801261e:	2b00      	cmp	r3, #0
 8012620:	bf0c      	ite	eq
 8012622:	2301      	moveq	r3, #1
 8012624:	2300      	movne	r3, #0
 8012626:	b2db      	uxtb	r3, r3
 8012628:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	015a      	lsls	r2, r3, #5
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	4413      	add	r3, r2
 8012632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	697a      	ldr	r2, [r7, #20]
 801263a:	0151      	lsls	r1, r2, #5
 801263c:	69ba      	ldr	r2, [r7, #24]
 801263e:	440a      	add	r2, r1
 8012640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012644:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012648:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	015a      	lsls	r2, r3, #5
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	4413      	add	r3, r2
 8012652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012656:	681a      	ldr	r2, [r3, #0]
 8012658:	7c7b      	ldrb	r3, [r7, #17]
 801265a:	075b      	lsls	r3, r3, #29
 801265c:	6979      	ldr	r1, [r7, #20]
 801265e:	0148      	lsls	r0, r1, #5
 8012660:	69b9      	ldr	r1, [r7, #24]
 8012662:	4401      	add	r1, r0
 8012664:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8012668:	4313      	orrs	r3, r2
 801266a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	015a      	lsls	r2, r3, #5
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	4413      	add	r3, r2
 8012674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	4a3e      	ldr	r2, [pc, #248]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 801267c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801267e:	4b3d      	ldr	r3, [pc, #244]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012686:	4a3b      	ldr	r2, [pc, #236]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 8012688:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	78db      	ldrb	r3, [r3, #3]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d006      	beq.n	80126a0 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8012692:	4b38      	ldr	r3, [pc, #224]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801269a:	4a36      	ldr	r2, [pc, #216]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 801269c:	6013      	str	r3, [r2, #0]
 801269e:	e005      	b.n	80126ac <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80126a0:	4b34      	ldr	r3, [pc, #208]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80126a8:	4a32      	ldr	r2, [pc, #200]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 80126aa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80126ac:	4b31      	ldr	r3, [pc, #196]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80126b4:	4a2f      	ldr	r2, [pc, #188]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 80126b6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	015a      	lsls	r2, r3, #5
 80126bc:	69bb      	ldr	r3, [r7, #24]
 80126be:	4413      	add	r3, r2
 80126c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126c4:	461a      	mov	r2, r3
 80126c6:	4b2b      	ldr	r3, [pc, #172]	; (8012774 <USB_HC_StartXfer+0x1fc>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	78db      	ldrb	r3, [r3, #3]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d148      	bne.n	8012766 <USB_HC_StartXfer+0x1ee>
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	691b      	ldr	r3, [r3, #16]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d044      	beq.n	8012766 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	79db      	ldrb	r3, [r3, #7]
 80126e0:	2b03      	cmp	r3, #3
 80126e2:	d831      	bhi.n	8012748 <USB_HC_StartXfer+0x1d0>
 80126e4:	a201      	add	r2, pc, #4	; (adr r2, 80126ec <USB_HC_StartXfer+0x174>)
 80126e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126ea:	bf00      	nop
 80126ec:	080126fd 	.word	0x080126fd
 80126f0:	08012721 	.word	0x08012721
 80126f4:	080126fd 	.word	0x080126fd
 80126f8:	08012721 	.word	0x08012721
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	3303      	adds	r3, #3
 8012702:	089b      	lsrs	r3, r3, #2
 8012704:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012706:	89fa      	ldrh	r2, [r7, #14]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801270c:	b29b      	uxth	r3, r3
 801270e:	429a      	cmp	r2, r3
 8012710:	d91c      	bls.n	801274c <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	699b      	ldr	r3, [r3, #24]
 8012716:	f043 0220 	orr.w	r2, r3, #32
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	619a      	str	r2, [r3, #24]
          }
          break;
 801271e:	e015      	b.n	801274c <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	691b      	ldr	r3, [r3, #16]
 8012724:	3303      	adds	r3, #3
 8012726:	089b      	lsrs	r3, r3, #2
 8012728:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801272a:	89fa      	ldrh	r2, [r7, #14]
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012732:	691b      	ldr	r3, [r3, #16]
 8012734:	b29b      	uxth	r3, r3
 8012736:	429a      	cmp	r2, r3
 8012738:	d90a      	bls.n	8012750 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	699b      	ldr	r3, [r3, #24]
 801273e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	619a      	str	r2, [r3, #24]
          }
          break;
 8012746:	e003      	b.n	8012750 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8012748:	bf00      	nop
 801274a:	e002      	b.n	8012752 <USB_HC_StartXfer+0x1da>
          break;
 801274c:	bf00      	nop
 801274e:	e000      	b.n	8012752 <USB_HC_StartXfer+0x1da>
          break;
 8012750:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	68d9      	ldr	r1, [r3, #12]
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	785a      	ldrb	r2, [r3, #1]
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	691b      	ldr	r3, [r3, #16]
 801275e:	b29b      	uxth	r3, r3
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f7ff fc23 	bl	8011fac <USB_WritePacket>
    }

  return HAL_OK;
 8012766:	2300      	movs	r3, #0
}
 8012768:	4618      	mov	r0, r3
 801276a:	3720      	adds	r7, #32
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}
 8012770:	1ff80000 	.word	0x1ff80000
 8012774:	2000c338 	.word	0x2000c338

08012778 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012778:	b480      	push	{r7}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801278a:	695b      	ldr	r3, [r3, #20]
 801278c:	b29b      	uxth	r3, r3
}
 801278e:	4618      	mov	r0, r3
 8012790:	3714      	adds	r7, #20
 8012792:	46bd      	mov	sp, r7
 8012794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012798:	4770      	bx	lr

0801279a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801279a:	b480      	push	{r7}
 801279c:	b087      	sub	sp, #28
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
 80127a2:	460b      	mov	r3, r1
 80127a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80127aa:	78fb      	ldrb	r3, [r7, #3]
 80127ac:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80127ae:	2300      	movs	r3, #0
 80127b0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	015a      	lsls	r2, r3, #5
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	4413      	add	r3, r2
 80127ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	0c9b      	lsrs	r3, r3, #18
 80127c2:	f003 0303 	and.w	r3, r3, #3
 80127c6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d002      	beq.n	80127d4 <USB_HC_Halt+0x3a>
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	2b02      	cmp	r3, #2
 80127d2:	d16c      	bne.n	80128ae <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	015a      	lsls	r2, r3, #5
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	4413      	add	r3, r2
 80127dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	68fa      	ldr	r2, [r7, #12]
 80127e4:	0151      	lsls	r1, r2, #5
 80127e6:	693a      	ldr	r2, [r7, #16]
 80127e8:	440a      	add	r2, r1
 80127ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80127ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80127f2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d143      	bne.n	8012888 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	015a      	lsls	r2, r3, #5
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	4413      	add	r3, r2
 8012808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	68fa      	ldr	r2, [r7, #12]
 8012810:	0151      	lsls	r1, r2, #5
 8012812:	693a      	ldr	r2, [r7, #16]
 8012814:	440a      	add	r2, r1
 8012816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801281a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801281e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	015a      	lsls	r2, r3, #5
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	4413      	add	r3, r2
 8012828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	68fa      	ldr	r2, [r7, #12]
 8012830:	0151      	lsls	r1, r2, #5
 8012832:	693a      	ldr	r2, [r7, #16]
 8012834:	440a      	add	r2, r1
 8012836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801283a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801283e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	015a      	lsls	r2, r3, #5
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	4413      	add	r3, r2
 8012848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	68fa      	ldr	r2, [r7, #12]
 8012850:	0151      	lsls	r1, r2, #5
 8012852:	693a      	ldr	r2, [r7, #16]
 8012854:	440a      	add	r2, r1
 8012856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801285a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801285e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	3301      	adds	r3, #1
 8012864:	617b      	str	r3, [r7, #20]
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801286c:	d81d      	bhi.n	80128aa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	015a      	lsls	r2, r3, #5
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	4413      	add	r3, r2
 8012876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012884:	d0ec      	beq.n	8012860 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012886:	e080      	b.n	801298a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	015a      	lsls	r2, r3, #5
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	4413      	add	r3, r2
 8012890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	68fa      	ldr	r2, [r7, #12]
 8012898:	0151      	lsls	r1, r2, #5
 801289a:	693a      	ldr	r2, [r7, #16]
 801289c:	440a      	add	r2, r1
 801289e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80128a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80128a6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80128a8:	e06f      	b.n	801298a <USB_HC_Halt+0x1f0>
          break;
 80128aa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80128ac:	e06d      	b.n	801298a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	015a      	lsls	r2, r3, #5
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	4413      	add	r3, r2
 80128b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	68fa      	ldr	r2, [r7, #12]
 80128be:	0151      	lsls	r1, r2, #5
 80128c0:	693a      	ldr	r2, [r7, #16]
 80128c2:	440a      	add	r2, r1
 80128c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80128c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80128cc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80128d4:	691b      	ldr	r3, [r3, #16]
 80128d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d143      	bne.n	8012966 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	015a      	lsls	r2, r3, #5
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	4413      	add	r3, r2
 80128e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	0151      	lsls	r1, r2, #5
 80128f0:	693a      	ldr	r2, [r7, #16]
 80128f2:	440a      	add	r2, r1
 80128f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80128f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128fc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	015a      	lsls	r2, r3, #5
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	4413      	add	r3, r2
 8012906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	0151      	lsls	r1, r2, #5
 8012910:	693a      	ldr	r2, [r7, #16]
 8012912:	440a      	add	r2, r1
 8012914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801291c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	015a      	lsls	r2, r3, #5
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	4413      	add	r3, r2
 8012926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	68fa      	ldr	r2, [r7, #12]
 801292e:	0151      	lsls	r1, r2, #5
 8012930:	693a      	ldr	r2, [r7, #16]
 8012932:	440a      	add	r2, r1
 8012934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012938:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801293c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	3301      	adds	r3, #1
 8012942:	617b      	str	r3, [r7, #20]
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801294a:	d81d      	bhi.n	8012988 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	015a      	lsls	r2, r3, #5
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	4413      	add	r3, r2
 8012954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801295e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012962:	d0ec      	beq.n	801293e <USB_HC_Halt+0x1a4>
 8012964:	e011      	b.n	801298a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	015a      	lsls	r2, r3, #5
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	4413      	add	r3, r2
 801296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	68fa      	ldr	r2, [r7, #12]
 8012976:	0151      	lsls	r1, r2, #5
 8012978:	693a      	ldr	r2, [r7, #16]
 801297a:	440a      	add	r2, r1
 801297c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012984:	6013      	str	r3, [r2, #0]
 8012986:	e000      	b.n	801298a <USB_HC_Halt+0x1f0>
          break;
 8012988:	bf00      	nop
    }
  }

  return HAL_OK;
 801298a:	2300      	movs	r3, #0
}
 801298c:	4618      	mov	r0, r3
 801298e:	371c      	adds	r7, #28
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b086      	sub	sp, #24
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80129a4:	2300      	movs	r3, #0
 80129a6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f7ff fa7b 	bl	8011ea4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80129ae:	2110      	movs	r1, #16
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f7ff fab3 	bl	8011f1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7ff fad6 	bl	8011f68 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80129bc:	2300      	movs	r3, #0
 80129be:	613b      	str	r3, [r7, #16]
 80129c0:	e01f      	b.n	8012a02 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	015a      	lsls	r2, r3, #5
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	4413      	add	r3, r2
 80129ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80129d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80129e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	015a      	lsls	r2, r3, #5
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	4413      	add	r3, r2
 80129f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80129f6:	461a      	mov	r2, r3
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80129fc:	693b      	ldr	r3, [r7, #16]
 80129fe:	3301      	adds	r3, #1
 8012a00:	613b      	str	r3, [r7, #16]
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	2b0f      	cmp	r3, #15
 8012a06:	d9dc      	bls.n	80129c2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012a08:	2300      	movs	r3, #0
 8012a0a:	613b      	str	r3, [r7, #16]
 8012a0c:	e034      	b.n	8012a78 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	015a      	lsls	r2, r3, #5
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	4413      	add	r3, r2
 8012a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012a24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012a2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012a34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	015a      	lsls	r2, r3, #5
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a42:	461a      	mov	r2, r3
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	3301      	adds	r3, #1
 8012a4c:	617b      	str	r3, [r7, #20]
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012a54:	d80c      	bhi.n	8012a70 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	015a      	lsls	r2, r3, #5
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a6c:	d0ec      	beq.n	8012a48 <USB_StopHost+0xb0>
 8012a6e:	e000      	b.n	8012a72 <USB_StopHost+0xda>
        break;
 8012a70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	3301      	adds	r3, #1
 8012a76:	613b      	str	r3, [r7, #16]
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	2b0f      	cmp	r3, #15
 8012a7c:	d9c7      	bls.n	8012a0e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a84:	461a      	mov	r2, r3
 8012a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a92:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f7ff f9f4 	bl	8011e82 <USB_EnableGlobalInt>

  return HAL_OK;
 8012a9a:	2300      	movs	r3, #0
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3718      	adds	r7, #24
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8012aa4:	b590      	push	{r4, r7, lr}
 8012aa6:	b08b      	sub	sp, #44	; 0x2c
 8012aa8:	af04      	add	r7, sp, #16
 8012aaa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8012aac:	2302      	movs	r3, #2
 8012aae:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef out_status, in_status ;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8012ab8:	2300      	movs	r3, #0
 8012aba:	2201      	movs	r2, #1
 8012abc:	2101      	movs	r1, #1
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f001 ffec 	bl	8014a9c <USBH_FindInterface>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	747b      	strb	r3, [r7, #17]

  if(interface == 0xFFU) /* Not Valid Interface */
 8012ac8:	7c7b      	ldrb	r3, [r7, #17]
 8012aca:	2bff      	cmp	r3, #255	; 0xff
 8012acc:	d102      	bne.n	8012ad4 <USBH_AUDIO_InterfaceInit+0x30>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;
 8012ace:	2302      	movs	r3, #2
 8012ad0:	75fb      	strb	r3, [r7, #23]
 8012ad2:	e1a0      	b.n	8012e16 <USBH_AUDIO_InterfaceInit+0x372>
  }
  else
  {


    phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc (sizeof(AUDIO_HandleTypeDef));
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8d3 4448 	ldr.w	r4, [r3, #1096]	; 0x448
 8012ada:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8012ade:	f007 fa77 	bl	8019fd0 <malloc>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	61e3      	str	r3, [r4, #28]
    AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012aec:	69db      	ldr	r3, [r3, #28]
 8012aee:	60fb      	str	r3, [r7, #12]
    USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8012af0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8012af4:	2100      	movs	r1, #0
 8012af6:	68f8      	ldr	r0, [r7, #12]
 8012af8:	f007 fab0 	bl	801a05c <memset>


    /* 1st Step:  Find Audio Interfaces */
    out_status = USBH_AUDIO_FindAudioStreamingIN (phost);
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f000 fc4c 	bl	801339a <USBH_AUDIO_FindAudioStreamingIN>
 8012b02:	4603      	mov	r3, r0
 8012b04:	72fb      	strb	r3, [r7, #11]

    in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 fd06 	bl	8013518 <USBH_AUDIO_FindAudioStreamingOUT>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	72bb      	strb	r3, [r7, #10]

    if((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8012b10:	7afb      	ldrb	r3, [r7, #11]
 8012b12:	2b02      	cmp	r3, #2
 8012b14:	d103      	bne.n	8012b1e <USBH_AUDIO_InterfaceInit+0x7a>
 8012b16:	7abb      	ldrb	r3, [r7, #10]
 8012b18:	2b02      	cmp	r3, #2
 8012b1a:	f000 817c 	beq.w	8012e16 <USBH_AUDIO_InterfaceInit+0x372>
      USBH_DbgLog ("%s class configuration not supported.", phost->pActiveClass->Name);
    }
    else
    {
      /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior*/
      for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8012b1e:	2300      	movs	r3, #0
 8012b20:	75bb      	strb	r3, [r7, #22]
 8012b22:	e0c6      	b.n	8012cb2 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        if( AUDIO_Handle->stream_out[index].valid == 1U)
 8012b24:	7dba      	ldrb	r2, [r7, #22]
 8012b26:	68f9      	ldr	r1, [r7, #12]
 8012b28:	4613      	mov	r3, r2
 8012b2a:	009b      	lsls	r3, r3, #2
 8012b2c:	4413      	add	r3, r2
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	440b      	add	r3, r1
 8012b32:	333e      	adds	r3, #62	; 0x3e
 8012b34:	781b      	ldrb	r3, [r3, #0]
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	d156      	bne.n	8012be8 <USBH_AUDIO_InterfaceInit+0x144>
        {
          if(ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8012b3a:	7dba      	ldrb	r2, [r7, #22]
 8012b3c:	68f9      	ldr	r1, [r7, #12]
 8012b3e:	4613      	mov	r3, r2
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	4413      	add	r3, r2
 8012b44:	005b      	lsls	r3, r3, #1
 8012b46:	440b      	add	r3, r1
 8012b48:	333a      	adds	r3, #58	; 0x3a
 8012b4a:	881b      	ldrh	r3, [r3, #0]
 8012b4c:	8aba      	ldrh	r2, [r7, #20]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d24a      	bcs.n	8012be8 <USBH_AUDIO_InterfaceInit+0x144>
          {
            ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8012b52:	7dba      	ldrb	r2, [r7, #22]
 8012b54:	68f9      	ldr	r1, [r7, #12]
 8012b56:	4613      	mov	r3, r2
 8012b58:	009b      	lsls	r3, r3, #2
 8012b5a:	4413      	add	r3, r2
 8012b5c:	005b      	lsls	r3, r3, #1
 8012b5e:	440b      	add	r3, r1
 8012b60:	333a      	adds	r3, #58	; 0x3a
 8012b62:	881b      	ldrh	r3, [r3, #0]
 8012b64:	82bb      	strh	r3, [r7, #20]
            AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8012b66:	7dba      	ldrb	r2, [r7, #22]
 8012b68:	68f9      	ldr	r1, [r7, #12]
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	4413      	add	r3, r2
 8012b70:	005b      	lsls	r3, r3, #1
 8012b72:	440b      	add	r3, r1
 8012b74:	333d      	adds	r3, #61	; 0x3d
 8012b76:	781a      	ldrb	r2, [r3, #0]
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
            AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8012b7e:	7dba      	ldrb	r2, [r7, #22]
 8012b80:	68f9      	ldr	r1, [r7, #12]
 8012b82:	4613      	mov	r3, r2
 8012b84:	009b      	lsls	r3, r3, #2
 8012b86:	4413      	add	r3, r2
 8012b88:	005b      	lsls	r3, r3, #1
 8012b8a:	440b      	add	r3, r1
 8012b8c:	333c      	adds	r3, #60	; 0x3c
 8012b8e:	781a      	ldrb	r2, [r3, #0]
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
            AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8012b96:	7dba      	ldrb	r2, [r7, #22]
 8012b98:	68f9      	ldr	r1, [r7, #12]
 8012b9a:	4613      	mov	r3, r2
 8012b9c:	009b      	lsls	r3, r3, #2
 8012b9e:	4413      	add	r3, r2
 8012ba0:	005b      	lsls	r3, r3, #1
 8012ba2:	440b      	add	r3, r1
 8012ba4:	3338      	adds	r3, #56	; 0x38
 8012ba6:	781a      	ldrb	r2, [r3, #0]
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
            AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8012bae:	7dba      	ldrb	r2, [r7, #22]
 8012bb0:	68f9      	ldr	r1, [r7, #12]
 8012bb2:	4613      	mov	r3, r2
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	4413      	add	r3, r2
 8012bb8:	005b      	lsls	r3, r3, #1
 8012bba:	440b      	add	r3, r1
 8012bbc:	333a      	adds	r3, #58	; 0x3a
 8012bbe:	881a      	ldrh	r2, [r3, #0]
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
            AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8012bc6:	7dba      	ldrb	r2, [r7, #22]
 8012bc8:	68f9      	ldr	r1, [r7, #12]
 8012bca:	4613      	mov	r3, r2
 8012bcc:	009b      	lsls	r3, r3, #2
 8012bce:	4413      	add	r3, r2
 8012bd0:	005b      	lsls	r3, r3, #1
 8012bd2:	440b      	add	r3, r1
 8012bd4:	3340      	adds	r3, #64	; 0x40
 8012bd6:	881b      	ldrh	r3, [r3, #0]
 8012bd8:	b2da      	uxtb	r2, r3
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            AUDIO_Handle->headphone.supported = 1U;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	2201      	movs	r2, #1
 8012be4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
          }
        }

        if( AUDIO_Handle->stream_in[index].valid == 1U)
 8012be8:	7dba      	ldrb	r2, [r7, #22]
 8012bea:	68f9      	ldr	r1, [r7, #12]
 8012bec:	4613      	mov	r3, r2
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	4413      	add	r3, r2
 8012bf2:	005b      	lsls	r3, r3, #1
 8012bf4:	440b      	add	r3, r1
 8012bf6:	330c      	adds	r3, #12
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	2b01      	cmp	r3, #1
 8012bfc:	d156      	bne.n	8012cac <USBH_AUDIO_InterfaceInit+0x208>
        {
          if(ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8012bfe:	7dba      	ldrb	r2, [r7, #22]
 8012c00:	68f9      	ldr	r1, [r7, #12]
 8012c02:	4613      	mov	r3, r2
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	4413      	add	r3, r2
 8012c08:	005b      	lsls	r3, r3, #1
 8012c0a:	440b      	add	r3, r1
 8012c0c:	3308      	adds	r3, #8
 8012c0e:	881b      	ldrh	r3, [r3, #0]
 8012c10:	8a7a      	ldrh	r2, [r7, #18]
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d24a      	bcs.n	8012cac <USBH_AUDIO_InterfaceInit+0x208>
          {
            ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8012c16:	7dba      	ldrb	r2, [r7, #22]
 8012c18:	68f9      	ldr	r1, [r7, #12]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	009b      	lsls	r3, r3, #2
 8012c1e:	4413      	add	r3, r2
 8012c20:	005b      	lsls	r3, r3, #1
 8012c22:	440b      	add	r3, r1
 8012c24:	3308      	adds	r3, #8
 8012c26:	881b      	ldrh	r3, [r3, #0]
 8012c28:	827b      	strh	r3, [r7, #18]
            AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8012c2a:	7dba      	ldrb	r2, [r7, #22]
 8012c2c:	68f9      	ldr	r1, [r7, #12]
 8012c2e:	4613      	mov	r3, r2
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	4413      	add	r3, r2
 8012c34:	005b      	lsls	r3, r3, #1
 8012c36:	440b      	add	r3, r1
 8012c38:	330b      	adds	r3, #11
 8012c3a:	781a      	ldrb	r2, [r3, #0]
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
            AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8012c42:	7dba      	ldrb	r2, [r7, #22]
 8012c44:	68f9      	ldr	r1, [r7, #12]
 8012c46:	4613      	mov	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	005b      	lsls	r3, r3, #1
 8012c4e:	440b      	add	r3, r1
 8012c50:	330a      	adds	r3, #10
 8012c52:	781a      	ldrb	r2, [r3, #0]
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
            AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8012c5a:	7dba      	ldrb	r2, [r7, #22]
 8012c5c:	68f9      	ldr	r1, [r7, #12]
 8012c5e:	4613      	mov	r3, r2
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	4413      	add	r3, r2
 8012c64:	005b      	lsls	r3, r3, #1
 8012c66:	440b      	add	r3, r1
 8012c68:	3306      	adds	r3, #6
 8012c6a:	781a      	ldrb	r2, [r3, #0]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
            AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8012c72:	7dba      	ldrb	r2, [r7, #22]
 8012c74:	68f9      	ldr	r1, [r7, #12]
 8012c76:	4613      	mov	r3, r2
 8012c78:	009b      	lsls	r3, r3, #2
 8012c7a:	4413      	add	r3, r2
 8012c7c:	005b      	lsls	r3, r3, #1
 8012c7e:	440b      	add	r3, r1
 8012c80:	3308      	adds	r3, #8
 8012c82:	881a      	ldrh	r2, [r3, #0]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
            AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8012c8a:	7dba      	ldrb	r2, [r7, #22]
 8012c8c:	68f9      	ldr	r1, [r7, #12]
 8012c8e:	4613      	mov	r3, r2
 8012c90:	009b      	lsls	r3, r3, #2
 8012c92:	4413      	add	r3, r2
 8012c94:	005b      	lsls	r3, r3, #1
 8012c96:	440b      	add	r3, r1
 8012c98:	3340      	adds	r3, #64	; 0x40
 8012c9a:	881b      	ldrh	r3, [r3, #0]
 8012c9c:	b2da      	uxtb	r2, r3
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
            AUDIO_Handle->microphone.supported = 1U;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
      for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8012cac:	7dbb      	ldrb	r3, [r7, #22]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	75bb      	strb	r3, [r7, #22]
 8012cb2:	7dbb      	ldrb	r3, [r7, #22]
 8012cb4:	2b04      	cmp	r3, #4
 8012cb6:	f67f af35 	bls.w	8012b24 <USBH_AUDIO_InterfaceInit+0x80>
          }
        }
      }

      if(USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f000 fceb 	bl	8013696 <USBH_AUDIO_FindHIDControl>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d103      	bne.n	8012cce <USBH_AUDIO_InterfaceInit+0x22a>
      {
        AUDIO_Handle->control.supported = 1U;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2201      	movs	r2, #1
 8012cca:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
      }

      /* 3rd Step:  Find and Parse Audio interfaces */
      USBH_AUDIO_ParseCSDescriptors (phost);
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f000 fd60 	bl	8013794 <USBH_AUDIO_ParseCSDescriptors>


      /* 4th Step:  Open the Audio streaming pipes*/
      if(AUDIO_Handle->headphone.supported == 1U)
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8012cda:	2b01      	cmp	r3, #1
 8012cdc:	d12e      	bne.n	8012d3c <USBH_AUDIO_InterfaceInit+0x298>
      {
        USBH_AUDIO_BuildHeadphonePath (phost);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 ff98 	bl	8013c14 <USBH_AUDIO_BuildHeadphonePath>

        AUDIO_Handle->headphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8012cea:	4619      	mov	r1, r3
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f003 f9e9 	bl	80160c4 <USBH_AllocPipe>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012d14:	68fa      	ldr	r2, [r7, #12]
 8012d16:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8012d1a:	9202      	str	r2, [sp, #8]
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	9201      	str	r2, [sp, #4]
 8012d20:	9300      	str	r3, [sp, #0]
 8012d22:	4623      	mov	r3, r4
 8012d24:	4602      	mov	r2, r0
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f003 f99d 	bl	8016066 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

        USBH_LL_SetToggle (phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8012d32:	2200      	movs	r2, #0
 8012d34:	4619      	mov	r1, r3
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f006 fff3 	bl	8019d22 <USBH_LL_SetToggle>

      }

      if(AUDIO_Handle->microphone.supported == 1U)
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d12e      	bne.n	8012da4 <USBH_AUDIO_InterfaceInit+0x300>
      {
        USBH_AUDIO_BuildMicrophonePath (phost);
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f000 fedc 	bl	8013b04 <USBH_AUDIO_BuildMicrophonePath>
        AUDIO_Handle->microphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8012d52:	4619      	mov	r1, r3
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f003 f9b5 	bl	80160c4 <USBH_AllocPipe>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8012d82:	9202      	str	r2, [sp, #8]
 8012d84:	2201      	movs	r2, #1
 8012d86:	9201      	str	r2, [sp, #4]
 8012d88:	9300      	str	r3, [sp, #0]
 8012d8a:	4623      	mov	r3, r4
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f003 f969 	bl	8016066 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

        USBH_LL_SetToggle (phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f006 ffbf 	bl	8019d22 <USBH_LL_SetToggle>
      }

      if(AUDIO_Handle->control.supported == 1U)
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8012daa:	2b01      	cmp	r3, #1
 8012dac:	d12b      	bne.n	8012e06 <USBH_AUDIO_InterfaceInit+0x362>
      {
        AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8012db4:	4619      	mov	r1, r3
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f003 f984 	bl	80160c4 <USBH_AllocPipe>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012dde:	68fa      	ldr	r2, [r7, #12]
 8012de0:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8012de4:	9202      	str	r2, [sp, #8]
 8012de6:	2203      	movs	r2, #3
 8012de8:	9201      	str	r2, [sp, #4]
 8012dea:	9300      	str	r3, [sp, #0]
 8012dec:	4623      	mov	r3, r4
 8012dee:	4602      	mov	r2, r0
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f003 f938 	bl	8016066 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

        USBH_LL_SetToggle (phost,  AUDIO_Handle->control.Pipe, 0U);
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	4619      	mov	r1, r3
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f006 ff8e 	bl	8019d22 <USBH_LL_SetToggle>

      }

      AUDIO_Handle->req_state     = AUDIO_REQ_INIT;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2201      	movs	r2, #1
 8012e0a:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	2201      	movs	r2, #1
 8012e10:	70da      	strb	r2, [r3, #3]

      status = USBH_OK;
 8012e12:	2300      	movs	r3, #0
 8012e14:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8012e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	371c      	adds	r7, #28
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd90      	pop	{r4, r7, pc}

08012e20 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012e2e:	69db      	ldr	r3, [r3, #28]
 8012e30:	60fb      	str	r3, [r7, #12]

  if(AUDIO_Handle->microphone.Pipe != 0x00U)
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d011      	beq.n	8012e60 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe  (phost, AUDIO_Handle->microphone.Pipe);
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8012e42:	4619      	mov	r1, r3
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f003 f92d 	bl	80160a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, AUDIO_Handle->microphone.Pipe);
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8012e50:	4619      	mov	r1, r3
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f003 f955 	bl	8016102 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if( AUDIO_Handle->headphone.Pipe != 0x00U)
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d011      	beq.n	8012e8e <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8012e70:	4619      	mov	r1, r3
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f003 f916 	bl	80160a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost,  AUDIO_Handle->headphone.Pipe);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8012e7e:	4619      	mov	r1, r3
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f003 f93e 	bl	8016102 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if( AUDIO_Handle->control.Pipe != 0x00U)
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d011      	beq.n	8012ebc <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f003 f8ff 	bl	80160a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost,  AUDIO_Handle->control.Pipe);
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8012eac:	4619      	mov	r1, r3
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f003 f927 	bl	8016102 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if(phost->pActiveClass->pData)
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012ec2:	69db      	ldr	r3, [r3, #28]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d00b      	beq.n	8012ee0 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free (phost->pActiveClass->pData);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012ece:	69db      	ldr	r3, [r3, #28]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f007 f885 	bl	8019fe0 <free>
    phost->pActiveClass->pData = 0U;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012edc:	2200      	movs	r2, #0
 8012ede:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3710      	adds	r7, #16
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
	...

08012eec <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b086      	sub	sp, #24
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012efa:	69db      	ldr	r3, [r3, #28]
 8012efc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012efe:	2301      	movs	r3, #1
 8012f00:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8012f02:	2301      	movs	r3, #1
 8012f04:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	2b06      	cmp	r3, #6
 8012f0e:	f200 80ed 	bhi.w	80130ec <USBH_AUDIO_ClassRequest+0x200>
 8012f12:	a201      	add	r2, pc, #4	; (adr r2, 8012f18 <USBH_AUDIO_ClassRequest+0x2c>)
 8012f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f18:	08012f35 	.word	0x08012f35
 8012f1c:	080130b9 	.word	0x080130b9
 8012f20:	08012f35 	.word	0x08012f35
 8012f24:	08012f87 	.word	0x08012f87
 8012f28:	08013011 	.word	0x08013011
 8012f2c:	08013065 	.word	0x08013065
 8012f30:	08012ffd 	.word	0x08012ffd
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if(AUDIO_Handle->microphone.supported == 1U)
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8012f3a:	2b01      	cmp	r3, #1
 8012f3c:	d111      	bne.n	8012f62 <USBH_AUDIO_ClassRequest+0x76>
    {
      req_status = USBH_SetInterface(phost,
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8012f44:	2200      	movs	r2, #0
 8012f46:	4619      	mov	r1, r3
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f002 fb57 	bl	80155fc <USBH_SetInterface>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if(req_status == USBH_OK)
 8012f52:	7bfb      	ldrb	r3, [r7, #15]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f040 80cb 	bne.w	80130f0 <USBH_AUDIO_ClassRequest+0x204>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	2204      	movs	r2, #4
 8012f5e:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8012f60:	e0c6      	b.n	80130f0 <USBH_AUDIO_ClassRequest+0x204>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	2204      	movs	r2, #4
 8012f66:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2202      	movs	r2, #2
 8012f6c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	4619      	mov	r1, r3
 8012f80:	f003 fae2 	bl	8016548 <osMessagePut>
    break;
 8012f84:	e0b4      	b.n	80130f0 <USBH_AUDIO_ClassRequest+0x204>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if(AUDIO_Handle->headphone.supported == 1U)
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	d120      	bne.n	8012fd2 <USBH_AUDIO_ClassRequest+0xe6>
    {
      req_status = USBH_SetInterface(phost,
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8012f96:	2200      	movs	r2, #0
 8012f98:	4619      	mov	r1, r3
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f002 fb2e 	bl	80155fc <USBH_SetInterface>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if(req_status == USBH_OK)
 8012fa4:	7bfb      	ldrb	r3, [r7, #15]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	f040 80a4 	bne.w	80130f4 <USBH_AUDIO_ClassRequest+0x208>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	2207      	movs	r2, #7
 8012fb0:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	2206      	movs	r2, #6
 8012fb6:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8012fd0:	e090      	b.n	80130f4 <USBH_AUDIO_ClassRequest+0x208>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	2207      	movs	r2, #7
 8012fd6:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8012fd8:	693b      	ldr	r3, [r7, #16]
 8012fda:	2206      	movs	r2, #6
 8012fdc:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2202      	movs	r2, #2
 8012fe2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	f003 faa7 	bl	8016548 <osMessagePut>
    break;
 8012ffa:	e07b      	b.n	80130f4 <USBH_AUDIO_ClassRequest+0x208>

  case AUDIO_REQ_CS_REQUESTS:
    if(USBH_AUDIO_HandleCSRequest (phost) == USBH_OK)
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f000 f955 	bl	80132ac <USBH_AUDIO_HandleCSRequest>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d177      	bne.n	80130f8 <USBH_AUDIO_ClassRequest+0x20c>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	2205      	movs	r2, #5
 801300c:	701a      	strb	r2, [r3, #0]
    }
    break;
 801300e:	e073      	b.n	80130f8 <USBH_AUDIO_ClassRequest+0x20c>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if(AUDIO_Handle->microphone.supported == 1U)
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8013016:	2b01      	cmp	r3, #1
 8013018:	d112      	bne.n	8013040 <USBH_AUDIO_ClassRequest+0x154>
    {
      req_status = USBH_SetInterface(phost,
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8013026:	461a      	mov	r2, r3
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f002 fae7 	bl	80155fc <USBH_SetInterface>
 801302e:	4603      	mov	r3, r0
 8013030:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if(req_status == USBH_OK)
 8013032:	7bfb      	ldrb	r3, [r7, #15]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d161      	bne.n	80130fc <USBH_AUDIO_ClassRequest+0x210>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8013038:	693b      	ldr	r3, [r7, #16]
 801303a:	2206      	movs	r2, #6
 801303c:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 801303e:	e05d      	b.n	80130fc <USBH_AUDIO_ClassRequest+0x210>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	2206      	movs	r2, #6
 8013044:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2202      	movs	r2, #2
 801304a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801305a:	2200      	movs	r2, #0
 801305c:	4619      	mov	r1, r3
 801305e:	f003 fa73 	bl	8016548 <osMessagePut>
    break;
 8013062:	e04b      	b.n	80130fc <USBH_AUDIO_ClassRequest+0x210>
  case AUDIO_REQ_SET_OUT_INTERFACE:
   if(AUDIO_Handle->headphone.supported == 1U)
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 801306a:	2b01      	cmp	r3, #1
 801306c:	d112      	bne.n	8013094 <USBH_AUDIO_ClassRequest+0x1a8>
    {
      req_status = USBH_SetInterface(phost,
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 801307a:	461a      	mov	r2, r3
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f002 fabd 	bl	80155fc <USBH_SetInterface>
 8013082:	4603      	mov	r3, r0
 8013084:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if(req_status == USBH_OK)
 8013086:	7bfb      	ldrb	r3, [r7, #15]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d139      	bne.n	8013100 <USBH_AUDIO_ClassRequest+0x214>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 801308c:	693b      	ldr	r3, [r7, #16]
 801308e:	2202      	movs	r2, #2
 8013090:	701a      	strb	r2, [r3, #0]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
   }
   break;
 8013092:	e035      	b.n	8013100 <USBH_AUDIO_ClassRequest+0x214>
     AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	2202      	movs	r2, #2
 8013098:	701a      	strb	r2, [r3, #0]
     phost->os_msg = (uint32_t)USBH_URB_EVENT;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2202      	movs	r2, #2
 801309e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80130ae:	2200      	movs	r2, #0
 80130b0:	4619      	mov	r1, r3
 80130b2:	f003 fa49 	bl	8016548 <osMessagePut>
   break;
 80130b6:	e023      	b.n	8013100 <USBH_AUDIO_ClassRequest+0x214>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	2201      	movs	r2, #1
 80130bc:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80130c4:	2102      	movs	r1, #2
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	4798      	blx	r3
    status  = USBH_OK;
 80130ca:	2300      	movs	r3, #0
 80130cc:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2204      	movs	r2, #4
 80130d2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80130e2:	2200      	movs	r2, #0
 80130e4:	4619      	mov	r1, r3
 80130e6:	f003 fa2f 	bl	8016548 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80130ea:	e00a      	b.n	8013102 <USBH_AUDIO_ClassRequest+0x216>

  default:
    break;
 80130ec:	bf00      	nop
 80130ee:	e008      	b.n	8013102 <USBH_AUDIO_ClassRequest+0x216>
    break;
 80130f0:	bf00      	nop
 80130f2:	e006      	b.n	8013102 <USBH_AUDIO_ClassRequest+0x216>
    break;
 80130f4:	bf00      	nop
 80130f6:	e004      	b.n	8013102 <USBH_AUDIO_ClassRequest+0x216>
    break;
 80130f8:	bf00      	nop
 80130fa:	e002      	b.n	8013102 <USBH_AUDIO_ClassRequest+0x216>
    break;
 80130fc:	bf00      	nop
 80130fe:	e000      	b.n	8013102 <USBH_AUDIO_ClassRequest+0x216>
   break;
 8013100:	bf00      	nop
  }
  return status;
 8013102:	7dfb      	ldrb	r3, [r7, #23]
}
 8013104:	4618      	mov	r0, r3
 8013106:	3718      	adds	r7, #24
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <USBH_AUDIO_CSRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b088      	sub	sp, #32
 8013110:	af02      	add	r7, sp, #8
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	460b      	mov	r3, r1
 8013116:	70fb      	strb	r3, [r7, #3]
 8013118:	4613      	mov	r3, r2
 801311a:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013122:	69db      	ldr	r3, [r3, #28]
 8013124:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013126:	2301      	movs	r3, #1
 8013128:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 801312a:	2301      	movs	r3, #1
 801312c:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	785b      	ldrb	r3, [r3, #1]
 8013132:	3b04      	subs	r3, #4
 8013134:	2b04      	cmp	r3, #4
 8013136:	f200 80aa 	bhi.w	801328e <USBH_AUDIO_CSRequest+0x182>
 801313a:	a201      	add	r2, pc, #4	; (adr r2, 8013140 <USBH_AUDIO_CSRequest+0x34>)
 801313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013140:	0801319d 	.word	0x0801319d
 8013144:	080131e3 	.word	0x080131e3
 8013148:	08013155 	.word	0x08013155
 801314c:	08013243 	.word	0x08013243
 8013150:	08013289 	.word	0x08013289
  {
  case AUDIO_REQ_GET_VOLUME:
    req_status = USBH_AC_GetCur(phost,
 8013154:	78fa      	ldrb	r2, [r7, #3]
 8013156:	2302      	movs	r3, #2
 8013158:	9301      	str	r3, [sp, #4]
 801315a:	78bb      	ldrb	r3, [r7, #2]
 801315c:	9300      	str	r3, [sp, #0]
 801315e:	2302      	movs	r3, #2
 8013160:	2106      	movs	r1, #6
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f000 fe88 	bl	8013e78 <USBH_AC_GetCur>
 8013168:	4603      	mov	r3, r0
 801316a:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);               /* length   */
    if(req_status != USBH_BUSY)
 801316c:	7bfb      	ldrb	r3, [r7, #15]
 801316e:	2b01      	cmp	r3, #1
 8013170:	f000 808f 	beq.w	8013292 <USBH_AUDIO_CSRequest+0x186>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	2204      	movs	r2, #4
 8013178:	705a      	strb	r2, [r3, #1]
      VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8013180:	693b      	ldr	r3, [r7, #16]
 8013182:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8013186:	3302      	adds	r3, #2
 8013188:	881b      	ldrh	r3, [r3, #0]
 801318a:	021b      	lsls	r3, r3, #8
 801318c:	b29b      	uxth	r3, r3
 801318e:	4313      	orrs	r3, r2
 8013190:	817b      	strh	r3, [r7, #10]
      AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8013192:	897a      	ldrh	r2, [r7, #10]
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    }
    break;
 801319a:	e07a      	b.n	8013292 <USBH_AUDIO_CSRequest+0x186>

  case AUDIO_REQ_GET_MIN_VOLUME:
    req_status = USBH_AC_GetMin(phost,
 801319c:	78fa      	ldrb	r2, [r7, #3]
 801319e:	2302      	movs	r3, #2
 80131a0:	9301      	str	r3, [sp, #4]
 80131a2:	78bb      	ldrb	r3, [r7, #2]
 80131a4:	9300      	str	r3, [sp, #0]
 80131a6:	2302      	movs	r3, #2
 80131a8:	2106      	movs	r1, #6
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f001 f820 	bl	80141f0 <USBH_AC_GetMin>
 80131b0:	4603      	mov	r3, r0
 80131b2:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);               /* length   */
    if(req_status != USBH_BUSY)
 80131b4:	7bfb      	ldrb	r3, [r7, #15]
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	d06d      	beq.n	8013296 <USBH_AUDIO_CSRequest+0x18a>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	2205      	movs	r2, #5
 80131be:	705a      	strb	r2, [r3, #1]
      VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80131cc:	3302      	adds	r3, #2
 80131ce:	881b      	ldrh	r3, [r3, #0]
 80131d0:	021b      	lsls	r3, r3, #8
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	4313      	orrs	r3, r2
 80131d6:	817b      	strh	r3, [r7, #10]
      AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 80131d8:	897a      	ldrh	r2, [r7, #10]
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    }
    break;
 80131e0:	e059      	b.n	8013296 <USBH_AUDIO_CSRequest+0x18a>

  case AUDIO_REQ_GET_MAX_VOLUME:
    req_status = USBH_AC_GetMax(phost,
 80131e2:	78fa      	ldrb	r2, [r7, #3]
 80131e4:	2302      	movs	r3, #2
 80131e6:	9301      	str	r3, [sp, #4]
 80131e8:	78bb      	ldrb	r3, [r7, #2]
 80131ea:	9300      	str	r3, [sp, #0]
 80131ec:	2302      	movs	r3, #2
 80131ee:	2106      	movs	r1, #6
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f000 fed5 	bl	8013fa0 <USBH_AC_GetMax>
 80131f6:	4603      	mov	r3, r0
 80131f8:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);               /* length   */
    if(req_status != USBH_BUSY)
 80131fa:	7bfb      	ldrb	r3, [r7, #15]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d04c      	beq.n	801329a <USBH_AUDIO_CSRequest+0x18e>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8013200:	693b      	ldr	r3, [r7, #16]
 8013202:	2207      	movs	r2, #7
 8013204:	705a      	strb	r2, [r3, #1]
      VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8013212:	3302      	adds	r3, #2
 8013214:	881b      	ldrh	r3, [r3, #0]
 8013216:	021b      	lsls	r3, r3, #8
 8013218:	b29b      	uxth	r3, r3
 801321a:	4313      	orrs	r3, r2
 801321c:	817b      	strh	r3, [r7, #10]
      AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 801321e:	897a      	ldrh	r2, [r7, #10]
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

      if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8013232:	429a      	cmp	r2, r3
 8013234:	d231      	bcs.n	801329a <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 801323c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
      }
    }
    break;
 8013240:	e02b      	b.n	801329a <USBH_AUDIO_CSRequest+0x18e>

  case AUDIO_REQ_GET_RESOLUTION:
    req_status = USBH_AC_GetRes(phost,
 8013242:	78fa      	ldrb	r2, [r7, #3]
 8013244:	2302      	movs	r3, #2
 8013246:	9301      	str	r3, [sp, #4]
 8013248:	78bb      	ldrb	r3, [r7, #2]
 801324a:	9300      	str	r3, [sp, #0]
 801324c:	2302      	movs	r3, #2
 801324e:	2106      	movs	r1, #6
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f000 ff39 	bl	80140c8 <USBH_AC_GetRes>
 8013256:	4603      	mov	r3, r0
 8013258:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);                /* length   */
    if(req_status != USBH_BUSY)
 801325a:	7bfb      	ldrb	r3, [r7, #15]
 801325c:	2b01      	cmp	r3, #1
 801325e:	d01e      	beq.n	801329e <USBH_AUDIO_CSRequest+0x192>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	2208      	movs	r2, #8
 8013264:	705a      	strb	r2, [r3, #1]
      ResolutionCtl =LE16(&AUDIO_Handle->mem[0]);
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8013272:	3302      	adds	r3, #2
 8013274:	881b      	ldrh	r3, [r3, #0]
 8013276:	021b      	lsls	r3, r3, #8
 8013278:	b29b      	uxth	r3, r3
 801327a:	4313      	orrs	r3, r2
 801327c:	81bb      	strh	r3, [r7, #12]
      AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 801327e:	89ba      	ldrh	r2, [r7, #12]
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    }
    break;
 8013286:	e00a      	b.n	801329e <USBH_AUDIO_CSRequest+0x192>


  case AUDIO_REQ_CS_IDLE:
    status = USBH_OK;
 8013288:	2300      	movs	r3, #0
 801328a:	75fb      	strb	r3, [r7, #23]
    break;
 801328c:	e008      	b.n	80132a0 <USBH_AUDIO_CSRequest+0x194>

  default:
    break;
 801328e:	bf00      	nop
 8013290:	e006      	b.n	80132a0 <USBH_AUDIO_CSRequest+0x194>
    break;
 8013292:	bf00      	nop
 8013294:	e004      	b.n	80132a0 <USBH_AUDIO_CSRequest+0x194>
    break;
 8013296:	bf00      	nop
 8013298:	e002      	b.n	80132a0 <USBH_AUDIO_CSRequest+0x194>
    break;
 801329a:	bf00      	nop
 801329c:	e000      	b.n	80132a0 <USBH_AUDIO_CSRequest+0x194>
    break;
 801329e:	bf00      	nop
  }
  return status;
 80132a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3718      	adds	r7, #24
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}
 80132aa:	bf00      	nop

080132ac <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b084      	sub	sp, #16
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 80132b4:	2301      	movs	r3, #1
 80132b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 80132b8:	2301      	movs	r3, #1
 80132ba:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80132c2:	69db      	ldr	r3, [r3, #28]
 80132c4:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80132d2:	461a      	mov	r2, r3
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f7ff ff19 	bl	801310c <USBH_AUDIO_CSRequest>
 80132da:	4603      	mov	r3, r0
 80132dc:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if(cs_status != USBH_BUSY)
 80132de:	7bbb      	ldrb	r3, [r7, #14]
 80132e0:	2b01      	cmp	r3, #1
 80132e2:	d02a      	beq.n	801333a <USBH_AUDIO_HandleCSRequest+0x8e>
  {

    if(AUDIO_Handle->temp_channels == 1U)
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80132ea:	2b01      	cmp	r3, #1
 80132ec:	d10c      	bne.n	8013308 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
        AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = 0U;
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	2200      	movs	r2, #0
 80132fe:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        status = USBH_OK;
 8013302:	2300      	movs	r3, #0
 8013304:	73fb      	strb	r3, [r7, #15]
 8013306:	e007      	b.n	8013318 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 801330e:	3b01      	subs	r3, #1
 8013310:	b2da      	uxtb	r2, r3
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	2206      	movs	r2, #6
 801331c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_URB_EVENT;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2202      	movs	r2, #2
 8013322:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013332:	2200      	movs	r2, #0
 8013334:	4619      	mov	r1, r3
 8013336:	f003 f907 	bl	8016548 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 801333a:	7bfb      	ldrb	r3, [r7, #15]
}
 801333c:	4618      	mov	r0, r3
 801333e:	3710      	adds	r7, #16
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}

08013344 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process (USBH_HandleTypeDef *phost)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 801334c:	2301      	movs	r3, #1
 801334e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013356:	69db      	ldr	r3, [r3, #28]
 8013358:	60bb      	str	r3, [r7, #8]

  if(AUDIO_Handle->headphone.supported == 1U)
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8013360:	2b01      	cmp	r3, #1
 8013362:	d102      	bne.n	801336a <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream (phost);
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f001 f8c1 	bl	80144ec <USBH_AUDIO_OutputStream>
  }

  if(AUDIO_Handle->microphone.supported == 1U)
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8013370:	2b01      	cmp	r3, #1
 8013372:	d102      	bne.n	801337a <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream (phost);
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f000 fff7 	bl	8014368 <USBH_AUDIO_InputStream>
  }

  return status;
 801337a:	7bfb      	ldrb	r3, [r7, #15]
}
 801337c:	4618      	mov	r0, r3
 801337e:	3710      	adds	r7, #16
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess (USBH_HandleTypeDef *phost)
{
 8013384:	b480      	push	{r7}
 8013386:	b083      	sub	sp, #12
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 801338c:	2300      	movs	r3, #0
}
 801338e:	4618      	mov	r0, r3
 8013390:	370c      	adds	r7, #12
 8013392:	46bd      	mov	sp, r7
 8013394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013398:	4770      	bx	lr

0801339a <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 801339a:	b480      	push	{r7}
 801339c:	b085      	sub	sp, #20
 801339e:	af00      	add	r7, sp, #0
 80133a0:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 80133a2:	2302      	movs	r3, #2
 80133a4:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80133ac:	69db      	ldr	r3, [r3, #28]
 80133ae:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80133b0:	2300      	movs	r3, #0
 80133b2:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80133b4:	2300      	movs	r3, #0
 80133b6:	73fb      	strb	r3, [r7, #15]
 80133b8:	e09e      	b.n	80134f8 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 80133ba:	7bfb      	ldrb	r3, [r7, #15]
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	211a      	movs	r1, #26
 80133c0:	fb01 f303 	mul.w	r3, r1, r3
 80133c4:	4413      	add	r3, r2
 80133c6:	f203 3343 	addw	r3, r3, #835	; 0x343
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	f040 8090 	bne.w	80134f2 <USBH_AUDIO_FindAudioStreamingIN+0x158>
       (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80133d2:	7bfb      	ldrb	r3, [r7, #15]
 80133d4:	687a      	ldr	r2, [r7, #4]
 80133d6:	211a      	movs	r1, #26
 80133d8:	fb01 f303 	mul.w	r3, r1, r3
 80133dc:	4413      	add	r3, r2
 80133de:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80133e2:	781b      	ldrb	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 80133e4:	2b02      	cmp	r3, #2
 80133e6:	f040 8084 	bne.w	80134f2 <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 80133ea:	7bfb      	ldrb	r3, [r7, #15]
 80133ec:	687a      	ldr	r2, [r7, #4]
 80133ee:	211a      	movs	r1, #26
 80133f0:	fb01 f303 	mul.w	r3, r1, r3
 80133f4:	4413      	add	r3, r2
 80133f6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	b25b      	sxtb	r3, r3
 80133fe:	2b00      	cmp	r3, #0
 8013400:	da77      	bge.n	80134f2 <USBH_AUDIO_FindAudioStreamingIN+0x158>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8013402:	7bfb      	ldrb	r3, [r7, #15]
 8013404:	687a      	ldr	r2, [r7, #4]
 8013406:	211a      	movs	r1, #26
 8013408:	fb01 f303 	mul.w	r3, r1, r3
 801340c:	4413      	add	r3, r2
 801340e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8013412:	881b      	ldrh	r3, [r3, #0]
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8013414:	2b00      	cmp	r3, #0
 8013416:	d06c      	beq.n	80134f2 <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013418:	7bfb      	ldrb	r3, [r7, #15]
 801341a:	7bba      	ldrb	r2, [r7, #14]
 801341c:	6879      	ldr	r1, [r7, #4]
 801341e:	201a      	movs	r0, #26
 8013420:	fb00 f303 	mul.w	r3, r0, r3
 8013424:	440b      	add	r3, r1
 8013426:	f203 334a 	addw	r3, r3, #842	; 0x34a
 801342a:	7818      	ldrb	r0, [r3, #0]
 801342c:	68b9      	ldr	r1, [r7, #8]
 801342e:	4613      	mov	r3, r2
 8013430:	009b      	lsls	r3, r3, #2
 8013432:	4413      	add	r3, r2
 8013434:	005b      	lsls	r3, r3, #1
 8013436:	440b      	add	r3, r1
 8013438:	3306      	adds	r3, #6
 801343a:	4602      	mov	r2, r0
 801343c:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801343e:	7bfb      	ldrb	r3, [r7, #15]
 8013440:	7bba      	ldrb	r2, [r7, #14]
 8013442:	6879      	ldr	r1, [r7, #4]
 8013444:	201a      	movs	r0, #26
 8013446:	fb00 f303 	mul.w	r3, r0, r3
 801344a:	440b      	add	r3, r1
 801344c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8013450:	8818      	ldrh	r0, [r3, #0]
 8013452:	68b9      	ldr	r1, [r7, #8]
 8013454:	4613      	mov	r3, r2
 8013456:	009b      	lsls	r3, r3, #2
 8013458:	4413      	add	r3, r2
 801345a:	005b      	lsls	r3, r3, #1
 801345c:	440b      	add	r3, r1
 801345e:	3308      	adds	r3, #8
 8013460:	4602      	mov	r2, r0
 8013462:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8013464:	7bfb      	ldrb	r3, [r7, #15]
 8013466:	7bba      	ldrb	r2, [r7, #14]
 8013468:	6879      	ldr	r1, [r7, #4]
 801346a:	201a      	movs	r0, #26
 801346c:	fb00 f303 	mul.w	r3, r0, r3
 8013470:	440b      	add	r3, r1
 8013472:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8013476:	7818      	ldrb	r0, [r3, #0]
 8013478:	68b9      	ldr	r1, [r7, #8]
 801347a:	4613      	mov	r3, r2
 801347c:	009b      	lsls	r3, r3, #2
 801347e:	4413      	add	r3, r2
 8013480:	005b      	lsls	r3, r3, #1
 8013482:	440b      	add	r3, r1
 8013484:	330b      	adds	r3, #11
 8013486:	4602      	mov	r2, r0
 8013488:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 801348a:	7bfb      	ldrb	r3, [r7, #15]
 801348c:	7bba      	ldrb	r2, [r7, #14]
 801348e:	6879      	ldr	r1, [r7, #4]
 8013490:	201a      	movs	r0, #26
 8013492:	fb00 f303 	mul.w	r3, r0, r3
 8013496:	440b      	add	r3, r1
 8013498:	f203 3341 	addw	r3, r3, #833	; 0x341
 801349c:	7818      	ldrb	r0, [r3, #0]
 801349e:	68b9      	ldr	r1, [r7, #8]
 80134a0:	4613      	mov	r3, r2
 80134a2:	009b      	lsls	r3, r3, #2
 80134a4:	4413      	add	r3, r2
 80134a6:	005b      	lsls	r3, r3, #1
 80134a8:	440b      	add	r3, r1
 80134aa:	330a      	adds	r3, #10
 80134ac:	4602      	mov	r2, r0
 80134ae:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80134b0:	7bfb      	ldrb	r3, [r7, #15]
 80134b2:	687a      	ldr	r2, [r7, #4]
 80134b4:	211a      	movs	r1, #26
 80134b6:	fb01 f303 	mul.w	r3, r1, r3
 80134ba:	4413      	add	r3, r2
 80134bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	7bba      	ldrb	r2, [r7, #14]
 80134c4:	b298      	uxth	r0, r3
 80134c6:	68b9      	ldr	r1, [r7, #8]
 80134c8:	4613      	mov	r3, r2
 80134ca:	009b      	lsls	r3, r3, #2
 80134cc:	4413      	add	r3, r2
 80134ce:	005b      	lsls	r3, r3, #1
 80134d0:	440b      	add	r3, r1
 80134d2:	330e      	adds	r3, #14
 80134d4:	4602      	mov	r2, r0
 80134d6:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 80134d8:	7bba      	ldrb	r2, [r7, #14]
 80134da:	68b9      	ldr	r1, [r7, #8]
 80134dc:	4613      	mov	r3, r2
 80134de:	009b      	lsls	r3, r3, #2
 80134e0:	4413      	add	r3, r2
 80134e2:	005b      	lsls	r3, r3, #1
 80134e4:	440b      	add	r3, r1
 80134e6:	330c      	adds	r3, #12
 80134e8:	2201      	movs	r2, #1
 80134ea:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80134ec:	7bbb      	ldrb	r3, [r7, #14]
 80134ee:	3301      	adds	r3, #1
 80134f0:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80134f2:	7bfb      	ldrb	r3, [r7, #15]
 80134f4:	3301      	adds	r3, #1
 80134f6:	73fb      	strb	r3, [r7, #15]
 80134f8:	7bfb      	ldrb	r3, [r7, #15]
 80134fa:	2b09      	cmp	r3, #9
 80134fc:	f67f af5d 	bls.w	80133ba <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if(alt_settings > 0U)
 8013500:	7bbb      	ldrb	r3, [r7, #14]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d001      	beq.n	801350a <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
     status = USBH_OK;
 8013506:	2300      	movs	r3, #0
 8013508:	737b      	strb	r3, [r7, #13]
  }

  return status;
 801350a:	7b7b      	ldrb	r3, [r7, #13]
}
 801350c:	4618      	mov	r0, r3
 801350e:	3714      	adds	r7, #20
 8013510:	46bd      	mov	sp, r7
 8013512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013516:	4770      	bx	lr

08013518 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8013518:	b480      	push	{r7}
 801351a:	b085      	sub	sp, #20
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8013520:	2302      	movs	r3, #2
 8013522:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801352a:	69db      	ldr	r3, [r3, #28]
 801352c:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 801352e:	2300      	movs	r3, #0
 8013530:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8013532:	2300      	movs	r3, #0
 8013534:	73fb      	strb	r3, [r7, #15]
 8013536:	e09e      	b.n	8013676 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 8013538:	7bfb      	ldrb	r3, [r7, #15]
 801353a:	687a      	ldr	r2, [r7, #4]
 801353c:	211a      	movs	r1, #26
 801353e:	fb01 f303 	mul.w	r3, r1, r3
 8013542:	4413      	add	r3, r2
 8013544:	f203 3343 	addw	r3, r3, #835	; 0x343
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	2b01      	cmp	r3, #1
 801354c:	f040 8090 	bne.w	8013670 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
       (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8013550:	7bfb      	ldrb	r3, [r7, #15]
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	211a      	movs	r1, #26
 8013556:	fb01 f303 	mul.w	r3, r1, r3
 801355a:	4413      	add	r3, r2
 801355c:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8013560:	781b      	ldrb	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 8013562:	2b02      	cmp	r3, #2
 8013564:	f040 8084 	bne.w	8013670 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if(((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8013568:	7bfb      	ldrb	r3, [r7, #15]
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	211a      	movs	r1, #26
 801356e:	fb01 f303 	mul.w	r3, r1, r3
 8013572:	4413      	add	r3, r2
 8013574:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8013578:	781b      	ldrb	r3, [r3, #0]
 801357a:	b25b      	sxtb	r3, r3
 801357c:	2b00      	cmp	r3, #0
 801357e:	db77      	blt.n	8013670 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8013580:	7bfb      	ldrb	r3, [r7, #15]
 8013582:	687a      	ldr	r2, [r7, #4]
 8013584:	211a      	movs	r1, #26
 8013586:	fb01 f303 	mul.w	r3, r1, r3
 801358a:	4413      	add	r3, r2
 801358c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8013590:	881b      	ldrh	r3, [r3, #0]
      if(((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8013592:	2b00      	cmp	r3, #0
 8013594:	d06c      	beq.n	8013670 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013596:	7bfb      	ldrb	r3, [r7, #15]
 8013598:	7bba      	ldrb	r2, [r7, #14]
 801359a:	6879      	ldr	r1, [r7, #4]
 801359c:	201a      	movs	r0, #26
 801359e:	fb00 f303 	mul.w	r3, r0, r3
 80135a2:	440b      	add	r3, r1
 80135a4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80135a8:	7818      	ldrb	r0, [r3, #0]
 80135aa:	68b9      	ldr	r1, [r7, #8]
 80135ac:	4613      	mov	r3, r2
 80135ae:	009b      	lsls	r3, r3, #2
 80135b0:	4413      	add	r3, r2
 80135b2:	005b      	lsls	r3, r3, #1
 80135b4:	440b      	add	r3, r1
 80135b6:	3338      	adds	r3, #56	; 0x38
 80135b8:	4602      	mov	r2, r0
 80135ba:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80135bc:	7bfb      	ldrb	r3, [r7, #15]
 80135be:	7bba      	ldrb	r2, [r7, #14]
 80135c0:	6879      	ldr	r1, [r7, #4]
 80135c2:	201a      	movs	r0, #26
 80135c4:	fb00 f303 	mul.w	r3, r0, r3
 80135c8:	440b      	add	r3, r1
 80135ca:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80135ce:	8818      	ldrh	r0, [r3, #0]
 80135d0:	68b9      	ldr	r1, [r7, #8]
 80135d2:	4613      	mov	r3, r2
 80135d4:	009b      	lsls	r3, r3, #2
 80135d6:	4413      	add	r3, r2
 80135d8:	005b      	lsls	r3, r3, #1
 80135da:	440b      	add	r3, r1
 80135dc:	333a      	adds	r3, #58	; 0x3a
 80135de:	4602      	mov	r2, r0
 80135e0:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80135e2:	7bfb      	ldrb	r3, [r7, #15]
 80135e4:	7bba      	ldrb	r2, [r7, #14]
 80135e6:	6879      	ldr	r1, [r7, #4]
 80135e8:	201a      	movs	r0, #26
 80135ea:	fb00 f303 	mul.w	r3, r0, r3
 80135ee:	440b      	add	r3, r1
 80135f0:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80135f4:	7818      	ldrb	r0, [r3, #0]
 80135f6:	68b9      	ldr	r1, [r7, #8]
 80135f8:	4613      	mov	r3, r2
 80135fa:	009b      	lsls	r3, r3, #2
 80135fc:	4413      	add	r3, r2
 80135fe:	005b      	lsls	r3, r3, #1
 8013600:	440b      	add	r3, r1
 8013602:	333d      	adds	r3, #61	; 0x3d
 8013604:	4602      	mov	r2, r0
 8013606:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8013608:	7bfb      	ldrb	r3, [r7, #15]
 801360a:	7bba      	ldrb	r2, [r7, #14]
 801360c:	6879      	ldr	r1, [r7, #4]
 801360e:	201a      	movs	r0, #26
 8013610:	fb00 f303 	mul.w	r3, r0, r3
 8013614:	440b      	add	r3, r1
 8013616:	f203 3341 	addw	r3, r3, #833	; 0x341
 801361a:	7818      	ldrb	r0, [r3, #0]
 801361c:	68b9      	ldr	r1, [r7, #8]
 801361e:	4613      	mov	r3, r2
 8013620:	009b      	lsls	r3, r3, #2
 8013622:	4413      	add	r3, r2
 8013624:	005b      	lsls	r3, r3, #1
 8013626:	440b      	add	r3, r1
 8013628:	333c      	adds	r3, #60	; 0x3c
 801362a:	4602      	mov	r2, r0
 801362c:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 801362e:	7bfb      	ldrb	r3, [r7, #15]
 8013630:	687a      	ldr	r2, [r7, #4]
 8013632:	211a      	movs	r1, #26
 8013634:	fb01 f303 	mul.w	r3, r1, r3
 8013638:	4413      	add	r3, r2
 801363a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	7bba      	ldrb	r2, [r7, #14]
 8013642:	b298      	uxth	r0, r3
 8013644:	68b9      	ldr	r1, [r7, #8]
 8013646:	4613      	mov	r3, r2
 8013648:	009b      	lsls	r3, r3, #2
 801364a:	4413      	add	r3, r2
 801364c:	005b      	lsls	r3, r3, #1
 801364e:	440b      	add	r3, r1
 8013650:	3340      	adds	r3, #64	; 0x40
 8013652:	4602      	mov	r2, r0
 8013654:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8013656:	7bba      	ldrb	r2, [r7, #14]
 8013658:	68b9      	ldr	r1, [r7, #8]
 801365a:	4613      	mov	r3, r2
 801365c:	009b      	lsls	r3, r3, #2
 801365e:	4413      	add	r3, r2
 8013660:	005b      	lsls	r3, r3, #1
 8013662:	440b      	add	r3, r1
 8013664:	333e      	adds	r3, #62	; 0x3e
 8013666:	2201      	movs	r2, #1
 8013668:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 801366a:	7bbb      	ldrb	r3, [r7, #14]
 801366c:	3301      	adds	r3, #1
 801366e:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8013670:	7bfb      	ldrb	r3, [r7, #15]
 8013672:	3301      	adds	r3, #1
 8013674:	73fb      	strb	r3, [r7, #15]
 8013676:	7bfb      	ldrb	r3, [r7, #15]
 8013678:	2b09      	cmp	r3, #9
 801367a:	f67f af5d 	bls.w	8013538 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if(alt_settings > 0U)
 801367e:	7bbb      	ldrb	r3, [r7, #14]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d001      	beq.n	8013688 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
     status = USBH_OK;
 8013684:	2300      	movs	r3, #0
 8013686:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8013688:	7b7b      	ldrb	r3, [r7, #13]
}
 801368a:	4618      	mov	r0, r3
 801368c:	3714      	adds	r7, #20
 801368e:	46bd      	mov	sp, r7
 8013690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013694:	4770      	bx	lr

08013696 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8013696:	b580      	push	{r7, lr}
 8013698:	b084      	sub	sp, #16
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 801369e:	2302      	movs	r3, #2
 80136a0:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80136a8:	69db      	ldr	r3, [r3, #28]
 80136aa:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 80136ac:	23ff      	movs	r3, #255	; 0xff
 80136ae:	2201      	movs	r2, #1
 80136b0:	2101      	movs	r1, #1
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f001 f9f2 	bl	8014a9c <USBH_FindInterface>
 80136b8:	4603      	mov	r3, r0
 80136ba:	73fb      	strb	r3, [r7, #15]
  if(interface == 0xFFU)
 80136bc:	7bfb      	ldrb	r3, [r7, #15]
 80136be:	2bff      	cmp	r3, #255	; 0xff
 80136c0:	d101      	bne.n	80136c6 <USBH_AUDIO_FindHIDControl+0x30>
  {
    return USBH_FAIL;
 80136c2:	2302      	movs	r3, #2
 80136c4:	e062      	b.n	801378c <USBH_AUDIO_FindHIDControl+0xf6>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80136c6:	2300      	movs	r3, #0
 80136c8:	73fb      	strb	r3, [r7, #15]
 80136ca:	e05b      	b.n	8013784 <USBH_AUDIO_FindHIDControl+0xee>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80136cc:	7bfb      	ldrb	r3, [r7, #15]
 80136ce:	687a      	ldr	r2, [r7, #4]
 80136d0:	211a      	movs	r1, #26
 80136d2:	fb01 f303 	mul.w	r3, r1, r3
 80136d6:	4413      	add	r3, r2
 80136d8:	f203 3343 	addw	r3, r3, #835	; 0x343
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	2b03      	cmp	r3, #3
 80136e0:	d14d      	bne.n	801377e <USBH_AUDIO_FindHIDControl+0xe8>
       (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80136e2:	7bfb      	ldrb	r3, [r7, #15]
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	211a      	movs	r1, #26
 80136e8:	fb01 f303 	mul.w	r3, r1, r3
 80136ec:	4413      	add	r3, r2
 80136ee:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80136f2:	881b      	ldrh	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d042      	beq.n	801377e <USBH_AUDIO_FindHIDControl+0xe8>
    {
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 80136f8:	7bfb      	ldrb	r3, [r7, #15]
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	211a      	movs	r1, #26
 80136fe:	fb01 f303 	mul.w	r3, r1, r3
 8013702:	4413      	add	r3, r2
 8013704:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	b25b      	sxtb	r3, r3
 801370c:	2b00      	cmp	r3, #0
 801370e:	da36      	bge.n	801377e <USBH_AUDIO_FindHIDControl+0xe8>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013710:	7bfb      	ldrb	r3, [r7, #15]
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	211a      	movs	r1, #26
 8013716:	fb01 f303 	mul.w	r3, r1, r3
 801371a:	4413      	add	r3, r2
 801371c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8013720:	781a      	ldrb	r2, [r3, #0]
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8013728:	7bfb      	ldrb	r3, [r7, #15]
 801372a:	687a      	ldr	r2, [r7, #4]
 801372c:	211a      	movs	r1, #26
 801372e:	fb01 f303 	mul.w	r3, r1, r3
 8013732:	4413      	add	r3, r2
 8013734:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8013738:	881a      	ldrh	r2, [r3, #0]
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8013740:	7bfb      	ldrb	r3, [r7, #15]
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	211a      	movs	r1, #26
 8013746:	fb01 f303 	mul.w	r3, r1, r3
 801374a:	4413      	add	r3, r2
 801374c:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8013750:	781a      	ldrb	r2, [r3, #0]
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8013758:	7bfb      	ldrb	r3, [r7, #15]
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	211a      	movs	r1, #26
 801375e:	fb01 f303 	mul.w	r3, r1, r3
 8013762:	4413      	add	r3, r2
 8013764:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013768:	781a      	ldrb	r2, [r3, #0]
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	2201      	movs	r2, #1
 8013774:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 8013778:	2300      	movs	r3, #0
 801377a:	73bb      	strb	r3, [r7, #14]
        break;
 801377c:	e005      	b.n	801378a <USBH_AUDIO_FindHIDControl+0xf4>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 801377e:	7bfb      	ldrb	r3, [r7, #15]
 8013780:	3301      	adds	r3, #1
 8013782:	73fb      	strb	r3, [r7, #15]
 8013784:	7bfb      	ldrb	r3, [r7, #15]
 8013786:	2b09      	cmp	r3, #9
 8013788:	d9a0      	bls.n	80136cc <USBH_AUDIO_FindHIDControl+0x36>
      }
    }
  }

  return status;
 801378a:	7bbb      	ldrb	r3, [r7, #14]
}
 801378c:	4618      	mov	r0, r3
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b086      	sub	sp, #24
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 801379c:	2300      	movs	r3, #0
 801379e:	74fb      	strb	r3, [r7, #19]
  uint8_t                       itf_number = 0U;
 80137a0:	2300      	movs	r3, #0
 80137a2:	74bb      	strb	r3, [r7, #18]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80137aa:	69db      	ldr	r3, [r3, #28]
 80137ac:	60fb      	str	r3, [r7, #12]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	331c      	adds	r3, #28
 80137b2:	617b      	str	r3, [r7, #20]
  ptr = USB_LEN_CFG_DESC;
 80137b4:	2309      	movs	r3, #9
 80137b6:	813b      	strh	r3, [r7, #8]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2200      	movs	r2, #0
 80137bc:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2200      	movs	r2, #0
 80137c4:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	2200      	movs	r2, #0
 80137cc:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	2200      	movs	r2, #0
 80137d4:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while(ptr < phost->device.CfgDesc.wTotalLength)
 80137d8:	e034      	b.n	8013844 <USBH_AUDIO_ParseCSDescriptors+0xb0>
  {
    pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80137da:	f107 0308 	add.w	r3, r7, #8
 80137de:	4619      	mov	r1, r3
 80137e0:	6978      	ldr	r0, [r7, #20]
 80137e2:	f002 f8f7 	bl	80159d4 <USBH_GetNextDesc>
 80137e6:	6178      	str	r0, [r7, #20]

    switch (pdesc->bDescriptorType)
 80137e8:	697b      	ldr	r3, [r7, #20]
 80137ea:	785b      	ldrb	r3, [r3, #1]
 80137ec:	2b04      	cmp	r3, #4
 80137ee:	d002      	beq.n	80137f6 <USBH_AUDIO_ParseCSDescriptors+0x62>
 80137f0:	2b24      	cmp	r3, #36	; 0x24
 80137f2:	d00f      	beq.n	8013814 <USBH_AUDIO_ParseCSDescriptors+0x80>
 80137f4:	e025      	b.n	8013842 <USBH_AUDIO_ParseCSDescriptors+0xae>
    {

    case USB_DESC_TYPE_INTERFACE:
      itf_number = *((uint8_t *)(void *)pdesc + 2U);
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	789b      	ldrb	r3, [r3, #2]
 80137fa:	74bb      	strb	r3, [r7, #18]
      alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	78db      	ldrb	r3, [r3, #3]
 8013800:	72fb      	strb	r3, [r7, #11]
      itf_index = USBH_FindInterfaceIndex (phost, itf_number, alt_setting);
 8013802:	7afa      	ldrb	r2, [r7, #11]
 8013804:	7cbb      	ldrb	r3, [r7, #18]
 8013806:	4619      	mov	r1, r3
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f001 f98d 	bl	8014b28 <USBH_FindInterfaceIndex>
 801380e:	4603      	mov	r3, r0
 8013810:	74fb      	strb	r3, [r7, #19]
      break;
 8013812:	e017      	b.n	8013844 <USBH_AUDIO_ParseCSDescriptors+0xb0>

    case USB_DESC_TYPE_CS_INTERFACE:
      if(itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 801381a:	7cba      	ldrb	r2, [r7, #18]
 801381c:	429a      	cmp	r2, r3
 801381e:	d811      	bhi.n	8013844 <USBH_AUDIO_ParseCSDescriptors+0xb0>
      {

        ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8013826:	7cfb      	ldrb	r3, [r7, #19]
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	211a      	movs	r1, #26
 801382c:	fb01 f303 	mul.w	r3, r1, r3
 8013830:	4413      	add	r3, r2
 8013832:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	4619      	mov	r1, r3
 801383c:	f000 f80e 	bl	801385c <ParseCSDescriptors>
                           phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                           (uint8_t *)(void *)pdesc);
      }
      break;
 8013840:	e000      	b.n	8013844 <USBH_AUDIO_ParseCSDescriptors+0xb0>

    default:
      break;
 8013842:	bf00      	nop
  while(ptr < phost->device.CfgDesc.wTotalLength)
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8b3 2336 	ldrh.w	r2, [r3, #822]	; 0x336
 801384a:	893b      	ldrh	r3, [r7, #8]
 801384c:	429a      	cmp	r2, r3
 801384e:	d8c4      	bhi.n	80137da <USBH_AUDIO_ParseCSDescriptors+0x46>
    }
  }
  return USBH_OK;
 8013850:	2300      	movs	r3, #0
}
 8013852:	4618      	mov	r0, r3
 8013854:	3718      	adds	r7, #24
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
	...

0801385c <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                      uint8_t ac_subclass,
                                      uint8_t *pdesc)
{
 801385c:	b480      	push	{r7}
 801385e:	b085      	sub	sp, #20
 8013860:	af00      	add	r7, sp, #0
 8013862:	60f8      	str	r0, [r7, #12]
 8013864:	460b      	mov	r3, r1
 8013866:	607a      	str	r2, [r7, #4]
 8013868:	72fb      	strb	r3, [r7, #11]
  if(ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 801386a:	7afb      	ldrb	r3, [r7, #11]
 801386c:	2b01      	cmp	r3, #1
 801386e:	d163      	bne.n	8013938 <ParseCSDescriptors+0xdc>
  {
    switch(pdesc[2])
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	3302      	adds	r3, #2
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	3b01      	subs	r3, #1
 8013878:	2b05      	cmp	r3, #5
 801387a:	f200 8081 	bhi.w	8013980 <ParseCSDescriptors+0x124>
 801387e:	a201      	add	r2, pc, #4	; (adr r2, 8013884 <ParseCSDescriptors+0x28>)
 8013880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013884:	0801389d 	.word	0x0801389d
 8013888:	080138a5 	.word	0x080138a5
 801388c:	080138c1 	.word	0x080138c1
 8013890:	0801391b 	.word	0x0801391b
 8013894:	080138fd 	.word	0x080138fd
 8013898:	080138df 	.word	0x080138df
    {
    case UAC_HEADER:
      class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	687a      	ldr	r2, [r7, #4]
 80138a0:	601a      	str	r2, [r3, #0]
      break;
 80138a2:	e070      	b.n	8013986 <ParseCSDescriptors+0x12a>

    case UAC_INPUT_TERMINAL:
      class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef*)(void *)pdesc;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80138aa:	1c5a      	adds	r2, r3, #1
 80138ac:	b291      	uxth	r1, r2
 80138ae:	68fa      	ldr	r2, [r7, #12]
 80138b0:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 80138b4:	68fa      	ldr	r2, [r7, #12]
 80138b6:	009b      	lsls	r3, r3, #2
 80138b8:	4413      	add	r3, r2
 80138ba:	687a      	ldr	r2, [r7, #4]
 80138bc:	605a      	str	r2, [r3, #4]
      break;
 80138be:	e062      	b.n	8013986 <ParseCSDescriptors+0x12a>

    case UAC_OUTPUT_TERMINAL:
      class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef*)(void *)pdesc;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80138c6:	1c5a      	adds	r2, r3, #1
 80138c8:	b291      	uxth	r1, r2
 80138ca:	68fa      	ldr	r2, [r7, #12]
 80138cc:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80138d0:	68fa      	ldr	r2, [r7, #12]
 80138d2:	3304      	adds	r3, #4
 80138d4:	009b      	lsls	r3, r3, #2
 80138d6:	4413      	add	r3, r2
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	605a      	str	r2, [r3, #4]
      break;
 80138dc:	e053      	b.n	8013986 <ParseCSDescriptors+0x12a>

    case UAC_FEATURE_UNIT:
      class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef*)(void *)pdesc;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80138e4:	1c5a      	adds	r2, r3, #1
 80138e6:	b291      	uxth	r1, r2
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	3308      	adds	r3, #8
 80138f2:	009b      	lsls	r3, r3, #2
 80138f4:	4413      	add	r3, r2
 80138f6:	687a      	ldr	r2, [r7, #4]
 80138f8:	605a      	str	r2, [r3, #4]
      break;
 80138fa:	e044      	b.n	8013986 <ParseCSDescriptors+0x12a>

    case UAC_SELECTOR_UNIT:
      class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef*)(void *)pdesc;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8013902:	1c5a      	adds	r2, r3, #1
 8013904:	b291      	uxth	r1, r2
 8013906:	68fa      	ldr	r2, [r7, #12]
 8013908:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 801390c:	68fa      	ldr	r2, [r7, #12]
 801390e:	3310      	adds	r3, #16
 8013910:	009b      	lsls	r3, r3, #2
 8013912:	4413      	add	r3, r2
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	605a      	str	r2, [r3, #4]
      break;
 8013918:	e035      	b.n	8013986 <ParseCSDescriptors+0x12a>

    case UAC_MIXER_UNIT:
      class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef*)(void *)pdesc;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8013920:	1c5a      	adds	r2, r3, #1
 8013922:	b291      	uxth	r1, r2
 8013924:	68fa      	ldr	r2, [r7, #12]
 8013926:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 801392a:	68fa      	ldr	r2, [r7, #12]
 801392c:	330c      	adds	r3, #12
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	4413      	add	r3, r2
 8013932:	687a      	ldr	r2, [r7, #4]
 8013934:	605a      	str	r2, [r3, #4]
      break;
 8013936:	e026      	b.n	8013986 <ParseCSDescriptors+0x12a>
      break;
    }
  }
  else
  {
    if(ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8013938:	7afb      	ldrb	r3, [r7, #11]
 801393a:	2b02      	cmp	r3, #2
 801393c:	d122      	bne.n	8013984 <ParseCSDescriptors+0x128>
    {
      switch(pdesc[2])
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	3302      	adds	r3, #2
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	2b01      	cmp	r3, #1
 8013946:	d002      	beq.n	801394e <ParseCSDescriptors+0xf2>
 8013948:	2b02      	cmp	r3, #2
 801394a:	d00a      	beq.n	8013962 <ParseCSDescriptors+0x106>
        break;
      case UAC_FORMAT_TYPE:
        class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef*)(void *)pdesc;
        break;
      default:
        break;
 801394c:	e01b      	b.n	8013986 <ParseCSDescriptors+0x12a>
        class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef*)(void *)pdesc;
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8013954:	68fa      	ldr	r2, [r7, #12]
 8013956:	330a      	adds	r3, #10
 8013958:	00db      	lsls	r3, r3, #3
 801395a:	4413      	add	r3, r2
 801395c:	687a      	ldr	r2, [r7, #4]
 801395e:	605a      	str	r2, [r3, #4]
        break;
 8013960:	e011      	b.n	8013986 <ParseCSDescriptors+0x12a>
        class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef*)(void *)pdesc;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8013968:	1c5a      	adds	r2, r3, #1
 801396a:	b291      	uxth	r1, r2
 801396c:	68fa      	ldr	r2, [r7, #12]
 801396e:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8013972:	68fa      	ldr	r2, [r7, #12]
 8013974:	330a      	adds	r3, #10
 8013976:	00db      	lsls	r3, r3, #3
 8013978:	4413      	add	r3, r2
 801397a:	687a      	ldr	r2, [r7, #4]
 801397c:	609a      	str	r2, [r3, #8]
        break;
 801397e:	e002      	b.n	8013986 <ParseCSDescriptors+0x12a>
      break;
 8013980:	bf00      	nop
 8013982:	e000      	b.n	8013986 <ParseCSDescriptors+0x12a>
      }
    }
 8013984:	bf00      	nop
  }

  return USBH_OK;
 8013986:	2300      	movs	r3, #0
}
 8013988:	4618      	mov	r0, r3
 801398a:	3714      	adds	r7, #20
 801398c:	46bd      	mov	sp, r7
 801398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013992:	4770      	bx	lr

08013994 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8013994:	b480      	push	{r7}
 8013996:	b085      	sub	sp, #20
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	460b      	mov	r3, r1
 801399e:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80139a6:	69db      	ldr	r3, [r3, #28]
 80139a8:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80139aa:	2300      	movs	r3, #0
 80139ac:	73fb      	strb	r3, [r7, #15]
 80139ae:	e01b      	b.n	80139e8 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if(AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 80139b0:	7bfb      	ldrb	r3, [r7, #15]
 80139b2:	68ba      	ldr	r2, [r7, #8]
 80139b4:	3322      	adds	r3, #34	; 0x22
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	4413      	add	r3, r2
 80139ba:	689b      	ldr	r3, [r3, #8]
 80139bc:	791b      	ldrb	r3, [r3, #4]
 80139be:	78fa      	ldrb	r2, [r7, #3]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d10e      	bne.n	80139e2 <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 80139c4:	7bfb      	ldrb	r3, [r7, #15]
 80139c6:	68ba      	ldr	r2, [r7, #8]
 80139c8:	3322      	adds	r3, #34	; 0x22
 80139ca:	009b      	lsls	r3, r3, #2
 80139cc:	4413      	add	r3, r2
 80139ce:	689b      	ldr	r3, [r3, #8]
 80139d0:	78db      	ldrb	r3, [r3, #3]
 80139d2:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 80139d4:	78fb      	ldrb	r3, [r7, #3]
 80139d6:	041a      	lsls	r2, r3, #16
 80139d8:	7bfb      	ldrb	r3, [r7, #15]
 80139da:	4313      	orrs	r3, r2
 80139dc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80139e0:	e089      	b.n	8013af6 <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80139e2:	7bfb      	ldrb	r3, [r7, #15]
 80139e4:	3301      	adds	r3, #1
 80139e6:	73fb      	strb	r3, [r7, #15]
 80139e8:	7bfb      	ldrb	r3, [r7, #15]
 80139ea:	b29a      	uxth	r2, r3
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d3dc      	bcc.n	80139b0 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80139f6:	2300      	movs	r3, #0
 80139f8:	73fb      	strb	r3, [r7, #15]
 80139fa:	e026      	b.n	8013a4a <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID)||
 80139fc:	7bfb      	ldrb	r3, [r7, #15]
 80139fe:	68ba      	ldr	r2, [r7, #8]
 8013a00:	3326      	adds	r3, #38	; 0x26
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	4413      	add	r3, r2
 8013a06:	689b      	ldr	r3, [r3, #8]
 8013a08:	795b      	ldrb	r3, [r3, #5]
 8013a0a:	78fa      	ldrb	r2, [r7, #3]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d009      	beq.n	8013a24 <USBH_AUDIO_FindLinkedUnit+0x90>
       (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8013a10:	7bfb      	ldrb	r3, [r7, #15]
 8013a12:	68ba      	ldr	r2, [r7, #8]
 8013a14:	3326      	adds	r3, #38	; 0x26
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	4413      	add	r3, r2
 8013a1a:	689b      	ldr	r3, [r3, #8]
 8013a1c:	799b      	ldrb	r3, [r3, #6]
    if((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID)||
 8013a1e:	78fa      	ldrb	r2, [r7, #3]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d10f      	bne.n	8013a44 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8013a24:	7bfb      	ldrb	r3, [r7, #15]
 8013a26:	68ba      	ldr	r2, [r7, #8]
 8013a28:	3326      	adds	r3, #38	; 0x26
 8013a2a:	009b      	lsls	r3, r3, #2
 8013a2c:	4413      	add	r3, r2
 8013a2e:	689b      	ldr	r3, [r3, #8]
 8013a30:	78db      	ldrb	r3, [r3, #3]
 8013a32:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8013a34:	78fb      	ldrb	r3, [r7, #3]
 8013a36:	041b      	lsls	r3, r3, #16
 8013a38:	461a      	mov	r2, r3
 8013a3a:	7bfb      	ldrb	r3, [r7, #15]
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013a42:	e058      	b.n	8013af6 <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8013a44:	7bfb      	ldrb	r3, [r7, #15]
 8013a46:	3301      	adds	r3, #1
 8013a48:	73fb      	strb	r3, [r7, #15]
 8013a4a:	7bfb      	ldrb	r3, [r7, #15]
 8013a4c:	b29a      	uxth	r2, r3
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d3d1      	bcc.n	80139fc <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8013a58:	2300      	movs	r3, #0
 8013a5a:	73fb      	strb	r3, [r7, #15]
 8013a5c:	e01c      	b.n	8013a98 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if(AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8013a5e:	7bfb      	ldrb	r3, [r7, #15]
 8013a60:	68ba      	ldr	r2, [r7, #8]
 8013a62:	332a      	adds	r3, #42	; 0x2a
 8013a64:	009b      	lsls	r3, r3, #2
 8013a66:	4413      	add	r3, r2
 8013a68:	689b      	ldr	r3, [r3, #8]
 8013a6a:	795b      	ldrb	r3, [r3, #5]
 8013a6c:	78fa      	ldrb	r2, [r7, #3]
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	d10f      	bne.n	8013a92 <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8013a72:	7bfb      	ldrb	r3, [r7, #15]
 8013a74:	68ba      	ldr	r2, [r7, #8]
 8013a76:	332a      	adds	r3, #42	; 0x2a
 8013a78:	009b      	lsls	r3, r3, #2
 8013a7a:	4413      	add	r3, r2
 8013a7c:	689b      	ldr	r3, [r3, #8]
 8013a7e:	78db      	ldrb	r3, [r3, #3]
 8013a80:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8013a82:	78fb      	ldrb	r3, [r7, #3]
 8013a84:	041b      	lsls	r3, r3, #16
 8013a86:	461a      	mov	r2, r3
 8013a88:	7bfb      	ldrb	r3, [r7, #15]
 8013a8a:	4313      	orrs	r3, r2
 8013a8c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8013a90:	e031      	b.n	8013af6 <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8013a92:	7bfb      	ldrb	r3, [r7, #15]
 8013a94:	3301      	adds	r3, #1
 8013a96:	73fb      	strb	r3, [r7, #15]
 8013a98:	7bfb      	ldrb	r3, [r7, #15]
 8013a9a:	b29a      	uxth	r2, r3
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d3db      	bcc.n	8013a5e <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	73fb      	strb	r3, [r7, #15]
 8013aaa:	e01c      	b.n	8013ae6 <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8013aac:	7bfb      	ldrb	r3, [r7, #15]
 8013aae:	68ba      	ldr	r2, [r7, #8]
 8013ab0:	331e      	adds	r3, #30
 8013ab2:	009b      	lsls	r3, r3, #2
 8013ab4:	4413      	add	r3, r2
 8013ab6:	689b      	ldr	r3, [r3, #8]
 8013ab8:	79db      	ldrb	r3, [r3, #7]
 8013aba:	78fa      	ldrb	r2, [r7, #3]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d10f      	bne.n	8013ae0 <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8013ac0:	7bfb      	ldrb	r3, [r7, #15]
 8013ac2:	68ba      	ldr	r2, [r7, #8]
 8013ac4:	331e      	adds	r3, #30
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	4413      	add	r3, r2
 8013aca:	689b      	ldr	r3, [r3, #8]
 8013acc:	78db      	ldrb	r3, [r3, #3]
 8013ace:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8013ad0:	78fb      	ldrb	r3, [r7, #3]
 8013ad2:	041b      	lsls	r3, r3, #16
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	7bfb      	ldrb	r3, [r7, #15]
 8013ad8:	4313      	orrs	r3, r2
 8013ada:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013ade:	e00a      	b.n	8013af6 <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8013ae0:	7bfb      	ldrb	r3, [r7, #15]
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	73fb      	strb	r3, [r7, #15]
 8013ae6:	7bfb      	ldrb	r3, [r7, #15]
 8013ae8:	b29a      	uxth	r2, r3
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d3db      	bcc.n	8013aac <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8013af4:	2300      	movs	r3, #0
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3714      	adds	r7, #20
 8013afa:	46bd      	mov	sp, r7
 8013afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b00:	4770      	bx	lr
	...

08013b04 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b086      	sub	sp, #24
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8013b10:	2300      	movs	r3, #0
 8013b12:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013b1a:	69db      	ldr	r3, [r3, #28]
 8013b1c:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8013b1e:	2300      	movs	r3, #0
 8013b20:	75bb      	strb	r3, [r7, #22]
 8013b22:	e02c      	b.n	8013b7e <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8013b24:	7dbb      	ldrb	r3, [r7, #22]
 8013b26:	693a      	ldr	r2, [r7, #16]
 8013b28:	331a      	adds	r3, #26
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	4413      	add	r3, r2
 8013b2e:	689b      	ldr	r3, [r3, #8]
 8013b30:	791b      	ldrb	r3, [r3, #4]
 8013b32:	4619      	mov	r1, r3
 8013b34:	7dbb      	ldrb	r3, [r7, #22]
 8013b36:	693a      	ldr	r2, [r7, #16]
 8013b38:	331a      	adds	r3, #26
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	4413      	add	r3, r2
 8013b3e:	689b      	ldr	r3, [r3, #8]
 8013b40:	795b      	ldrb	r3, [r3, #5]
 8013b42:	b29b      	uxth	r3, r3
 8013b44:	021b      	lsls	r3, r3, #8
 8013b46:	b29b      	uxth	r3, r3
 8013b48:	430b      	orrs	r3, r1
 8013b4a:	f240 2201 	movw	r2, #513	; 0x201
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	d112      	bne.n	8013b78 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8013b52:	7dbb      	ldrb	r3, [r7, #22]
 8013b54:	693a      	ldr	r2, [r7, #16]
 8013b56:	331a      	adds	r3, #26
 8013b58:	009b      	lsls	r3, r3, #2
 8013b5a:	4413      	add	r3, r2
 8013b5c:	689b      	ldr	r3, [r3, #8]
 8013b5e:	78db      	ldrb	r3, [r3, #3]
 8013b60:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8013b62:	7dbb      	ldrb	r3, [r7, #22]
 8013b64:	693a      	ldr	r2, [r7, #16]
 8013b66:	331a      	adds	r3, #26
 8013b68:	009b      	lsls	r3, r3, #2
 8013b6a:	4413      	add	r3, r2
 8013b6c:	689b      	ldr	r3, [r3, #8]
 8013b6e:	79da      	ldrb	r2, [r3, #7]
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8013b76:	e009      	b.n	8013b8c <USBH_AUDIO_BuildMicrophonePath+0x88>
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8013b78:	7dbb      	ldrb	r3, [r7, #22]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	75bb      	strb	r3, [r7, #22]
 8013b7e:	7dbb      	ldrb	r3, [r7, #22]
 8013b80:	b29a      	uxth	r2, r3
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d3cb      	bcc.n	8013b24 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8013b8c:	7dfb      	ldrb	r3, [r7, #23]
 8013b8e:	4619      	mov	r1, r3
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7ff feff 	bl	8013994 <USBH_AUDIO_FindLinkedUnit>
 8013b96:	60f8      	str	r0, [r7, #12]

    if (!value)
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d101      	bne.n	8013ba2 <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 8013b9e:	2302      	movs	r3, #2
 8013ba0:	e034      	b.n	8013c0c <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	0a1b      	lsrs	r3, r3, #8
 8013baa:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	0c1b      	lsrs	r3, r3, #16
 8013bb0:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8013bb2:	7abb      	ldrb	r3, [r7, #10]
 8013bb4:	3b03      	subs	r3, #3
 8013bb6:	2b03      	cmp	r3, #3
 8013bb8:	d81e      	bhi.n	8013bf8 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8013bba:	a201      	add	r2, pc, #4	; (adr r2, 8013bc0 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8013bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bc0:	08013bef 	.word	0x08013bef
 8013bc4:	08013bdb 	.word	0x08013bdb
 8013bc8:	08013be5 	.word	0x08013be5
 8013bcc:	08013bd1 	.word	0x08013bd1
    {
    case UAC_FEATURE_UNIT:
      AUDIO_Handle->microphone.asociated_feature = Index;
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	7afa      	ldrb	r2, [r7, #11]
 8013bd4:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
      break;
 8013bd8:	e011      	b.n	8013bfe <USBH_AUDIO_BuildMicrophonePath+0xfa>

    case UAC_MIXER_UNIT:
      AUDIO_Handle->microphone.asociated_mixer = Index;
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	7afa      	ldrb	r2, [r7, #11]
 8013bde:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      break;
 8013be2:	e00c      	b.n	8013bfe <USBH_AUDIO_BuildMicrophonePath+0xfa>

    case UAC_SELECTOR_UNIT:
      AUDIO_Handle->microphone.asociated_selector = Index;
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	7afa      	ldrb	r2, [r7, #11]
 8013be8:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
      break;
 8013bec:	e007      	b.n	8013bfe <USBH_AUDIO_BuildMicrophonePath+0xfa>

    case UAC_OUTPUT_TERMINAL:
      AUDIO_Handle->microphone.asociated_terminal = Index;
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	7afa      	ldrb	r2, [r7, #11]
 8013bf2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
      break;
 8013bf6:	e002      	b.n	8013bfe <USBH_AUDIO_BuildMicrophonePath+0xfa>

    default:
      ret = USBH_FAIL;
 8013bf8:	2302      	movs	r3, #2
 8013bfa:	757b      	strb	r3, [r7, #21]
      break;
 8013bfc:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8013bfe:	7abb      	ldrb	r3, [r7, #10]
 8013c00:	2b03      	cmp	r3, #3
 8013c02:	d002      	beq.n	8013c0a <USBH_AUDIO_BuildMicrophonePath+0x106>
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d1c0      	bne.n	8013b8c <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 8013c0a:	7d7b      	ldrb	r3, [r7, #21]
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3718      	adds	r7, #24
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}

08013c14 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b086      	sub	sp, #24
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8013c20:	2300      	movs	r3, #0
 8013c22:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013c2a:	69db      	ldr	r3, [r3, #28]
 8013c2c:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8013c2e:	2300      	movs	r3, #0
 8013c30:	757b      	strb	r3, [r7, #21]
 8013c32:	e02c      	b.n	8013c8e <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 8013c34:	7d7b      	ldrb	r3, [r7, #21]
 8013c36:	693a      	ldr	r2, [r7, #16]
 8013c38:	331a      	adds	r3, #26
 8013c3a:	009b      	lsls	r3, r3, #2
 8013c3c:	4413      	add	r3, r2
 8013c3e:	689b      	ldr	r3, [r3, #8]
 8013c40:	791b      	ldrb	r3, [r3, #4]
 8013c42:	4619      	mov	r1, r3
 8013c44:	7d7b      	ldrb	r3, [r7, #21]
 8013c46:	693a      	ldr	r2, [r7, #16]
 8013c48:	331a      	adds	r3, #26
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	4413      	add	r3, r2
 8013c4e:	689b      	ldr	r3, [r3, #8]
 8013c50:	795b      	ldrb	r3, [r3, #5]
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	021b      	lsls	r3, r3, #8
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	430b      	orrs	r3, r1
 8013c5a:	f240 1201 	movw	r2, #257	; 0x101
 8013c5e:	4293      	cmp	r3, r2
 8013c60:	d112      	bne.n	8013c88 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8013c62:	7d7b      	ldrb	r3, [r7, #21]
 8013c64:	693a      	ldr	r2, [r7, #16]
 8013c66:	331a      	adds	r3, #26
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	4413      	add	r3, r2
 8013c6c:	689b      	ldr	r3, [r3, #8]
 8013c6e:	78db      	ldrb	r3, [r3, #3]
 8013c70:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8013c72:	7d7b      	ldrb	r3, [r7, #21]
 8013c74:	693a      	ldr	r2, [r7, #16]
 8013c76:	331a      	adds	r3, #26
 8013c78:	009b      	lsls	r3, r3, #2
 8013c7a:	4413      	add	r3, r2
 8013c7c:	689b      	ldr	r3, [r3, #8]
 8013c7e:	79da      	ldrb	r2, [r3, #7]
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8013c86:	e009      	b.n	8013c9c <USBH_AUDIO_BuildHeadphonePath+0x88>
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8013c88:	7d7b      	ldrb	r3, [r7, #21]
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	757b      	strb	r3, [r7, #21]
 8013c8e:	7d7b      	ldrb	r3, [r7, #21]
 8013c90:	b29a      	uxth	r2, r3
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d3cb      	bcc.n	8013c34 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for(Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	75bb      	strb	r3, [r7, #22]
 8013ca0:	e011      	b.n	8013cc6 <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if(AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8013ca2:	7dbb      	ldrb	r3, [r7, #22]
 8013ca4:	693a      	ldr	r2, [r7, #16]
 8013ca6:	3317      	adds	r3, #23
 8013ca8:	00db      	lsls	r3, r3, #3
 8013caa:	4413      	add	r3, r2
 8013cac:	689b      	ldr	r3, [r3, #8]
 8013cae:	78db      	ldrb	r3, [r3, #3]
 8013cb0:	7dfa      	ldrb	r2, [r7, #23]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d104      	bne.n	8013cc0 <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	7dba      	ldrb	r2, [r7, #22]
 8013cba:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 8013cbe:	e009      	b.n	8013cd4 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8013cc0:	7dbb      	ldrb	r3, [r7, #22]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	75bb      	strb	r3, [r7, #22]
 8013cc6:	7dbb      	ldrb	r3, [r7, #22]
 8013cc8:	b29a      	uxth	r2, r3
 8013cca:	693b      	ldr	r3, [r7, #16]
 8013ccc:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d3e6      	bcc.n	8013ca2 <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8013cd4:	7dfb      	ldrb	r3, [r7, #23]
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f7ff fe5b 	bl	8013994 <USBH_AUDIO_FindLinkedUnit>
 8013cde:	60f8      	str	r0, [r7, #12]

    if (!value)
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d101      	bne.n	8013cea <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8013ce6:	2302      	movs	r3, #2
 8013ce8:	e04d      	b.n	8013d86 <USBH_AUDIO_BuildHeadphonePath+0x172>
    }

    Index = (uint8_t)(value & 0xFFU);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	0a1b      	lsrs	r3, r3, #8
 8013cf2:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	0c1b      	lsrs	r3, r3, #16
 8013cf8:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8013cfa:	7afb      	ldrb	r3, [r7, #11]
 8013cfc:	3b03      	subs	r3, #3
 8013cfe:	2b03      	cmp	r3, #3
 8013d00:	d836      	bhi.n	8013d70 <USBH_AUDIO_BuildHeadphonePath+0x15c>
 8013d02:	a201      	add	r2, pc, #4	; (adr r2, 8013d08 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8013d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d08:	08013d37 	.word	0x08013d37
 8013d0c:	08013d23 	.word	0x08013d23
 8013d10:	08013d2d 	.word	0x08013d2d
 8013d14:	08013d19 	.word	0x08013d19
    {
    case UAC_FEATURE_UNIT:
      AUDIO_Handle->headphone.asociated_feature = Index;
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	7dba      	ldrb	r2, [r7, #22]
 8013d1c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
      break;
 8013d20:	e02a      	b.n	8013d78 <USBH_AUDIO_BuildHeadphonePath+0x164>

    case UAC_MIXER_UNIT:
      AUDIO_Handle->headphone.asociated_mixer = Index;
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	7dba      	ldrb	r2, [r7, #22]
 8013d26:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
      break;
 8013d2a:	e025      	b.n	8013d78 <USBH_AUDIO_BuildHeadphonePath+0x164>

    case UAC_SELECTOR_UNIT:
      AUDIO_Handle->headphone.asociated_selector = Index;
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	7dba      	ldrb	r2, [r7, #22]
 8013d30:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      break;
 8013d34:	e020      	b.n	8013d78 <USBH_AUDIO_BuildHeadphonePath+0x164>

    case UAC_OUTPUT_TERMINAL:
      AUDIO_Handle->headphone.asociated_terminal = Index;
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	7dba      	ldrb	r2, [r7, #22]
 8013d3a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
      if(LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8013d3e:	7dbb      	ldrb	r3, [r7, #22]
 8013d40:	693a      	ldr	r2, [r7, #16]
 8013d42:	331e      	adds	r3, #30
 8013d44:	009b      	lsls	r3, r3, #2
 8013d46:	4413      	add	r3, r2
 8013d48:	689b      	ldr	r3, [r3, #8]
 8013d4a:	791b      	ldrb	r3, [r3, #4]
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	7dbb      	ldrb	r3, [r7, #22]
 8013d50:	693a      	ldr	r2, [r7, #16]
 8013d52:	331e      	adds	r3, #30
 8013d54:	009b      	lsls	r3, r3, #2
 8013d56:	4413      	add	r3, r2
 8013d58:	689b      	ldr	r3, [r3, #8]
 8013d5a:	795b      	ldrb	r3, [r3, #5]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	021b      	lsls	r3, r3, #8
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	430b      	orrs	r3, r1
 8013d64:	f240 1203 	movw	r2, #259	; 0x103
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	d004      	beq.n	8013d76 <USBH_AUDIO_BuildHeadphonePath+0x162>
      {
        return  USBH_OK;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	e00a      	b.n	8013d86 <USBH_AUDIO_BuildHeadphonePath+0x172>
      }
      break;

    default:
      ret = USBH_FAIL;
 8013d70:	2302      	movs	r3, #2
 8013d72:	753b      	strb	r3, [r7, #20]
      break;
 8013d74:	e000      	b.n	8013d78 <USBH_AUDIO_BuildHeadphonePath+0x164>
      break;
 8013d76:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8013d78:	7afb      	ldrb	r3, [r7, #11]
 8013d7a:	2b03      	cmp	r3, #3
 8013d7c:	d002      	beq.n	8013d84 <USBH_AUDIO_BuildHeadphonePath+0x170>
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d1a7      	bne.n	8013cd4 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 8013d84:	7d3b      	ldrb	r3, [r7, #20]
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	3718      	adds	r7, #24
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}
 8013d8e:	bf00      	nop

08013d90 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	4608      	mov	r0, r1
 8013d9a:	4611      	mov	r1, r2
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	4603      	mov	r3, r0
 8013da0:	70fb      	strb	r3, [r7, #3]
 8013da2:	460b      	mov	r3, r1
 8013da4:	70bb      	strb	r3, [r7, #2]
 8013da6:	4613      	mov	r3, r2
 8013da8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue,wIndex,wLength;
  uint8_t UnitID,InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013db0:	69db      	ldr	r3, [r3, #28]
 8013db2:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8013db4:	2300      	movs	r3, #0
 8013db6:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8013db8:	78fb      	ldrb	r3, [r7, #3]
 8013dba:	2b02      	cmp	r3, #2
 8013dbc:	d002      	beq.n	8013dc4 <USBH_AC_SetCur+0x34>
 8013dbe:	2b06      	cmp	r3, #6
 8013dc0:	d018      	beq.n	8013df4 <USBH_AC_SetCur+0x64>
 8013dc2:	e035      	b.n	8013e30 <USBH_AC_SetCur+0xa0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dc8:	78db      	ldrb	r3, [r3, #3]
 8013dca:	72fb      	strb	r3, [r7, #11]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8013dcc:	2300      	movs	r3, #0
 8013dce:	72bb      	strb	r3, [r7, #10]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8013dd0:	7afb      	ldrb	r3, [r7, #11]
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	021b      	lsls	r3, r3, #8
 8013dd6:	b29a      	uxth	r2, r3
 8013dd8:	7abb      	ldrb	r3, [r7, #10]
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	4313      	orrs	r3, r2
 8013dde:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8013de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013de4:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	2200      	movs	r2, #0
 8013dea:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8013dee:	2301      	movs	r3, #1
 8013df0:	827b      	strh	r3, [r7, #18]
    break;
 8013df2:	e020      	b.n	8013e36 <USBH_AC_SetCur+0xa6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8013df4:	78bb      	ldrb	r3, [r7, #2]
 8013df6:	68fa      	ldr	r2, [r7, #12]
 8013df8:	3322      	adds	r3, #34	; 0x22
 8013dfa:	009b      	lsls	r3, r3, #2
 8013dfc:	4413      	add	r3, r2
 8013dfe:	689b      	ldr	r3, [r3, #8]
 8013e00:	78db      	ldrb	r3, [r3, #3]
 8013e02:	72fb      	strb	r3, [r7, #11]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8013e04:	2300      	movs	r3, #0
 8013e06:	72bb      	strb	r3, [r7, #10]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8013e08:	7afb      	ldrb	r3, [r7, #11]
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	021b      	lsls	r3, r3, #8
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	7abb      	ldrb	r3, [r7, #10]
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	4313      	orrs	r3, r2
 8013e16:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8013e18:	787b      	ldrb	r3, [r7, #1]
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	021b      	lsls	r3, r3, #8
 8013e1e:	b29a      	uxth	r2, r3
 8013e20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	4313      	orrs	r3, r2
 8013e28:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 8013e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e2c:	827b      	strh	r3, [r7, #18]
    break;
 8013e2e:	e002      	b.n	8013e36 <USBH_AC_SetCur+0xa6>

  default:
    ret = USBH_FAIL;
 8013e30:	2302      	movs	r3, #2
 8013e32:	747b      	strb	r3, [r7, #17]
    break;
 8013e34:	bf00      	nop
  }

  if (ret != USBH_OK)
 8013e36:	7c7b      	ldrb	r3, [r7, #17]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <USBH_AC_SetCur+0xb0>
  {
    return ret;
 8013e3c:	7c7b      	ldrb	r3, [r7, #17]
 8013e3e:	e017      	b.n	8013e70 <USBH_AC_SetCur+0xe0>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2221      	movs	r2, #33	; 0x21
 8013e44:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2201      	movs	r2, #1
 8013e4a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	8afa      	ldrh	r2, [r7, #22]
 8013e50:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	8aba      	ldrh	r2, [r7, #20]
 8013e56:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	8a7a      	ldrh	r2, [r7, #18]
 8013e5c:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8013e64:	8a7a      	ldrh	r2, [r7, #18]
 8013e66:	4619      	mov	r1, r3
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f001 fdce 	bl	8015a0a <USBH_CtlReq>
 8013e6e:	4603      	mov	r3, r0
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3718      	adds	r7, #24
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b086      	sub	sp, #24
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	4608      	mov	r0, r1
 8013e82:	4611      	mov	r1, r2
 8013e84:	461a      	mov	r2, r3
 8013e86:	4603      	mov	r3, r0
 8013e88:	70fb      	strb	r3, [r7, #3]
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	70bb      	strb	r3, [r7, #2]
 8013e8e:	4613      	mov	r3, r2
 8013e90:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8013e92:	2300      	movs	r3, #0
 8013e94:	82fb      	strh	r3, [r7, #22]
 8013e96:	2300      	movs	r3, #0
 8013e98:	82bb      	strh	r3, [r7, #20]
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	743b      	strb	r3, [r7, #16]
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013eac:	69db      	ldr	r3, [r3, #28]
 8013eae:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8013eb4:	78fb      	ldrb	r3, [r7, #3]
 8013eb6:	2b03      	cmp	r3, #3
 8013eb8:	d039      	beq.n	8013f2e <USBH_AC_GetCur+0xb6>
 8013eba:	2b06      	cmp	r3, #6
 8013ebc:	d019      	beq.n	8013ef2 <USBH_AC_GetCur+0x7a>
 8013ebe:	2b02      	cmp	r3, #2
 8013ec0:	d14a      	bne.n	8013f58 <USBH_AC_GetCur+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ec6:	78db      	ldrb	r3, [r3, #3]
 8013ec8:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8013eca:	2300      	movs	r3, #0
 8013ecc:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8013ece:	7c3b      	ldrb	r3, [r7, #16]
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	021b      	lsls	r3, r3, #8
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	7bfb      	ldrb	r3, [r7, #15]
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	4313      	orrs	r3, r2
 8013edc:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8013ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013ee2:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8013eec:	2301      	movs	r3, #1
 8013eee:	827b      	strh	r3, [r7, #18]
    break;
 8013ef0:	e035      	b.n	8013f5e <USBH_AC_GetCur+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8013ef2:	78bb      	ldrb	r3, [r7, #2]
 8013ef4:	68ba      	ldr	r2, [r7, #8]
 8013ef6:	3322      	adds	r3, #34	; 0x22
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	4413      	add	r3, r2
 8013efc:	689b      	ldr	r3, [r3, #8]
 8013efe:	78db      	ldrb	r3, [r3, #3]
 8013f00:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8013f02:	2300      	movs	r3, #0
 8013f04:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8013f06:	7c3b      	ldrb	r3, [r7, #16]
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	021b      	lsls	r3, r3, #8
 8013f0c:	b29a      	uxth	r2, r3
 8013f0e:	7bfb      	ldrb	r3, [r7, #15]
 8013f10:	b29b      	uxth	r3, r3
 8013f12:	4313      	orrs	r3, r2
 8013f14:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8013f16:	787b      	ldrb	r3, [r7, #1]
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	021b      	lsls	r3, r3, #8
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	4313      	orrs	r3, r2
 8013f26:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 8013f28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f2a:	827b      	strh	r3, [r7, #18]
    break;
 8013f2c:	e017      	b.n	8013f5e <USBH_AC_GetCur+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f34:	78db      	ldrb	r3, [r3, #3]
 8013f36:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8013f38:	2300      	movs	r3, #0
 8013f3a:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8013f3c:	7c3b      	ldrb	r3, [r7, #16]
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	021b      	lsls	r3, r3, #8
 8013f42:	b29a      	uxth	r2, r3
 8013f44:	7bfb      	ldrb	r3, [r7, #15]
 8013f46:	b29b      	uxth	r3, r3
 8013f48:	4313      	orrs	r3, r2
 8013f4a:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8013f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f50:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 8013f52:	2301      	movs	r3, #1
 8013f54:	827b      	strh	r3, [r7, #18]
    break;
 8013f56:	e002      	b.n	8013f5e <USBH_AC_GetCur+0xe6>

  default:
    ret = USBH_FAIL;
 8013f58:	2302      	movs	r3, #2
 8013f5a:	747b      	strb	r3, [r7, #17]
    break;
 8013f5c:	bf00      	nop
  }

  if (ret != USBH_OK)
 8013f5e:	7c7b      	ldrb	r3, [r7, #17]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d001      	beq.n	8013f68 <USBH_AC_GetCur+0xf0>
  {
    return ret;
 8013f64:	7c7b      	ldrb	r3, [r7, #17]
 8013f66:	e017      	b.n	8013f98 <USBH_AC_GetCur+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	22a1      	movs	r2, #161	; 0xa1
 8013f6c:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2281      	movs	r2, #129	; 0x81
 8013f72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	8afa      	ldrh	r2, [r7, #22]
 8013f78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	8aba      	ldrh	r2, [r7, #20]
 8013f7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	8a7a      	ldrh	r2, [r7, #18]
 8013f84:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem) , wLength ));
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8013f8c:	8a7a      	ldrh	r2, [r7, #18]
 8013f8e:	4619      	mov	r1, r3
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f001 fd3a 	bl	8015a0a <USBH_CtlReq>
 8013f96:	4603      	mov	r3, r0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3718      	adds	r7, #24
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b086      	sub	sp, #24
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	4608      	mov	r0, r1
 8013faa:	4611      	mov	r1, r2
 8013fac:	461a      	mov	r2, r3
 8013fae:	4603      	mov	r3, r0
 8013fb0:	70fb      	strb	r3, [r7, #3]
 8013fb2:	460b      	mov	r3, r1
 8013fb4:	70bb      	strb	r3, [r7, #2]
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	82fb      	strh	r3, [r7, #22]
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	82bb      	strh	r3, [r7, #20]
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	743b      	strb	r3, [r7, #16]
 8013fca:	2300      	movs	r3, #0
 8013fcc:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013fd4:	69db      	ldr	r3, [r3, #28]
 8013fd6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8013fd8:	2300      	movs	r3, #0
 8013fda:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8013fdc:	78fb      	ldrb	r3, [r7, #3]
 8013fde:	2b03      	cmp	r3, #3
 8013fe0:	d039      	beq.n	8014056 <USBH_AC_GetMax+0xb6>
 8013fe2:	2b06      	cmp	r3, #6
 8013fe4:	d019      	beq.n	801401a <USBH_AC_GetMax+0x7a>
 8013fe6:	2b02      	cmp	r3, #2
 8013fe8:	d14a      	bne.n	8014080 <USBH_AC_GetMax+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fee:	78db      	ldrb	r3, [r3, #3]
 8013ff0:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8013ff6:	7c3b      	ldrb	r3, [r7, #16]
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	021b      	lsls	r3, r3, #8
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	7bfb      	ldrb	r3, [r7, #15]
 8014000:	b29b      	uxth	r3, r3
 8014002:	4313      	orrs	r3, r2
 8014004:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8014006:	f44f 7380 	mov.w	r3, #256	; 0x100
 801400a:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	2200      	movs	r2, #0
 8014010:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8014014:	2301      	movs	r3, #1
 8014016:	827b      	strh	r3, [r7, #18]
    break;
 8014018:	e035      	b.n	8014086 <USBH_AC_GetMax+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 801401a:	78bb      	ldrb	r3, [r7, #2]
 801401c:	68ba      	ldr	r2, [r7, #8]
 801401e:	3322      	adds	r3, #34	; 0x22
 8014020:	009b      	lsls	r3, r3, #2
 8014022:	4413      	add	r3, r2
 8014024:	689b      	ldr	r3, [r3, #8]
 8014026:	78db      	ldrb	r3, [r3, #3]
 8014028:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801402a:	2300      	movs	r3, #0
 801402c:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 801402e:	7c3b      	ldrb	r3, [r7, #16]
 8014030:	b29b      	uxth	r3, r3
 8014032:	021b      	lsls	r3, r3, #8
 8014034:	b29a      	uxth	r2, r3
 8014036:	7bfb      	ldrb	r3, [r7, #15]
 8014038:	b29b      	uxth	r3, r3
 801403a:	4313      	orrs	r3, r2
 801403c:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 801403e:	787b      	ldrb	r3, [r7, #1]
 8014040:	b29b      	uxth	r3, r3
 8014042:	021b      	lsls	r3, r3, #8
 8014044:	b29a      	uxth	r2, r3
 8014046:	f897 3020 	ldrb.w	r3, [r7, #32]
 801404a:	b29b      	uxth	r3, r3
 801404c:	4313      	orrs	r3, r2
 801404e:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 8014050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014052:	827b      	strh	r3, [r7, #18]
    break;
 8014054:	e017      	b.n	8014086 <USBH_AC_GetMax+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801405c:	78db      	ldrb	r3, [r3, #3]
 801405e:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8014060:	2300      	movs	r3, #0
 8014062:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8014064:	7c3b      	ldrb	r3, [r7, #16]
 8014066:	b29b      	uxth	r3, r3
 8014068:	021b      	lsls	r3, r3, #8
 801406a:	b29a      	uxth	r2, r3
 801406c:	7bfb      	ldrb	r3, [r7, #15]
 801406e:	b29b      	uxth	r3, r3
 8014070:	4313      	orrs	r3, r2
 8014072:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8014074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014078:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 801407a:	2301      	movs	r3, #1
 801407c:	827b      	strh	r3, [r7, #18]
    break;
 801407e:	e002      	b.n	8014086 <USBH_AC_GetMax+0xe6>

  default:
    ret = USBH_FAIL;
 8014080:	2302      	movs	r3, #2
 8014082:	747b      	strb	r3, [r7, #17]
    break;
 8014084:	bf00      	nop
  }

  if (ret != USBH_OK)
 8014086:	7c7b      	ldrb	r3, [r7, #17]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d001      	beq.n	8014090 <USBH_AC_GetMax+0xf0>
  {
    return ret;
 801408c:	7c7b      	ldrb	r3, [r7, #17]
 801408e:	e017      	b.n	80140c0 <USBH_AC_GetMax+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	22a1      	movs	r2, #161	; 0xa1
 8014094:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2283      	movs	r2, #131	; 0x83
 801409a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	8afa      	ldrh	r2, [r7, #22]
 80140a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	8aba      	ldrh	r2, [r7, #20]
 80140a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	8a7a      	ldrh	r2, [r7, #18]
 80140ac:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80140b4:	8a7a      	ldrh	r2, [r7, #18]
 80140b6:	4619      	mov	r1, r3
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f001 fca6 	bl	8015a0a <USBH_CtlReq>
 80140be:	4603      	mov	r3, r0

}
 80140c0:	4618      	mov	r0, r3
 80140c2:	3718      	adds	r7, #24
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}

080140c8 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b086      	sub	sp, #24
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	4608      	mov	r0, r1
 80140d2:	4611      	mov	r1, r2
 80140d4:	461a      	mov	r2, r3
 80140d6:	4603      	mov	r3, r0
 80140d8:	70fb      	strb	r3, [r7, #3]
 80140da:	460b      	mov	r3, r1
 80140dc:	70bb      	strb	r3, [r7, #2]
 80140de:	4613      	mov	r3, r2
 80140e0:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80140e2:	2300      	movs	r3, #0
 80140e4:	82fb      	strh	r3, [r7, #22]
 80140e6:	2300      	movs	r3, #0
 80140e8:	82bb      	strh	r3, [r7, #20]
 80140ea:	2300      	movs	r3, #0
 80140ec:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80140ee:	2300      	movs	r3, #0
 80140f0:	743b      	strb	r3, [r7, #16]
 80140f2:	2300      	movs	r3, #0
 80140f4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80140fc:	69db      	ldr	r3, [r3, #28]
 80140fe:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8014100:	2300      	movs	r3, #0
 8014102:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8014104:	78fb      	ldrb	r3, [r7, #3]
 8014106:	2b03      	cmp	r3, #3
 8014108:	d039      	beq.n	801417e <USBH_AC_GetRes+0xb6>
 801410a:	2b06      	cmp	r3, #6
 801410c:	d019      	beq.n	8014142 <USBH_AC_GetRes+0x7a>
 801410e:	2b02      	cmp	r3, #2
 8014110:	d14a      	bne.n	80141a8 <USBH_AC_GetRes+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014116:	78db      	ldrb	r3, [r3, #3]
 8014118:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801411a:	2300      	movs	r3, #0
 801411c:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 801411e:	7c3b      	ldrb	r3, [r7, #16]
 8014120:	b29b      	uxth	r3, r3
 8014122:	021b      	lsls	r3, r3, #8
 8014124:	b29a      	uxth	r2, r3
 8014126:	7bfb      	ldrb	r3, [r7, #15]
 8014128:	b29b      	uxth	r3, r3
 801412a:	4313      	orrs	r3, r2
 801412c:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U) ;
 801412e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014132:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	2200      	movs	r2, #0
 8014138:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 801413c:	2301      	movs	r3, #1
 801413e:	827b      	strh	r3, [r7, #18]
    break;
 8014140:	e035      	b.n	80141ae <USBH_AC_GetRes+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8014142:	78bb      	ldrb	r3, [r7, #2]
 8014144:	68ba      	ldr	r2, [r7, #8]
 8014146:	3322      	adds	r3, #34	; 0x22
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	4413      	add	r3, r2
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	78db      	ldrb	r3, [r3, #3]
 8014150:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8014152:	2300      	movs	r3, #0
 8014154:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8014156:	7c3b      	ldrb	r3, [r7, #16]
 8014158:	b29b      	uxth	r3, r3
 801415a:	021b      	lsls	r3, r3, #8
 801415c:	b29a      	uxth	r2, r3
 801415e:	7bfb      	ldrb	r3, [r7, #15]
 8014160:	b29b      	uxth	r3, r3
 8014162:	4313      	orrs	r3, r2
 8014164:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8014166:	787b      	ldrb	r3, [r7, #1]
 8014168:	b29b      	uxth	r3, r3
 801416a:	021b      	lsls	r3, r3, #8
 801416c:	b29a      	uxth	r2, r3
 801416e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014172:	b29b      	uxth	r3, r3
 8014174:	4313      	orrs	r3, r2
 8014176:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 8014178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801417a:	827b      	strh	r3, [r7, #18]
    break;
 801417c:	e017      	b.n	80141ae <USBH_AC_GetRes+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014184:	78db      	ldrb	r3, [r3, #3]
 8014186:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8014188:	2300      	movs	r3, #0
 801418a:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 801418c:	7c3b      	ldrb	r3, [r7, #16]
 801418e:	b29b      	uxth	r3, r3
 8014190:	021b      	lsls	r3, r3, #8
 8014192:	b29a      	uxth	r2, r3
 8014194:	7bfb      	ldrb	r3, [r7, #15]
 8014196:	b29b      	uxth	r3, r3
 8014198:	4313      	orrs	r3, r2
 801419a:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U) ;
 801419c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80141a0:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 80141a2:	2301      	movs	r3, #1
 80141a4:	827b      	strh	r3, [r7, #18]
    break;
 80141a6:	e002      	b.n	80141ae <USBH_AC_GetRes+0xe6>

  default:
    ret = USBH_FAIL;
 80141a8:	2302      	movs	r3, #2
 80141aa:	747b      	strb	r3, [r7, #17]
    break;
 80141ac:	bf00      	nop
  }

  if (ret != USBH_OK)
 80141ae:	7c7b      	ldrb	r3, [r7, #17]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d001      	beq.n	80141b8 <USBH_AC_GetRes+0xf0>
  {
    return ret;
 80141b4:	7c7b      	ldrb	r3, [r7, #17]
 80141b6:	e017      	b.n	80141e8 <USBH_AC_GetRes+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	22a1      	movs	r2, #161	; 0xa1
 80141bc:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2284      	movs	r2, #132	; 0x84
 80141c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	8afa      	ldrh	r2, [r7, #22]
 80141c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	8aba      	ldrh	r2, [r7, #20]
 80141ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	8a7a      	ldrh	r2, [r7, #18]
 80141d4:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80141dc:	8a7a      	ldrh	r2, [r7, #18]
 80141de:	4619      	mov	r1, r3
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f001 fc12 	bl	8015a0a <USBH_CtlReq>
 80141e6:	4603      	mov	r3, r0

}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3718      	adds	r7, #24
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b086      	sub	sp, #24
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	4608      	mov	r0, r1
 80141fa:	4611      	mov	r1, r2
 80141fc:	461a      	mov	r2, r3
 80141fe:	4603      	mov	r3, r0
 8014200:	70fb      	strb	r3, [r7, #3]
 8014202:	460b      	mov	r3, r1
 8014204:	70bb      	strb	r3, [r7, #2]
 8014206:	4613      	mov	r3, r2
 8014208:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 801420a:	2300      	movs	r3, #0
 801420c:	82fb      	strh	r3, [r7, #22]
 801420e:	2300      	movs	r3, #0
 8014210:	82bb      	strh	r3, [r7, #20]
 8014212:	2300      	movs	r3, #0
 8014214:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8014216:	2300      	movs	r3, #0
 8014218:	743b      	strb	r3, [r7, #16]
 801421a:	2300      	movs	r3, #0
 801421c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014224:	69db      	ldr	r3, [r3, #28]
 8014226:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8014228:	2300      	movs	r3, #0
 801422a:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 801422c:	78fb      	ldrb	r3, [r7, #3]
 801422e:	2b03      	cmp	r3, #3
 8014230:	d039      	beq.n	80142a6 <USBH_AC_GetMin+0xb6>
 8014232:	2b06      	cmp	r3, #6
 8014234:	d019      	beq.n	801426a <USBH_AC_GetMin+0x7a>
 8014236:	2b02      	cmp	r3, #2
 8014238:	d14a      	bne.n	80142d0 <USBH_AC_GetMin+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801423e:	78db      	ldrb	r3, [r3, #3]
 8014240:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8014242:	2300      	movs	r3, #0
 8014244:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8014246:	7c3b      	ldrb	r3, [r7, #16]
 8014248:	b29b      	uxth	r3, r3
 801424a:	021b      	lsls	r3, r3, #8
 801424c:	b29a      	uxth	r2, r3
 801424e:	7bfb      	ldrb	r3, [r7, #15]
 8014250:	b29b      	uxth	r3, r3
 8014252:	4313      	orrs	r3, r2
 8014254:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8014256:	f44f 7380 	mov.w	r3, #256	; 0x100
 801425a:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	2200      	movs	r2, #0
 8014260:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8014264:	2301      	movs	r3, #1
 8014266:	827b      	strh	r3, [r7, #18]
    break;
 8014268:	e035      	b.n	80142d6 <USBH_AC_GetMin+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 801426a:	78bb      	ldrb	r3, [r7, #2]
 801426c:	68ba      	ldr	r2, [r7, #8]
 801426e:	3322      	adds	r3, #34	; 0x22
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	4413      	add	r3, r2
 8014274:	689b      	ldr	r3, [r3, #8]
 8014276:	78db      	ldrb	r3, [r3, #3]
 8014278:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801427a:	2300      	movs	r3, #0
 801427c:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 801427e:	7c3b      	ldrb	r3, [r7, #16]
 8014280:	b29b      	uxth	r3, r3
 8014282:	021b      	lsls	r3, r3, #8
 8014284:	b29a      	uxth	r2, r3
 8014286:	7bfb      	ldrb	r3, [r7, #15]
 8014288:	b29b      	uxth	r3, r3
 801428a:	4313      	orrs	r3, r2
 801428c:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 801428e:	787b      	ldrb	r3, [r7, #1]
 8014290:	b29b      	uxth	r3, r3
 8014292:	021b      	lsls	r3, r3, #8
 8014294:	b29a      	uxth	r2, r3
 8014296:	f897 3020 	ldrb.w	r3, [r7, #32]
 801429a:	b29b      	uxth	r3, r3
 801429c:	4313      	orrs	r3, r2
 801429e:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 80142a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142a2:	827b      	strh	r3, [r7, #18]
    break;
 80142a4:	e017      	b.n	80142d6 <USBH_AC_GetMin+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80142ac:	78db      	ldrb	r3, [r3, #3]
 80142ae:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 80142b0:	2300      	movs	r3, #0
 80142b2:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80142b4:	7c3b      	ldrb	r3, [r7, #16]
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	021b      	lsls	r3, r3, #8
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	7bfb      	ldrb	r3, [r7, #15]
 80142be:	b29b      	uxth	r3, r3
 80142c0:	4313      	orrs	r3, r2
 80142c2:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 80142c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80142c8:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 80142ca:	2301      	movs	r3, #1
 80142cc:	827b      	strh	r3, [r7, #18]
    break;
 80142ce:	e002      	b.n	80142d6 <USBH_AC_GetMin+0xe6>

  default:
    ret = USBH_FAIL;
 80142d0:	2302      	movs	r3, #2
 80142d2:	747b      	strb	r3, [r7, #17]
    break;
 80142d4:	bf00      	nop
  }

  if (ret != USBH_OK)
 80142d6:	7c7b      	ldrb	r3, [r7, #17]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d001      	beq.n	80142e0 <USBH_AC_GetMin+0xf0>
  {
    return ret;
 80142dc:	7c7b      	ldrb	r3, [r7, #17]
 80142de:	e017      	b.n	8014310 <USBH_AC_GetMin+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	22a1      	movs	r2, #161	; 0xa1
 80142e4:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2282      	movs	r2, #130	; 0x82
 80142ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	8afa      	ldrh	r2, [r7, #22]
 80142f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	8aba      	ldrh	r2, [r7, #20]
 80142f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	8a7a      	ldrh	r2, [r7, #18]
 80142fc:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8014304:	8a7a      	ldrh	r2, [r7, #18]
 8014306:	4619      	mov	r1, r3
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f001 fb7e 	bl	8015a0a <USBH_CtlReq>
 801430e:	4603      	mov	r3, r0

}
 8014310:	4618      	mov	r0, r3
 8014312:	3718      	adds	r7, #24
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                               uint8_t  Ep,
                                               uint8_t *buff)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b086      	sub	sp, #24
 801431c:	af00      	add	r7, sp, #0
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	460b      	mov	r3, r1
 8014322:	607a      	str	r2, [r7, #4]
 8014324:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8014326:	f44f 7380 	mov.w	r3, #256	; 0x100
 801432a:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 801432c:	7afb      	ldrb	r3, [r7, #11]
 801432e:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8014330:	2303      	movs	r3, #3
 8014332:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2222      	movs	r2, #34	; 0x22
 8014338:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	2201      	movs	r2, #1
 801433e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	8afa      	ldrh	r2, [r7, #22]
 8014344:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	8aba      	ldrh	r2, [r7, #20]
 801434a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	8a7a      	ldrh	r2, [r7, #18]
 8014350:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8014352:	8a7b      	ldrh	r3, [r7, #18]
 8014354:	461a      	mov	r2, r3
 8014356:	6879      	ldr	r1, [r7, #4]
 8014358:	68f8      	ldr	r0, [r7, #12]
 801435a:	f001 fb56 	bl	8015a0a <USBH_CtlReq>
 801435e:	4603      	mov	r3, r0

}
 8014360:	4618      	mov	r0, r3
 8014362:	3718      	adds	r7, #24
 8014364:	46bd      	mov	sp, r7
 8014366:	bd80      	pop	{r7, pc}

08014368 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream (USBH_HandleTypeDef *phost)
{
 8014368:	b480      	push	{r7}
 801436a:	b085      	sub	sp, #20
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8014370:	2301      	movs	r3, #1
 8014372:	73fb      	strb	r3, [r7, #15]

  return status;
 8014374:	7bfb      	ldrb	r3, [r7, #15]
}
 8014376:	4618      	mov	r0, r3
 8014378:	3714      	adds	r7, #20
 801437a:	46bd      	mov	sp, r7
 801437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014380:	4770      	bx	lr
	...

08014384 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control (USBH_HandleTypeDef *phost)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b086      	sub	sp, #24
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 801438c:	2301      	movs	r3, #1
 801438e:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014396:	69db      	ldr	r3, [r3, #28]
 8014398:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 801439a:	2300      	movs	r3, #0
 801439c:	81fb      	strh	r3, [r7, #14]

  switch(AUDIO_Handle->control_state)
 801439e:	693b      	ldr	r3, [r7, #16]
 80143a0:	78db      	ldrb	r3, [r3, #3]
 80143a2:	3b01      	subs	r3, #1
 80143a4:	2b04      	cmp	r3, #4
 80143a6:	f200 8090 	bhi.w	80144ca <USBH_AUDIO_Control+0x146>
 80143aa:	a201      	add	r2, pc, #4	; (adr r2, 80143b0 <USBH_AUDIO_Control+0x2c>)
 80143ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143b0:	080143c5 	.word	0x080143c5
 80143b4:	08014419 	.word	0x08014419
 80143b8:	080144cb 	.word	0x080144cb
 80143bc:	08014497 	.word	0x08014497
 80143c0:	080144b1 	.word	0x080144b1
  {
  case AUDIO_CONTROL_INIT:
    if((phost->Timer & 1U) == 0U)
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80143ca:	f003 0301 	and.w	r3, r3, #1
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d17d      	bne.n	80144ce <USBH_AUDIO_Control+0x14a>
    {
      AUDIO_Handle->control.timer = phost->Timer;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
      USBH_InterruptReceiveData(phost,
                                (uint8_t *)(void *)(AUDIO_Handle->mem),
 80143de:	693b      	ldr	r3, [r7, #16]
 80143e0:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                (uint8_t)AUDIO_Handle->control.EpSize,
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
      USBH_InterruptReceiveData(phost,
 80143ea:	b2da      	uxtb	r2, r3
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f001 fdfd 	bl	8015ff2 <USBH_InterruptReceiveData>
                                AUDIO_Handle->control.Pipe);

      AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80143fe:	693b      	ldr	r3, [r7, #16]
 8014400:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 801440a:	693b      	ldr	r3, [r7, #16]
 801440c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

      AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8014410:	693b      	ldr	r3, [r7, #16]
 8014412:	2202      	movs	r2, #2
 8014414:	70da      	strb	r2, [r3, #3]
    }
    break;
 8014416:	e05a      	b.n	80144ce <USBH_AUDIO_Control+0x14a>

  case AUDIO_CONTROL_CHANGE:
    if(USBH_LL_GetURBState(phost , AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 801441e:	4619      	mov	r1, r3
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f005 fc54 	bl	8019cce <USBH_LL_GetURBState>
 8014426:	4603      	mov	r3, r0
 8014428:	2b01      	cmp	r3, #1
 801442a:	d114      	bne.n	8014456 <USBH_AUDIO_Control+0xd2>
    {
      attribute = LE16(&AUDIO_Handle->mem[0]);
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8014438:	3302      	adds	r3, #2
 801443a:	881b      	ldrh	r3, [r3, #0]
 801443c:	021b      	lsls	r3, r3, #8
 801443e:	b29b      	uxth	r3, r3
 8014440:	4313      	orrs	r3, r2
 8014442:	81fb      	strh	r3, [r7, #14]
      if(USBH_AUDIO_SetControlAttribute (phost, (uint8_t)attribute) == USBH_BUSY)
 8014444:	89fb      	ldrh	r3, [r7, #14]
 8014446:	b2db      	uxtb	r3, r3
 8014448:	4619      	mov	r1, r3
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f000 f9a5 	bl	801479a <USBH_AUDIO_SetControlAttribute>
 8014450:	4603      	mov	r3, r0
 8014452:	2b01      	cmp	r3, #1
 8014454:	d03d      	beq.n	80144d2 <USBH_AUDIO_Control+0x14e>
      {
        break;
      }
    }

    if(( phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8014462:	1ad3      	subs	r3, r2, r3
 8014464:	693a      	ldr	r2, [r7, #16]
 8014466:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 801446a:	4293      	cmp	r3, r2
 801446c:	d333      	bcc.n	80144d6 <USBH_AUDIO_Control+0x152>
    {
      AUDIO_Handle->control.timer = phost->Timer;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

      USBH_InterruptReceiveData(phost,
                                (uint8_t *)(void *)(AUDIO_Handle->mem),
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                (uint8_t)AUDIO_Handle->control.EpSize,
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
      USBH_InterruptReceiveData(phost,
 8014486:	b2da      	uxtb	r2, r3
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f001 fdaf 	bl	8015ff2 <USBH_InterruptReceiveData>
                                AUDIO_Handle->control.Pipe);

    }
    break;
 8014494:	e01f      	b.n	80144d6 <USBH_AUDIO_Control+0x152>

  case AUDIO_CONTROL_VOLUME_UP:
       if( USBH_AUDIO_SetControlAttribute (phost, 1U) == USBH_OK)
 8014496:	2101      	movs	r1, #1
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f000 f97e 	bl	801479a <USBH_AUDIO_SetControlAttribute>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d11a      	bne.n	80144da <USBH_AUDIO_Control+0x156>
       {
         AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80144a4:	693b      	ldr	r3, [r7, #16]
 80144a6:	2201      	movs	r2, #1
 80144a8:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 80144aa:	2300      	movs	r3, #0
 80144ac:	75fb      	strb	r3, [r7, #23]
       }
       break;
 80144ae:	e014      	b.n	80144da <USBH_AUDIO_Control+0x156>

  case AUDIO_CONTROL_VOLUME_DOWN:
       if( USBH_AUDIO_SetControlAttribute (phost, 2U) == USBH_OK)
 80144b0:	2102      	movs	r1, #2
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f000 f971 	bl	801479a <USBH_AUDIO_SetControlAttribute>
 80144b8:	4603      	mov	r3, r0
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d10f      	bne.n	80144de <USBH_AUDIO_Control+0x15a>
       {
         AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	2201      	movs	r2, #1
 80144c2:	70da      	strb	r2, [r3, #3]
         status = USBH_OK;
 80144c4:	2300      	movs	r3, #0
 80144c6:	75fb      	strb	r3, [r7, #23]
       }
       break;
 80144c8:	e009      	b.n	80144de <USBH_AUDIO_Control+0x15a>

  case AUDIO_CONTROL_IDLE:
  default:
    break;
 80144ca:	bf00      	nop
 80144cc:	e008      	b.n	80144e0 <USBH_AUDIO_Control+0x15c>
    break;
 80144ce:	bf00      	nop
 80144d0:	e006      	b.n	80144e0 <USBH_AUDIO_Control+0x15c>
        break;
 80144d2:	bf00      	nop
 80144d4:	e004      	b.n	80144e0 <USBH_AUDIO_Control+0x15c>
    break;
 80144d6:	bf00      	nop
 80144d8:	e002      	b.n	80144e0 <USBH_AUDIO_Control+0x15c>
       break;
 80144da:	bf00      	nop
 80144dc:	e000      	b.n	80144e0 <USBH_AUDIO_Control+0x15c>
       break;
 80144de:	bf00      	nop
  }

  return status;
 80144e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	3718      	adds	r7, #24
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
 80144ea:	bf00      	nop

080144ec <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream (USBH_HandleTypeDef *phost)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b086      	sub	sp, #24
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80144f4:	2301      	movs	r3, #1
 80144f6:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80144fe:	69db      	ldr	r3, [r3, #28]
 8014500:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch(AUDIO_Handle->play_state)
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	789b      	ldrb	r3, [r3, #2]
 8014506:	3b01      	subs	r3, #1
 8014508:	2b04      	cmp	r3, #4
 801450a:	d878      	bhi.n	80145fe <USBH_AUDIO_OutputStream+0x112>
 801450c:	a201      	add	r2, pc, #4	; (adr r2, 8014514 <USBH_AUDIO_OutputStream+0x28>)
 801450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014512:	bf00      	nop
 8014514:	08014529 	.word	0x08014529
 8014518:	080145a1 	.word	0x080145a1
 801451c:	0801456b 	.word	0x0801456b
 8014520:	080145f3 	.word	0x080145f3
 8014524:	080145d1 	.word	0x080145d1
  {
  case AUDIO_PLAYBACK_INIT:

    if( AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801452e:	693a      	ldr	r2, [r7, #16]
 8014530:	3317      	adds	r3, #23
 8014532:	00db      	lsls	r3, r3, #3
 8014534:	4413      	add	r3, r2
 8014536:	68db      	ldr	r3, [r3, #12]
 8014538:	79db      	ldrb	r3, [r3, #7]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d103      	bne.n	8014546 <USBH_AUDIO_OutputStream+0x5a>
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	2203      	movs	r2, #3
 8014542:	709a      	strb	r2, [r3, #2]
 8014544:	e002      	b.n	801454c <USBH_AUDIO_OutputStream+0x60>
    }
    else
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	2202      	movs	r2, #2
 801454a:	709a      	strb	r2, [r3, #2]
    }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2202      	movs	r2, #2
 8014550:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014560:	2200      	movs	r2, #0
 8014562:	4619      	mov	r1, r3
 8014564:	f001 fff0 	bl	8016548 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8014568:	e04e      	b.n	8014608 <USBH_AUDIO_OutputStream+0x11c>

  case AUDIO_PLAYBACK_SET_EP_FREQ:

    buff = (uint8_t*)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014570:	693a      	ldr	r2, [r7, #16]
 8014572:	3317      	adds	r3, #23
 8014574:	00db      	lsls	r3, r3, #3
 8014576:	4413      	add	r3, r2
 8014578:	68db      	ldr	r3, [r3, #12]
 801457a:	3308      	adds	r3, #8
 801457c:	60fb      	str	r3, [r7, #12]

    status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8014584:	68fa      	ldr	r2, [r7, #12]
 8014586:	4619      	mov	r1, r3
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f7ff fec5 	bl	8014318 <USBH_AUDIO_SetEndpointControls>
 801458e:	4603      	mov	r3, r0
 8014590:	75fb      	strb	r3, [r7, #23]
    if(status == USBH_OK)
 8014592:	7dfb      	ldrb	r3, [r7, #23]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d134      	bne.n	8014602 <USBH_AUDIO_OutputStream+0x116>
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8014598:	693b      	ldr	r3, [r7, #16]
 801459a:	2205      	movs	r2, #5
 801459c:	709a      	strb	r2, [r3, #2]
    }
    break;
 801459e:	e030      	b.n	8014602 <USBH_AUDIO_OutputStream+0x116>

  case AUDIO_PLAYBACK_SET_EP:
    buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80145a6:	60fb      	str	r3, [r7, #12]
    status = USBH_AUDIO_SetEndpointControls(phost,AUDIO_Handle->headphone.Ep, buff);
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	4619      	mov	r1, r3
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f7ff feb0 	bl	8014318 <USBH_AUDIO_SetEndpointControls>
 80145b8:	4603      	mov	r3, r0
 80145ba:	75fb      	strb	r3, [r7, #23]
    if(status == USBH_OK)
 80145bc:	7dfb      	ldrb	r3, [r7, #23]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d121      	bne.n	8014606 <USBH_AUDIO_OutputStream+0x11a>
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	2205      	movs	r2, #5
 80145c6:	709a      	strb	r2, [r3, #2]
      USBH_AUDIO_FrequencySet(phost);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f000 f98b 	bl	80148e4 <USBH_AUDIO_FrequencySet>
    }
    break;
 80145ce:	e01a      	b.n	8014606 <USBH_AUDIO_OutputStream+0x11a>

  case AUDIO_PLAYBACK_IDLE:
    status = USBH_OK;
 80145d0:	2300      	movs	r3, #0
 80145d2:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2204      	movs	r2, #4
 80145d8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80145e8:	2200      	movs	r2, #0
 80145ea:	4619      	mov	r1, r3
 80145ec:	f001 ffac 	bl	8016548 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80145f0:	e00a      	b.n	8014608 <USBH_AUDIO_OutputStream+0x11c>

  case AUDIO_PLAYBACK_PLAY:
    USBH_AUDIO_Transmit(phost);
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 f80e 	bl	8014614 <USBH_AUDIO_Transmit>
    status = USBH_OK;
 80145f8:	2300      	movs	r3, #0
 80145fa:	75fb      	strb	r3, [r7, #23]
    break;
 80145fc:	e004      	b.n	8014608 <USBH_AUDIO_OutputStream+0x11c>

  default:
    break;
 80145fe:	bf00      	nop
 8014600:	e002      	b.n	8014608 <USBH_AUDIO_OutputStream+0x11c>
    break;
 8014602:	bf00      	nop
 8014604:	e000      	b.n	8014608 <USBH_AUDIO_OutputStream+0x11c>
    break;
 8014606:	bf00      	nop
  }

  return status;
 8014608:	7dfb      	ldrb	r3, [r7, #23]
}
 801460a:	4618      	mov	r0, r3
 801460c:	3718      	adds	r7, #24
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop

08014614 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit (USBH_HandleTypeDef *phost)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b084      	sub	sp, #16
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 801461c:	2301      	movs	r3, #1
 801461e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014626:	69db      	ldr	r3, [r3, #28]
 8014628:	60bb      	str	r3, [r7, #8]

  switch(AUDIO_Handle->processing_state)
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	791b      	ldrb	r3, [r3, #4]
 801462e:	2b01      	cmp	r3, #1
 8014630:	d002      	beq.n	8014638 <USBH_AUDIO_Transmit+0x24>
 8014632:	2b02      	cmp	r3, #2
 8014634:	d044      	beq.n	80146c0 <USBH_AUDIO_Transmit+0xac>
 8014636:	e0a7      	b.n	8014788 <USBH_AUDIO_Transmit+0x174>
  {
  case AUDIO_DATA_START_OUT:
    /* Sync with start of Even Frame */
    if((phost->Timer & 1U) == 0U)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 801463e:	f003 0301 	and.w	r3, r3, #1
 8014642:	2b00      	cmp	r3, #0
 8014644:	d12a      	bne.n	801469c <USBH_AUDIO_Transmit+0x88>
    {
      AUDIO_Handle->headphone.timer = phost->Timer;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	2202      	movs	r2, #2
 8014656:	711a      	strb	r2, [r3, #4]
      USBH_IsocSendData(phost,
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                        AUDIO_Handle->headphone.buf,
                        (uint32_t)AUDIO_Handle->headphone.frame_length,
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
      USBH_IsocSendData(phost,
 8014664:	461a      	mov	r2, r3
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f001 fcdf 	bl	8016030 <USBH_IsocSendData>
                        AUDIO_Handle->headphone.Pipe);

      AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8014678:	461a      	mov	r2, r3
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8014686:	461a      	mov	r2, r3
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
      AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 801469a:	e079      	b.n	8014790 <USBH_AUDIO_Transmit+0x17c>
      osDelay(1);
 801469c:	2001      	movs	r0, #1
 801469e:	f001 fde6 	bl	801626e <osDelay>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	2204      	movs	r2, #4
 80146a6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80146b6:	2200      	movs	r2, #0
 80146b8:	4619      	mov	r1, r3
 80146ba:	f001 ff45 	bl	8016548 <osMessagePut>
    break;
 80146be:	e067      	b.n	8014790 <USBH_AUDIO_Transmit+0x17c>

  case AUDIO_DATA_OUT:
    if((USBH_LL_GetURBState(phost , AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE)&&
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80146c6:	4619      	mov	r1, r3
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f005 fb00 	bl	8019cce <USBH_LL_GetURBState>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2b01      	cmp	r3, #1
 80146d2:	d15c      	bne.n	801478e <USBH_AUDIO_Transmit+0x17a>
       (( phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	68ba      	ldr	r2, [r7, #8]
 80146e4:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
    if((USBH_LL_GetURBState(phost , AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE)&&
 80146e8:	4293      	cmp	r3, r2
 80146ea:	d350      	bcc.n	801478e <USBH_AUDIO_Transmit+0x17a>
    {
      AUDIO_Handle->headphone.timer = phost->Timer;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

      if(AUDIO_Handle->control.supported == 1U)
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80146fe:	2b01      	cmp	r3, #1
 8014700:	d102      	bne.n	8014708 <USBH_AUDIO_Transmit+0xf4>
      {
        USBH_AUDIO_Control (phost);
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f7ff fe3e 	bl	8014384 <USBH_AUDIO_Control>
      }

      if(AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8014714:	429a      	cmp	r2, r3
 8014716:	d82b      	bhi.n	8014770 <USBH_AUDIO_Transmit+0x15c>
      {
        USBH_IsocSendData(phost,
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                          AUDIO_Handle->headphone.cbuf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8014724:	461a      	mov	r2, r3
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f001 fc7f 	bl	8016030 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8014738:	68ba      	ldr	r2, [r7, #8]
 801473a:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 801473e:	441a      	add	r2, r3
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801474c:	68ba      	ldr	r2, [r7, #8]
 801474e:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8014752:	441a      	add	r2, r3
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014760:	68ba      	ldr	r2, [r7, #8]
 8014762:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8014766:	441a      	add	r2, r3
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
        USBH_AUDIO_BufferEmptyCallback(phost);
      }
    }
    break;
 801476e:	e00e      	b.n	801478e <USBH_AUDIO_Transmit+0x17a>
        AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014776:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	2205      	movs	r2, #5
 801477e:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_BufferEmptyCallback(phost);
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f000 f8b9 	bl	80148f8 <USBH_AUDIO_BufferEmptyCallback>
    break;
 8014786:	e002      	b.n	801478e <USBH_AUDIO_Transmit+0x17a>

  default:
    status = USBH_FAIL;
 8014788:	2302      	movs	r3, #2
 801478a:	73fb      	strb	r3, [r7, #15]
    break;
 801478c:	e000      	b.n	8014790 <USBH_AUDIO_Transmit+0x17c>
    break;
 801478e:	bf00      	nop
  }
  return status;
 8014790:	7bfb      	ldrb	r3, [r7, #15]
}
 8014792:	4618      	mov	r0, r3
 8014794:	3710      	adds	r7, #16
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}

0801479a <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute (USBH_HandleTypeDef *phost, uint8_t attrib)
{
 801479a:	b580      	push	{r7, lr}
 801479c:	b084      	sub	sp, #16
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]
 80147a2:	460b      	mov	r3, r1
 80147a4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 80147a6:	2301      	movs	r3, #1
 80147a8:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80147b0:	69db      	ldr	r3, [r3, #28]
 80147b2:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 80147b4:	78fb      	ldrb	r3, [r7, #3]
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d002      	beq.n	80147c0 <USBH_AUDIO_SetControlAttribute+0x26>
 80147ba:	2b02      	cmp	r3, #2
 80147bc:	d00b      	beq.n	80147d6 <USBH_AUDIO_SetControlAttribute+0x3c>
 80147be:	e015      	b.n	80147ec <USBH_AUDIO_SetControlAttribute+0x52>
  {
  case 0x01:
    AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80147cc:	441a      	add	r2, r3
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    break;
 80147d4:	e00d      	b.n	80147f2 <USBH_AUDIO_SetControlAttribute+0x58>

  case 0x02:
    AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80147e2:	1ad2      	subs	r2, r2, r3
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    break;
 80147ea:	e002      	b.n	80147f2 <USBH_AUDIO_SetControlAttribute+0x58>

  default :
    status = USBH_FAIL;
 80147ec:	2302      	movs	r3, #2
 80147ee:	73fb      	strb	r3, [r7, #15]
    break;
 80147f0:	bf00      	nop
  }

  if(AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80147fe:	429a      	cmp	r2, r3
 8014800:	d905      	bls.n	801480e <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume =AUDIO_Handle->headphone.attribute.volumeMax;
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if(AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801481a:	429a      	cmp	r2, r3
 801481c:	d205      	bcs.n	801482a <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume =AUDIO_Handle->headphone.attribute.volumeMin;
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if(AUDIO_SetVolume (phost,
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if(AUDIO_SetVolume (phost,
 801483c:	b29b      	uxth	r3, r3
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f000 f827 	bl	8014892 <AUDIO_SetVolume>
 8014844:	4603      	mov	r3, r0
 8014846:	2b01      	cmp	r3, #1
 8014848:	d01e      	beq.n	8014888 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if(AUDIO_Handle->temp_channels == 1U)
 801484a:	68bb      	ldr	r3, [r7, #8]
 801484c:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8014850:	2b01      	cmp	r3, #1
 8014852:	d10e      	bne.n	8014872 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 801486c:	2300      	movs	r3, #0
 801486e:	73fb      	strb	r3, [r7, #15]
 8014870:	e007      	b.n	8014882 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8014878:	3b01      	subs	r3, #1
 801487a:	b2da      	uxtb	r2, r3
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	2206      	movs	r2, #6
 8014886:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8014888:	7bfb      	ldrb	r3, [r7, #15]
}
 801488a:	4618      	mov	r0, r3
 801488c:	3710      	adds	r7, #16
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}

08014892 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume (USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8014892:	b580      	push	{r7, lr}
 8014894:	b086      	sub	sp, #24
 8014896:	af02      	add	r7, sp, #8
 8014898:	6078      	str	r0, [r7, #4]
 801489a:	4608      	mov	r0, r1
 801489c:	4611      	mov	r1, r2
 801489e:	461a      	mov	r2, r3
 80148a0:	4603      	mov	r3, r0
 80148a2:	70fb      	strb	r3, [r7, #3]
 80148a4:	460b      	mov	r3, r1
 80148a6:	70bb      	strb	r3, [r7, #2]
 80148a8:	4613      	mov	r3, r2
 80148aa:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80148ac:	2301      	movs	r3, #1
 80148ae:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80148b6:	69db      	ldr	r3, [r3, #28]
 80148b8:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	883a      	ldrh	r2, [r7, #0]
 80148be:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 80148c2:	78fa      	ldrb	r2, [r7, #3]
 80148c4:	2302      	movs	r3, #2
 80148c6:	9301      	str	r3, [sp, #4]
 80148c8:	78bb      	ldrb	r3, [r7, #2]
 80148ca:	9300      	str	r3, [sp, #0]
 80148cc:	2302      	movs	r3, #2
 80148ce:	2106      	movs	r1, #6
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f7ff fa5d 	bl	8013d90 <USBH_AC_SetCur>
 80148d6:	4603      	mov	r3, r0
 80148d8:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80148da:	7bfb      	ldrb	r3, [r7, #15]
}
 80148dc:	4618      	mov	r0, r3
 80148de:	3710      	adds	r7, #16
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}

080148e4 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]

}
 80148ec:	bf00      	nop
 80148ee:	370c      	adds	r7, #12
 80148f0:	46bd      	mov	sp, r7
 80148f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f6:	4770      	bx	lr

080148f8 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80148f8:	b480      	push	{r7}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]

}
 8014900:	bf00      	nop
 8014902:	370c      	adds	r7, #12
 8014904:	46bd      	mov	sp, r7
 8014906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490a:	4770      	bx	lr

0801490c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 801490c:	b5b0      	push	{r4, r5, r7, lr}
 801490e:	b08c      	sub	sp, #48	; 0x30
 8014910:	af00      	add	r7, sp, #0
 8014912:	60f8      	str	r0, [r7, #12]
 8014914:	60b9      	str	r1, [r7, #8]
 8014916:	4613      	mov	r3, r2
 8014918:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d101      	bne.n	8014924 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8014920:	2302      	movs	r3, #2
 8014922:	e03c      	b.n	801499e <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	79fa      	ldrb	r2, [r7, #7]
 8014928:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

  /* Unlink class*/
  phost->pActiveClass = NULL;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2200      	movs	r2, #0
 8014930:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
  phost->ClassNumber = 0U;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	2200      	movs	r2, #0
 8014938:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	f000 f837 	bl	80149b0 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d003      	beq.n	8014950 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	68ba      	ldr	r2, [r7, #8]
 801494c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8014950:	4a15      	ldr	r2, [pc, #84]	; (80149a8 <USBH_Init+0x9c>)
 8014952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014956:	e892 0003 	ldmia.w	r2, {r0, r1}
 801495a:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 801495e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014962:	2100      	movs	r1, #0
 8014964:	4618      	mov	r0, r3
 8014966:	f001 fddc 	bl	8016522 <osMessageCreate>
 801496a:	4602      	mov	r2, r0
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8014972:	4b0e      	ldr	r3, [pc, #56]	; (80149ac <USBH_Init+0xa0>)
 8014974:	f107 0414 	add.w	r4, r7, #20
 8014978:	461d      	mov	r5, r3
 801497a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801497c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801497e:	682b      	ldr	r3, [r5, #0]
 8014980:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8014982:	f107 0314 	add.w	r3, r7, #20
 8014986:	68f9      	ldr	r1, [r7, #12]
 8014988:	4618      	mov	r0, r3
 801498a:	f001 fc49 	bl	8016220 <osThreadCreate>
 801498e:	4602      	mov	r2, r0
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8014996:	68f8      	ldr	r0, [r7, #12]
 8014998:	f005 f868 	bl	8019a6c <USBH_LL_Init>

  return USBH_OK;
 801499c:	2300      	movs	r3, #0
}
 801499e:	4618      	mov	r0, r3
 80149a0:	3730      	adds	r7, #48	; 0x30
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bdb0      	pop	{r4, r5, r7, pc}
 80149a6:	bf00      	nop
 80149a8:	0801c2bc 	.word	0x0801c2bc
 80149ac:	0801c2d0 	.word	0x0801c2d0

080149b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80149b0:	b480      	push	{r7}
 80149b2:	b085      	sub	sp, #20
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80149b8:	2300      	movs	r3, #0
 80149ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80149bc:	e009      	b.n	80149d2 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	68fa      	ldr	r2, [r7, #12]
 80149c2:	f502 728a 	add.w	r2, r2, #276	; 0x114
 80149c6:	2100      	movs	r1, #0
 80149c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	3301      	adds	r3, #1
 80149d0:	60fb      	str	r3, [r7, #12]
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	2b0e      	cmp	r3, #14
 80149d6:	d9f2      	bls.n	80149be <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80149d8:	2300      	movs	r3, #0
 80149da:	60fb      	str	r3, [r7, #12]
 80149dc:	e009      	b.n	80149f2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	4413      	add	r3, r2
 80149e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80149e8:	2200      	movs	r2, #0
 80149ea:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	3301      	adds	r3, #1
 80149f0:	60fb      	str	r3, [r7, #12]
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80149f8:	d3f1      	bcc.n	80149de <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2200      	movs	r2, #0
 80149fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2200      	movs	r2, #0
 8014a04:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2201      	movs	r2, #1
 8014a0a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c

  phost->Control.state = CTRL_SETUP;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2201      	movs	r2, #1
 8014a18:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2240      	movs	r2, #64	; 0x40
 8014a1e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2200      	movs	r2, #0
 8014a24:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2201      	movs	r2, #1
 8014a32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8014a36:	2300      	movs	r3, #0
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3714      	adds	r7, #20
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a42:	4770      	bx	lr

08014a44 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8014a44:	b480      	push	{r7}
 8014a46:	b085      	sub	sp, #20
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8014a52:	683b      	ldr	r3, [r7, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d018      	beq.n	8014a8a <USBH_RegisterClass+0x46>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d110      	bne.n	8014a84 <USBH_RegisterClass+0x40>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8014a68:	1c59      	adds	r1, r3, #1
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	f8c2 144c 	str.w	r1, [r2, #1100]	; 0x44c
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	4413      	add	r3, r2
 8014a7a:	683a      	ldr	r2, [r7, #0]
 8014a7c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	73fb      	strb	r3, [r7, #15]
 8014a82:	e004      	b.n	8014a8e <USBH_RegisterClass+0x4a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8014a84:	2302      	movs	r3, #2
 8014a86:	73fb      	strb	r3, [r7, #15]
 8014a88:	e001      	b.n	8014a8e <USBH_RegisterClass+0x4a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8014a8a:	2302      	movs	r3, #2
 8014a8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	3714      	adds	r7, #20
 8014a94:	46bd      	mov	sp, r7
 8014a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9a:	4770      	bx	lr

08014a9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8014a9c:	b480      	push	{r7}
 8014a9e:	b087      	sub	sp, #28
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
 8014aa4:	4608      	mov	r0, r1
 8014aa6:	4611      	mov	r1, r2
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	4603      	mov	r3, r0
 8014aac:	70fb      	strb	r3, [r7, #3]
 8014aae:	460b      	mov	r3, r1
 8014ab0:	70bb      	strb	r3, [r7, #2]
 8014ab2:	4613      	mov	r3, r2
 8014ab4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8014aba:	2300      	movs	r3, #0
 8014abc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8014ac4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8014ac6:	e025      	b.n	8014b14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8014ac8:	7dfb      	ldrb	r3, [r7, #23]
 8014aca:	221a      	movs	r2, #26
 8014acc:	fb02 f303 	mul.w	r3, r2, r3
 8014ad0:	3308      	adds	r3, #8
 8014ad2:	68fa      	ldr	r2, [r7, #12]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	3302      	adds	r3, #2
 8014ad8:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8014ada:	693b      	ldr	r3, [r7, #16]
 8014adc:	795b      	ldrb	r3, [r3, #5]
 8014ade:	78fa      	ldrb	r2, [r7, #3]
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d002      	beq.n	8014aea <USBH_FindInterface+0x4e>
 8014ae4:	78fb      	ldrb	r3, [r7, #3]
 8014ae6:	2bff      	cmp	r3, #255	; 0xff
 8014ae8:	d111      	bne.n	8014b0e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8014aee:	78ba      	ldrb	r2, [r7, #2]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	d002      	beq.n	8014afa <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8014af4:	78bb      	ldrb	r3, [r7, #2]
 8014af6:	2bff      	cmp	r3, #255	; 0xff
 8014af8:	d109      	bne.n	8014b0e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8014afa:	693b      	ldr	r3, [r7, #16]
 8014afc:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8014afe:	787a      	ldrb	r2, [r7, #1]
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d002      	beq.n	8014b0a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8014b04:	787b      	ldrb	r3, [r7, #1]
 8014b06:	2bff      	cmp	r3, #255	; 0xff
 8014b08:	d101      	bne.n	8014b0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8014b0a:	7dfb      	ldrb	r3, [r7, #23]
 8014b0c:	e006      	b.n	8014b1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8014b0e:	7dfb      	ldrb	r3, [r7, #23]
 8014b10:	3301      	adds	r3, #1
 8014b12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8014b14:	7dfb      	ldrb	r3, [r7, #23]
 8014b16:	2b09      	cmp	r3, #9
 8014b18:	d9d6      	bls.n	8014ac8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8014b1a:	23ff      	movs	r3, #255	; 0xff
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	371c      	adds	r7, #28
 8014b20:	46bd      	mov	sp, r7
 8014b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b26:	4770      	bx	lr

08014b28 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b087      	sub	sp, #28
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	460b      	mov	r3, r1
 8014b32:	70fb      	strb	r3, [r7, #3]
 8014b34:	4613      	mov	r3, r2
 8014b36:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8014b46:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8014b48:	e017      	b.n	8014b7a <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8014b4a:	7dfb      	ldrb	r3, [r7, #23]
 8014b4c:	221a      	movs	r2, #26
 8014b4e:	fb02 f303 	mul.w	r3, r2, r3
 8014b52:	3308      	adds	r3, #8
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	4413      	add	r3, r2
 8014b58:	3302      	adds	r3, #2
 8014b5a:	613b      	str	r3, [r7, #16]
    if((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 8014b5c:	693b      	ldr	r3, [r7, #16]
 8014b5e:	789b      	ldrb	r3, [r3, #2]
 8014b60:	78fa      	ldrb	r2, [r7, #3]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d106      	bne.n	8014b74 <USBH_FindInterfaceIndex+0x4c>
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	78db      	ldrb	r3, [r3, #3]
 8014b6a:	78ba      	ldrb	r2, [r7, #2]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d101      	bne.n	8014b74 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 8014b70:	7dfb      	ldrb	r3, [r7, #23]
 8014b72:	e006      	b.n	8014b82 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 8014b74:	7dfb      	ldrb	r3, [r7, #23]
 8014b76:	3301      	adds	r3, #1
 8014b78:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8014b7a:	7dfb      	ldrb	r3, [r7, #23]
 8014b7c:	2b09      	cmp	r3, #9
 8014b7e:	d9e4      	bls.n	8014b4a <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 8014b80:	23ff      	movs	r3, #255	; 0xff
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	371c      	adds	r7, #28
 8014b86:	46bd      	mov	sp, r7
 8014b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8c:	4770      	bx	lr

08014b8e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8014b8e:	b580      	push	{r7, lr}
 8014b90:	b082      	sub	sp, #8
 8014b92:	af00      	add	r7, sp, #0
 8014b94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f004 ffa4 	bl	8019ae4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8014b9c:	2101      	movs	r1, #1
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f005 f8a8 	bl	8019cf4 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8014ba4:	2300      	movs	r3, #0
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
	...

08014bb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b088      	sub	sp, #32
 8014bb4:	af04      	add	r7, sp, #16
 8014bb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8014bb8:	2302      	movs	r3, #2
 8014bba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f000 fb80 	bl	80152c6 <USBH_IsPortEnabled>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d10c      	bne.n	8014be6 <USBH_Process+0x36>
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	781b      	ldrb	r3, [r3, #0]
 8014bd0:	b2db      	uxtb	r3, r3
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d007      	beq.n	8014be6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	781b      	ldrb	r3, [r3, #0]
 8014bda:	b2db      	uxtb	r3, r3
 8014bdc:	2b03      	cmp	r3, #3
 8014bde:	d002      	beq.n	8014be6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2203      	movs	r2, #3
 8014be4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	2b0b      	cmp	r3, #11
 8014bee:	f200 81ad 	bhi.w	8014f4c <USBH_Process+0x39c>
 8014bf2:	a201      	add	r2, pc, #4	; (adr r2, 8014bf8 <USBH_Process+0x48>)
 8014bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bf8:	08014c29 	.word	0x08014c29
 8014bfc:	08014c67 	.word	0x08014c67
 8014c00:	08014c7b 	.word	0x08014c7b
 8014c04:	08014f27 	.word	0x08014f27
 8014c08:	08014f4d 	.word	0x08014f4d
 8014c0c:	08014d25 	.word	0x08014d25
 8014c10:	08014ec1 	.word	0x08014ec1
 8014c14:	08014d55 	.word	0x08014d55
 8014c18:	08014d91 	.word	0x08014d91
 8014c1c:	08014dcb 	.word	0x08014dcb
 8014c20:	08014e13 	.word	0x08014e13
 8014c24:	08014f0f 	.word	0x08014f0f
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014c2e:	b2db      	uxtb	r3, r3
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	f000 818d 	beq.w	8014f50 <USBH_Process+0x3a0>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	2201      	movs	r2, #1
 8014c3a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8014c3c:	20c8      	movs	r0, #200	; 0xc8
 8014c3e:	f005 f8a3 	bl	8019d88 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f004 ffa9 	bl	8019b9a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	4619      	mov	r1, r3
 8014c60:	f001 fc72 	bl	8016548 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8014c64:	e174      	b.n	8014f50 <USBH_Process+0x3a0>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8014c6c:	2b01      	cmp	r3, #1
 8014c6e:	f040 8171 	bne.w	8014f54 <USBH_Process+0x3a4>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	2202      	movs	r2, #2
 8014c76:	701a      	strb	r2, [r3, #0]
    }
    break;
 8014c78:	e16c      	b.n	8014f54 <USBH_Process+0x3a4>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8014c7a:	2064      	movs	r0, #100	; 0x64
 8014c7c:	f005 f884 	bl	8019d88 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f004 ff65 	bl	8019b50 <USBH_LL_GetSpeed>
 8014c86:	4603      	mov	r3, r0
 8014c88:	461a      	mov	r2, r3
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	2205      	movs	r2, #5
 8014c94:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8014c96:	2100      	movs	r1, #0
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f001 fa13 	bl	80160c4 <USBH_AllocPipe>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8014ca6:	2180      	movs	r1, #128	; 0x80
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f001 fa0b 	bl	80160c4 <USBH_AllocPipe>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	461a      	mov	r2, r3
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	7919      	ldrb	r1, [r3, #4]
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8014cc6:	687a      	ldr	r2, [r7, #4]
 8014cc8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8014cca:	b292      	uxth	r2, r2
 8014ccc:	9202      	str	r2, [sp, #8]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	9201      	str	r2, [sp, #4]
 8014cd2:	9300      	str	r3, [sp, #0]
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2280      	movs	r2, #128	; 0x80
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f001 f9c4 	bl	8016066 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	7959      	ldrb	r1, [r3, #5]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8014cf2:	b292      	uxth	r2, r2
 8014cf4:	9202      	str	r2, [sp, #8]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	9201      	str	r2, [sp, #4]
 8014cfa:	9300      	str	r3, [sp, #0]
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	2200      	movs	r2, #0
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f001 f9b0 	bl	8016066 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	2201      	movs	r2, #1
 8014d0a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	f001 fc13 	bl	8016548 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8014d22:	e122      	b.n	8014f6a <USBH_Process+0x3ba>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f000 f925 	bl	8014f74 <USBH_HandleEnum>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	f040 8113 	bne.w	8014f58 <USBH_Process+0x3a8>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2200      	movs	r2, #0
 8014d36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8014d40:	2b01      	cmp	r3, #1
 8014d42:	d103      	bne.n	8014d4c <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2208      	movs	r2, #8
 8014d48:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8014d4a:	e105      	b.n	8014f58 <USBH_Process+0x3a8>
        phost->gState  = HOST_INPUT;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	2207      	movs	r2, #7
 8014d50:	701a      	strb	r2, [r3, #0]
    break;
 8014d52:	e101      	b.n	8014f58 <USBH_Process+0x3a8>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	f000 80fe 	beq.w	8014f5c <USBH_Process+0x3ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8014d66:	2101      	movs	r1, #1
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2208      	movs	r2, #8
 8014d70:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2205      	movs	r2, #5
 8014d76:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014d86:	2200      	movs	r2, #0
 8014d88:	4619      	mov	r1, r3
 8014d8a:	f001 fbdd 	bl	8016548 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8014d8e:	e0e5      	b.n	8014f5c <USBH_Process+0x3ac>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	4619      	mov	r1, r3
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f000 fc0b 	bl	80155b6 <USBH_SetCfg>
 8014da0:	4603      	mov	r3, r0
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d102      	bne.n	8014dac <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2209      	movs	r2, #9
 8014daa:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2201      	movs	r2, #1
 8014db0:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	4619      	mov	r1, r3
 8014dc4:	f001 fbc0 	bl	8016548 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8014dc8:	e0cf      	b.n	8014f6a <USBH_Process+0x3ba>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8014dd0:	f003 0320 	and.w	r3, r3, #32
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d00a      	beq.n	8014dee <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8014dd8:	2101      	movs	r1, #1
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f000 fc35 	bl	801564a <USBH_SetFeature>
 8014de0:	4603      	mov	r3, r0
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d106      	bne.n	8014df4 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	220a      	movs	r2, #10
 8014dea:	701a      	strb	r2, [r3, #0]
 8014dec:	e002      	b.n	8014df4 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	220a      	movs	r2, #10
 8014df2:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2201      	movs	r2, #1
 8014df8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014e08:	2200      	movs	r2, #0
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	f001 fb9c 	bl	8016548 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8014e10:	e0ab      	b.n	8014f6a <USBH_Process+0x3ba>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d042      	beq.n	8014ea2 <USBH_Process+0x2f2>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014e24:	2300      	movs	r3, #0
 8014e26:	73fb      	strb	r3, [r7, #15]
 8014e28:	e019      	b.n	8014e5e <USBH_Process+0x2ae>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8014e2a:	7bfb      	ldrb	r3, [r7, #15]
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	4413      	add	r3, r2
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	791a      	ldrb	r2, [r3, #4]
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d109      	bne.n	8014e58 <USBH_Process+0x2a8>
        {
          phost->pActiveClass = phost->pClass[idx];
 8014e44:	7bfb      	ldrb	r3, [r7, #15]
 8014e46:	687a      	ldr	r2, [r7, #4]
 8014e48:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	4413      	add	r3, r2
 8014e50:	685a      	ldr	r2, [r3, #4]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014e58:	7bfb      	ldrb	r3, [r7, #15]
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	73fb      	strb	r3, [r7, #15]
 8014e5e:	7bfb      	ldrb	r3, [r7, #15]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d0e2      	beq.n	8014e2a <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d016      	beq.n	8014e9c <USBH_Process+0x2ec>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014e74:	689b      	ldr	r3, [r3, #8]
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	4798      	blx	r3
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d109      	bne.n	8014e94 <USBH_Process+0x2e4>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2206      	movs	r2, #6
 8014e84:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8014e8c:	2103      	movs	r1, #3
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	4798      	blx	r3
 8014e92:	e006      	b.n	8014ea2 <USBH_Process+0x2f2>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	220d      	movs	r2, #13
 8014e98:	701a      	strb	r2, [r3, #0]
 8014e9a:	e002      	b.n	8014ea2 <USBH_Process+0x2f2>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	220d      	movs	r2, #13
 8014ea0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2205      	movs	r2, #5
 8014ea6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	4619      	mov	r1, r3
 8014eba:	f001 fb45 	bl	8016548 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8014ebe:	e054      	b.n	8014f6a <USBH_Process+0x3ba>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d00f      	beq.n	8014eea <USBH_Process+0x33a>
    {
      status = phost->pActiveClass->Requests(phost);
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014ed0:	691b      	ldr	r3, [r3, #16]
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	4798      	blx	r3
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8014eda:	7bbb      	ldrb	r3, [r7, #14]
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d13e      	bne.n	8014f60 <USBH_Process+0x3b0>
      {
        phost->gState  = HOST_CLASS;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	220b      	movs	r2, #11
 8014ee6:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8014ee8:	e03a      	b.n	8014f60 <USBH_Process+0x3b0>
      phost->gState  = HOST_ABORT_STATE;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	220d      	movs	r2, #13
 8014eee:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	2205      	movs	r2, #5
 8014ef4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014f04:	2200      	movs	r2, #0
 8014f06:	4619      	mov	r1, r3
 8014f08:	f001 fb1e 	bl	8016548 <osMessagePut>
    break;
 8014f0c:	e028      	b.n	8014f60 <USBH_Process+0x3b0>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d025      	beq.n	8014f64 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->BgndProcess(phost);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014f1e:	695b      	ldr	r3, [r3, #20]
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	4798      	blx	r3
    }
    break;
 8014f24:	e01e      	b.n	8014f64 <USBH_Process+0x3b4>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f7ff fd42 	bl	80149b0 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d018      	beq.n	8014f68 <USBH_Process+0x3b8>
    {
      phost->pActiveClass->DeInit(phost);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014f3c:	68db      	ldr	r3, [r3, #12]
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2200      	movs	r2, #0
 8014f46:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
    }
    break;
 8014f4a:	e00d      	b.n	8014f68 <USBH_Process+0x3b8>

  case HOST_ABORT_STATE:
  default :
    break;
 8014f4c:	bf00      	nop
 8014f4e:	e00c      	b.n	8014f6a <USBH_Process+0x3ba>
    break;
 8014f50:	bf00      	nop
 8014f52:	e00a      	b.n	8014f6a <USBH_Process+0x3ba>
    break;
 8014f54:	bf00      	nop
 8014f56:	e008      	b.n	8014f6a <USBH_Process+0x3ba>
    break;
 8014f58:	bf00      	nop
 8014f5a:	e006      	b.n	8014f6a <USBH_Process+0x3ba>
    break;
 8014f5c:	bf00      	nop
 8014f5e:	e004      	b.n	8014f6a <USBH_Process+0x3ba>
    break;
 8014f60:	bf00      	nop
 8014f62:	e002      	b.n	8014f6a <USBH_Process+0x3ba>
    break;
 8014f64:	bf00      	nop
 8014f66:	e000      	b.n	8014f6a <USBH_Process+0x3ba>
    break;
 8014f68:	bf00      	nop
  }
 return USBH_OK;
 8014f6a:	2300      	movs	r3, #0
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3710      	adds	r7, #16
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}

08014f74 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b088      	sub	sp, #32
 8014f78:	af04      	add	r7, sp, #16
 8014f7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	785b      	ldrb	r3, [r3, #1]
 8014f84:	2b07      	cmp	r3, #7
 8014f86:	f200 8132 	bhi.w	80151ee <USBH_HandleEnum+0x27a>
 8014f8a:	a201      	add	r2, pc, #4	; (adr r2, 8014f90 <USBH_HandleEnum+0x1c>)
 8014f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f90:	08014fb1 	.word	0x08014fb1
 8014f94:	08015023 	.word	0x08015023
 8014f98:	0801503b 	.word	0x0801503b
 8014f9c:	080150b1 	.word	0x080150b1
 8014fa0:	080150c9 	.word	0x080150c9
 8014fa4:	080150e7 	.word	0x080150e7
 8014fa8:	08015153 	.word	0x08015153
 8014fac:	080151a3 	.word	0x080151a3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8014fb0:	2108      	movs	r1, #8
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 fa2f 	bl	8015416 <USBH_Get_DevDesc>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	f040 8119 	bne.w	80151f2 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2201      	movs	r2, #1
 8014fce:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	7919      	ldrb	r1, [r3, #4]
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8014fe4:	b292      	uxth	r2, r2
 8014fe6:	9202      	str	r2, [sp, #8]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	9201      	str	r2, [sp, #4]
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2280      	movs	r2, #128	; 0x80
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f001 f837 	bl	8016066 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	7959      	ldrb	r1, [r3, #5]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8015008:	687a      	ldr	r2, [r7, #4]
 801500a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 801500c:	b292      	uxth	r2, r2
 801500e:	9202      	str	r2, [sp, #8]
 8015010:	2200      	movs	r2, #0
 8015012:	9201      	str	r2, [sp, #4]
 8015014:	9300      	str	r3, [sp, #0]
 8015016:	4603      	mov	r3, r0
 8015018:	2200      	movs	r2, #0
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f001 f823 	bl	8016066 <USBH_OpenPipe>

    }
    break;
 8015020:	e0e7      	b.n	80151f2 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8015022:	2112      	movs	r1, #18
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f000 f9f6 	bl	8015416 <USBH_Get_DevDesc>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	f040 80e2 	bne.w	80151f6 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2202      	movs	r2, #2
 8015036:	705a      	strb	r2, [r3, #1]

    }
    break;
 8015038:	e0dd      	b.n	80151f6 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 801503a:	2101      	movs	r1, #1
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f000 fa96 	bl	801556e <USBH_SetAddress>
 8015042:	4603      	mov	r3, r0
 8015044:	2b00      	cmp	r3, #0
 8015046:	f040 80d8 	bne.w	80151fa <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 801504a:	2002      	movs	r0, #2
 801504c:	f004 fe9c 	bl	8019d88 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2201      	movs	r2, #1
 8015054:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2203      	movs	r2, #3
 801505c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	7919      	ldrb	r1, [r3, #4]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 801506e:	687a      	ldr	r2, [r7, #4]
 8015070:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8015072:	b292      	uxth	r2, r2
 8015074:	9202      	str	r2, [sp, #8]
 8015076:	2200      	movs	r2, #0
 8015078:	9201      	str	r2, [sp, #4]
 801507a:	9300      	str	r3, [sp, #0]
 801507c:	4603      	mov	r3, r0
 801507e:	2280      	movs	r2, #128	; 0x80
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f000 fff0 	bl	8016066 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	7959      	ldrb	r1, [r3, #5]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8015096:	687a      	ldr	r2, [r7, #4]
 8015098:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 801509a:	b292      	uxth	r2, r2
 801509c:	9202      	str	r2, [sp, #8]
 801509e:	2200      	movs	r2, #0
 80150a0:	9201      	str	r2, [sp, #4]
 80150a2:	9300      	str	r3, [sp, #0]
 80150a4:	4603      	mov	r3, r0
 80150a6:	2200      	movs	r2, #0
 80150a8:	6878      	ldr	r0, [r7, #4]
 80150aa:	f000 ffdc 	bl	8016066 <USBH_OpenPipe>
    }
    break;
 80150ae:	e0a4      	b.n	80151fa <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80150b0:	2109      	movs	r1, #9
 80150b2:	6878      	ldr	r0, [r7, #4]
 80150b4:	f000 f9d7 	bl	8015466 <USBH_Get_CfgDesc>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	f040 809f 	bne.w	80151fe <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2204      	movs	r2, #4
 80150c4:	705a      	strb	r2, [r3, #1]
    }
    break;
 80150c6:	e09a      	b.n	80151fe <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80150ce:	4619      	mov	r1, r3
 80150d0:	6878      	ldr	r0, [r7, #4]
 80150d2:	f000 f9c8 	bl	8015466 <USBH_Get_CfgDesc>
 80150d6:	4603      	mov	r3, r0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	f040 8092 	bne.w	8015202 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2205      	movs	r2, #5
 80150e2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80150e4:	e08d      	b.n	8015202 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d01e      	beq.n	801512e <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80150fc:	23ff      	movs	r3, #255	; 0xff
 80150fe:	6878      	ldr	r0, [r7, #4]
 8015100:	f000 f9d5 	bl	80154ae <USBH_Get_StringDesc>
 8015104:	4603      	mov	r3, r0
 8015106:	2b00      	cmp	r3, #0
 8015108:	d17d      	bne.n	8015206 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	2206      	movs	r2, #6
 801510e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2205      	movs	r2, #5
 8015114:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015124:	2200      	movs	r2, #0
 8015126:	4619      	mov	r1, r3
 8015128:	f001 fa0e 	bl	8016548 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 801512c:	e06b      	b.n	8015206 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	2206      	movs	r2, #6
 8015132:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2205      	movs	r2, #5
 8015138:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015148:	2200      	movs	r2, #0
 801514a:	4619      	mov	r1, r3
 801514c:	f001 f9fc 	bl	8016548 <osMessagePut>
    break;
 8015150:	e059      	b.n	8015206 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8015158:	2b00      	cmp	r3, #0
 801515a:	d010      	beq.n	801517e <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8015168:	23ff      	movs	r3, #255	; 0xff
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f000 f99f 	bl	80154ae <USBH_Get_StringDesc>
 8015170:	4603      	mov	r3, r0
 8015172:	2b00      	cmp	r3, #0
 8015174:	d149      	bne.n	801520a <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2207      	movs	r2, #7
 801517a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 801517c:	e045      	b.n	801520a <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	2207      	movs	r2, #7
 8015182:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2205      	movs	r2, #5
 8015188:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015198:	2200      	movs	r2, #0
 801519a:	4619      	mov	r1, r3
 801519c:	f001 f9d4 	bl	8016548 <osMessagePut>
    break;
 80151a0:	e033      	b.n	801520a <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d00f      	beq.n	80151cc <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80151b8:	23ff      	movs	r3, #255	; 0xff
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f000 f977 	bl	80154ae <USBH_Get_StringDesc>
 80151c0:	4603      	mov	r3, r0
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d123      	bne.n	801520e <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80151c6:	2300      	movs	r3, #0
 80151c8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80151ca:	e020      	b.n	801520e <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 80151cc:	2300      	movs	r3, #0
 80151ce:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2205      	movs	r2, #5
 80151d4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80151e4:	2200      	movs	r2, #0
 80151e6:	4619      	mov	r1, r3
 80151e8:	f001 f9ae 	bl	8016548 <osMessagePut>
    break;
 80151ec:	e00f      	b.n	801520e <USBH_HandleEnum+0x29a>

  default:
    break;
 80151ee:	bf00      	nop
 80151f0:	e00e      	b.n	8015210 <USBH_HandleEnum+0x29c>
    break;
 80151f2:	bf00      	nop
 80151f4:	e00c      	b.n	8015210 <USBH_HandleEnum+0x29c>
    break;
 80151f6:	bf00      	nop
 80151f8:	e00a      	b.n	8015210 <USBH_HandleEnum+0x29c>
    break;
 80151fa:	bf00      	nop
 80151fc:	e008      	b.n	8015210 <USBH_HandleEnum+0x29c>
    break;
 80151fe:	bf00      	nop
 8015200:	e006      	b.n	8015210 <USBH_HandleEnum+0x29c>
    break;
 8015202:	bf00      	nop
 8015204:	e004      	b.n	8015210 <USBH_HandleEnum+0x29c>
    break;
 8015206:	bf00      	nop
 8015208:	e002      	b.n	8015210 <USBH_HandleEnum+0x29c>
    break;
 801520a:	bf00      	nop
 801520c:	e000      	b.n	8015210 <USBH_HandleEnum+0x29c>
    break;
 801520e:	bf00      	nop
  }
  return Status;
 8015210:	7bfb      	ldrb	r3, [r7, #15]
}
 8015212:	4618      	mov	r0, r3
 8015214:	3710      	adds	r7, #16
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}
 801521a:	bf00      	nop

0801521c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 801521c:	b480      	push	{r7}
 801521e:	b083      	sub	sp, #12
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
 8015224:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	683a      	ldr	r2, [r7, #0]
 801522a:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
}
 801522e:	bf00      	nop
 8015230:	370c      	adds	r7, #12
 8015232:	46bd      	mov	sp, r7
 8015234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015238:	4770      	bx	lr

0801523a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 801523a:	b580      	push	{r7, lr}
 801523c:	b082      	sub	sp, #8
 801523e:	af00      	add	r7, sp, #0
 8015240:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8015248:	1c5a      	adds	r2, r3, #1
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
  USBH_HandleSof(phost);
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f000 f804 	bl	801525e <USBH_HandleSof>
}
 8015256:	bf00      	nop
 8015258:	3708      	adds	r7, #8
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}

0801525e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 801525e:	b580      	push	{r7, lr}
 8015260:	b082      	sub	sp, #8
 8015262:	af00      	add	r7, sp, #0
 8015264:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	b2db      	uxtb	r3, r3
 801526c:	2b0b      	cmp	r3, #11
 801526e:	d10a      	bne.n	8015286 <USBH_HandleSof+0x28>
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8015276:	2b00      	cmp	r3, #0
 8015278:	d005      	beq.n	8015286 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8015280:	699b      	ldr	r3, [r3, #24]
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	4798      	blx	r3
  }
}
 8015286:	bf00      	nop
 8015288:	3708      	adds	r7, #8
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}

0801528e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 801528e:	b480      	push	{r7}
 8015290:	b083      	sub	sp, #12
 8015292:	af00      	add	r7, sp, #0
 8015294:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	2201      	movs	r2, #1
 801529a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 801529e:	bf00      	nop
}
 80152a0:	370c      	adds	r7, #12
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr

080152aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80152aa:	b480      	push	{r7}
 80152ac:	b083      	sub	sp, #12
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2200      	movs	r2, #0
 80152b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80152ba:	bf00      	nop
}
 80152bc:	370c      	adds	r7, #12
 80152be:	46bd      	mov	sp, r7
 80152c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c4:	4770      	bx	lr

080152c6 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80152c6:	b480      	push	{r7}
 80152c8:	b083      	sub	sp, #12
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	370c      	adds	r7, #12
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr

080152e0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	781b      	ldrb	r3, [r3, #0]
 80152ec:	b2db      	uxtb	r3, r3
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d10f      	bne.n	8015312 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2201      	movs	r2, #1
 80152f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015300:	2b00      	cmp	r3, #0
 8015302:	d00e      	beq.n	8015322 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801530a:	2104      	movs	r1, #4
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	4798      	blx	r3
 8015310:	e007      	b.n	8015322 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015318:	2b01      	cmp	r3, #1
 801531a:	d102      	bne.n	8015322 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	2202      	movs	r2, #2
 8015320:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2201      	movs	r2, #1
 8015326:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015336:	2200      	movs	r2, #0
 8015338:	4619      	mov	r1, r3
 801533a:	f001 f905 	bl	8016548 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801533e:	2300      	movs	r3, #0
}
 8015340:	4618      	mov	r0, r3
 8015342:	3708      	adds	r7, #8
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f004 fbe2 	bl	8019b1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	791b      	ldrb	r3, [r3, #4]
 801535a:	4619      	mov	r1, r3
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f000 fed0 	bl	8016102 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	795b      	ldrb	r3, [r3, #5]
 8015366:	4619      	mov	r1, r3
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f000 feca 	bl	8016102 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	2200      	movs	r2, #0
 8015372:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801537c:	2b00      	cmp	r3, #0
 801537e:	d005      	beq.n	801538c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015386:	2105      	movs	r1, #5
 8015388:	6878      	ldr	r0, [r7, #4]
 801538a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f004 fba9 	bl	8019ae4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2203      	movs	r2, #3
 8015396:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2201      	movs	r2, #1
 801539c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80153ac:	2200      	movs	r2, #0
 80153ae:	4619      	mov	r1, r3
 80153b0:	f001 f8ca 	bl	8016548 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80153b4:	2300      	movs	r3, #0
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3708      	adds	r7, #8
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}

080153be <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b086      	sub	sp, #24
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 80153cc:	f107 030c 	add.w	r3, r7, #12
 80153d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80153d4:	4618      	mov	r0, r3
 80153d6:	f001 f8f7 	bl	80165c8 <osMessageGet>
    if(event.status == osEventMessage)
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	2b10      	cmp	r3, #16
 80153de:	d1f2      	bne.n	80153c6 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f7ff fbe5 	bl	8014bb0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80153e6:	e7ee      	b.n	80153c6 <USBH_Process_OS+0x8>

080153e8 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2201      	movs	r2, #1
 80153f4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015404:	2200      	movs	r2, #0
 8015406:	4619      	mov	r1, r3
 8015408:	f001 f89e 	bl	8016548 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 801540c:	2300      	movs	r3, #0
}
 801540e:	4618      	mov	r0, r3
 8015410:	3708      	adds	r7, #8
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}

08015416 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8015416:	b580      	push	{r7, lr}
 8015418:	b086      	sub	sp, #24
 801541a:	af02      	add	r7, sp, #8
 801541c:	6078      	str	r0, [r7, #4]
 801541e:	460b      	mov	r3, r1
 8015420:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8015428:	78fb      	ldrb	r3, [r7, #3]
 801542a:	b29b      	uxth	r3, r3
 801542c:	9300      	str	r3, [sp, #0]
 801542e:	4613      	mov	r3, r2
 8015430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015434:	2100      	movs	r1, #0
 8015436:	6878      	ldr	r0, [r7, #4]
 8015438:	f000 f864 	bl	8015504 <USBH_GetDescriptor>
 801543c:	4603      	mov	r3, r0
 801543e:	73fb      	strb	r3, [r7, #15]
 8015440:	7bfb      	ldrb	r3, [r7, #15]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d10a      	bne.n	801545c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	f203 3022 	addw	r0, r3, #802	; 0x322
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015452:	78fa      	ldrb	r2, [r7, #3]
 8015454:	b292      	uxth	r2, r2
 8015456:	4619      	mov	r1, r3
 8015458:	f000 f91b 	bl	8015692 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 801545c:	7bfb      	ldrb	r3, [r7, #15]
}
 801545e:	4618      	mov	r0, r3
 8015460:	3710      	adds	r7, #16
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}

08015466 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8015466:	b580      	push	{r7, lr}
 8015468:	b086      	sub	sp, #24
 801546a:	af02      	add	r7, sp, #8
 801546c:	6078      	str	r0, [r7, #4]
 801546e:	460b      	mov	r3, r1
 8015470:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	331c      	adds	r3, #28
 8015476:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8015478:	887b      	ldrh	r3, [r7, #2]
 801547a:	9300      	str	r3, [sp, #0]
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015482:	2100      	movs	r1, #0
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f000 f83d 	bl	8015504 <USBH_GetDescriptor>
 801548a:	4603      	mov	r3, r0
 801548c:	72fb      	strb	r3, [r7, #11]
 801548e:	7afb      	ldrb	r3, [r7, #11]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d107      	bne.n	80154a4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801549a:	887a      	ldrh	r2, [r7, #2]
 801549c:	68f9      	ldr	r1, [r7, #12]
 801549e:	4618      	mov	r0, r3
 80154a0:	f000 f967 	bl	8015772 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80154a4:	7afb      	ldrb	r3, [r7, #11]
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	3710      	adds	r7, #16
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bd80      	pop	{r7, pc}

080154ae <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80154ae:	b580      	push	{r7, lr}
 80154b0:	b088      	sub	sp, #32
 80154b2:	af02      	add	r7, sp, #8
 80154b4:	60f8      	str	r0, [r7, #12]
 80154b6:	607a      	str	r2, [r7, #4]
 80154b8:	461a      	mov	r2, r3
 80154ba:	460b      	mov	r3, r1
 80154bc:	72fb      	strb	r3, [r7, #11]
 80154be:	4613      	mov	r3, r2
 80154c0:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80154c2:	7afb      	ldrb	r3, [r7, #11]
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80154ca:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80154d2:	893b      	ldrh	r3, [r7, #8]
 80154d4:	9300      	str	r3, [sp, #0]
 80154d6:	460b      	mov	r3, r1
 80154d8:	2100      	movs	r1, #0
 80154da:	68f8      	ldr	r0, [r7, #12]
 80154dc:	f000 f812 	bl	8015504 <USBH_GetDescriptor>
 80154e0:	4603      	mov	r3, r0
 80154e2:	75fb      	strb	r3, [r7, #23]
 80154e4:	7dfb      	ldrb	r3, [r7, #23]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d107      	bne.n	80154fa <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80154f0:	893a      	ldrh	r2, [r7, #8]
 80154f2:	6879      	ldr	r1, [r7, #4]
 80154f4:	4618      	mov	r0, r3
 80154f6:	f000 fa3a 	bl	801596e <USBH_ParseStringDesc>
  }
  return status;
 80154fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	3718      	adds	r7, #24
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}

08015504 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b084      	sub	sp, #16
 8015508:	af00      	add	r7, sp, #0
 801550a:	60f8      	str	r0, [r7, #12]
 801550c:	607b      	str	r3, [r7, #4]
 801550e:	460b      	mov	r3, r1
 8015510:	72fb      	strb	r3, [r7, #11]
 8015512:	4613      	mov	r3, r2
 8015514:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	789b      	ldrb	r3, [r3, #2]
 801551a:	2b01      	cmp	r3, #1
 801551c:	d11c      	bne.n	8015558 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801551e:	7afb      	ldrb	r3, [r7, #11]
 8015520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015524:	b2da      	uxtb	r2, r3
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2206      	movs	r2, #6
 801552e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	893a      	ldrh	r2, [r7, #8]
 8015534:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8015536:	893b      	ldrh	r3, [r7, #8]
 8015538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801553c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015540:	d104      	bne.n	801554c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	f240 4209 	movw	r2, #1033	; 0x409
 8015548:	829a      	strh	r2, [r3, #20]
 801554a:	e002      	b.n	8015552 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	2200      	movs	r2, #0
 8015550:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	8b3a      	ldrh	r2, [r7, #24]
 8015556:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8015558:	8b3b      	ldrh	r3, [r7, #24]
 801555a:	461a      	mov	r2, r3
 801555c:	6879      	ldr	r1, [r7, #4]
 801555e:	68f8      	ldr	r0, [r7, #12]
 8015560:	f000 fa53 	bl	8015a0a <USBH_CtlReq>
 8015564:	4603      	mov	r3, r0
}
 8015566:	4618      	mov	r0, r3
 8015568:	3710      	adds	r7, #16
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}

0801556e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801556e:	b580      	push	{r7, lr}
 8015570:	b082      	sub	sp, #8
 8015572:	af00      	add	r7, sp, #0
 8015574:	6078      	str	r0, [r7, #4]
 8015576:	460b      	mov	r3, r1
 8015578:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	789b      	ldrb	r3, [r3, #2]
 801557e:	2b01      	cmp	r3, #1
 8015580:	d10f      	bne.n	80155a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2200      	movs	r2, #0
 8015586:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	2205      	movs	r2, #5
 801558c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801558e:	78fb      	ldrb	r3, [r7, #3]
 8015590:	b29a      	uxth	r2, r3
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	2200      	movs	r2, #0
 801559a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2200      	movs	r2, #0
 80155a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80155a2:	2200      	movs	r2, #0
 80155a4:	2100      	movs	r1, #0
 80155a6:	6878      	ldr	r0, [r7, #4]
 80155a8:	f000 fa2f 	bl	8015a0a <USBH_CtlReq>
 80155ac:	4603      	mov	r3, r0
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3708      	adds	r7, #8
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}

080155b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80155b6:	b580      	push	{r7, lr}
 80155b8:	b082      	sub	sp, #8
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	6078      	str	r0, [r7, #4]
 80155be:	460b      	mov	r3, r1
 80155c0:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	789b      	ldrb	r3, [r3, #2]
 80155c6:	2b01      	cmp	r3, #1
 80155c8:	d10e      	bne.n	80155e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2200      	movs	r2, #0
 80155ce:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2209      	movs	r2, #9
 80155d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	887a      	ldrh	r2, [r7, #2]
 80155da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2200      	movs	r2, #0
 80155e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2200      	movs	r2, #0
 80155e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80155e8:	2200      	movs	r2, #0
 80155ea:	2100      	movs	r1, #0
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f000 fa0c 	bl	8015a0a <USBH_CtlReq>
 80155f2:	4603      	mov	r3, r0
}
 80155f4:	4618      	mov	r0, r3
 80155f6:	3708      	adds	r7, #8
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}

080155fc <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b082      	sub	sp, #8
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	460b      	mov	r3, r1
 8015606:	70fb      	strb	r3, [r7, #3]
 8015608:	4613      	mov	r3, r2
 801560a:	70bb      	strb	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	789b      	ldrb	r3, [r3, #2]
 8015610:	2b01      	cmp	r3, #1
 8015612:	d110      	bne.n	8015636 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2201      	movs	r2, #1
 8015618:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	220b      	movs	r2, #11
 801561e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8015620:	78bb      	ldrb	r3, [r7, #2]
 8015622:	b29a      	uxth	r2, r3
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8015628:	78fb      	ldrb	r3, [r7, #3]
 801562a:	b29a      	uxth	r2, r3
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2200      	movs	r2, #0
 8015634:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8015636:	2200      	movs	r2, #0
 8015638:	2100      	movs	r1, #0
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f000 f9e5 	bl	8015a0a <USBH_CtlReq>
 8015640:	4603      	mov	r3, r0
}
 8015642:	4618      	mov	r0, r3
 8015644:	3708      	adds	r7, #8
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}

0801564a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801564a:	b580      	push	{r7, lr}
 801564c:	b082      	sub	sp, #8
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
 8015652:	460b      	mov	r3, r1
 8015654:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	789b      	ldrb	r3, [r3, #2]
 801565a:	2b01      	cmp	r3, #1
 801565c:	d10f      	bne.n	801567e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2200      	movs	r2, #0
 8015662:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2203      	movs	r2, #3
 8015668:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801566a:	78fb      	ldrb	r3, [r7, #3]
 801566c:	b29a      	uxth	r2, r3
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	2200      	movs	r2, #0
 8015676:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2200      	movs	r2, #0
 801567c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801567e:	2200      	movs	r2, #0
 8015680:	2100      	movs	r1, #0
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	f000 f9c1 	bl	8015a0a <USBH_CtlReq>
 8015688:	4603      	mov	r3, r0
}
 801568a:	4618      	mov	r0, r3
 801568c:	3708      	adds	r7, #8
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}

08015692 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8015692:	b480      	push	{r7}
 8015694:	b085      	sub	sp, #20
 8015696:	af00      	add	r7, sp, #0
 8015698:	60f8      	str	r0, [r7, #12]
 801569a:	60b9      	str	r1, [r7, #8]
 801569c:	4613      	mov	r3, r2
 801569e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	781a      	ldrb	r2, [r3, #0]
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	785a      	ldrb	r2, [r3, #1]
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	3302      	adds	r3, #2
 80156b4:	781b      	ldrb	r3, [r3, #0]
 80156b6:	b29a      	uxth	r2, r3
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	3303      	adds	r3, #3
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	b29b      	uxth	r3, r3
 80156c0:	021b      	lsls	r3, r3, #8
 80156c2:	b29b      	uxth	r3, r3
 80156c4:	4313      	orrs	r3, r2
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	791a      	ldrb	r2, [r3, #4]
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	795a      	ldrb	r2, [r3, #5]
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	799a      	ldrb	r2, [r3, #6]
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	79da      	ldrb	r2, [r3, #7]
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80156ec:	88fb      	ldrh	r3, [r7, #6]
 80156ee:	2b08      	cmp	r3, #8
 80156f0:	d939      	bls.n	8015766 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	3308      	adds	r3, #8
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	b29a      	uxth	r2, r3
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	3309      	adds	r3, #9
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	b29b      	uxth	r3, r3
 8015702:	021b      	lsls	r3, r3, #8
 8015704:	b29b      	uxth	r3, r3
 8015706:	4313      	orrs	r3, r2
 8015708:	b29a      	uxth	r2, r3
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	330a      	adds	r3, #10
 8015712:	781b      	ldrb	r3, [r3, #0]
 8015714:	b29a      	uxth	r2, r3
 8015716:	68bb      	ldr	r3, [r7, #8]
 8015718:	330b      	adds	r3, #11
 801571a:	781b      	ldrb	r3, [r3, #0]
 801571c:	b29b      	uxth	r3, r3
 801571e:	021b      	lsls	r3, r3, #8
 8015720:	b29b      	uxth	r3, r3
 8015722:	4313      	orrs	r3, r2
 8015724:	b29a      	uxth	r2, r3
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	330c      	adds	r3, #12
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	b29a      	uxth	r2, r3
 8015732:	68bb      	ldr	r3, [r7, #8]
 8015734:	330d      	adds	r3, #13
 8015736:	781b      	ldrb	r3, [r3, #0]
 8015738:	b29b      	uxth	r3, r3
 801573a:	021b      	lsls	r3, r3, #8
 801573c:	b29b      	uxth	r3, r3
 801573e:	4313      	orrs	r3, r2
 8015740:	b29a      	uxth	r2, r3
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	7b9a      	ldrb	r2, [r3, #14]
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	7bda      	ldrb	r2, [r3, #15]
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	7c1a      	ldrb	r2, [r3, #16]
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	7c5a      	ldrb	r2, [r3, #17]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	745a      	strb	r2, [r3, #17]
  }
}
 8015766:	bf00      	nop
 8015768:	3714      	adds	r7, #20
 801576a:	46bd      	mov	sp, r7
 801576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015770:	4770      	bx	lr

08015772 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8015772:	b580      	push	{r7, lr}
 8015774:	b08a      	sub	sp, #40	; 0x28
 8015776:	af00      	add	r7, sp, #0
 8015778:	60f8      	str	r0, [r7, #12]
 801577a:	60b9      	str	r1, [r7, #8]
 801577c:	4613      	mov	r3, r2
 801577e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8015784:	2300      	movs	r3, #0
 8015786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 801578a:	2300      	movs	r3, #0
 801578c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8015790:	68bb      	ldr	r3, [r7, #8]
 8015792:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	781a      	ldrb	r2, [r3, #0]
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 801579c:	68bb      	ldr	r3, [r7, #8]
 801579e:	785a      	ldrb	r2, [r3, #1]
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	3302      	adds	r3, #2
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	b29a      	uxth	r2, r3
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	3303      	adds	r3, #3
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	021b      	lsls	r3, r3, #8
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	4313      	orrs	r3, r2
 80157ba:	b29a      	uxth	r2, r3
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	791a      	ldrb	r2, [r3, #4]
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	795a      	ldrb	r2, [r3, #5]
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	799a      	ldrb	r2, [r3, #6]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	79da      	ldrb	r2, [r3, #7]
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	7a1a      	ldrb	r2, [r3, #8]
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80157e8:	88fb      	ldrh	r3, [r7, #6]
 80157ea:	2b09      	cmp	r3, #9
 80157ec:	d95f      	bls.n	80158ae <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80157ee:	2309      	movs	r3, #9
 80157f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80157f2:	2300      	movs	r3, #0
 80157f4:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80157f6:	e051      	b.n	801589c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80157f8:	f107 0316 	add.w	r3, r7, #22
 80157fc:	4619      	mov	r1, r3
 80157fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015800:	f000 f8e8 	bl	80159d4 <USBH_GetNextDesc>
 8015804:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8015806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015808:	785b      	ldrb	r3, [r3, #1]
 801580a:	2b04      	cmp	r3, #4
 801580c:	d146      	bne.n	801589c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801580e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015812:	221a      	movs	r2, #26
 8015814:	fb02 f303 	mul.w	r3, r2, r3
 8015818:	3308      	adds	r3, #8
 801581a:	68fa      	ldr	r2, [r7, #12]
 801581c:	4413      	add	r3, r2
 801581e:	3302      	adds	r3, #2
 8015820:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8015822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015824:	69f8      	ldr	r0, [r7, #28]
 8015826:	f000 f846 	bl	80158b6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801582a:	2300      	movs	r3, #0
 801582c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8015830:	2300      	movs	r3, #0
 8015832:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8015834:	e022      	b.n	801587c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8015836:	f107 0316 	add.w	r3, r7, #22
 801583a:	4619      	mov	r1, r3
 801583c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801583e:	f000 f8c9 	bl	80159d4 <USBH_GetNextDesc>
 8015842:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8015844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015846:	785b      	ldrb	r3, [r3, #1]
 8015848:	2b05      	cmp	r3, #5
 801584a:	d117      	bne.n	801587c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801584c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015850:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015854:	3201      	adds	r2, #1
 8015856:	00d2      	lsls	r2, r2, #3
 8015858:	211a      	movs	r1, #26
 801585a:	fb01 f303 	mul.w	r3, r1, r3
 801585e:	4413      	add	r3, r2
 8015860:	3308      	adds	r3, #8
 8015862:	68fa      	ldr	r2, [r7, #12]
 8015864:	4413      	add	r3, r2
 8015866:	3304      	adds	r3, #4
 8015868:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 801586a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801586c:	69b8      	ldr	r0, [r7, #24]
 801586e:	f000 f851 	bl	8015914 <USBH_ParseEPDesc>
            ep_ix++;
 8015872:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015876:	3301      	adds	r3, #1
 8015878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801587c:	69fb      	ldr	r3, [r7, #28]
 801587e:	791b      	ldrb	r3, [r3, #4]
 8015880:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015884:	429a      	cmp	r2, r3
 8015886:	d204      	bcs.n	8015892 <USBH_ParseCfgDesc+0x120>
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	885a      	ldrh	r2, [r3, #2]
 801588c:	8afb      	ldrh	r3, [r7, #22]
 801588e:	429a      	cmp	r2, r3
 8015890:	d8d1      	bhi.n	8015836 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8015892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015896:	3301      	adds	r3, #1
 8015898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801589c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80158a0:	2b09      	cmp	r3, #9
 80158a2:	d804      	bhi.n	80158ae <USBH_ParseCfgDesc+0x13c>
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	885a      	ldrh	r2, [r3, #2]
 80158a8:	8afb      	ldrh	r3, [r7, #22]
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d8a4      	bhi.n	80157f8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80158ae:	bf00      	nop
 80158b0:	3728      	adds	r7, #40	; 0x28
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}

080158b6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80158b6:	b480      	push	{r7}
 80158b8:	b083      	sub	sp, #12
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	6078      	str	r0, [r7, #4]
 80158be:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	781a      	ldrb	r2, [r3, #0]
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	785a      	ldrb	r2, [r3, #1]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	789a      	ldrb	r2, [r3, #2]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	78da      	ldrb	r2, [r3, #3]
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	791a      	ldrb	r2, [r3, #4]
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	795a      	ldrb	r2, [r3, #5]
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	799a      	ldrb	r2, [r3, #6]
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	79da      	ldrb	r2, [r3, #7]
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	7a1a      	ldrb	r2, [r3, #8]
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	721a      	strb	r2, [r3, #8]
}
 8015908:	bf00      	nop
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr

08015914 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8015914:	b480      	push	{r7}
 8015916:	b083      	sub	sp, #12
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	781a      	ldrb	r2, [r3, #0]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	785a      	ldrb	r2, [r3, #1]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	789a      	ldrb	r2, [r3, #2]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	78da      	ldrb	r2, [r3, #3]
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	3304      	adds	r3, #4
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	b29a      	uxth	r2, r3
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	3305      	adds	r3, #5
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	b29b      	uxth	r3, r3
 801594e:	021b      	lsls	r3, r3, #8
 8015950:	b29b      	uxth	r3, r3
 8015952:	4313      	orrs	r3, r2
 8015954:	b29a      	uxth	r2, r3
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	799a      	ldrb	r2, [r3, #6]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	719a      	strb	r2, [r3, #6]
}
 8015962:	bf00      	nop
 8015964:	370c      	adds	r7, #12
 8015966:	46bd      	mov	sp, r7
 8015968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596c:	4770      	bx	lr

0801596e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 801596e:	b480      	push	{r7}
 8015970:	b087      	sub	sp, #28
 8015972:	af00      	add	r7, sp, #0
 8015974:	60f8      	str	r0, [r7, #12]
 8015976:	60b9      	str	r1, [r7, #8]
 8015978:	4613      	mov	r3, r2
 801597a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	3301      	adds	r3, #1
 8015980:	781b      	ldrb	r3, [r3, #0]
 8015982:	2b03      	cmp	r3, #3
 8015984:	d120      	bne.n	80159c8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	781b      	ldrb	r3, [r3, #0]
 801598a:	1e9a      	subs	r2, r3, #2
 801598c:	88fb      	ldrh	r3, [r7, #6]
 801598e:	4293      	cmp	r3, r2
 8015990:	bf28      	it	cs
 8015992:	4613      	movcs	r3, r2
 8015994:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	3302      	adds	r3, #2
 801599a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801599c:	2300      	movs	r3, #0
 801599e:	82fb      	strh	r3, [r7, #22]
 80159a0:	e00b      	b.n	80159ba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80159a2:	8afb      	ldrh	r3, [r7, #22]
 80159a4:	68fa      	ldr	r2, [r7, #12]
 80159a6:	4413      	add	r3, r2
 80159a8:	781a      	ldrb	r2, [r3, #0]
 80159aa:	68bb      	ldr	r3, [r7, #8]
 80159ac:	701a      	strb	r2, [r3, #0]
      pdest++;
 80159ae:	68bb      	ldr	r3, [r7, #8]
 80159b0:	3301      	adds	r3, #1
 80159b2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80159b4:	8afb      	ldrh	r3, [r7, #22]
 80159b6:	3302      	adds	r3, #2
 80159b8:	82fb      	strh	r3, [r7, #22]
 80159ba:	8afa      	ldrh	r2, [r7, #22]
 80159bc:	8abb      	ldrh	r3, [r7, #20]
 80159be:	429a      	cmp	r2, r3
 80159c0:	d3ef      	bcc.n	80159a2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80159c2:	68bb      	ldr	r3, [r7, #8]
 80159c4:	2200      	movs	r2, #0
 80159c6:	701a      	strb	r2, [r3, #0]
  }
}
 80159c8:	bf00      	nop
 80159ca:	371c      	adds	r7, #28
 80159cc:	46bd      	mov	sp, r7
 80159ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d2:	4770      	bx	lr

080159d4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80159d4:	b480      	push	{r7}
 80159d6:	b085      	sub	sp, #20
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	881a      	ldrh	r2, [r3, #0]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	b29b      	uxth	r3, r3
 80159e8:	4413      	add	r3, r2
 80159ea:	b29a      	uxth	r2, r3
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	4413      	add	r3, r2
 80159fa:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80159fc:	68fb      	ldr	r3, [r7, #12]
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	3714      	adds	r7, #20
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr

08015a0a <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8015a0a:	b580      	push	{r7, lr}
 8015a0c:	b086      	sub	sp, #24
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	60f8      	str	r0, [r7, #12]
 8015a12:	60b9      	str	r1, [r7, #8]
 8015a14:	4613      	mov	r3, r2
 8015a16:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8015a18:	2301      	movs	r3, #1
 8015a1a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	789b      	ldrb	r3, [r3, #2]
 8015a20:	2b01      	cmp	r3, #1
 8015a22:	d002      	beq.n	8015a2a <USBH_CtlReq+0x20>
 8015a24:	2b02      	cmp	r3, #2
 8015a26:	d01d      	beq.n	8015a64 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8015a28:	e042      	b.n	8015ab0 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	68ba      	ldr	r2, [r7, #8]
 8015a2e:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	88fa      	ldrh	r2, [r7, #6]
 8015a34:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2201      	movs	r2, #1
 8015a3a:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	2202      	movs	r2, #2
 8015a40:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8015a42:	2301      	movs	r3, #1
 8015a44:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2203      	movs	r2, #3
 8015a4a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	4619      	mov	r1, r3
 8015a5e:	f000 fd73 	bl	8016548 <osMessagePut>
    break;
 8015a62:	e025      	b.n	8015ab0 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 8015a64:	68f8      	ldr	r0, [r7, #12]
 8015a66:	f000 f829 	bl	8015abc <USBH_HandleControl>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8015a6e:	7dfb      	ldrb	r3, [r7, #23]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d108      	bne.n	8015a86 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	2201      	movs	r2, #1
 8015a78:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8015a80:	2300      	movs	r3, #0
 8015a82:	75fb      	strb	r3, [r7, #23]
    break;
 8015a84:	e013      	b.n	8015aae <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 8015a86:	7dfb      	ldrb	r3, [r7, #23]
 8015a88:	2b03      	cmp	r3, #3
 8015a8a:	d108      	bne.n	8015a9e <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	2201      	movs	r2, #1
 8015a90:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2200      	movs	r2, #0
 8015a96:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8015a98:	2303      	movs	r3, #3
 8015a9a:	75fb      	strb	r3, [r7, #23]
    break;
 8015a9c:	e007      	b.n	8015aae <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 8015a9e:	7dfb      	ldrb	r3, [r7, #23]
 8015aa0:	2b02      	cmp	r3, #2
 8015aa2:	d104      	bne.n	8015aae <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	2201      	movs	r2, #1
 8015aa8:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8015aaa:	2302      	movs	r3, #2
 8015aac:	75fb      	strb	r3, [r7, #23]
    break;
 8015aae:	bf00      	nop
  }
  return status;
 8015ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3718      	adds	r7, #24
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}
	...

08015abc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b086      	sub	sp, #24
 8015ac0:	af02      	add	r7, sp, #8
 8015ac2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	7e1b      	ldrb	r3, [r3, #24]
 8015ad0:	3b01      	subs	r3, #1
 8015ad2:	2b0a      	cmp	r3, #10
 8015ad4:	f200 821f 	bhi.w	8015f16 <USBH_HandleControl+0x45a>
 8015ad8:	a201      	add	r2, pc, #4	; (adr r2, 8015ae0 <USBH_HandleControl+0x24>)
 8015ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ade:	bf00      	nop
 8015ae0:	08015b0d 	.word	0x08015b0d
 8015ae4:	08015b27 	.word	0x08015b27
 8015ae8:	08015bc9 	.word	0x08015bc9
 8015aec:	08015bef 	.word	0x08015bef
 8015af0:	08015c7b 	.word	0x08015c7b
 8015af4:	08015ca7 	.word	0x08015ca7
 8015af8:	08015d69 	.word	0x08015d69
 8015afc:	08015d8b 	.word	0x08015d8b
 8015b00:	08015e1d 	.word	0x08015e1d
 8015b04:	08015e45 	.word	0x08015e45
 8015b08:	08015ed7 	.word	0x08015ed7
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f103 0110 	add.w	r1, r3, #16
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	795b      	ldrb	r3, [r3, #5]
 8015b16:	461a      	mov	r2, r3
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f000 fa0d 	bl	8015f38 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2202      	movs	r2, #2
 8015b22:	761a      	strb	r2, [r3, #24]
    break;
 8015b24:	e202      	b.n	8015f2c <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	795b      	ldrb	r3, [r3, #5]
 8015b2a:	4619      	mov	r1, r3
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f004 f8ce 	bl	8019cce <USBH_LL_GetURBState>
 8015b32:	4603      	mov	r3, r0
 8015b34:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8015b36:	7bbb      	ldrb	r3, [r7, #14]
 8015b38:	2b01      	cmp	r3, #1
 8015b3a:	d12c      	bne.n	8015b96 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	7c1b      	ldrb	r3, [r3, #16]
 8015b40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015b44:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	8adb      	ldrh	r3, [r3, #22]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d00a      	beq.n	8015b64 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8015b4e:	7b7b      	ldrb	r3, [r7, #13]
 8015b50:	2b80      	cmp	r3, #128	; 0x80
 8015b52:	d103      	bne.n	8015b5c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	2203      	movs	r2, #3
 8015b58:	761a      	strb	r2, [r3, #24]
 8015b5a:	e00d      	b.n	8015b78 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	2205      	movs	r2, #5
 8015b60:	761a      	strb	r2, [r3, #24]
 8015b62:	e009      	b.n	8015b78 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8015b64:	7b7b      	ldrb	r3, [r7, #13]
 8015b66:	2b80      	cmp	r3, #128	; 0x80
 8015b68:	d103      	bne.n	8015b72 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2209      	movs	r2, #9
 8015b6e:	761a      	strb	r2, [r3, #24]
 8015b70:	e002      	b.n	8015b78 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2207      	movs	r2, #7
 8015b76:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2203      	movs	r2, #3
 8015b7c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	4619      	mov	r1, r3
 8015b90:	f000 fcda 	bl	8016548 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8015b94:	e1c1      	b.n	8015f1a <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8015b96:	7bbb      	ldrb	r3, [r7, #14]
 8015b98:	2b04      	cmp	r3, #4
 8015b9a:	d003      	beq.n	8015ba4 <USBH_HandleControl+0xe8>
 8015b9c:	7bbb      	ldrb	r3, [r7, #14]
 8015b9e:	2b02      	cmp	r3, #2
 8015ba0:	f040 81bb 	bne.w	8015f1a <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	220b      	movs	r2, #11
 8015ba8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2203      	movs	r2, #3
 8015bae:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	4619      	mov	r1, r3
 8015bc2:	f000 fcc1 	bl	8016548 <osMessagePut>
    break;
 8015bc6:	e1a8      	b.n	8015f1a <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8015bce:	b29a      	uxth	r2, r3
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	6899      	ldr	r1, [r3, #8]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	899a      	ldrh	r2, [r3, #12]
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	791b      	ldrb	r3, [r3, #4]
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f000 f9e8 	bl	8015fb6 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	2204      	movs	r2, #4
 8015bea:	761a      	strb	r2, [r3, #24]
    break;
 8015bec:	e19e      	b.n	8015f2c <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	791b      	ldrb	r3, [r3, #4]
 8015bf2:	4619      	mov	r1, r3
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f004 f86a 	bl	8019cce <USBH_LL_GetURBState>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8015bfe:	7bbb      	ldrb	r3, [r7, #14]
 8015c00:	2b01      	cmp	r3, #1
 8015c02:	d110      	bne.n	8015c26 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2209      	movs	r2, #9
 8015c08:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	2203      	movs	r2, #3
 8015c0e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015c1e:	2200      	movs	r2, #0
 8015c20:	4619      	mov	r1, r3
 8015c22:	f000 fc91 	bl	8016548 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8015c26:	7bbb      	ldrb	r3, [r7, #14]
 8015c28:	2b05      	cmp	r3, #5
 8015c2a:	d110      	bne.n	8015c4e <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8015c2c:	2303      	movs	r3, #3
 8015c2e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2203      	movs	r2, #3
 8015c34:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015c44:	2200      	movs	r2, #0
 8015c46:	4619      	mov	r1, r3
 8015c48:	f000 fc7e 	bl	8016548 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8015c4c:	e167      	b.n	8015f1e <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8015c4e:	7bbb      	ldrb	r3, [r7, #14]
 8015c50:	2b04      	cmp	r3, #4
 8015c52:	f040 8164 	bne.w	8015f1e <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	220b      	movs	r2, #11
 8015c5a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2203      	movs	r2, #3
 8015c60:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015c70:	2200      	movs	r2, #0
 8015c72:	4619      	mov	r1, r3
 8015c74:	f000 fc68 	bl	8016548 <osMessagePut>
    break;
 8015c78:	e151      	b.n	8015f1e <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6899      	ldr	r1, [r3, #8]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	899a      	ldrh	r2, [r3, #12]
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	7958      	ldrb	r0, [r3, #5]
 8015c86:	2301      	movs	r3, #1
 8015c88:	9300      	str	r3, [sp, #0]
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f000 f96d 	bl	8015f6c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8015c98:	b29a      	uxth	r2, r3
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2206      	movs	r2, #6
 8015ca2:	761a      	strb	r2, [r3, #24]
    break;
 8015ca4:	e142      	b.n	8015f2c <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	795b      	ldrb	r3, [r3, #5]
 8015caa:	4619      	mov	r1, r3
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f004 f80e 	bl	8019cce <USBH_LL_GetURBState>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8015cb6:	7bbb      	ldrb	r3, [r7, #14]
 8015cb8:	2b01      	cmp	r3, #1
 8015cba:	d111      	bne.n	8015ce0 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2207      	movs	r2, #7
 8015cc0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2203      	movs	r2, #3
 8015cc6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	4619      	mov	r1, r3
 8015cda:	f000 fc35 	bl	8016548 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8015cde:	e120      	b.n	8015f22 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8015ce0:	7bbb      	ldrb	r3, [r7, #14]
 8015ce2:	2b05      	cmp	r3, #5
 8015ce4:	d113      	bne.n	8015d0e <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	220c      	movs	r2, #12
 8015cea:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8015cec:	2303      	movs	r3, #3
 8015cee:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2203      	movs	r2, #3
 8015cf4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015d04:	2200      	movs	r2, #0
 8015d06:	4619      	mov	r1, r3
 8015d08:	f000 fc1e 	bl	8016548 <osMessagePut>
    break;
 8015d0c:	e109      	b.n	8015f22 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8015d0e:	7bbb      	ldrb	r3, [r7, #14]
 8015d10:	2b02      	cmp	r3, #2
 8015d12:	d111      	bne.n	8015d38 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	2205      	movs	r2, #5
 8015d18:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2203      	movs	r2, #3
 8015d1e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015d2e:	2200      	movs	r2, #0
 8015d30:	4619      	mov	r1, r3
 8015d32:	f000 fc09 	bl	8016548 <osMessagePut>
    break;
 8015d36:	e0f4      	b.n	8015f22 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8015d38:	7bbb      	ldrb	r3, [r7, #14]
 8015d3a:	2b04      	cmp	r3, #4
 8015d3c:	f040 80f1 	bne.w	8015f22 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	220b      	movs	r2, #11
 8015d44:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8015d46:	2302      	movs	r3, #2
 8015d48:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2203      	movs	r2, #3
 8015d4e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015d5e:	2200      	movs	r2, #0
 8015d60:	4619      	mov	r1, r3
 8015d62:	f000 fbf1 	bl	8016548 <osMessagePut>
    break;
 8015d66:	e0dc      	b.n	8015f22 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	791b      	ldrb	r3, [r3, #4]
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	2100      	movs	r1, #0
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f000 f920 	bl	8015fb6 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8015d7c:	b29a      	uxth	r2, r3
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	2208      	movs	r2, #8
 8015d86:	761a      	strb	r2, [r3, #24]

    break;
 8015d88:	e0d0      	b.n	8015f2c <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	791b      	ldrb	r3, [r3, #4]
 8015d8e:	4619      	mov	r1, r3
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f003 ff9c 	bl	8019cce <USBH_LL_GetURBState>
 8015d96:	4603      	mov	r3, r0
 8015d98:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8015d9a:	7bbb      	ldrb	r3, [r7, #14]
 8015d9c:	2b01      	cmp	r3, #1
 8015d9e:	d113      	bne.n	8015dc8 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	220d      	movs	r2, #13
 8015da4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8015da6:	2300      	movs	r3, #0
 8015da8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	2203      	movs	r2, #3
 8015dae:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	f000 fbc1 	bl	8016548 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8015dc6:	e0ae      	b.n	8015f26 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8015dc8:	7bbb      	ldrb	r3, [r7, #14]
 8015dca:	2b04      	cmp	r3, #4
 8015dcc:	d111      	bne.n	8015df2 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	220b      	movs	r2, #11
 8015dd2:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2203      	movs	r2, #3
 8015dd8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015de8:	2200      	movs	r2, #0
 8015dea:	4619      	mov	r1, r3
 8015dec:	f000 fbac 	bl	8016548 <osMessagePut>
    break;
 8015df0:	e099      	b.n	8015f26 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8015df2:	7bbb      	ldrb	r3, [r7, #14]
 8015df4:	2b05      	cmp	r3, #5
 8015df6:	f040 8096 	bne.w	8015f26 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8015dfa:	2303      	movs	r3, #3
 8015dfc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2203      	movs	r2, #3
 8015e02:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015e12:	2200      	movs	r2, #0
 8015e14:	4619      	mov	r1, r3
 8015e16:	f000 fb97 	bl	8016548 <osMessagePut>
    break;
 8015e1a:	e084      	b.n	8015f26 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	795a      	ldrb	r2, [r3, #5]
 8015e20:	2301      	movs	r3, #1
 8015e22:	9300      	str	r3, [sp, #0]
 8015e24:	4613      	mov	r3, r2
 8015e26:	2200      	movs	r2, #0
 8015e28:	2100      	movs	r1, #0
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f000 f89e 	bl	8015f6c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8015e36:	b29a      	uxth	r2, r3
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	220a      	movs	r2, #10
 8015e40:	761a      	strb	r2, [r3, #24]
    break;
 8015e42:	e073      	b.n	8015f2c <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	795b      	ldrb	r3, [r3, #5]
 8015e48:	4619      	mov	r1, r3
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f003 ff3f 	bl	8019cce <USBH_LL_GetURBState>
 8015e50:	4603      	mov	r3, r0
 8015e52:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8015e54:	7bbb      	ldrb	r3, [r7, #14]
 8015e56:	2b01      	cmp	r3, #1
 8015e58:	d113      	bne.n	8015e82 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	220d      	movs	r2, #13
 8015e62:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2203      	movs	r2, #3
 8015e68:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015e78:	2200      	movs	r2, #0
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	f000 fb64 	bl	8016548 <osMessagePut>
#endif
#endif
      }

    }
    break;
 8015e80:	e053      	b.n	8015f2a <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8015e82:	7bbb      	ldrb	r3, [r7, #14]
 8015e84:	2b02      	cmp	r3, #2
 8015e86:	d111      	bne.n	8015eac <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2209      	movs	r2, #9
 8015e8c:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2203      	movs	r2, #3
 8015e92:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	f000 fb4f 	bl	8016548 <osMessagePut>
    break;
 8015eaa:	e03e      	b.n	8015f2a <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8015eac:	7bbb      	ldrb	r3, [r7, #14]
 8015eae:	2b04      	cmp	r3, #4
 8015eb0:	d13b      	bne.n	8015f2a <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	220b      	movs	r2, #11
 8015eb6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2203      	movs	r2, #3
 8015ebc:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015ecc:	2200      	movs	r2, #0
 8015ece:	4619      	mov	r1, r3
 8015ed0:	f000 fb3a 	bl	8016548 <osMessagePut>
    break;
 8015ed4:	e029      	b.n	8015f2a <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	7e5b      	ldrb	r3, [r3, #25]
 8015eda:	3301      	adds	r3, #1
 8015edc:	b2da      	uxtb	r2, r3
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	765a      	strb	r2, [r3, #25]
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	7e5b      	ldrb	r3, [r3, #25]
 8015ee6:	2b02      	cmp	r3, #2
 8015ee8:	d809      	bhi.n	8015efe <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f003 fe15 	bl	8019b1a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2201      	movs	r2, #1
 8015ef4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	2201      	movs	r2, #1
 8015efa:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8015efc:	e016      	b.n	8015f2c <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015f04:	2106      	movs	r1, #6
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8015f10:	2302      	movs	r3, #2
 8015f12:	73fb      	strb	r3, [r7, #15]
    break;
 8015f14:	e00a      	b.n	8015f2c <USBH_HandleControl+0x470>

  default:
    break;
 8015f16:	bf00      	nop
 8015f18:	e008      	b.n	8015f2c <USBH_HandleControl+0x470>
    break;
 8015f1a:	bf00      	nop
 8015f1c:	e006      	b.n	8015f2c <USBH_HandleControl+0x470>
    break;
 8015f1e:	bf00      	nop
 8015f20:	e004      	b.n	8015f2c <USBH_HandleControl+0x470>
    break;
 8015f22:	bf00      	nop
 8015f24:	e002      	b.n	8015f2c <USBH_HandleControl+0x470>
    break;
 8015f26:	bf00      	nop
 8015f28:	e000      	b.n	8015f2c <USBH_HandleControl+0x470>
    break;
 8015f2a:	bf00      	nop
  }
  return status;
 8015f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3710      	adds	r7, #16
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}
 8015f36:	bf00      	nop

08015f38 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b088      	sub	sp, #32
 8015f3c:	af04      	add	r7, sp, #16
 8015f3e:	60f8      	str	r0, [r7, #12]
 8015f40:	60b9      	str	r1, [r7, #8]
 8015f42:	4613      	mov	r3, r2
 8015f44:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8015f46:	79f9      	ldrb	r1, [r7, #7]
 8015f48:	2300      	movs	r3, #0
 8015f4a:	9303      	str	r3, [sp, #12]
 8015f4c:	2308      	movs	r3, #8
 8015f4e:	9302      	str	r3, [sp, #8]
 8015f50:	68bb      	ldr	r3, [r7, #8]
 8015f52:	9301      	str	r3, [sp, #4]
 8015f54:	2300      	movs	r3, #0
 8015f56:	9300      	str	r3, [sp, #0]
 8015f58:	2300      	movs	r3, #0
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	68f8      	ldr	r0, [r7, #12]
 8015f5e:	f003 fe85 	bl	8019c6c <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8015f62:	2300      	movs	r3, #0
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	3710      	adds	r7, #16
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}

08015f6c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b088      	sub	sp, #32
 8015f70:	af04      	add	r7, sp, #16
 8015f72:	60f8      	str	r0, [r7, #12]
 8015f74:	60b9      	str	r1, [r7, #8]
 8015f76:	4611      	mov	r1, r2
 8015f78:	461a      	mov	r2, r3
 8015f7a:	460b      	mov	r3, r1
 8015f7c:	80fb      	strh	r3, [r7, #6]
 8015f7e:	4613      	mov	r3, r2
 8015f80:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d001      	beq.n	8015f90 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8015f90:	7979      	ldrb	r1, [r7, #5]
 8015f92:	7e3b      	ldrb	r3, [r7, #24]
 8015f94:	9303      	str	r3, [sp, #12]
 8015f96:	88fb      	ldrh	r3, [r7, #6]
 8015f98:	9302      	str	r3, [sp, #8]
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	9301      	str	r3, [sp, #4]
 8015f9e:	2301      	movs	r3, #1
 8015fa0:	9300      	str	r3, [sp, #0]
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	68f8      	ldr	r0, [r7, #12]
 8015fa8:	f003 fe60 	bl	8019c6c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8015fac:	2300      	movs	r3, #0
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3710      	adds	r7, #16
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}

08015fb6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8015fb6:	b580      	push	{r7, lr}
 8015fb8:	b088      	sub	sp, #32
 8015fba:	af04      	add	r7, sp, #16
 8015fbc:	60f8      	str	r0, [r7, #12]
 8015fbe:	60b9      	str	r1, [r7, #8]
 8015fc0:	4611      	mov	r1, r2
 8015fc2:	461a      	mov	r2, r3
 8015fc4:	460b      	mov	r3, r1
 8015fc6:	80fb      	strh	r3, [r7, #6]
 8015fc8:	4613      	mov	r3, r2
 8015fca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8015fcc:	7979      	ldrb	r1, [r7, #5]
 8015fce:	2300      	movs	r3, #0
 8015fd0:	9303      	str	r3, [sp, #12]
 8015fd2:	88fb      	ldrh	r3, [r7, #6]
 8015fd4:	9302      	str	r3, [sp, #8]
 8015fd6:	68bb      	ldr	r3, [r7, #8]
 8015fd8:	9301      	str	r3, [sp, #4]
 8015fda:	2301      	movs	r3, #1
 8015fdc:	9300      	str	r3, [sp, #0]
 8015fde:	2300      	movs	r3, #0
 8015fe0:	2201      	movs	r2, #1
 8015fe2:	68f8      	ldr	r0, [r7, #12]
 8015fe4:	f003 fe42 	bl	8019c6c <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8015fe8:	2300      	movs	r3, #0

}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3710      	adds	r7, #16
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}

08015ff2 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t length,
                                uint8_t pipe_num)
{
 8015ff2:	b580      	push	{r7, lr}
 8015ff4:	b088      	sub	sp, #32
 8015ff6:	af04      	add	r7, sp, #16
 8015ff8:	60f8      	str	r0, [r7, #12]
 8015ffa:	60b9      	str	r1, [r7, #8]
 8015ffc:	4611      	mov	r1, r2
 8015ffe:	461a      	mov	r2, r3
 8016000:	460b      	mov	r3, r1
 8016002:	71fb      	strb	r3, [r7, #7]
 8016004:	4613      	mov	r3, r2
 8016006:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8016008:	79fb      	ldrb	r3, [r7, #7]
 801600a:	b29b      	uxth	r3, r3
 801600c:	79b9      	ldrb	r1, [r7, #6]
 801600e:	2200      	movs	r2, #0
 8016010:	9203      	str	r2, [sp, #12]
 8016012:	9302      	str	r3, [sp, #8]
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	9301      	str	r3, [sp, #4]
 8016018:	2301      	movs	r3, #1
 801601a:	9300      	str	r3, [sp, #0]
 801601c:	2303      	movs	r3, #3
 801601e:	2201      	movs	r2, #1
 8016020:	68f8      	ldr	r0, [r7, #12]
 8016022:	f003 fe23 	bl	8019c6c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8016026:	2300      	movs	r3, #0
}
 8016028:	4618      	mov	r0, r3
 801602a:	3710      	adds	r7, #16
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}

08016030 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint32_t length,
                                uint8_t pipe_num)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b088      	sub	sp, #32
 8016034:	af04      	add	r7, sp, #16
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	607a      	str	r2, [r7, #4]
 801603c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	b29b      	uxth	r3, r3
 8016042:	78f9      	ldrb	r1, [r7, #3]
 8016044:	2200      	movs	r2, #0
 8016046:	9203      	str	r2, [sp, #12]
 8016048:	9302      	str	r3, [sp, #8]
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	9301      	str	r3, [sp, #4]
 801604e:	2301      	movs	r3, #1
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	2301      	movs	r3, #1
 8016054:	2200      	movs	r2, #0
 8016056:	68f8      	ldr	r0, [r7, #12]
 8016058:	f003 fe08 	bl	8019c6c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 801605c:	2300      	movs	r3, #0
}
 801605e:	4618      	mov	r0, r3
 8016060:	3710      	adds	r7, #16
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}

08016066 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8016066:	b580      	push	{r7, lr}
 8016068:	b086      	sub	sp, #24
 801606a:	af04      	add	r7, sp, #16
 801606c:	6078      	str	r0, [r7, #4]
 801606e:	4608      	mov	r0, r1
 8016070:	4611      	mov	r1, r2
 8016072:	461a      	mov	r2, r3
 8016074:	4603      	mov	r3, r0
 8016076:	70fb      	strb	r3, [r7, #3]
 8016078:	460b      	mov	r3, r1
 801607a:	70bb      	strb	r3, [r7, #2]
 801607c:	4613      	mov	r3, r2
 801607e:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8016080:	7878      	ldrb	r0, [r7, #1]
 8016082:	78ba      	ldrb	r2, [r7, #2]
 8016084:	78f9      	ldrb	r1, [r7, #3]
 8016086:	8b3b      	ldrh	r3, [r7, #24]
 8016088:	9302      	str	r3, [sp, #8]
 801608a:	7d3b      	ldrb	r3, [r7, #20]
 801608c:	9301      	str	r3, [sp, #4]
 801608e:	7c3b      	ldrb	r3, [r7, #16]
 8016090:	9300      	str	r3, [sp, #0]
 8016092:	4603      	mov	r3, r0
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f003 fd9b 	bl	8019bd0 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 801609a:	2300      	movs	r3, #0

}
 801609c:	4618      	mov	r0, r3
 801609e:	3708      	adds	r7, #8
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	460b      	mov	r3, r1
 80160ae:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80160b0:	78fb      	ldrb	r3, [r7, #3]
 80160b2:	4619      	mov	r1, r3
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f003 fdba 	bl	8019c2e <USBH_LL_ClosePipe>

  return USBH_OK;
 80160ba:	2300      	movs	r3, #0

}
 80160bc:	4618      	mov	r0, r3
 80160be:	3708      	adds	r7, #8
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b084      	sub	sp, #16
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	460b      	mov	r3, r1
 80160ce:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 f834 	bl	801613e <USBH_GetFreePipe>
 80160d6:	4603      	mov	r3, r0
 80160d8:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80160da:	89fb      	ldrh	r3, [r7, #14]
 80160dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80160e0:	4293      	cmp	r3, r2
 80160e2:	d008      	beq.n	80160f6 <USBH_AllocPipe+0x32>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80160e4:	78fb      	ldrb	r3, [r7, #3]
 80160e6:	89fa      	ldrh	r2, [r7, #14]
 80160e8:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f502 728a 	add.w	r2, r2, #276	; 0x114
 80160f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80160f6:	89fb      	ldrh	r3, [r7, #14]
 80160f8:	b2db      	uxtb	r3, r3
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3710      	adds	r7, #16
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}

08016102 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8016102:	b480      	push	{r7}
 8016104:	b083      	sub	sp, #12
 8016106:	af00      	add	r7, sp, #0
 8016108:	6078      	str	r0, [r7, #4]
 801610a:	460b      	mov	r3, r1
 801610c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 801610e:	78fb      	ldrb	r3, [r7, #3]
 8016110:	2b0a      	cmp	r3, #10
 8016112:	d80d      	bhi.n	8016130 <USBH_FreePipe+0x2e>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8016114:	78fa      	ldrb	r2, [r7, #3]
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f502 728a 	add.w	r2, r2, #276	; 0x114
 801611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016120:	78fa      	ldrb	r2, [r7, #3]
 8016122:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	f502 728a 	add.w	r2, r2, #276	; 0x114
 801612c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8016130:	2300      	movs	r3, #0
}
 8016132:	4618      	mov	r0, r3
 8016134:	370c      	adds	r7, #12
 8016136:	46bd      	mov	sp, r7
 8016138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613c:	4770      	bx	lr

0801613e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 801613e:	b480      	push	{r7}
 8016140:	b085      	sub	sp, #20
 8016142:	af00      	add	r7, sp, #0
 8016144:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8016146:	2300      	movs	r3, #0
 8016148:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801614a:	2300      	movs	r3, #0
 801614c:	73fb      	strb	r3, [r7, #15]
 801614e:	e00f      	b.n	8016170 <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8016150:	7bfa      	ldrb	r2, [r7, #15]
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8016158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801615c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016160:	2b00      	cmp	r3, #0
 8016162:	d102      	bne.n	801616a <USBH_GetFreePipe+0x2c>
	{
	   return (uint16_t)idx;
 8016164:	7bfb      	ldrb	r3, [r7, #15]
 8016166:	b29b      	uxth	r3, r3
 8016168:	e007      	b.n	801617a <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801616a:	7bfb      	ldrb	r3, [r7, #15]
 801616c:	3301      	adds	r3, #1
 801616e:	73fb      	strb	r3, [r7, #15]
 8016170:	7bfb      	ldrb	r3, [r7, #15]
 8016172:	2b0a      	cmp	r3, #10
 8016174:	d9ec      	bls.n	8016150 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8016176:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801617a:	4618      	mov	r0, r3
 801617c:	3714      	adds	r7, #20
 801617e:	46bd      	mov	sp, r7
 8016180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016184:	4770      	bx	lr

08016186 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8016186:	b480      	push	{r7}
 8016188:	b085      	sub	sp, #20
 801618a:	af00      	add	r7, sp, #0
 801618c:	4603      	mov	r3, r0
 801618e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016190:	2300      	movs	r3, #0
 8016192:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8016194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016198:	2b84      	cmp	r3, #132	; 0x84
 801619a:	d005      	beq.n	80161a8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801619c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	4413      	add	r3, r2
 80161a4:	3303      	adds	r3, #3
 80161a6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80161a8:	68fb      	ldr	r3, [r7, #12]
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3714      	adds	r7, #20
 80161ae:	46bd      	mov	sp, r7
 80161b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b4:	4770      	bx	lr

080161b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80161b6:	b480      	push	{r7}
 80161b8:	b083      	sub	sp, #12
 80161ba:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161bc:	f3ef 8305 	mrs	r3, IPSR
 80161c0:	607b      	str	r3, [r7, #4]
  return(result);
 80161c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	bf14      	ite	ne
 80161c8:	2301      	movne	r3, #1
 80161ca:	2300      	moveq	r3, #0
 80161cc:	b2db      	uxtb	r3, r3
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	370c      	adds	r7, #12
 80161d2:	46bd      	mov	sp, r7
 80161d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d8:	4770      	bx	lr

080161da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80161da:	b580      	push	{r7, lr}
 80161dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80161de:	f001 fb67 	bl	80178b0 <vTaskStartScheduler>
  
  return osOK;
 80161e2:	2300      	movs	r3, #0
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80161ec:	f001 ff4a 	bl	8018084 <xTaskGetSchedulerState>
 80161f0:	4603      	mov	r3, r0
 80161f2:	2b01      	cmp	r3, #1
 80161f4:	d101      	bne.n	80161fa <osKernelRunning+0x12>
    return 0;
 80161f6:	2300      	movs	r3, #0
 80161f8:	e000      	b.n	80161fc <osKernelRunning+0x14>
  else
    return 1;
 80161fa:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	bd80      	pop	{r7, pc}

08016200 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8016204:	f7ff ffd7 	bl	80161b6 <inHandlerMode>
 8016208:	4603      	mov	r3, r0
 801620a:	2b00      	cmp	r3, #0
 801620c:	d003      	beq.n	8016216 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801620e:	f001 fc4f 	bl	8017ab0 <xTaskGetTickCountFromISR>
 8016212:	4603      	mov	r3, r0
 8016214:	e002      	b.n	801621c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8016216:	f001 fc3b 	bl	8017a90 <xTaskGetTickCount>
 801621a:	4603      	mov	r3, r0
  }
}
 801621c:	4618      	mov	r0, r3
 801621e:	bd80      	pop	{r7, pc}

08016220 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016222:	b087      	sub	sp, #28
 8016224:	af02      	add	r7, sp, #8
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	685c      	ldr	r4, [r3, #4]
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016236:	b29e      	uxth	r6, r3
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801623e:	4618      	mov	r0, r3
 8016240:	f7ff ffa1 	bl	8016186 <makeFreeRtosPriority>
 8016244:	4602      	mov	r2, r0
 8016246:	f107 030c 	add.w	r3, r7, #12
 801624a:	9301      	str	r3, [sp, #4]
 801624c:	9200      	str	r2, [sp, #0]
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	4632      	mov	r2, r6
 8016252:	4629      	mov	r1, r5
 8016254:	4620      	mov	r0, r4
 8016256:	f001 f9cd 	bl	80175f4 <xTaskCreate>
 801625a:	4603      	mov	r3, r0
 801625c:	2b01      	cmp	r3, #1
 801625e:	d001      	beq.n	8016264 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8016260:	2300      	movs	r3, #0
 8016262:	e000      	b.n	8016266 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8016264:	68fb      	ldr	r3, [r7, #12]
}
 8016266:	4618      	mov	r0, r3
 8016268:	3714      	adds	r7, #20
 801626a:	46bd      	mov	sp, r7
 801626c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801626e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801626e:	b580      	push	{r7, lr}
 8016270:	b084      	sub	sp, #16
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d001      	beq.n	8016284 <osDelay+0x16>
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	e000      	b.n	8016286 <osDelay+0x18>
 8016284:	2301      	movs	r3, #1
 8016286:	4618      	mov	r0, r3
 8016288:	f001 fade 	bl	8017848 <vTaskDelay>
  
  return osOK;
 801628c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801628e:	4618      	mov	r0, r3
 8016290:	3710      	adds	r7, #16
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}

08016296 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8016296:	b580      	push	{r7, lr}
 8016298:	b082      	sub	sp, #8
 801629a:	af00      	add	r7, sp, #0
 801629c:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 801629e:	2001      	movs	r0, #1
 80162a0:	f000 fba8 	bl	80169f4 <xQueueCreateMutex>
 80162a4:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3708      	adds	r7, #8
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
	...

080162b0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80162ba:	2300      	movs	r3, #0
 80162bc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d101      	bne.n	80162c8 <osMutexWait+0x18>
    return osErrorParameter;
 80162c4:	2380      	movs	r3, #128	; 0x80
 80162c6:	e03a      	b.n	801633e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80162c8:	2300      	movs	r3, #0
 80162ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80162d2:	d103      	bne.n	80162dc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80162d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162d8:	60fb      	str	r3, [r7, #12]
 80162da:	e009      	b.n	80162f0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80162dc:	683b      	ldr	r3, [r7, #0]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d006      	beq.n	80162f0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d101      	bne.n	80162f0 <osMutexWait+0x40>
      ticks = 1;
 80162ec:	2301      	movs	r3, #1
 80162ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80162f0:	f7ff ff61 	bl	80161b6 <inHandlerMode>
 80162f4:	4603      	mov	r3, r0
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d017      	beq.n	801632a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80162fa:	f107 0308 	add.w	r3, r7, #8
 80162fe:	461a      	mov	r2, r3
 8016300:	2100      	movs	r1, #0
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f000 ff8a 	bl	801721c <xQueueReceiveFromISR>
 8016308:	4603      	mov	r3, r0
 801630a:	2b01      	cmp	r3, #1
 801630c:	d001      	beq.n	8016312 <osMutexWait+0x62>
      return osErrorOS;
 801630e:	23ff      	movs	r3, #255	; 0xff
 8016310:	e015      	b.n	801633e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d011      	beq.n	801633c <osMutexWait+0x8c>
 8016318:	4b0b      	ldr	r3, [pc, #44]	; (8016348 <osMutexWait+0x98>)
 801631a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801631e:	601a      	str	r2, [r3, #0]
 8016320:	f3bf 8f4f 	dsb	sy
 8016324:	f3bf 8f6f 	isb	sy
 8016328:	e008      	b.n	801633c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801632a:	68f9      	ldr	r1, [r7, #12]
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f000 fe6d 	bl	801700c <xQueueSemaphoreTake>
 8016332:	4603      	mov	r3, r0
 8016334:	2b01      	cmp	r3, #1
 8016336:	d001      	beq.n	801633c <osMutexWait+0x8c>
    return osErrorOS;
 8016338:	23ff      	movs	r3, #255	; 0xff
 801633a:	e000      	b.n	801633e <osMutexWait+0x8e>
  }
  
  return osOK;
 801633c:	2300      	movs	r3, #0
}
 801633e:	4618      	mov	r0, r3
 8016340:	3710      	adds	r7, #16
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	e000ed04 	.word	0xe000ed04

0801634c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8016354:	2300      	movs	r3, #0
 8016356:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8016358:	2300      	movs	r3, #0
 801635a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 801635c:	f7ff ff2b 	bl	80161b6 <inHandlerMode>
 8016360:	4603      	mov	r3, r0
 8016362:	2b00      	cmp	r3, #0
 8016364:	d016      	beq.n	8016394 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8016366:	f107 0308 	add.w	r3, r7, #8
 801636a:	4619      	mov	r1, r3
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f000 fce7 	bl	8016d40 <xQueueGiveFromISR>
 8016372:	4603      	mov	r3, r0
 8016374:	2b01      	cmp	r3, #1
 8016376:	d001      	beq.n	801637c <osMutexRelease+0x30>
      return osErrorOS;
 8016378:	23ff      	movs	r3, #255	; 0xff
 801637a:	e017      	b.n	80163ac <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d013      	beq.n	80163aa <osMutexRelease+0x5e>
 8016382:	4b0c      	ldr	r3, [pc, #48]	; (80163b4 <osMutexRelease+0x68>)
 8016384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016388:	601a      	str	r2, [r3, #0]
 801638a:	f3bf 8f4f 	dsb	sy
 801638e:	f3bf 8f6f 	isb	sy
 8016392:	e00a      	b.n	80163aa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8016394:	2300      	movs	r3, #0
 8016396:	2200      	movs	r2, #0
 8016398:	2100      	movs	r1, #0
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f000 fb42 	bl	8016a24 <xQueueGenericSend>
 80163a0:	4603      	mov	r3, r0
 80163a2:	2b01      	cmp	r3, #1
 80163a4:	d001      	beq.n	80163aa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80163a6:	23ff      	movs	r3, #255	; 0xff
 80163a8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80163aa:	68fb      	ldr	r3, [r7, #12]
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3710      	adds	r7, #16
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	e000ed04 	.word	0xe000ed04

080163b8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d110      	bne.n	80163ea <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80163c8:	2203      	movs	r2, #3
 80163ca:	2100      	movs	r1, #0
 80163cc:	2001      	movs	r0, #1
 80163ce:	f000 fa9f 	bl	8016910 <xQueueGenericCreate>
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d005      	beq.n	80163e6 <osSemaphoreCreate+0x2e>
 80163da:	2300      	movs	r3, #0
 80163dc:	2200      	movs	r2, #0
 80163de:	2100      	movs	r1, #0
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f000 fb1f 	bl	8016a24 <xQueueGenericSend>
    return sema;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	e000      	b.n	80163ec <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80163ea:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	3710      	adds	r7, #16
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}

080163f4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b084      	sub	sp, #16
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
 80163fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80163fe:	2300      	movs	r3, #0
 8016400:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d101      	bne.n	801640c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8016408:	2380      	movs	r3, #128	; 0x80
 801640a:	e03a      	b.n	8016482 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801640c:	2300      	movs	r3, #0
 801640e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016416:	d103      	bne.n	8016420 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8016418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801641c:	60fb      	str	r3, [r7, #12]
 801641e:	e009      	b.n	8016434 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d006      	beq.n	8016434 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d101      	bne.n	8016434 <osSemaphoreWait+0x40>
      ticks = 1;
 8016430:	2301      	movs	r3, #1
 8016432:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8016434:	f7ff febf 	bl	80161b6 <inHandlerMode>
 8016438:	4603      	mov	r3, r0
 801643a:	2b00      	cmp	r3, #0
 801643c:	d017      	beq.n	801646e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801643e:	f107 0308 	add.w	r3, r7, #8
 8016442:	461a      	mov	r2, r3
 8016444:	2100      	movs	r1, #0
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f000 fee8 	bl	801721c <xQueueReceiveFromISR>
 801644c:	4603      	mov	r3, r0
 801644e:	2b01      	cmp	r3, #1
 8016450:	d001      	beq.n	8016456 <osSemaphoreWait+0x62>
      return osErrorOS;
 8016452:	23ff      	movs	r3, #255	; 0xff
 8016454:	e015      	b.n	8016482 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8016456:	68bb      	ldr	r3, [r7, #8]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d011      	beq.n	8016480 <osSemaphoreWait+0x8c>
 801645c:	4b0b      	ldr	r3, [pc, #44]	; (801648c <osSemaphoreWait+0x98>)
 801645e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016462:	601a      	str	r2, [r3, #0]
 8016464:	f3bf 8f4f 	dsb	sy
 8016468:	f3bf 8f6f 	isb	sy
 801646c:	e008      	b.n	8016480 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801646e:	68f9      	ldr	r1, [r7, #12]
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f000 fdcb 	bl	801700c <xQueueSemaphoreTake>
 8016476:	4603      	mov	r3, r0
 8016478:	2b01      	cmp	r3, #1
 801647a:	d001      	beq.n	8016480 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801647c:	23ff      	movs	r3, #255	; 0xff
 801647e:	e000      	b.n	8016482 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8016480:	2300      	movs	r3, #0
}
 8016482:	4618      	mov	r0, r3
 8016484:	3710      	adds	r7, #16
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
 801648a:	bf00      	nop
 801648c:	e000ed04 	.word	0xe000ed04

08016490 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b084      	sub	sp, #16
 8016494:	af00      	add	r7, sp, #0
 8016496:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8016498:	2300      	movs	r3, #0
 801649a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801649c:	2300      	movs	r3, #0
 801649e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80164a0:	f7ff fe89 	bl	80161b6 <inHandlerMode>
 80164a4:	4603      	mov	r3, r0
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d016      	beq.n	80164d8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80164aa:	f107 0308 	add.w	r3, r7, #8
 80164ae:	4619      	mov	r1, r3
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f000 fc45 	bl	8016d40 <xQueueGiveFromISR>
 80164b6:	4603      	mov	r3, r0
 80164b8:	2b01      	cmp	r3, #1
 80164ba:	d001      	beq.n	80164c0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80164bc:	23ff      	movs	r3, #255	; 0xff
 80164be:	e017      	b.n	80164f0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d013      	beq.n	80164ee <osSemaphoreRelease+0x5e>
 80164c6:	4b0c      	ldr	r3, [pc, #48]	; (80164f8 <osSemaphoreRelease+0x68>)
 80164c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164cc:	601a      	str	r2, [r3, #0]
 80164ce:	f3bf 8f4f 	dsb	sy
 80164d2:	f3bf 8f6f 	isb	sy
 80164d6:	e00a      	b.n	80164ee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80164d8:	2300      	movs	r3, #0
 80164da:	2200      	movs	r2, #0
 80164dc:	2100      	movs	r1, #0
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f000 faa0 	bl	8016a24 <xQueueGenericSend>
 80164e4:	4603      	mov	r3, r0
 80164e6:	2b01      	cmp	r3, #1
 80164e8:	d001      	beq.n	80164ee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80164ea:	23ff      	movs	r3, #255	; 0xff
 80164ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80164ee:	68fb      	ldr	r3, [r7, #12]
}
 80164f0:	4618      	mov	r0, r3
 80164f2:	3710      	adds	r7, #16
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd80      	pop	{r7, pc}
 80164f8:	e000ed04 	.word	0xe000ed04

080164fc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b082      	sub	sp, #8
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8016504:	f7ff fe57 	bl	80161b6 <inHandlerMode>
 8016508:	4603      	mov	r3, r0
 801650a:	2b00      	cmp	r3, #0
 801650c:	d001      	beq.n	8016512 <osSemaphoreDelete+0x16>
    return osErrorISR;
 801650e:	2382      	movs	r3, #130	; 0x82
 8016510:	e003      	b.n	801651a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f000 feff 	bl	8017316 <vQueueDelete>

  return osOK; 
 8016518:	2300      	movs	r3, #0
}
 801651a:	4618      	mov	r0, r3
 801651c:	3708      	adds	r7, #8
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}

08016522 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8016522:	b580      	push	{r7, lr}
 8016524:	b082      	sub	sp, #8
 8016526:	af00      	add	r7, sp, #0
 8016528:	6078      	str	r0, [r7, #4]
 801652a:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	6818      	ldr	r0, [r3, #0]
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	685b      	ldr	r3, [r3, #4]
 8016534:	2200      	movs	r2, #0
 8016536:	4619      	mov	r1, r3
 8016538:	f000 f9ea 	bl	8016910 <xQueueGenericCreate>
 801653c:	4603      	mov	r3, r0
#endif
}
 801653e:	4618      	mov	r0, r3
 8016540:	3708      	adds	r7, #8
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}
	...

08016548 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b086      	sub	sp, #24
 801654c:	af00      	add	r7, sp, #0
 801654e:	60f8      	str	r0, [r7, #12]
 8016550:	60b9      	str	r1, [r7, #8]
 8016552:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8016554:	2300      	movs	r3, #0
 8016556:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801655c:	697b      	ldr	r3, [r7, #20]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d101      	bne.n	8016566 <osMessagePut+0x1e>
    ticks = 1;
 8016562:	2301      	movs	r3, #1
 8016564:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8016566:	f7ff fe26 	bl	80161b6 <inHandlerMode>
 801656a:	4603      	mov	r3, r0
 801656c:	2b00      	cmp	r3, #0
 801656e:	d018      	beq.n	80165a2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016570:	f107 0210 	add.w	r2, r7, #16
 8016574:	f107 0108 	add.w	r1, r7, #8
 8016578:	2300      	movs	r3, #0
 801657a:	68f8      	ldr	r0, [r7, #12]
 801657c:	f000 fb4c 	bl	8016c18 <xQueueGenericSendFromISR>
 8016580:	4603      	mov	r3, r0
 8016582:	2b01      	cmp	r3, #1
 8016584:	d001      	beq.n	801658a <osMessagePut+0x42>
      return osErrorOS;
 8016586:	23ff      	movs	r3, #255	; 0xff
 8016588:	e018      	b.n	80165bc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d014      	beq.n	80165ba <osMessagePut+0x72>
 8016590:	4b0c      	ldr	r3, [pc, #48]	; (80165c4 <osMessagePut+0x7c>)
 8016592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016596:	601a      	str	r2, [r3, #0]
 8016598:	f3bf 8f4f 	dsb	sy
 801659c:	f3bf 8f6f 	isb	sy
 80165a0:	e00b      	b.n	80165ba <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80165a2:	f107 0108 	add.w	r1, r7, #8
 80165a6:	2300      	movs	r3, #0
 80165a8:	697a      	ldr	r2, [r7, #20]
 80165aa:	68f8      	ldr	r0, [r7, #12]
 80165ac:	f000 fa3a 	bl	8016a24 <xQueueGenericSend>
 80165b0:	4603      	mov	r3, r0
 80165b2:	2b01      	cmp	r3, #1
 80165b4:	d001      	beq.n	80165ba <osMessagePut+0x72>
      return osErrorOS;
 80165b6:	23ff      	movs	r3, #255	; 0xff
 80165b8:	e000      	b.n	80165bc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80165ba:	2300      	movs	r3, #0
}
 80165bc:	4618      	mov	r0, r3
 80165be:	3718      	adds	r7, #24
 80165c0:	46bd      	mov	sp, r7
 80165c2:	bd80      	pop	{r7, pc}
 80165c4:	e000ed04 	.word	0xe000ed04

080165c8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80165c8:	b590      	push	{r4, r7, lr}
 80165ca:	b08b      	sub	sp, #44	; 0x2c
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	60b9      	str	r1, [r7, #8]
 80165d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80165d4:	68bb      	ldr	r3, [r7, #8]
 80165d6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80165d8:	2300      	movs	r3, #0
 80165da:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d10a      	bne.n	80165f8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80165e2:	2380      	movs	r3, #128	; 0x80
 80165e4:	617b      	str	r3, [r7, #20]
    return event;
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	461c      	mov	r4, r3
 80165ea:	f107 0314 	add.w	r3, r7, #20
 80165ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80165f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80165f6:	e054      	b.n	80166a2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80165f8:	2300      	movs	r3, #0
 80165fa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80165fc:	2300      	movs	r3, #0
 80165fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016606:	d103      	bne.n	8016610 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801660c:	627b      	str	r3, [r7, #36]	; 0x24
 801660e:	e009      	b.n	8016624 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d006      	beq.n	8016624 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661c:	2b00      	cmp	r3, #0
 801661e:	d101      	bne.n	8016624 <osMessageGet+0x5c>
      ticks = 1;
 8016620:	2301      	movs	r3, #1
 8016622:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8016624:	f7ff fdc7 	bl	80161b6 <inHandlerMode>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d01c      	beq.n	8016668 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801662e:	f107 0220 	add.w	r2, r7, #32
 8016632:	f107 0314 	add.w	r3, r7, #20
 8016636:	3304      	adds	r3, #4
 8016638:	4619      	mov	r1, r3
 801663a:	68b8      	ldr	r0, [r7, #8]
 801663c:	f000 fdee 	bl	801721c <xQueueReceiveFromISR>
 8016640:	4603      	mov	r3, r0
 8016642:	2b01      	cmp	r3, #1
 8016644:	d102      	bne.n	801664c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8016646:	2310      	movs	r3, #16
 8016648:	617b      	str	r3, [r7, #20]
 801664a:	e001      	b.n	8016650 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801664c:	2300      	movs	r3, #0
 801664e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016650:	6a3b      	ldr	r3, [r7, #32]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d01d      	beq.n	8016692 <osMessageGet+0xca>
 8016656:	4b15      	ldr	r3, [pc, #84]	; (80166ac <osMessageGet+0xe4>)
 8016658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801665c:	601a      	str	r2, [r3, #0]
 801665e:	f3bf 8f4f 	dsb	sy
 8016662:	f3bf 8f6f 	isb	sy
 8016666:	e014      	b.n	8016692 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8016668:	f107 0314 	add.w	r3, r7, #20
 801666c:	3304      	adds	r3, #4
 801666e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016670:	4619      	mov	r1, r3
 8016672:	68b8      	ldr	r0, [r7, #8]
 8016674:	f000 fbee 	bl	8016e54 <xQueueReceive>
 8016678:	4603      	mov	r3, r0
 801667a:	2b01      	cmp	r3, #1
 801667c:	d102      	bne.n	8016684 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801667e:	2310      	movs	r3, #16
 8016680:	617b      	str	r3, [r7, #20]
 8016682:	e006      	b.n	8016692 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8016684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016686:	2b00      	cmp	r3, #0
 8016688:	d101      	bne.n	801668e <osMessageGet+0xc6>
 801668a:	2300      	movs	r3, #0
 801668c:	e000      	b.n	8016690 <osMessageGet+0xc8>
 801668e:	2340      	movs	r3, #64	; 0x40
 8016690:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	461c      	mov	r4, r3
 8016696:	f107 0314 	add.w	r3, r7, #20
 801669a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801669e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80166a2:	68f8      	ldr	r0, [r7, #12]
 80166a4:	372c      	adds	r7, #44	; 0x2c
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd90      	pop	{r4, r7, pc}
 80166aa:	bf00      	nop
 80166ac:	e000ed04 	.word	0xe000ed04

080166b0 <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 80166b4:	f001 f942 	bl	801793c <vTaskSuspendAll>
  
  return osOK;
 80166b8:	2300      	movs	r3, #0
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	bd80      	pop	{r7, pc}

080166be <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 80166be:	b580      	push	{r7, lr}
 80166c0:	af00      	add	r7, sp, #0
  if (xTaskResumeAll() == pdTRUE)
 80166c2:	f001 f949 	bl	8017958 <xTaskResumeAll>
 80166c6:	4603      	mov	r3, r0
 80166c8:	2b01      	cmp	r3, #1
 80166ca:	d101      	bne.n	80166d0 <osThreadResumeAll+0x12>
    return osOK;
 80166cc:	2300      	movs	r3, #0
 80166ce:	e000      	b.n	80166d2 <osThreadResumeAll+0x14>
  else
    return osErrorOS;
 80166d0:	23ff      	movs	r3, #255	; 0xff
  
}
 80166d2:	4618      	mov	r0, r3
 80166d4:	bd80      	pop	{r7, pc}

080166d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80166d6:	b480      	push	{r7}
 80166d8:	b083      	sub	sp, #12
 80166da:	af00      	add	r7, sp, #0
 80166dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f103 0208 	add.w	r2, r3, #8
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80166ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f103 0208 	add.w	r2, r3, #8
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f103 0208 	add.w	r2, r3, #8
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	2200      	movs	r2, #0
 8016708:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801670a:	bf00      	nop
 801670c:	370c      	adds	r7, #12
 801670e:	46bd      	mov	sp, r7
 8016710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016714:	4770      	bx	lr

08016716 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016716:	b480      	push	{r7}
 8016718:	b083      	sub	sp, #12
 801671a:	af00      	add	r7, sp, #0
 801671c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2200      	movs	r2, #0
 8016722:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016724:	bf00      	nop
 8016726:	370c      	adds	r7, #12
 8016728:	46bd      	mov	sp, r7
 801672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672e:	4770      	bx	lr

08016730 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016730:	b480      	push	{r7}
 8016732:	b085      	sub	sp, #20
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
 8016738:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	68fa      	ldr	r2, [r7, #12]
 8016744:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	689a      	ldr	r2, [r3, #8]
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	689b      	ldr	r3, [r3, #8]
 8016752:	683a      	ldr	r2, [r7, #0]
 8016754:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	683a      	ldr	r2, [r7, #0]
 801675a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	687a      	ldr	r2, [r7, #4]
 8016760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	1c5a      	adds	r2, r3, #1
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	601a      	str	r2, [r3, #0]
}
 801676c:	bf00      	nop
 801676e:	3714      	adds	r7, #20
 8016770:	46bd      	mov	sp, r7
 8016772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016776:	4770      	bx	lr

08016778 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016778:	b480      	push	{r7}
 801677a:	b085      	sub	sp, #20
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016788:	68bb      	ldr	r3, [r7, #8]
 801678a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801678e:	d103      	bne.n	8016798 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	691b      	ldr	r3, [r3, #16]
 8016794:	60fb      	str	r3, [r7, #12]
 8016796:	e00c      	b.n	80167b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	3308      	adds	r3, #8
 801679c:	60fb      	str	r3, [r7, #12]
 801679e:	e002      	b.n	80167a6 <vListInsert+0x2e>
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	685b      	ldr	r3, [r3, #4]
 80167a4:	60fb      	str	r3, [r7, #12]
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	685b      	ldr	r3, [r3, #4]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	68ba      	ldr	r2, [r7, #8]
 80167ae:	429a      	cmp	r2, r3
 80167b0:	d2f6      	bcs.n	80167a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	685a      	ldr	r2, [r3, #4]
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80167ba:	683b      	ldr	r3, [r7, #0]
 80167bc:	685b      	ldr	r3, [r3, #4]
 80167be:	683a      	ldr	r2, [r7, #0]
 80167c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	68fa      	ldr	r2, [r7, #12]
 80167c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	683a      	ldr	r2, [r7, #0]
 80167cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	1c5a      	adds	r2, r3, #1
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	601a      	str	r2, [r3, #0]
}
 80167de:	bf00      	nop
 80167e0:	3714      	adds	r7, #20
 80167e2:	46bd      	mov	sp, r7
 80167e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e8:	4770      	bx	lr

080167ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80167ea:	b480      	push	{r7}
 80167ec:	b085      	sub	sp, #20
 80167ee:	af00      	add	r7, sp, #0
 80167f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	691b      	ldr	r3, [r3, #16]
 80167f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	685b      	ldr	r3, [r3, #4]
 80167fc:	687a      	ldr	r2, [r7, #4]
 80167fe:	6892      	ldr	r2, [r2, #8]
 8016800:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	689b      	ldr	r3, [r3, #8]
 8016806:	687a      	ldr	r2, [r7, #4]
 8016808:	6852      	ldr	r2, [r2, #4]
 801680a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	687a      	ldr	r2, [r7, #4]
 8016812:	429a      	cmp	r2, r3
 8016814:	d103      	bne.n	801681e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	689a      	ldr	r2, [r3, #8]
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	2200      	movs	r2, #0
 8016822:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	1e5a      	subs	r2, r3, #1
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	681b      	ldr	r3, [r3, #0]
}
 8016832:	4618      	mov	r0, r3
 8016834:	3714      	adds	r7, #20
 8016836:	46bd      	mov	sp, r7
 8016838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683c:	4770      	bx	lr
	...

08016840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b084      	sub	sp, #16
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d109      	bne.n	8016868 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016858:	f383 8811 	msr	BASEPRI, r3
 801685c:	f3bf 8f6f 	isb	sy
 8016860:	f3bf 8f4f 	dsb	sy
 8016864:	60bb      	str	r3, [r7, #8]
 8016866:	e7fe      	b.n	8016866 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8016868:	f001 ff70 	bl	801874c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	681a      	ldr	r2, [r3, #0]
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016874:	68f9      	ldr	r1, [r7, #12]
 8016876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016878:	fb01 f303 	mul.w	r3, r1, r3
 801687c:	441a      	add	r2, r3
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2200      	movs	r2, #0
 8016886:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	681a      	ldr	r2, [r3, #0]
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016898:	3b01      	subs	r3, #1
 801689a:	68f9      	ldr	r1, [r7, #12]
 801689c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801689e:	fb01 f303 	mul.w	r3, r1, r3
 80168a2:	441a      	add	r2, r3
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	22ff      	movs	r2, #255	; 0xff
 80168ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	22ff      	movs	r2, #255	; 0xff
 80168b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d114      	bne.n	80168e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	691b      	ldr	r3, [r3, #16]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d01a      	beq.n	80168fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	3310      	adds	r3, #16
 80168ca:	4618      	mov	r0, r3
 80168cc:	f001 fa3c 	bl	8017d48 <xTaskRemoveFromEventList>
 80168d0:	4603      	mov	r3, r0
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d012      	beq.n	80168fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80168d6:	4b0d      	ldr	r3, [pc, #52]	; (801690c <xQueueGenericReset+0xcc>)
 80168d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168dc:	601a      	str	r2, [r3, #0]
 80168de:	f3bf 8f4f 	dsb	sy
 80168e2:	f3bf 8f6f 	isb	sy
 80168e6:	e009      	b.n	80168fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	3310      	adds	r3, #16
 80168ec:	4618      	mov	r0, r3
 80168ee:	f7ff fef2 	bl	80166d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	3324      	adds	r3, #36	; 0x24
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7ff feed 	bl	80166d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80168fc:	f001 ff54 	bl	80187a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016900:	2301      	movs	r3, #1
}
 8016902:	4618      	mov	r0, r3
 8016904:	3710      	adds	r7, #16
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}
 801690a:	bf00      	nop
 801690c:	e000ed04 	.word	0xe000ed04

08016910 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016910:	b580      	push	{r7, lr}
 8016912:	b08a      	sub	sp, #40	; 0x28
 8016914:	af02      	add	r7, sp, #8
 8016916:	60f8      	str	r0, [r7, #12]
 8016918:	60b9      	str	r1, [r7, #8]
 801691a:	4613      	mov	r3, r2
 801691c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d109      	bne.n	8016938 <xQueueGenericCreate+0x28>
 8016924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016928:	f383 8811 	msr	BASEPRI, r3
 801692c:	f3bf 8f6f 	isb	sy
 8016930:	f3bf 8f4f 	dsb	sy
 8016934:	613b      	str	r3, [r7, #16]
 8016936:	e7fe      	b.n	8016936 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d102      	bne.n	8016944 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801693e:	2300      	movs	r3, #0
 8016940:	61fb      	str	r3, [r7, #28]
 8016942:	e004      	b.n	801694e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	68ba      	ldr	r2, [r7, #8]
 8016948:	fb02 f303 	mul.w	r3, r2, r3
 801694c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801694e:	69fb      	ldr	r3, [r7, #28]
 8016950:	3348      	adds	r3, #72	; 0x48
 8016952:	4618      	mov	r0, r3
 8016954:	f002 f814 	bl	8018980 <pvPortMalloc>
 8016958:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801695a:	69bb      	ldr	r3, [r7, #24]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d00b      	beq.n	8016978 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8016960:	69bb      	ldr	r3, [r7, #24]
 8016962:	3348      	adds	r3, #72	; 0x48
 8016964:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016966:	79fa      	ldrb	r2, [r7, #7]
 8016968:	69bb      	ldr	r3, [r7, #24]
 801696a:	9300      	str	r3, [sp, #0]
 801696c:	4613      	mov	r3, r2
 801696e:	697a      	ldr	r2, [r7, #20]
 8016970:	68b9      	ldr	r1, [r7, #8]
 8016972:	68f8      	ldr	r0, [r7, #12]
 8016974:	f000 f805 	bl	8016982 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8016978:	69bb      	ldr	r3, [r7, #24]
	}
 801697a:	4618      	mov	r0, r3
 801697c:	3720      	adds	r7, #32
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}

08016982 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016982:	b580      	push	{r7, lr}
 8016984:	b084      	sub	sp, #16
 8016986:	af00      	add	r7, sp, #0
 8016988:	60f8      	str	r0, [r7, #12]
 801698a:	60b9      	str	r1, [r7, #8]
 801698c:	607a      	str	r2, [r7, #4]
 801698e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d103      	bne.n	801699e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016996:	69bb      	ldr	r3, [r7, #24]
 8016998:	69ba      	ldr	r2, [r7, #24]
 801699a:	601a      	str	r2, [r3, #0]
 801699c:	e002      	b.n	80169a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801699e:	69bb      	ldr	r3, [r7, #24]
 80169a0:	687a      	ldr	r2, [r7, #4]
 80169a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80169a4:	69bb      	ldr	r3, [r7, #24]
 80169a6:	68fa      	ldr	r2, [r7, #12]
 80169a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80169aa:	69bb      	ldr	r3, [r7, #24]
 80169ac:	68ba      	ldr	r2, [r7, #8]
 80169ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80169b0:	2101      	movs	r1, #1
 80169b2:	69b8      	ldr	r0, [r7, #24]
 80169b4:	f7ff ff44 	bl	8016840 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80169b8:	bf00      	nop
 80169ba:	3710      	adds	r7, #16
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}

080169c0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d00e      	beq.n	80169ec <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	2200      	movs	r2, #0
 80169d2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	2200      	movs	r2, #0
 80169d8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2200      	movs	r2, #0
 80169de:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80169e0:	2300      	movs	r3, #0
 80169e2:	2200      	movs	r2, #0
 80169e4:	2100      	movs	r1, #0
 80169e6:	6878      	ldr	r0, [r7, #4]
 80169e8:	f000 f81c 	bl	8016a24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80169ec:	bf00      	nop
 80169ee:	3708      	adds	r7, #8
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}

080169f4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b086      	sub	sp, #24
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	4603      	mov	r3, r0
 80169fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80169fe:	2301      	movs	r3, #1
 8016a00:	617b      	str	r3, [r7, #20]
 8016a02:	2300      	movs	r3, #0
 8016a04:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016a06:	79fb      	ldrb	r3, [r7, #7]
 8016a08:	461a      	mov	r2, r3
 8016a0a:	6939      	ldr	r1, [r7, #16]
 8016a0c:	6978      	ldr	r0, [r7, #20]
 8016a0e:	f7ff ff7f 	bl	8016910 <xQueueGenericCreate>
 8016a12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8016a14:	68f8      	ldr	r0, [r7, #12]
 8016a16:	f7ff ffd3 	bl	80169c0 <prvInitialiseMutex>

		return pxNewQueue;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
	}
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	3718      	adds	r7, #24
 8016a20:	46bd      	mov	sp, r7
 8016a22:	bd80      	pop	{r7, pc}

08016a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b08e      	sub	sp, #56	; 0x38
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	60f8      	str	r0, [r7, #12]
 8016a2c:	60b9      	str	r1, [r7, #8]
 8016a2e:	607a      	str	r2, [r7, #4]
 8016a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016a32:	2300      	movs	r3, #0
 8016a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d109      	bne.n	8016a54 <xQueueGenericSend+0x30>
 8016a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a44:	f383 8811 	msr	BASEPRI, r3
 8016a48:	f3bf 8f6f 	isb	sy
 8016a4c:	f3bf 8f4f 	dsb	sy
 8016a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a52:	e7fe      	b.n	8016a52 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d103      	bne.n	8016a62 <xQueueGenericSend+0x3e>
 8016a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d101      	bne.n	8016a66 <xQueueGenericSend+0x42>
 8016a62:	2301      	movs	r3, #1
 8016a64:	e000      	b.n	8016a68 <xQueueGenericSend+0x44>
 8016a66:	2300      	movs	r3, #0
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d109      	bne.n	8016a80 <xQueueGenericSend+0x5c>
 8016a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a70:	f383 8811 	msr	BASEPRI, r3
 8016a74:	f3bf 8f6f 	isb	sy
 8016a78:	f3bf 8f4f 	dsb	sy
 8016a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8016a7e:	e7fe      	b.n	8016a7e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	2b02      	cmp	r3, #2
 8016a84:	d103      	bne.n	8016a8e <xQueueGenericSend+0x6a>
 8016a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a8a:	2b01      	cmp	r3, #1
 8016a8c:	d101      	bne.n	8016a92 <xQueueGenericSend+0x6e>
 8016a8e:	2301      	movs	r3, #1
 8016a90:	e000      	b.n	8016a94 <xQueueGenericSend+0x70>
 8016a92:	2300      	movs	r3, #0
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d109      	bne.n	8016aac <xQueueGenericSend+0x88>
 8016a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a9c:	f383 8811 	msr	BASEPRI, r3
 8016aa0:	f3bf 8f6f 	isb	sy
 8016aa4:	f3bf 8f4f 	dsb	sy
 8016aa8:	623b      	str	r3, [r7, #32]
 8016aaa:	e7fe      	b.n	8016aaa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016aac:	f001 faea 	bl	8018084 <xTaskGetSchedulerState>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d102      	bne.n	8016abc <xQueueGenericSend+0x98>
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d101      	bne.n	8016ac0 <xQueueGenericSend+0x9c>
 8016abc:	2301      	movs	r3, #1
 8016abe:	e000      	b.n	8016ac2 <xQueueGenericSend+0x9e>
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d109      	bne.n	8016ada <xQueueGenericSend+0xb6>
 8016ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aca:	f383 8811 	msr	BASEPRI, r3
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f3bf 8f4f 	dsb	sy
 8016ad6:	61fb      	str	r3, [r7, #28]
 8016ad8:	e7fe      	b.n	8016ad8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016ada:	f001 fe37 	bl	801874c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d302      	bcc.n	8016af0 <xQueueGenericSend+0xcc>
 8016aea:	683b      	ldr	r3, [r7, #0]
 8016aec:	2b02      	cmp	r3, #2
 8016aee:	d129      	bne.n	8016b44 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016af0:	683a      	ldr	r2, [r7, #0]
 8016af2:	68b9      	ldr	r1, [r7, #8]
 8016af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016af6:	f000 fc43 	bl	8017380 <prvCopyDataToQueue>
 8016afa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d010      	beq.n	8016b26 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b06:	3324      	adds	r3, #36	; 0x24
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f001 f91d 	bl	8017d48 <xTaskRemoveFromEventList>
 8016b0e:	4603      	mov	r3, r0
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d013      	beq.n	8016b3c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016b14:	4b3f      	ldr	r3, [pc, #252]	; (8016c14 <xQueueGenericSend+0x1f0>)
 8016b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b1a:	601a      	str	r2, [r3, #0]
 8016b1c:	f3bf 8f4f 	dsb	sy
 8016b20:	f3bf 8f6f 	isb	sy
 8016b24:	e00a      	b.n	8016b3c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d007      	beq.n	8016b3c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016b2c:	4b39      	ldr	r3, [pc, #228]	; (8016c14 <xQueueGenericSend+0x1f0>)
 8016b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b32:	601a      	str	r2, [r3, #0]
 8016b34:	f3bf 8f4f 	dsb	sy
 8016b38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016b3c:	f001 fe34 	bl	80187a8 <vPortExitCritical>
				return pdPASS;
 8016b40:	2301      	movs	r3, #1
 8016b42:	e063      	b.n	8016c0c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d103      	bne.n	8016b52 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016b4a:	f001 fe2d 	bl	80187a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	e05c      	b.n	8016c0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d106      	bne.n	8016b66 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016b58:	f107 0314 	add.w	r3, r7, #20
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f001 f955 	bl	8017e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016b62:	2301      	movs	r3, #1
 8016b64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016b66:	f001 fe1f 	bl	80187a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016b6a:	f000 fee7 	bl	801793c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016b6e:	f001 fded 	bl	801874c <vPortEnterCritical>
 8016b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016b78:	b25b      	sxtb	r3, r3
 8016b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b7e:	d103      	bne.n	8016b88 <xQueueGenericSend+0x164>
 8016b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b82:	2200      	movs	r2, #0
 8016b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016b8e:	b25b      	sxtb	r3, r3
 8016b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b94:	d103      	bne.n	8016b9e <xQueueGenericSend+0x17a>
 8016b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b98:	2200      	movs	r2, #0
 8016b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016b9e:	f001 fe03 	bl	80187a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016ba2:	1d3a      	adds	r2, r7, #4
 8016ba4:	f107 0314 	add.w	r3, r7, #20
 8016ba8:	4611      	mov	r1, r2
 8016baa:	4618      	mov	r0, r3
 8016bac:	f001 f944 	bl	8017e38 <xTaskCheckForTimeOut>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d124      	bne.n	8016c00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016bb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016bb8:	f000 fcda 	bl	8017570 <prvIsQueueFull>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d018      	beq.n	8016bf4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc4:	3310      	adds	r3, #16
 8016bc6:	687a      	ldr	r2, [r7, #4]
 8016bc8:	4611      	mov	r1, r2
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f001 f898 	bl	8017d00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016bd2:	f000 fc65 	bl	80174a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016bd6:	f000 febf 	bl	8017958 <xTaskResumeAll>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	f47f af7c 	bne.w	8016ada <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8016be2:	4b0c      	ldr	r3, [pc, #48]	; (8016c14 <xQueueGenericSend+0x1f0>)
 8016be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016be8:	601a      	str	r2, [r3, #0]
 8016bea:	f3bf 8f4f 	dsb	sy
 8016bee:	f3bf 8f6f 	isb	sy
 8016bf2:	e772      	b.n	8016ada <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016bf6:	f000 fc53 	bl	80174a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016bfa:	f000 fead 	bl	8017958 <xTaskResumeAll>
 8016bfe:	e76c      	b.n	8016ada <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c02:	f000 fc4d 	bl	80174a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016c06:	f000 fea7 	bl	8017958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016c0a:	2300      	movs	r3, #0
		}
	}
}
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	3738      	adds	r7, #56	; 0x38
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	e000ed04 	.word	0xe000ed04

08016c18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b08e      	sub	sp, #56	; 0x38
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	60f8      	str	r0, [r7, #12]
 8016c20:	60b9      	str	r1, [r7, #8]
 8016c22:	607a      	str	r2, [r7, #4]
 8016c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d109      	bne.n	8016c44 <xQueueGenericSendFromISR+0x2c>
 8016c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c34:	f383 8811 	msr	BASEPRI, r3
 8016c38:	f3bf 8f6f 	isb	sy
 8016c3c:	f3bf 8f4f 	dsb	sy
 8016c40:	627b      	str	r3, [r7, #36]	; 0x24
 8016c42:	e7fe      	b.n	8016c42 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d103      	bne.n	8016c52 <xQueueGenericSendFromISR+0x3a>
 8016c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d101      	bne.n	8016c56 <xQueueGenericSendFromISR+0x3e>
 8016c52:	2301      	movs	r3, #1
 8016c54:	e000      	b.n	8016c58 <xQueueGenericSendFromISR+0x40>
 8016c56:	2300      	movs	r3, #0
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d109      	bne.n	8016c70 <xQueueGenericSendFromISR+0x58>
 8016c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c60:	f383 8811 	msr	BASEPRI, r3
 8016c64:	f3bf 8f6f 	isb	sy
 8016c68:	f3bf 8f4f 	dsb	sy
 8016c6c:	623b      	str	r3, [r7, #32]
 8016c6e:	e7fe      	b.n	8016c6e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	2b02      	cmp	r3, #2
 8016c74:	d103      	bne.n	8016c7e <xQueueGenericSendFromISR+0x66>
 8016c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c7a:	2b01      	cmp	r3, #1
 8016c7c:	d101      	bne.n	8016c82 <xQueueGenericSendFromISR+0x6a>
 8016c7e:	2301      	movs	r3, #1
 8016c80:	e000      	b.n	8016c84 <xQueueGenericSendFromISR+0x6c>
 8016c82:	2300      	movs	r3, #0
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d109      	bne.n	8016c9c <xQueueGenericSendFromISR+0x84>
 8016c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c8c:	f383 8811 	msr	BASEPRI, r3
 8016c90:	f3bf 8f6f 	isb	sy
 8016c94:	f3bf 8f4f 	dsb	sy
 8016c98:	61fb      	str	r3, [r7, #28]
 8016c9a:	e7fe      	b.n	8016c9a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016c9c:	f001 fe32 	bl	8018904 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016ca0:	f3ef 8211 	mrs	r2, BASEPRI
 8016ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ca8:	f383 8811 	msr	BASEPRI, r3
 8016cac:	f3bf 8f6f 	isb	sy
 8016cb0:	f3bf 8f4f 	dsb	sy
 8016cb4:	61ba      	str	r2, [r7, #24]
 8016cb6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016cb8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016cba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d302      	bcc.n	8016cce <xQueueGenericSendFromISR+0xb6>
 8016cc8:	683b      	ldr	r3, [r7, #0]
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	d12c      	bne.n	8016d28 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016cd8:	683a      	ldr	r2, [r7, #0]
 8016cda:	68b9      	ldr	r1, [r7, #8]
 8016cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016cde:	f000 fb4f 	bl	8017380 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016ce2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8016ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016cea:	d112      	bne.n	8016d12 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d016      	beq.n	8016d22 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf6:	3324      	adds	r3, #36	; 0x24
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f001 f825 	bl	8017d48 <xTaskRemoveFromEventList>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d00e      	beq.n	8016d22 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d00b      	beq.n	8016d22 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	2201      	movs	r2, #1
 8016d0e:	601a      	str	r2, [r3, #0]
 8016d10:	e007      	b.n	8016d22 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016d12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016d16:	3301      	adds	r3, #1
 8016d18:	b2db      	uxtb	r3, r3
 8016d1a:	b25a      	sxtb	r2, r3
 8016d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016d22:	2301      	movs	r3, #1
 8016d24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8016d26:	e001      	b.n	8016d2c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8016d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016d30:	693b      	ldr	r3, [r7, #16]
 8016d32:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	3738      	adds	r7, #56	; 0x38
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}

08016d40 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b08e      	sub	sp, #56	; 0x38
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
 8016d48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d109      	bne.n	8016d68 <xQueueGiveFromISR+0x28>
	__asm volatile
 8016d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d58:	f383 8811 	msr	BASEPRI, r3
 8016d5c:	f3bf 8f6f 	isb	sy
 8016d60:	f3bf 8f4f 	dsb	sy
 8016d64:	623b      	str	r3, [r7, #32]
 8016d66:	e7fe      	b.n	8016d66 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d009      	beq.n	8016d84 <xQueueGiveFromISR+0x44>
 8016d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d74:	f383 8811 	msr	BASEPRI, r3
 8016d78:	f3bf 8f6f 	isb	sy
 8016d7c:	f3bf 8f4f 	dsb	sy
 8016d80:	61fb      	str	r3, [r7, #28]
 8016d82:	e7fe      	b.n	8016d82 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8016d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d103      	bne.n	8016d94 <xQueueGiveFromISR+0x54>
 8016d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8e:	685b      	ldr	r3, [r3, #4]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d101      	bne.n	8016d98 <xQueueGiveFromISR+0x58>
 8016d94:	2301      	movs	r3, #1
 8016d96:	e000      	b.n	8016d9a <xQueueGiveFromISR+0x5a>
 8016d98:	2300      	movs	r3, #0
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d109      	bne.n	8016db2 <xQueueGiveFromISR+0x72>
 8016d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016da2:	f383 8811 	msr	BASEPRI, r3
 8016da6:	f3bf 8f6f 	isb	sy
 8016daa:	f3bf 8f4f 	dsb	sy
 8016dae:	61bb      	str	r3, [r7, #24]
 8016db0:	e7fe      	b.n	8016db0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016db2:	f001 fda7 	bl	8018904 <vPortValidateInterruptPriority>
	__asm volatile
 8016db6:	f3ef 8211 	mrs	r2, BASEPRI
 8016dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dbe:	f383 8811 	msr	BASEPRI, r3
 8016dc2:	f3bf 8f6f 	isb	sy
 8016dc6:	f3bf 8f4f 	dsb	sy
 8016dca:	617a      	str	r2, [r7, #20]
 8016dcc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016dce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016dde:	429a      	cmp	r2, r3
 8016de0:	d22b      	bcs.n	8016e3a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dee:	1c5a      	adds	r2, r3, #1
 8016df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016df4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dfc:	d112      	bne.n	8016e24 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d016      	beq.n	8016e34 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e08:	3324      	adds	r3, #36	; 0x24
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f000 ff9c 	bl	8017d48 <xTaskRemoveFromEventList>
 8016e10:	4603      	mov	r3, r0
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d00e      	beq.n	8016e34 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016e16:	683b      	ldr	r3, [r7, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d00b      	beq.n	8016e34 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	2201      	movs	r2, #1
 8016e20:	601a      	str	r2, [r3, #0]
 8016e22:	e007      	b.n	8016e34 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e28:	3301      	adds	r3, #1
 8016e2a:	b2db      	uxtb	r3, r3
 8016e2c:	b25a      	sxtb	r2, r3
 8016e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016e34:	2301      	movs	r3, #1
 8016e36:	637b      	str	r3, [r7, #52]	; 0x34
 8016e38:	e001      	b.n	8016e3e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8016e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3738      	adds	r7, #56	; 0x38
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
	...

08016e54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b08c      	sub	sp, #48	; 0x30
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	60f8      	str	r0, [r7, #12]
 8016e5c:	60b9      	str	r1, [r7, #8]
 8016e5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016e60:	2300      	movs	r3, #0
 8016e62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d109      	bne.n	8016e82 <xQueueReceive+0x2e>
	__asm volatile
 8016e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e72:	f383 8811 	msr	BASEPRI, r3
 8016e76:	f3bf 8f6f 	isb	sy
 8016e7a:	f3bf 8f4f 	dsb	sy
 8016e7e:	623b      	str	r3, [r7, #32]
 8016e80:	e7fe      	b.n	8016e80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e82:	68bb      	ldr	r3, [r7, #8]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d103      	bne.n	8016e90 <xQueueReceive+0x3c>
 8016e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d101      	bne.n	8016e94 <xQueueReceive+0x40>
 8016e90:	2301      	movs	r3, #1
 8016e92:	e000      	b.n	8016e96 <xQueueReceive+0x42>
 8016e94:	2300      	movs	r3, #0
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d109      	bne.n	8016eae <xQueueReceive+0x5a>
 8016e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e9e:	f383 8811 	msr	BASEPRI, r3
 8016ea2:	f3bf 8f6f 	isb	sy
 8016ea6:	f3bf 8f4f 	dsb	sy
 8016eaa:	61fb      	str	r3, [r7, #28]
 8016eac:	e7fe      	b.n	8016eac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016eae:	f001 f8e9 	bl	8018084 <xTaskGetSchedulerState>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d102      	bne.n	8016ebe <xQueueReceive+0x6a>
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d101      	bne.n	8016ec2 <xQueueReceive+0x6e>
 8016ebe:	2301      	movs	r3, #1
 8016ec0:	e000      	b.n	8016ec4 <xQueueReceive+0x70>
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d109      	bne.n	8016edc <xQueueReceive+0x88>
 8016ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ecc:	f383 8811 	msr	BASEPRI, r3
 8016ed0:	f3bf 8f6f 	isb	sy
 8016ed4:	f3bf 8f4f 	dsb	sy
 8016ed8:	61bb      	str	r3, [r7, #24]
 8016eda:	e7fe      	b.n	8016eda <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8016edc:	f001 fc36 	bl	801874c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ee4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d01f      	beq.n	8016f2c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016eec:	68b9      	ldr	r1, [r7, #8]
 8016eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ef0:	f000 fab0 	bl	8017454 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef6:	1e5a      	subs	r2, r3, #1
 8016ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efe:	691b      	ldr	r3, [r3, #16]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d00f      	beq.n	8016f24 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f06:	3310      	adds	r3, #16
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f000 ff1d 	bl	8017d48 <xTaskRemoveFromEventList>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d007      	beq.n	8016f24 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016f14:	4b3c      	ldr	r3, [pc, #240]	; (8017008 <xQueueReceive+0x1b4>)
 8016f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f1a:	601a      	str	r2, [r3, #0]
 8016f1c:	f3bf 8f4f 	dsb	sy
 8016f20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016f24:	f001 fc40 	bl	80187a8 <vPortExitCritical>
				return pdPASS;
 8016f28:	2301      	movs	r3, #1
 8016f2a:	e069      	b.n	8017000 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d103      	bne.n	8016f3a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016f32:	f001 fc39 	bl	80187a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016f36:	2300      	movs	r3, #0
 8016f38:	e062      	b.n	8017000 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d106      	bne.n	8016f4e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016f40:	f107 0310 	add.w	r3, r7, #16
 8016f44:	4618      	mov	r0, r3
 8016f46:	f000 ff61 	bl	8017e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016f4e:	f001 fc2b 	bl	80187a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016f52:	f000 fcf3 	bl	801793c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016f56:	f001 fbf9 	bl	801874c <vPortEnterCritical>
 8016f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f60:	b25b      	sxtb	r3, r3
 8016f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f66:	d103      	bne.n	8016f70 <xQueueReceive+0x11c>
 8016f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f76:	b25b      	sxtb	r3, r3
 8016f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f7c:	d103      	bne.n	8016f86 <xQueueReceive+0x132>
 8016f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f80:	2200      	movs	r2, #0
 8016f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016f86:	f001 fc0f 	bl	80187a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016f8a:	1d3a      	adds	r2, r7, #4
 8016f8c:	f107 0310 	add.w	r3, r7, #16
 8016f90:	4611      	mov	r1, r2
 8016f92:	4618      	mov	r0, r3
 8016f94:	f000 ff50 	bl	8017e38 <xTaskCheckForTimeOut>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d123      	bne.n	8016fe6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fa0:	f000 fad0 	bl	8017544 <prvIsQueueEmpty>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d017      	beq.n	8016fda <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fac:	3324      	adds	r3, #36	; 0x24
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	4611      	mov	r1, r2
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f000 fea4 	bl	8017d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fba:	f000 fa71 	bl	80174a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016fbe:	f000 fccb 	bl	8017958 <xTaskResumeAll>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d189      	bne.n	8016edc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8016fc8:	4b0f      	ldr	r3, [pc, #60]	; (8017008 <xQueueReceive+0x1b4>)
 8016fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016fce:	601a      	str	r2, [r3, #0]
 8016fd0:	f3bf 8f4f 	dsb	sy
 8016fd4:	f3bf 8f6f 	isb	sy
 8016fd8:	e780      	b.n	8016edc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fdc:	f000 fa60 	bl	80174a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016fe0:	f000 fcba 	bl	8017958 <xTaskResumeAll>
 8016fe4:	e77a      	b.n	8016edc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fe8:	f000 fa5a 	bl	80174a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016fec:	f000 fcb4 	bl	8017958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ff2:	f000 faa7 	bl	8017544 <prvIsQueueEmpty>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	f43f af6f 	beq.w	8016edc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016ffe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8017000:	4618      	mov	r0, r3
 8017002:	3730      	adds	r7, #48	; 0x30
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}
 8017008:	e000ed04 	.word	0xe000ed04

0801700c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b08e      	sub	sp, #56	; 0x38
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017016:	2300      	movs	r3, #0
 8017018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801701e:	2300      	movs	r3, #0
 8017020:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017024:	2b00      	cmp	r3, #0
 8017026:	d109      	bne.n	801703c <xQueueSemaphoreTake+0x30>
 8017028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801702c:	f383 8811 	msr	BASEPRI, r3
 8017030:	f3bf 8f6f 	isb	sy
 8017034:	f3bf 8f4f 	dsb	sy
 8017038:	623b      	str	r3, [r7, #32]
 801703a:	e7fe      	b.n	801703a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017040:	2b00      	cmp	r3, #0
 8017042:	d009      	beq.n	8017058 <xQueueSemaphoreTake+0x4c>
 8017044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017048:	f383 8811 	msr	BASEPRI, r3
 801704c:	f3bf 8f6f 	isb	sy
 8017050:	f3bf 8f4f 	dsb	sy
 8017054:	61fb      	str	r3, [r7, #28]
 8017056:	e7fe      	b.n	8017056 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017058:	f001 f814 	bl	8018084 <xTaskGetSchedulerState>
 801705c:	4603      	mov	r3, r0
 801705e:	2b00      	cmp	r3, #0
 8017060:	d102      	bne.n	8017068 <xQueueSemaphoreTake+0x5c>
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d101      	bne.n	801706c <xQueueSemaphoreTake+0x60>
 8017068:	2301      	movs	r3, #1
 801706a:	e000      	b.n	801706e <xQueueSemaphoreTake+0x62>
 801706c:	2300      	movs	r3, #0
 801706e:	2b00      	cmp	r3, #0
 8017070:	d109      	bne.n	8017086 <xQueueSemaphoreTake+0x7a>
 8017072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017076:	f383 8811 	msr	BASEPRI, r3
 801707a:	f3bf 8f6f 	isb	sy
 801707e:	f3bf 8f4f 	dsb	sy
 8017082:	61bb      	str	r3, [r7, #24]
 8017084:	e7fe      	b.n	8017084 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8017086:	f001 fb61 	bl	801874c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801708e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017092:	2b00      	cmp	r3, #0
 8017094:	d024      	beq.n	80170e0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017098:	1e5a      	subs	r2, r3, #1
 801709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801709c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d104      	bne.n	80170b0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80170a6:	f001 f9b3 	bl	8018410 <pvTaskIncrementMutexHeldCount>
 80170aa:	4602      	mov	r2, r0
 80170ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ae:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80170b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b2:	691b      	ldr	r3, [r3, #16]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d00f      	beq.n	80170d8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80170b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ba:	3310      	adds	r3, #16
 80170bc:	4618      	mov	r0, r3
 80170be:	f000 fe43 	bl	8017d48 <xTaskRemoveFromEventList>
 80170c2:	4603      	mov	r3, r0
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d007      	beq.n	80170d8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80170c8:	4b53      	ldr	r3, [pc, #332]	; (8017218 <xQueueSemaphoreTake+0x20c>)
 80170ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170ce:	601a      	str	r2, [r3, #0]
 80170d0:	f3bf 8f4f 	dsb	sy
 80170d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80170d8:	f001 fb66 	bl	80187a8 <vPortExitCritical>
				return pdPASS;
 80170dc:	2301      	movs	r3, #1
 80170de:	e096      	b.n	801720e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d110      	bne.n	8017108 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80170e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d009      	beq.n	8017100 <xQueueSemaphoreTake+0xf4>
 80170ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f0:	f383 8811 	msr	BASEPRI, r3
 80170f4:	f3bf 8f6f 	isb	sy
 80170f8:	f3bf 8f4f 	dsb	sy
 80170fc:	617b      	str	r3, [r7, #20]
 80170fe:	e7fe      	b.n	80170fe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017100:	f001 fb52 	bl	80187a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017104:	2300      	movs	r3, #0
 8017106:	e082      	b.n	801720e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801710a:	2b00      	cmp	r3, #0
 801710c:	d106      	bne.n	801711c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801710e:	f107 030c 	add.w	r3, r7, #12
 8017112:	4618      	mov	r0, r3
 8017114:	f000 fe7a 	bl	8017e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017118:	2301      	movs	r3, #1
 801711a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801711c:	f001 fb44 	bl	80187a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017120:	f000 fc0c 	bl	801793c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017124:	f001 fb12 	bl	801874c <vPortEnterCritical>
 8017128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801712a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801712e:	b25b      	sxtb	r3, r3
 8017130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017134:	d103      	bne.n	801713e <xQueueSemaphoreTake+0x132>
 8017136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017138:	2200      	movs	r2, #0
 801713a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017144:	b25b      	sxtb	r3, r3
 8017146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801714a:	d103      	bne.n	8017154 <xQueueSemaphoreTake+0x148>
 801714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801714e:	2200      	movs	r2, #0
 8017150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017154:	f001 fb28 	bl	80187a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017158:	463a      	mov	r2, r7
 801715a:	f107 030c 	add.w	r3, r7, #12
 801715e:	4611      	mov	r1, r2
 8017160:	4618      	mov	r0, r3
 8017162:	f000 fe69 	bl	8017e38 <xTaskCheckForTimeOut>
 8017166:	4603      	mov	r3, r0
 8017168:	2b00      	cmp	r3, #0
 801716a:	d132      	bne.n	80171d2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801716c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801716e:	f000 f9e9 	bl	8017544 <prvIsQueueEmpty>
 8017172:	4603      	mov	r3, r0
 8017174:	2b00      	cmp	r3, #0
 8017176:	d026      	beq.n	80171c6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d109      	bne.n	8017194 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8017180:	f001 fae4 	bl	801874c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8017184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	4618      	mov	r0, r3
 801718a:	f000 ff99 	bl	80180c0 <xTaskPriorityInherit>
 801718e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8017190:	f001 fb0a 	bl	80187a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017196:	3324      	adds	r3, #36	; 0x24
 8017198:	683a      	ldr	r2, [r7, #0]
 801719a:	4611      	mov	r1, r2
 801719c:	4618      	mov	r0, r3
 801719e:	f000 fdaf 	bl	8017d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80171a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171a4:	f000 f97c 	bl	80174a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80171a8:	f000 fbd6 	bl	8017958 <xTaskResumeAll>
 80171ac:	4603      	mov	r3, r0
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	f47f af69 	bne.w	8017086 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80171b4:	4b18      	ldr	r3, [pc, #96]	; (8017218 <xQueueSemaphoreTake+0x20c>)
 80171b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171ba:	601a      	str	r2, [r3, #0]
 80171bc:	f3bf 8f4f 	dsb	sy
 80171c0:	f3bf 8f6f 	isb	sy
 80171c4:	e75f      	b.n	8017086 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80171c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171c8:	f000 f96a 	bl	80174a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80171cc:	f000 fbc4 	bl	8017958 <xTaskResumeAll>
 80171d0:	e759      	b.n	8017086 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80171d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171d4:	f000 f964 	bl	80174a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80171d8:	f000 fbbe 	bl	8017958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80171dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171de:	f000 f9b1 	bl	8017544 <prvIsQueueEmpty>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	f43f af4e 	beq.w	8017086 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80171ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d00d      	beq.n	801720c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80171f0:	f001 faac 	bl	801874c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80171f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171f6:	f000 f8ab 	bl	8017350 <prvGetDisinheritPriorityAfterTimeout>
 80171fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80171fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171fe:	685b      	ldr	r3, [r3, #4]
 8017200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017202:	4618      	mov	r0, r3
 8017204:	f001 f866 	bl	80182d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017208:	f001 face 	bl	80187a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801720c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801720e:	4618      	mov	r0, r3
 8017210:	3738      	adds	r7, #56	; 0x38
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	e000ed04 	.word	0xe000ed04

0801721c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b08e      	sub	sp, #56	; 0x38
 8017220:	af00      	add	r7, sp, #0
 8017222:	60f8      	str	r0, [r7, #12]
 8017224:	60b9      	str	r1, [r7, #8]
 8017226:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801722e:	2b00      	cmp	r3, #0
 8017230:	d109      	bne.n	8017246 <xQueueReceiveFromISR+0x2a>
 8017232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017236:	f383 8811 	msr	BASEPRI, r3
 801723a:	f3bf 8f6f 	isb	sy
 801723e:	f3bf 8f4f 	dsb	sy
 8017242:	623b      	str	r3, [r7, #32]
 8017244:	e7fe      	b.n	8017244 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017246:	68bb      	ldr	r3, [r7, #8]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d103      	bne.n	8017254 <xQueueReceiveFromISR+0x38>
 801724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017250:	2b00      	cmp	r3, #0
 8017252:	d101      	bne.n	8017258 <xQueueReceiveFromISR+0x3c>
 8017254:	2301      	movs	r3, #1
 8017256:	e000      	b.n	801725a <xQueueReceiveFromISR+0x3e>
 8017258:	2300      	movs	r3, #0
 801725a:	2b00      	cmp	r3, #0
 801725c:	d109      	bne.n	8017272 <xQueueReceiveFromISR+0x56>
 801725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017262:	f383 8811 	msr	BASEPRI, r3
 8017266:	f3bf 8f6f 	isb	sy
 801726a:	f3bf 8f4f 	dsb	sy
 801726e:	61fb      	str	r3, [r7, #28]
 8017270:	e7fe      	b.n	8017270 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017272:	f001 fb47 	bl	8018904 <vPortValidateInterruptPriority>
	__asm volatile
 8017276:	f3ef 8211 	mrs	r2, BASEPRI
 801727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801727e:	f383 8811 	msr	BASEPRI, r3
 8017282:	f3bf 8f6f 	isb	sy
 8017286:	f3bf 8f4f 	dsb	sy
 801728a:	61ba      	str	r2, [r7, #24]
 801728c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801728e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017290:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017296:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801729a:	2b00      	cmp	r3, #0
 801729c:	d02f      	beq.n	80172fe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80172a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80172a8:	68b9      	ldr	r1, [r7, #8]
 80172aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172ac:	f000 f8d2 	bl	8017454 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80172b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172b2:	1e5a      	subs	r2, r3, #1
 80172b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80172b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80172bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80172c0:	d112      	bne.n	80172e8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80172c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c4:	691b      	ldr	r3, [r3, #16]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d016      	beq.n	80172f8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80172ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172cc:	3310      	adds	r3, #16
 80172ce:	4618      	mov	r0, r3
 80172d0:	f000 fd3a 	bl	8017d48 <xTaskRemoveFromEventList>
 80172d4:	4603      	mov	r3, r0
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d00e      	beq.n	80172f8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d00b      	beq.n	80172f8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	2201      	movs	r2, #1
 80172e4:	601a      	str	r2, [r3, #0]
 80172e6:	e007      	b.n	80172f8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80172e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172ec:	3301      	adds	r3, #1
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	b25a      	sxtb	r2, r3
 80172f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80172f8:	2301      	movs	r3, #1
 80172fa:	637b      	str	r3, [r7, #52]	; 0x34
 80172fc:	e001      	b.n	8017302 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80172fe:	2300      	movs	r3, #0
 8017300:	637b      	str	r3, [r7, #52]	; 0x34
 8017302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017304:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017306:	693b      	ldr	r3, [r7, #16]
 8017308:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801730e:	4618      	mov	r0, r3
 8017310:	3738      	adds	r7, #56	; 0x38
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}

08017316 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017316:	b580      	push	{r7, lr}
 8017318:	b084      	sub	sp, #16
 801731a:	af00      	add	r7, sp, #0
 801731c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d109      	bne.n	801733c <vQueueDelete+0x26>
	__asm volatile
 8017328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801732c:	f383 8811 	msr	BASEPRI, r3
 8017330:	f3bf 8f6f 	isb	sy
 8017334:	f3bf 8f4f 	dsb	sy
 8017338:	60bb      	str	r3, [r7, #8]
 801733a:	e7fe      	b.n	801733a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801733c:	68f8      	ldr	r0, [r7, #12]
 801733e:	f000 f92f 	bl	80175a0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8017342:	68f8      	ldr	r0, [r7, #12]
 8017344:	f001 fbde 	bl	8018b04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017348:	bf00      	nop
 801734a:	3710      	adds	r7, #16
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017350:	b480      	push	{r7}
 8017352:	b085      	sub	sp, #20
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801735c:	2b00      	cmp	r3, #0
 801735e:	d006      	beq.n	801736e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	f1c3 0307 	rsb	r3, r3, #7
 801736a:	60fb      	str	r3, [r7, #12]
 801736c:	e001      	b.n	8017372 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801736e:	2300      	movs	r3, #0
 8017370:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017372:	68fb      	ldr	r3, [r7, #12]
	}
 8017374:	4618      	mov	r0, r3
 8017376:	3714      	adds	r7, #20
 8017378:	46bd      	mov	sp, r7
 801737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737e:	4770      	bx	lr

08017380 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b086      	sub	sp, #24
 8017384:	af00      	add	r7, sp, #0
 8017386:	60f8      	str	r0, [r7, #12]
 8017388:	60b9      	str	r1, [r7, #8]
 801738a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801738c:	2300      	movs	r3, #0
 801738e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017394:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801739a:	2b00      	cmp	r3, #0
 801739c:	d10d      	bne.n	80173ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d14d      	bne.n	8017442 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	4618      	mov	r0, r3
 80173ac:	f000 ff0e 	bl	80181cc <xTaskPriorityDisinherit>
 80173b0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	2200      	movs	r2, #0
 80173b6:	605a      	str	r2, [r3, #4]
 80173b8:	e043      	b.n	8017442 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d119      	bne.n	80173f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	6898      	ldr	r0, [r3, #8]
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173c8:	461a      	mov	r2, r3
 80173ca:	68b9      	ldr	r1, [r7, #8]
 80173cc:	f002 fe22 	bl	801a014 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	689a      	ldr	r2, [r3, #8]
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173d8:	441a      	add	r2, r3
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	689a      	ldr	r2, [r3, #8]
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	429a      	cmp	r2, r3
 80173e8:	d32b      	bcc.n	8017442 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	681a      	ldr	r2, [r3, #0]
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	609a      	str	r2, [r3, #8]
 80173f2:	e026      	b.n	8017442 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	68d8      	ldr	r0, [r3, #12]
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173fc:	461a      	mov	r2, r3
 80173fe:	68b9      	ldr	r1, [r7, #8]
 8017400:	f002 fe08 	bl	801a014 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	68da      	ldr	r2, [r3, #12]
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801740c:	425b      	negs	r3, r3
 801740e:	441a      	add	r2, r3
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	68da      	ldr	r2, [r3, #12]
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	429a      	cmp	r2, r3
 801741e:	d207      	bcs.n	8017430 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	685a      	ldr	r2, [r3, #4]
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017428:	425b      	negs	r3, r3
 801742a:	441a      	add	r2, r3
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2b02      	cmp	r3, #2
 8017434:	d105      	bne.n	8017442 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d002      	beq.n	8017442 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801743c:	693b      	ldr	r3, [r7, #16]
 801743e:	3b01      	subs	r3, #1
 8017440:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017442:	693b      	ldr	r3, [r7, #16]
 8017444:	1c5a      	adds	r2, r3, #1
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801744a:	697b      	ldr	r3, [r7, #20]
}
 801744c:	4618      	mov	r0, r3
 801744e:	3718      	adds	r7, #24
 8017450:	46bd      	mov	sp, r7
 8017452:	bd80      	pop	{r7, pc}

08017454 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b082      	sub	sp, #8
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
 801745c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017462:	2b00      	cmp	r3, #0
 8017464:	d018      	beq.n	8017498 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	68da      	ldr	r2, [r3, #12]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801746e:	441a      	add	r2, r3
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	68da      	ldr	r2, [r3, #12]
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	685b      	ldr	r3, [r3, #4]
 801747c:	429a      	cmp	r2, r3
 801747e:	d303      	bcc.n	8017488 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	681a      	ldr	r2, [r3, #0]
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	68d9      	ldr	r1, [r3, #12]
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017490:	461a      	mov	r2, r3
 8017492:	6838      	ldr	r0, [r7, #0]
 8017494:	f002 fdbe 	bl	801a014 <memcpy>
	}
}
 8017498:	bf00      	nop
 801749a:	3708      	adds	r7, #8
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}

080174a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b084      	sub	sp, #16
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80174a8:	f001 f950 	bl	801874c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80174b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80174b4:	e011      	b.n	80174da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d012      	beq.n	80174e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	3324      	adds	r3, #36	; 0x24
 80174c2:	4618      	mov	r0, r3
 80174c4:	f000 fc40 	bl	8017d48 <xTaskRemoveFromEventList>
 80174c8:	4603      	mov	r3, r0
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d001      	beq.n	80174d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80174ce:	f000 fd13 	bl	8017ef8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80174d2:	7bfb      	ldrb	r3, [r7, #15]
 80174d4:	3b01      	subs	r3, #1
 80174d6:	b2db      	uxtb	r3, r3
 80174d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80174da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	dce9      	bgt.n	80174b6 <prvUnlockQueue+0x16>
 80174e2:	e000      	b.n	80174e6 <prvUnlockQueue+0x46>
					break;
 80174e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	22ff      	movs	r2, #255	; 0xff
 80174ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80174ee:	f001 f95b 	bl	80187a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80174f2:	f001 f92b 	bl	801874c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80174fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80174fe:	e011      	b.n	8017524 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	691b      	ldr	r3, [r3, #16]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d012      	beq.n	801752e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	3310      	adds	r3, #16
 801750c:	4618      	mov	r0, r3
 801750e:	f000 fc1b 	bl	8017d48 <xTaskRemoveFromEventList>
 8017512:	4603      	mov	r3, r0
 8017514:	2b00      	cmp	r3, #0
 8017516:	d001      	beq.n	801751c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017518:	f000 fcee 	bl	8017ef8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801751c:	7bbb      	ldrb	r3, [r7, #14]
 801751e:	3b01      	subs	r3, #1
 8017520:	b2db      	uxtb	r3, r3
 8017522:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017528:	2b00      	cmp	r3, #0
 801752a:	dce9      	bgt.n	8017500 <prvUnlockQueue+0x60>
 801752c:	e000      	b.n	8017530 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801752e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	22ff      	movs	r2, #255	; 0xff
 8017534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017538:	f001 f936 	bl	80187a8 <vPortExitCritical>
}
 801753c:	bf00      	nop
 801753e:	3710      	adds	r7, #16
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}

08017544 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b084      	sub	sp, #16
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801754c:	f001 f8fe 	bl	801874c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017554:	2b00      	cmp	r3, #0
 8017556:	d102      	bne.n	801755e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017558:	2301      	movs	r3, #1
 801755a:	60fb      	str	r3, [r7, #12]
 801755c:	e001      	b.n	8017562 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801755e:	2300      	movs	r3, #0
 8017560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017562:	f001 f921 	bl	80187a8 <vPortExitCritical>

	return xReturn;
 8017566:	68fb      	ldr	r3, [r7, #12]
}
 8017568:	4618      	mov	r0, r3
 801756a:	3710      	adds	r7, #16
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}

08017570 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b084      	sub	sp, #16
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017578:	f001 f8e8 	bl	801874c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017584:	429a      	cmp	r2, r3
 8017586:	d102      	bne.n	801758e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017588:	2301      	movs	r3, #1
 801758a:	60fb      	str	r3, [r7, #12]
 801758c:	e001      	b.n	8017592 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801758e:	2300      	movs	r3, #0
 8017590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017592:	f001 f909 	bl	80187a8 <vPortExitCritical>

	return xReturn;
 8017596:	68fb      	ldr	r3, [r7, #12]
}
 8017598:	4618      	mov	r0, r3
 801759a:	3710      	adds	r7, #16
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}

080175a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80175a0:	b480      	push	{r7}
 80175a2:	b085      	sub	sp, #20
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80175a8:	2300      	movs	r3, #0
 80175aa:	60fb      	str	r3, [r7, #12]
 80175ac:	e016      	b.n	80175dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80175ae:	4a10      	ldr	r2, [pc, #64]	; (80175f0 <vQueueUnregisterQueue+0x50>)
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	00db      	lsls	r3, r3, #3
 80175b4:	4413      	add	r3, r2
 80175b6:	685b      	ldr	r3, [r3, #4]
 80175b8:	687a      	ldr	r2, [r7, #4]
 80175ba:	429a      	cmp	r2, r3
 80175bc:	d10b      	bne.n	80175d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80175be:	4a0c      	ldr	r2, [pc, #48]	; (80175f0 <vQueueUnregisterQueue+0x50>)
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	2100      	movs	r1, #0
 80175c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80175c8:	4a09      	ldr	r2, [pc, #36]	; (80175f0 <vQueueUnregisterQueue+0x50>)
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	00db      	lsls	r3, r3, #3
 80175ce:	4413      	add	r3, r2
 80175d0:	2200      	movs	r2, #0
 80175d2:	605a      	str	r2, [r3, #4]
				break;
 80175d4:	e005      	b.n	80175e2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	3301      	adds	r3, #1
 80175da:	60fb      	str	r3, [r7, #12]
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	2b07      	cmp	r3, #7
 80175e0:	d9e5      	bls.n	80175ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80175e2:	bf00      	nop
 80175e4:	3714      	adds	r7, #20
 80175e6:	46bd      	mov	sp, r7
 80175e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ec:	4770      	bx	lr
 80175ee:	bf00      	nop
 80175f0:	2001023c 	.word	0x2001023c

080175f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b08c      	sub	sp, #48	; 0x30
 80175f8:	af04      	add	r7, sp, #16
 80175fa:	60f8      	str	r0, [r7, #12]
 80175fc:	60b9      	str	r1, [r7, #8]
 80175fe:	603b      	str	r3, [r7, #0]
 8017600:	4613      	mov	r3, r2
 8017602:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017604:	88fb      	ldrh	r3, [r7, #6]
 8017606:	009b      	lsls	r3, r3, #2
 8017608:	4618      	mov	r0, r3
 801760a:	f001 f9b9 	bl	8018980 <pvPortMalloc>
 801760e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d00e      	beq.n	8017634 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8017616:	2054      	movs	r0, #84	; 0x54
 8017618:	f001 f9b2 	bl	8018980 <pvPortMalloc>
 801761c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801761e:	69fb      	ldr	r3, [r7, #28]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d003      	beq.n	801762c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017624:	69fb      	ldr	r3, [r7, #28]
 8017626:	697a      	ldr	r2, [r7, #20]
 8017628:	631a      	str	r2, [r3, #48]	; 0x30
 801762a:	e005      	b.n	8017638 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801762c:	6978      	ldr	r0, [r7, #20]
 801762e:	f001 fa69 	bl	8018b04 <vPortFree>
 8017632:	e001      	b.n	8017638 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017634:	2300      	movs	r3, #0
 8017636:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017638:	69fb      	ldr	r3, [r7, #28]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d013      	beq.n	8017666 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801763e:	88fa      	ldrh	r2, [r7, #6]
 8017640:	2300      	movs	r3, #0
 8017642:	9303      	str	r3, [sp, #12]
 8017644:	69fb      	ldr	r3, [r7, #28]
 8017646:	9302      	str	r3, [sp, #8]
 8017648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801764a:	9301      	str	r3, [sp, #4]
 801764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801764e:	9300      	str	r3, [sp, #0]
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	68b9      	ldr	r1, [r7, #8]
 8017654:	68f8      	ldr	r0, [r7, #12]
 8017656:	f000 f80e 	bl	8017676 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801765a:	69f8      	ldr	r0, [r7, #28]
 801765c:	f000 f88a 	bl	8017774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017660:	2301      	movs	r3, #1
 8017662:	61bb      	str	r3, [r7, #24]
 8017664:	e002      	b.n	801766c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801766a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801766c:	69bb      	ldr	r3, [r7, #24]
	}
 801766e:	4618      	mov	r0, r3
 8017670:	3720      	adds	r7, #32
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}

08017676 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017676:	b580      	push	{r7, lr}
 8017678:	b088      	sub	sp, #32
 801767a:	af00      	add	r7, sp, #0
 801767c:	60f8      	str	r0, [r7, #12]
 801767e:	60b9      	str	r1, [r7, #8]
 8017680:	607a      	str	r2, [r7, #4]
 8017682:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8017684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801768e:	3b01      	subs	r3, #1
 8017690:	009b      	lsls	r3, r3, #2
 8017692:	4413      	add	r3, r2
 8017694:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8017696:	69bb      	ldr	r3, [r7, #24]
 8017698:	f023 0307 	bic.w	r3, r3, #7
 801769c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801769e:	69bb      	ldr	r3, [r7, #24]
 80176a0:	f003 0307 	and.w	r3, r3, #7
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d009      	beq.n	80176bc <prvInitialiseNewTask+0x46>
 80176a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176ac:	f383 8811 	msr	BASEPRI, r3
 80176b0:	f3bf 8f6f 	isb	sy
 80176b4:	f3bf 8f4f 	dsb	sy
 80176b8:	617b      	str	r3, [r7, #20]
 80176ba:	e7fe      	b.n	80176ba <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80176bc:	2300      	movs	r3, #0
 80176be:	61fb      	str	r3, [r7, #28]
 80176c0:	e012      	b.n	80176e8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80176c2:	68ba      	ldr	r2, [r7, #8]
 80176c4:	69fb      	ldr	r3, [r7, #28]
 80176c6:	4413      	add	r3, r2
 80176c8:	7819      	ldrb	r1, [r3, #0]
 80176ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80176cc:	69fb      	ldr	r3, [r7, #28]
 80176ce:	4413      	add	r3, r2
 80176d0:	3334      	adds	r3, #52	; 0x34
 80176d2:	460a      	mov	r2, r1
 80176d4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80176d6:	68ba      	ldr	r2, [r7, #8]
 80176d8:	69fb      	ldr	r3, [r7, #28]
 80176da:	4413      	add	r3, r2
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d006      	beq.n	80176f0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80176e2:	69fb      	ldr	r3, [r7, #28]
 80176e4:	3301      	adds	r3, #1
 80176e6:	61fb      	str	r3, [r7, #28]
 80176e8:	69fb      	ldr	r3, [r7, #28]
 80176ea:	2b0f      	cmp	r3, #15
 80176ec:	d9e9      	bls.n	80176c2 <prvInitialiseNewTask+0x4c>
 80176ee:	e000      	b.n	80176f2 <prvInitialiseNewTask+0x7c>
		{
			break;
 80176f0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80176f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f4:	2200      	movs	r2, #0
 80176f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80176fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176fc:	2b06      	cmp	r3, #6
 80176fe:	d901      	bls.n	8017704 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017700:	2306      	movs	r3, #6
 8017702:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801770e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8017710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017712:	2200      	movs	r2, #0
 8017714:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017718:	3304      	adds	r3, #4
 801771a:	4618      	mov	r0, r3
 801771c:	f7fe fffb 	bl	8016716 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017722:	3318      	adds	r3, #24
 8017724:	4618      	mov	r0, r3
 8017726:	f7fe fff6 	bl	8016716 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801772c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801772e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017732:	f1c3 0207 	rsb	r2, r3, #7
 8017736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801773e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017742:	2200      	movs	r2, #0
 8017744:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017748:	2200      	movs	r2, #0
 801774a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801774e:	683a      	ldr	r2, [r7, #0]
 8017750:	68f9      	ldr	r1, [r7, #12]
 8017752:	69b8      	ldr	r0, [r7, #24]
 8017754:	f000 fed6 	bl	8018504 <pxPortInitialiseStack>
 8017758:	4602      	mov	r2, r0
 801775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017760:	2b00      	cmp	r3, #0
 8017762:	d002      	beq.n	801776a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017768:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801776a:	bf00      	nop
 801776c:	3720      	adds	r7, #32
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}
	...

08017774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b082      	sub	sp, #8
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801777c:	f000 ffe6 	bl	801874c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017780:	4b2a      	ldr	r3, [pc, #168]	; (801782c <prvAddNewTaskToReadyList+0xb8>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	3301      	adds	r3, #1
 8017786:	4a29      	ldr	r2, [pc, #164]	; (801782c <prvAddNewTaskToReadyList+0xb8>)
 8017788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801778a:	4b29      	ldr	r3, [pc, #164]	; (8017830 <prvAddNewTaskToReadyList+0xbc>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d109      	bne.n	80177a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017792:	4a27      	ldr	r2, [pc, #156]	; (8017830 <prvAddNewTaskToReadyList+0xbc>)
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017798:	4b24      	ldr	r3, [pc, #144]	; (801782c <prvAddNewTaskToReadyList+0xb8>)
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	2b01      	cmp	r3, #1
 801779e:	d110      	bne.n	80177c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80177a0:	f000 fbce 	bl	8017f40 <prvInitialiseTaskLists>
 80177a4:	e00d      	b.n	80177c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80177a6:	4b23      	ldr	r3, [pc, #140]	; (8017834 <prvAddNewTaskToReadyList+0xc0>)
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d109      	bne.n	80177c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80177ae:	4b20      	ldr	r3, [pc, #128]	; (8017830 <prvAddNewTaskToReadyList+0xbc>)
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177b8:	429a      	cmp	r2, r3
 80177ba:	d802      	bhi.n	80177c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80177bc:	4a1c      	ldr	r2, [pc, #112]	; (8017830 <prvAddNewTaskToReadyList+0xbc>)
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80177c2:	4b1d      	ldr	r3, [pc, #116]	; (8017838 <prvAddNewTaskToReadyList+0xc4>)
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	3301      	adds	r3, #1
 80177c8:	4a1b      	ldr	r2, [pc, #108]	; (8017838 <prvAddNewTaskToReadyList+0xc4>)
 80177ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177d0:	2201      	movs	r2, #1
 80177d2:	409a      	lsls	r2, r3
 80177d4:	4b19      	ldr	r3, [pc, #100]	; (801783c <prvAddNewTaskToReadyList+0xc8>)
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	4313      	orrs	r3, r2
 80177da:	4a18      	ldr	r2, [pc, #96]	; (801783c <prvAddNewTaskToReadyList+0xc8>)
 80177dc:	6013      	str	r3, [r2, #0]
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177e2:	4613      	mov	r3, r2
 80177e4:	009b      	lsls	r3, r3, #2
 80177e6:	4413      	add	r3, r2
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	4a15      	ldr	r2, [pc, #84]	; (8017840 <prvAddNewTaskToReadyList+0xcc>)
 80177ec:	441a      	add	r2, r3
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	3304      	adds	r3, #4
 80177f2:	4619      	mov	r1, r3
 80177f4:	4610      	mov	r0, r2
 80177f6:	f7fe ff9b 	bl	8016730 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80177fa:	f000 ffd5 	bl	80187a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80177fe:	4b0d      	ldr	r3, [pc, #52]	; (8017834 <prvAddNewTaskToReadyList+0xc0>)
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d00e      	beq.n	8017824 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017806:	4b0a      	ldr	r3, [pc, #40]	; (8017830 <prvAddNewTaskToReadyList+0xbc>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017810:	429a      	cmp	r2, r3
 8017812:	d207      	bcs.n	8017824 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017814:	4b0b      	ldr	r3, [pc, #44]	; (8017844 <prvAddNewTaskToReadyList+0xd0>)
 8017816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801781a:	601a      	str	r2, [r3, #0]
 801781c:	f3bf 8f4f 	dsb	sy
 8017820:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017824:	bf00      	nop
 8017826:	3708      	adds	r7, #8
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}
 801782c:	2000c43c 	.word	0x2000c43c
 8017830:	2000c33c 	.word	0x2000c33c
 8017834:	2000c448 	.word	0x2000c448
 8017838:	2000c458 	.word	0x2000c458
 801783c:	2000c444 	.word	0x2000c444
 8017840:	2000c340 	.word	0x2000c340
 8017844:	e000ed04 	.word	0xe000ed04

08017848 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017848:	b580      	push	{r7, lr}
 801784a:	b084      	sub	sp, #16
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017850:	2300      	movs	r3, #0
 8017852:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d016      	beq.n	8017888 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801785a:	4b13      	ldr	r3, [pc, #76]	; (80178a8 <vTaskDelay+0x60>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d009      	beq.n	8017876 <vTaskDelay+0x2e>
 8017862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017866:	f383 8811 	msr	BASEPRI, r3
 801786a:	f3bf 8f6f 	isb	sy
 801786e:	f3bf 8f4f 	dsb	sy
 8017872:	60bb      	str	r3, [r7, #8]
 8017874:	e7fe      	b.n	8017874 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8017876:	f000 f861 	bl	801793c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801787a:	2100      	movs	r1, #0
 801787c:	6878      	ldr	r0, [r7, #4]
 801787e:	f000 fddb 	bl	8018438 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017882:	f000 f869 	bl	8017958 <xTaskResumeAll>
 8017886:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d107      	bne.n	801789e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801788e:	4b07      	ldr	r3, [pc, #28]	; (80178ac <vTaskDelay+0x64>)
 8017890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017894:	601a      	str	r2, [r3, #0]
 8017896:	f3bf 8f4f 	dsb	sy
 801789a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801789e:	bf00      	nop
 80178a0:	3710      	adds	r7, #16
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}
 80178a6:	bf00      	nop
 80178a8:	2000c464 	.word	0x2000c464
 80178ac:	e000ed04 	.word	0xe000ed04

080178b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b086      	sub	sp, #24
 80178b4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80178b6:	4b1b      	ldr	r3, [pc, #108]	; (8017924 <vTaskStartScheduler+0x74>)
 80178b8:	9301      	str	r3, [sp, #4]
 80178ba:	2300      	movs	r3, #0
 80178bc:	9300      	str	r3, [sp, #0]
 80178be:	2300      	movs	r3, #0
 80178c0:	2280      	movs	r2, #128	; 0x80
 80178c2:	4919      	ldr	r1, [pc, #100]	; (8017928 <vTaskStartScheduler+0x78>)
 80178c4:	4819      	ldr	r0, [pc, #100]	; (801792c <vTaskStartScheduler+0x7c>)
 80178c6:	f7ff fe95 	bl	80175f4 <xTaskCreate>
 80178ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	2b01      	cmp	r3, #1
 80178d0:	d115      	bne.n	80178fe <vTaskStartScheduler+0x4e>
 80178d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178d6:	f383 8811 	msr	BASEPRI, r3
 80178da:	f3bf 8f6f 	isb	sy
 80178de:	f3bf 8f4f 	dsb	sy
 80178e2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80178e4:	4b12      	ldr	r3, [pc, #72]	; (8017930 <vTaskStartScheduler+0x80>)
 80178e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80178ec:	4b11      	ldr	r3, [pc, #68]	; (8017934 <vTaskStartScheduler+0x84>)
 80178ee:	2201      	movs	r2, #1
 80178f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80178f2:	4b11      	ldr	r3, [pc, #68]	; (8017938 <vTaskStartScheduler+0x88>)
 80178f4:	2200      	movs	r2, #0
 80178f6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80178f8:	f000 fe8a 	bl	8018610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80178fc:	e00d      	b.n	801791a <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017904:	d109      	bne.n	801791a <vTaskStartScheduler+0x6a>
 8017906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801790a:	f383 8811 	msr	BASEPRI, r3
 801790e:	f3bf 8f6f 	isb	sy
 8017912:	f3bf 8f4f 	dsb	sy
 8017916:	607b      	str	r3, [r7, #4]
 8017918:	e7fe      	b.n	8017918 <vTaskStartScheduler+0x68>
}
 801791a:	bf00      	nop
 801791c:	3710      	adds	r7, #16
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}
 8017922:	bf00      	nop
 8017924:	2000c460 	.word	0x2000c460
 8017928:	0801c2e4 	.word	0x0801c2e4
 801792c:	08017f11 	.word	0x08017f11
 8017930:	2000c45c 	.word	0x2000c45c
 8017934:	2000c448 	.word	0x2000c448
 8017938:	2000c440 	.word	0x2000c440

0801793c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801793c:	b480      	push	{r7}
 801793e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8017940:	4b04      	ldr	r3, [pc, #16]	; (8017954 <vTaskSuspendAll+0x18>)
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	3301      	adds	r3, #1
 8017946:	4a03      	ldr	r2, [pc, #12]	; (8017954 <vTaskSuspendAll+0x18>)
 8017948:	6013      	str	r3, [r2, #0]
}
 801794a:	bf00      	nop
 801794c:	46bd      	mov	sp, r7
 801794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017952:	4770      	bx	lr
 8017954:	2000c464 	.word	0x2000c464

08017958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b084      	sub	sp, #16
 801795c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801795e:	2300      	movs	r3, #0
 8017960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017962:	2300      	movs	r3, #0
 8017964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017966:	4b41      	ldr	r3, [pc, #260]	; (8017a6c <xTaskResumeAll+0x114>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d109      	bne.n	8017982 <xTaskResumeAll+0x2a>
 801796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017972:	f383 8811 	msr	BASEPRI, r3
 8017976:	f3bf 8f6f 	isb	sy
 801797a:	f3bf 8f4f 	dsb	sy
 801797e:	603b      	str	r3, [r7, #0]
 8017980:	e7fe      	b.n	8017980 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017982:	f000 fee3 	bl	801874c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017986:	4b39      	ldr	r3, [pc, #228]	; (8017a6c <xTaskResumeAll+0x114>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	3b01      	subs	r3, #1
 801798c:	4a37      	ldr	r2, [pc, #220]	; (8017a6c <xTaskResumeAll+0x114>)
 801798e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017990:	4b36      	ldr	r3, [pc, #216]	; (8017a6c <xTaskResumeAll+0x114>)
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d161      	bne.n	8017a5c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017998:	4b35      	ldr	r3, [pc, #212]	; (8017a70 <xTaskResumeAll+0x118>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d05d      	beq.n	8017a5c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80179a0:	e02e      	b.n	8017a00 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80179a2:	4b34      	ldr	r3, [pc, #208]	; (8017a74 <xTaskResumeAll+0x11c>)
 80179a4:	68db      	ldr	r3, [r3, #12]
 80179a6:	68db      	ldr	r3, [r3, #12]
 80179a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	3318      	adds	r3, #24
 80179ae:	4618      	mov	r0, r3
 80179b0:	f7fe ff1b 	bl	80167ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	3304      	adds	r3, #4
 80179b8:	4618      	mov	r0, r3
 80179ba:	f7fe ff16 	bl	80167ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179c2:	2201      	movs	r2, #1
 80179c4:	409a      	lsls	r2, r3
 80179c6:	4b2c      	ldr	r3, [pc, #176]	; (8017a78 <xTaskResumeAll+0x120>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	4313      	orrs	r3, r2
 80179cc:	4a2a      	ldr	r2, [pc, #168]	; (8017a78 <xTaskResumeAll+0x120>)
 80179ce:	6013      	str	r3, [r2, #0]
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179d4:	4613      	mov	r3, r2
 80179d6:	009b      	lsls	r3, r3, #2
 80179d8:	4413      	add	r3, r2
 80179da:	009b      	lsls	r3, r3, #2
 80179dc:	4a27      	ldr	r2, [pc, #156]	; (8017a7c <xTaskResumeAll+0x124>)
 80179de:	441a      	add	r2, r3
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	3304      	adds	r3, #4
 80179e4:	4619      	mov	r1, r3
 80179e6:	4610      	mov	r0, r2
 80179e8:	f7fe fea2 	bl	8016730 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179f0:	4b23      	ldr	r3, [pc, #140]	; (8017a80 <xTaskResumeAll+0x128>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d302      	bcc.n	8017a00 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80179fa:	4b22      	ldr	r3, [pc, #136]	; (8017a84 <xTaskResumeAll+0x12c>)
 80179fc:	2201      	movs	r2, #1
 80179fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017a00:	4b1c      	ldr	r3, [pc, #112]	; (8017a74 <xTaskResumeAll+0x11c>)
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d1cc      	bne.n	80179a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d001      	beq.n	8017a12 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017a0e:	f000 fb13 	bl	8018038 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8017a12:	4b1d      	ldr	r3, [pc, #116]	; (8017a88 <xTaskResumeAll+0x130>)
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d010      	beq.n	8017a40 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017a1e:	f000 f859 	bl	8017ad4 <xTaskIncrementTick>
 8017a22:	4603      	mov	r3, r0
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d002      	beq.n	8017a2e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8017a28:	4b16      	ldr	r3, [pc, #88]	; (8017a84 <xTaskResumeAll+0x12c>)
 8017a2a:	2201      	movs	r2, #1
 8017a2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	3b01      	subs	r3, #1
 8017a32:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d1f1      	bne.n	8017a1e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8017a3a:	4b13      	ldr	r3, [pc, #76]	; (8017a88 <xTaskResumeAll+0x130>)
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017a40:	4b10      	ldr	r3, [pc, #64]	; (8017a84 <xTaskResumeAll+0x12c>)
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d009      	beq.n	8017a5c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017a48:	2301      	movs	r3, #1
 8017a4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017a4c:	4b0f      	ldr	r3, [pc, #60]	; (8017a8c <xTaskResumeAll+0x134>)
 8017a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a52:	601a      	str	r2, [r3, #0]
 8017a54:	f3bf 8f4f 	dsb	sy
 8017a58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017a5c:	f000 fea4 	bl	80187a8 <vPortExitCritical>

	return xAlreadyYielded;
 8017a60:	68bb      	ldr	r3, [r7, #8]
}
 8017a62:	4618      	mov	r0, r3
 8017a64:	3710      	adds	r7, #16
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bd80      	pop	{r7, pc}
 8017a6a:	bf00      	nop
 8017a6c:	2000c464 	.word	0x2000c464
 8017a70:	2000c43c 	.word	0x2000c43c
 8017a74:	2000c3fc 	.word	0x2000c3fc
 8017a78:	2000c444 	.word	0x2000c444
 8017a7c:	2000c340 	.word	0x2000c340
 8017a80:	2000c33c 	.word	0x2000c33c
 8017a84:	2000c450 	.word	0x2000c450
 8017a88:	2000c44c 	.word	0x2000c44c
 8017a8c:	e000ed04 	.word	0xe000ed04

08017a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017a90:	b480      	push	{r7}
 8017a92:	b083      	sub	sp, #12
 8017a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017a96:	4b05      	ldr	r3, [pc, #20]	; (8017aac <xTaskGetTickCount+0x1c>)
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017a9c:	687b      	ldr	r3, [r7, #4]
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	370c      	adds	r7, #12
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa8:	4770      	bx	lr
 8017aaa:	bf00      	nop
 8017aac:	2000c440 	.word	0x2000c440

08017ab0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	b082      	sub	sp, #8
 8017ab4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017ab6:	f000 ff25 	bl	8018904 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8017aba:	2300      	movs	r3, #0
 8017abc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8017abe:	4b04      	ldr	r3, [pc, #16]	; (8017ad0 <xTaskGetTickCountFromISR+0x20>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017ac4:	683b      	ldr	r3, [r7, #0]
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3708      	adds	r7, #8
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}
 8017ace:	bf00      	nop
 8017ad0:	2000c440 	.word	0x2000c440

08017ad4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b086      	sub	sp, #24
 8017ad8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017ada:	2300      	movs	r3, #0
 8017adc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017ade:	4b50      	ldr	r3, [pc, #320]	; (8017c20 <xTaskIncrementTick+0x14c>)
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	f040 808c 	bne.w	8017c00 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017ae8:	4b4e      	ldr	r3, [pc, #312]	; (8017c24 <xTaskIncrementTick+0x150>)
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	3301      	adds	r3, #1
 8017aee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017af0:	4a4c      	ldr	r2, [pc, #304]	; (8017c24 <xTaskIncrementTick+0x150>)
 8017af2:	693b      	ldr	r3, [r7, #16]
 8017af4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017af6:	693b      	ldr	r3, [r7, #16]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d11f      	bne.n	8017b3c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8017afc:	4b4a      	ldr	r3, [pc, #296]	; (8017c28 <xTaskIncrementTick+0x154>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d009      	beq.n	8017b1a <xTaskIncrementTick+0x46>
 8017b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b0a:	f383 8811 	msr	BASEPRI, r3
 8017b0e:	f3bf 8f6f 	isb	sy
 8017b12:	f3bf 8f4f 	dsb	sy
 8017b16:	603b      	str	r3, [r7, #0]
 8017b18:	e7fe      	b.n	8017b18 <xTaskIncrementTick+0x44>
 8017b1a:	4b43      	ldr	r3, [pc, #268]	; (8017c28 <xTaskIncrementTick+0x154>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	60fb      	str	r3, [r7, #12]
 8017b20:	4b42      	ldr	r3, [pc, #264]	; (8017c2c <xTaskIncrementTick+0x158>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	4a40      	ldr	r2, [pc, #256]	; (8017c28 <xTaskIncrementTick+0x154>)
 8017b26:	6013      	str	r3, [r2, #0]
 8017b28:	4a40      	ldr	r2, [pc, #256]	; (8017c2c <xTaskIncrementTick+0x158>)
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	6013      	str	r3, [r2, #0]
 8017b2e:	4b40      	ldr	r3, [pc, #256]	; (8017c30 <xTaskIncrementTick+0x15c>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	3301      	adds	r3, #1
 8017b34:	4a3e      	ldr	r2, [pc, #248]	; (8017c30 <xTaskIncrementTick+0x15c>)
 8017b36:	6013      	str	r3, [r2, #0]
 8017b38:	f000 fa7e 	bl	8018038 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017b3c:	4b3d      	ldr	r3, [pc, #244]	; (8017c34 <xTaskIncrementTick+0x160>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	693a      	ldr	r2, [r7, #16]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d34d      	bcc.n	8017be2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017b46:	4b38      	ldr	r3, [pc, #224]	; (8017c28 <xTaskIncrementTick+0x154>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d101      	bne.n	8017b54 <xTaskIncrementTick+0x80>
 8017b50:	2301      	movs	r3, #1
 8017b52:	e000      	b.n	8017b56 <xTaskIncrementTick+0x82>
 8017b54:	2300      	movs	r3, #0
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d004      	beq.n	8017b64 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b5a:	4b36      	ldr	r3, [pc, #216]	; (8017c34 <xTaskIncrementTick+0x160>)
 8017b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017b60:	601a      	str	r2, [r3, #0]
					break;
 8017b62:	e03e      	b.n	8017be2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8017b64:	4b30      	ldr	r3, [pc, #192]	; (8017c28 <xTaskIncrementTick+0x154>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	68db      	ldr	r3, [r3, #12]
 8017b6a:	68db      	ldr	r3, [r3, #12]
 8017b6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	685b      	ldr	r3, [r3, #4]
 8017b72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017b74:	693a      	ldr	r2, [r7, #16]
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d203      	bcs.n	8017b84 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017b7c:	4a2d      	ldr	r2, [pc, #180]	; (8017c34 <xTaskIncrementTick+0x160>)
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	6013      	str	r3, [r2, #0]
						break;
 8017b82:	e02e      	b.n	8017be2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b84:	68bb      	ldr	r3, [r7, #8]
 8017b86:	3304      	adds	r3, #4
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f7fe fe2e 	bl	80167ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017b8e:	68bb      	ldr	r3, [r7, #8]
 8017b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d004      	beq.n	8017ba0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	3318      	adds	r3, #24
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f7fe fe25 	bl	80167ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017ba0:	68bb      	ldr	r3, [r7, #8]
 8017ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ba4:	2201      	movs	r2, #1
 8017ba6:	409a      	lsls	r2, r3
 8017ba8:	4b23      	ldr	r3, [pc, #140]	; (8017c38 <xTaskIncrementTick+0x164>)
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	4313      	orrs	r3, r2
 8017bae:	4a22      	ldr	r2, [pc, #136]	; (8017c38 <xTaskIncrementTick+0x164>)
 8017bb0:	6013      	str	r3, [r2, #0]
 8017bb2:	68bb      	ldr	r3, [r7, #8]
 8017bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bb6:	4613      	mov	r3, r2
 8017bb8:	009b      	lsls	r3, r3, #2
 8017bba:	4413      	add	r3, r2
 8017bbc:	009b      	lsls	r3, r3, #2
 8017bbe:	4a1f      	ldr	r2, [pc, #124]	; (8017c3c <xTaskIncrementTick+0x168>)
 8017bc0:	441a      	add	r2, r3
 8017bc2:	68bb      	ldr	r3, [r7, #8]
 8017bc4:	3304      	adds	r3, #4
 8017bc6:	4619      	mov	r1, r3
 8017bc8:	4610      	mov	r0, r2
 8017bca:	f7fe fdb1 	bl	8016730 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017bce:	68bb      	ldr	r3, [r7, #8]
 8017bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bd2:	4b1b      	ldr	r3, [pc, #108]	; (8017c40 <xTaskIncrementTick+0x16c>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d3b4      	bcc.n	8017b46 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8017bdc:	2301      	movs	r3, #1
 8017bde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017be0:	e7b1      	b.n	8017b46 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017be2:	4b17      	ldr	r3, [pc, #92]	; (8017c40 <xTaskIncrementTick+0x16c>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017be8:	4914      	ldr	r1, [pc, #80]	; (8017c3c <xTaskIncrementTick+0x168>)
 8017bea:	4613      	mov	r3, r2
 8017bec:	009b      	lsls	r3, r3, #2
 8017bee:	4413      	add	r3, r2
 8017bf0:	009b      	lsls	r3, r3, #2
 8017bf2:	440b      	add	r3, r1
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	2b01      	cmp	r3, #1
 8017bf8:	d907      	bls.n	8017c0a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8017bfa:	2301      	movs	r3, #1
 8017bfc:	617b      	str	r3, [r7, #20]
 8017bfe:	e004      	b.n	8017c0a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8017c00:	4b10      	ldr	r3, [pc, #64]	; (8017c44 <xTaskIncrementTick+0x170>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	3301      	adds	r3, #1
 8017c06:	4a0f      	ldr	r2, [pc, #60]	; (8017c44 <xTaskIncrementTick+0x170>)
 8017c08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8017c0a:	4b0f      	ldr	r3, [pc, #60]	; (8017c48 <xTaskIncrementTick+0x174>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d001      	beq.n	8017c16 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8017c12:	2301      	movs	r3, #1
 8017c14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8017c16:	697b      	ldr	r3, [r7, #20]
}
 8017c18:	4618      	mov	r0, r3
 8017c1a:	3718      	adds	r7, #24
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}
 8017c20:	2000c464 	.word	0x2000c464
 8017c24:	2000c440 	.word	0x2000c440
 8017c28:	2000c3f4 	.word	0x2000c3f4
 8017c2c:	2000c3f8 	.word	0x2000c3f8
 8017c30:	2000c454 	.word	0x2000c454
 8017c34:	2000c45c 	.word	0x2000c45c
 8017c38:	2000c444 	.word	0x2000c444
 8017c3c:	2000c340 	.word	0x2000c340
 8017c40:	2000c33c 	.word	0x2000c33c
 8017c44:	2000c44c 	.word	0x2000c44c
 8017c48:	2000c450 	.word	0x2000c450

08017c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017c4c:	b480      	push	{r7}
 8017c4e:	b087      	sub	sp, #28
 8017c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017c52:	4b26      	ldr	r3, [pc, #152]	; (8017cec <vTaskSwitchContext+0xa0>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d003      	beq.n	8017c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017c5a:	4b25      	ldr	r3, [pc, #148]	; (8017cf0 <vTaskSwitchContext+0xa4>)
 8017c5c:	2201      	movs	r2, #1
 8017c5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017c60:	e03e      	b.n	8017ce0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8017c62:	4b23      	ldr	r3, [pc, #140]	; (8017cf0 <vTaskSwitchContext+0xa4>)
 8017c64:	2200      	movs	r2, #0
 8017c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8017c68:	4b22      	ldr	r3, [pc, #136]	; (8017cf4 <vTaskSwitchContext+0xa8>)
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	fab3 f383 	clz	r3, r3
 8017c74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8017c76:	7afb      	ldrb	r3, [r7, #11]
 8017c78:	f1c3 031f 	rsb	r3, r3, #31
 8017c7c:	617b      	str	r3, [r7, #20]
 8017c7e:	491e      	ldr	r1, [pc, #120]	; (8017cf8 <vTaskSwitchContext+0xac>)
 8017c80:	697a      	ldr	r2, [r7, #20]
 8017c82:	4613      	mov	r3, r2
 8017c84:	009b      	lsls	r3, r3, #2
 8017c86:	4413      	add	r3, r2
 8017c88:	009b      	lsls	r3, r3, #2
 8017c8a:	440b      	add	r3, r1
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d109      	bne.n	8017ca6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8017c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c96:	f383 8811 	msr	BASEPRI, r3
 8017c9a:	f3bf 8f6f 	isb	sy
 8017c9e:	f3bf 8f4f 	dsb	sy
 8017ca2:	607b      	str	r3, [r7, #4]
 8017ca4:	e7fe      	b.n	8017ca4 <vTaskSwitchContext+0x58>
 8017ca6:	697a      	ldr	r2, [r7, #20]
 8017ca8:	4613      	mov	r3, r2
 8017caa:	009b      	lsls	r3, r3, #2
 8017cac:	4413      	add	r3, r2
 8017cae:	009b      	lsls	r3, r3, #2
 8017cb0:	4a11      	ldr	r2, [pc, #68]	; (8017cf8 <vTaskSwitchContext+0xac>)
 8017cb2:	4413      	add	r3, r2
 8017cb4:	613b      	str	r3, [r7, #16]
 8017cb6:	693b      	ldr	r3, [r7, #16]
 8017cb8:	685b      	ldr	r3, [r3, #4]
 8017cba:	685a      	ldr	r2, [r3, #4]
 8017cbc:	693b      	ldr	r3, [r7, #16]
 8017cbe:	605a      	str	r2, [r3, #4]
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	685a      	ldr	r2, [r3, #4]
 8017cc4:	693b      	ldr	r3, [r7, #16]
 8017cc6:	3308      	adds	r3, #8
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	d104      	bne.n	8017cd6 <vTaskSwitchContext+0x8a>
 8017ccc:	693b      	ldr	r3, [r7, #16]
 8017cce:	685b      	ldr	r3, [r3, #4]
 8017cd0:	685a      	ldr	r2, [r3, #4]
 8017cd2:	693b      	ldr	r3, [r7, #16]
 8017cd4:	605a      	str	r2, [r3, #4]
 8017cd6:	693b      	ldr	r3, [r7, #16]
 8017cd8:	685b      	ldr	r3, [r3, #4]
 8017cda:	68db      	ldr	r3, [r3, #12]
 8017cdc:	4a07      	ldr	r2, [pc, #28]	; (8017cfc <vTaskSwitchContext+0xb0>)
 8017cde:	6013      	str	r3, [r2, #0]
}
 8017ce0:	bf00      	nop
 8017ce2:	371c      	adds	r7, #28
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cea:	4770      	bx	lr
 8017cec:	2000c464 	.word	0x2000c464
 8017cf0:	2000c450 	.word	0x2000c450
 8017cf4:	2000c444 	.word	0x2000c444
 8017cf8:	2000c340 	.word	0x2000c340
 8017cfc:	2000c33c 	.word	0x2000c33c

08017d00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b084      	sub	sp, #16
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
 8017d08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d109      	bne.n	8017d24 <vTaskPlaceOnEventList+0x24>
 8017d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d14:	f383 8811 	msr	BASEPRI, r3
 8017d18:	f3bf 8f6f 	isb	sy
 8017d1c:	f3bf 8f4f 	dsb	sy
 8017d20:	60fb      	str	r3, [r7, #12]
 8017d22:	e7fe      	b.n	8017d22 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017d24:	4b07      	ldr	r3, [pc, #28]	; (8017d44 <vTaskPlaceOnEventList+0x44>)
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	3318      	adds	r3, #24
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f7fe fd23 	bl	8016778 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017d32:	2101      	movs	r1, #1
 8017d34:	6838      	ldr	r0, [r7, #0]
 8017d36:	f000 fb7f 	bl	8018438 <prvAddCurrentTaskToDelayedList>
}
 8017d3a:	bf00      	nop
 8017d3c:	3710      	adds	r7, #16
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	2000c33c 	.word	0x2000c33c

08017d48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b086      	sub	sp, #24
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	68db      	ldr	r3, [r3, #12]
 8017d54:	68db      	ldr	r3, [r3, #12]
 8017d56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017d58:	693b      	ldr	r3, [r7, #16]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d109      	bne.n	8017d72 <xTaskRemoveFromEventList+0x2a>
 8017d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d62:	f383 8811 	msr	BASEPRI, r3
 8017d66:	f3bf 8f6f 	isb	sy
 8017d6a:	f3bf 8f4f 	dsb	sy
 8017d6e:	60fb      	str	r3, [r7, #12]
 8017d70:	e7fe      	b.n	8017d70 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017d72:	693b      	ldr	r3, [r7, #16]
 8017d74:	3318      	adds	r3, #24
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7fe fd37 	bl	80167ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d7c:	4b1d      	ldr	r3, [pc, #116]	; (8017df4 <xTaskRemoveFromEventList+0xac>)
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d11c      	bne.n	8017dbe <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017d84:	693b      	ldr	r3, [r7, #16]
 8017d86:	3304      	adds	r3, #4
 8017d88:	4618      	mov	r0, r3
 8017d8a:	f7fe fd2e 	bl	80167ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d92:	2201      	movs	r2, #1
 8017d94:	409a      	lsls	r2, r3
 8017d96:	4b18      	ldr	r3, [pc, #96]	; (8017df8 <xTaskRemoveFromEventList+0xb0>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	4313      	orrs	r3, r2
 8017d9c:	4a16      	ldr	r2, [pc, #88]	; (8017df8 <xTaskRemoveFromEventList+0xb0>)
 8017d9e:	6013      	str	r3, [r2, #0]
 8017da0:	693b      	ldr	r3, [r7, #16]
 8017da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017da4:	4613      	mov	r3, r2
 8017da6:	009b      	lsls	r3, r3, #2
 8017da8:	4413      	add	r3, r2
 8017daa:	009b      	lsls	r3, r3, #2
 8017dac:	4a13      	ldr	r2, [pc, #76]	; (8017dfc <xTaskRemoveFromEventList+0xb4>)
 8017dae:	441a      	add	r2, r3
 8017db0:	693b      	ldr	r3, [r7, #16]
 8017db2:	3304      	adds	r3, #4
 8017db4:	4619      	mov	r1, r3
 8017db6:	4610      	mov	r0, r2
 8017db8:	f7fe fcba 	bl	8016730 <vListInsertEnd>
 8017dbc:	e005      	b.n	8017dca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017dbe:	693b      	ldr	r3, [r7, #16]
 8017dc0:	3318      	adds	r3, #24
 8017dc2:	4619      	mov	r1, r3
 8017dc4:	480e      	ldr	r0, [pc, #56]	; (8017e00 <xTaskRemoveFromEventList+0xb8>)
 8017dc6:	f7fe fcb3 	bl	8016730 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dce:	4b0d      	ldr	r3, [pc, #52]	; (8017e04 <xTaskRemoveFromEventList+0xbc>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dd4:	429a      	cmp	r2, r3
 8017dd6:	d905      	bls.n	8017de4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017dd8:	2301      	movs	r3, #1
 8017dda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017ddc:	4b0a      	ldr	r3, [pc, #40]	; (8017e08 <xTaskRemoveFromEventList+0xc0>)
 8017dde:	2201      	movs	r2, #1
 8017de0:	601a      	str	r2, [r3, #0]
 8017de2:	e001      	b.n	8017de8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8017de4:	2300      	movs	r3, #0
 8017de6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8017de8:	697b      	ldr	r3, [r7, #20]
}
 8017dea:	4618      	mov	r0, r3
 8017dec:	3718      	adds	r7, #24
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd80      	pop	{r7, pc}
 8017df2:	bf00      	nop
 8017df4:	2000c464 	.word	0x2000c464
 8017df8:	2000c444 	.word	0x2000c444
 8017dfc:	2000c340 	.word	0x2000c340
 8017e00:	2000c3fc 	.word	0x2000c3fc
 8017e04:	2000c33c 	.word	0x2000c33c
 8017e08:	2000c450 	.word	0x2000c450

08017e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017e0c:	b480      	push	{r7}
 8017e0e:	b083      	sub	sp, #12
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017e14:	4b06      	ldr	r3, [pc, #24]	; (8017e30 <vTaskInternalSetTimeOutState+0x24>)
 8017e16:	681a      	ldr	r2, [r3, #0]
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017e1c:	4b05      	ldr	r3, [pc, #20]	; (8017e34 <vTaskInternalSetTimeOutState+0x28>)
 8017e1e:	681a      	ldr	r2, [r3, #0]
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	605a      	str	r2, [r3, #4]
}
 8017e24:	bf00      	nop
 8017e26:	370c      	adds	r7, #12
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2e:	4770      	bx	lr
 8017e30:	2000c454 	.word	0x2000c454
 8017e34:	2000c440 	.word	0x2000c440

08017e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	b088      	sub	sp, #32
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]
 8017e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d109      	bne.n	8017e5c <xTaskCheckForTimeOut+0x24>
 8017e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e4c:	f383 8811 	msr	BASEPRI, r3
 8017e50:	f3bf 8f6f 	isb	sy
 8017e54:	f3bf 8f4f 	dsb	sy
 8017e58:	613b      	str	r3, [r7, #16]
 8017e5a:	e7fe      	b.n	8017e5a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d109      	bne.n	8017e76 <xTaskCheckForTimeOut+0x3e>
 8017e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e66:	f383 8811 	msr	BASEPRI, r3
 8017e6a:	f3bf 8f6f 	isb	sy
 8017e6e:	f3bf 8f4f 	dsb	sy
 8017e72:	60fb      	str	r3, [r7, #12]
 8017e74:	e7fe      	b.n	8017e74 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8017e76:	f000 fc69 	bl	801874c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017e7a:	4b1d      	ldr	r3, [pc, #116]	; (8017ef0 <xTaskCheckForTimeOut+0xb8>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	685b      	ldr	r3, [r3, #4]
 8017e84:	69ba      	ldr	r2, [r7, #24]
 8017e86:	1ad3      	subs	r3, r2, r3
 8017e88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017e8a:	683b      	ldr	r3, [r7, #0]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017e92:	d102      	bne.n	8017e9a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017e94:	2300      	movs	r3, #0
 8017e96:	61fb      	str	r3, [r7, #28]
 8017e98:	e023      	b.n	8017ee2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	681a      	ldr	r2, [r3, #0]
 8017e9e:	4b15      	ldr	r3, [pc, #84]	; (8017ef4 <xTaskCheckForTimeOut+0xbc>)
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d007      	beq.n	8017eb6 <xTaskCheckForTimeOut+0x7e>
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	685b      	ldr	r3, [r3, #4]
 8017eaa:	69ba      	ldr	r2, [r7, #24]
 8017eac:	429a      	cmp	r2, r3
 8017eae:	d302      	bcc.n	8017eb6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017eb0:	2301      	movs	r3, #1
 8017eb2:	61fb      	str	r3, [r7, #28]
 8017eb4:	e015      	b.n	8017ee2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	697a      	ldr	r2, [r7, #20]
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	d20b      	bcs.n	8017ed8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017ec0:	683b      	ldr	r3, [r7, #0]
 8017ec2:	681a      	ldr	r2, [r3, #0]
 8017ec4:	697b      	ldr	r3, [r7, #20]
 8017ec6:	1ad2      	subs	r2, r2, r3
 8017ec8:	683b      	ldr	r3, [r7, #0]
 8017eca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017ecc:	6878      	ldr	r0, [r7, #4]
 8017ece:	f7ff ff9d 	bl	8017e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	61fb      	str	r3, [r7, #28]
 8017ed6:	e004      	b.n	8017ee2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	2200      	movs	r2, #0
 8017edc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017ede:	2301      	movs	r3, #1
 8017ee0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017ee2:	f000 fc61 	bl	80187a8 <vPortExitCritical>

	return xReturn;
 8017ee6:	69fb      	ldr	r3, [r7, #28]
}
 8017ee8:	4618      	mov	r0, r3
 8017eea:	3720      	adds	r7, #32
 8017eec:	46bd      	mov	sp, r7
 8017eee:	bd80      	pop	{r7, pc}
 8017ef0:	2000c440 	.word	0x2000c440
 8017ef4:	2000c454 	.word	0x2000c454

08017ef8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017ef8:	b480      	push	{r7}
 8017efa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017efc:	4b03      	ldr	r3, [pc, #12]	; (8017f0c <vTaskMissedYield+0x14>)
 8017efe:	2201      	movs	r2, #1
 8017f00:	601a      	str	r2, [r3, #0]
}
 8017f02:	bf00      	nop
 8017f04:	46bd      	mov	sp, r7
 8017f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0a:	4770      	bx	lr
 8017f0c:	2000c450 	.word	0x2000c450

08017f10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b082      	sub	sp, #8
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017f18:	f000 f852 	bl	8017fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017f1c:	4b06      	ldr	r3, [pc, #24]	; (8017f38 <prvIdleTask+0x28>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	2b01      	cmp	r3, #1
 8017f22:	d9f9      	bls.n	8017f18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017f24:	4b05      	ldr	r3, [pc, #20]	; (8017f3c <prvIdleTask+0x2c>)
 8017f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f2a:	601a      	str	r2, [r3, #0]
 8017f2c:	f3bf 8f4f 	dsb	sy
 8017f30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017f34:	e7f0      	b.n	8017f18 <prvIdleTask+0x8>
 8017f36:	bf00      	nop
 8017f38:	2000c340 	.word	0x2000c340
 8017f3c:	e000ed04 	.word	0xe000ed04

08017f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b082      	sub	sp, #8
 8017f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017f46:	2300      	movs	r3, #0
 8017f48:	607b      	str	r3, [r7, #4]
 8017f4a:	e00c      	b.n	8017f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017f4c:	687a      	ldr	r2, [r7, #4]
 8017f4e:	4613      	mov	r3, r2
 8017f50:	009b      	lsls	r3, r3, #2
 8017f52:	4413      	add	r3, r2
 8017f54:	009b      	lsls	r3, r3, #2
 8017f56:	4a12      	ldr	r2, [pc, #72]	; (8017fa0 <prvInitialiseTaskLists+0x60>)
 8017f58:	4413      	add	r3, r2
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f7fe fbbb 	bl	80166d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	3301      	adds	r3, #1
 8017f64:	607b      	str	r3, [r7, #4]
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	2b06      	cmp	r3, #6
 8017f6a:	d9ef      	bls.n	8017f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017f6c:	480d      	ldr	r0, [pc, #52]	; (8017fa4 <prvInitialiseTaskLists+0x64>)
 8017f6e:	f7fe fbb2 	bl	80166d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017f72:	480d      	ldr	r0, [pc, #52]	; (8017fa8 <prvInitialiseTaskLists+0x68>)
 8017f74:	f7fe fbaf 	bl	80166d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017f78:	480c      	ldr	r0, [pc, #48]	; (8017fac <prvInitialiseTaskLists+0x6c>)
 8017f7a:	f7fe fbac 	bl	80166d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017f7e:	480c      	ldr	r0, [pc, #48]	; (8017fb0 <prvInitialiseTaskLists+0x70>)
 8017f80:	f7fe fba9 	bl	80166d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017f84:	480b      	ldr	r0, [pc, #44]	; (8017fb4 <prvInitialiseTaskLists+0x74>)
 8017f86:	f7fe fba6 	bl	80166d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017f8a:	4b0b      	ldr	r3, [pc, #44]	; (8017fb8 <prvInitialiseTaskLists+0x78>)
 8017f8c:	4a05      	ldr	r2, [pc, #20]	; (8017fa4 <prvInitialiseTaskLists+0x64>)
 8017f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017f90:	4b0a      	ldr	r3, [pc, #40]	; (8017fbc <prvInitialiseTaskLists+0x7c>)
 8017f92:	4a05      	ldr	r2, [pc, #20]	; (8017fa8 <prvInitialiseTaskLists+0x68>)
 8017f94:	601a      	str	r2, [r3, #0]
}
 8017f96:	bf00      	nop
 8017f98:	3708      	adds	r7, #8
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}
 8017f9e:	bf00      	nop
 8017fa0:	2000c340 	.word	0x2000c340
 8017fa4:	2000c3cc 	.word	0x2000c3cc
 8017fa8:	2000c3e0 	.word	0x2000c3e0
 8017fac:	2000c3fc 	.word	0x2000c3fc
 8017fb0:	2000c410 	.word	0x2000c410
 8017fb4:	2000c428 	.word	0x2000c428
 8017fb8:	2000c3f4 	.word	0x2000c3f4
 8017fbc:	2000c3f8 	.word	0x2000c3f8

08017fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b082      	sub	sp, #8
 8017fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017fc6:	e019      	b.n	8017ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017fc8:	f000 fbc0 	bl	801874c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8017fcc:	4b0f      	ldr	r3, [pc, #60]	; (801800c <prvCheckTasksWaitingTermination+0x4c>)
 8017fce:	68db      	ldr	r3, [r3, #12]
 8017fd0:	68db      	ldr	r3, [r3, #12]
 8017fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	3304      	adds	r3, #4
 8017fd8:	4618      	mov	r0, r3
 8017fda:	f7fe fc06 	bl	80167ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017fde:	4b0c      	ldr	r3, [pc, #48]	; (8018010 <prvCheckTasksWaitingTermination+0x50>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	3b01      	subs	r3, #1
 8017fe4:	4a0a      	ldr	r2, [pc, #40]	; (8018010 <prvCheckTasksWaitingTermination+0x50>)
 8017fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017fe8:	4b0a      	ldr	r3, [pc, #40]	; (8018014 <prvCheckTasksWaitingTermination+0x54>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	3b01      	subs	r3, #1
 8017fee:	4a09      	ldr	r2, [pc, #36]	; (8018014 <prvCheckTasksWaitingTermination+0x54>)
 8017ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017ff2:	f000 fbd9 	bl	80187a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	f000 f80e 	bl	8018018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017ffc:	4b05      	ldr	r3, [pc, #20]	; (8018014 <prvCheckTasksWaitingTermination+0x54>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d1e1      	bne.n	8017fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018004:	bf00      	nop
 8018006:	3708      	adds	r7, #8
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}
 801800c:	2000c410 	.word	0x2000c410
 8018010:	2000c43c 	.word	0x2000c43c
 8018014:	2000c424 	.word	0x2000c424

08018018 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018018:	b580      	push	{r7, lr}
 801801a:	b082      	sub	sp, #8
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018024:	4618      	mov	r0, r3
 8018026:	f000 fd6d 	bl	8018b04 <vPortFree>
			vPortFree( pxTCB );
 801802a:	6878      	ldr	r0, [r7, #4]
 801802c:	f000 fd6a 	bl	8018b04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018030:	bf00      	nop
 8018032:	3708      	adds	r7, #8
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}

08018038 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018038:	b480      	push	{r7}
 801803a:	b083      	sub	sp, #12
 801803c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801803e:	4b0f      	ldr	r3, [pc, #60]	; (801807c <prvResetNextTaskUnblockTime+0x44>)
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d101      	bne.n	801804c <prvResetNextTaskUnblockTime+0x14>
 8018048:	2301      	movs	r3, #1
 801804a:	e000      	b.n	801804e <prvResetNextTaskUnblockTime+0x16>
 801804c:	2300      	movs	r3, #0
 801804e:	2b00      	cmp	r3, #0
 8018050:	d004      	beq.n	801805c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018052:	4b0b      	ldr	r3, [pc, #44]	; (8018080 <prvResetNextTaskUnblockTime+0x48>)
 8018054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018058:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801805a:	e008      	b.n	801806e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801805c:	4b07      	ldr	r3, [pc, #28]	; (801807c <prvResetNextTaskUnblockTime+0x44>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	68db      	ldr	r3, [r3, #12]
 8018062:	68db      	ldr	r3, [r3, #12]
 8018064:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	4a05      	ldr	r2, [pc, #20]	; (8018080 <prvResetNextTaskUnblockTime+0x48>)
 801806c:	6013      	str	r3, [r2, #0]
}
 801806e:	bf00      	nop
 8018070:	370c      	adds	r7, #12
 8018072:	46bd      	mov	sp, r7
 8018074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018078:	4770      	bx	lr
 801807a:	bf00      	nop
 801807c:	2000c3f4 	.word	0x2000c3f4
 8018080:	2000c45c 	.word	0x2000c45c

08018084 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018084:	b480      	push	{r7}
 8018086:	b083      	sub	sp, #12
 8018088:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801808a:	4b0b      	ldr	r3, [pc, #44]	; (80180b8 <xTaskGetSchedulerState+0x34>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d102      	bne.n	8018098 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018092:	2301      	movs	r3, #1
 8018094:	607b      	str	r3, [r7, #4]
 8018096:	e008      	b.n	80180aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018098:	4b08      	ldr	r3, [pc, #32]	; (80180bc <xTaskGetSchedulerState+0x38>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d102      	bne.n	80180a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80180a0:	2302      	movs	r3, #2
 80180a2:	607b      	str	r3, [r7, #4]
 80180a4:	e001      	b.n	80180aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80180a6:	2300      	movs	r3, #0
 80180a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80180aa:	687b      	ldr	r3, [r7, #4]
	}
 80180ac:	4618      	mov	r0, r3
 80180ae:	370c      	adds	r7, #12
 80180b0:	46bd      	mov	sp, r7
 80180b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b6:	4770      	bx	lr
 80180b8:	2000c448 	.word	0x2000c448
 80180bc:	2000c464 	.word	0x2000c464

080180c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b084      	sub	sp, #16
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80180cc:	2300      	movs	r3, #0
 80180ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d06e      	beq.n	80181b4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80180d6:	68bb      	ldr	r3, [r7, #8]
 80180d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180da:	4b39      	ldr	r3, [pc, #228]	; (80181c0 <xTaskPriorityInherit+0x100>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d25e      	bcs.n	80181a2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80180e4:	68bb      	ldr	r3, [r7, #8]
 80180e6:	699b      	ldr	r3, [r3, #24]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	db06      	blt.n	80180fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80180ec:	4b34      	ldr	r3, [pc, #208]	; (80181c0 <xTaskPriorityInherit+0x100>)
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180f2:	f1c3 0207 	rsb	r2, r3, #7
 80180f6:	68bb      	ldr	r3, [r7, #8]
 80180f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80180fa:	68bb      	ldr	r3, [r7, #8]
 80180fc:	6959      	ldr	r1, [r3, #20]
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018102:	4613      	mov	r3, r2
 8018104:	009b      	lsls	r3, r3, #2
 8018106:	4413      	add	r3, r2
 8018108:	009b      	lsls	r3, r3, #2
 801810a:	4a2e      	ldr	r2, [pc, #184]	; (80181c4 <xTaskPriorityInherit+0x104>)
 801810c:	4413      	add	r3, r2
 801810e:	4299      	cmp	r1, r3
 8018110:	d101      	bne.n	8018116 <xTaskPriorityInherit+0x56>
 8018112:	2301      	movs	r3, #1
 8018114:	e000      	b.n	8018118 <xTaskPriorityInherit+0x58>
 8018116:	2300      	movs	r3, #0
 8018118:	2b00      	cmp	r3, #0
 801811a:	d03a      	beq.n	8018192 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801811c:	68bb      	ldr	r3, [r7, #8]
 801811e:	3304      	adds	r3, #4
 8018120:	4618      	mov	r0, r3
 8018122:	f7fe fb62 	bl	80167ea <uxListRemove>
 8018126:	4603      	mov	r3, r0
 8018128:	2b00      	cmp	r3, #0
 801812a:	d115      	bne.n	8018158 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018130:	4924      	ldr	r1, [pc, #144]	; (80181c4 <xTaskPriorityInherit+0x104>)
 8018132:	4613      	mov	r3, r2
 8018134:	009b      	lsls	r3, r3, #2
 8018136:	4413      	add	r3, r2
 8018138:	009b      	lsls	r3, r3, #2
 801813a:	440b      	add	r3, r1
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d10a      	bne.n	8018158 <xTaskPriorityInherit+0x98>
 8018142:	68bb      	ldr	r3, [r7, #8]
 8018144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018146:	2201      	movs	r2, #1
 8018148:	fa02 f303 	lsl.w	r3, r2, r3
 801814c:	43da      	mvns	r2, r3
 801814e:	4b1e      	ldr	r3, [pc, #120]	; (80181c8 <xTaskPriorityInherit+0x108>)
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	4013      	ands	r3, r2
 8018154:	4a1c      	ldr	r2, [pc, #112]	; (80181c8 <xTaskPriorityInherit+0x108>)
 8018156:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018158:	4b19      	ldr	r3, [pc, #100]	; (80181c0 <xTaskPriorityInherit+0x100>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801815e:	68bb      	ldr	r3, [r7, #8]
 8018160:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018162:	68bb      	ldr	r3, [r7, #8]
 8018164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018166:	2201      	movs	r2, #1
 8018168:	409a      	lsls	r2, r3
 801816a:	4b17      	ldr	r3, [pc, #92]	; (80181c8 <xTaskPriorityInherit+0x108>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	4313      	orrs	r3, r2
 8018170:	4a15      	ldr	r2, [pc, #84]	; (80181c8 <xTaskPriorityInherit+0x108>)
 8018172:	6013      	str	r3, [r2, #0]
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018178:	4613      	mov	r3, r2
 801817a:	009b      	lsls	r3, r3, #2
 801817c:	4413      	add	r3, r2
 801817e:	009b      	lsls	r3, r3, #2
 8018180:	4a10      	ldr	r2, [pc, #64]	; (80181c4 <xTaskPriorityInherit+0x104>)
 8018182:	441a      	add	r2, r3
 8018184:	68bb      	ldr	r3, [r7, #8]
 8018186:	3304      	adds	r3, #4
 8018188:	4619      	mov	r1, r3
 801818a:	4610      	mov	r0, r2
 801818c:	f7fe fad0 	bl	8016730 <vListInsertEnd>
 8018190:	e004      	b.n	801819c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018192:	4b0b      	ldr	r3, [pc, #44]	; (80181c0 <xTaskPriorityInherit+0x100>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018198:	68bb      	ldr	r3, [r7, #8]
 801819a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801819c:	2301      	movs	r3, #1
 801819e:	60fb      	str	r3, [r7, #12]
 80181a0:	e008      	b.n	80181b4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80181a2:	68bb      	ldr	r3, [r7, #8]
 80181a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80181a6:	4b06      	ldr	r3, [pc, #24]	; (80181c0 <xTaskPriorityInherit+0x100>)
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181ac:	429a      	cmp	r2, r3
 80181ae:	d201      	bcs.n	80181b4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80181b0:	2301      	movs	r3, #1
 80181b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80181b4:	68fb      	ldr	r3, [r7, #12]
	}
 80181b6:	4618      	mov	r0, r3
 80181b8:	3710      	adds	r7, #16
 80181ba:	46bd      	mov	sp, r7
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	bf00      	nop
 80181c0:	2000c33c 	.word	0x2000c33c
 80181c4:	2000c340 	.word	0x2000c340
 80181c8:	2000c444 	.word	0x2000c444

080181cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b086      	sub	sp, #24
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80181d8:	2300      	movs	r3, #0
 80181da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d06c      	beq.n	80182bc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80181e2:	4b39      	ldr	r3, [pc, #228]	; (80182c8 <xTaskPriorityDisinherit+0xfc>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	693a      	ldr	r2, [r7, #16]
 80181e8:	429a      	cmp	r2, r3
 80181ea:	d009      	beq.n	8018200 <xTaskPriorityDisinherit+0x34>
 80181ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181f0:	f383 8811 	msr	BASEPRI, r3
 80181f4:	f3bf 8f6f 	isb	sy
 80181f8:	f3bf 8f4f 	dsb	sy
 80181fc:	60fb      	str	r3, [r7, #12]
 80181fe:	e7fe      	b.n	80181fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8018200:	693b      	ldr	r3, [r7, #16]
 8018202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018204:	2b00      	cmp	r3, #0
 8018206:	d109      	bne.n	801821c <xTaskPriorityDisinherit+0x50>
 8018208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801820c:	f383 8811 	msr	BASEPRI, r3
 8018210:	f3bf 8f6f 	isb	sy
 8018214:	f3bf 8f4f 	dsb	sy
 8018218:	60bb      	str	r3, [r7, #8]
 801821a:	e7fe      	b.n	801821a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018220:	1e5a      	subs	r2, r3, #1
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018226:	693b      	ldr	r3, [r7, #16]
 8018228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801822a:	693b      	ldr	r3, [r7, #16]
 801822c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801822e:	429a      	cmp	r2, r3
 8018230:	d044      	beq.n	80182bc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018236:	2b00      	cmp	r3, #0
 8018238:	d140      	bne.n	80182bc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	3304      	adds	r3, #4
 801823e:	4618      	mov	r0, r3
 8018240:	f7fe fad3 	bl	80167ea <uxListRemove>
 8018244:	4603      	mov	r3, r0
 8018246:	2b00      	cmp	r3, #0
 8018248:	d115      	bne.n	8018276 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801824a:	693b      	ldr	r3, [r7, #16]
 801824c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801824e:	491f      	ldr	r1, [pc, #124]	; (80182cc <xTaskPriorityDisinherit+0x100>)
 8018250:	4613      	mov	r3, r2
 8018252:	009b      	lsls	r3, r3, #2
 8018254:	4413      	add	r3, r2
 8018256:	009b      	lsls	r3, r3, #2
 8018258:	440b      	add	r3, r1
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d10a      	bne.n	8018276 <xTaskPriorityDisinherit+0xaa>
 8018260:	693b      	ldr	r3, [r7, #16]
 8018262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018264:	2201      	movs	r2, #1
 8018266:	fa02 f303 	lsl.w	r3, r2, r3
 801826a:	43da      	mvns	r2, r3
 801826c:	4b18      	ldr	r3, [pc, #96]	; (80182d0 <xTaskPriorityDisinherit+0x104>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	4013      	ands	r3, r2
 8018272:	4a17      	ldr	r2, [pc, #92]	; (80182d0 <xTaskPriorityDisinherit+0x104>)
 8018274:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018276:	693b      	ldr	r3, [r7, #16]
 8018278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801827a:	693b      	ldr	r3, [r7, #16]
 801827c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801827e:	693b      	ldr	r3, [r7, #16]
 8018280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018282:	f1c3 0207 	rsb	r2, r3, #7
 8018286:	693b      	ldr	r3, [r7, #16]
 8018288:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801828a:	693b      	ldr	r3, [r7, #16]
 801828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801828e:	2201      	movs	r2, #1
 8018290:	409a      	lsls	r2, r3
 8018292:	4b0f      	ldr	r3, [pc, #60]	; (80182d0 <xTaskPriorityDisinherit+0x104>)
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	4313      	orrs	r3, r2
 8018298:	4a0d      	ldr	r2, [pc, #52]	; (80182d0 <xTaskPriorityDisinherit+0x104>)
 801829a:	6013      	str	r3, [r2, #0]
 801829c:	693b      	ldr	r3, [r7, #16]
 801829e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182a0:	4613      	mov	r3, r2
 80182a2:	009b      	lsls	r3, r3, #2
 80182a4:	4413      	add	r3, r2
 80182a6:	009b      	lsls	r3, r3, #2
 80182a8:	4a08      	ldr	r2, [pc, #32]	; (80182cc <xTaskPriorityDisinherit+0x100>)
 80182aa:	441a      	add	r2, r3
 80182ac:	693b      	ldr	r3, [r7, #16]
 80182ae:	3304      	adds	r3, #4
 80182b0:	4619      	mov	r1, r3
 80182b2:	4610      	mov	r0, r2
 80182b4:	f7fe fa3c 	bl	8016730 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80182b8:	2301      	movs	r3, #1
 80182ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80182bc:	697b      	ldr	r3, [r7, #20]
	}
 80182be:	4618      	mov	r0, r3
 80182c0:	3718      	adds	r7, #24
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd80      	pop	{r7, pc}
 80182c6:	bf00      	nop
 80182c8:	2000c33c 	.word	0x2000c33c
 80182cc:	2000c340 	.word	0x2000c340
 80182d0:	2000c444 	.word	0x2000c444

080182d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b088      	sub	sp, #32
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80182e2:	2301      	movs	r3, #1
 80182e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	f000 8086 	beq.w	80183fa <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80182ee:	69bb      	ldr	r3, [r7, #24]
 80182f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d109      	bne.n	801830a <vTaskPriorityDisinheritAfterTimeout+0x36>
 80182f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182fa:	f383 8811 	msr	BASEPRI, r3
 80182fe:	f3bf 8f6f 	isb	sy
 8018302:	f3bf 8f4f 	dsb	sy
 8018306:	60fb      	str	r3, [r7, #12]
 8018308:	e7fe      	b.n	8018308 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801830a:	69bb      	ldr	r3, [r7, #24]
 801830c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801830e:	683a      	ldr	r2, [r7, #0]
 8018310:	429a      	cmp	r2, r3
 8018312:	d902      	bls.n	801831a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018314:	683b      	ldr	r3, [r7, #0]
 8018316:	61fb      	str	r3, [r7, #28]
 8018318:	e002      	b.n	8018320 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801831a:	69bb      	ldr	r3, [r7, #24]
 801831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801831e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018320:	69bb      	ldr	r3, [r7, #24]
 8018322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018324:	69fa      	ldr	r2, [r7, #28]
 8018326:	429a      	cmp	r2, r3
 8018328:	d067      	beq.n	80183fa <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801832a:	69bb      	ldr	r3, [r7, #24]
 801832c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801832e:	697a      	ldr	r2, [r7, #20]
 8018330:	429a      	cmp	r2, r3
 8018332:	d162      	bne.n	80183fa <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018334:	4b33      	ldr	r3, [pc, #204]	; (8018404 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	69ba      	ldr	r2, [r7, #24]
 801833a:	429a      	cmp	r2, r3
 801833c:	d109      	bne.n	8018352 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018342:	f383 8811 	msr	BASEPRI, r3
 8018346:	f3bf 8f6f 	isb	sy
 801834a:	f3bf 8f4f 	dsb	sy
 801834e:	60bb      	str	r3, [r7, #8]
 8018350:	e7fe      	b.n	8018350 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018352:	69bb      	ldr	r3, [r7, #24]
 8018354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018356:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018358:	69bb      	ldr	r3, [r7, #24]
 801835a:	69fa      	ldr	r2, [r7, #28]
 801835c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801835e:	69bb      	ldr	r3, [r7, #24]
 8018360:	699b      	ldr	r3, [r3, #24]
 8018362:	2b00      	cmp	r3, #0
 8018364:	db04      	blt.n	8018370 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018366:	69fb      	ldr	r3, [r7, #28]
 8018368:	f1c3 0207 	rsb	r2, r3, #7
 801836c:	69bb      	ldr	r3, [r7, #24]
 801836e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018370:	69bb      	ldr	r3, [r7, #24]
 8018372:	6959      	ldr	r1, [r3, #20]
 8018374:	693a      	ldr	r2, [r7, #16]
 8018376:	4613      	mov	r3, r2
 8018378:	009b      	lsls	r3, r3, #2
 801837a:	4413      	add	r3, r2
 801837c:	009b      	lsls	r3, r3, #2
 801837e:	4a22      	ldr	r2, [pc, #136]	; (8018408 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8018380:	4413      	add	r3, r2
 8018382:	4299      	cmp	r1, r3
 8018384:	d101      	bne.n	801838a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8018386:	2301      	movs	r3, #1
 8018388:	e000      	b.n	801838c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 801838a:	2300      	movs	r3, #0
 801838c:	2b00      	cmp	r3, #0
 801838e:	d034      	beq.n	80183fa <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018390:	69bb      	ldr	r3, [r7, #24]
 8018392:	3304      	adds	r3, #4
 8018394:	4618      	mov	r0, r3
 8018396:	f7fe fa28 	bl	80167ea <uxListRemove>
 801839a:	4603      	mov	r3, r0
 801839c:	2b00      	cmp	r3, #0
 801839e:	d115      	bne.n	80183cc <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80183a0:	69bb      	ldr	r3, [r7, #24]
 80183a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183a4:	4918      	ldr	r1, [pc, #96]	; (8018408 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80183a6:	4613      	mov	r3, r2
 80183a8:	009b      	lsls	r3, r3, #2
 80183aa:	4413      	add	r3, r2
 80183ac:	009b      	lsls	r3, r3, #2
 80183ae:	440b      	add	r3, r1
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d10a      	bne.n	80183cc <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80183b6:	69bb      	ldr	r3, [r7, #24]
 80183b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183ba:	2201      	movs	r2, #1
 80183bc:	fa02 f303 	lsl.w	r3, r2, r3
 80183c0:	43da      	mvns	r2, r3
 80183c2:	4b12      	ldr	r3, [pc, #72]	; (801840c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	4013      	ands	r3, r2
 80183c8:	4a10      	ldr	r2, [pc, #64]	; (801840c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80183ca:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80183cc:	69bb      	ldr	r3, [r7, #24]
 80183ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183d0:	2201      	movs	r2, #1
 80183d2:	409a      	lsls	r2, r3
 80183d4:	4b0d      	ldr	r3, [pc, #52]	; (801840c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	4313      	orrs	r3, r2
 80183da:	4a0c      	ldr	r2, [pc, #48]	; (801840c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80183dc:	6013      	str	r3, [r2, #0]
 80183de:	69bb      	ldr	r3, [r7, #24]
 80183e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183e2:	4613      	mov	r3, r2
 80183e4:	009b      	lsls	r3, r3, #2
 80183e6:	4413      	add	r3, r2
 80183e8:	009b      	lsls	r3, r3, #2
 80183ea:	4a07      	ldr	r2, [pc, #28]	; (8018408 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80183ec:	441a      	add	r2, r3
 80183ee:	69bb      	ldr	r3, [r7, #24]
 80183f0:	3304      	adds	r3, #4
 80183f2:	4619      	mov	r1, r3
 80183f4:	4610      	mov	r0, r2
 80183f6:	f7fe f99b 	bl	8016730 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80183fa:	bf00      	nop
 80183fc:	3720      	adds	r7, #32
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}
 8018402:	bf00      	nop
 8018404:	2000c33c 	.word	0x2000c33c
 8018408:	2000c340 	.word	0x2000c340
 801840c:	2000c444 	.word	0x2000c444

08018410 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8018410:	b480      	push	{r7}
 8018412:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018414:	4b07      	ldr	r3, [pc, #28]	; (8018434 <pvTaskIncrementMutexHeldCount+0x24>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d004      	beq.n	8018426 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801841c:	4b05      	ldr	r3, [pc, #20]	; (8018434 <pvTaskIncrementMutexHeldCount+0x24>)
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8018422:	3201      	adds	r2, #1
 8018424:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8018426:	4b03      	ldr	r3, [pc, #12]	; (8018434 <pvTaskIncrementMutexHeldCount+0x24>)
 8018428:	681b      	ldr	r3, [r3, #0]
	}
 801842a:	4618      	mov	r0, r3
 801842c:	46bd      	mov	sp, r7
 801842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018432:	4770      	bx	lr
 8018434:	2000c33c 	.word	0x2000c33c

08018438 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018442:	4b29      	ldr	r3, [pc, #164]	; (80184e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018448:	4b28      	ldr	r3, [pc, #160]	; (80184ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	3304      	adds	r3, #4
 801844e:	4618      	mov	r0, r3
 8018450:	f7fe f9cb 	bl	80167ea <uxListRemove>
 8018454:	4603      	mov	r3, r0
 8018456:	2b00      	cmp	r3, #0
 8018458:	d10b      	bne.n	8018472 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801845a:	4b24      	ldr	r3, [pc, #144]	; (80184ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018460:	2201      	movs	r2, #1
 8018462:	fa02 f303 	lsl.w	r3, r2, r3
 8018466:	43da      	mvns	r2, r3
 8018468:	4b21      	ldr	r3, [pc, #132]	; (80184f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	4013      	ands	r3, r2
 801846e:	4a20      	ldr	r2, [pc, #128]	; (80184f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018470:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018478:	d10a      	bne.n	8018490 <prvAddCurrentTaskToDelayedList+0x58>
 801847a:	683b      	ldr	r3, [r7, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d007      	beq.n	8018490 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018480:	4b1a      	ldr	r3, [pc, #104]	; (80184ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	3304      	adds	r3, #4
 8018486:	4619      	mov	r1, r3
 8018488:	481a      	ldr	r0, [pc, #104]	; (80184f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801848a:	f7fe f951 	bl	8016730 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801848e:	e026      	b.n	80184de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018490:	68fa      	ldr	r2, [r7, #12]
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	4413      	add	r3, r2
 8018496:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018498:	4b14      	ldr	r3, [pc, #80]	; (80184ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	68ba      	ldr	r2, [r7, #8]
 801849e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80184a0:	68ba      	ldr	r2, [r7, #8]
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d209      	bcs.n	80184bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80184a8:	4b13      	ldr	r3, [pc, #76]	; (80184f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80184aa:	681a      	ldr	r2, [r3, #0]
 80184ac:	4b0f      	ldr	r3, [pc, #60]	; (80184ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	3304      	adds	r3, #4
 80184b2:	4619      	mov	r1, r3
 80184b4:	4610      	mov	r0, r2
 80184b6:	f7fe f95f 	bl	8016778 <vListInsert>
}
 80184ba:	e010      	b.n	80184de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80184bc:	4b0f      	ldr	r3, [pc, #60]	; (80184fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80184be:	681a      	ldr	r2, [r3, #0]
 80184c0:	4b0a      	ldr	r3, [pc, #40]	; (80184ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	3304      	adds	r3, #4
 80184c6:	4619      	mov	r1, r3
 80184c8:	4610      	mov	r0, r2
 80184ca:	f7fe f955 	bl	8016778 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80184ce:	4b0c      	ldr	r3, [pc, #48]	; (8018500 <prvAddCurrentTaskToDelayedList+0xc8>)
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	68ba      	ldr	r2, [r7, #8]
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d202      	bcs.n	80184de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80184d8:	4a09      	ldr	r2, [pc, #36]	; (8018500 <prvAddCurrentTaskToDelayedList+0xc8>)
 80184da:	68bb      	ldr	r3, [r7, #8]
 80184dc:	6013      	str	r3, [r2, #0]
}
 80184de:	bf00      	nop
 80184e0:	3710      	adds	r7, #16
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}
 80184e6:	bf00      	nop
 80184e8:	2000c440 	.word	0x2000c440
 80184ec:	2000c33c 	.word	0x2000c33c
 80184f0:	2000c444 	.word	0x2000c444
 80184f4:	2000c428 	.word	0x2000c428
 80184f8:	2000c3f8 	.word	0x2000c3f8
 80184fc:	2000c3f4 	.word	0x2000c3f4
 8018500:	2000c45c 	.word	0x2000c45c

08018504 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018504:	b480      	push	{r7}
 8018506:	b085      	sub	sp, #20
 8018508:	af00      	add	r7, sp, #0
 801850a:	60f8      	str	r0, [r7, #12]
 801850c:	60b9      	str	r1, [r7, #8]
 801850e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	3b04      	subs	r3, #4
 8018514:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801851c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	3b04      	subs	r3, #4
 8018522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018524:	68bb      	ldr	r3, [r7, #8]
 8018526:	f023 0201 	bic.w	r2, r3, #1
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	3b04      	subs	r3, #4
 8018532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018534:	4a0c      	ldr	r2, [pc, #48]	; (8018568 <pxPortInitialiseStack+0x64>)
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	3b14      	subs	r3, #20
 801853e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018540:	687a      	ldr	r2, [r7, #4]
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	3b04      	subs	r3, #4
 801854a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	f06f 0202 	mvn.w	r2, #2
 8018552:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	3b20      	subs	r3, #32
 8018558:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801855a:	68fb      	ldr	r3, [r7, #12]
}
 801855c:	4618      	mov	r0, r3
 801855e:	3714      	adds	r7, #20
 8018560:	46bd      	mov	sp, r7
 8018562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018566:	4770      	bx	lr
 8018568:	0801856d 	.word	0x0801856d

0801856c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801856c:	b480      	push	{r7}
 801856e:	b085      	sub	sp, #20
 8018570:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018572:	2300      	movs	r3, #0
 8018574:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018576:	4b11      	ldr	r3, [pc, #68]	; (80185bc <prvTaskExitError+0x50>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801857e:	d009      	beq.n	8018594 <prvTaskExitError+0x28>
 8018580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018584:	f383 8811 	msr	BASEPRI, r3
 8018588:	f3bf 8f6f 	isb	sy
 801858c:	f3bf 8f4f 	dsb	sy
 8018590:	60fb      	str	r3, [r7, #12]
 8018592:	e7fe      	b.n	8018592 <prvTaskExitError+0x26>
 8018594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018598:	f383 8811 	msr	BASEPRI, r3
 801859c:	f3bf 8f6f 	isb	sy
 80185a0:	f3bf 8f4f 	dsb	sy
 80185a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80185a6:	bf00      	nop
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d0fc      	beq.n	80185a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80185ae:	bf00      	nop
 80185b0:	3714      	adds	r7, #20
 80185b2:	46bd      	mov	sp, r7
 80185b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b8:	4770      	bx	lr
 80185ba:	bf00      	nop
 80185bc:	20000050 	.word	0x20000050

080185c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80185c0:	4b07      	ldr	r3, [pc, #28]	; (80185e0 <pxCurrentTCBConst2>)
 80185c2:	6819      	ldr	r1, [r3, #0]
 80185c4:	6808      	ldr	r0, [r1, #0]
 80185c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ca:	f380 8809 	msr	PSP, r0
 80185ce:	f3bf 8f6f 	isb	sy
 80185d2:	f04f 0000 	mov.w	r0, #0
 80185d6:	f380 8811 	msr	BASEPRI, r0
 80185da:	4770      	bx	lr
 80185dc:	f3af 8000 	nop.w

080185e0 <pxCurrentTCBConst2>:
 80185e0:	2000c33c 	.word	0x2000c33c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80185e4:	bf00      	nop
 80185e6:	bf00      	nop

080185e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80185e8:	4808      	ldr	r0, [pc, #32]	; (801860c <prvPortStartFirstTask+0x24>)
 80185ea:	6800      	ldr	r0, [r0, #0]
 80185ec:	6800      	ldr	r0, [r0, #0]
 80185ee:	f380 8808 	msr	MSP, r0
 80185f2:	f04f 0000 	mov.w	r0, #0
 80185f6:	f380 8814 	msr	CONTROL, r0
 80185fa:	b662      	cpsie	i
 80185fc:	b661      	cpsie	f
 80185fe:	f3bf 8f4f 	dsb	sy
 8018602:	f3bf 8f6f 	isb	sy
 8018606:	df00      	svc	0
 8018608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801860a:	bf00      	nop
 801860c:	e000ed08 	.word	0xe000ed08

08018610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b086      	sub	sp, #24
 8018614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018616:	4b44      	ldr	r3, [pc, #272]	; (8018728 <xPortStartScheduler+0x118>)
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	4a44      	ldr	r2, [pc, #272]	; (801872c <xPortStartScheduler+0x11c>)
 801861c:	4293      	cmp	r3, r2
 801861e:	d109      	bne.n	8018634 <xPortStartScheduler+0x24>
 8018620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018624:	f383 8811 	msr	BASEPRI, r3
 8018628:	f3bf 8f6f 	isb	sy
 801862c:	f3bf 8f4f 	dsb	sy
 8018630:	613b      	str	r3, [r7, #16]
 8018632:	e7fe      	b.n	8018632 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018634:	4b3c      	ldr	r3, [pc, #240]	; (8018728 <xPortStartScheduler+0x118>)
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	4a3d      	ldr	r2, [pc, #244]	; (8018730 <xPortStartScheduler+0x120>)
 801863a:	4293      	cmp	r3, r2
 801863c:	d109      	bne.n	8018652 <xPortStartScheduler+0x42>
 801863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018642:	f383 8811 	msr	BASEPRI, r3
 8018646:	f3bf 8f6f 	isb	sy
 801864a:	f3bf 8f4f 	dsb	sy
 801864e:	60fb      	str	r3, [r7, #12]
 8018650:	e7fe      	b.n	8018650 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018652:	4b38      	ldr	r3, [pc, #224]	; (8018734 <xPortStartScheduler+0x124>)
 8018654:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018656:	697b      	ldr	r3, [r7, #20]
 8018658:	781b      	ldrb	r3, [r3, #0]
 801865a:	b2db      	uxtb	r3, r3
 801865c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801865e:	697b      	ldr	r3, [r7, #20]
 8018660:	22ff      	movs	r2, #255	; 0xff
 8018662:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018664:	697b      	ldr	r3, [r7, #20]
 8018666:	781b      	ldrb	r3, [r3, #0]
 8018668:	b2db      	uxtb	r3, r3
 801866a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801866c:	78fb      	ldrb	r3, [r7, #3]
 801866e:	b2db      	uxtb	r3, r3
 8018670:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018674:	b2da      	uxtb	r2, r3
 8018676:	4b30      	ldr	r3, [pc, #192]	; (8018738 <xPortStartScheduler+0x128>)
 8018678:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801867a:	4b30      	ldr	r3, [pc, #192]	; (801873c <xPortStartScheduler+0x12c>)
 801867c:	2207      	movs	r2, #7
 801867e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018680:	e009      	b.n	8018696 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8018682:	4b2e      	ldr	r3, [pc, #184]	; (801873c <xPortStartScheduler+0x12c>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	3b01      	subs	r3, #1
 8018688:	4a2c      	ldr	r2, [pc, #176]	; (801873c <xPortStartScheduler+0x12c>)
 801868a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801868c:	78fb      	ldrb	r3, [r7, #3]
 801868e:	b2db      	uxtb	r3, r3
 8018690:	005b      	lsls	r3, r3, #1
 8018692:	b2db      	uxtb	r3, r3
 8018694:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018696:	78fb      	ldrb	r3, [r7, #3]
 8018698:	b2db      	uxtb	r3, r3
 801869a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801869e:	2b80      	cmp	r3, #128	; 0x80
 80186a0:	d0ef      	beq.n	8018682 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80186a2:	4b26      	ldr	r3, [pc, #152]	; (801873c <xPortStartScheduler+0x12c>)
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	f1c3 0307 	rsb	r3, r3, #7
 80186aa:	2b04      	cmp	r3, #4
 80186ac:	d009      	beq.n	80186c2 <xPortStartScheduler+0xb2>
 80186ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186b2:	f383 8811 	msr	BASEPRI, r3
 80186b6:	f3bf 8f6f 	isb	sy
 80186ba:	f3bf 8f4f 	dsb	sy
 80186be:	60bb      	str	r3, [r7, #8]
 80186c0:	e7fe      	b.n	80186c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80186c2:	4b1e      	ldr	r3, [pc, #120]	; (801873c <xPortStartScheduler+0x12c>)
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	021b      	lsls	r3, r3, #8
 80186c8:	4a1c      	ldr	r2, [pc, #112]	; (801873c <xPortStartScheduler+0x12c>)
 80186ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80186cc:	4b1b      	ldr	r3, [pc, #108]	; (801873c <xPortStartScheduler+0x12c>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80186d4:	4a19      	ldr	r2, [pc, #100]	; (801873c <xPortStartScheduler+0x12c>)
 80186d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	b2da      	uxtb	r2, r3
 80186dc:	697b      	ldr	r3, [r7, #20]
 80186de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80186e0:	4b17      	ldr	r3, [pc, #92]	; (8018740 <xPortStartScheduler+0x130>)
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	4a16      	ldr	r2, [pc, #88]	; (8018740 <xPortStartScheduler+0x130>)
 80186e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80186ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80186ec:	4b14      	ldr	r3, [pc, #80]	; (8018740 <xPortStartScheduler+0x130>)
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	4a13      	ldr	r2, [pc, #76]	; (8018740 <xPortStartScheduler+0x130>)
 80186f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80186f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80186f8:	f000 f8d6 	bl	80188a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80186fc:	4b11      	ldr	r3, [pc, #68]	; (8018744 <xPortStartScheduler+0x134>)
 80186fe:	2200      	movs	r2, #0
 8018700:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018702:	f000 f8f5 	bl	80188f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018706:	4b10      	ldr	r3, [pc, #64]	; (8018748 <xPortStartScheduler+0x138>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	4a0f      	ldr	r2, [pc, #60]	; (8018748 <xPortStartScheduler+0x138>)
 801870c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018710:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018712:	f7ff ff69 	bl	80185e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018716:	f7ff fa99 	bl	8017c4c <vTaskSwitchContext>
	prvTaskExitError();
 801871a:	f7ff ff27 	bl	801856c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801871e:	2300      	movs	r3, #0
}
 8018720:	4618      	mov	r0, r3
 8018722:	3718      	adds	r7, #24
 8018724:	46bd      	mov	sp, r7
 8018726:	bd80      	pop	{r7, pc}
 8018728:	e000ed00 	.word	0xe000ed00
 801872c:	410fc271 	.word	0x410fc271
 8018730:	410fc270 	.word	0x410fc270
 8018734:	e000e400 	.word	0xe000e400
 8018738:	2000c468 	.word	0x2000c468
 801873c:	2000c46c 	.word	0x2000c46c
 8018740:	e000ed20 	.word	0xe000ed20
 8018744:	20000050 	.word	0x20000050
 8018748:	e000ef34 	.word	0xe000ef34

0801874c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801874c:	b480      	push	{r7}
 801874e:	b083      	sub	sp, #12
 8018750:	af00      	add	r7, sp, #0
 8018752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018756:	f383 8811 	msr	BASEPRI, r3
 801875a:	f3bf 8f6f 	isb	sy
 801875e:	f3bf 8f4f 	dsb	sy
 8018762:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018764:	4b0e      	ldr	r3, [pc, #56]	; (80187a0 <vPortEnterCritical+0x54>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	3301      	adds	r3, #1
 801876a:	4a0d      	ldr	r2, [pc, #52]	; (80187a0 <vPortEnterCritical+0x54>)
 801876c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801876e:	4b0c      	ldr	r3, [pc, #48]	; (80187a0 <vPortEnterCritical+0x54>)
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	2b01      	cmp	r3, #1
 8018774:	d10e      	bne.n	8018794 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018776:	4b0b      	ldr	r3, [pc, #44]	; (80187a4 <vPortEnterCritical+0x58>)
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	b2db      	uxtb	r3, r3
 801877c:	2b00      	cmp	r3, #0
 801877e:	d009      	beq.n	8018794 <vPortEnterCritical+0x48>
 8018780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018784:	f383 8811 	msr	BASEPRI, r3
 8018788:	f3bf 8f6f 	isb	sy
 801878c:	f3bf 8f4f 	dsb	sy
 8018790:	603b      	str	r3, [r7, #0]
 8018792:	e7fe      	b.n	8018792 <vPortEnterCritical+0x46>
	}
}
 8018794:	bf00      	nop
 8018796:	370c      	adds	r7, #12
 8018798:	46bd      	mov	sp, r7
 801879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879e:	4770      	bx	lr
 80187a0:	20000050 	.word	0x20000050
 80187a4:	e000ed04 	.word	0xe000ed04

080187a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80187a8:	b480      	push	{r7}
 80187aa:	b083      	sub	sp, #12
 80187ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80187ae:	4b11      	ldr	r3, [pc, #68]	; (80187f4 <vPortExitCritical+0x4c>)
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d109      	bne.n	80187ca <vPortExitCritical+0x22>
 80187b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187ba:	f383 8811 	msr	BASEPRI, r3
 80187be:	f3bf 8f6f 	isb	sy
 80187c2:	f3bf 8f4f 	dsb	sy
 80187c6:	607b      	str	r3, [r7, #4]
 80187c8:	e7fe      	b.n	80187c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80187ca:	4b0a      	ldr	r3, [pc, #40]	; (80187f4 <vPortExitCritical+0x4c>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	3b01      	subs	r3, #1
 80187d0:	4a08      	ldr	r2, [pc, #32]	; (80187f4 <vPortExitCritical+0x4c>)
 80187d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80187d4:	4b07      	ldr	r3, [pc, #28]	; (80187f4 <vPortExitCritical+0x4c>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d104      	bne.n	80187e6 <vPortExitCritical+0x3e>
 80187dc:	2300      	movs	r3, #0
 80187de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80187e6:	bf00      	nop
 80187e8:	370c      	adds	r7, #12
 80187ea:	46bd      	mov	sp, r7
 80187ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f0:	4770      	bx	lr
 80187f2:	bf00      	nop
 80187f4:	20000050 	.word	0x20000050
	...

08018800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018800:	f3ef 8009 	mrs	r0, PSP
 8018804:	f3bf 8f6f 	isb	sy
 8018808:	4b15      	ldr	r3, [pc, #84]	; (8018860 <pxCurrentTCBConst>)
 801880a:	681a      	ldr	r2, [r3, #0]
 801880c:	f01e 0f10 	tst.w	lr, #16
 8018810:	bf08      	it	eq
 8018812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801881a:	6010      	str	r0, [r2, #0]
 801881c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018824:	f380 8811 	msr	BASEPRI, r0
 8018828:	f3bf 8f4f 	dsb	sy
 801882c:	f3bf 8f6f 	isb	sy
 8018830:	f7ff fa0c 	bl	8017c4c <vTaskSwitchContext>
 8018834:	f04f 0000 	mov.w	r0, #0
 8018838:	f380 8811 	msr	BASEPRI, r0
 801883c:	bc09      	pop	{r0, r3}
 801883e:	6819      	ldr	r1, [r3, #0]
 8018840:	6808      	ldr	r0, [r1, #0]
 8018842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018846:	f01e 0f10 	tst.w	lr, #16
 801884a:	bf08      	it	eq
 801884c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018850:	f380 8809 	msr	PSP, r0
 8018854:	f3bf 8f6f 	isb	sy
 8018858:	4770      	bx	lr
 801885a:	bf00      	nop
 801885c:	f3af 8000 	nop.w

08018860 <pxCurrentTCBConst>:
 8018860:	2000c33c 	.word	0x2000c33c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018864:	bf00      	nop
 8018866:	bf00      	nop

08018868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b082      	sub	sp, #8
 801886c:	af00      	add	r7, sp, #0
	__asm volatile
 801886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018872:	f383 8811 	msr	BASEPRI, r3
 8018876:	f3bf 8f6f 	isb	sy
 801887a:	f3bf 8f4f 	dsb	sy
 801887e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018880:	f7ff f928 	bl	8017ad4 <xTaskIncrementTick>
 8018884:	4603      	mov	r3, r0
 8018886:	2b00      	cmp	r3, #0
 8018888:	d003      	beq.n	8018892 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801888a:	4b06      	ldr	r3, [pc, #24]	; (80188a4 <xPortSysTickHandler+0x3c>)
 801888c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018890:	601a      	str	r2, [r3, #0]
 8018892:	2300      	movs	r3, #0
 8018894:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801889c:	bf00      	nop
 801889e:	3708      	adds	r7, #8
 80188a0:	46bd      	mov	sp, r7
 80188a2:	bd80      	pop	{r7, pc}
 80188a4:	e000ed04 	.word	0xe000ed04

080188a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80188a8:	b480      	push	{r7}
 80188aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80188ac:	4b0b      	ldr	r3, [pc, #44]	; (80188dc <vPortSetupTimerInterrupt+0x34>)
 80188ae:	2200      	movs	r2, #0
 80188b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80188b2:	4b0b      	ldr	r3, [pc, #44]	; (80188e0 <vPortSetupTimerInterrupt+0x38>)
 80188b4:	2200      	movs	r2, #0
 80188b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80188b8:	4b0a      	ldr	r3, [pc, #40]	; (80188e4 <vPortSetupTimerInterrupt+0x3c>)
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	4a0a      	ldr	r2, [pc, #40]	; (80188e8 <vPortSetupTimerInterrupt+0x40>)
 80188be:	fba2 2303 	umull	r2, r3, r2, r3
 80188c2:	099b      	lsrs	r3, r3, #6
 80188c4:	4a09      	ldr	r2, [pc, #36]	; (80188ec <vPortSetupTimerInterrupt+0x44>)
 80188c6:	3b01      	subs	r3, #1
 80188c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80188ca:	4b04      	ldr	r3, [pc, #16]	; (80188dc <vPortSetupTimerInterrupt+0x34>)
 80188cc:	2207      	movs	r2, #7
 80188ce:	601a      	str	r2, [r3, #0]
}
 80188d0:	bf00      	nop
 80188d2:	46bd      	mov	sp, r7
 80188d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d8:	4770      	bx	lr
 80188da:	bf00      	nop
 80188dc:	e000e010 	.word	0xe000e010
 80188e0:	e000e018 	.word	0xe000e018
 80188e4:	20000054 	.word	0x20000054
 80188e8:	10624dd3 	.word	0x10624dd3
 80188ec:	e000e014 	.word	0xe000e014

080188f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80188f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018900 <vPortEnableVFP+0x10>
 80188f4:	6801      	ldr	r1, [r0, #0]
 80188f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80188fa:	6001      	str	r1, [r0, #0]
 80188fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80188fe:	bf00      	nop
 8018900:	e000ed88 	.word	0xe000ed88

08018904 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018904:	b480      	push	{r7}
 8018906:	b085      	sub	sp, #20
 8018908:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801890a:	f3ef 8305 	mrs	r3, IPSR
 801890e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	2b0f      	cmp	r3, #15
 8018914:	d913      	bls.n	801893e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018916:	4a16      	ldr	r2, [pc, #88]	; (8018970 <vPortValidateInterruptPriority+0x6c>)
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	4413      	add	r3, r2
 801891c:	781b      	ldrb	r3, [r3, #0]
 801891e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018920:	4b14      	ldr	r3, [pc, #80]	; (8018974 <vPortValidateInterruptPriority+0x70>)
 8018922:	781b      	ldrb	r3, [r3, #0]
 8018924:	7afa      	ldrb	r2, [r7, #11]
 8018926:	429a      	cmp	r2, r3
 8018928:	d209      	bcs.n	801893e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801892e:	f383 8811 	msr	BASEPRI, r3
 8018932:	f3bf 8f6f 	isb	sy
 8018936:	f3bf 8f4f 	dsb	sy
 801893a:	607b      	str	r3, [r7, #4]
 801893c:	e7fe      	b.n	801893c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801893e:	4b0e      	ldr	r3, [pc, #56]	; (8018978 <vPortValidateInterruptPriority+0x74>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018946:	4b0d      	ldr	r3, [pc, #52]	; (801897c <vPortValidateInterruptPriority+0x78>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	429a      	cmp	r2, r3
 801894c:	d909      	bls.n	8018962 <vPortValidateInterruptPriority+0x5e>
 801894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018952:	f383 8811 	msr	BASEPRI, r3
 8018956:	f3bf 8f6f 	isb	sy
 801895a:	f3bf 8f4f 	dsb	sy
 801895e:	603b      	str	r3, [r7, #0]
 8018960:	e7fe      	b.n	8018960 <vPortValidateInterruptPriority+0x5c>
	}
 8018962:	bf00      	nop
 8018964:	3714      	adds	r7, #20
 8018966:	46bd      	mov	sp, r7
 8018968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801896c:	4770      	bx	lr
 801896e:	bf00      	nop
 8018970:	e000e3f0 	.word	0xe000e3f0
 8018974:	2000c468 	.word	0x2000c468
 8018978:	e000ed0c 	.word	0xe000ed0c
 801897c:	2000c46c 	.word	0x2000c46c

08018980 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b08a      	sub	sp, #40	; 0x28
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018988:	2300      	movs	r3, #0
 801898a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801898c:	f7fe ffd6 	bl	801793c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018990:	4b57      	ldr	r3, [pc, #348]	; (8018af0 <pvPortMalloc+0x170>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d101      	bne.n	801899c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018998:	f000 f90c 	bl	8018bb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801899c:	4b55      	ldr	r3, [pc, #340]	; (8018af4 <pvPortMalloc+0x174>)
 801899e:	681a      	ldr	r2, [r3, #0]
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	4013      	ands	r3, r2
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	f040 808c 	bne.w	8018ac2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d01c      	beq.n	80189ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80189b0:	2208      	movs	r2, #8
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	4413      	add	r3, r2
 80189b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	f003 0307 	and.w	r3, r3, #7
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d013      	beq.n	80189ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	f023 0307 	bic.w	r3, r3, #7
 80189c8:	3308      	adds	r3, #8
 80189ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	f003 0307 	and.w	r3, r3, #7
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d009      	beq.n	80189ea <pvPortMalloc+0x6a>
 80189d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189da:	f383 8811 	msr	BASEPRI, r3
 80189de:	f3bf 8f6f 	isb	sy
 80189e2:	f3bf 8f4f 	dsb	sy
 80189e6:	617b      	str	r3, [r7, #20]
 80189e8:	e7fe      	b.n	80189e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d068      	beq.n	8018ac2 <pvPortMalloc+0x142>
 80189f0:	4b41      	ldr	r3, [pc, #260]	; (8018af8 <pvPortMalloc+0x178>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	687a      	ldr	r2, [r7, #4]
 80189f6:	429a      	cmp	r2, r3
 80189f8:	d863      	bhi.n	8018ac2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80189fa:	4b40      	ldr	r3, [pc, #256]	; (8018afc <pvPortMalloc+0x17c>)
 80189fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80189fe:	4b3f      	ldr	r3, [pc, #252]	; (8018afc <pvPortMalloc+0x17c>)
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018a04:	e004      	b.n	8018a10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8018a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a12:	685b      	ldr	r3, [r3, #4]
 8018a14:	687a      	ldr	r2, [r7, #4]
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d903      	bls.n	8018a22 <pvPortMalloc+0xa2>
 8018a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d1f1      	bne.n	8018a06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018a22:	4b33      	ldr	r3, [pc, #204]	; (8018af0 <pvPortMalloc+0x170>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a28:	429a      	cmp	r2, r3
 8018a2a:	d04a      	beq.n	8018ac2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018a2c:	6a3b      	ldr	r3, [r7, #32]
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	2208      	movs	r2, #8
 8018a32:	4413      	add	r3, r2
 8018a34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a38:	681a      	ldr	r2, [r3, #0]
 8018a3a:	6a3b      	ldr	r3, [r7, #32]
 8018a3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a40:	685a      	ldr	r2, [r3, #4]
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	1ad2      	subs	r2, r2, r3
 8018a46:	2308      	movs	r3, #8
 8018a48:	005b      	lsls	r3, r3, #1
 8018a4a:	429a      	cmp	r2, r3
 8018a4c:	d91e      	bls.n	8018a8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	4413      	add	r3, r2
 8018a54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018a56:	69bb      	ldr	r3, [r7, #24]
 8018a58:	f003 0307 	and.w	r3, r3, #7
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d009      	beq.n	8018a74 <pvPortMalloc+0xf4>
 8018a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a64:	f383 8811 	msr	BASEPRI, r3
 8018a68:	f3bf 8f6f 	isb	sy
 8018a6c:	f3bf 8f4f 	dsb	sy
 8018a70:	613b      	str	r3, [r7, #16]
 8018a72:	e7fe      	b.n	8018a72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a76:	685a      	ldr	r2, [r3, #4]
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	1ad2      	subs	r2, r2, r3
 8018a7c:	69bb      	ldr	r3, [r7, #24]
 8018a7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018a86:	69b8      	ldr	r0, [r7, #24]
 8018a88:	f000 f8f6 	bl	8018c78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018a8c:	4b1a      	ldr	r3, [pc, #104]	; (8018af8 <pvPortMalloc+0x178>)
 8018a8e:	681a      	ldr	r2, [r3, #0]
 8018a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a92:	685b      	ldr	r3, [r3, #4]
 8018a94:	1ad3      	subs	r3, r2, r3
 8018a96:	4a18      	ldr	r2, [pc, #96]	; (8018af8 <pvPortMalloc+0x178>)
 8018a98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018a9a:	4b17      	ldr	r3, [pc, #92]	; (8018af8 <pvPortMalloc+0x178>)
 8018a9c:	681a      	ldr	r2, [r3, #0]
 8018a9e:	4b18      	ldr	r3, [pc, #96]	; (8018b00 <pvPortMalloc+0x180>)
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	429a      	cmp	r2, r3
 8018aa4:	d203      	bcs.n	8018aae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018aa6:	4b14      	ldr	r3, [pc, #80]	; (8018af8 <pvPortMalloc+0x178>)
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	4a15      	ldr	r2, [pc, #84]	; (8018b00 <pvPortMalloc+0x180>)
 8018aac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab0:	685a      	ldr	r2, [r3, #4]
 8018ab2:	4b10      	ldr	r3, [pc, #64]	; (8018af4 <pvPortMalloc+0x174>)
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	431a      	orrs	r2, r3
 8018ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018abe:	2200      	movs	r2, #0
 8018ac0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018ac2:	f7fe ff49 	bl	8017958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018ac6:	69fb      	ldr	r3, [r7, #28]
 8018ac8:	f003 0307 	and.w	r3, r3, #7
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d009      	beq.n	8018ae4 <pvPortMalloc+0x164>
 8018ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad4:	f383 8811 	msr	BASEPRI, r3
 8018ad8:	f3bf 8f6f 	isb	sy
 8018adc:	f3bf 8f4f 	dsb	sy
 8018ae0:	60fb      	str	r3, [r7, #12]
 8018ae2:	e7fe      	b.n	8018ae2 <pvPortMalloc+0x162>
	return pvReturn;
 8018ae4:	69fb      	ldr	r3, [r7, #28]
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3728      	adds	r7, #40	; 0x28
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop
 8018af0:	2000e3b8 	.word	0x2000e3b8
 8018af4:	2000e3c4 	.word	0x2000e3c4
 8018af8:	2000e3bc 	.word	0x2000e3bc
 8018afc:	2000e3b0 	.word	0x2000e3b0
 8018b00:	2000e3c0 	.word	0x2000e3c0

08018b04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b086      	sub	sp, #24
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d046      	beq.n	8018ba4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018b16:	2308      	movs	r3, #8
 8018b18:	425b      	negs	r3, r3
 8018b1a:	697a      	ldr	r2, [r7, #20]
 8018b1c:	4413      	add	r3, r2
 8018b1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018b20:	697b      	ldr	r3, [r7, #20]
 8018b22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018b24:	693b      	ldr	r3, [r7, #16]
 8018b26:	685a      	ldr	r2, [r3, #4]
 8018b28:	4b20      	ldr	r3, [pc, #128]	; (8018bac <vPortFree+0xa8>)
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	4013      	ands	r3, r2
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d109      	bne.n	8018b46 <vPortFree+0x42>
 8018b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b36:	f383 8811 	msr	BASEPRI, r3
 8018b3a:	f3bf 8f6f 	isb	sy
 8018b3e:	f3bf 8f4f 	dsb	sy
 8018b42:	60fb      	str	r3, [r7, #12]
 8018b44:	e7fe      	b.n	8018b44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d009      	beq.n	8018b62 <vPortFree+0x5e>
 8018b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b52:	f383 8811 	msr	BASEPRI, r3
 8018b56:	f3bf 8f6f 	isb	sy
 8018b5a:	f3bf 8f4f 	dsb	sy
 8018b5e:	60bb      	str	r3, [r7, #8]
 8018b60:	e7fe      	b.n	8018b60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018b62:	693b      	ldr	r3, [r7, #16]
 8018b64:	685a      	ldr	r2, [r3, #4]
 8018b66:	4b11      	ldr	r3, [pc, #68]	; (8018bac <vPortFree+0xa8>)
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	4013      	ands	r3, r2
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d019      	beq.n	8018ba4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018b70:	693b      	ldr	r3, [r7, #16]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d115      	bne.n	8018ba4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018b78:	693b      	ldr	r3, [r7, #16]
 8018b7a:	685a      	ldr	r2, [r3, #4]
 8018b7c:	4b0b      	ldr	r3, [pc, #44]	; (8018bac <vPortFree+0xa8>)
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	43db      	mvns	r3, r3
 8018b82:	401a      	ands	r2, r3
 8018b84:	693b      	ldr	r3, [r7, #16]
 8018b86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018b88:	f7fe fed8 	bl	801793c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018b8c:	693b      	ldr	r3, [r7, #16]
 8018b8e:	685a      	ldr	r2, [r3, #4]
 8018b90:	4b07      	ldr	r3, [pc, #28]	; (8018bb0 <vPortFree+0xac>)
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	4413      	add	r3, r2
 8018b96:	4a06      	ldr	r2, [pc, #24]	; (8018bb0 <vPortFree+0xac>)
 8018b98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018b9a:	6938      	ldr	r0, [r7, #16]
 8018b9c:	f000 f86c 	bl	8018c78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018ba0:	f7fe feda 	bl	8017958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018ba4:	bf00      	nop
 8018ba6:	3718      	adds	r7, #24
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	bd80      	pop	{r7, pc}
 8018bac:	2000e3c4 	.word	0x2000e3c4
 8018bb0:	2000e3bc 	.word	0x2000e3bc

08018bb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018bb4:	b480      	push	{r7}
 8018bb6:	b085      	sub	sp, #20
 8018bb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018bba:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8018bbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018bc0:	4b27      	ldr	r3, [pc, #156]	; (8018c60 <prvHeapInit+0xac>)
 8018bc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	f003 0307 	and.w	r3, r3, #7
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d00c      	beq.n	8018be8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	3307      	adds	r3, #7
 8018bd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	f023 0307 	bic.w	r3, r3, #7
 8018bda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018bdc:	68ba      	ldr	r2, [r7, #8]
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	1ad3      	subs	r3, r2, r3
 8018be2:	4a1f      	ldr	r2, [pc, #124]	; (8018c60 <prvHeapInit+0xac>)
 8018be4:	4413      	add	r3, r2
 8018be6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018bec:	4a1d      	ldr	r2, [pc, #116]	; (8018c64 <prvHeapInit+0xb0>)
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018bf2:	4b1c      	ldr	r3, [pc, #112]	; (8018c64 <prvHeapInit+0xb0>)
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	68ba      	ldr	r2, [r7, #8]
 8018bfc:	4413      	add	r3, r2
 8018bfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018c00:	2208      	movs	r2, #8
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	1a9b      	subs	r3, r3, r2
 8018c06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	f023 0307 	bic.w	r3, r3, #7
 8018c0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	4a15      	ldr	r2, [pc, #84]	; (8018c68 <prvHeapInit+0xb4>)
 8018c14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018c16:	4b14      	ldr	r3, [pc, #80]	; (8018c68 <prvHeapInit+0xb4>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	2200      	movs	r2, #0
 8018c1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018c1e:	4b12      	ldr	r3, [pc, #72]	; (8018c68 <prvHeapInit+0xb4>)
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	2200      	movs	r2, #0
 8018c24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	68fa      	ldr	r2, [r7, #12]
 8018c2e:	1ad2      	subs	r2, r2, r3
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018c34:	4b0c      	ldr	r3, [pc, #48]	; (8018c68 <prvHeapInit+0xb4>)
 8018c36:	681a      	ldr	r2, [r3, #0]
 8018c38:	683b      	ldr	r3, [r7, #0]
 8018c3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018c3c:	683b      	ldr	r3, [r7, #0]
 8018c3e:	685b      	ldr	r3, [r3, #4]
 8018c40:	4a0a      	ldr	r2, [pc, #40]	; (8018c6c <prvHeapInit+0xb8>)
 8018c42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018c44:	683b      	ldr	r3, [r7, #0]
 8018c46:	685b      	ldr	r3, [r3, #4]
 8018c48:	4a09      	ldr	r2, [pc, #36]	; (8018c70 <prvHeapInit+0xbc>)
 8018c4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018c4c:	4b09      	ldr	r3, [pc, #36]	; (8018c74 <prvHeapInit+0xc0>)
 8018c4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018c52:	601a      	str	r2, [r3, #0]
}
 8018c54:	bf00      	nop
 8018c56:	3714      	adds	r7, #20
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5e:	4770      	bx	lr
 8018c60:	2000c470 	.word	0x2000c470
 8018c64:	2000e3b0 	.word	0x2000e3b0
 8018c68:	2000e3b8 	.word	0x2000e3b8
 8018c6c:	2000e3c0 	.word	0x2000e3c0
 8018c70:	2000e3bc 	.word	0x2000e3bc
 8018c74:	2000e3c4 	.word	0x2000e3c4

08018c78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018c78:	b480      	push	{r7}
 8018c7a:	b085      	sub	sp, #20
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018c80:	4b28      	ldr	r3, [pc, #160]	; (8018d24 <prvInsertBlockIntoFreeList+0xac>)
 8018c82:	60fb      	str	r3, [r7, #12]
 8018c84:	e002      	b.n	8018c8c <prvInsertBlockIntoFreeList+0x14>
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	60fb      	str	r3, [r7, #12]
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	687a      	ldr	r2, [r7, #4]
 8018c92:	429a      	cmp	r2, r3
 8018c94:	d8f7      	bhi.n	8018c86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	685b      	ldr	r3, [r3, #4]
 8018c9e:	68ba      	ldr	r2, [r7, #8]
 8018ca0:	4413      	add	r3, r2
 8018ca2:	687a      	ldr	r2, [r7, #4]
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	d108      	bne.n	8018cba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	685a      	ldr	r2, [r3, #4]
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	685b      	ldr	r3, [r3, #4]
 8018cb0:	441a      	add	r2, r3
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	685b      	ldr	r3, [r3, #4]
 8018cc2:	68ba      	ldr	r2, [r7, #8]
 8018cc4:	441a      	add	r2, r3
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	429a      	cmp	r2, r3
 8018ccc:	d118      	bne.n	8018d00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	681a      	ldr	r2, [r3, #0]
 8018cd2:	4b15      	ldr	r3, [pc, #84]	; (8018d28 <prvInsertBlockIntoFreeList+0xb0>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	429a      	cmp	r2, r3
 8018cd8:	d00d      	beq.n	8018cf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	685a      	ldr	r2, [r3, #4]
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	685b      	ldr	r3, [r3, #4]
 8018ce4:	441a      	add	r2, r3
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	681a      	ldr	r2, [r3, #0]
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	601a      	str	r2, [r3, #0]
 8018cf4:	e008      	b.n	8018d08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018cf6:	4b0c      	ldr	r3, [pc, #48]	; (8018d28 <prvInsertBlockIntoFreeList+0xb0>)
 8018cf8:	681a      	ldr	r2, [r3, #0]
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	601a      	str	r2, [r3, #0]
 8018cfe:	e003      	b.n	8018d08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	681a      	ldr	r2, [r3, #0]
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018d08:	68fa      	ldr	r2, [r7, #12]
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	429a      	cmp	r2, r3
 8018d0e:	d002      	beq.n	8018d16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	687a      	ldr	r2, [r7, #4]
 8018d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018d16:	bf00      	nop
 8018d18:	3714      	adds	r7, #20
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d20:	4770      	bx	lr
 8018d22:	bf00      	nop
 8018d24:	2000e3b0 	.word	0x2000e3b0
 8018d28:	2000e3b8 	.word	0x2000e3b8

08018d2c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8018d2c:	b5b0      	push	{r4, r5, r7, lr}
 8018d2e:	b096      	sub	sp, #88	; 0x58
 8018d30:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8018d32:	f7f5 f8c4 	bl	800debe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8018d36:	f000 f89b 	bl	8018e70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8018d3a:	f000 f965 	bl	8019008 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8018d3e:	f000 f935 	bl	8018fac <MX_LPUART1_UART_Init>

	/* USER CODE BEGIN 2 */

	//TCP/IP stack initialization
	netInit();
 8018d42:	f7e8 fe63 	bl	8001a0c <netInit>

	//Configure the first network interface
	interface = &netInterface[0];
 8018d46:	4b3d      	ldr	r3, [pc, #244]	; (8018e3c <main+0x110>)
 8018d48:	657b      	str	r3, [r7, #84]	; 0x54

	//Get default PPP settings
	pppGetDefaultSettings(&pppSettings);
 8018d4a:	483d      	ldr	r0, [pc, #244]	; (8018e40 <main+0x114>)
 8018d4c:	f7f3 fb7c 	bl	800c448 <pppGetDefaultSettings>

	//Initialize PPP
	pppInit(&pppContext, &pppSettings);
 8018d50:	493b      	ldr	r1, [pc, #236]	; (8018e40 <main+0x114>)
 8018d52:	483c      	ldr	r0, [pc, #240]	; (8018e44 <main+0x118>)
 8018d54:	f7f3 fb96 	bl	800c484 <pppInit>

	//Set interface name
	netSetInterfaceName(interface, APP_IF_NAME);
 8018d58:	493b      	ldr	r1, [pc, #236]	; (8018e48 <main+0x11c>)
 8018d5a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018d5c:	f7e8 ff1a 	bl	8001b94 <netSetInterfaceName>
	//Select the relevant UART driver
	netSetUartDriver(interface, &uartDriver);
 8018d60:	493a      	ldr	r1, [pc, #232]	; (8018e4c <main+0x120>)
 8018d62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018d64:	f7e8 ff56 	bl	8001c14 <netSetUartDriver>

	//Initialize network interface
	netConfigInterface(interface);
 8018d68:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018d6a:	f7e8 ff71 	bl	8001c50 <netConfigInterface>

	//Set IPv4 host address
	ipv4StringToAddr(APP_IPV4_HOST_ADDR, &ipv4Addr);
 8018d6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018d72:	4619      	mov	r1, r3
 8018d74:	4836      	ldr	r0, [pc, #216]	; (8018e50 <main+0x124>)
 8018d76:	f7ef fa0b 	bl	8008190 <ipv4StringToAddr>
	ipv4SetHostAddr(interface, ipv4Addr);
 8018d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d7c:	4619      	mov	r1, r3
 8018d7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018d80:	f7ee fef8 	bl	8007b74 <ipv4SetHostAddr>

	//Set subnet mask
	ipv4StringToAddr(APP_IPV4_SUBNET_MASK, &ipv4Addr);
 8018d84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018d88:	4619      	mov	r1, r3
 8018d8a:	4832      	ldr	r0, [pc, #200]	; (8018e54 <main+0x128>)
 8018d8c:	f7ef fa00 	bl	8008190 <ipv4StringToAddr>
	ipv4SetSubnetMask(interface, ipv4Addr);
 8018d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d92:	4619      	mov	r1, r3
 8018d94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018d96:	f7ee ff3d 	bl	8007c14 <ipv4SetSubnetMask>

	//Set default gateway
	ipv4StringToAddr(APP_IPV4_DEFAULT_GATEWAY, &ipv4Addr);
 8018d9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018d9e:	4619      	mov	r1, r3
 8018da0:	482d      	ldr	r0, [pc, #180]	; (8018e58 <main+0x12c>)
 8018da2:	f7ef f9f5 	bl	8008190 <ipv4StringToAddr>
	ipv4SetDefaultGateway(interface, ipv4Addr);
 8018da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018da8:	4619      	mov	r1, r3
 8018daa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018dac:	f7ee ff6a 	bl	8007c84 <ipv4SetDefaultGateway>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Task */
	osThreadDef(osMainTask, mainTask, osPriorityNormal, 0, 128);
 8018db0:	4b2a      	ldr	r3, [pc, #168]	; (8018e5c <main+0x130>)
 8018db2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8018db6:	461d      	mov	r5, r3
 8018db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018dbc:	682b      	ldr	r3, [r5, #0]
 8018dbe:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osMainTask), NULL);
 8018dc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018dc4:	2100      	movs	r1, #0
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7fd fa2a 	bl	8016220 <osThreadCreate>
 8018dcc:	4602      	mov	r2, r0
 8018dce:	4b24      	ldr	r3, [pc, #144]	; (8018e60 <main+0x134>)
 8018dd0:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(osModbusTask, modbusTask, osPriorityNormal, 0, 500);
 8018dd2:	4b24      	ldr	r3, [pc, #144]	; (8018e64 <main+0x138>)
 8018dd4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8018dd8:	461d      	mov	r5, r3
 8018dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018dde:	682b      	ldr	r3, [r5, #0]
 8018de0:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osModbusTask), NULL);
 8018de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018de6:	2100      	movs	r1, #0
 8018de8:	4618      	mov	r0, r3
 8018dea:	f7fd fa19 	bl	8016220 <osThreadCreate>
 8018dee:	4602      	mov	r2, r0
 8018df0:	4b1b      	ldr	r3, [pc, #108]	; (8018e60 <main+0x134>)
 8018df2:	601a      	str	r2, [r3, #0]

	osThreadDef(osLedBlueTask, ledBlueTask, osPriorityNormal, 0, 32);
 8018df4:	4b1c      	ldr	r3, [pc, #112]	; (8018e68 <main+0x13c>)
 8018df6:	f107 0414 	add.w	r4, r7, #20
 8018dfa:	461d      	mov	r5, r3
 8018dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e00:	682b      	ldr	r3, [r5, #0]
 8018e02:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osLedBlueTask), NULL);
 8018e04:	f107 0314 	add.w	r3, r7, #20
 8018e08:	2100      	movs	r1, #0
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	f7fd fa08 	bl	8016220 <osThreadCreate>
 8018e10:	4602      	mov	r2, r0
 8018e12:	4b13      	ldr	r3, [pc, #76]	; (8018e60 <main+0x134>)
 8018e14:	601a      	str	r2, [r3, #0]

	osThreadDef(osLedRedTask, ledRedTask, osPriorityNormal, 0, 32);
 8018e16:	4b15      	ldr	r3, [pc, #84]	; (8018e6c <main+0x140>)
 8018e18:	463c      	mov	r4, r7
 8018e1a:	461d      	mov	r5, r3
 8018e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e20:	682b      	ldr	r3, [r5, #0]
 8018e22:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osLedRedTask), NULL);
 8018e24:	463b      	mov	r3, r7
 8018e26:	2100      	movs	r1, #0
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f7fd f9f9 	bl	8016220 <osThreadCreate>
 8018e2e:	4602      	mov	r2, r0
 8018e30:	4b0b      	ldr	r3, [pc, #44]	; (8018e60 <main+0x134>)
 8018e32:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8018e34:	f7fd f9d1 	bl	80161da <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8018e38:	e7fe      	b.n	8018e38 <main+0x10c>
 8018e3a:	bf00      	nop
 8018e3c:	2000e464 	.word	0x2000e464
 8018e40:	200102fc 	.word	0x200102fc
 8018e44:	20010548 	.word	0x20010548
 8018e48:	0801c2ec 	.word	0x0801c2ec
 8018e4c:	0801c6e0 	.word	0x0801c6e0
 8018e50:	0801c2f4 	.word	0x0801c2f4
 8018e54:	0801c300 	.word	0x0801c300
 8018e58:	0801c310 	.word	0x0801c310
 8018e5c:	0801c328 	.word	0x0801c328
 8018e60:	20013cdc 	.word	0x20013cdc
 8018e64:	0801c34c 	.word	0x0801c34c
 8018e68:	0801c370 	.word	0x0801c370
 8018e6c:	0801c394 	.word	0x0801c394

08018e70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b0ba      	sub	sp, #232	; 0xe8
 8018e74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8018e76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018e7a:	2244      	movs	r2, #68	; 0x44
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f001 f8ec 	bl	801a05c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8018e84:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018e88:	2200      	movs	r2, #0
 8018e8a:	601a      	str	r2, [r3, #0]
 8018e8c:	605a      	str	r2, [r3, #4]
 8018e8e:	609a      	str	r2, [r3, #8]
 8018e90:	60da      	str	r2, [r3, #12]
 8018e92:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8018e94:	1d3b      	adds	r3, r7, #4
 8018e96:	228c      	movs	r2, #140	; 0x8c
 8018e98:	2100      	movs	r1, #0
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f001 f8de 	bl	801a05c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8018ea0:	f7f6 ff80 	bl	800fda4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8018ea4:	4b40      	ldr	r3, [pc, #256]	; (8018fa8 <SystemClock_Config+0x138>)
 8018ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018eaa:	4a3f      	ldr	r2, [pc, #252]	; (8018fa8 <SystemClock_Config+0x138>)
 8018eac:	f023 0318 	bic.w	r3, r3, #24
 8018eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8018eb4:	2314      	movs	r3, #20
 8018eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8018eba:	2301      	movs	r3, #1
 8018ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8018ec6:	2300      	movs	r3, #0
 8018ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8018ecc:	2390      	movs	r3, #144	; 0x90
 8018ece:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8018ed2:	2302      	movs	r3, #2
 8018ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8018ed8:	2301      	movs	r3, #1
 8018eda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLM = 5;
 8018ede:	2305      	movs	r3, #5
 8018ee0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLN = 71;
 8018ee4:	2347      	movs	r3, #71	; 0x47
 8018ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8018eea:	2302      	movs	r3, #2
 8018eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8018ef0:	2302      	movs	r3, #2
 8018ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8018ef6:	2306      	movs	r3, #6
 8018ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8018efc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018f00:	4618      	mov	r0, r3
 8018f02:	f7f6 ffe3 	bl	800fecc <HAL_RCC_OscConfig>
 8018f06:	4603      	mov	r3, r0
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d001      	beq.n	8018f10 <SystemClock_Config+0xa0>
		Error_Handler();
 8018f0c:	f000 f958 	bl	80191c0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8018f10:	230f      	movs	r3, #15
 8018f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8018f16:	2303      	movs	r3, #3
 8018f18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8018f1c:	2390      	movs	r3, #144	; 0x90
 8018f1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8018f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8018f30:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018f34:	2100      	movs	r1, #0
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7f7 fbb6 	bl	80106a8 <HAL_RCC_ClockConfig>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d001      	beq.n	8018f46 <SystemClock_Config+0xd6>
		Error_Handler();
 8018f42:	f000 f93d 	bl	80191c0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8018f46:	f242 0322 	movw	r3, #8226	; 0x2022
 8018f4a:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_USB;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8018f50:	2300      	movs	r3, #0
 8018f52:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8018f54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8018f58:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8018f5e:	2305      	movs	r3, #5
 8018f60:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8018f62:	2314      	movs	r3, #20
 8018f64:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8018f66:	2302      	movs	r3, #2
 8018f68:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8018f6a:	2302      	movs	r3, #2
 8018f6c:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8018f6e:	2302      	movs	r3, #2
 8018f70:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8018f72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8018f76:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8018f78:	1d3b      	adds	r3, r7, #4
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f7f7 fd98 	bl	8010ab0 <HAL_RCCEx_PeriphCLKConfig>
 8018f80:	4603      	mov	r3, r0
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d001      	beq.n	8018f8a <SystemClock_Config+0x11a>
		Error_Handler();
 8018f86:	f000 f91b 	bl	80191c0 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8018f8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018f8e:	f7f6 ff27 	bl	800fde0 <HAL_PWREx_ControlVoltageScaling>
 8018f92:	4603      	mov	r3, r0
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d001      	beq.n	8018f9c <SystemClock_Config+0x12c>
			!= HAL_OK) {
		Error_Handler();
 8018f98:	f000 f912 	bl	80191c0 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8018f9c:	f7f8 f880 	bl	80110a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8018fa0:	bf00      	nop
 8018fa2:	37e8      	adds	r7, #232	; 0xe8
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}
 8018fa8:	40021000 	.word	0x40021000

08018fac <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8018fac:	b580      	push	{r7, lr}
 8018fae:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8018fb0:	4b12      	ldr	r3, [pc, #72]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fb2:	4a13      	ldr	r2, [pc, #76]	; (8019000 <MX_LPUART1_UART_Init+0x54>)
 8018fb4:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 209700;
 8018fb6:	4b11      	ldr	r3, [pc, #68]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fb8:	4a12      	ldr	r2, [pc, #72]	; (8019004 <MX_LPUART1_UART_Init+0x58>)
 8018fba:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8018fbc:	4b0f      	ldr	r3, [pc, #60]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fc2:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8018fc4:	4b0d      	ldr	r3, [pc, #52]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8018fca:	4b0c      	ldr	r3, [pc, #48]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fcc:	2200      	movs	r2, #0
 8018fce:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8018fd0:	4b0a      	ldr	r3, [pc, #40]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fd2:	220c      	movs	r2, #12
 8018fd4:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018fd6:	4b09      	ldr	r3, [pc, #36]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fd8:	2200      	movs	r2, #0
 8018fda:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018fdc:	4b07      	ldr	r3, [pc, #28]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fde:	2200      	movs	r2, #0
 8018fe0:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018fe2:	4b06      	ldr	r3, [pc, #24]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8018fe8:	4804      	ldr	r0, [pc, #16]	; (8018ffc <MX_LPUART1_UART_Init+0x50>)
 8018fea:	f7f8 fa33 	bl	8011454 <HAL_UART_Init>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d001      	beq.n	8018ff8 <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 8018ff4:	f000 f8e4 	bl	80191c0 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8018ff8:	bf00      	nop
 8018ffa:	bd80      	pop	{r7, pc}
 8018ffc:	2001027c 	.word	0x2001027c
 8019000:	40008000 	.word	0x40008000
 8019004:	00033324 	.word	0x00033324

08019008 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8019008:	b580      	push	{r7, lr}
 801900a:	b08a      	sub	sp, #40	; 0x28
 801900c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 801900e:	f107 0314 	add.w	r3, r7, #20
 8019012:	2200      	movs	r2, #0
 8019014:	601a      	str	r2, [r3, #0]
 8019016:	605a      	str	r2, [r3, #4]
 8019018:	609a      	str	r2, [r3, #8]
 801901a:	60da      	str	r2, [r3, #12]
 801901c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 801901e:	4b3d      	ldr	r3, [pc, #244]	; (8019114 <MX_GPIO_Init+0x10c>)
 8019020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019022:	4a3c      	ldr	r2, [pc, #240]	; (8019114 <MX_GPIO_Init+0x10c>)
 8019024:	f043 0304 	orr.w	r3, r3, #4
 8019028:	64d3      	str	r3, [r2, #76]	; 0x4c
 801902a:	4b3a      	ldr	r3, [pc, #232]	; (8019114 <MX_GPIO_Init+0x10c>)
 801902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801902e:	f003 0304 	and.w	r3, r3, #4
 8019032:	613b      	str	r3, [r7, #16]
 8019034:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8019036:	4b37      	ldr	r3, [pc, #220]	; (8019114 <MX_GPIO_Init+0x10c>)
 8019038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801903a:	4a36      	ldr	r2, [pc, #216]	; (8019114 <MX_GPIO_Init+0x10c>)
 801903c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019042:	4b34      	ldr	r3, [pc, #208]	; (8019114 <MX_GPIO_Init+0x10c>)
 8019044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801904a:	60fb      	str	r3, [r7, #12]
 801904c:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 801904e:	4b31      	ldr	r3, [pc, #196]	; (8019114 <MX_GPIO_Init+0x10c>)
 8019050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019052:	4a30      	ldr	r2, [pc, #192]	; (8019114 <MX_GPIO_Init+0x10c>)
 8019054:	f043 0302 	orr.w	r3, r3, #2
 8019058:	64d3      	str	r3, [r2, #76]	; 0x4c
 801905a:	4b2e      	ldr	r3, [pc, #184]	; (8019114 <MX_GPIO_Init+0x10c>)
 801905c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801905e:	f003 0302 	and.w	r3, r3, #2
 8019062:	60bb      	str	r3, [r7, #8]
 8019064:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 8019066:	4b2b      	ldr	r3, [pc, #172]	; (8019114 <MX_GPIO_Init+0x10c>)
 8019068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801906a:	4a2a      	ldr	r2, [pc, #168]	; (8019114 <MX_GPIO_Init+0x10c>)
 801906c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019072:	4b28      	ldr	r3, [pc, #160]	; (8019114 <MX_GPIO_Init+0x10c>)
 8019074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801907a:	607b      	str	r3, [r7, #4]
 801907c:	687b      	ldr	r3, [r7, #4]
	;
	HAL_PWREx_EnableVddIO2();
 801907e:	f7f6 ff15 	bl	800feac <HAL_PWREx_EnableVddIO2>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8019082:	2200      	movs	r2, #0
 8019084:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8019088:	4823      	ldr	r0, [pc, #140]	; (8019118 <MX_GPIO_Init+0x110>)
 801908a:	f7f5 fa4f 	bl	800e52c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 801908e:	2200      	movs	r2, #0
 8019090:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8019094:	4821      	ldr	r0, [pc, #132]	; (801911c <MX_GPIO_Init+0x114>)
 8019096:	f7f5 fa49 	bl	800e52c <HAL_GPIO_WritePin>
	USB_PowerSwitchOn_Pin | SMPS_V1_Pin | SMPS_EN_Pin | SMPS_SW_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 801909a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801909e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80190a0:	4b1f      	ldr	r3, [pc, #124]	; (8019120 <MX_GPIO_Init+0x118>)
 80190a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80190a4:	2300      	movs	r3, #0
 80190a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80190a8:	f107 0314 	add.w	r3, r7, #20
 80190ac:	4619      	mov	r1, r3
 80190ae:	481d      	ldr	r0, [pc, #116]	; (8019124 <MX_GPIO_Init+0x11c>)
 80190b0:	f7f5 f8aa 	bl	800e208 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 80190b4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80190b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80190ba:	2301      	movs	r3, #1
 80190bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80190be:	2300      	movs	r3, #0
 80190c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80190c2:	2300      	movs	r3, #0
 80190c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80190c6:	f107 0314 	add.w	r3, r7, #20
 80190ca:	4619      	mov	r1, r3
 80190cc:	4812      	ldr	r0, [pc, #72]	; (8019118 <MX_GPIO_Init+0x110>)
 80190ce:	f7f5 f89b 	bl	800e208 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin | SMPS_PG_Pin;
 80190d2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80190d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80190d8:	2300      	movs	r3, #0
 80190da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80190dc:	2300      	movs	r3, #0
 80190de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80190e0:	f107 0314 	add.w	r3, r7, #20
 80190e4:	4619      	mov	r1, r3
 80190e6:	480d      	ldr	r0, [pc, #52]	; (801911c <MX_GPIO_Init+0x114>)
 80190e8:	f7f5 f88e 	bl	800e208 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin | SMPS_V1_Pin | SMPS_EN_Pin
 80190ec:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 80190f0:	617b      	str	r3, [r7, #20]
			| SMPS_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80190f2:	2301      	movs	r3, #1
 80190f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80190f6:	2300      	movs	r3, #0
 80190f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80190fa:	2300      	movs	r3, #0
 80190fc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80190fe:	f107 0314 	add.w	r3, r7, #20
 8019102:	4619      	mov	r1, r3
 8019104:	4805      	ldr	r0, [pc, #20]	; (801911c <MX_GPIO_Init+0x114>)
 8019106:	f7f5 f87f 	bl	800e208 <HAL_GPIO_Init>

}
 801910a:	bf00      	nop
 801910c:	3728      	adds	r7, #40	; 0x28
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}
 8019112:	bf00      	nop
 8019114:	40021000 	.word	0x40021000
 8019118:	48000400 	.word	0x48000400
 801911c:	48001800 	.word	0x48001800
 8019120:	10110000 	.word	0x10110000
 8019124:	48000800 	.word	0x48000800

08019128 <mainTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void mainTask(void const * argument) {
 8019128:	b580      	push	{r7, lr}
 801912a:	b082      	sub	sp, #8
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]

	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8019130:	f000 fb8a 	bl	8019848 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
 8019134:	e7fe      	b.n	8019134 <mainTask+0xc>
	...

08019138 <ledBlueTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void ledBlueTask(void const * argument) {
 8019138:	b580      	push	{r7, lr}
 801913a:	b082      	sub	sp, #8
 801913c:	af00      	add	r7, sp, #0
 801913e:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 8019140:	20c8      	movs	r0, #200	; 0xc8
 8019142:	f7fd f894 	bl	801626e <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8019146:	2180      	movs	r1, #128	; 0x80
 8019148:	4801      	ldr	r0, [pc, #4]	; (8019150 <ledBlueTask+0x18>)
 801914a:	f7f5 fa07 	bl	800e55c <HAL_GPIO_TogglePin>
		osDelay(200);
 801914e:	e7f7      	b.n	8019140 <ledBlueTask+0x8>
 8019150:	48000400 	.word	0x48000400

08019154 <ledRedTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void ledRedTask(void const * argument) {
 8019154:	b580      	push	{r7, lr}
 8019156:	b082      	sub	sp, #8
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(400);
 801915c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8019160:	f7fd f885 	bl	801626e <osDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8019164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8019168:	4801      	ldr	r0, [pc, #4]	; (8019170 <ledRedTask+0x1c>)
 801916a:	f7f5 f9f7 	bl	800e55c <HAL_GPIO_TogglePin>
		osDelay(400);
 801916e:	e7f5      	b.n	801915c <ledRedTask+0x8>
 8019170:	48000400 	.word	0x48000400

08019174 <modbusTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void modbusTask(void const * argument) {
 8019174:	b580      	push	{r7, lr}
 8019176:	b086      	sub	sp, #24
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	IpAddr ipAddr;
	NetInterface *interface = &netInterface[0];
 801917c:	4b0d      	ldr	r3, [pc, #52]	; (80191b4 <modbusTask+0x40>)
 801917e:	617b      	str	r3, [r7, #20]

	//Initialize Modbus/TCP client context
	modbusClientInit(&modbusClientContext);
 8019180:	480d      	ldr	r0, [pc, #52]	; (80191b8 <modbusTask+0x44>)
 8019182:	f7ef ff15 	bl	8008fb0 <modbusClientInit>

    //Resolve Modbus/TCP server name
	getHostByName(NULL, APP_MODBUS_SERVER_NAME, &ipAddr, 0);
 8019186:	f107 020c 	add.w	r2, r7, #12
 801918a:	2300      	movs	r3, #0
 801918c:	490b      	ldr	r1, [pc, #44]	; (80191bc <modbusTask+0x48>)
 801918e:	2000      	movs	r0, #0
 8019190:	f7e9 ff28 	bl	8002fe4 <getHostByName>

	modbusClientBindToInterface(&modbusClientContext, interface);
 8019194:	6979      	ldr	r1, [r7, #20]
 8019196:	4808      	ldr	r0, [pc, #32]	; (80191b8 <modbusTask+0x44>)
 8019198:	f7ef ff2e 	bl	8008ff8 <modbusClientBindToInterface>

    //Establish connection with the Modbus/TCP server
	modbusClientConnect(&modbusClientContext, &ipAddr, APP_MODBUS_SERVER_PORT);
 801919c:	f107 030c 	add.w	r3, r7, #12
 80191a0:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80191a4:	4619      	mov	r1, r3
 80191a6:	4804      	ldr	r0, [pc, #16]	; (80191b8 <modbusTask+0x44>)
 80191a8:	f7ef ff3a 	bl	8009020 <modbusClientConnect>

	//Close Modbus/TCP connection
	modbusClientDisconnect(&modbusClientContext);
 80191ac:	4802      	ldr	r0, [pc, #8]	; (80191b8 <modbusTask+0x44>)
 80191ae:	f7ef ff9a 	bl	80090e6 <modbusClientDisconnect>

	/* Infinite loop */
	for (;;) {
 80191b2:	e7fe      	b.n	80191b2 <modbusTask+0x3e>
 80191b4:	2000e464 	.word	0x2000e464
 80191b8:	20010314 	.word	0x20010314
 80191bc:	0801c310 	.word	0x0801c310

080191c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80191c0:	b480      	push	{r7}
 80191c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80191c4:	bf00      	nop
 80191c6:	46bd      	mov	sp, r7
 80191c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191cc:	4770      	bx	lr
	...

080191d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b082      	sub	sp, #8
 80191d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80191d6:	4b11      	ldr	r3, [pc, #68]	; (801921c <HAL_MspInit+0x4c>)
 80191d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80191da:	4a10      	ldr	r2, [pc, #64]	; (801921c <HAL_MspInit+0x4c>)
 80191dc:	f043 0301 	orr.w	r3, r3, #1
 80191e0:	6613      	str	r3, [r2, #96]	; 0x60
 80191e2:	4b0e      	ldr	r3, [pc, #56]	; (801921c <HAL_MspInit+0x4c>)
 80191e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80191e6:	f003 0301 	and.w	r3, r3, #1
 80191ea:	607b      	str	r3, [r7, #4]
 80191ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80191ee:	4b0b      	ldr	r3, [pc, #44]	; (801921c <HAL_MspInit+0x4c>)
 80191f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191f2:	4a0a      	ldr	r2, [pc, #40]	; (801921c <HAL_MspInit+0x4c>)
 80191f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80191f8:	6593      	str	r3, [r2, #88]	; 0x58
 80191fa:	4b08      	ldr	r3, [pc, #32]	; (801921c <HAL_MspInit+0x4c>)
 80191fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019202:	603b      	str	r3, [r7, #0]
 8019204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8019206:	2200      	movs	r2, #0
 8019208:	210f      	movs	r1, #15
 801920a:	f06f 0001 	mvn.w	r0, #1
 801920e:	f7f4 ffc4 	bl	800e19a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8019212:	bf00      	nop
 8019214:	3708      	adds	r7, #8
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	40021000 	.word	0x40021000

08019220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b08a      	sub	sp, #40	; 0x28
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019228:	f107 0314 	add.w	r3, r7, #20
 801922c:	2200      	movs	r2, #0
 801922e:	601a      	str	r2, [r3, #0]
 8019230:	605a      	str	r2, [r3, #4]
 8019232:	609a      	str	r2, [r3, #8]
 8019234:	60da      	str	r2, [r3, #12]
 8019236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	4a18      	ldr	r2, [pc, #96]	; (80192a0 <HAL_UART_MspInit+0x80>)
 801923e:	4293      	cmp	r3, r2
 8019240:	d12a      	bne.n	8019298 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8019242:	4b18      	ldr	r3, [pc, #96]	; (80192a4 <HAL_UART_MspInit+0x84>)
 8019244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019246:	4a17      	ldr	r2, [pc, #92]	; (80192a4 <HAL_UART_MspInit+0x84>)
 8019248:	f043 0301 	orr.w	r3, r3, #1
 801924c:	65d3      	str	r3, [r2, #92]	; 0x5c
 801924e:	4b15      	ldr	r3, [pc, #84]	; (80192a4 <HAL_UART_MspInit+0x84>)
 8019250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019252:	f003 0301 	and.w	r3, r3, #1
 8019256:	613b      	str	r3, [r7, #16]
 8019258:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801925a:	4b12      	ldr	r3, [pc, #72]	; (80192a4 <HAL_UART_MspInit+0x84>)
 801925c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801925e:	4a11      	ldr	r2, [pc, #68]	; (80192a4 <HAL_UART_MspInit+0x84>)
 8019260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8019266:	4b0f      	ldr	r3, [pc, #60]	; (80192a4 <HAL_UART_MspInit+0x84>)
 8019268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801926a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801926e:	60fb      	str	r3, [r7, #12]
 8019270:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8019272:	f7f6 fe1b 	bl	800feac <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8019276:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801927a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801927c:	2302      	movs	r3, #2
 801927e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019280:	2300      	movs	r3, #0
 8019282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019284:	2303      	movs	r3, #3
 8019286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8019288:	2308      	movs	r3, #8
 801928a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801928c:	f107 0314 	add.w	r3, r7, #20
 8019290:	4619      	mov	r1, r3
 8019292:	4805      	ldr	r0, [pc, #20]	; (80192a8 <HAL_UART_MspInit+0x88>)
 8019294:	f7f4 ffb8 	bl	800e208 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8019298:	bf00      	nop
 801929a:	3728      	adds	r7, #40	; 0x28
 801929c:	46bd      	mov	sp, r7
 801929e:	bd80      	pop	{r7, pc}
 80192a0:	40008000 	.word	0x40008000
 80192a4:	40021000 	.word	0x40021000
 80192a8:	48001800 	.word	0x48001800

080192ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80192ac:	b480      	push	{r7}
 80192ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80192b0:	bf00      	nop
 80192b2:	46bd      	mov	sp, r7
 80192b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b8:	4770      	bx	lr

080192ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80192ba:	b480      	push	{r7}
 80192bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80192be:	e7fe      	b.n	80192be <HardFault_Handler+0x4>

080192c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80192c0:	b480      	push	{r7}
 80192c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80192c4:	e7fe      	b.n	80192c4 <MemManage_Handler+0x4>

080192c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80192c6:	b480      	push	{r7}
 80192c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80192ca:	e7fe      	b.n	80192ca <BusFault_Handler+0x4>

080192cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80192cc:	b480      	push	{r7}
 80192ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80192d0:	e7fe      	b.n	80192d0 <UsageFault_Handler+0x4>

080192d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80192d2:	b480      	push	{r7}
 80192d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80192d6:	bf00      	nop
 80192d8:	46bd      	mov	sp, r7
 80192da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192de:	4770      	bx	lr

080192e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80192e4:	f7f4 fe3e 	bl	800df64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80192e8:	f7fe fecc 	bl	8018084 <xTaskGetSchedulerState>
 80192ec:	4603      	mov	r3, r0
 80192ee:	2b01      	cmp	r3, #1
 80192f0:	d001      	beq.n	80192f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80192f2:	f7ff fab9 	bl	8018868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80192f6:	bf00      	nop
 80192f8:	bd80      	pop	{r7, pc}
	...

080192fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8019300:	4802      	ldr	r0, [pc, #8]	; (801930c <OTG_FS_IRQHandler+0x10>)
 8019302:	f7f5 fbc5 	bl	800ea90 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8019306:	bf00      	nop
 8019308:	bd80      	pop	{r7, pc}
 801930a:	bf00      	nop
 801930c:	20014188 	.word	0x20014188

08019310 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b086      	sub	sp, #24
 8019314:	af00      	add	r7, sp, #0
 8019316:	60f8      	str	r0, [r7, #12]
 8019318:	60b9      	str	r1, [r7, #8]
 801931a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801931c:	2300      	movs	r3, #0
 801931e:	617b      	str	r3, [r7, #20]
 8019320:	e00a      	b.n	8019338 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8019322:	f3af 8000 	nop.w
 8019326:	4601      	mov	r1, r0
 8019328:	68bb      	ldr	r3, [r7, #8]
 801932a:	1c5a      	adds	r2, r3, #1
 801932c:	60ba      	str	r2, [r7, #8]
 801932e:	b2ca      	uxtb	r2, r1
 8019330:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8019332:	697b      	ldr	r3, [r7, #20]
 8019334:	3301      	adds	r3, #1
 8019336:	617b      	str	r3, [r7, #20]
 8019338:	697a      	ldr	r2, [r7, #20]
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	429a      	cmp	r2, r3
 801933e:	dbf0      	blt.n	8019322 <_read+0x12>
	}

return len;
 8019340:	687b      	ldr	r3, [r7, #4]
}
 8019342:	4618      	mov	r0, r3
 8019344:	3718      	adds	r7, #24
 8019346:	46bd      	mov	sp, r7
 8019348:	bd80      	pop	{r7, pc}

0801934a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801934a:	b580      	push	{r7, lr}
 801934c:	b086      	sub	sp, #24
 801934e:	af00      	add	r7, sp, #0
 8019350:	60f8      	str	r0, [r7, #12]
 8019352:	60b9      	str	r1, [r7, #8]
 8019354:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8019356:	2300      	movs	r3, #0
 8019358:	617b      	str	r3, [r7, #20]
 801935a:	e009      	b.n	8019370 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801935c:	68bb      	ldr	r3, [r7, #8]
 801935e:	1c5a      	adds	r2, r3, #1
 8019360:	60ba      	str	r2, [r7, #8]
 8019362:	781b      	ldrb	r3, [r3, #0]
 8019364:	4618      	mov	r0, r3
 8019366:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801936a:	697b      	ldr	r3, [r7, #20]
 801936c:	3301      	adds	r3, #1
 801936e:	617b      	str	r3, [r7, #20]
 8019370:	697a      	ldr	r2, [r7, #20]
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	429a      	cmp	r2, r3
 8019376:	dbf1      	blt.n	801935c <_write+0x12>
	}
	return len;
 8019378:	687b      	ldr	r3, [r7, #4]
}
 801937a:	4618      	mov	r0, r3
 801937c:	3718      	adds	r7, #24
 801937e:	46bd      	mov	sp, r7
 8019380:	bd80      	pop	{r7, pc}

08019382 <_close>:

int _close(int file)
{
 8019382:	b480      	push	{r7}
 8019384:	b083      	sub	sp, #12
 8019386:	af00      	add	r7, sp, #0
 8019388:	6078      	str	r0, [r7, #4]
	return -1;
 801938a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801938e:	4618      	mov	r0, r3
 8019390:	370c      	adds	r7, #12
 8019392:	46bd      	mov	sp, r7
 8019394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019398:	4770      	bx	lr

0801939a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801939a:	b480      	push	{r7}
 801939c:	b083      	sub	sp, #12
 801939e:	af00      	add	r7, sp, #0
 80193a0:	6078      	str	r0, [r7, #4]
 80193a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80193a4:	683b      	ldr	r3, [r7, #0]
 80193a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80193aa:	605a      	str	r2, [r3, #4]
	return 0;
 80193ac:	2300      	movs	r3, #0
}
 80193ae:	4618      	mov	r0, r3
 80193b0:	370c      	adds	r7, #12
 80193b2:	46bd      	mov	sp, r7
 80193b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b8:	4770      	bx	lr

080193ba <_isatty>:

int _isatty(int file)
{
 80193ba:	b480      	push	{r7}
 80193bc:	b083      	sub	sp, #12
 80193be:	af00      	add	r7, sp, #0
 80193c0:	6078      	str	r0, [r7, #4]
	return 1;
 80193c2:	2301      	movs	r3, #1
}
 80193c4:	4618      	mov	r0, r3
 80193c6:	370c      	adds	r7, #12
 80193c8:	46bd      	mov	sp, r7
 80193ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ce:	4770      	bx	lr

080193d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80193d0:	b480      	push	{r7}
 80193d2:	b085      	sub	sp, #20
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	60f8      	str	r0, [r7, #12]
 80193d8:	60b9      	str	r1, [r7, #8]
 80193da:	607a      	str	r2, [r7, #4]
	return 0;
 80193dc:	2300      	movs	r3, #0
}
 80193de:	4618      	mov	r0, r3
 80193e0:	3714      	adds	r7, #20
 80193e2:	46bd      	mov	sp, r7
 80193e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e8:	4770      	bx	lr
	...

080193ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b084      	sub	sp, #16
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80193f4:	4b11      	ldr	r3, [pc, #68]	; (801943c <_sbrk+0x50>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d102      	bne.n	8019402 <_sbrk+0x16>
		heap_end = &end;
 80193fc:	4b0f      	ldr	r3, [pc, #60]	; (801943c <_sbrk+0x50>)
 80193fe:	4a10      	ldr	r2, [pc, #64]	; (8019440 <_sbrk+0x54>)
 8019400:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8019402:	4b0e      	ldr	r3, [pc, #56]	; (801943c <_sbrk+0x50>)
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8019408:	4b0c      	ldr	r3, [pc, #48]	; (801943c <_sbrk+0x50>)
 801940a:	681a      	ldr	r2, [r3, #0]
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	4413      	add	r3, r2
 8019410:	466a      	mov	r2, sp
 8019412:	4293      	cmp	r3, r2
 8019414:	d907      	bls.n	8019426 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8019416:	f000 fd35 	bl	8019e84 <__errno>
 801941a:	4602      	mov	r2, r0
 801941c:	230c      	movs	r3, #12
 801941e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8019420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019424:	e006      	b.n	8019434 <_sbrk+0x48>
	}

	heap_end += incr;
 8019426:	4b05      	ldr	r3, [pc, #20]	; (801943c <_sbrk+0x50>)
 8019428:	681a      	ldr	r2, [r3, #0]
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	4413      	add	r3, r2
 801942e:	4a03      	ldr	r2, [pc, #12]	; (801943c <_sbrk+0x50>)
 8019430:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8019432:	68fb      	ldr	r3, [r7, #12]
}
 8019434:	4618      	mov	r0, r3
 8019436:	3710      	adds	r7, #16
 8019438:	46bd      	mov	sp, r7
 801943a:	bd80      	pop	{r7, pc}
 801943c:	2000e3c8 	.word	0x2000e3c8
 8019440:	20014450 	.word	0x20014450

08019444 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8019444:	b480      	push	{r7}
 8019446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8019448:	4b17      	ldr	r3, [pc, #92]	; (80194a8 <SystemInit+0x64>)
 801944a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801944e:	4a16      	ldr	r2, [pc, #88]	; (80194a8 <SystemInit+0x64>)
 8019450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8019458:	4b14      	ldr	r3, [pc, #80]	; (80194ac <SystemInit+0x68>)
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	4a13      	ldr	r2, [pc, #76]	; (80194ac <SystemInit+0x68>)
 801945e:	f043 0301 	orr.w	r3, r3, #1
 8019462:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8019464:	4b11      	ldr	r3, [pc, #68]	; (80194ac <SystemInit+0x68>)
 8019466:	2200      	movs	r2, #0
 8019468:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801946a:	4b10      	ldr	r3, [pc, #64]	; (80194ac <SystemInit+0x68>)
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	4a0f      	ldr	r2, [pc, #60]	; (80194ac <SystemInit+0x68>)
 8019470:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8019474:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8019478:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801947a:	4b0c      	ldr	r3, [pc, #48]	; (80194ac <SystemInit+0x68>)
 801947c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019480:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8019482:	4b0a      	ldr	r3, [pc, #40]	; (80194ac <SystemInit+0x68>)
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	4a09      	ldr	r2, [pc, #36]	; (80194ac <SystemInit+0x68>)
 8019488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801948c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 801948e:	4b07      	ldr	r3, [pc, #28]	; (80194ac <SystemInit+0x68>)
 8019490:	2200      	movs	r2, #0
 8019492:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8019494:	4b04      	ldr	r3, [pc, #16]	; (80194a8 <SystemInit+0x64>)
 8019496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801949a:	609a      	str	r2, [r3, #8]
#endif
}
 801949c:	bf00      	nop
 801949e:	46bd      	mov	sp, r7
 80194a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a4:	4770      	bx	lr
 80194a6:	bf00      	nop
 80194a8:	e000ed00 	.word	0xe000ed00
 80194ac:	40021000 	.word	0x40021000

080194b0 <__NVIC_SetPriorityGrouping>:
{
 80194b0:	b480      	push	{r7}
 80194b2:	b085      	sub	sp, #20
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f003 0307 	and.w	r3, r3, #7
 80194be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80194c0:	4b0c      	ldr	r3, [pc, #48]	; (80194f4 <__NVIC_SetPriorityGrouping+0x44>)
 80194c2:	68db      	ldr	r3, [r3, #12]
 80194c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80194c6:	68ba      	ldr	r2, [r7, #8]
 80194c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80194cc:	4013      	ands	r3, r2
 80194ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80194d4:	68bb      	ldr	r3, [r7, #8]
 80194d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80194d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80194dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80194e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80194e2:	4a04      	ldr	r2, [pc, #16]	; (80194f4 <__NVIC_SetPriorityGrouping+0x44>)
 80194e4:	68bb      	ldr	r3, [r7, #8]
 80194e6:	60d3      	str	r3, [r2, #12]
}
 80194e8:	bf00      	nop
 80194ea:	3714      	adds	r7, #20
 80194ec:	46bd      	mov	sp, r7
 80194ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f2:	4770      	bx	lr
 80194f4:	e000ed00 	.word	0xe000ed00

080194f8 <__NVIC_EnableIRQ>:
{
 80194f8:	b480      	push	{r7}
 80194fa:	b083      	sub	sp, #12
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	4603      	mov	r3, r0
 8019500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019506:	2b00      	cmp	r3, #0
 8019508:	db0b      	blt.n	8019522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801950a:	79fb      	ldrb	r3, [r7, #7]
 801950c:	f003 021f 	and.w	r2, r3, #31
 8019510:	4907      	ldr	r1, [pc, #28]	; (8019530 <__NVIC_EnableIRQ+0x38>)
 8019512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019516:	095b      	lsrs	r3, r3, #5
 8019518:	2001      	movs	r0, #1
 801951a:	fa00 f202 	lsl.w	r2, r0, r2
 801951e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019522:	bf00      	nop
 8019524:	370c      	adds	r7, #12
 8019526:	46bd      	mov	sp, r7
 8019528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952c:	4770      	bx	lr
 801952e:	bf00      	nop
 8019530:	e000e100 	.word	0xe000e100

08019534 <__NVIC_DisableIRQ>:
{
 8019534:	b480      	push	{r7}
 8019536:	b083      	sub	sp, #12
 8019538:	af00      	add	r7, sp, #0
 801953a:	4603      	mov	r3, r0
 801953c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801953e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019542:	2b00      	cmp	r3, #0
 8019544:	db10      	blt.n	8019568 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019546:	79fb      	ldrb	r3, [r7, #7]
 8019548:	f003 021f 	and.w	r2, r3, #31
 801954c:	4909      	ldr	r1, [pc, #36]	; (8019574 <__NVIC_DisableIRQ+0x40>)
 801954e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019552:	095b      	lsrs	r3, r3, #5
 8019554:	2001      	movs	r0, #1
 8019556:	fa00 f202 	lsl.w	r2, r0, r2
 801955a:	3320      	adds	r3, #32
 801955c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8019560:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8019564:	f3bf 8f6f 	isb	sy
}
 8019568:	bf00      	nop
 801956a:	370c      	adds	r7, #12
 801956c:	46bd      	mov	sp, r7
 801956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019572:	4770      	bx	lr
 8019574:	e000e100 	.word	0xe000e100

08019578 <__NVIC_SetPriority>:
{
 8019578:	b480      	push	{r7}
 801957a:	b083      	sub	sp, #12
 801957c:	af00      	add	r7, sp, #0
 801957e:	4603      	mov	r3, r0
 8019580:	6039      	str	r1, [r7, #0]
 8019582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019588:	2b00      	cmp	r3, #0
 801958a:	db0a      	blt.n	80195a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	b2da      	uxtb	r2, r3
 8019590:	490c      	ldr	r1, [pc, #48]	; (80195c4 <__NVIC_SetPriority+0x4c>)
 8019592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019596:	0112      	lsls	r2, r2, #4
 8019598:	b2d2      	uxtb	r2, r2
 801959a:	440b      	add	r3, r1
 801959c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80195a0:	e00a      	b.n	80195b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80195a2:	683b      	ldr	r3, [r7, #0]
 80195a4:	b2da      	uxtb	r2, r3
 80195a6:	4908      	ldr	r1, [pc, #32]	; (80195c8 <__NVIC_SetPriority+0x50>)
 80195a8:	79fb      	ldrb	r3, [r7, #7]
 80195aa:	f003 030f 	and.w	r3, r3, #15
 80195ae:	3b04      	subs	r3, #4
 80195b0:	0112      	lsls	r2, r2, #4
 80195b2:	b2d2      	uxtb	r2, r2
 80195b4:	440b      	add	r3, r1
 80195b6:	761a      	strb	r2, [r3, #24]
}
 80195b8:	bf00      	nop
 80195ba:	370c      	adds	r7, #12
 80195bc:	46bd      	mov	sp, r7
 80195be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c2:	4770      	bx	lr
 80195c4:	e000e100 	.word	0xe000e100
 80195c8:	e000ed00 	.word	0xe000ed00

080195cc <NVIC_EncodePriority>:
{
 80195cc:	b480      	push	{r7}
 80195ce:	b089      	sub	sp, #36	; 0x24
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	60f8      	str	r0, [r7, #12]
 80195d4:	60b9      	str	r1, [r7, #8]
 80195d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	f003 0307 	and.w	r3, r3, #7
 80195de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80195e0:	69fb      	ldr	r3, [r7, #28]
 80195e2:	f1c3 0307 	rsb	r3, r3, #7
 80195e6:	2b04      	cmp	r3, #4
 80195e8:	bf28      	it	cs
 80195ea:	2304      	movcs	r3, #4
 80195ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80195ee:	69fb      	ldr	r3, [r7, #28]
 80195f0:	3304      	adds	r3, #4
 80195f2:	2b06      	cmp	r3, #6
 80195f4:	d902      	bls.n	80195fc <NVIC_EncodePriority+0x30>
 80195f6:	69fb      	ldr	r3, [r7, #28]
 80195f8:	3b03      	subs	r3, #3
 80195fa:	e000      	b.n	80195fe <NVIC_EncodePriority+0x32>
 80195fc:	2300      	movs	r3, #0
 80195fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019604:	69bb      	ldr	r3, [r7, #24]
 8019606:	fa02 f303 	lsl.w	r3, r2, r3
 801960a:	43da      	mvns	r2, r3
 801960c:	68bb      	ldr	r3, [r7, #8]
 801960e:	401a      	ands	r2, r3
 8019610:	697b      	ldr	r3, [r7, #20]
 8019612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019618:	697b      	ldr	r3, [r7, #20]
 801961a:	fa01 f303 	lsl.w	r3, r1, r3
 801961e:	43d9      	mvns	r1, r3
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019624:	4313      	orrs	r3, r2
}
 8019626:	4618      	mov	r0, r3
 8019628:	3724      	adds	r7, #36	; 0x24
 801962a:	46bd      	mov	sp, r7
 801962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019630:	4770      	bx	lr
	...

08019634 <uartInit>:
 * @brief UART configuration
 * @return Error code
 **/

error_t uartInit(void)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b088      	sub	sp, #32
 8019638:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStructure;

   //Enable PWR clock
   __HAL_RCC_PWR_CLK_ENABLE();
 801963a:	4b3c      	ldr	r3, [pc, #240]	; (801972c <uartInit+0xf8>)
 801963c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801963e:	4a3b      	ldr	r2, [pc, #236]	; (801972c <uartInit+0xf8>)
 8019640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019644:	6593      	str	r3, [r2, #88]	; 0x58
 8019646:	4b39      	ldr	r3, [pc, #228]	; (801972c <uartInit+0xf8>)
 8019648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801964a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801964e:	60bb      	str	r3, [r7, #8]
 8019650:	68bb      	ldr	r3, [r7, #8]

   //Enable GPIOA clocks
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8019652:	4b36      	ldr	r3, [pc, #216]	; (801972c <uartInit+0xf8>)
 8019654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019656:	4a35      	ldr	r2, [pc, #212]	; (801972c <uartInit+0xf8>)
 8019658:	f043 0301 	orr.w	r3, r3, #1
 801965c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801965e:	4b33      	ldr	r3, [pc, #204]	; (801972c <uartInit+0xf8>)
 8019660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019662:	f003 0301 	and.w	r3, r3, #1
 8019666:	607b      	str	r3, [r7, #4]
 8019668:	687b      	ldr	r3, [r7, #4]

   //Enable USART1 clock
   __HAL_RCC_USART2_CLK_ENABLE();
 801966a:	4b30      	ldr	r3, [pc, #192]	; (801972c <uartInit+0xf8>)
 801966c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801966e:	4a2f      	ldr	r2, [pc, #188]	; (801972c <uartInit+0xf8>)
 8019670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019674:	6593      	str	r3, [r2, #88]	; 0x58
 8019676:	4b2d      	ldr	r3, [pc, #180]	; (801972c <uartInit+0xf8>)
 8019678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801967a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801967e:	603b      	str	r3, [r7, #0]
 8019680:	683b      	ldr	r3, [r7, #0]

   //Configure USART1_TX (PA2) and USART1_RX (PA3)
   GPIO_InitStructure.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8019682:	230c      	movs	r3, #12
 8019684:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8019686:	2302      	movs	r3, #2
 8019688:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 801968a:	2300      	movs	r3, #0
 801968c:	617b      	str	r3, [r7, #20]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801968e:	2301      	movs	r3, #1
 8019690:	61bb      	str	r3, [r7, #24]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8019692:	2307      	movs	r3, #7
 8019694:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8019696:	f107 030c 	add.w	r3, r7, #12
 801969a:	4619      	mov	r1, r3
 801969c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80196a0:	f7f4 fdb2 	bl	800e208 <HAL_GPIO_Init>

   //Configure USART2
   UART_Handle.Instance = USART2;
 80196a4:	4b22      	ldr	r3, [pc, #136]	; (8019730 <uartInit+0xfc>)
 80196a6:	4a23      	ldr	r2, [pc, #140]	; (8019734 <uartInit+0x100>)
 80196a8:	601a      	str	r2, [r3, #0]
   UART_Handle.Init.BaudRate = 115200;
 80196aa:	4b21      	ldr	r3, [pc, #132]	; (8019730 <uartInit+0xfc>)
 80196ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80196b0:	605a      	str	r2, [r3, #4]
   UART_Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80196b2:	4b1f      	ldr	r3, [pc, #124]	; (8019730 <uartInit+0xfc>)
 80196b4:	2200      	movs	r2, #0
 80196b6:	609a      	str	r2, [r3, #8]
   UART_Handle.Init.StopBits = UART_STOPBITS_1;
 80196b8:	4b1d      	ldr	r3, [pc, #116]	; (8019730 <uartInit+0xfc>)
 80196ba:	2200      	movs	r2, #0
 80196bc:	60da      	str	r2, [r3, #12]
   UART_Handle.Init.Parity = UART_PARITY_NONE;
 80196be:	4b1c      	ldr	r3, [pc, #112]	; (8019730 <uartInit+0xfc>)
 80196c0:	2200      	movs	r2, #0
 80196c2:	611a      	str	r2, [r3, #16]
   UART_Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80196c4:	4b1a      	ldr	r3, [pc, #104]	; (8019730 <uartInit+0xfc>)
 80196c6:	2200      	movs	r2, #0
 80196c8:	619a      	str	r2, [r3, #24]
   UART_Handle.Init.Mode = UART_MODE_TX_RX;
 80196ca:	4b19      	ldr	r3, [pc, #100]	; (8019730 <uartInit+0xfc>)
 80196cc:	220c      	movs	r2, #12
 80196ce:	615a      	str	r2, [r3, #20]
   HAL_UART_Init(&UART_Handle);
 80196d0:	4817      	ldr	r0, [pc, #92]	; (8019730 <uartInit+0xfc>)
 80196d2:	f7f7 febf 	bl	8011454 <HAL_UART_Init>

   //Configure USART2 interrupts
   __HAL_UART_ENABLE_IT(&UART_Handle, UART_IT_TXE);
 80196d6:	4b16      	ldr	r3, [pc, #88]	; (8019730 <uartInit+0xfc>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	681a      	ldr	r2, [r3, #0]
 80196dc:	4b14      	ldr	r3, [pc, #80]	; (8019730 <uartInit+0xfc>)
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80196e4:	601a      	str	r2, [r3, #0]
   __HAL_UART_ENABLE_IT(&UART_Handle, UART_IT_RXNE);
 80196e6:	4b12      	ldr	r3, [pc, #72]	; (8019730 <uartInit+0xfc>)
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	681a      	ldr	r2, [r3, #0]
 80196ec:	4b10      	ldr	r3, [pc, #64]	; (8019730 <uartInit+0xfc>)
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	f042 0220 	orr.w	r2, r2, #32
 80196f4:	601a      	str	r2, [r3, #0]

   //Set priority grouping (4 bits for pre-emption priority, no bits
   //for subpriority)
   NVIC_SetPriorityGrouping(3);
 80196f6:	2003      	movs	r0, #3
 80196f8:	f7ff feda 	bl	80194b0 <__NVIC_SetPriorityGrouping>

   //Configure Ethernet interrupt priority
   NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(3, 12, 0));
 80196fc:	2200      	movs	r2, #0
 80196fe:	210c      	movs	r1, #12
 8019700:	2003      	movs	r0, #3
 8019702:	f7ff ff63 	bl	80195cc <NVIC_EncodePriority>
 8019706:	4603      	mov	r3, r0
 8019708:	4619      	mov	r1, r3
 801970a:	2026      	movs	r0, #38	; 0x26
 801970c:	f7ff ff34 	bl	8019578 <__NVIC_SetPriority>

   //Enable USART1
   __HAL_UART_ENABLE(&UART_Handle);
 8019710:	4b07      	ldr	r3, [pc, #28]	; (8019730 <uartInit+0xfc>)
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	681a      	ldr	r2, [r3, #0]
 8019716:	4b06      	ldr	r3, [pc, #24]	; (8019730 <uartInit+0xfc>)
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	f042 0201 	orr.w	r2, r2, #1
 801971e:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8019720:	2300      	movs	r3, #0
}
 8019722:	4618      	mov	r0, r3
 8019724:	3720      	adds	r7, #32
 8019726:	46bd      	mov	sp, r7
 8019728:	bd80      	pop	{r7, pc}
 801972a:	bf00      	nop
 801972c:	40021000 	.word	0x40021000
 8019730:	2000e3cc 	.word	0x2000e3cc
 8019734:	40004400 	.word	0x40004400

08019738 <uartEnableIrq>:
/**
 * @brief Enable UART interrupts
 **/

void uartEnableIrq(void)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	af00      	add	r7, sp, #0
   //Enable USART1 interrupts
   NVIC_EnableIRQ(USART2_IRQn);
 801973c:	2026      	movs	r0, #38	; 0x26
 801973e:	f7ff fedb 	bl	80194f8 <__NVIC_EnableIRQ>
}
 8019742:	bf00      	nop
 8019744:	bd80      	pop	{r7, pc}

08019746 <uartDisableIrq>:
/**
 * @brief Disable UART interrupts
 **/

void uartDisableIrq(void)
{
 8019746:	b580      	push	{r7, lr}
 8019748:	af00      	add	r7, sp, #0
   //Disable USART2 interrupt
   NVIC_DisableIRQ(USART2_IRQn);
 801974a:	2026      	movs	r0, #38	; 0x26
 801974c:	f7ff fef2 	bl	8019534 <__NVIC_DisableIRQ>
}
 8019750:	bf00      	nop
 8019752:	bd80      	pop	{r7, pc}

08019754 <uartStartTx>:
/**
 * @brief Start transmission
 **/

void uartStartTx(void)
{
 8019754:	b480      	push	{r7}
 8019756:	af00      	add	r7, sp, #0
   //Enable TXE interrupt
   __HAL_UART_ENABLE_IT(&UART_Handle, UART_IT_TXE);
 8019758:	4b06      	ldr	r3, [pc, #24]	; (8019774 <uartStartTx+0x20>)
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	681a      	ldr	r2, [r3, #0]
 801975e:	4b05      	ldr	r3, [pc, #20]	; (8019774 <uartStartTx+0x20>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019766:	601a      	str	r2, [r3, #0]
}
 8019768:	bf00      	nop
 801976a:	46bd      	mov	sp, r7
 801976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019770:	4770      	bx	lr
 8019772:	bf00      	nop
 8019774:	2000e3cc 	.word	0x2000e3cc

08019778 <USART2_IRQHandler>:
/**
 * @brief UART interrupt handler
 **/

void USART2_IRQHandler(void)
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b084      	sub	sp, #16
 801977c:	af00      	add	r7, sp, #0

   //Enter interrupt service routine
   osEnterIsr();

   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 801977e:	2300      	movs	r3, #0
 8019780:	60fb      	str	r3, [r7, #12]

   //Point to the PPP network interface
   interface = &netInterface[0];
 8019782:	4b2f      	ldr	r3, [pc, #188]	; (8019840 <USART2_IRQHandler+0xc8>)
 8019784:	60bb      	str	r3, [r7, #8]

   //TXE interrupt?
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_TXE) != RESET &&
 8019786:	4b2f      	ldr	r3, [pc, #188]	; (8019844 <USART2_IRQHandler+0xcc>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	69db      	ldr	r3, [r3, #28]
 801978c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019790:	2b80      	cmp	r3, #128	; 0x80
 8019792:	d121      	bne.n	80197d8 <USART2_IRQHandler+0x60>
      __HAL_UART_GET_IT_SOURCE(&UART_Handle, UART_IT_TXE) != RESET)
 8019794:	4b2b      	ldr	r3, [pc, #172]	; (8019844 <USART2_IRQHandler+0xcc>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	f003 0380 	and.w	r3, r3, #128	; 0x80
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_TXE) != RESET &&
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d01a      	beq.n	80197d8 <USART2_IRQHandler+0x60>
   {
      //Get next character
      flag |= pppHdlcDriverReadTxQueue(interface, &c);
 80197a2:	1d3b      	adds	r3, r7, #4
 80197a4:	4619      	mov	r1, r3
 80197a6:	68b8      	ldr	r0, [r7, #8]
 80197a8:	f7f3 ffe6 	bl	800d778 <pppHdlcDriverReadTxQueue>
 80197ac:	4602      	mov	r2, r0
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	4313      	orrs	r3, r2
 80197b2:	60fb      	str	r3, [r7, #12]

      //Valid character read?
      if(c != EOF)
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80197ba:	d005      	beq.n	80197c8 <USART2_IRQHandler+0x50>
      {
         //Send data byte
         UART_Handle.Instance->TDR = c;
 80197bc:	687a      	ldr	r2, [r7, #4]
 80197be:	4b21      	ldr	r3, [pc, #132]	; (8019844 <USART2_IRQHandler+0xcc>)
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	b292      	uxth	r2, r2
 80197c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80197c6:	e007      	b.n	80197d8 <USART2_IRQHandler+0x60>
      }
      else
      {
         //Disable TXE interrupt
         __HAL_UART_DISABLE_IT(&UART_Handle, UART_IT_TXE);
 80197c8:	4b1e      	ldr	r3, [pc, #120]	; (8019844 <USART2_IRQHandler+0xcc>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	681a      	ldr	r2, [r3, #0]
 80197ce:	4b1d      	ldr	r3, [pc, #116]	; (8019844 <USART2_IRQHandler+0xcc>)
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80197d6:	601a      	str	r2, [r3, #0]
      }
   }

   //RXNE interrupt?
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_RXNE) != RESET &&
 80197d8:	4b1a      	ldr	r3, [pc, #104]	; (8019844 <USART2_IRQHandler+0xcc>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	69db      	ldr	r3, [r3, #28]
 80197de:	f003 0320 	and.w	r3, r3, #32
 80197e2:	2b20      	cmp	r3, #32
 80197e4:	d115      	bne.n	8019812 <USART2_IRQHandler+0x9a>
      __HAL_UART_GET_IT_SOURCE(&UART_Handle, UART_IT_RXNE) != RESET)
 80197e6:	4b17      	ldr	r3, [pc, #92]	; (8019844 <USART2_IRQHandler+0xcc>)
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	f003 0320 	and.w	r3, r3, #32
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_RXNE) != RESET &&
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d00e      	beq.n	8019812 <USART2_IRQHandler+0x9a>
   {
      //Read data byte
      c = UART_Handle.Instance->RDR;
 80197f4:	4b13      	ldr	r3, [pc, #76]	; (8019844 <USART2_IRQHandler+0xcc>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80197fa:	b29b      	uxth	r3, r3
 80197fc:	607b      	str	r3, [r7, #4]
      //Process incoming character
      flag |= pppHdlcDriverWriteRxQueue(interface, c);
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	b2db      	uxtb	r3, r3
 8019802:	4619      	mov	r1, r3
 8019804:	68b8      	ldr	r0, [r7, #8]
 8019806:	f7f4 f80d 	bl	800d824 <pppHdlcDriverWriteRxQueue>
 801980a:	4602      	mov	r2, r0
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	4313      	orrs	r3, r2
 8019810:	60fb      	str	r3, [r7, #12]
   }

   //ORE interrupt?
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_ORE) != RESET &&
 8019812:	4b0c      	ldr	r3, [pc, #48]	; (8019844 <USART2_IRQHandler+0xcc>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	69db      	ldr	r3, [r3, #28]
 8019818:	f003 0308 	and.w	r3, r3, #8
 801981c:	2b08      	cmp	r3, #8
 801981e:	d10a      	bne.n	8019836 <USART2_IRQHandler+0xbe>
      __HAL_UART_GET_IT_SOURCE(&UART_Handle, UART_IT_RXNE) != RESET)
 8019820:	4b08      	ldr	r3, [pc, #32]	; (8019844 <USART2_IRQHandler+0xcc>)
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	f003 0320 	and.w	r3, r3, #32
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_ORE) != RESET &&
 801982a:	2b00      	cmp	r3, #0
 801982c:	d003      	beq.n	8019836 <USART2_IRQHandler+0xbe>
   {
      //Clear ORE interrupt flag
      __HAL_UART_CLEAR_OREFLAG(&UART_Handle);
 801982e:	4b05      	ldr	r3, [pc, #20]	; (8019844 <USART2_IRQHandler+0xcc>)
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	2208      	movs	r2, #8
 8019834:	621a      	str	r2, [r3, #32]
   }

   //Leave interrupt service routine
   osExitIsr(flag);
}
 8019836:	bf00      	nop
 8019838:	3710      	adds	r7, #16
 801983a:	46bd      	mov	sp, r7
 801983c:	bd80      	pop	{r7, pc}
 801983e:	bf00      	nop
 8019840:	2000e464 	.word	0x2000e464
 8019844:	2000e3cc 	.word	0x2000e3cc

08019848 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019848:	b580      	push	{r7, lr}
 801984a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801984c:	2201      	movs	r2, #1
 801984e:	490e      	ldr	r1, [pc, #56]	; (8019888 <MX_USB_HOST_Init+0x40>)
 8019850:	480e      	ldr	r0, [pc, #56]	; (801988c <MX_USB_HOST_Init+0x44>)
 8019852:	f7fb f85b 	bl	801490c <USBH_Init>
 8019856:	4603      	mov	r3, r0
 8019858:	2b00      	cmp	r3, #0
 801985a:	d001      	beq.n	8019860 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801985c:	f7ff fcb0 	bl	80191c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 8019860:	490b      	ldr	r1, [pc, #44]	; (8019890 <MX_USB_HOST_Init+0x48>)
 8019862:	480a      	ldr	r0, [pc, #40]	; (801988c <MX_USB_HOST_Init+0x44>)
 8019864:	f7fb f8ee 	bl	8014a44 <USBH_RegisterClass>
 8019868:	4603      	mov	r3, r0
 801986a:	2b00      	cmp	r3, #0
 801986c:	d001      	beq.n	8019872 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801986e:	f7ff fca7 	bl	80191c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8019872:	4806      	ldr	r0, [pc, #24]	; (801988c <MX_USB_HOST_Init+0x44>)
 8019874:	f7fb f98b 	bl	8014b8e <USBH_Start>
 8019878:	4603      	mov	r3, r0
 801987a:	2b00      	cmp	r3, #0
 801987c:	d001      	beq.n	8019882 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801987e:	f7ff fc9f 	bl	80191c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8019882:	bf00      	nop
 8019884:	bd80      	pop	{r7, pc}
 8019886:	bf00      	nop
 8019888:	08019895 	.word	0x08019895
 801988c:	20013ce0 	.word	0x20013ce0
 8019890:	20000030 	.word	0x20000030

08019894 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8019894:	b480      	push	{r7}
 8019896:	b083      	sub	sp, #12
 8019898:	af00      	add	r7, sp, #0
 801989a:	6078      	str	r0, [r7, #4]
 801989c:	460b      	mov	r3, r1
 801989e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80198a0:	78fb      	ldrb	r3, [r7, #3]
 80198a2:	3b01      	subs	r3, #1
 80198a4:	2b04      	cmp	r3, #4
 80198a6:	d819      	bhi.n	80198dc <USBH_UserProcess+0x48>
 80198a8:	a201      	add	r2, pc, #4	; (adr r2, 80198b0 <USBH_UserProcess+0x1c>)
 80198aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198ae:	bf00      	nop
 80198b0:	080198dd 	.word	0x080198dd
 80198b4:	080198cd 	.word	0x080198cd
 80198b8:	080198dd 	.word	0x080198dd
 80198bc:	080198d5 	.word	0x080198d5
 80198c0:	080198c5 	.word	0x080198c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80198c4:	4b09      	ldr	r3, [pc, #36]	; (80198ec <USBH_UserProcess+0x58>)
 80198c6:	2203      	movs	r2, #3
 80198c8:	701a      	strb	r2, [r3, #0]
  break;
 80198ca:	e008      	b.n	80198de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80198cc:	4b07      	ldr	r3, [pc, #28]	; (80198ec <USBH_UserProcess+0x58>)
 80198ce:	2202      	movs	r2, #2
 80198d0:	701a      	strb	r2, [r3, #0]
  break;
 80198d2:	e004      	b.n	80198de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80198d4:	4b05      	ldr	r3, [pc, #20]	; (80198ec <USBH_UserProcess+0x58>)
 80198d6:	2201      	movs	r2, #1
 80198d8:	701a      	strb	r2, [r3, #0]
  break;
 80198da:	e000      	b.n	80198de <USBH_UserProcess+0x4a>

  default:
  break;
 80198dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80198de:	bf00      	nop
 80198e0:	370c      	adds	r7, #12
 80198e2:	46bd      	mov	sp, r7
 80198e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e8:	4770      	bx	lr
 80198ea:	bf00      	nop
 80198ec:	2000e44c 	.word	0x2000e44c

080198f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b08a      	sub	sp, #40	; 0x28
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80198f8:	f107 0314 	add.w	r3, r7, #20
 80198fc:	2200      	movs	r2, #0
 80198fe:	601a      	str	r2, [r3, #0]
 8019900:	605a      	str	r2, [r3, #4]
 8019902:	609a      	str	r2, [r3, #8]
 8019904:	60da      	str	r2, [r3, #12]
 8019906:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019910:	d14e      	bne.n	80199b0 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019912:	4b29      	ldr	r3, [pc, #164]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019916:	4a28      	ldr	r2, [pc, #160]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019918:	f043 0301 	orr.w	r3, r3, #1
 801991c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801991e:	4b26      	ldr	r3, [pc, #152]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019922:	f003 0301 	and.w	r3, r3, #1
 8019926:	613b      	str	r3, [r7, #16]
 8019928:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801992a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801992e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019930:	2302      	movs	r3, #2
 8019932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019934:	2300      	movs	r3, #0
 8019936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019938:	2303      	movs	r3, #3
 801993a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801993c:	230a      	movs	r3, #10
 801993e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019940:	f107 0314 	add.w	r3, r7, #20
 8019944:	4619      	mov	r1, r3
 8019946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801994a:	f7f4 fc5d 	bl	800e208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801994e:	4b1a      	ldr	r3, [pc, #104]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019952:	4a19      	ldr	r2, [pc, #100]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019958:	64d3      	str	r3, [r2, #76]	; 0x4c
 801995a:	4b17      	ldr	r3, [pc, #92]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 801995c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801995e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019962:	60fb      	str	r3, [r7, #12]
 8019964:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019966:	4b14      	ldr	r3, [pc, #80]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801996a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801996e:	2b00      	cmp	r3, #0
 8019970:	d114      	bne.n	801999c <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019972:	4b11      	ldr	r3, [pc, #68]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019976:	4a10      	ldr	r2, [pc, #64]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801997c:	6593      	str	r3, [r2, #88]	; 0x58
 801997e:	4b0e      	ldr	r3, [pc, #56]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019986:	60bb      	str	r3, [r7, #8]
 8019988:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 801998a:	f7f6 fa7f 	bl	800fe8c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801998e:	4b0a      	ldr	r3, [pc, #40]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019992:	4a09      	ldr	r2, [pc, #36]	; (80199b8 <HAL_HCD_MspInit+0xc8>)
 8019994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019998:	6593      	str	r3, [r2, #88]	; 0x58
 801999a:	e001      	b.n	80199a0 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801999c:	f7f6 fa76 	bl	800fe8c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80199a0:	2200      	movs	r2, #0
 80199a2:	2105      	movs	r1, #5
 80199a4:	2043      	movs	r0, #67	; 0x43
 80199a6:	f7f4 fbf8 	bl	800e19a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80199aa:	2043      	movs	r0, #67	; 0x43
 80199ac:	f7f4 fc11 	bl	800e1d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80199b0:	bf00      	nop
 80199b2:	3728      	adds	r7, #40	; 0x28
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}
 80199b8:	40021000 	.word	0x40021000

080199bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b082      	sub	sp, #8
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7fb fc35 	bl	801523a <USBH_LL_IncTimer>
}
 80199d0:	bf00      	nop
 80199d2:	3708      	adds	r7, #8
 80199d4:	46bd      	mov	sp, r7
 80199d6:	bd80      	pop	{r7, pc}

080199d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b082      	sub	sp, #8
 80199dc:	af00      	add	r7, sp, #0
 80199de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7fb fc7a 	bl	80152e0 <USBH_LL_Connect>
}
 80199ec:	bf00      	nop
 80199ee:	3708      	adds	r7, #8
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bd80      	pop	{r7, pc}

080199f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80199f4:	b580      	push	{r7, lr}
 80199f6:	b082      	sub	sp, #8
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019a02:	4618      	mov	r0, r3
 8019a04:	f7fb fca0 	bl	8015348 <USBH_LL_Disconnect>
}
 8019a08:	bf00      	nop
 8019a0a:	3708      	adds	r7, #8
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd80      	pop	{r7, pc}

08019a10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019a10:	b580      	push	{r7, lr}
 8019a12:	b082      	sub	sp, #8
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
 8019a18:	460b      	mov	r3, r1
 8019a1a:	70fb      	strb	r3, [r7, #3]
 8019a1c:	4613      	mov	r3, r2
 8019a1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019a26:	4618      	mov	r0, r3
 8019a28:	f7fb fcde 	bl	80153e8 <USBH_LL_NotifyURBChange>
#endif
}
 8019a2c:	bf00      	nop
 8019a2e:	3708      	adds	r7, #8
 8019a30:	46bd      	mov	sp, r7
 8019a32:	bd80      	pop	{r7, pc}

08019a34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019a34:	b580      	push	{r7, lr}
 8019a36:	b082      	sub	sp, #8
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019a42:	4618      	mov	r0, r3
 8019a44:	f7fb fc23 	bl	801528e <USBH_LL_PortEnabled>
} 
 8019a48:	bf00      	nop
 8019a4a:	3708      	adds	r7, #8
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}

08019a50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b082      	sub	sp, #8
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019a5e:	4618      	mov	r0, r3
 8019a60:	f7fb fc23 	bl	80152aa <USBH_LL_PortDisabled>
} 
 8019a64:	bf00      	nop
 8019a66:	3708      	adds	r7, #8
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	bd80      	pop	{r7, pc}

08019a6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b082      	sub	sp, #8
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8019a7a:	2b01      	cmp	r3, #1
 8019a7c:	d12a      	bne.n	8019ad4 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8019a7e:	4a18      	ldr	r2, [pc, #96]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	4a15      	ldr	r2, [pc, #84]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019a8a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019a8e:	4b14      	ldr	r3, [pc, #80]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019a90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019a94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8019a96:	4b12      	ldr	r3, [pc, #72]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019a98:	220c      	movs	r2, #12
 8019a9a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019a9c:	4b10      	ldr	r3, [pc, #64]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019a9e:	2201      	movs	r2, #1
 8019aa0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019aa2:	4b0f      	ldr	r3, [pc, #60]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019aa4:	2200      	movs	r2, #0
 8019aa6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019aa8:	4b0d      	ldr	r3, [pc, #52]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019aaa:	2202      	movs	r2, #2
 8019aac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019aae:	4b0c      	ldr	r3, [pc, #48]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019ab0:	2200      	movs	r2, #0
 8019ab2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8019ab4:	480a      	ldr	r0, [pc, #40]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019ab6:	f7f4 fd6a 	bl	800e58e <HAL_HCD_Init>
 8019aba:	4603      	mov	r3, r0
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d001      	beq.n	8019ac4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8019ac0:	f7ff fb7e 	bl	80191c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8019ac4:	4806      	ldr	r0, [pc, #24]	; (8019ae0 <USBH_LL_Init+0x74>)
 8019ac6:	f7f5 f94c 	bl	800ed62 <HAL_HCD_GetCurrentFrame>
 8019aca:	4603      	mov	r3, r0
 8019acc:	4619      	mov	r1, r3
 8019ace:	6878      	ldr	r0, [r7, #4]
 8019ad0:	f7fb fba4 	bl	801521c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019ad4:	2300      	movs	r3, #0
}
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	3708      	adds	r7, #8
 8019ada:	46bd      	mov	sp, r7
 8019adc:	bd80      	pop	{r7, pc}
 8019ade:	bf00      	nop
 8019ae0:	20014188 	.word	0x20014188

08019ae4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b084      	sub	sp, #16
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019aec:	2300      	movs	r3, #0
 8019aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019af0:	2300      	movs	r3, #0
 8019af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8019afa:	4618      	mov	r0, r3
 8019afc:	f7f5 f8ce 	bl	800ec9c <HAL_HCD_Start>
 8019b00:	4603      	mov	r3, r0
 8019b02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019b04:	7bfb      	ldrb	r3, [r7, #15]
 8019b06:	4618      	mov	r0, r3
 8019b08:	f000 f94a 	bl	8019da0 <USBH_Get_USB_Status>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b12:	4618      	mov	r0, r3
 8019b14:	3710      	adds	r7, #16
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd80      	pop	{r7, pc}

08019b1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019b1a:	b580      	push	{r7, lr}
 8019b1c:	b084      	sub	sp, #16
 8019b1e:	af00      	add	r7, sp, #0
 8019b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b22:	2300      	movs	r3, #0
 8019b24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019b26:	2300      	movs	r3, #0
 8019b28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8019b30:	4618      	mov	r0, r3
 8019b32:	f7f5 f8d6 	bl	800ece2 <HAL_HCD_Stop>
 8019b36:	4603      	mov	r3, r0
 8019b38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019b3a:	7bfb      	ldrb	r3, [r7, #15]
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f000 f92f 	bl	8019da0 <USBH_Get_USB_Status>
 8019b42:	4603      	mov	r3, r0
 8019b44:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b48:	4618      	mov	r0, r3
 8019b4a:	3710      	adds	r7, #16
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	bd80      	pop	{r7, pc}

08019b50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b084      	sub	sp, #16
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019b58:	2301      	movs	r3, #1
 8019b5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8019b62:	4618      	mov	r0, r3
 8019b64:	f7f5 f90b 	bl	800ed7e <HAL_HCD_GetCurrentSpeed>
 8019b68:	4603      	mov	r3, r0
 8019b6a:	2b01      	cmp	r3, #1
 8019b6c:	d007      	beq.n	8019b7e <USBH_LL_GetSpeed+0x2e>
 8019b6e:	2b01      	cmp	r3, #1
 8019b70:	d302      	bcc.n	8019b78 <USBH_LL_GetSpeed+0x28>
 8019b72:	2b02      	cmp	r3, #2
 8019b74:	d006      	beq.n	8019b84 <USBH_LL_GetSpeed+0x34>
 8019b76:	e008      	b.n	8019b8a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019b78:	2300      	movs	r3, #0
 8019b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8019b7c:	e008      	b.n	8019b90 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8019b7e:	2301      	movs	r3, #1
 8019b80:	73fb      	strb	r3, [r7, #15]
    break;
 8019b82:	e005      	b.n	8019b90 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019b84:	2302      	movs	r3, #2
 8019b86:	73fb      	strb	r3, [r7, #15]
    break;
 8019b88:	e002      	b.n	8019b90 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8019b8a:	2301      	movs	r3, #1
 8019b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8019b8e:	bf00      	nop
  }
  return  speed;
 8019b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b92:	4618      	mov	r0, r3
 8019b94:	3710      	adds	r7, #16
 8019b96:	46bd      	mov	sp, r7
 8019b98:	bd80      	pop	{r7, pc}

08019b9a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8019b9a:	b580      	push	{r7, lr}
 8019b9c:	b084      	sub	sp, #16
 8019b9e:	af00      	add	r7, sp, #0
 8019ba0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019ba6:	2300      	movs	r3, #0
 8019ba8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	f7f5 f8b3 	bl	800ed1c <HAL_HCD_ResetPort>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8019bba:	7bfb      	ldrb	r3, [r7, #15]
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f000 f8ef 	bl	8019da0 <USBH_Get_USB_Status>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8019bc8:	4618      	mov	r0, r3
 8019bca:	3710      	adds	r7, #16
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	bd80      	pop	{r7, pc}

08019bd0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019bd0:	b590      	push	{r4, r7, lr}
 8019bd2:	b089      	sub	sp, #36	; 0x24
 8019bd4:	af04      	add	r7, sp, #16
 8019bd6:	6078      	str	r0, [r7, #4]
 8019bd8:	4608      	mov	r0, r1
 8019bda:	4611      	mov	r1, r2
 8019bdc:	461a      	mov	r2, r3
 8019bde:	4603      	mov	r3, r0
 8019be0:	70fb      	strb	r3, [r7, #3]
 8019be2:	460b      	mov	r3, r1
 8019be4:	70bb      	strb	r3, [r7, #2]
 8019be6:	4613      	mov	r3, r2
 8019be8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bea:	2300      	movs	r3, #0
 8019bec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019bee:	2300      	movs	r3, #0
 8019bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f8d3 0494 	ldr.w	r0, [r3, #1172]	; 0x494
 8019bf8:	787c      	ldrb	r4, [r7, #1]
 8019bfa:	78ba      	ldrb	r2, [r7, #2]
 8019bfc:	78f9      	ldrb	r1, [r7, #3]
 8019bfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019c00:	9302      	str	r3, [sp, #8]
 8019c02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019c06:	9301      	str	r3, [sp, #4]
 8019c08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019c0c:	9300      	str	r3, [sp, #0]
 8019c0e:	4623      	mov	r3, r4
 8019c10:	f7f4 fd1f 	bl	800e652 <HAL_HCD_HC_Init>
 8019c14:	4603      	mov	r3, r0
 8019c16:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019c18:	7bfb      	ldrb	r3, [r7, #15]
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	f000 f8c0 	bl	8019da0 <USBH_Get_USB_Status>
 8019c20:	4603      	mov	r3, r0
 8019c22:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c26:	4618      	mov	r0, r3
 8019c28:	3714      	adds	r7, #20
 8019c2a:	46bd      	mov	sp, r7
 8019c2c:	bd90      	pop	{r4, r7, pc}

08019c2e <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019c2e:	b580      	push	{r7, lr}
 8019c30:	b084      	sub	sp, #16
 8019c32:	af00      	add	r7, sp, #0
 8019c34:	6078      	str	r0, [r7, #4]
 8019c36:	460b      	mov	r3, r1
 8019c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019c3e:	2300      	movs	r3, #0
 8019c40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8019c48:	78fa      	ldrb	r2, [r7, #3]
 8019c4a:	4611      	mov	r1, r2
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f7f4 fd98 	bl	800e782 <HAL_HCD_HC_Halt>
 8019c52:	4603      	mov	r3, r0
 8019c54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019c56:	7bfb      	ldrb	r3, [r7, #15]
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f000 f8a1 	bl	8019da0 <USBH_Get_USB_Status>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 8019c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c64:	4618      	mov	r0, r3
 8019c66:	3710      	adds	r7, #16
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}

08019c6c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019c6c:	b590      	push	{r4, r7, lr}
 8019c6e:	b089      	sub	sp, #36	; 0x24
 8019c70:	af04      	add	r7, sp, #16
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	4608      	mov	r0, r1
 8019c76:	4611      	mov	r1, r2
 8019c78:	461a      	mov	r2, r3
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	70fb      	strb	r3, [r7, #3]
 8019c7e:	460b      	mov	r3, r1
 8019c80:	70bb      	strb	r3, [r7, #2]
 8019c82:	4613      	mov	r3, r2
 8019c84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c86:	2300      	movs	r3, #0
 8019c88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	f8d3 0494 	ldr.w	r0, [r3, #1172]	; 0x494
 8019c94:	787c      	ldrb	r4, [r7, #1]
 8019c96:	78ba      	ldrb	r2, [r7, #2]
 8019c98:	78f9      	ldrb	r1, [r7, #3]
 8019c9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019c9e:	9303      	str	r3, [sp, #12]
 8019ca0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019ca2:	9302      	str	r3, [sp, #8]
 8019ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca6:	9301      	str	r3, [sp, #4]
 8019ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019cac:	9300      	str	r3, [sp, #0]
 8019cae:	4623      	mov	r3, r4
 8019cb0:	f7f4 fd8a 	bl	800e7c8 <HAL_HCD_HC_SubmitRequest>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019cb8:	7bfb      	ldrb	r3, [r7, #15]
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f000 f870 	bl	8019da0 <USBH_Get_USB_Status>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	3714      	adds	r7, #20
 8019cca:	46bd      	mov	sp, r7
 8019ccc:	bd90      	pop	{r4, r7, pc}

08019cce <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019cce:	b580      	push	{r7, lr}
 8019cd0:	b082      	sub	sp, #8
 8019cd2:	af00      	add	r7, sp, #0
 8019cd4:	6078      	str	r0, [r7, #4]
 8019cd6:	460b      	mov	r3, r1
 8019cd8:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8019ce0:	78fa      	ldrb	r2, [r7, #3]
 8019ce2:	4611      	mov	r1, r2
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f7f5 f827 	bl	800ed38 <HAL_HCD_HC_GetURBState>
 8019cea:	4603      	mov	r3, r0
}
 8019cec:	4618      	mov	r0, r3
 8019cee:	3708      	adds	r7, #8
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bd80      	pop	{r7, pc}

08019cf4 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b082      	sub	sp, #8
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	6078      	str	r0, [r7, #4]
 8019cfc:	460b      	mov	r3, r1
 8019cfe:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8019d06:	2b01      	cmp	r3, #1
 8019d08:	d103      	bne.n	8019d12 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019d0a:	78fb      	ldrb	r3, [r7, #3]
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f000 f873 	bl	8019df8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019d12:	20c8      	movs	r0, #200	; 0xc8
 8019d14:	f7f4 f944 	bl	800dfa0 <HAL_Delay>
  return USBH_OK;
 8019d18:	2300      	movs	r3, #0
}
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	3708      	adds	r7, #8
 8019d1e:	46bd      	mov	sp, r7
 8019d20:	bd80      	pop	{r7, pc}

08019d22 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019d22:	b480      	push	{r7}
 8019d24:	b085      	sub	sp, #20
 8019d26:	af00      	add	r7, sp, #0
 8019d28:	6078      	str	r0, [r7, #4]
 8019d2a:	460b      	mov	r3, r1
 8019d2c:	70fb      	strb	r3, [r7, #3]
 8019d2e:	4613      	mov	r3, r2
 8019d30:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8019d38:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019d3a:	78fa      	ldrb	r2, [r7, #3]
 8019d3c:	68f9      	ldr	r1, [r7, #12]
 8019d3e:	4613      	mov	r3, r2
 8019d40:	009b      	lsls	r3, r3, #2
 8019d42:	4413      	add	r3, r2
 8019d44:	00db      	lsls	r3, r3, #3
 8019d46:	440b      	add	r3, r1
 8019d48:	333b      	adds	r3, #59	; 0x3b
 8019d4a:	781b      	ldrb	r3, [r3, #0]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d00a      	beq.n	8019d66 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019d50:	78fa      	ldrb	r2, [r7, #3]
 8019d52:	68f9      	ldr	r1, [r7, #12]
 8019d54:	4613      	mov	r3, r2
 8019d56:	009b      	lsls	r3, r3, #2
 8019d58:	4413      	add	r3, r2
 8019d5a:	00db      	lsls	r3, r3, #3
 8019d5c:	440b      	add	r3, r1
 8019d5e:	3350      	adds	r3, #80	; 0x50
 8019d60:	78ba      	ldrb	r2, [r7, #2]
 8019d62:	701a      	strb	r2, [r3, #0]
 8019d64:	e009      	b.n	8019d7a <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019d66:	78fa      	ldrb	r2, [r7, #3]
 8019d68:	68f9      	ldr	r1, [r7, #12]
 8019d6a:	4613      	mov	r3, r2
 8019d6c:	009b      	lsls	r3, r3, #2
 8019d6e:	4413      	add	r3, r2
 8019d70:	00db      	lsls	r3, r3, #3
 8019d72:	440b      	add	r3, r1
 8019d74:	3351      	adds	r3, #81	; 0x51
 8019d76:	78ba      	ldrb	r2, [r7, #2]
 8019d78:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019d7a:	2300      	movs	r3, #0
}
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	3714      	adds	r7, #20
 8019d80:	46bd      	mov	sp, r7
 8019d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d86:	4770      	bx	lr

08019d88 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b082      	sub	sp, #8
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8019d90:	6878      	ldr	r0, [r7, #4]
 8019d92:	f7f4 f905 	bl	800dfa0 <HAL_Delay>
}
 8019d96:	bf00      	nop
 8019d98:	3708      	adds	r7, #8
 8019d9a:	46bd      	mov	sp, r7
 8019d9c:	bd80      	pop	{r7, pc}
	...

08019da0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019da0:	b480      	push	{r7}
 8019da2:	b085      	sub	sp, #20
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	4603      	mov	r3, r0
 8019da8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019daa:	2300      	movs	r3, #0
 8019dac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019dae:	79fb      	ldrb	r3, [r7, #7]
 8019db0:	2b03      	cmp	r3, #3
 8019db2:	d817      	bhi.n	8019de4 <USBH_Get_USB_Status+0x44>
 8019db4:	a201      	add	r2, pc, #4	; (adr r2, 8019dbc <USBH_Get_USB_Status+0x1c>)
 8019db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dba:	bf00      	nop
 8019dbc:	08019dcd 	.word	0x08019dcd
 8019dc0:	08019dd3 	.word	0x08019dd3
 8019dc4:	08019dd9 	.word	0x08019dd9
 8019dc8:	08019ddf 	.word	0x08019ddf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019dcc:	2300      	movs	r3, #0
 8019dce:	73fb      	strb	r3, [r7, #15]
    break;
 8019dd0:	e00b      	b.n	8019dea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019dd2:	2302      	movs	r3, #2
 8019dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8019dd6:	e008      	b.n	8019dea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019dd8:	2301      	movs	r3, #1
 8019dda:	73fb      	strb	r3, [r7, #15]
    break;
 8019ddc:	e005      	b.n	8019dea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019dde:	2302      	movs	r3, #2
 8019de0:	73fb      	strb	r3, [r7, #15]
    break;
 8019de2:	e002      	b.n	8019dea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019de4:	2302      	movs	r3, #2
 8019de6:	73fb      	strb	r3, [r7, #15]
    break;
 8019de8:	bf00      	nop
  }
  return usb_status;
 8019dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8019dec:	4618      	mov	r0, r3
 8019dee:	3714      	adds	r7, #20
 8019df0:	46bd      	mov	sp, r7
 8019df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df6:	4770      	bx	lr

08019df8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b084      	sub	sp, #16
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	4603      	mov	r3, r0
 8019e00:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8019e02:	79fb      	ldrb	r3, [r7, #7]
 8019e04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8019e06:	79fb      	ldrb	r3, [r7, #7]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d102      	bne.n	8019e12 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8019e0c:	2301      	movs	r3, #1
 8019e0e:	73fb      	strb	r3, [r7, #15]
 8019e10:	e001      	b.n	8019e16 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8019e12:	2300      	movs	r3, #0
 8019e14:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 8019e16:	7bfb      	ldrb	r3, [r7, #15]
 8019e18:	461a      	mov	r2, r3
 8019e1a:	2140      	movs	r1, #64	; 0x40
 8019e1c:	4803      	ldr	r0, [pc, #12]	; (8019e2c <MX_DriverVbusFS+0x34>)
 8019e1e:	f7f4 fb85 	bl	800e52c <HAL_GPIO_WritePin>
}
 8019e22:	bf00      	nop
 8019e24:	3710      	adds	r7, #16
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bd80      	pop	{r7, pc}
 8019e2a:	bf00      	nop
 8019e2c:	48001800 	.word	0x48001800

08019e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8019e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019e68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8019e34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8019e36:	e003      	b.n	8019e40 <LoopCopyDataInit>

08019e38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8019e38:	4b0c      	ldr	r3, [pc, #48]	; (8019e6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8019e3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8019e3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8019e3e:	3104      	adds	r1, #4

08019e40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8019e40:	480b      	ldr	r0, [pc, #44]	; (8019e70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8019e42:	4b0c      	ldr	r3, [pc, #48]	; (8019e74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8019e44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8019e46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8019e48:	d3f6      	bcc.n	8019e38 <CopyDataInit>
	ldr	r2, =_sbss
 8019e4a:	4a0b      	ldr	r2, [pc, #44]	; (8019e78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8019e4c:	e002      	b.n	8019e54 <LoopFillZerobss>

08019e4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8019e4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8019e50:	f842 3b04 	str.w	r3, [r2], #4

08019e54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8019e54:	4b09      	ldr	r3, [pc, #36]	; (8019e7c <LoopForever+0x16>)
	cmp	r2, r3
 8019e56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8019e58:	d3f9      	bcc.n	8019e4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8019e5a:	f7ff faf3 	bl	8019444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019e5e:	f000 f885 	bl	8019f6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8019e62:	f7fe ff63 	bl	8018d2c <main>

08019e66 <LoopForever>:

LoopForever:
    b LoopForever
 8019e66:	e7fe      	b.n	8019e66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8019e68:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8019e6c:	0801c8a4 	.word	0x0801c8a4
	ldr	r0, =_sdata
 8019e70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8019e74:	20000228 	.word	0x20000228
	ldr	r2, =_sbss
 8019e78:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 8019e7c:	20014450 	.word	0x20014450

08019e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8019e80:	e7fe      	b.n	8019e80 <ADC1_2_IRQHandler>
	...

08019e84 <__errno>:
 8019e84:	4b01      	ldr	r3, [pc, #4]	; (8019e8c <__errno+0x8>)
 8019e86:	6818      	ldr	r0, [r3, #0]
 8019e88:	4770      	bx	lr
 8019e8a:	bf00      	nop
 8019e8c:	20000058 	.word	0x20000058

08019e90 <fiprintf>:
 8019e90:	b40e      	push	{r1, r2, r3}
 8019e92:	b503      	push	{r0, r1, lr}
 8019e94:	4601      	mov	r1, r0
 8019e96:	ab03      	add	r3, sp, #12
 8019e98:	4805      	ldr	r0, [pc, #20]	; (8019eb0 <fiprintf+0x20>)
 8019e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e9e:	6800      	ldr	r0, [r0, #0]
 8019ea0:	9301      	str	r3, [sp, #4]
 8019ea2:	f000 f9b5 	bl	801a210 <_vfiprintf_r>
 8019ea6:	b002      	add	sp, #8
 8019ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019eac:	b003      	add	sp, #12
 8019eae:	4770      	bx	lr
 8019eb0:	20000058 	.word	0x20000058

08019eb4 <_fwrite_r>:
 8019eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019eb8:	9c08      	ldr	r4, [sp, #32]
 8019eba:	4689      	mov	r9, r1
 8019ebc:	4617      	mov	r7, r2
 8019ebe:	fb02 f803 	mul.w	r8, r2, r3
 8019ec2:	4606      	mov	r6, r0
 8019ec4:	b118      	cbz	r0, 8019ece <_fwrite_r+0x1a>
 8019ec6:	6983      	ldr	r3, [r0, #24]
 8019ec8:	b90b      	cbnz	r3, 8019ece <_fwrite_r+0x1a>
 8019eca:	f000 fe9b 	bl	801ac04 <__sinit>
 8019ece:	4b1d      	ldr	r3, [pc, #116]	; (8019f44 <_fwrite_r+0x90>)
 8019ed0:	429c      	cmp	r4, r3
 8019ed2:	d11a      	bne.n	8019f0a <_fwrite_r+0x56>
 8019ed4:	6874      	ldr	r4, [r6, #4]
 8019ed6:	89a3      	ldrh	r3, [r4, #12]
 8019ed8:	071b      	lsls	r3, r3, #28
 8019eda:	d520      	bpl.n	8019f1e <_fwrite_r+0x6a>
 8019edc:	6923      	ldr	r3, [r4, #16]
 8019ede:	b1f3      	cbz	r3, 8019f1e <_fwrite_r+0x6a>
 8019ee0:	2500      	movs	r5, #0
 8019ee2:	4545      	cmp	r5, r8
 8019ee4:	d029      	beq.n	8019f3a <_fwrite_r+0x86>
 8019ee6:	68a3      	ldr	r3, [r4, #8]
 8019ee8:	f819 1005 	ldrb.w	r1, [r9, r5]
 8019eec:	3b01      	subs	r3, #1
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	60a3      	str	r3, [r4, #8]
 8019ef2:	da04      	bge.n	8019efe <_fwrite_r+0x4a>
 8019ef4:	69a2      	ldr	r2, [r4, #24]
 8019ef6:	4293      	cmp	r3, r2
 8019ef8:	db19      	blt.n	8019f2e <_fwrite_r+0x7a>
 8019efa:	290a      	cmp	r1, #10
 8019efc:	d017      	beq.n	8019f2e <_fwrite_r+0x7a>
 8019efe:	6823      	ldr	r3, [r4, #0]
 8019f00:	1c5a      	adds	r2, r3, #1
 8019f02:	6022      	str	r2, [r4, #0]
 8019f04:	7019      	strb	r1, [r3, #0]
 8019f06:	3501      	adds	r5, #1
 8019f08:	e7eb      	b.n	8019ee2 <_fwrite_r+0x2e>
 8019f0a:	4b0f      	ldr	r3, [pc, #60]	; (8019f48 <_fwrite_r+0x94>)
 8019f0c:	429c      	cmp	r4, r3
 8019f0e:	d101      	bne.n	8019f14 <_fwrite_r+0x60>
 8019f10:	68b4      	ldr	r4, [r6, #8]
 8019f12:	e7e0      	b.n	8019ed6 <_fwrite_r+0x22>
 8019f14:	4b0d      	ldr	r3, [pc, #52]	; (8019f4c <_fwrite_r+0x98>)
 8019f16:	429c      	cmp	r4, r3
 8019f18:	bf08      	it	eq
 8019f1a:	68f4      	ldreq	r4, [r6, #12]
 8019f1c:	e7db      	b.n	8019ed6 <_fwrite_r+0x22>
 8019f1e:	4621      	mov	r1, r4
 8019f20:	4630      	mov	r0, r6
 8019f22:	f000 fd11 	bl	801a948 <__swsetup_r>
 8019f26:	2800      	cmp	r0, #0
 8019f28:	d0da      	beq.n	8019ee0 <_fwrite_r+0x2c>
 8019f2a:	2500      	movs	r5, #0
 8019f2c:	e005      	b.n	8019f3a <_fwrite_r+0x86>
 8019f2e:	4622      	mov	r2, r4
 8019f30:	4630      	mov	r0, r6
 8019f32:	f000 fca9 	bl	801a888 <__swbuf_r>
 8019f36:	3001      	adds	r0, #1
 8019f38:	d1e5      	bne.n	8019f06 <_fwrite_r+0x52>
 8019f3a:	fbb5 f0f7 	udiv	r0, r5, r7
 8019f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f42:	bf00      	nop
 8019f44:	0801c854 	.word	0x0801c854
 8019f48:	0801c874 	.word	0x0801c874
 8019f4c:	0801c834 	.word	0x0801c834

08019f50 <fwrite>:
 8019f50:	b507      	push	{r0, r1, r2, lr}
 8019f52:	9300      	str	r3, [sp, #0]
 8019f54:	4613      	mov	r3, r2
 8019f56:	460a      	mov	r2, r1
 8019f58:	4601      	mov	r1, r0
 8019f5a:	4803      	ldr	r0, [pc, #12]	; (8019f68 <fwrite+0x18>)
 8019f5c:	6800      	ldr	r0, [r0, #0]
 8019f5e:	f7ff ffa9 	bl	8019eb4 <_fwrite_r>
 8019f62:	b003      	add	sp, #12
 8019f64:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f68:	20000058 	.word	0x20000058

08019f6c <__libc_init_array>:
 8019f6c:	b570      	push	{r4, r5, r6, lr}
 8019f6e:	4e0d      	ldr	r6, [pc, #52]	; (8019fa4 <__libc_init_array+0x38>)
 8019f70:	4c0d      	ldr	r4, [pc, #52]	; (8019fa8 <__libc_init_array+0x3c>)
 8019f72:	1ba4      	subs	r4, r4, r6
 8019f74:	10a4      	asrs	r4, r4, #2
 8019f76:	2500      	movs	r5, #0
 8019f78:	42a5      	cmp	r5, r4
 8019f7a:	d109      	bne.n	8019f90 <__libc_init_array+0x24>
 8019f7c:	4e0b      	ldr	r6, [pc, #44]	; (8019fac <__libc_init_array+0x40>)
 8019f7e:	4c0c      	ldr	r4, [pc, #48]	; (8019fb0 <__libc_init_array+0x44>)
 8019f80:	f001 f95c 	bl	801b23c <_init>
 8019f84:	1ba4      	subs	r4, r4, r6
 8019f86:	10a4      	asrs	r4, r4, #2
 8019f88:	2500      	movs	r5, #0
 8019f8a:	42a5      	cmp	r5, r4
 8019f8c:	d105      	bne.n	8019f9a <__libc_init_array+0x2e>
 8019f8e:	bd70      	pop	{r4, r5, r6, pc}
 8019f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019f94:	4798      	blx	r3
 8019f96:	3501      	adds	r5, #1
 8019f98:	e7ee      	b.n	8019f78 <__libc_init_array+0xc>
 8019f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019f9e:	4798      	blx	r3
 8019fa0:	3501      	adds	r5, #1
 8019fa2:	e7f2      	b.n	8019f8a <__libc_init_array+0x1e>
 8019fa4:	0801c89c 	.word	0x0801c89c
 8019fa8:	0801c89c 	.word	0x0801c89c
 8019fac:	0801c89c 	.word	0x0801c89c
 8019fb0:	0801c8a0 	.word	0x0801c8a0

08019fb4 <__locale_ctype_ptr>:
 8019fb4:	4b04      	ldr	r3, [pc, #16]	; (8019fc8 <__locale_ctype_ptr+0x14>)
 8019fb6:	4a05      	ldr	r2, [pc, #20]	; (8019fcc <__locale_ctype_ptr+0x18>)
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	6a1b      	ldr	r3, [r3, #32]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	bf08      	it	eq
 8019fc0:	4613      	moveq	r3, r2
 8019fc2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8019fc6:	4770      	bx	lr
 8019fc8:	20000058 	.word	0x20000058
 8019fcc:	200000bc 	.word	0x200000bc

08019fd0 <malloc>:
 8019fd0:	4b02      	ldr	r3, [pc, #8]	; (8019fdc <malloc+0xc>)
 8019fd2:	4601      	mov	r1, r0
 8019fd4:	6818      	ldr	r0, [r3, #0]
 8019fd6:	f000 b897 	b.w	801a108 <_malloc_r>
 8019fda:	bf00      	nop
 8019fdc:	20000058 	.word	0x20000058

08019fe0 <free>:
 8019fe0:	4b02      	ldr	r3, [pc, #8]	; (8019fec <free+0xc>)
 8019fe2:	4601      	mov	r1, r0
 8019fe4:	6818      	ldr	r0, [r3, #0]
 8019fe6:	f000 b841 	b.w	801a06c <_free_r>
 8019fea:	bf00      	nop
 8019fec:	20000058 	.word	0x20000058

08019ff0 <__ascii_mbtowc>:
 8019ff0:	b082      	sub	sp, #8
 8019ff2:	b901      	cbnz	r1, 8019ff6 <__ascii_mbtowc+0x6>
 8019ff4:	a901      	add	r1, sp, #4
 8019ff6:	b142      	cbz	r2, 801a00a <__ascii_mbtowc+0x1a>
 8019ff8:	b14b      	cbz	r3, 801a00e <__ascii_mbtowc+0x1e>
 8019ffa:	7813      	ldrb	r3, [r2, #0]
 8019ffc:	600b      	str	r3, [r1, #0]
 8019ffe:	7812      	ldrb	r2, [r2, #0]
 801a000:	1c10      	adds	r0, r2, #0
 801a002:	bf18      	it	ne
 801a004:	2001      	movne	r0, #1
 801a006:	b002      	add	sp, #8
 801a008:	4770      	bx	lr
 801a00a:	4610      	mov	r0, r2
 801a00c:	e7fb      	b.n	801a006 <__ascii_mbtowc+0x16>
 801a00e:	f06f 0001 	mvn.w	r0, #1
 801a012:	e7f8      	b.n	801a006 <__ascii_mbtowc+0x16>

0801a014 <memcpy>:
 801a014:	b510      	push	{r4, lr}
 801a016:	1e43      	subs	r3, r0, #1
 801a018:	440a      	add	r2, r1
 801a01a:	4291      	cmp	r1, r2
 801a01c:	d100      	bne.n	801a020 <memcpy+0xc>
 801a01e:	bd10      	pop	{r4, pc}
 801a020:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a024:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a028:	e7f7      	b.n	801a01a <memcpy+0x6>

0801a02a <memmove>:
 801a02a:	4288      	cmp	r0, r1
 801a02c:	b510      	push	{r4, lr}
 801a02e:	eb01 0302 	add.w	r3, r1, r2
 801a032:	d807      	bhi.n	801a044 <memmove+0x1a>
 801a034:	1e42      	subs	r2, r0, #1
 801a036:	4299      	cmp	r1, r3
 801a038:	d00a      	beq.n	801a050 <memmove+0x26>
 801a03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a03e:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a042:	e7f8      	b.n	801a036 <memmove+0xc>
 801a044:	4283      	cmp	r3, r0
 801a046:	d9f5      	bls.n	801a034 <memmove+0xa>
 801a048:	1881      	adds	r1, r0, r2
 801a04a:	1ad2      	subs	r2, r2, r3
 801a04c:	42d3      	cmn	r3, r2
 801a04e:	d100      	bne.n	801a052 <memmove+0x28>
 801a050:	bd10      	pop	{r4, pc}
 801a052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a056:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a05a:	e7f7      	b.n	801a04c <memmove+0x22>

0801a05c <memset>:
 801a05c:	4402      	add	r2, r0
 801a05e:	4603      	mov	r3, r0
 801a060:	4293      	cmp	r3, r2
 801a062:	d100      	bne.n	801a066 <memset+0xa>
 801a064:	4770      	bx	lr
 801a066:	f803 1b01 	strb.w	r1, [r3], #1
 801a06a:	e7f9      	b.n	801a060 <memset+0x4>

0801a06c <_free_r>:
 801a06c:	b538      	push	{r3, r4, r5, lr}
 801a06e:	4605      	mov	r5, r0
 801a070:	2900      	cmp	r1, #0
 801a072:	d045      	beq.n	801a100 <_free_r+0x94>
 801a074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a078:	1f0c      	subs	r4, r1, #4
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	bfb8      	it	lt
 801a07e:	18e4      	addlt	r4, r4, r3
 801a080:	f000 feae 	bl	801ade0 <__malloc_lock>
 801a084:	4a1f      	ldr	r2, [pc, #124]	; (801a104 <_free_r+0x98>)
 801a086:	6813      	ldr	r3, [r2, #0]
 801a088:	4610      	mov	r0, r2
 801a08a:	b933      	cbnz	r3, 801a09a <_free_r+0x2e>
 801a08c:	6063      	str	r3, [r4, #4]
 801a08e:	6014      	str	r4, [r2, #0]
 801a090:	4628      	mov	r0, r5
 801a092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a096:	f000 bea4 	b.w	801ade2 <__malloc_unlock>
 801a09a:	42a3      	cmp	r3, r4
 801a09c:	d90c      	bls.n	801a0b8 <_free_r+0x4c>
 801a09e:	6821      	ldr	r1, [r4, #0]
 801a0a0:	1862      	adds	r2, r4, r1
 801a0a2:	4293      	cmp	r3, r2
 801a0a4:	bf04      	itt	eq
 801a0a6:	681a      	ldreq	r2, [r3, #0]
 801a0a8:	685b      	ldreq	r3, [r3, #4]
 801a0aa:	6063      	str	r3, [r4, #4]
 801a0ac:	bf04      	itt	eq
 801a0ae:	1852      	addeq	r2, r2, r1
 801a0b0:	6022      	streq	r2, [r4, #0]
 801a0b2:	6004      	str	r4, [r0, #0]
 801a0b4:	e7ec      	b.n	801a090 <_free_r+0x24>
 801a0b6:	4613      	mov	r3, r2
 801a0b8:	685a      	ldr	r2, [r3, #4]
 801a0ba:	b10a      	cbz	r2, 801a0c0 <_free_r+0x54>
 801a0bc:	42a2      	cmp	r2, r4
 801a0be:	d9fa      	bls.n	801a0b6 <_free_r+0x4a>
 801a0c0:	6819      	ldr	r1, [r3, #0]
 801a0c2:	1858      	adds	r0, r3, r1
 801a0c4:	42a0      	cmp	r0, r4
 801a0c6:	d10b      	bne.n	801a0e0 <_free_r+0x74>
 801a0c8:	6820      	ldr	r0, [r4, #0]
 801a0ca:	4401      	add	r1, r0
 801a0cc:	1858      	adds	r0, r3, r1
 801a0ce:	4282      	cmp	r2, r0
 801a0d0:	6019      	str	r1, [r3, #0]
 801a0d2:	d1dd      	bne.n	801a090 <_free_r+0x24>
 801a0d4:	6810      	ldr	r0, [r2, #0]
 801a0d6:	6852      	ldr	r2, [r2, #4]
 801a0d8:	605a      	str	r2, [r3, #4]
 801a0da:	4401      	add	r1, r0
 801a0dc:	6019      	str	r1, [r3, #0]
 801a0de:	e7d7      	b.n	801a090 <_free_r+0x24>
 801a0e0:	d902      	bls.n	801a0e8 <_free_r+0x7c>
 801a0e2:	230c      	movs	r3, #12
 801a0e4:	602b      	str	r3, [r5, #0]
 801a0e6:	e7d3      	b.n	801a090 <_free_r+0x24>
 801a0e8:	6820      	ldr	r0, [r4, #0]
 801a0ea:	1821      	adds	r1, r4, r0
 801a0ec:	428a      	cmp	r2, r1
 801a0ee:	bf04      	itt	eq
 801a0f0:	6811      	ldreq	r1, [r2, #0]
 801a0f2:	6852      	ldreq	r2, [r2, #4]
 801a0f4:	6062      	str	r2, [r4, #4]
 801a0f6:	bf04      	itt	eq
 801a0f8:	1809      	addeq	r1, r1, r0
 801a0fa:	6021      	streq	r1, [r4, #0]
 801a0fc:	605c      	str	r4, [r3, #4]
 801a0fe:	e7c7      	b.n	801a090 <_free_r+0x24>
 801a100:	bd38      	pop	{r3, r4, r5, pc}
 801a102:	bf00      	nop
 801a104:	2000e450 	.word	0x2000e450

0801a108 <_malloc_r>:
 801a108:	b570      	push	{r4, r5, r6, lr}
 801a10a:	1ccd      	adds	r5, r1, #3
 801a10c:	f025 0503 	bic.w	r5, r5, #3
 801a110:	3508      	adds	r5, #8
 801a112:	2d0c      	cmp	r5, #12
 801a114:	bf38      	it	cc
 801a116:	250c      	movcc	r5, #12
 801a118:	2d00      	cmp	r5, #0
 801a11a:	4606      	mov	r6, r0
 801a11c:	db01      	blt.n	801a122 <_malloc_r+0x1a>
 801a11e:	42a9      	cmp	r1, r5
 801a120:	d903      	bls.n	801a12a <_malloc_r+0x22>
 801a122:	230c      	movs	r3, #12
 801a124:	6033      	str	r3, [r6, #0]
 801a126:	2000      	movs	r0, #0
 801a128:	bd70      	pop	{r4, r5, r6, pc}
 801a12a:	f000 fe59 	bl	801ade0 <__malloc_lock>
 801a12e:	4a21      	ldr	r2, [pc, #132]	; (801a1b4 <_malloc_r+0xac>)
 801a130:	6814      	ldr	r4, [r2, #0]
 801a132:	4621      	mov	r1, r4
 801a134:	b991      	cbnz	r1, 801a15c <_malloc_r+0x54>
 801a136:	4c20      	ldr	r4, [pc, #128]	; (801a1b8 <_malloc_r+0xb0>)
 801a138:	6823      	ldr	r3, [r4, #0]
 801a13a:	b91b      	cbnz	r3, 801a144 <_malloc_r+0x3c>
 801a13c:	4630      	mov	r0, r6
 801a13e:	f000 fb05 	bl	801a74c <_sbrk_r>
 801a142:	6020      	str	r0, [r4, #0]
 801a144:	4629      	mov	r1, r5
 801a146:	4630      	mov	r0, r6
 801a148:	f000 fb00 	bl	801a74c <_sbrk_r>
 801a14c:	1c43      	adds	r3, r0, #1
 801a14e:	d124      	bne.n	801a19a <_malloc_r+0x92>
 801a150:	230c      	movs	r3, #12
 801a152:	6033      	str	r3, [r6, #0]
 801a154:	4630      	mov	r0, r6
 801a156:	f000 fe44 	bl	801ade2 <__malloc_unlock>
 801a15a:	e7e4      	b.n	801a126 <_malloc_r+0x1e>
 801a15c:	680b      	ldr	r3, [r1, #0]
 801a15e:	1b5b      	subs	r3, r3, r5
 801a160:	d418      	bmi.n	801a194 <_malloc_r+0x8c>
 801a162:	2b0b      	cmp	r3, #11
 801a164:	d90f      	bls.n	801a186 <_malloc_r+0x7e>
 801a166:	600b      	str	r3, [r1, #0]
 801a168:	50cd      	str	r5, [r1, r3]
 801a16a:	18cc      	adds	r4, r1, r3
 801a16c:	4630      	mov	r0, r6
 801a16e:	f000 fe38 	bl	801ade2 <__malloc_unlock>
 801a172:	f104 000b 	add.w	r0, r4, #11
 801a176:	1d23      	adds	r3, r4, #4
 801a178:	f020 0007 	bic.w	r0, r0, #7
 801a17c:	1ac3      	subs	r3, r0, r3
 801a17e:	d0d3      	beq.n	801a128 <_malloc_r+0x20>
 801a180:	425a      	negs	r2, r3
 801a182:	50e2      	str	r2, [r4, r3]
 801a184:	e7d0      	b.n	801a128 <_malloc_r+0x20>
 801a186:	428c      	cmp	r4, r1
 801a188:	684b      	ldr	r3, [r1, #4]
 801a18a:	bf16      	itet	ne
 801a18c:	6063      	strne	r3, [r4, #4]
 801a18e:	6013      	streq	r3, [r2, #0]
 801a190:	460c      	movne	r4, r1
 801a192:	e7eb      	b.n	801a16c <_malloc_r+0x64>
 801a194:	460c      	mov	r4, r1
 801a196:	6849      	ldr	r1, [r1, #4]
 801a198:	e7cc      	b.n	801a134 <_malloc_r+0x2c>
 801a19a:	1cc4      	adds	r4, r0, #3
 801a19c:	f024 0403 	bic.w	r4, r4, #3
 801a1a0:	42a0      	cmp	r0, r4
 801a1a2:	d005      	beq.n	801a1b0 <_malloc_r+0xa8>
 801a1a4:	1a21      	subs	r1, r4, r0
 801a1a6:	4630      	mov	r0, r6
 801a1a8:	f000 fad0 	bl	801a74c <_sbrk_r>
 801a1ac:	3001      	adds	r0, #1
 801a1ae:	d0cf      	beq.n	801a150 <_malloc_r+0x48>
 801a1b0:	6025      	str	r5, [r4, #0]
 801a1b2:	e7db      	b.n	801a16c <_malloc_r+0x64>
 801a1b4:	2000e450 	.word	0x2000e450
 801a1b8:	2000e454 	.word	0x2000e454

0801a1bc <__sfputc_r>:
 801a1bc:	6893      	ldr	r3, [r2, #8]
 801a1be:	3b01      	subs	r3, #1
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	b410      	push	{r4}
 801a1c4:	6093      	str	r3, [r2, #8]
 801a1c6:	da08      	bge.n	801a1da <__sfputc_r+0x1e>
 801a1c8:	6994      	ldr	r4, [r2, #24]
 801a1ca:	42a3      	cmp	r3, r4
 801a1cc:	db01      	blt.n	801a1d2 <__sfputc_r+0x16>
 801a1ce:	290a      	cmp	r1, #10
 801a1d0:	d103      	bne.n	801a1da <__sfputc_r+0x1e>
 801a1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1d6:	f000 bb57 	b.w	801a888 <__swbuf_r>
 801a1da:	6813      	ldr	r3, [r2, #0]
 801a1dc:	1c58      	adds	r0, r3, #1
 801a1de:	6010      	str	r0, [r2, #0]
 801a1e0:	7019      	strb	r1, [r3, #0]
 801a1e2:	4608      	mov	r0, r1
 801a1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1e8:	4770      	bx	lr

0801a1ea <__sfputs_r>:
 801a1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ec:	4606      	mov	r6, r0
 801a1ee:	460f      	mov	r7, r1
 801a1f0:	4614      	mov	r4, r2
 801a1f2:	18d5      	adds	r5, r2, r3
 801a1f4:	42ac      	cmp	r4, r5
 801a1f6:	d101      	bne.n	801a1fc <__sfputs_r+0x12>
 801a1f8:	2000      	movs	r0, #0
 801a1fa:	e007      	b.n	801a20c <__sfputs_r+0x22>
 801a1fc:	463a      	mov	r2, r7
 801a1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a202:	4630      	mov	r0, r6
 801a204:	f7ff ffda 	bl	801a1bc <__sfputc_r>
 801a208:	1c43      	adds	r3, r0, #1
 801a20a:	d1f3      	bne.n	801a1f4 <__sfputs_r+0xa>
 801a20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a210 <_vfiprintf_r>:
 801a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a214:	460c      	mov	r4, r1
 801a216:	b09d      	sub	sp, #116	; 0x74
 801a218:	4617      	mov	r7, r2
 801a21a:	461d      	mov	r5, r3
 801a21c:	4606      	mov	r6, r0
 801a21e:	b118      	cbz	r0, 801a228 <_vfiprintf_r+0x18>
 801a220:	6983      	ldr	r3, [r0, #24]
 801a222:	b90b      	cbnz	r3, 801a228 <_vfiprintf_r+0x18>
 801a224:	f000 fcee 	bl	801ac04 <__sinit>
 801a228:	4b7c      	ldr	r3, [pc, #496]	; (801a41c <_vfiprintf_r+0x20c>)
 801a22a:	429c      	cmp	r4, r3
 801a22c:	d158      	bne.n	801a2e0 <_vfiprintf_r+0xd0>
 801a22e:	6874      	ldr	r4, [r6, #4]
 801a230:	89a3      	ldrh	r3, [r4, #12]
 801a232:	0718      	lsls	r0, r3, #28
 801a234:	d55e      	bpl.n	801a2f4 <_vfiprintf_r+0xe4>
 801a236:	6923      	ldr	r3, [r4, #16]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d05b      	beq.n	801a2f4 <_vfiprintf_r+0xe4>
 801a23c:	2300      	movs	r3, #0
 801a23e:	9309      	str	r3, [sp, #36]	; 0x24
 801a240:	2320      	movs	r3, #32
 801a242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a246:	2330      	movs	r3, #48	; 0x30
 801a248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a24c:	9503      	str	r5, [sp, #12]
 801a24e:	f04f 0b01 	mov.w	fp, #1
 801a252:	46b8      	mov	r8, r7
 801a254:	4645      	mov	r5, r8
 801a256:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a25a:	b10b      	cbz	r3, 801a260 <_vfiprintf_r+0x50>
 801a25c:	2b25      	cmp	r3, #37	; 0x25
 801a25e:	d154      	bne.n	801a30a <_vfiprintf_r+0xfa>
 801a260:	ebb8 0a07 	subs.w	sl, r8, r7
 801a264:	d00b      	beq.n	801a27e <_vfiprintf_r+0x6e>
 801a266:	4653      	mov	r3, sl
 801a268:	463a      	mov	r2, r7
 801a26a:	4621      	mov	r1, r4
 801a26c:	4630      	mov	r0, r6
 801a26e:	f7ff ffbc 	bl	801a1ea <__sfputs_r>
 801a272:	3001      	adds	r0, #1
 801a274:	f000 80c2 	beq.w	801a3fc <_vfiprintf_r+0x1ec>
 801a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a27a:	4453      	add	r3, sl
 801a27c:	9309      	str	r3, [sp, #36]	; 0x24
 801a27e:	f898 3000 	ldrb.w	r3, [r8]
 801a282:	2b00      	cmp	r3, #0
 801a284:	f000 80ba 	beq.w	801a3fc <_vfiprintf_r+0x1ec>
 801a288:	2300      	movs	r3, #0
 801a28a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a28e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a292:	9304      	str	r3, [sp, #16]
 801a294:	9307      	str	r3, [sp, #28]
 801a296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a29a:	931a      	str	r3, [sp, #104]	; 0x68
 801a29c:	46a8      	mov	r8, r5
 801a29e:	2205      	movs	r2, #5
 801a2a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a2a4:	485e      	ldr	r0, [pc, #376]	; (801a420 <_vfiprintf_r+0x210>)
 801a2a6:	f7e5 ffab 	bl	8000200 <memchr>
 801a2aa:	9b04      	ldr	r3, [sp, #16]
 801a2ac:	bb78      	cbnz	r0, 801a30e <_vfiprintf_r+0xfe>
 801a2ae:	06d9      	lsls	r1, r3, #27
 801a2b0:	bf44      	itt	mi
 801a2b2:	2220      	movmi	r2, #32
 801a2b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a2b8:	071a      	lsls	r2, r3, #28
 801a2ba:	bf44      	itt	mi
 801a2bc:	222b      	movmi	r2, #43	; 0x2b
 801a2be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a2c2:	782a      	ldrb	r2, [r5, #0]
 801a2c4:	2a2a      	cmp	r2, #42	; 0x2a
 801a2c6:	d02a      	beq.n	801a31e <_vfiprintf_r+0x10e>
 801a2c8:	9a07      	ldr	r2, [sp, #28]
 801a2ca:	46a8      	mov	r8, r5
 801a2cc:	2000      	movs	r0, #0
 801a2ce:	250a      	movs	r5, #10
 801a2d0:	4641      	mov	r1, r8
 801a2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a2d6:	3b30      	subs	r3, #48	; 0x30
 801a2d8:	2b09      	cmp	r3, #9
 801a2da:	d969      	bls.n	801a3b0 <_vfiprintf_r+0x1a0>
 801a2dc:	b360      	cbz	r0, 801a338 <_vfiprintf_r+0x128>
 801a2de:	e024      	b.n	801a32a <_vfiprintf_r+0x11a>
 801a2e0:	4b50      	ldr	r3, [pc, #320]	; (801a424 <_vfiprintf_r+0x214>)
 801a2e2:	429c      	cmp	r4, r3
 801a2e4:	d101      	bne.n	801a2ea <_vfiprintf_r+0xda>
 801a2e6:	68b4      	ldr	r4, [r6, #8]
 801a2e8:	e7a2      	b.n	801a230 <_vfiprintf_r+0x20>
 801a2ea:	4b4f      	ldr	r3, [pc, #316]	; (801a428 <_vfiprintf_r+0x218>)
 801a2ec:	429c      	cmp	r4, r3
 801a2ee:	bf08      	it	eq
 801a2f0:	68f4      	ldreq	r4, [r6, #12]
 801a2f2:	e79d      	b.n	801a230 <_vfiprintf_r+0x20>
 801a2f4:	4621      	mov	r1, r4
 801a2f6:	4630      	mov	r0, r6
 801a2f8:	f000 fb26 	bl	801a948 <__swsetup_r>
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	d09d      	beq.n	801a23c <_vfiprintf_r+0x2c>
 801a300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a304:	b01d      	add	sp, #116	; 0x74
 801a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a30a:	46a8      	mov	r8, r5
 801a30c:	e7a2      	b.n	801a254 <_vfiprintf_r+0x44>
 801a30e:	4a44      	ldr	r2, [pc, #272]	; (801a420 <_vfiprintf_r+0x210>)
 801a310:	1a80      	subs	r0, r0, r2
 801a312:	fa0b f000 	lsl.w	r0, fp, r0
 801a316:	4318      	orrs	r0, r3
 801a318:	9004      	str	r0, [sp, #16]
 801a31a:	4645      	mov	r5, r8
 801a31c:	e7be      	b.n	801a29c <_vfiprintf_r+0x8c>
 801a31e:	9a03      	ldr	r2, [sp, #12]
 801a320:	1d11      	adds	r1, r2, #4
 801a322:	6812      	ldr	r2, [r2, #0]
 801a324:	9103      	str	r1, [sp, #12]
 801a326:	2a00      	cmp	r2, #0
 801a328:	db01      	blt.n	801a32e <_vfiprintf_r+0x11e>
 801a32a:	9207      	str	r2, [sp, #28]
 801a32c:	e004      	b.n	801a338 <_vfiprintf_r+0x128>
 801a32e:	4252      	negs	r2, r2
 801a330:	f043 0302 	orr.w	r3, r3, #2
 801a334:	9207      	str	r2, [sp, #28]
 801a336:	9304      	str	r3, [sp, #16]
 801a338:	f898 3000 	ldrb.w	r3, [r8]
 801a33c:	2b2e      	cmp	r3, #46	; 0x2e
 801a33e:	d10e      	bne.n	801a35e <_vfiprintf_r+0x14e>
 801a340:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a344:	2b2a      	cmp	r3, #42	; 0x2a
 801a346:	d138      	bne.n	801a3ba <_vfiprintf_r+0x1aa>
 801a348:	9b03      	ldr	r3, [sp, #12]
 801a34a:	1d1a      	adds	r2, r3, #4
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	9203      	str	r2, [sp, #12]
 801a350:	2b00      	cmp	r3, #0
 801a352:	bfb8      	it	lt
 801a354:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a358:	f108 0802 	add.w	r8, r8, #2
 801a35c:	9305      	str	r3, [sp, #20]
 801a35e:	4d33      	ldr	r5, [pc, #204]	; (801a42c <_vfiprintf_r+0x21c>)
 801a360:	f898 1000 	ldrb.w	r1, [r8]
 801a364:	2203      	movs	r2, #3
 801a366:	4628      	mov	r0, r5
 801a368:	f7e5 ff4a 	bl	8000200 <memchr>
 801a36c:	b140      	cbz	r0, 801a380 <_vfiprintf_r+0x170>
 801a36e:	2340      	movs	r3, #64	; 0x40
 801a370:	1b40      	subs	r0, r0, r5
 801a372:	fa03 f000 	lsl.w	r0, r3, r0
 801a376:	9b04      	ldr	r3, [sp, #16]
 801a378:	4303      	orrs	r3, r0
 801a37a:	f108 0801 	add.w	r8, r8, #1
 801a37e:	9304      	str	r3, [sp, #16]
 801a380:	f898 1000 	ldrb.w	r1, [r8]
 801a384:	482a      	ldr	r0, [pc, #168]	; (801a430 <_vfiprintf_r+0x220>)
 801a386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a38a:	2206      	movs	r2, #6
 801a38c:	f108 0701 	add.w	r7, r8, #1
 801a390:	f7e5 ff36 	bl	8000200 <memchr>
 801a394:	2800      	cmp	r0, #0
 801a396:	d037      	beq.n	801a408 <_vfiprintf_r+0x1f8>
 801a398:	4b26      	ldr	r3, [pc, #152]	; (801a434 <_vfiprintf_r+0x224>)
 801a39a:	bb1b      	cbnz	r3, 801a3e4 <_vfiprintf_r+0x1d4>
 801a39c:	9b03      	ldr	r3, [sp, #12]
 801a39e:	3307      	adds	r3, #7
 801a3a0:	f023 0307 	bic.w	r3, r3, #7
 801a3a4:	3308      	adds	r3, #8
 801a3a6:	9303      	str	r3, [sp, #12]
 801a3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3aa:	444b      	add	r3, r9
 801a3ac:	9309      	str	r3, [sp, #36]	; 0x24
 801a3ae:	e750      	b.n	801a252 <_vfiprintf_r+0x42>
 801a3b0:	fb05 3202 	mla	r2, r5, r2, r3
 801a3b4:	2001      	movs	r0, #1
 801a3b6:	4688      	mov	r8, r1
 801a3b8:	e78a      	b.n	801a2d0 <_vfiprintf_r+0xc0>
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	f108 0801 	add.w	r8, r8, #1
 801a3c0:	9305      	str	r3, [sp, #20]
 801a3c2:	4619      	mov	r1, r3
 801a3c4:	250a      	movs	r5, #10
 801a3c6:	4640      	mov	r0, r8
 801a3c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a3cc:	3a30      	subs	r2, #48	; 0x30
 801a3ce:	2a09      	cmp	r2, #9
 801a3d0:	d903      	bls.n	801a3da <_vfiprintf_r+0x1ca>
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d0c3      	beq.n	801a35e <_vfiprintf_r+0x14e>
 801a3d6:	9105      	str	r1, [sp, #20]
 801a3d8:	e7c1      	b.n	801a35e <_vfiprintf_r+0x14e>
 801a3da:	fb05 2101 	mla	r1, r5, r1, r2
 801a3de:	2301      	movs	r3, #1
 801a3e0:	4680      	mov	r8, r0
 801a3e2:	e7f0      	b.n	801a3c6 <_vfiprintf_r+0x1b6>
 801a3e4:	ab03      	add	r3, sp, #12
 801a3e6:	9300      	str	r3, [sp, #0]
 801a3e8:	4622      	mov	r2, r4
 801a3ea:	4b13      	ldr	r3, [pc, #76]	; (801a438 <_vfiprintf_r+0x228>)
 801a3ec:	a904      	add	r1, sp, #16
 801a3ee:	4630      	mov	r0, r6
 801a3f0:	f3af 8000 	nop.w
 801a3f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801a3f8:	4681      	mov	r9, r0
 801a3fa:	d1d5      	bne.n	801a3a8 <_vfiprintf_r+0x198>
 801a3fc:	89a3      	ldrh	r3, [r4, #12]
 801a3fe:	065b      	lsls	r3, r3, #25
 801a400:	f53f af7e 	bmi.w	801a300 <_vfiprintf_r+0xf0>
 801a404:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a406:	e77d      	b.n	801a304 <_vfiprintf_r+0xf4>
 801a408:	ab03      	add	r3, sp, #12
 801a40a:	9300      	str	r3, [sp, #0]
 801a40c:	4622      	mov	r2, r4
 801a40e:	4b0a      	ldr	r3, [pc, #40]	; (801a438 <_vfiprintf_r+0x228>)
 801a410:	a904      	add	r1, sp, #16
 801a412:	4630      	mov	r0, r6
 801a414:	f000 f888 	bl	801a528 <_printf_i>
 801a418:	e7ec      	b.n	801a3f4 <_vfiprintf_r+0x1e4>
 801a41a:	bf00      	nop
 801a41c:	0801c854 	.word	0x0801c854
 801a420:	0801c6fe 	.word	0x0801c6fe
 801a424:	0801c874 	.word	0x0801c874
 801a428:	0801c834 	.word	0x0801c834
 801a42c:	0801c704 	.word	0x0801c704
 801a430:	0801c708 	.word	0x0801c708
 801a434:	00000000 	.word	0x00000000
 801a438:	0801a1eb 	.word	0x0801a1eb

0801a43c <_printf_common>:
 801a43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a440:	4691      	mov	r9, r2
 801a442:	461f      	mov	r7, r3
 801a444:	688a      	ldr	r2, [r1, #8]
 801a446:	690b      	ldr	r3, [r1, #16]
 801a448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a44c:	4293      	cmp	r3, r2
 801a44e:	bfb8      	it	lt
 801a450:	4613      	movlt	r3, r2
 801a452:	f8c9 3000 	str.w	r3, [r9]
 801a456:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a45a:	4606      	mov	r6, r0
 801a45c:	460c      	mov	r4, r1
 801a45e:	b112      	cbz	r2, 801a466 <_printf_common+0x2a>
 801a460:	3301      	adds	r3, #1
 801a462:	f8c9 3000 	str.w	r3, [r9]
 801a466:	6823      	ldr	r3, [r4, #0]
 801a468:	0699      	lsls	r1, r3, #26
 801a46a:	bf42      	ittt	mi
 801a46c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a470:	3302      	addmi	r3, #2
 801a472:	f8c9 3000 	strmi.w	r3, [r9]
 801a476:	6825      	ldr	r5, [r4, #0]
 801a478:	f015 0506 	ands.w	r5, r5, #6
 801a47c:	d107      	bne.n	801a48e <_printf_common+0x52>
 801a47e:	f104 0a19 	add.w	sl, r4, #25
 801a482:	68e3      	ldr	r3, [r4, #12]
 801a484:	f8d9 2000 	ldr.w	r2, [r9]
 801a488:	1a9b      	subs	r3, r3, r2
 801a48a:	42ab      	cmp	r3, r5
 801a48c:	dc28      	bgt.n	801a4e0 <_printf_common+0xa4>
 801a48e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a492:	6822      	ldr	r2, [r4, #0]
 801a494:	3300      	adds	r3, #0
 801a496:	bf18      	it	ne
 801a498:	2301      	movne	r3, #1
 801a49a:	0692      	lsls	r2, r2, #26
 801a49c:	d42d      	bmi.n	801a4fa <_printf_common+0xbe>
 801a49e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a4a2:	4639      	mov	r1, r7
 801a4a4:	4630      	mov	r0, r6
 801a4a6:	47c0      	blx	r8
 801a4a8:	3001      	adds	r0, #1
 801a4aa:	d020      	beq.n	801a4ee <_printf_common+0xb2>
 801a4ac:	6823      	ldr	r3, [r4, #0]
 801a4ae:	68e5      	ldr	r5, [r4, #12]
 801a4b0:	f8d9 2000 	ldr.w	r2, [r9]
 801a4b4:	f003 0306 	and.w	r3, r3, #6
 801a4b8:	2b04      	cmp	r3, #4
 801a4ba:	bf08      	it	eq
 801a4bc:	1aad      	subeq	r5, r5, r2
 801a4be:	68a3      	ldr	r3, [r4, #8]
 801a4c0:	6922      	ldr	r2, [r4, #16]
 801a4c2:	bf0c      	ite	eq
 801a4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a4c8:	2500      	movne	r5, #0
 801a4ca:	4293      	cmp	r3, r2
 801a4cc:	bfc4      	itt	gt
 801a4ce:	1a9b      	subgt	r3, r3, r2
 801a4d0:	18ed      	addgt	r5, r5, r3
 801a4d2:	f04f 0900 	mov.w	r9, #0
 801a4d6:	341a      	adds	r4, #26
 801a4d8:	454d      	cmp	r5, r9
 801a4da:	d11a      	bne.n	801a512 <_printf_common+0xd6>
 801a4dc:	2000      	movs	r0, #0
 801a4de:	e008      	b.n	801a4f2 <_printf_common+0xb6>
 801a4e0:	2301      	movs	r3, #1
 801a4e2:	4652      	mov	r2, sl
 801a4e4:	4639      	mov	r1, r7
 801a4e6:	4630      	mov	r0, r6
 801a4e8:	47c0      	blx	r8
 801a4ea:	3001      	adds	r0, #1
 801a4ec:	d103      	bne.n	801a4f6 <_printf_common+0xba>
 801a4ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4f6:	3501      	adds	r5, #1
 801a4f8:	e7c3      	b.n	801a482 <_printf_common+0x46>
 801a4fa:	18e1      	adds	r1, r4, r3
 801a4fc:	1c5a      	adds	r2, r3, #1
 801a4fe:	2030      	movs	r0, #48	; 0x30
 801a500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a504:	4422      	add	r2, r4
 801a506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a50a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a50e:	3302      	adds	r3, #2
 801a510:	e7c5      	b.n	801a49e <_printf_common+0x62>
 801a512:	2301      	movs	r3, #1
 801a514:	4622      	mov	r2, r4
 801a516:	4639      	mov	r1, r7
 801a518:	4630      	mov	r0, r6
 801a51a:	47c0      	blx	r8
 801a51c:	3001      	adds	r0, #1
 801a51e:	d0e6      	beq.n	801a4ee <_printf_common+0xb2>
 801a520:	f109 0901 	add.w	r9, r9, #1
 801a524:	e7d8      	b.n	801a4d8 <_printf_common+0x9c>
	...

0801a528 <_printf_i>:
 801a528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a52c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a530:	460c      	mov	r4, r1
 801a532:	7e09      	ldrb	r1, [r1, #24]
 801a534:	b085      	sub	sp, #20
 801a536:	296e      	cmp	r1, #110	; 0x6e
 801a538:	4617      	mov	r7, r2
 801a53a:	4606      	mov	r6, r0
 801a53c:	4698      	mov	r8, r3
 801a53e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a540:	f000 80b3 	beq.w	801a6aa <_printf_i+0x182>
 801a544:	d822      	bhi.n	801a58c <_printf_i+0x64>
 801a546:	2963      	cmp	r1, #99	; 0x63
 801a548:	d036      	beq.n	801a5b8 <_printf_i+0x90>
 801a54a:	d80a      	bhi.n	801a562 <_printf_i+0x3a>
 801a54c:	2900      	cmp	r1, #0
 801a54e:	f000 80b9 	beq.w	801a6c4 <_printf_i+0x19c>
 801a552:	2958      	cmp	r1, #88	; 0x58
 801a554:	f000 8083 	beq.w	801a65e <_printf_i+0x136>
 801a558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a55c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a560:	e032      	b.n	801a5c8 <_printf_i+0xa0>
 801a562:	2964      	cmp	r1, #100	; 0x64
 801a564:	d001      	beq.n	801a56a <_printf_i+0x42>
 801a566:	2969      	cmp	r1, #105	; 0x69
 801a568:	d1f6      	bne.n	801a558 <_printf_i+0x30>
 801a56a:	6820      	ldr	r0, [r4, #0]
 801a56c:	6813      	ldr	r3, [r2, #0]
 801a56e:	0605      	lsls	r5, r0, #24
 801a570:	f103 0104 	add.w	r1, r3, #4
 801a574:	d52a      	bpl.n	801a5cc <_printf_i+0xa4>
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	6011      	str	r1, [r2, #0]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	da03      	bge.n	801a586 <_printf_i+0x5e>
 801a57e:	222d      	movs	r2, #45	; 0x2d
 801a580:	425b      	negs	r3, r3
 801a582:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a586:	486f      	ldr	r0, [pc, #444]	; (801a744 <_printf_i+0x21c>)
 801a588:	220a      	movs	r2, #10
 801a58a:	e039      	b.n	801a600 <_printf_i+0xd8>
 801a58c:	2973      	cmp	r1, #115	; 0x73
 801a58e:	f000 809d 	beq.w	801a6cc <_printf_i+0x1a4>
 801a592:	d808      	bhi.n	801a5a6 <_printf_i+0x7e>
 801a594:	296f      	cmp	r1, #111	; 0x6f
 801a596:	d020      	beq.n	801a5da <_printf_i+0xb2>
 801a598:	2970      	cmp	r1, #112	; 0x70
 801a59a:	d1dd      	bne.n	801a558 <_printf_i+0x30>
 801a59c:	6823      	ldr	r3, [r4, #0]
 801a59e:	f043 0320 	orr.w	r3, r3, #32
 801a5a2:	6023      	str	r3, [r4, #0]
 801a5a4:	e003      	b.n	801a5ae <_printf_i+0x86>
 801a5a6:	2975      	cmp	r1, #117	; 0x75
 801a5a8:	d017      	beq.n	801a5da <_printf_i+0xb2>
 801a5aa:	2978      	cmp	r1, #120	; 0x78
 801a5ac:	d1d4      	bne.n	801a558 <_printf_i+0x30>
 801a5ae:	2378      	movs	r3, #120	; 0x78
 801a5b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a5b4:	4864      	ldr	r0, [pc, #400]	; (801a748 <_printf_i+0x220>)
 801a5b6:	e055      	b.n	801a664 <_printf_i+0x13c>
 801a5b8:	6813      	ldr	r3, [r2, #0]
 801a5ba:	1d19      	adds	r1, r3, #4
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	6011      	str	r1, [r2, #0]
 801a5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	e08c      	b.n	801a6e6 <_printf_i+0x1be>
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	6011      	str	r1, [r2, #0]
 801a5d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a5d4:	bf18      	it	ne
 801a5d6:	b21b      	sxthne	r3, r3
 801a5d8:	e7cf      	b.n	801a57a <_printf_i+0x52>
 801a5da:	6813      	ldr	r3, [r2, #0]
 801a5dc:	6825      	ldr	r5, [r4, #0]
 801a5de:	1d18      	adds	r0, r3, #4
 801a5e0:	6010      	str	r0, [r2, #0]
 801a5e2:	0628      	lsls	r0, r5, #24
 801a5e4:	d501      	bpl.n	801a5ea <_printf_i+0xc2>
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	e002      	b.n	801a5f0 <_printf_i+0xc8>
 801a5ea:	0668      	lsls	r0, r5, #25
 801a5ec:	d5fb      	bpl.n	801a5e6 <_printf_i+0xbe>
 801a5ee:	881b      	ldrh	r3, [r3, #0]
 801a5f0:	4854      	ldr	r0, [pc, #336]	; (801a744 <_printf_i+0x21c>)
 801a5f2:	296f      	cmp	r1, #111	; 0x6f
 801a5f4:	bf14      	ite	ne
 801a5f6:	220a      	movne	r2, #10
 801a5f8:	2208      	moveq	r2, #8
 801a5fa:	2100      	movs	r1, #0
 801a5fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a600:	6865      	ldr	r5, [r4, #4]
 801a602:	60a5      	str	r5, [r4, #8]
 801a604:	2d00      	cmp	r5, #0
 801a606:	f2c0 8095 	blt.w	801a734 <_printf_i+0x20c>
 801a60a:	6821      	ldr	r1, [r4, #0]
 801a60c:	f021 0104 	bic.w	r1, r1, #4
 801a610:	6021      	str	r1, [r4, #0]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d13d      	bne.n	801a692 <_printf_i+0x16a>
 801a616:	2d00      	cmp	r5, #0
 801a618:	f040 808e 	bne.w	801a738 <_printf_i+0x210>
 801a61c:	4665      	mov	r5, ip
 801a61e:	2a08      	cmp	r2, #8
 801a620:	d10b      	bne.n	801a63a <_printf_i+0x112>
 801a622:	6823      	ldr	r3, [r4, #0]
 801a624:	07db      	lsls	r3, r3, #31
 801a626:	d508      	bpl.n	801a63a <_printf_i+0x112>
 801a628:	6923      	ldr	r3, [r4, #16]
 801a62a:	6862      	ldr	r2, [r4, #4]
 801a62c:	429a      	cmp	r2, r3
 801a62e:	bfde      	ittt	le
 801a630:	2330      	movle	r3, #48	; 0x30
 801a632:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a636:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a63a:	ebac 0305 	sub.w	r3, ip, r5
 801a63e:	6123      	str	r3, [r4, #16]
 801a640:	f8cd 8000 	str.w	r8, [sp]
 801a644:	463b      	mov	r3, r7
 801a646:	aa03      	add	r2, sp, #12
 801a648:	4621      	mov	r1, r4
 801a64a:	4630      	mov	r0, r6
 801a64c:	f7ff fef6 	bl	801a43c <_printf_common>
 801a650:	3001      	adds	r0, #1
 801a652:	d14d      	bne.n	801a6f0 <_printf_i+0x1c8>
 801a654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a658:	b005      	add	sp, #20
 801a65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a65e:	4839      	ldr	r0, [pc, #228]	; (801a744 <_printf_i+0x21c>)
 801a660:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a664:	6813      	ldr	r3, [r2, #0]
 801a666:	6821      	ldr	r1, [r4, #0]
 801a668:	1d1d      	adds	r5, r3, #4
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	6015      	str	r5, [r2, #0]
 801a66e:	060a      	lsls	r2, r1, #24
 801a670:	d50b      	bpl.n	801a68a <_printf_i+0x162>
 801a672:	07ca      	lsls	r2, r1, #31
 801a674:	bf44      	itt	mi
 801a676:	f041 0120 	orrmi.w	r1, r1, #32
 801a67a:	6021      	strmi	r1, [r4, #0]
 801a67c:	b91b      	cbnz	r3, 801a686 <_printf_i+0x15e>
 801a67e:	6822      	ldr	r2, [r4, #0]
 801a680:	f022 0220 	bic.w	r2, r2, #32
 801a684:	6022      	str	r2, [r4, #0]
 801a686:	2210      	movs	r2, #16
 801a688:	e7b7      	b.n	801a5fa <_printf_i+0xd2>
 801a68a:	064d      	lsls	r5, r1, #25
 801a68c:	bf48      	it	mi
 801a68e:	b29b      	uxthmi	r3, r3
 801a690:	e7ef      	b.n	801a672 <_printf_i+0x14a>
 801a692:	4665      	mov	r5, ip
 801a694:	fbb3 f1f2 	udiv	r1, r3, r2
 801a698:	fb02 3311 	mls	r3, r2, r1, r3
 801a69c:	5cc3      	ldrb	r3, [r0, r3]
 801a69e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a6a2:	460b      	mov	r3, r1
 801a6a4:	2900      	cmp	r1, #0
 801a6a6:	d1f5      	bne.n	801a694 <_printf_i+0x16c>
 801a6a8:	e7b9      	b.n	801a61e <_printf_i+0xf6>
 801a6aa:	6813      	ldr	r3, [r2, #0]
 801a6ac:	6825      	ldr	r5, [r4, #0]
 801a6ae:	6961      	ldr	r1, [r4, #20]
 801a6b0:	1d18      	adds	r0, r3, #4
 801a6b2:	6010      	str	r0, [r2, #0]
 801a6b4:	0628      	lsls	r0, r5, #24
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	d501      	bpl.n	801a6be <_printf_i+0x196>
 801a6ba:	6019      	str	r1, [r3, #0]
 801a6bc:	e002      	b.n	801a6c4 <_printf_i+0x19c>
 801a6be:	066a      	lsls	r2, r5, #25
 801a6c0:	d5fb      	bpl.n	801a6ba <_printf_i+0x192>
 801a6c2:	8019      	strh	r1, [r3, #0]
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	6123      	str	r3, [r4, #16]
 801a6c8:	4665      	mov	r5, ip
 801a6ca:	e7b9      	b.n	801a640 <_printf_i+0x118>
 801a6cc:	6813      	ldr	r3, [r2, #0]
 801a6ce:	1d19      	adds	r1, r3, #4
 801a6d0:	6011      	str	r1, [r2, #0]
 801a6d2:	681d      	ldr	r5, [r3, #0]
 801a6d4:	6862      	ldr	r2, [r4, #4]
 801a6d6:	2100      	movs	r1, #0
 801a6d8:	4628      	mov	r0, r5
 801a6da:	f7e5 fd91 	bl	8000200 <memchr>
 801a6de:	b108      	cbz	r0, 801a6e4 <_printf_i+0x1bc>
 801a6e0:	1b40      	subs	r0, r0, r5
 801a6e2:	6060      	str	r0, [r4, #4]
 801a6e4:	6863      	ldr	r3, [r4, #4]
 801a6e6:	6123      	str	r3, [r4, #16]
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a6ee:	e7a7      	b.n	801a640 <_printf_i+0x118>
 801a6f0:	6923      	ldr	r3, [r4, #16]
 801a6f2:	462a      	mov	r2, r5
 801a6f4:	4639      	mov	r1, r7
 801a6f6:	4630      	mov	r0, r6
 801a6f8:	47c0      	blx	r8
 801a6fa:	3001      	adds	r0, #1
 801a6fc:	d0aa      	beq.n	801a654 <_printf_i+0x12c>
 801a6fe:	6823      	ldr	r3, [r4, #0]
 801a700:	079b      	lsls	r3, r3, #30
 801a702:	d413      	bmi.n	801a72c <_printf_i+0x204>
 801a704:	68e0      	ldr	r0, [r4, #12]
 801a706:	9b03      	ldr	r3, [sp, #12]
 801a708:	4298      	cmp	r0, r3
 801a70a:	bfb8      	it	lt
 801a70c:	4618      	movlt	r0, r3
 801a70e:	e7a3      	b.n	801a658 <_printf_i+0x130>
 801a710:	2301      	movs	r3, #1
 801a712:	464a      	mov	r2, r9
 801a714:	4639      	mov	r1, r7
 801a716:	4630      	mov	r0, r6
 801a718:	47c0      	blx	r8
 801a71a:	3001      	adds	r0, #1
 801a71c:	d09a      	beq.n	801a654 <_printf_i+0x12c>
 801a71e:	3501      	adds	r5, #1
 801a720:	68e3      	ldr	r3, [r4, #12]
 801a722:	9a03      	ldr	r2, [sp, #12]
 801a724:	1a9b      	subs	r3, r3, r2
 801a726:	42ab      	cmp	r3, r5
 801a728:	dcf2      	bgt.n	801a710 <_printf_i+0x1e8>
 801a72a:	e7eb      	b.n	801a704 <_printf_i+0x1dc>
 801a72c:	2500      	movs	r5, #0
 801a72e:	f104 0919 	add.w	r9, r4, #25
 801a732:	e7f5      	b.n	801a720 <_printf_i+0x1f8>
 801a734:	2b00      	cmp	r3, #0
 801a736:	d1ac      	bne.n	801a692 <_printf_i+0x16a>
 801a738:	7803      	ldrb	r3, [r0, #0]
 801a73a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a73e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a742:	e76c      	b.n	801a61e <_printf_i+0xf6>
 801a744:	0801c70f 	.word	0x0801c70f
 801a748:	0801c720 	.word	0x0801c720

0801a74c <_sbrk_r>:
 801a74c:	b538      	push	{r3, r4, r5, lr}
 801a74e:	4c06      	ldr	r4, [pc, #24]	; (801a768 <_sbrk_r+0x1c>)
 801a750:	2300      	movs	r3, #0
 801a752:	4605      	mov	r5, r0
 801a754:	4608      	mov	r0, r1
 801a756:	6023      	str	r3, [r4, #0]
 801a758:	f7fe fe48 	bl	80193ec <_sbrk>
 801a75c:	1c43      	adds	r3, r0, #1
 801a75e:	d102      	bne.n	801a766 <_sbrk_r+0x1a>
 801a760:	6823      	ldr	r3, [r4, #0]
 801a762:	b103      	cbz	r3, 801a766 <_sbrk_r+0x1a>
 801a764:	602b      	str	r3, [r5, #0]
 801a766:	bd38      	pop	{r3, r4, r5, pc}
 801a768:	2001444c 	.word	0x2001444c

0801a76c <siprintf>:
 801a76c:	b40e      	push	{r1, r2, r3}
 801a76e:	b500      	push	{lr}
 801a770:	b09c      	sub	sp, #112	; 0x70
 801a772:	ab1d      	add	r3, sp, #116	; 0x74
 801a774:	9002      	str	r0, [sp, #8]
 801a776:	9006      	str	r0, [sp, #24]
 801a778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a77c:	4809      	ldr	r0, [pc, #36]	; (801a7a4 <siprintf+0x38>)
 801a77e:	9107      	str	r1, [sp, #28]
 801a780:	9104      	str	r1, [sp, #16]
 801a782:	4909      	ldr	r1, [pc, #36]	; (801a7a8 <siprintf+0x3c>)
 801a784:	f853 2b04 	ldr.w	r2, [r3], #4
 801a788:	9105      	str	r1, [sp, #20]
 801a78a:	6800      	ldr	r0, [r0, #0]
 801a78c:	9301      	str	r3, [sp, #4]
 801a78e:	a902      	add	r1, sp, #8
 801a790:	f000 fba8 	bl	801aee4 <_svfiprintf_r>
 801a794:	9b02      	ldr	r3, [sp, #8]
 801a796:	2200      	movs	r2, #0
 801a798:	701a      	strb	r2, [r3, #0]
 801a79a:	b01c      	add	sp, #112	; 0x70
 801a79c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a7a0:	b003      	add	sp, #12
 801a7a2:	4770      	bx	lr
 801a7a4:	20000058 	.word	0x20000058
 801a7a8:	ffff0208 	.word	0xffff0208

0801a7ac <strcasecmp>:
 801a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ae:	4606      	mov	r6, r0
 801a7b0:	460f      	mov	r7, r1
 801a7b2:	f816 4b01 	ldrb.w	r4, [r6], #1
 801a7b6:	f7ff fbfd 	bl	8019fb4 <__locale_ctype_ptr>
 801a7ba:	4420      	add	r0, r4
 801a7bc:	f817 5b01 	ldrb.w	r5, [r7], #1
 801a7c0:	7843      	ldrb	r3, [r0, #1]
 801a7c2:	f003 0303 	and.w	r3, r3, #3
 801a7c6:	2b01      	cmp	r3, #1
 801a7c8:	bf08      	it	eq
 801a7ca:	3420      	addeq	r4, #32
 801a7cc:	f7ff fbf2 	bl	8019fb4 <__locale_ctype_ptr>
 801a7d0:	4428      	add	r0, r5
 801a7d2:	7842      	ldrb	r2, [r0, #1]
 801a7d4:	f002 0203 	and.w	r2, r2, #3
 801a7d8:	2a01      	cmp	r2, #1
 801a7da:	bf08      	it	eq
 801a7dc:	3520      	addeq	r5, #32
 801a7de:	1b60      	subs	r0, r4, r5
 801a7e0:	d101      	bne.n	801a7e6 <strcasecmp+0x3a>
 801a7e2:	2d00      	cmp	r5, #0
 801a7e4:	d1e5      	bne.n	801a7b2 <strcasecmp+0x6>
 801a7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a7e8 <strchr>:
 801a7e8:	b2c9      	uxtb	r1, r1
 801a7ea:	4603      	mov	r3, r0
 801a7ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a7f0:	b11a      	cbz	r2, 801a7fa <strchr+0x12>
 801a7f2:	428a      	cmp	r2, r1
 801a7f4:	d1f9      	bne.n	801a7ea <strchr+0x2>
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	4770      	bx	lr
 801a7fa:	2900      	cmp	r1, #0
 801a7fc:	bf18      	it	ne
 801a7fe:	2300      	movne	r3, #0
 801a800:	e7f9      	b.n	801a7f6 <strchr+0xe>

0801a802 <strcpy>:
 801a802:	4603      	mov	r3, r0
 801a804:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a808:	f803 2b01 	strb.w	r2, [r3], #1
 801a80c:	2a00      	cmp	r2, #0
 801a80e:	d1f9      	bne.n	801a804 <strcpy+0x2>
 801a810:	4770      	bx	lr

0801a812 <strncasecmp>:
 801a812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a816:	4606      	mov	r6, r0
 801a818:	460f      	mov	r7, r1
 801a81a:	eb00 0802 	add.w	r8, r0, r2
 801a81e:	45b0      	cmp	r8, r6
 801a820:	d019      	beq.n	801a856 <strncasecmp+0x44>
 801a822:	f816 4b01 	ldrb.w	r4, [r6], #1
 801a826:	f7ff fbc5 	bl	8019fb4 <__locale_ctype_ptr>
 801a82a:	4420      	add	r0, r4
 801a82c:	f817 5b01 	ldrb.w	r5, [r7], #1
 801a830:	7843      	ldrb	r3, [r0, #1]
 801a832:	f003 0303 	and.w	r3, r3, #3
 801a836:	2b01      	cmp	r3, #1
 801a838:	bf08      	it	eq
 801a83a:	3420      	addeq	r4, #32
 801a83c:	f7ff fbba 	bl	8019fb4 <__locale_ctype_ptr>
 801a840:	4428      	add	r0, r5
 801a842:	7842      	ldrb	r2, [r0, #1]
 801a844:	f002 0203 	and.w	r2, r2, #3
 801a848:	2a01      	cmp	r2, #1
 801a84a:	bf08      	it	eq
 801a84c:	3520      	addeq	r5, #32
 801a84e:	1b60      	subs	r0, r4, r5
 801a850:	d102      	bne.n	801a858 <strncasecmp+0x46>
 801a852:	2d00      	cmp	r5, #0
 801a854:	d1e3      	bne.n	801a81e <strncasecmp+0xc>
 801a856:	2000      	movs	r0, #0
 801a858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a85c <strncpy>:
 801a85c:	b570      	push	{r4, r5, r6, lr}
 801a85e:	3901      	subs	r1, #1
 801a860:	4604      	mov	r4, r0
 801a862:	b902      	cbnz	r2, 801a866 <strncpy+0xa>
 801a864:	bd70      	pop	{r4, r5, r6, pc}
 801a866:	4623      	mov	r3, r4
 801a868:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801a86c:	f803 5b01 	strb.w	r5, [r3], #1
 801a870:	1e56      	subs	r6, r2, #1
 801a872:	b92d      	cbnz	r5, 801a880 <strncpy+0x24>
 801a874:	4414      	add	r4, r2
 801a876:	42a3      	cmp	r3, r4
 801a878:	d0f4      	beq.n	801a864 <strncpy+0x8>
 801a87a:	f803 5b01 	strb.w	r5, [r3], #1
 801a87e:	e7fa      	b.n	801a876 <strncpy+0x1a>
 801a880:	461c      	mov	r4, r3
 801a882:	4632      	mov	r2, r6
 801a884:	e7ed      	b.n	801a862 <strncpy+0x6>
	...

0801a888 <__swbuf_r>:
 801a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a88a:	460e      	mov	r6, r1
 801a88c:	4614      	mov	r4, r2
 801a88e:	4605      	mov	r5, r0
 801a890:	b118      	cbz	r0, 801a89a <__swbuf_r+0x12>
 801a892:	6983      	ldr	r3, [r0, #24]
 801a894:	b90b      	cbnz	r3, 801a89a <__swbuf_r+0x12>
 801a896:	f000 f9b5 	bl	801ac04 <__sinit>
 801a89a:	4b21      	ldr	r3, [pc, #132]	; (801a920 <__swbuf_r+0x98>)
 801a89c:	429c      	cmp	r4, r3
 801a89e:	d12a      	bne.n	801a8f6 <__swbuf_r+0x6e>
 801a8a0:	686c      	ldr	r4, [r5, #4]
 801a8a2:	69a3      	ldr	r3, [r4, #24]
 801a8a4:	60a3      	str	r3, [r4, #8]
 801a8a6:	89a3      	ldrh	r3, [r4, #12]
 801a8a8:	071a      	lsls	r2, r3, #28
 801a8aa:	d52e      	bpl.n	801a90a <__swbuf_r+0x82>
 801a8ac:	6923      	ldr	r3, [r4, #16]
 801a8ae:	b363      	cbz	r3, 801a90a <__swbuf_r+0x82>
 801a8b0:	6923      	ldr	r3, [r4, #16]
 801a8b2:	6820      	ldr	r0, [r4, #0]
 801a8b4:	1ac0      	subs	r0, r0, r3
 801a8b6:	6963      	ldr	r3, [r4, #20]
 801a8b8:	b2f6      	uxtb	r6, r6
 801a8ba:	4283      	cmp	r3, r0
 801a8bc:	4637      	mov	r7, r6
 801a8be:	dc04      	bgt.n	801a8ca <__swbuf_r+0x42>
 801a8c0:	4621      	mov	r1, r4
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	f000 f934 	bl	801ab30 <_fflush_r>
 801a8c8:	bb28      	cbnz	r0, 801a916 <__swbuf_r+0x8e>
 801a8ca:	68a3      	ldr	r3, [r4, #8]
 801a8cc:	3b01      	subs	r3, #1
 801a8ce:	60a3      	str	r3, [r4, #8]
 801a8d0:	6823      	ldr	r3, [r4, #0]
 801a8d2:	1c5a      	adds	r2, r3, #1
 801a8d4:	6022      	str	r2, [r4, #0]
 801a8d6:	701e      	strb	r6, [r3, #0]
 801a8d8:	6963      	ldr	r3, [r4, #20]
 801a8da:	3001      	adds	r0, #1
 801a8dc:	4283      	cmp	r3, r0
 801a8de:	d004      	beq.n	801a8ea <__swbuf_r+0x62>
 801a8e0:	89a3      	ldrh	r3, [r4, #12]
 801a8e2:	07db      	lsls	r3, r3, #31
 801a8e4:	d519      	bpl.n	801a91a <__swbuf_r+0x92>
 801a8e6:	2e0a      	cmp	r6, #10
 801a8e8:	d117      	bne.n	801a91a <__swbuf_r+0x92>
 801a8ea:	4621      	mov	r1, r4
 801a8ec:	4628      	mov	r0, r5
 801a8ee:	f000 f91f 	bl	801ab30 <_fflush_r>
 801a8f2:	b190      	cbz	r0, 801a91a <__swbuf_r+0x92>
 801a8f4:	e00f      	b.n	801a916 <__swbuf_r+0x8e>
 801a8f6:	4b0b      	ldr	r3, [pc, #44]	; (801a924 <__swbuf_r+0x9c>)
 801a8f8:	429c      	cmp	r4, r3
 801a8fa:	d101      	bne.n	801a900 <__swbuf_r+0x78>
 801a8fc:	68ac      	ldr	r4, [r5, #8]
 801a8fe:	e7d0      	b.n	801a8a2 <__swbuf_r+0x1a>
 801a900:	4b09      	ldr	r3, [pc, #36]	; (801a928 <__swbuf_r+0xa0>)
 801a902:	429c      	cmp	r4, r3
 801a904:	bf08      	it	eq
 801a906:	68ec      	ldreq	r4, [r5, #12]
 801a908:	e7cb      	b.n	801a8a2 <__swbuf_r+0x1a>
 801a90a:	4621      	mov	r1, r4
 801a90c:	4628      	mov	r0, r5
 801a90e:	f000 f81b 	bl	801a948 <__swsetup_r>
 801a912:	2800      	cmp	r0, #0
 801a914:	d0cc      	beq.n	801a8b0 <__swbuf_r+0x28>
 801a916:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a91a:	4638      	mov	r0, r7
 801a91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a91e:	bf00      	nop
 801a920:	0801c854 	.word	0x0801c854
 801a924:	0801c874 	.word	0x0801c874
 801a928:	0801c834 	.word	0x0801c834

0801a92c <__ascii_wctomb>:
 801a92c:	b149      	cbz	r1, 801a942 <__ascii_wctomb+0x16>
 801a92e:	2aff      	cmp	r2, #255	; 0xff
 801a930:	bf85      	ittet	hi
 801a932:	238a      	movhi	r3, #138	; 0x8a
 801a934:	6003      	strhi	r3, [r0, #0]
 801a936:	700a      	strbls	r2, [r1, #0]
 801a938:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801a93c:	bf98      	it	ls
 801a93e:	2001      	movls	r0, #1
 801a940:	4770      	bx	lr
 801a942:	4608      	mov	r0, r1
 801a944:	4770      	bx	lr
	...

0801a948 <__swsetup_r>:
 801a948:	4b32      	ldr	r3, [pc, #200]	; (801aa14 <__swsetup_r+0xcc>)
 801a94a:	b570      	push	{r4, r5, r6, lr}
 801a94c:	681d      	ldr	r5, [r3, #0]
 801a94e:	4606      	mov	r6, r0
 801a950:	460c      	mov	r4, r1
 801a952:	b125      	cbz	r5, 801a95e <__swsetup_r+0x16>
 801a954:	69ab      	ldr	r3, [r5, #24]
 801a956:	b913      	cbnz	r3, 801a95e <__swsetup_r+0x16>
 801a958:	4628      	mov	r0, r5
 801a95a:	f000 f953 	bl	801ac04 <__sinit>
 801a95e:	4b2e      	ldr	r3, [pc, #184]	; (801aa18 <__swsetup_r+0xd0>)
 801a960:	429c      	cmp	r4, r3
 801a962:	d10f      	bne.n	801a984 <__swsetup_r+0x3c>
 801a964:	686c      	ldr	r4, [r5, #4]
 801a966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a96a:	b29a      	uxth	r2, r3
 801a96c:	0715      	lsls	r5, r2, #28
 801a96e:	d42c      	bmi.n	801a9ca <__swsetup_r+0x82>
 801a970:	06d0      	lsls	r0, r2, #27
 801a972:	d411      	bmi.n	801a998 <__swsetup_r+0x50>
 801a974:	2209      	movs	r2, #9
 801a976:	6032      	str	r2, [r6, #0]
 801a978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a97c:	81a3      	strh	r3, [r4, #12]
 801a97e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a982:	e03e      	b.n	801aa02 <__swsetup_r+0xba>
 801a984:	4b25      	ldr	r3, [pc, #148]	; (801aa1c <__swsetup_r+0xd4>)
 801a986:	429c      	cmp	r4, r3
 801a988:	d101      	bne.n	801a98e <__swsetup_r+0x46>
 801a98a:	68ac      	ldr	r4, [r5, #8]
 801a98c:	e7eb      	b.n	801a966 <__swsetup_r+0x1e>
 801a98e:	4b24      	ldr	r3, [pc, #144]	; (801aa20 <__swsetup_r+0xd8>)
 801a990:	429c      	cmp	r4, r3
 801a992:	bf08      	it	eq
 801a994:	68ec      	ldreq	r4, [r5, #12]
 801a996:	e7e6      	b.n	801a966 <__swsetup_r+0x1e>
 801a998:	0751      	lsls	r1, r2, #29
 801a99a:	d512      	bpl.n	801a9c2 <__swsetup_r+0x7a>
 801a99c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a99e:	b141      	cbz	r1, 801a9b2 <__swsetup_r+0x6a>
 801a9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a9a4:	4299      	cmp	r1, r3
 801a9a6:	d002      	beq.n	801a9ae <__swsetup_r+0x66>
 801a9a8:	4630      	mov	r0, r6
 801a9aa:	f7ff fb5f 	bl	801a06c <_free_r>
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	6363      	str	r3, [r4, #52]	; 0x34
 801a9b2:	89a3      	ldrh	r3, [r4, #12]
 801a9b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a9b8:	81a3      	strh	r3, [r4, #12]
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	6063      	str	r3, [r4, #4]
 801a9be:	6923      	ldr	r3, [r4, #16]
 801a9c0:	6023      	str	r3, [r4, #0]
 801a9c2:	89a3      	ldrh	r3, [r4, #12]
 801a9c4:	f043 0308 	orr.w	r3, r3, #8
 801a9c8:	81a3      	strh	r3, [r4, #12]
 801a9ca:	6923      	ldr	r3, [r4, #16]
 801a9cc:	b94b      	cbnz	r3, 801a9e2 <__swsetup_r+0x9a>
 801a9ce:	89a3      	ldrh	r3, [r4, #12]
 801a9d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a9d8:	d003      	beq.n	801a9e2 <__swsetup_r+0x9a>
 801a9da:	4621      	mov	r1, r4
 801a9dc:	4630      	mov	r0, r6
 801a9de:	f000 f9bf 	bl	801ad60 <__smakebuf_r>
 801a9e2:	89a2      	ldrh	r2, [r4, #12]
 801a9e4:	f012 0301 	ands.w	r3, r2, #1
 801a9e8:	d00c      	beq.n	801aa04 <__swsetup_r+0xbc>
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	60a3      	str	r3, [r4, #8]
 801a9ee:	6963      	ldr	r3, [r4, #20]
 801a9f0:	425b      	negs	r3, r3
 801a9f2:	61a3      	str	r3, [r4, #24]
 801a9f4:	6923      	ldr	r3, [r4, #16]
 801a9f6:	b953      	cbnz	r3, 801aa0e <__swsetup_r+0xc6>
 801a9f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801aa00:	d1ba      	bne.n	801a978 <__swsetup_r+0x30>
 801aa02:	bd70      	pop	{r4, r5, r6, pc}
 801aa04:	0792      	lsls	r2, r2, #30
 801aa06:	bf58      	it	pl
 801aa08:	6963      	ldrpl	r3, [r4, #20]
 801aa0a:	60a3      	str	r3, [r4, #8]
 801aa0c:	e7f2      	b.n	801a9f4 <__swsetup_r+0xac>
 801aa0e:	2000      	movs	r0, #0
 801aa10:	e7f7      	b.n	801aa02 <__swsetup_r+0xba>
 801aa12:	bf00      	nop
 801aa14:	20000058 	.word	0x20000058
 801aa18:	0801c854 	.word	0x0801c854
 801aa1c:	0801c874 	.word	0x0801c874
 801aa20:	0801c834 	.word	0x0801c834

0801aa24 <__sflush_r>:
 801aa24:	898a      	ldrh	r2, [r1, #12]
 801aa26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa2a:	4605      	mov	r5, r0
 801aa2c:	0710      	lsls	r0, r2, #28
 801aa2e:	460c      	mov	r4, r1
 801aa30:	d458      	bmi.n	801aae4 <__sflush_r+0xc0>
 801aa32:	684b      	ldr	r3, [r1, #4]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	dc05      	bgt.n	801aa44 <__sflush_r+0x20>
 801aa38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	dc02      	bgt.n	801aa44 <__sflush_r+0x20>
 801aa3e:	2000      	movs	r0, #0
 801aa40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa46:	2e00      	cmp	r6, #0
 801aa48:	d0f9      	beq.n	801aa3e <__sflush_r+0x1a>
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801aa50:	682f      	ldr	r7, [r5, #0]
 801aa52:	6a21      	ldr	r1, [r4, #32]
 801aa54:	602b      	str	r3, [r5, #0]
 801aa56:	d032      	beq.n	801aabe <__sflush_r+0x9a>
 801aa58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801aa5a:	89a3      	ldrh	r3, [r4, #12]
 801aa5c:	075a      	lsls	r2, r3, #29
 801aa5e:	d505      	bpl.n	801aa6c <__sflush_r+0x48>
 801aa60:	6863      	ldr	r3, [r4, #4]
 801aa62:	1ac0      	subs	r0, r0, r3
 801aa64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aa66:	b10b      	cbz	r3, 801aa6c <__sflush_r+0x48>
 801aa68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aa6a:	1ac0      	subs	r0, r0, r3
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	4602      	mov	r2, r0
 801aa70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa72:	6a21      	ldr	r1, [r4, #32]
 801aa74:	4628      	mov	r0, r5
 801aa76:	47b0      	blx	r6
 801aa78:	1c43      	adds	r3, r0, #1
 801aa7a:	89a3      	ldrh	r3, [r4, #12]
 801aa7c:	d106      	bne.n	801aa8c <__sflush_r+0x68>
 801aa7e:	6829      	ldr	r1, [r5, #0]
 801aa80:	291d      	cmp	r1, #29
 801aa82:	d848      	bhi.n	801ab16 <__sflush_r+0xf2>
 801aa84:	4a29      	ldr	r2, [pc, #164]	; (801ab2c <__sflush_r+0x108>)
 801aa86:	40ca      	lsrs	r2, r1
 801aa88:	07d6      	lsls	r6, r2, #31
 801aa8a:	d544      	bpl.n	801ab16 <__sflush_r+0xf2>
 801aa8c:	2200      	movs	r2, #0
 801aa8e:	6062      	str	r2, [r4, #4]
 801aa90:	04d9      	lsls	r1, r3, #19
 801aa92:	6922      	ldr	r2, [r4, #16]
 801aa94:	6022      	str	r2, [r4, #0]
 801aa96:	d504      	bpl.n	801aaa2 <__sflush_r+0x7e>
 801aa98:	1c42      	adds	r2, r0, #1
 801aa9a:	d101      	bne.n	801aaa0 <__sflush_r+0x7c>
 801aa9c:	682b      	ldr	r3, [r5, #0]
 801aa9e:	b903      	cbnz	r3, 801aaa2 <__sflush_r+0x7e>
 801aaa0:	6560      	str	r0, [r4, #84]	; 0x54
 801aaa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aaa4:	602f      	str	r7, [r5, #0]
 801aaa6:	2900      	cmp	r1, #0
 801aaa8:	d0c9      	beq.n	801aa3e <__sflush_r+0x1a>
 801aaaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aaae:	4299      	cmp	r1, r3
 801aab0:	d002      	beq.n	801aab8 <__sflush_r+0x94>
 801aab2:	4628      	mov	r0, r5
 801aab4:	f7ff fada 	bl	801a06c <_free_r>
 801aab8:	2000      	movs	r0, #0
 801aaba:	6360      	str	r0, [r4, #52]	; 0x34
 801aabc:	e7c0      	b.n	801aa40 <__sflush_r+0x1c>
 801aabe:	2301      	movs	r3, #1
 801aac0:	4628      	mov	r0, r5
 801aac2:	47b0      	blx	r6
 801aac4:	1c41      	adds	r1, r0, #1
 801aac6:	d1c8      	bne.n	801aa5a <__sflush_r+0x36>
 801aac8:	682b      	ldr	r3, [r5, #0]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d0c5      	beq.n	801aa5a <__sflush_r+0x36>
 801aace:	2b1d      	cmp	r3, #29
 801aad0:	d001      	beq.n	801aad6 <__sflush_r+0xb2>
 801aad2:	2b16      	cmp	r3, #22
 801aad4:	d101      	bne.n	801aada <__sflush_r+0xb6>
 801aad6:	602f      	str	r7, [r5, #0]
 801aad8:	e7b1      	b.n	801aa3e <__sflush_r+0x1a>
 801aada:	89a3      	ldrh	r3, [r4, #12]
 801aadc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aae0:	81a3      	strh	r3, [r4, #12]
 801aae2:	e7ad      	b.n	801aa40 <__sflush_r+0x1c>
 801aae4:	690f      	ldr	r7, [r1, #16]
 801aae6:	2f00      	cmp	r7, #0
 801aae8:	d0a9      	beq.n	801aa3e <__sflush_r+0x1a>
 801aaea:	0793      	lsls	r3, r2, #30
 801aaec:	680e      	ldr	r6, [r1, #0]
 801aaee:	bf08      	it	eq
 801aaf0:	694b      	ldreq	r3, [r1, #20]
 801aaf2:	600f      	str	r7, [r1, #0]
 801aaf4:	bf18      	it	ne
 801aaf6:	2300      	movne	r3, #0
 801aaf8:	eba6 0807 	sub.w	r8, r6, r7
 801aafc:	608b      	str	r3, [r1, #8]
 801aafe:	f1b8 0f00 	cmp.w	r8, #0
 801ab02:	dd9c      	ble.n	801aa3e <__sflush_r+0x1a>
 801ab04:	4643      	mov	r3, r8
 801ab06:	463a      	mov	r2, r7
 801ab08:	6a21      	ldr	r1, [r4, #32]
 801ab0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ab0c:	4628      	mov	r0, r5
 801ab0e:	47b0      	blx	r6
 801ab10:	2800      	cmp	r0, #0
 801ab12:	dc06      	bgt.n	801ab22 <__sflush_r+0xfe>
 801ab14:	89a3      	ldrh	r3, [r4, #12]
 801ab16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab1a:	81a3      	strh	r3, [r4, #12]
 801ab1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab20:	e78e      	b.n	801aa40 <__sflush_r+0x1c>
 801ab22:	4407      	add	r7, r0
 801ab24:	eba8 0800 	sub.w	r8, r8, r0
 801ab28:	e7e9      	b.n	801aafe <__sflush_r+0xda>
 801ab2a:	bf00      	nop
 801ab2c:	20400001 	.word	0x20400001

0801ab30 <_fflush_r>:
 801ab30:	b538      	push	{r3, r4, r5, lr}
 801ab32:	690b      	ldr	r3, [r1, #16]
 801ab34:	4605      	mov	r5, r0
 801ab36:	460c      	mov	r4, r1
 801ab38:	b1db      	cbz	r3, 801ab72 <_fflush_r+0x42>
 801ab3a:	b118      	cbz	r0, 801ab44 <_fflush_r+0x14>
 801ab3c:	6983      	ldr	r3, [r0, #24]
 801ab3e:	b90b      	cbnz	r3, 801ab44 <_fflush_r+0x14>
 801ab40:	f000 f860 	bl	801ac04 <__sinit>
 801ab44:	4b0c      	ldr	r3, [pc, #48]	; (801ab78 <_fflush_r+0x48>)
 801ab46:	429c      	cmp	r4, r3
 801ab48:	d109      	bne.n	801ab5e <_fflush_r+0x2e>
 801ab4a:	686c      	ldr	r4, [r5, #4]
 801ab4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab50:	b17b      	cbz	r3, 801ab72 <_fflush_r+0x42>
 801ab52:	4621      	mov	r1, r4
 801ab54:	4628      	mov	r0, r5
 801ab56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab5a:	f7ff bf63 	b.w	801aa24 <__sflush_r>
 801ab5e:	4b07      	ldr	r3, [pc, #28]	; (801ab7c <_fflush_r+0x4c>)
 801ab60:	429c      	cmp	r4, r3
 801ab62:	d101      	bne.n	801ab68 <_fflush_r+0x38>
 801ab64:	68ac      	ldr	r4, [r5, #8]
 801ab66:	e7f1      	b.n	801ab4c <_fflush_r+0x1c>
 801ab68:	4b05      	ldr	r3, [pc, #20]	; (801ab80 <_fflush_r+0x50>)
 801ab6a:	429c      	cmp	r4, r3
 801ab6c:	bf08      	it	eq
 801ab6e:	68ec      	ldreq	r4, [r5, #12]
 801ab70:	e7ec      	b.n	801ab4c <_fflush_r+0x1c>
 801ab72:	2000      	movs	r0, #0
 801ab74:	bd38      	pop	{r3, r4, r5, pc}
 801ab76:	bf00      	nop
 801ab78:	0801c854 	.word	0x0801c854
 801ab7c:	0801c874 	.word	0x0801c874
 801ab80:	0801c834 	.word	0x0801c834

0801ab84 <std>:
 801ab84:	2300      	movs	r3, #0
 801ab86:	b510      	push	{r4, lr}
 801ab88:	4604      	mov	r4, r0
 801ab8a:	e9c0 3300 	strd	r3, r3, [r0]
 801ab8e:	6083      	str	r3, [r0, #8]
 801ab90:	8181      	strh	r1, [r0, #12]
 801ab92:	6643      	str	r3, [r0, #100]	; 0x64
 801ab94:	81c2      	strh	r2, [r0, #14]
 801ab96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab9a:	6183      	str	r3, [r0, #24]
 801ab9c:	4619      	mov	r1, r3
 801ab9e:	2208      	movs	r2, #8
 801aba0:	305c      	adds	r0, #92	; 0x5c
 801aba2:	f7ff fa5b 	bl	801a05c <memset>
 801aba6:	4b05      	ldr	r3, [pc, #20]	; (801abbc <std+0x38>)
 801aba8:	6263      	str	r3, [r4, #36]	; 0x24
 801abaa:	4b05      	ldr	r3, [pc, #20]	; (801abc0 <std+0x3c>)
 801abac:	62a3      	str	r3, [r4, #40]	; 0x28
 801abae:	4b05      	ldr	r3, [pc, #20]	; (801abc4 <std+0x40>)
 801abb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801abb2:	4b05      	ldr	r3, [pc, #20]	; (801abc8 <std+0x44>)
 801abb4:	6224      	str	r4, [r4, #32]
 801abb6:	6323      	str	r3, [r4, #48]	; 0x30
 801abb8:	bd10      	pop	{r4, pc}
 801abba:	bf00      	nop
 801abbc:	0801b0d5 	.word	0x0801b0d5
 801abc0:	0801b0f7 	.word	0x0801b0f7
 801abc4:	0801b12f 	.word	0x0801b12f
 801abc8:	0801b153 	.word	0x0801b153

0801abcc <_cleanup_r>:
 801abcc:	4901      	ldr	r1, [pc, #4]	; (801abd4 <_cleanup_r+0x8>)
 801abce:	f000 b885 	b.w	801acdc <_fwalk_reent>
 801abd2:	bf00      	nop
 801abd4:	0801ab31 	.word	0x0801ab31

0801abd8 <__sfmoreglue>:
 801abd8:	b570      	push	{r4, r5, r6, lr}
 801abda:	1e4a      	subs	r2, r1, #1
 801abdc:	2568      	movs	r5, #104	; 0x68
 801abde:	4355      	muls	r5, r2
 801abe0:	460e      	mov	r6, r1
 801abe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801abe6:	f7ff fa8f 	bl	801a108 <_malloc_r>
 801abea:	4604      	mov	r4, r0
 801abec:	b140      	cbz	r0, 801ac00 <__sfmoreglue+0x28>
 801abee:	2100      	movs	r1, #0
 801abf0:	e9c0 1600 	strd	r1, r6, [r0]
 801abf4:	300c      	adds	r0, #12
 801abf6:	60a0      	str	r0, [r4, #8]
 801abf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801abfc:	f7ff fa2e 	bl	801a05c <memset>
 801ac00:	4620      	mov	r0, r4
 801ac02:	bd70      	pop	{r4, r5, r6, pc}

0801ac04 <__sinit>:
 801ac04:	6983      	ldr	r3, [r0, #24]
 801ac06:	b510      	push	{r4, lr}
 801ac08:	4604      	mov	r4, r0
 801ac0a:	bb33      	cbnz	r3, 801ac5a <__sinit+0x56>
 801ac0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801ac10:	6503      	str	r3, [r0, #80]	; 0x50
 801ac12:	4b12      	ldr	r3, [pc, #72]	; (801ac5c <__sinit+0x58>)
 801ac14:	4a12      	ldr	r2, [pc, #72]	; (801ac60 <__sinit+0x5c>)
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	6282      	str	r2, [r0, #40]	; 0x28
 801ac1a:	4298      	cmp	r0, r3
 801ac1c:	bf04      	itt	eq
 801ac1e:	2301      	moveq	r3, #1
 801ac20:	6183      	streq	r3, [r0, #24]
 801ac22:	f000 f81f 	bl	801ac64 <__sfp>
 801ac26:	6060      	str	r0, [r4, #4]
 801ac28:	4620      	mov	r0, r4
 801ac2a:	f000 f81b 	bl	801ac64 <__sfp>
 801ac2e:	60a0      	str	r0, [r4, #8]
 801ac30:	4620      	mov	r0, r4
 801ac32:	f000 f817 	bl	801ac64 <__sfp>
 801ac36:	2200      	movs	r2, #0
 801ac38:	60e0      	str	r0, [r4, #12]
 801ac3a:	2104      	movs	r1, #4
 801ac3c:	6860      	ldr	r0, [r4, #4]
 801ac3e:	f7ff ffa1 	bl	801ab84 <std>
 801ac42:	2201      	movs	r2, #1
 801ac44:	2109      	movs	r1, #9
 801ac46:	68a0      	ldr	r0, [r4, #8]
 801ac48:	f7ff ff9c 	bl	801ab84 <std>
 801ac4c:	2202      	movs	r2, #2
 801ac4e:	2112      	movs	r1, #18
 801ac50:	68e0      	ldr	r0, [r4, #12]
 801ac52:	f7ff ff97 	bl	801ab84 <std>
 801ac56:	2301      	movs	r3, #1
 801ac58:	61a3      	str	r3, [r4, #24]
 801ac5a:	bd10      	pop	{r4, pc}
 801ac5c:	0801c6f0 	.word	0x0801c6f0
 801ac60:	0801abcd 	.word	0x0801abcd

0801ac64 <__sfp>:
 801ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac66:	4b1b      	ldr	r3, [pc, #108]	; (801acd4 <__sfp+0x70>)
 801ac68:	681e      	ldr	r6, [r3, #0]
 801ac6a:	69b3      	ldr	r3, [r6, #24]
 801ac6c:	4607      	mov	r7, r0
 801ac6e:	b913      	cbnz	r3, 801ac76 <__sfp+0x12>
 801ac70:	4630      	mov	r0, r6
 801ac72:	f7ff ffc7 	bl	801ac04 <__sinit>
 801ac76:	3648      	adds	r6, #72	; 0x48
 801ac78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ac7c:	3b01      	subs	r3, #1
 801ac7e:	d503      	bpl.n	801ac88 <__sfp+0x24>
 801ac80:	6833      	ldr	r3, [r6, #0]
 801ac82:	b133      	cbz	r3, 801ac92 <__sfp+0x2e>
 801ac84:	6836      	ldr	r6, [r6, #0]
 801ac86:	e7f7      	b.n	801ac78 <__sfp+0x14>
 801ac88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ac8c:	b16d      	cbz	r5, 801acaa <__sfp+0x46>
 801ac8e:	3468      	adds	r4, #104	; 0x68
 801ac90:	e7f4      	b.n	801ac7c <__sfp+0x18>
 801ac92:	2104      	movs	r1, #4
 801ac94:	4638      	mov	r0, r7
 801ac96:	f7ff ff9f 	bl	801abd8 <__sfmoreglue>
 801ac9a:	6030      	str	r0, [r6, #0]
 801ac9c:	2800      	cmp	r0, #0
 801ac9e:	d1f1      	bne.n	801ac84 <__sfp+0x20>
 801aca0:	230c      	movs	r3, #12
 801aca2:	603b      	str	r3, [r7, #0]
 801aca4:	4604      	mov	r4, r0
 801aca6:	4620      	mov	r0, r4
 801aca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acaa:	4b0b      	ldr	r3, [pc, #44]	; (801acd8 <__sfp+0x74>)
 801acac:	6665      	str	r5, [r4, #100]	; 0x64
 801acae:	e9c4 5500 	strd	r5, r5, [r4]
 801acb2:	60a5      	str	r5, [r4, #8]
 801acb4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801acb8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801acbc:	2208      	movs	r2, #8
 801acbe:	4629      	mov	r1, r5
 801acc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801acc4:	f7ff f9ca 	bl	801a05c <memset>
 801acc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801accc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801acd0:	e7e9      	b.n	801aca6 <__sfp+0x42>
 801acd2:	bf00      	nop
 801acd4:	0801c6f0 	.word	0x0801c6f0
 801acd8:	ffff0001 	.word	0xffff0001

0801acdc <_fwalk_reent>:
 801acdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ace0:	4680      	mov	r8, r0
 801ace2:	4689      	mov	r9, r1
 801ace4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ace8:	2600      	movs	r6, #0
 801acea:	b914      	cbnz	r4, 801acf2 <_fwalk_reent+0x16>
 801acec:	4630      	mov	r0, r6
 801acee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801acf2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801acf6:	3f01      	subs	r7, #1
 801acf8:	d501      	bpl.n	801acfe <_fwalk_reent+0x22>
 801acfa:	6824      	ldr	r4, [r4, #0]
 801acfc:	e7f5      	b.n	801acea <_fwalk_reent+0xe>
 801acfe:	89ab      	ldrh	r3, [r5, #12]
 801ad00:	2b01      	cmp	r3, #1
 801ad02:	d907      	bls.n	801ad14 <_fwalk_reent+0x38>
 801ad04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad08:	3301      	adds	r3, #1
 801ad0a:	d003      	beq.n	801ad14 <_fwalk_reent+0x38>
 801ad0c:	4629      	mov	r1, r5
 801ad0e:	4640      	mov	r0, r8
 801ad10:	47c8      	blx	r9
 801ad12:	4306      	orrs	r6, r0
 801ad14:	3568      	adds	r5, #104	; 0x68
 801ad16:	e7ee      	b.n	801acf6 <_fwalk_reent+0x1a>

0801ad18 <__swhatbuf_r>:
 801ad18:	b570      	push	{r4, r5, r6, lr}
 801ad1a:	460e      	mov	r6, r1
 801ad1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad20:	2900      	cmp	r1, #0
 801ad22:	b096      	sub	sp, #88	; 0x58
 801ad24:	4614      	mov	r4, r2
 801ad26:	461d      	mov	r5, r3
 801ad28:	da07      	bge.n	801ad3a <__swhatbuf_r+0x22>
 801ad2a:	2300      	movs	r3, #0
 801ad2c:	602b      	str	r3, [r5, #0]
 801ad2e:	89b3      	ldrh	r3, [r6, #12]
 801ad30:	061a      	lsls	r2, r3, #24
 801ad32:	d410      	bmi.n	801ad56 <__swhatbuf_r+0x3e>
 801ad34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad38:	e00e      	b.n	801ad58 <__swhatbuf_r+0x40>
 801ad3a:	466a      	mov	r2, sp
 801ad3c:	f000 fa30 	bl	801b1a0 <_fstat_r>
 801ad40:	2800      	cmp	r0, #0
 801ad42:	dbf2      	blt.n	801ad2a <__swhatbuf_r+0x12>
 801ad44:	9a01      	ldr	r2, [sp, #4]
 801ad46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ad4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ad4e:	425a      	negs	r2, r3
 801ad50:	415a      	adcs	r2, r3
 801ad52:	602a      	str	r2, [r5, #0]
 801ad54:	e7ee      	b.n	801ad34 <__swhatbuf_r+0x1c>
 801ad56:	2340      	movs	r3, #64	; 0x40
 801ad58:	2000      	movs	r0, #0
 801ad5a:	6023      	str	r3, [r4, #0]
 801ad5c:	b016      	add	sp, #88	; 0x58
 801ad5e:	bd70      	pop	{r4, r5, r6, pc}

0801ad60 <__smakebuf_r>:
 801ad60:	898b      	ldrh	r3, [r1, #12]
 801ad62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad64:	079d      	lsls	r5, r3, #30
 801ad66:	4606      	mov	r6, r0
 801ad68:	460c      	mov	r4, r1
 801ad6a:	d507      	bpl.n	801ad7c <__smakebuf_r+0x1c>
 801ad6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ad70:	6023      	str	r3, [r4, #0]
 801ad72:	6123      	str	r3, [r4, #16]
 801ad74:	2301      	movs	r3, #1
 801ad76:	6163      	str	r3, [r4, #20]
 801ad78:	b002      	add	sp, #8
 801ad7a:	bd70      	pop	{r4, r5, r6, pc}
 801ad7c:	ab01      	add	r3, sp, #4
 801ad7e:	466a      	mov	r2, sp
 801ad80:	f7ff ffca 	bl	801ad18 <__swhatbuf_r>
 801ad84:	9900      	ldr	r1, [sp, #0]
 801ad86:	4605      	mov	r5, r0
 801ad88:	4630      	mov	r0, r6
 801ad8a:	f7ff f9bd 	bl	801a108 <_malloc_r>
 801ad8e:	b948      	cbnz	r0, 801ada4 <__smakebuf_r+0x44>
 801ad90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad94:	059a      	lsls	r2, r3, #22
 801ad96:	d4ef      	bmi.n	801ad78 <__smakebuf_r+0x18>
 801ad98:	f023 0303 	bic.w	r3, r3, #3
 801ad9c:	f043 0302 	orr.w	r3, r3, #2
 801ada0:	81a3      	strh	r3, [r4, #12]
 801ada2:	e7e3      	b.n	801ad6c <__smakebuf_r+0xc>
 801ada4:	4b0d      	ldr	r3, [pc, #52]	; (801addc <__smakebuf_r+0x7c>)
 801ada6:	62b3      	str	r3, [r6, #40]	; 0x28
 801ada8:	89a3      	ldrh	r3, [r4, #12]
 801adaa:	6020      	str	r0, [r4, #0]
 801adac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801adb0:	81a3      	strh	r3, [r4, #12]
 801adb2:	9b00      	ldr	r3, [sp, #0]
 801adb4:	6163      	str	r3, [r4, #20]
 801adb6:	9b01      	ldr	r3, [sp, #4]
 801adb8:	6120      	str	r0, [r4, #16]
 801adba:	b15b      	cbz	r3, 801add4 <__smakebuf_r+0x74>
 801adbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801adc0:	4630      	mov	r0, r6
 801adc2:	f000 f9ff 	bl	801b1c4 <_isatty_r>
 801adc6:	b128      	cbz	r0, 801add4 <__smakebuf_r+0x74>
 801adc8:	89a3      	ldrh	r3, [r4, #12]
 801adca:	f023 0303 	bic.w	r3, r3, #3
 801adce:	f043 0301 	orr.w	r3, r3, #1
 801add2:	81a3      	strh	r3, [r4, #12]
 801add4:	89a3      	ldrh	r3, [r4, #12]
 801add6:	431d      	orrs	r5, r3
 801add8:	81a5      	strh	r5, [r4, #12]
 801adda:	e7cd      	b.n	801ad78 <__smakebuf_r+0x18>
 801addc:	0801abcd 	.word	0x0801abcd

0801ade0 <__malloc_lock>:
 801ade0:	4770      	bx	lr

0801ade2 <__malloc_unlock>:
 801ade2:	4770      	bx	lr

0801ade4 <_realloc_r>:
 801ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ade6:	4607      	mov	r7, r0
 801ade8:	4614      	mov	r4, r2
 801adea:	460e      	mov	r6, r1
 801adec:	b921      	cbnz	r1, 801adf8 <_realloc_r+0x14>
 801adee:	4611      	mov	r1, r2
 801adf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801adf4:	f7ff b988 	b.w	801a108 <_malloc_r>
 801adf8:	b922      	cbnz	r2, 801ae04 <_realloc_r+0x20>
 801adfa:	f7ff f937 	bl	801a06c <_free_r>
 801adfe:	4625      	mov	r5, r4
 801ae00:	4628      	mov	r0, r5
 801ae02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae04:	f000 fa00 	bl	801b208 <_malloc_usable_size_r>
 801ae08:	42a0      	cmp	r0, r4
 801ae0a:	d20f      	bcs.n	801ae2c <_realloc_r+0x48>
 801ae0c:	4621      	mov	r1, r4
 801ae0e:	4638      	mov	r0, r7
 801ae10:	f7ff f97a 	bl	801a108 <_malloc_r>
 801ae14:	4605      	mov	r5, r0
 801ae16:	2800      	cmp	r0, #0
 801ae18:	d0f2      	beq.n	801ae00 <_realloc_r+0x1c>
 801ae1a:	4631      	mov	r1, r6
 801ae1c:	4622      	mov	r2, r4
 801ae1e:	f7ff f8f9 	bl	801a014 <memcpy>
 801ae22:	4631      	mov	r1, r6
 801ae24:	4638      	mov	r0, r7
 801ae26:	f7ff f921 	bl	801a06c <_free_r>
 801ae2a:	e7e9      	b.n	801ae00 <_realloc_r+0x1c>
 801ae2c:	4635      	mov	r5, r6
 801ae2e:	e7e7      	b.n	801ae00 <_realloc_r+0x1c>

0801ae30 <__ssputs_r>:
 801ae30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae34:	688e      	ldr	r6, [r1, #8]
 801ae36:	429e      	cmp	r6, r3
 801ae38:	4682      	mov	sl, r0
 801ae3a:	460c      	mov	r4, r1
 801ae3c:	4690      	mov	r8, r2
 801ae3e:	4699      	mov	r9, r3
 801ae40:	d837      	bhi.n	801aeb2 <__ssputs_r+0x82>
 801ae42:	898a      	ldrh	r2, [r1, #12]
 801ae44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ae48:	d031      	beq.n	801aeae <__ssputs_r+0x7e>
 801ae4a:	6825      	ldr	r5, [r4, #0]
 801ae4c:	6909      	ldr	r1, [r1, #16]
 801ae4e:	1a6f      	subs	r7, r5, r1
 801ae50:	6965      	ldr	r5, [r4, #20]
 801ae52:	2302      	movs	r3, #2
 801ae54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ae58:	fb95 f5f3 	sdiv	r5, r5, r3
 801ae5c:	f109 0301 	add.w	r3, r9, #1
 801ae60:	443b      	add	r3, r7
 801ae62:	429d      	cmp	r5, r3
 801ae64:	bf38      	it	cc
 801ae66:	461d      	movcc	r5, r3
 801ae68:	0553      	lsls	r3, r2, #21
 801ae6a:	d530      	bpl.n	801aece <__ssputs_r+0x9e>
 801ae6c:	4629      	mov	r1, r5
 801ae6e:	f7ff f94b 	bl	801a108 <_malloc_r>
 801ae72:	4606      	mov	r6, r0
 801ae74:	b950      	cbnz	r0, 801ae8c <__ssputs_r+0x5c>
 801ae76:	230c      	movs	r3, #12
 801ae78:	f8ca 3000 	str.w	r3, [sl]
 801ae7c:	89a3      	ldrh	r3, [r4, #12]
 801ae7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae82:	81a3      	strh	r3, [r4, #12]
 801ae84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae8c:	463a      	mov	r2, r7
 801ae8e:	6921      	ldr	r1, [r4, #16]
 801ae90:	f7ff f8c0 	bl	801a014 <memcpy>
 801ae94:	89a3      	ldrh	r3, [r4, #12]
 801ae96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ae9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ae9e:	81a3      	strh	r3, [r4, #12]
 801aea0:	6126      	str	r6, [r4, #16]
 801aea2:	6165      	str	r5, [r4, #20]
 801aea4:	443e      	add	r6, r7
 801aea6:	1bed      	subs	r5, r5, r7
 801aea8:	6026      	str	r6, [r4, #0]
 801aeaa:	60a5      	str	r5, [r4, #8]
 801aeac:	464e      	mov	r6, r9
 801aeae:	454e      	cmp	r6, r9
 801aeb0:	d900      	bls.n	801aeb4 <__ssputs_r+0x84>
 801aeb2:	464e      	mov	r6, r9
 801aeb4:	4632      	mov	r2, r6
 801aeb6:	4641      	mov	r1, r8
 801aeb8:	6820      	ldr	r0, [r4, #0]
 801aeba:	f7ff f8b6 	bl	801a02a <memmove>
 801aebe:	68a3      	ldr	r3, [r4, #8]
 801aec0:	1b9b      	subs	r3, r3, r6
 801aec2:	60a3      	str	r3, [r4, #8]
 801aec4:	6823      	ldr	r3, [r4, #0]
 801aec6:	441e      	add	r6, r3
 801aec8:	6026      	str	r6, [r4, #0]
 801aeca:	2000      	movs	r0, #0
 801aecc:	e7dc      	b.n	801ae88 <__ssputs_r+0x58>
 801aece:	462a      	mov	r2, r5
 801aed0:	f7ff ff88 	bl	801ade4 <_realloc_r>
 801aed4:	4606      	mov	r6, r0
 801aed6:	2800      	cmp	r0, #0
 801aed8:	d1e2      	bne.n	801aea0 <__ssputs_r+0x70>
 801aeda:	6921      	ldr	r1, [r4, #16]
 801aedc:	4650      	mov	r0, sl
 801aede:	f7ff f8c5 	bl	801a06c <_free_r>
 801aee2:	e7c8      	b.n	801ae76 <__ssputs_r+0x46>

0801aee4 <_svfiprintf_r>:
 801aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aee8:	461d      	mov	r5, r3
 801aeea:	898b      	ldrh	r3, [r1, #12]
 801aeec:	061f      	lsls	r7, r3, #24
 801aeee:	b09d      	sub	sp, #116	; 0x74
 801aef0:	4680      	mov	r8, r0
 801aef2:	460c      	mov	r4, r1
 801aef4:	4616      	mov	r6, r2
 801aef6:	d50f      	bpl.n	801af18 <_svfiprintf_r+0x34>
 801aef8:	690b      	ldr	r3, [r1, #16]
 801aefa:	b96b      	cbnz	r3, 801af18 <_svfiprintf_r+0x34>
 801aefc:	2140      	movs	r1, #64	; 0x40
 801aefe:	f7ff f903 	bl	801a108 <_malloc_r>
 801af02:	6020      	str	r0, [r4, #0]
 801af04:	6120      	str	r0, [r4, #16]
 801af06:	b928      	cbnz	r0, 801af14 <_svfiprintf_r+0x30>
 801af08:	230c      	movs	r3, #12
 801af0a:	f8c8 3000 	str.w	r3, [r8]
 801af0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af12:	e0c8      	b.n	801b0a6 <_svfiprintf_r+0x1c2>
 801af14:	2340      	movs	r3, #64	; 0x40
 801af16:	6163      	str	r3, [r4, #20]
 801af18:	2300      	movs	r3, #0
 801af1a:	9309      	str	r3, [sp, #36]	; 0x24
 801af1c:	2320      	movs	r3, #32
 801af1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af22:	2330      	movs	r3, #48	; 0x30
 801af24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801af28:	9503      	str	r5, [sp, #12]
 801af2a:	f04f 0b01 	mov.w	fp, #1
 801af2e:	4637      	mov	r7, r6
 801af30:	463d      	mov	r5, r7
 801af32:	f815 3b01 	ldrb.w	r3, [r5], #1
 801af36:	b10b      	cbz	r3, 801af3c <_svfiprintf_r+0x58>
 801af38:	2b25      	cmp	r3, #37	; 0x25
 801af3a:	d13e      	bne.n	801afba <_svfiprintf_r+0xd6>
 801af3c:	ebb7 0a06 	subs.w	sl, r7, r6
 801af40:	d00b      	beq.n	801af5a <_svfiprintf_r+0x76>
 801af42:	4653      	mov	r3, sl
 801af44:	4632      	mov	r2, r6
 801af46:	4621      	mov	r1, r4
 801af48:	4640      	mov	r0, r8
 801af4a:	f7ff ff71 	bl	801ae30 <__ssputs_r>
 801af4e:	3001      	adds	r0, #1
 801af50:	f000 80a4 	beq.w	801b09c <_svfiprintf_r+0x1b8>
 801af54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af56:	4453      	add	r3, sl
 801af58:	9309      	str	r3, [sp, #36]	; 0x24
 801af5a:	783b      	ldrb	r3, [r7, #0]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	f000 809d 	beq.w	801b09c <_svfiprintf_r+0x1b8>
 801af62:	2300      	movs	r3, #0
 801af64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801af68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af6c:	9304      	str	r3, [sp, #16]
 801af6e:	9307      	str	r3, [sp, #28]
 801af70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801af74:	931a      	str	r3, [sp, #104]	; 0x68
 801af76:	462f      	mov	r7, r5
 801af78:	2205      	movs	r2, #5
 801af7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801af7e:	4850      	ldr	r0, [pc, #320]	; (801b0c0 <_svfiprintf_r+0x1dc>)
 801af80:	f7e5 f93e 	bl	8000200 <memchr>
 801af84:	9b04      	ldr	r3, [sp, #16]
 801af86:	b9d0      	cbnz	r0, 801afbe <_svfiprintf_r+0xda>
 801af88:	06d9      	lsls	r1, r3, #27
 801af8a:	bf44      	itt	mi
 801af8c:	2220      	movmi	r2, #32
 801af8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801af92:	071a      	lsls	r2, r3, #28
 801af94:	bf44      	itt	mi
 801af96:	222b      	movmi	r2, #43	; 0x2b
 801af98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801af9c:	782a      	ldrb	r2, [r5, #0]
 801af9e:	2a2a      	cmp	r2, #42	; 0x2a
 801afa0:	d015      	beq.n	801afce <_svfiprintf_r+0xea>
 801afa2:	9a07      	ldr	r2, [sp, #28]
 801afa4:	462f      	mov	r7, r5
 801afa6:	2000      	movs	r0, #0
 801afa8:	250a      	movs	r5, #10
 801afaa:	4639      	mov	r1, r7
 801afac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801afb0:	3b30      	subs	r3, #48	; 0x30
 801afb2:	2b09      	cmp	r3, #9
 801afb4:	d94d      	bls.n	801b052 <_svfiprintf_r+0x16e>
 801afb6:	b1b8      	cbz	r0, 801afe8 <_svfiprintf_r+0x104>
 801afb8:	e00f      	b.n	801afda <_svfiprintf_r+0xf6>
 801afba:	462f      	mov	r7, r5
 801afbc:	e7b8      	b.n	801af30 <_svfiprintf_r+0x4c>
 801afbe:	4a40      	ldr	r2, [pc, #256]	; (801b0c0 <_svfiprintf_r+0x1dc>)
 801afc0:	1a80      	subs	r0, r0, r2
 801afc2:	fa0b f000 	lsl.w	r0, fp, r0
 801afc6:	4318      	orrs	r0, r3
 801afc8:	9004      	str	r0, [sp, #16]
 801afca:	463d      	mov	r5, r7
 801afcc:	e7d3      	b.n	801af76 <_svfiprintf_r+0x92>
 801afce:	9a03      	ldr	r2, [sp, #12]
 801afd0:	1d11      	adds	r1, r2, #4
 801afd2:	6812      	ldr	r2, [r2, #0]
 801afd4:	9103      	str	r1, [sp, #12]
 801afd6:	2a00      	cmp	r2, #0
 801afd8:	db01      	blt.n	801afde <_svfiprintf_r+0xfa>
 801afda:	9207      	str	r2, [sp, #28]
 801afdc:	e004      	b.n	801afe8 <_svfiprintf_r+0x104>
 801afde:	4252      	negs	r2, r2
 801afe0:	f043 0302 	orr.w	r3, r3, #2
 801afe4:	9207      	str	r2, [sp, #28]
 801afe6:	9304      	str	r3, [sp, #16]
 801afe8:	783b      	ldrb	r3, [r7, #0]
 801afea:	2b2e      	cmp	r3, #46	; 0x2e
 801afec:	d10c      	bne.n	801b008 <_svfiprintf_r+0x124>
 801afee:	787b      	ldrb	r3, [r7, #1]
 801aff0:	2b2a      	cmp	r3, #42	; 0x2a
 801aff2:	d133      	bne.n	801b05c <_svfiprintf_r+0x178>
 801aff4:	9b03      	ldr	r3, [sp, #12]
 801aff6:	1d1a      	adds	r2, r3, #4
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	9203      	str	r2, [sp, #12]
 801affc:	2b00      	cmp	r3, #0
 801affe:	bfb8      	it	lt
 801b000:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b004:	3702      	adds	r7, #2
 801b006:	9305      	str	r3, [sp, #20]
 801b008:	4d2e      	ldr	r5, [pc, #184]	; (801b0c4 <_svfiprintf_r+0x1e0>)
 801b00a:	7839      	ldrb	r1, [r7, #0]
 801b00c:	2203      	movs	r2, #3
 801b00e:	4628      	mov	r0, r5
 801b010:	f7e5 f8f6 	bl	8000200 <memchr>
 801b014:	b138      	cbz	r0, 801b026 <_svfiprintf_r+0x142>
 801b016:	2340      	movs	r3, #64	; 0x40
 801b018:	1b40      	subs	r0, r0, r5
 801b01a:	fa03 f000 	lsl.w	r0, r3, r0
 801b01e:	9b04      	ldr	r3, [sp, #16]
 801b020:	4303      	orrs	r3, r0
 801b022:	3701      	adds	r7, #1
 801b024:	9304      	str	r3, [sp, #16]
 801b026:	7839      	ldrb	r1, [r7, #0]
 801b028:	4827      	ldr	r0, [pc, #156]	; (801b0c8 <_svfiprintf_r+0x1e4>)
 801b02a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b02e:	2206      	movs	r2, #6
 801b030:	1c7e      	adds	r6, r7, #1
 801b032:	f7e5 f8e5 	bl	8000200 <memchr>
 801b036:	2800      	cmp	r0, #0
 801b038:	d038      	beq.n	801b0ac <_svfiprintf_r+0x1c8>
 801b03a:	4b24      	ldr	r3, [pc, #144]	; (801b0cc <_svfiprintf_r+0x1e8>)
 801b03c:	bb13      	cbnz	r3, 801b084 <_svfiprintf_r+0x1a0>
 801b03e:	9b03      	ldr	r3, [sp, #12]
 801b040:	3307      	adds	r3, #7
 801b042:	f023 0307 	bic.w	r3, r3, #7
 801b046:	3308      	adds	r3, #8
 801b048:	9303      	str	r3, [sp, #12]
 801b04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b04c:	444b      	add	r3, r9
 801b04e:	9309      	str	r3, [sp, #36]	; 0x24
 801b050:	e76d      	b.n	801af2e <_svfiprintf_r+0x4a>
 801b052:	fb05 3202 	mla	r2, r5, r2, r3
 801b056:	2001      	movs	r0, #1
 801b058:	460f      	mov	r7, r1
 801b05a:	e7a6      	b.n	801afaa <_svfiprintf_r+0xc6>
 801b05c:	2300      	movs	r3, #0
 801b05e:	3701      	adds	r7, #1
 801b060:	9305      	str	r3, [sp, #20]
 801b062:	4619      	mov	r1, r3
 801b064:	250a      	movs	r5, #10
 801b066:	4638      	mov	r0, r7
 801b068:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b06c:	3a30      	subs	r2, #48	; 0x30
 801b06e:	2a09      	cmp	r2, #9
 801b070:	d903      	bls.n	801b07a <_svfiprintf_r+0x196>
 801b072:	2b00      	cmp	r3, #0
 801b074:	d0c8      	beq.n	801b008 <_svfiprintf_r+0x124>
 801b076:	9105      	str	r1, [sp, #20]
 801b078:	e7c6      	b.n	801b008 <_svfiprintf_r+0x124>
 801b07a:	fb05 2101 	mla	r1, r5, r1, r2
 801b07e:	2301      	movs	r3, #1
 801b080:	4607      	mov	r7, r0
 801b082:	e7f0      	b.n	801b066 <_svfiprintf_r+0x182>
 801b084:	ab03      	add	r3, sp, #12
 801b086:	9300      	str	r3, [sp, #0]
 801b088:	4622      	mov	r2, r4
 801b08a:	4b11      	ldr	r3, [pc, #68]	; (801b0d0 <_svfiprintf_r+0x1ec>)
 801b08c:	a904      	add	r1, sp, #16
 801b08e:	4640      	mov	r0, r8
 801b090:	f3af 8000 	nop.w
 801b094:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801b098:	4681      	mov	r9, r0
 801b09a:	d1d6      	bne.n	801b04a <_svfiprintf_r+0x166>
 801b09c:	89a3      	ldrh	r3, [r4, #12]
 801b09e:	065b      	lsls	r3, r3, #25
 801b0a0:	f53f af35 	bmi.w	801af0e <_svfiprintf_r+0x2a>
 801b0a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b0a6:	b01d      	add	sp, #116	; 0x74
 801b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ac:	ab03      	add	r3, sp, #12
 801b0ae:	9300      	str	r3, [sp, #0]
 801b0b0:	4622      	mov	r2, r4
 801b0b2:	4b07      	ldr	r3, [pc, #28]	; (801b0d0 <_svfiprintf_r+0x1ec>)
 801b0b4:	a904      	add	r1, sp, #16
 801b0b6:	4640      	mov	r0, r8
 801b0b8:	f7ff fa36 	bl	801a528 <_printf_i>
 801b0bc:	e7ea      	b.n	801b094 <_svfiprintf_r+0x1b0>
 801b0be:	bf00      	nop
 801b0c0:	0801c6fe 	.word	0x0801c6fe
 801b0c4:	0801c704 	.word	0x0801c704
 801b0c8:	0801c708 	.word	0x0801c708
 801b0cc:	00000000 	.word	0x00000000
 801b0d0:	0801ae31 	.word	0x0801ae31

0801b0d4 <__sread>:
 801b0d4:	b510      	push	{r4, lr}
 801b0d6:	460c      	mov	r4, r1
 801b0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0dc:	f000 f89c 	bl	801b218 <_read_r>
 801b0e0:	2800      	cmp	r0, #0
 801b0e2:	bfab      	itete	ge
 801b0e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b0e6:	89a3      	ldrhlt	r3, [r4, #12]
 801b0e8:	181b      	addge	r3, r3, r0
 801b0ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b0ee:	bfac      	ite	ge
 801b0f0:	6563      	strge	r3, [r4, #84]	; 0x54
 801b0f2:	81a3      	strhlt	r3, [r4, #12]
 801b0f4:	bd10      	pop	{r4, pc}

0801b0f6 <__swrite>:
 801b0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0fa:	461f      	mov	r7, r3
 801b0fc:	898b      	ldrh	r3, [r1, #12]
 801b0fe:	05db      	lsls	r3, r3, #23
 801b100:	4605      	mov	r5, r0
 801b102:	460c      	mov	r4, r1
 801b104:	4616      	mov	r6, r2
 801b106:	d505      	bpl.n	801b114 <__swrite+0x1e>
 801b108:	2302      	movs	r3, #2
 801b10a:	2200      	movs	r2, #0
 801b10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b110:	f000 f868 	bl	801b1e4 <_lseek_r>
 801b114:	89a3      	ldrh	r3, [r4, #12]
 801b116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b11e:	81a3      	strh	r3, [r4, #12]
 801b120:	4632      	mov	r2, r6
 801b122:	463b      	mov	r3, r7
 801b124:	4628      	mov	r0, r5
 801b126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b12a:	f000 b817 	b.w	801b15c <_write_r>

0801b12e <__sseek>:
 801b12e:	b510      	push	{r4, lr}
 801b130:	460c      	mov	r4, r1
 801b132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b136:	f000 f855 	bl	801b1e4 <_lseek_r>
 801b13a:	1c43      	adds	r3, r0, #1
 801b13c:	89a3      	ldrh	r3, [r4, #12]
 801b13e:	bf15      	itete	ne
 801b140:	6560      	strne	r0, [r4, #84]	; 0x54
 801b142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b14a:	81a3      	strheq	r3, [r4, #12]
 801b14c:	bf18      	it	ne
 801b14e:	81a3      	strhne	r3, [r4, #12]
 801b150:	bd10      	pop	{r4, pc}

0801b152 <__sclose>:
 801b152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b156:	f000 b813 	b.w	801b180 <_close_r>
	...

0801b15c <_write_r>:
 801b15c:	b538      	push	{r3, r4, r5, lr}
 801b15e:	4c07      	ldr	r4, [pc, #28]	; (801b17c <_write_r+0x20>)
 801b160:	4605      	mov	r5, r0
 801b162:	4608      	mov	r0, r1
 801b164:	4611      	mov	r1, r2
 801b166:	2200      	movs	r2, #0
 801b168:	6022      	str	r2, [r4, #0]
 801b16a:	461a      	mov	r2, r3
 801b16c:	f7fe f8ed 	bl	801934a <_write>
 801b170:	1c43      	adds	r3, r0, #1
 801b172:	d102      	bne.n	801b17a <_write_r+0x1e>
 801b174:	6823      	ldr	r3, [r4, #0]
 801b176:	b103      	cbz	r3, 801b17a <_write_r+0x1e>
 801b178:	602b      	str	r3, [r5, #0]
 801b17a:	bd38      	pop	{r3, r4, r5, pc}
 801b17c:	2001444c 	.word	0x2001444c

0801b180 <_close_r>:
 801b180:	b538      	push	{r3, r4, r5, lr}
 801b182:	4c06      	ldr	r4, [pc, #24]	; (801b19c <_close_r+0x1c>)
 801b184:	2300      	movs	r3, #0
 801b186:	4605      	mov	r5, r0
 801b188:	4608      	mov	r0, r1
 801b18a:	6023      	str	r3, [r4, #0]
 801b18c:	f7fe f8f9 	bl	8019382 <_close>
 801b190:	1c43      	adds	r3, r0, #1
 801b192:	d102      	bne.n	801b19a <_close_r+0x1a>
 801b194:	6823      	ldr	r3, [r4, #0]
 801b196:	b103      	cbz	r3, 801b19a <_close_r+0x1a>
 801b198:	602b      	str	r3, [r5, #0]
 801b19a:	bd38      	pop	{r3, r4, r5, pc}
 801b19c:	2001444c 	.word	0x2001444c

0801b1a0 <_fstat_r>:
 801b1a0:	b538      	push	{r3, r4, r5, lr}
 801b1a2:	4c07      	ldr	r4, [pc, #28]	; (801b1c0 <_fstat_r+0x20>)
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	4605      	mov	r5, r0
 801b1a8:	4608      	mov	r0, r1
 801b1aa:	4611      	mov	r1, r2
 801b1ac:	6023      	str	r3, [r4, #0]
 801b1ae:	f7fe f8f4 	bl	801939a <_fstat>
 801b1b2:	1c43      	adds	r3, r0, #1
 801b1b4:	d102      	bne.n	801b1bc <_fstat_r+0x1c>
 801b1b6:	6823      	ldr	r3, [r4, #0]
 801b1b8:	b103      	cbz	r3, 801b1bc <_fstat_r+0x1c>
 801b1ba:	602b      	str	r3, [r5, #0]
 801b1bc:	bd38      	pop	{r3, r4, r5, pc}
 801b1be:	bf00      	nop
 801b1c0:	2001444c 	.word	0x2001444c

0801b1c4 <_isatty_r>:
 801b1c4:	b538      	push	{r3, r4, r5, lr}
 801b1c6:	4c06      	ldr	r4, [pc, #24]	; (801b1e0 <_isatty_r+0x1c>)
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	4605      	mov	r5, r0
 801b1cc:	4608      	mov	r0, r1
 801b1ce:	6023      	str	r3, [r4, #0]
 801b1d0:	f7fe f8f3 	bl	80193ba <_isatty>
 801b1d4:	1c43      	adds	r3, r0, #1
 801b1d6:	d102      	bne.n	801b1de <_isatty_r+0x1a>
 801b1d8:	6823      	ldr	r3, [r4, #0]
 801b1da:	b103      	cbz	r3, 801b1de <_isatty_r+0x1a>
 801b1dc:	602b      	str	r3, [r5, #0]
 801b1de:	bd38      	pop	{r3, r4, r5, pc}
 801b1e0:	2001444c 	.word	0x2001444c

0801b1e4 <_lseek_r>:
 801b1e4:	b538      	push	{r3, r4, r5, lr}
 801b1e6:	4c07      	ldr	r4, [pc, #28]	; (801b204 <_lseek_r+0x20>)
 801b1e8:	4605      	mov	r5, r0
 801b1ea:	4608      	mov	r0, r1
 801b1ec:	4611      	mov	r1, r2
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	6022      	str	r2, [r4, #0]
 801b1f2:	461a      	mov	r2, r3
 801b1f4:	f7fe f8ec 	bl	80193d0 <_lseek>
 801b1f8:	1c43      	adds	r3, r0, #1
 801b1fa:	d102      	bne.n	801b202 <_lseek_r+0x1e>
 801b1fc:	6823      	ldr	r3, [r4, #0]
 801b1fe:	b103      	cbz	r3, 801b202 <_lseek_r+0x1e>
 801b200:	602b      	str	r3, [r5, #0]
 801b202:	bd38      	pop	{r3, r4, r5, pc}
 801b204:	2001444c 	.word	0x2001444c

0801b208 <_malloc_usable_size_r>:
 801b208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b20c:	1f18      	subs	r0, r3, #4
 801b20e:	2b00      	cmp	r3, #0
 801b210:	bfbc      	itt	lt
 801b212:	580b      	ldrlt	r3, [r1, r0]
 801b214:	18c0      	addlt	r0, r0, r3
 801b216:	4770      	bx	lr

0801b218 <_read_r>:
 801b218:	b538      	push	{r3, r4, r5, lr}
 801b21a:	4c07      	ldr	r4, [pc, #28]	; (801b238 <_read_r+0x20>)
 801b21c:	4605      	mov	r5, r0
 801b21e:	4608      	mov	r0, r1
 801b220:	4611      	mov	r1, r2
 801b222:	2200      	movs	r2, #0
 801b224:	6022      	str	r2, [r4, #0]
 801b226:	461a      	mov	r2, r3
 801b228:	f7fe f872 	bl	8019310 <_read>
 801b22c:	1c43      	adds	r3, r0, #1
 801b22e:	d102      	bne.n	801b236 <_read_r+0x1e>
 801b230:	6823      	ldr	r3, [r4, #0]
 801b232:	b103      	cbz	r3, 801b236 <_read_r+0x1e>
 801b234:	602b      	str	r3, [r5, #0]
 801b236:	bd38      	pop	{r3, r4, r5, pc}
 801b238:	2001444c 	.word	0x2001444c

0801b23c <_init>:
 801b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b23e:	bf00      	nop
 801b240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b242:	bc08      	pop	{r3}
 801b244:	469e      	mov	lr, r3
 801b246:	4770      	bx	lr

0801b248 <_fini>:
 801b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b24a:	bf00      	nop
 801b24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b24e:	bc08      	pop	{r3}
 801b250:	469e      	mov	lr, r3
 801b252:	4770      	bx	lr
