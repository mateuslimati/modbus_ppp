
modbus_ppp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c1b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001678  0801c360  0801c360  0002c360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d9d8  0801d9d8  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  0801d9d8  0801d9d8  0002d9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d9e0  0801d9e0  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d9e0  0801d9e0  0002d9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d9e4  0801d9e4  0002d9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0801d9e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014228  20000228  0801dc10  00030228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014450  0801dc10  00034450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a5cb7  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a8cf  00000000  00000000  000d5f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029b0  00000000  00000000  000e07e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000025e0  00000000  00000000  000e3190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003c5f3  00000000  00000000  000e5770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000a682d  00000000  00000000  00121d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00118d93  00000000  00000000  001c8590  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002e1323  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b284  00000000  00000000  002e13a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000228 	.word	0x20000228
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801c348 	.word	0x0801c348

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	0801c348 	.word	0x0801c348

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <swapInt16>:
 * @param[in] value 16-bit value
 * @return 16-bit value with byte order swapped
 **/

uint16_t swapInt16(uint16_t value)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
   return SWAPINT16(value);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	ba5b      	rev16	r3, r3
 80005ae:	b29b      	uxth	r3, r3
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	061a      	lsls	r2, r3, #24
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80005d0:	431a      	orrs	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80005da:	431a      	orrs	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	0e1b      	lsrs	r3, r3, #24
 80005e0:	4313      	orrs	r3, r2
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <osCreateTask>:
 *   new task. If the function fails, the return value is NULL
 **/

OsTask *osCreateTask(const char_t *name, OsTaskCode taskCode,
   void *param, size_t stackSize, int_t priority)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b08a      	sub	sp, #40	; 0x28
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	603b      	str	r3, [r7, #0]
   threadDef.attr.stack_size = stackSize * sizeof(uint_t);
   threadDef.attr.priority = (osPriority_t) priority;
   threadDef.attr.tz_module = 0;
   threadDef.attr.reserved = 0;
#else
   threadDef.name = (char_t *) name;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	613b      	str	r3, [r7, #16]
   threadDef.pthread = (os_pthread) taskCode;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	617b      	str	r3, [r7, #20]
   threadDef.tpriority = (osPriority) priority;
 8000604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000606:	b21b      	sxth	r3, r3
 8000608:	833b      	strh	r3, [r7, #24]
   threadDef.instances = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
   threadDef.stacksize = stackSize;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	623b      	str	r3, [r7, #32]
#endif

   //Create a new thread
   threadId = osThreadCreate(&threadDef, param);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4618      	mov	r0, r3
 800061a:	f016 fe73 	bl	8017304 <osThreadCreate>
 800061e:	6278      	str	r0, [r7, #36]	; 0x24
   //Return a handle to the newly created thread
   return (OsTask *) threadId;
 8000620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000622:	4618      	mov	r0, r3
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
   //Delay the thread for the specified duration
   osDelay(delay);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f016 fe8d 	bl	8017352 <osDelay>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
#if defined(osCMSIS_RTX) || defined(osCMSIS_FreeRTOS)
   //Not implemented
#else
   //Make sure the operating system is running
   if(osKernelRunning())
 8000644:	f016 fe42 	bl	80172cc <osKernelRunning>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <osSuspendAllTasks+0x12>
   {
      //Suspend all threads
      osThreadSuspendAll();
 800064e:	f017 f8a1 	bl	8017794 <osThreadSuspendAll>
   }
#endif
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
#if defined(osCMSIS_RTX) || defined(osCMSIS_FreeRTOS)
   //Not implemented
#else
   //Make sure the operating system is running
   if(osKernelRunning())
 800065a:	f016 fe37 	bl	80172cc <osKernelRunning>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <osResumeAllTasks+0x12>
   {
      //Resume all threads
      osThreadResumeAll();
 8000664:	f017 f89d 	bl	80177a2 <osThreadResumeAll>
   }
#endif
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <osCreateEvent>:
 * @return The function returns TRUE if the event object was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateEvent(OsEvent *event)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
   semaphoreDef.name = NULL;
   semaphoreDef.attr_bits = 0;
   semaphoreDef.cb_mem = NULL;
   semaphoreDef.cb_size = 0;
#else
   semaphoreDef.dummy = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
#endif

   //Create a binary semaphore object
   event->id = osSemaphoreCreate(&semaphoreDef, 1);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f016 ff0c 	bl	801749c <osSemaphoreCreate>
 8000684:	4602      	mov	r2, r0
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]

   //Check whether the returned semaphore ID is valid
   if(event->id != NULL)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d007      	beq.n	80006a2 <osCreateEvent+0x36>
   {
      //Force the specified event to the nonsignaled state
      osSemaphoreWait(event->id, 0);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f016 ff1d 	bl	80174d8 <osSemaphoreWait>
      //Event successfully created
      return TRUE;
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <osCreateEvent+0x38>
   }
   else
   {
      //Failed to create event object
      return FALSE;
 80006a2:	2300      	movs	r3, #0
   }
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <osDeleteEvent>:
 * @brief Delete an event object
 * @param[in] event Pointer to the event object
 **/

void osDeleteEvent(OsEvent *event)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
   //Make sure the semaphore ID is valid
   if(event->id != NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <osDeleteEvent+0x1a>
   {
      //Properly dispose the event object
      osSemaphoreDelete(event->id);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f016 ff8d 	bl	80175e0 <osSemaphoreDelete>
   }
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <osSetEvent>:
 * @brief Set the specified event object to the signaled state
 * @param[in] event Pointer to the event object
 **/

void osSetEvent(OsEvent *event)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   //Set the specified event to the signaled state
   osSemaphoreRelease(event->id);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f016 ff4a 	bl	8017574 <osSemaphoreRelease>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <osResetEvent>:
 * @brief Set the specified event object to the nonsignaled state
 * @param[in] event Pointer to the event object
 **/

void osResetEvent(OsEvent *event)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
#if defined(osCMSIS_RTX) && (osCMSIS_RTX < 0x50000)
   //Force the specified event to the nonsignaled state
   while(osSemaphoreWait(event->id, 0) > 0);
#else
   //Force the specified event to the nonsignaled state
   osSemaphoreWait(event->id, 0);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f016 feee 	bl	80174d8 <osSemaphoreWait>
#endif
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <osWaitForEvent>:
 * @return The function returns TRUE if the state of the specified object is
 *   signaled. FALSE is returned if the timeout interval elapsed
 **/

bool_t osWaitForEvent(OsEvent *event, systime_t timeout)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
   int32_t ret;

   //Wait until the specified event is in the signaled
   //state or the timeout interval elapses
   if(timeout == INFINITE_DELAY)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000714:	d108      	bne.n	8000728 <osWaitForEvent+0x24>
   {
      //Infinite timeout period
      ret = osSemaphoreWait(event->id, osWaitForever);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800071e:	4618      	mov	r0, r3
 8000720:	f016 feda 	bl	80174d8 <osSemaphoreWait>
 8000724:	60f8      	str	r0, [r7, #12]
 8000726:	e006      	b.n	8000736 <osWaitForEvent+0x32>

         //Check timeout value
      } while(ret == 0 && timeout > 0);
#else
      //Wait for the specified time interval
      ret = osSemaphoreWait(event->id, timeout);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6839      	ldr	r1, [r7, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f016 fed2 	bl	80174d8 <osSemaphoreWait>
 8000734:	60f8      	str	r0, [r7, #12]
      return TRUE;
   else
      return FALSE;
#else
   //Check return value
   if(ret == osOK)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <osWaitForEvent+0x3c>
      return TRUE;
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <osWaitForEvent+0x3e>
   else
      return FALSE;
 8000740:	2300      	movs	r3, #0
#endif
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <osSetEventFromIsr>:
 * @return TRUE if setting the event to signaled state caused a task to unblock
 *   and the unblocked task has a priority higher than the currently running task
 **/

bool_t osSetEventFromIsr(OsEvent *event)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
   //Set the specified event to the signaled state
   osSemaphoreRelease(event->id);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f016 ff0c 	bl	8017574 <osSemaphoreRelease>

   //The return value is not relevant
   return FALSE;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   mutexDef.name = NULL;
   mutexDef.attr_bits = 0;
   mutexDef.cb_mem = NULL;
   mutexDef.cb_size = 0;
#else
   mutexDef.dummy = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
#endif

   //Create a mutex object
   mutex->id = osMutexCreate(&mutexDef);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4618      	mov	r0, r3
 8000778:	f016 fdff 	bl	801737a <osMutexCreate>
 800077c:	4602      	mov	r2, r0
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]

   //Check whether the returned mutex ID is valid
   if(mutex->id != NULL)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <osCreateMutex+0x28>
      return TRUE;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <osCreateMutex+0x2a>
   else
      return FALSE;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <osAcquireMutex>:
 * @brief Acquire ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osAcquireMutex(OsMutex *mutex)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
   //Obtain ownership of the mutex object
   osMutexWait(mutex->id, osWaitForever);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a8:	4618      	mov	r0, r3
 80007aa:	f016 fdf3 	bl	8017394 <osMutexWait>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <osReleaseMutex>:
 * @brief Release ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osReleaseMutex(OsMutex *mutex)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   //Release ownership of the mutex object
   osMutexRelease(mutex->id);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f016 fe34 	bl	8017430 <osMutexRelease>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <osGetSystemTime>:
 * @brief Retrieve system time
 * @return Number of milliseconds elapsed since the system was last started
 **/

systime_t osGetSystemTime(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
   time = osKernelGetTickCount();
#elif defined(osCMSIS_FreeRTOS)
   time = osKernelGetTickCount();
#else
   //Get current tick count
   time = osKernelSysTick();
 80007d6:	f016 fd85 	bl	80172e4 <osKernelSysTick>
 80007da:	6078      	str	r0, [r7, #4]
#endif

   //Convert system ticks to milliseconds
   return OS_SYSTICKS_TO_MS(time);
 80007dc:	687b      	ldr	r3, [r7, #4]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <strSafeCopy>:
 * @param[in] destSize Size of the buffer allocated for the destination string
 * @return Error code
 **/

error_t strSafeCopy(char_t *dest, const char_t *src, size_t destSize)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
   size_t n;

   //Check parameters
   if(dest == NULL || src == NULL || destSize < 1)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d005      	beq.n	8000804 <strSafeCopy+0x1e>
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <strSafeCopy+0x1e>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <strSafeCopy+0x22>
      return ERROR_INVALID_PARAMETER;
 8000804:	2302      	movs	r3, #2
 8000806:	e015      	b.n	8000834 <strSafeCopy+0x4e>

   //Get the length of the source name
   n = strlen(src);
 8000808:	68b8      	ldr	r0, [r7, #8]
 800080a:	f7ff fcf1 	bl	80001f0 <strlen>
 800080e:	6178      	str	r0, [r7, #20]
   //Limit the number of characters to be copied
   n = MIN(n, destSize - 1);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	4293      	cmp	r3, r2
 8000818:	bf28      	it	cs
 800081a:	4613      	movcs	r3, r2
 800081c:	617b      	str	r3, [r7, #20]

   //Copy the string
   strncpy(dest, src, n);
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f01b f8a0 	bl	801b968 <strncpy>
   //Properly terminate the string with a NULL character
   dest[n] = '\0';
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	4413      	add	r3, r2
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <md5Init>:
 * @brief Initialize MD5 message digest context
 * @param[in] context Pointer to the MD5 context to initialize
 **/

void md5Init(Md5Context *context)
{
 800083c:	b490      	push	{r4, r7}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x67452301;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a0d      	ldr	r2, [pc, #52]	; (800087c <md5Init+0x40>)
 8000848:	601a      	str	r2, [r3, #0]
   context->h[1] = 0xEFCDAB89;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <md5Init+0x44>)
 800084e:	605a      	str	r2, [r3, #4]
   context->h[2] = 0x98BADCFE;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <md5Init+0x48>)
 8000854:	609a      	str	r2, [r3, #8]
   context->h[3] = 0x10325476;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <md5Init+0x4c>)
 800085a:	60da      	str	r2, [r3, #12]

   //Number of bytes in the buffer
   context->size = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	651a      	str	r2, [r3, #80]	; 0x50
   //Total length of the message
   context->totalSize = 0;
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	f04f 0400 	mov.w	r4, #0
 800086c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bc90      	pop	{r4, r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	67452301 	.word	0x67452301
 8000880:	efcdab89 	.word	0xefcdab89
 8000884:	98badcfe 	.word	0x98badcfe
 8000888:	10325476 	.word	0x10325476

0800088c <md5Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void md5Update(Md5Context *context, const void *data, size_t length)
{
 800088c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 800089a:	e039      	b.n	8000910 <md5Update+0x84>
   {
      //The buffer can hold at most 64 bytes
      n = MIN(length, 64 - context->size);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008a0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4293      	cmp	r3, r2
 80008a8:	bf28      	it	cs
 80008aa:	4613      	movcs	r3, r2
 80008ac:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      cryptoMemcpy(context->buffer + context->size, data, n);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f103 0210 	add.w	r2, r3, #16
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008b8:	4413      	add	r3, r2
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	4618      	mov	r0, r3
 80008c0:	f01a fc2e 	bl	801b120 <memcpy>

      //Update the MD5 context
      context->size += n;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	441a      	add	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	651a      	str	r2, [r3, #80]	; 0x50
      context->totalSize += n;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	469b      	mov	fp, r3
 80008da:	f04f 0c00 	mov.w	ip, #0
 80008de:	eb1b 0301 	adds.w	r3, fp, r1
 80008e2:	eb4c 0402 	adc.w	r4, ip, r2
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
      //Advance the data pointer
      data = (uint8_t *) data + n;
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	4413      	add	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 64)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000900:	2b40      	cmp	r3, #64	; 0x40
 8000902:	d105      	bne.n	8000910 <md5Update+0x84>
      {
         //Transform the 16-word block
         md5ProcessBlock(context);
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f000 f863 	bl	80009d0 <md5ProcessBlock>
         //Empty the buffer
         context->size = 0;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	2200      	movs	r2, #0
 800090e:	651a      	str	r2, [r3, #80]	; 0x50
   while(length > 0)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1c2      	bne.n	800089c <md5Update+0x10>
      }
   }
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08000920 <md5Final>:
 * @param[in] context Pointer to the MD5 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void md5Final(Md5Context *context, uint8_t *digest)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	f04f 0400 	mov.w	r4, #0
 8000938:	00d4      	lsls	r4, r2, #3
 800093a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800093e:	00cb      	lsls	r3, r1, #3
 8000940:	e9c7 3402 	strd	r3, r4, [r7, #8]

   //Pad the message so that its length is congruent to 56 modulo 64
   if(context->size < 56)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000948:	2b37      	cmp	r3, #55	; 0x37
 800094a:	d805      	bhi.n	8000958 <md5Final+0x38>
      paddingSize = 56 - context->size;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000950:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	e004      	b.n	8000962 <md5Final+0x42>
   else
      paddingSize = 64 + 56 - context->size;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800095c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000960:	613b      	str	r3, [r7, #16]

   //Append padding
   md5Update(context, padding, paddingSize);
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4919      	ldr	r1, [pc, #100]	; (80009cc <md5Final+0xac>)
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ff90 	bl	800088c <md5Update>

   //Append the length of the original message
   context->x[14] = htole32((uint32_t) totalSize);
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	649a      	str	r2, [r3, #72]	; 0x48
   context->x[15] = htole32((uint32_t) (totalSize >> 32));
 8000972:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	f04f 0400 	mov.w	r4, #0
 800097e:	0013      	movs	r3, r2
 8000980:	2400      	movs	r4, #0
 8000982:	461a      	mov	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	64da      	str	r2, [r3, #76]	; 0x4c

   //Calculate the message digest
   md5ProcessBlock(context);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f821 	bl	80009d0 <md5ProcessBlock>

   //Convert from host byte order to little-endian byte order
   for(i = 0; i < 4; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e00a      	b.n	80009aa <md5Final+0x8a>
   {
      context->h[i] = htole32(context->h[i]);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 4; i++)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d9f1      	bls.n	8000994 <md5Final+0x74>
   }

   //Copy the resulting digest
   if(digest != NULL)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d005      	beq.n	80009c2 <md5Final+0xa2>
      cryptoMemcpy(digest, context->digest, MD5_DIGEST_SIZE);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2210      	movs	r2, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	6838      	ldr	r0, [r7, #0]
 80009be:	f01a fbaf 	bl	801b120 <memcpy>
}
 80009c2:	bf00      	nop
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	0801d4ec 	.word	0x0801d4ec

080009d0 <md5ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the MD5 context
 **/

void md5ProcessBlock(Md5Context *context)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	; 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Initialize the 4 working registers
   uint32_t a = context->h[0];
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	61bb      	str	r3, [r7, #24]
   uint32_t b = context->h[1];
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	617b      	str	r3, [r7, #20]
   uint32_t c = context->h[2];
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	613b      	str	r3, [r7, #16]
   uint32_t d = context->h[3];
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	60fb      	str	r3, [r7, #12]

   //Process message in 16-word blocks
   uint32_t *x = context->x;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3310      	adds	r3, #16
 80009f4:	60bb      	str	r3, [r7, #8]

   //Convert from little-endian byte order to host byte order
   for(i = 0; i < 16; i++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	e00c      	b.n	8000a16 <md5ProcessBlock+0x46>
   {
      x[i] = letoh32(x[i]);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	441a      	add	r2, r3
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	601a      	str	r2, [r3, #0]
   for(i = 0; i < 16; i++)
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	3301      	adds	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d9ef      	bls.n	80009fc <md5ProcessBlock+0x2c>
   }

   //Round 1
   FF(a, b, c, d, x[0],  7,  k[0]);
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	401a      	ands	r2, r3
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	43d9      	mvns	r1, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	400b      	ands	r3, r1
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4413      	add	r3, r2
 8000a32:	4aa7      	ldr	r2, [pc, #668]	; (8000cd0 <md5ProcessBlock+0x300>)
 8000a34:	4413      	add	r3, r2
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4413      	add	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	4413      	add	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[1],  12, k[1]);
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	43d9      	mvns	r1, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	400b      	ands	r3, r1
 8000a56:	431a      	orrs	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a9c      	ldr	r2, [pc, #624]	; (8000cd4 <md5ProcessBlock+0x304>)
 8000a62:	4413      	add	r3, r2
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[2],  17, k[2]);
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	400b      	ands	r3, r1
 8000a84:	431a      	orrs	r2, r3
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	3308      	adds	r3, #8
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a92      	ldr	r2, [pc, #584]	; (8000cd8 <md5ProcessBlock+0x308>)
 8000a90:	4413      	add	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4413      	add	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
   FF(b, c, d, a, x[3],  22, k[3]);
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	43d9      	mvns	r1, r3
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	400b      	ands	r3, r1
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	330c      	adds	r3, #12
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a87      	ldr	r2, [pc, #540]	; (8000cdc <md5ProcessBlock+0x30c>)
 8000abe:	4413      	add	r3, r2
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4413      	add	r3, r2
 8000ad0:	617b      	str	r3, [r7, #20]
   FF(a, b, c, d, x[4],  7,  k[4]);
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	400b      	ands	r3, r1
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3310      	adds	r3, #16
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a7d      	ldr	r2, [pc, #500]	; (8000ce0 <md5ProcessBlock+0x310>)
 8000aec:	4413      	add	r3, r2
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4413      	add	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	4413      	add	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[5],  12, k[5]);
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	401a      	ands	r2, r3
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	43d9      	mvns	r1, r3
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	400b      	ands	r3, r1
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	3314      	adds	r3, #20
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a72      	ldr	r2, [pc, #456]	; (8000ce4 <md5ProcessBlock+0x314>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[6],  17, k[6]);
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	401a      	ands	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3318      	adds	r3, #24
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a68      	ldr	r2, [pc, #416]	; (8000ce8 <md5ProcessBlock+0x318>)
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
   FF(b, c, d, a, x[7],  22, k[7]);
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	401a      	ands	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	43d9      	mvns	r1, r3
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	400b      	ands	r3, r1
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	331c      	adds	r3, #28
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a5d      	ldr	r2, [pc, #372]	; (8000cec <md5ProcessBlock+0x31c>)
 8000b76:	4413      	add	r3, r2
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4413      	add	r3, r2
 8000b88:	617b      	str	r3, [r7, #20]
   FF(a, b, c, d, x[8],  7,  k[8]);
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	400b      	ands	r3, r1
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	3320      	adds	r3, #32
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a53      	ldr	r2, [pc, #332]	; (8000cf0 <md5ProcessBlock+0x320>)
 8000ba4:	4413      	add	r3, r2
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4413      	add	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[9],  12, k[9]);
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	43d9      	mvns	r1, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	400b      	ands	r3, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3324      	adds	r3, #36	; 0x24
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <md5ProcessBlock+0x324>)
 8000bd2:	4413      	add	r3, r2
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[10], 17, k[10]);
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	401a      	ands	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3328      	adds	r3, #40	; 0x28
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <md5ProcessBlock+0x328>)
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4413      	add	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	4413      	add	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
   FF(b, c, d, a, x[11], 22, k[11]);
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	401a      	ands	r2, r3
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	43d9      	mvns	r1, r3
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	400b      	ands	r3, r1
 8000c22:	431a      	orrs	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	332c      	adds	r3, #44	; 0x2c
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a33      	ldr	r2, [pc, #204]	; (8000cfc <md5ProcessBlock+0x32c>)
 8000c2e:	4413      	add	r3, r2
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	4413      	add	r3, r2
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4413      	add	r3, r2
 8000c40:	617b      	str	r3, [r7, #20]
   FF(a, b, c, d, x[12], 7,  k[12]);
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	400b      	ands	r3, r1
 8000c50:	431a      	orrs	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3330      	adds	r3, #48	; 0x30
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <md5ProcessBlock+0x330>)
 8000c5c:	4413      	add	r3, r2
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4413      	add	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[13], 12, k[13]);
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	401a      	ands	r2, r3
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	43d9      	mvns	r1, r3
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	400b      	ands	r3, r1
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	3334      	adds	r3, #52	; 0x34
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <md5ProcessBlock+0x334>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[14], 17, k[14]);
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	400b      	ands	r3, r1
 8000cac:	431a      	orrs	r2, r3
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3338      	adds	r3, #56	; 0x38
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <md5ProcessBlock+0x338>)
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	e01e      	b.n	8000d0c <md5ProcessBlock+0x33c>
 8000cce:	bf00      	nop
 8000cd0:	d76aa478 	.word	0xd76aa478
 8000cd4:	e8c7b756 	.word	0xe8c7b756
 8000cd8:	242070db 	.word	0x242070db
 8000cdc:	c1bdceee 	.word	0xc1bdceee
 8000ce0:	f57c0faf 	.word	0xf57c0faf
 8000ce4:	4787c62a 	.word	0x4787c62a
 8000ce8:	a8304613 	.word	0xa8304613
 8000cec:	fd469501 	.word	0xfd469501
 8000cf0:	698098d8 	.word	0x698098d8
 8000cf4:	8b44f7af 	.word	0x8b44f7af
 8000cf8:	ffff5bb1 	.word	0xffff5bb1
 8000cfc:	895cd7be 	.word	0x895cd7be
 8000d00:	6b901122 	.word	0x6b901122
 8000d04:	fd987193 	.word	0xfd987193
 8000d08:	a679438e 	.word	0xa679438e
   FF(b, c, d, a, x[15], 22, k[15]);
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	401a      	ands	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	43d9      	mvns	r1, r3
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	400b      	ands	r3, r1
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	333c      	adds	r3, #60	; 0x3c
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4aa6      	ldr	r2, [pc, #664]	; (8000fc0 <md5ProcessBlock+0x5f0>)
 8000d26:	4413      	add	r3, r2
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4413      	add	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]

   //Round 2
   GG(a, b, c, d, x[1],  5,  k[16]);
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	400b      	ands	r3, r1
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a9c      	ldr	r2, [pc, #624]	; (8000fc4 <md5ProcessBlock+0x5f4>)
 8000d54:	4413      	add	r3, r2
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4413      	add	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4413      	add	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[6],  9,  k[17]);
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	43d9      	mvns	r1, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	400b      	ands	r3, r1
 8000d76:	431a      	orrs	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3318      	adds	r3, #24
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a91      	ldr	r2, [pc, #580]	; (8000fc8 <md5ProcessBlock+0x5f8>)
 8000d82:	4413      	add	r3, r2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[11], 14, k[18]);
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	400b      	ands	r3, r1
 8000da4:	431a      	orrs	r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	332c      	adds	r3, #44	; 0x2c
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a87      	ldr	r2, [pc, #540]	; (8000fcc <md5ProcessBlock+0x5fc>)
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4413      	add	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[0],  20, k[19]);
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	401a      	ands	r2, r3
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	43d9      	mvns	r1, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	400b      	ands	r3, r1
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a7d      	ldr	r2, [pc, #500]	; (8000fd0 <md5ProcessBlock+0x600>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4413      	add	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4413      	add	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
   GG(a, b, c, d, x[5],  5,  k[20]);
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	401a      	ands	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	43d9      	mvns	r1, r3
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	400b      	ands	r3, r1
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	3314      	adds	r3, #20
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a72      	ldr	r2, [pc, #456]	; (8000fd4 <md5ProcessBlock+0x604>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4413      	add	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[10], 9,  k[21]);
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	401a      	ands	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	400b      	ands	r3, r1
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3328      	adds	r3, #40	; 0x28
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a68      	ldr	r2, [pc, #416]	; (8000fd8 <md5ProcessBlock+0x608>)
 8000e38:	4413      	add	r3, r2
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4413      	add	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[15], 14, k[22]);
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	401a      	ands	r2, r3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	43d9      	mvns	r1, r3
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	400b      	ands	r3, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	333c      	adds	r3, #60	; 0x3c
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a5d      	ldr	r2, [pc, #372]	; (8000fdc <md5ProcessBlock+0x60c>)
 8000e66:	4413      	add	r3, r2
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[4],  20, k[23]);
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	400b      	ands	r3, r1
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3310      	adds	r3, #16
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a53      	ldr	r2, [pc, #332]	; (8000fe0 <md5ProcessBlock+0x610>)
 8000e94:	4413      	add	r3, r2
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4413      	add	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
   GG(a, b, c, d, x[9],  5,  k[24]);
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	401a      	ands	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43d9      	mvns	r1, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	3324      	adds	r3, #36	; 0x24
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <md5ProcessBlock+0x614>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[14], 9,  k[25]);
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	401a      	ands	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	3338      	adds	r3, #56	; 0x38
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a3e      	ldr	r2, [pc, #248]	; (8000fe8 <md5ProcessBlock+0x618>)
 8000ef0:	4413      	add	r3, r2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4413      	add	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[3],  14, k[26]);
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	401a      	ands	r2, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	43d9      	mvns	r1, r3
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	400b      	ands	r3, r1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	330c      	adds	r3, #12
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a33      	ldr	r2, [pc, #204]	; (8000fec <md5ProcessBlock+0x61c>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4413      	add	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[8],  20, k[27]);
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	401a      	ands	r2, r3
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	400b      	ands	r3, r1
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3320      	adds	r3, #32
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <md5ProcessBlock+0x620>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4413      	add	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
   GG(a, b, c, d, x[13], 5,  k[28]);
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	401a      	ands	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43d9      	mvns	r1, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3334      	adds	r3, #52	; 0x34
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <md5ProcessBlock+0x624>)
 8000f7a:	4413      	add	r3, r2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4413      	add	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[2],  9,  k[29]);
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	401a      	ands	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	3308      	adds	r3, #8
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <md5ProcessBlock+0x628>)
 8000fa8:	4413      	add	r3, r2
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4413      	add	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[7],  14, k[30]);
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	e01d      	b.n	8000ffc <md5ProcessBlock+0x62c>
 8000fc0:	49b40821 	.word	0x49b40821
 8000fc4:	f61e2562 	.word	0xf61e2562
 8000fc8:	c040b340 	.word	0xc040b340
 8000fcc:	265e5a51 	.word	0x265e5a51
 8000fd0:	e9b6c7aa 	.word	0xe9b6c7aa
 8000fd4:	d62f105d 	.word	0xd62f105d
 8000fd8:	02441453 	.word	0x02441453
 8000fdc:	d8a1e681 	.word	0xd8a1e681
 8000fe0:	e7d3fbc8 	.word	0xe7d3fbc8
 8000fe4:	21e1cde6 	.word	0x21e1cde6
 8000fe8:	c33707d6 	.word	0xc33707d6
 8000fec:	f4d50d87 	.word	0xf4d50d87
 8000ff0:	455a14ed 	.word	0x455a14ed
 8000ff4:	a9e3e905 	.word	0xa9e3e905
 8000ff8:	fcefa3f8 	.word	0xfcefa3f8
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	43d9      	mvns	r1, r3
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	400b      	ands	r3, r1
 8001008:	431a      	orrs	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	331c      	adds	r3, #28
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4413      	add	r3, r2
 8001012:	4aa4      	ldr	r2, [pc, #656]	; (80012a4 <md5ProcessBlock+0x8d4>)
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4413      	add	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[12], 20, k[31]);
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	401a      	ands	r2, r3
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43d9      	mvns	r1, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	400b      	ands	r3, r1
 8001036:	431a      	orrs	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3330      	adds	r3, #48	; 0x30
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a99      	ldr	r2, [pc, #612]	; (80012a8 <md5ProcessBlock+0x8d8>)
 8001042:	4413      	add	r3, r2
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	ea4f 3333 	mov.w	r3, r3, ror #12
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]

   //Round 3
   HH(a, b, c, d, x[5],  4,  k[32]);
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	405a      	eors	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	405a      	eors	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3314      	adds	r3, #20
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a90      	ldr	r2, [pc, #576]	; (80012ac <md5ProcessBlock+0x8dc>)
 800106a:	4413      	add	r3, r2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4413      	add	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	ea4f 7333 	mov.w	r3, r3, ror #28
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	4413      	add	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[8],  11, k[33]);
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	405a      	eors	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	405a      	eors	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3320      	adds	r3, #32
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a87      	ldr	r2, [pc, #540]	; (80012b0 <md5ProcessBlock+0x8e0>)
 8001092:	4413      	add	r3, r2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	ea4f 5373 	mov.w	r3, r3, ror #21
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[11], 16, k[34]);
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	405a      	eors	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	405a      	eors	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	332c      	adds	r3, #44	; 0x2c
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a7e      	ldr	r2, [pc, #504]	; (80012b4 <md5ProcessBlock+0x8e4>)
 80010ba:	4413      	add	r3, r2
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4413      	add	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[14], 23, k[35]);
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	405a      	eors	r2, r3
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	405a      	eors	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	3338      	adds	r3, #56	; 0x38
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a75      	ldr	r2, [pc, #468]	; (80012b8 <md5ProcessBlock+0x8e8>)
 80010e2:	4413      	add	r3, r2
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4413      	add	r3, r2
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	ea4f 2373 	mov.w	r3, r3, ror #9
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4413      	add	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]
   HH(a, b, c, d, x[1],  4,  k[36]);
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	405a      	eors	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	405a      	eors	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a6c      	ldr	r2, [pc, #432]	; (80012bc <md5ProcessBlock+0x8ec>)
 800110a:	4413      	add	r3, r2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4413      	add	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	ea4f 7333 	mov.w	r3, r3, ror #28
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	4413      	add	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[4],  11, k[37]);
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	405a      	eors	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	405a      	eors	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3310      	adds	r3, #16
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a63      	ldr	r2, [pc, #396]	; (80012c0 <md5ProcessBlock+0x8f0>)
 8001132:	4413      	add	r3, r2
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	ea4f 5373 	mov.w	r3, r3, ror #21
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[7],  16, k[38]);
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	405a      	eors	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	405a      	eors	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	331c      	adds	r3, #28
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a5a      	ldr	r2, [pc, #360]	; (80012c4 <md5ProcessBlock+0x8f4>)
 800115a:	4413      	add	r3, r2
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4413      	add	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[10], 23, k[39]);
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	405a      	eors	r2, r3
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	405a      	eors	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3328      	adds	r3, #40	; 0x28
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <md5ProcessBlock+0x8f8>)
 8001182:	4413      	add	r3, r2
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4413      	add	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	ea4f 2373 	mov.w	r3, r3, ror #9
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4413      	add	r3, r2
 8001194:	617b      	str	r3, [r7, #20]
   HH(a, b, c, d, x[13], 4,  k[40]);
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	405a      	eors	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	405a      	eors	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	3334      	adds	r3, #52	; 0x34
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a48      	ldr	r2, [pc, #288]	; (80012cc <md5ProcessBlock+0x8fc>)
 80011aa:	4413      	add	r3, r2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4413      	add	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	ea4f 7333 	mov.w	r3, r3, ror #28
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	4413      	add	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[0],  11, k[41]);
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	405a      	eors	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	405a      	eors	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a40      	ldr	r2, [pc, #256]	; (80012d0 <md5ProcessBlock+0x900>)
 80011d0:	4413      	add	r3, r2
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	ea4f 5373 	mov.w	r3, r3, ror #21
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4413      	add	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[3],  16, k[42]);
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	405a      	eors	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	405a      	eors	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	330c      	adds	r3, #12
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a37      	ldr	r2, [pc, #220]	; (80012d4 <md5ProcessBlock+0x904>)
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4413      	add	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[6],  23, k[43]);
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	405a      	eors	r2, r3
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	405a      	eors	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	3318      	adds	r3, #24
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4413      	add	r3, r2
 800121e:	4a2e      	ldr	r2, [pc, #184]	; (80012d8 <md5ProcessBlock+0x908>)
 8001220:	4413      	add	r3, r2
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4413      	add	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	ea4f 2373 	mov.w	r3, r3, ror #9
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4413      	add	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
   HH(a, b, c, d, x[9],  4,  k[44]);
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	405a      	eors	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	405a      	eors	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3324      	adds	r3, #36	; 0x24
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4413      	add	r3, r2
 8001246:	4a25      	ldr	r2, [pc, #148]	; (80012dc <md5ProcessBlock+0x90c>)
 8001248:	4413      	add	r3, r2
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4413      	add	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	ea4f 7333 	mov.w	r3, r3, ror #28
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4413      	add	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[12], 11, k[45]);
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	405a      	eors	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	405a      	eors	r2, r3
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3330      	adds	r3, #48	; 0x30
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4413      	add	r3, r2
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <md5ProcessBlock+0x910>)
 8001270:	4413      	add	r3, r2
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	ea4f 5373 	mov.w	r3, r3, ror #21
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[15], 16, k[46]);
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	405a      	eors	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	405a      	eors	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	333c      	adds	r3, #60	; 0x3c
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4413      	add	r3, r2
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <md5ProcessBlock+0x914>)
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4413      	add	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	e022      	b.n	80012e8 <md5ProcessBlock+0x918>
 80012a2:	bf00      	nop
 80012a4:	676f02d9 	.word	0x676f02d9
 80012a8:	8d2a4c8a 	.word	0x8d2a4c8a
 80012ac:	fffa3942 	.word	0xfffa3942
 80012b0:	8771f681 	.word	0x8771f681
 80012b4:	6d9d6122 	.word	0x6d9d6122
 80012b8:	fde5380c 	.word	0xfde5380c
 80012bc:	a4beea44 	.word	0xa4beea44
 80012c0:	4bdecfa9 	.word	0x4bdecfa9
 80012c4:	f6bb4b60 	.word	0xf6bb4b60
 80012c8:	bebfbc70 	.word	0xbebfbc70
 80012cc:	289b7ec6 	.word	0x289b7ec6
 80012d0:	eaa127fa 	.word	0xeaa127fa
 80012d4:	d4ef3085 	.word	0xd4ef3085
 80012d8:	04881d05 	.word	0x04881d05
 80012dc:	d9d4d039 	.word	0xd9d4d039
 80012e0:	e6db99e5 	.word	0xe6db99e5
 80012e4:	1fa27cf8 	.word	0x1fa27cf8
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	ea4f 4333 	mov.w	r3, r3, ror #16
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[2],  23, k[47]);
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	405a      	eors	r2, r3
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	405a      	eors	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3308      	adds	r3, #8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4413      	add	r3, r2
 8001306:	4aa7      	ldr	r2, [pc, #668]	; (80015a4 <md5ProcessBlock+0xbd4>)
 8001308:	4413      	add	r3, r2
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4413      	add	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	ea4f 2373 	mov.w	r3, r3, ror #9
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]

   //Round 4
   II(a, b, c, d, x[0],  6,  k[48]);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43da      	mvns	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	431a      	orrs	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	405a      	eors	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4413      	add	r3, r2
 800132e:	4a9e      	ldr	r2, [pc, #632]	; (80015a8 <md5ProcessBlock+0xbd8>)
 8001330:	4413      	add	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4413      	add	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[7],  10, k[49]);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43da      	mvns	r2, r3
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	431a      	orrs	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	405a      	eors	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	331c      	adds	r3, #28
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a94      	ldr	r2, [pc, #592]	; (80015ac <md5ProcessBlock+0xbdc>)
 800135a:	4413      	add	r3, r2
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[14], 15, k[50]);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	43da      	mvns	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	431a      	orrs	r2, r3
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	405a      	eors	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3338      	adds	r3, #56	; 0x38
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4413      	add	r3, r2
 8001382:	4a8b      	ldr	r2, [pc, #556]	; (80015b0 <md5ProcessBlock+0xbe0>)
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4413      	add	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	ea4f 4373 	mov.w	r3, r3, ror #17
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[5],  21, k[51]);
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	431a      	orrs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	405a      	eors	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3314      	adds	r3, #20
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a81      	ldr	r2, [pc, #516]	; (80015b4 <md5ProcessBlock+0xbe4>)
 80013ae:	4413      	add	r3, r2
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4413      	add	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]
   II(a, b, c, d, x[12], 6,  k[52]);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43da      	mvns	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	405a      	eors	r2, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3330      	adds	r3, #48	; 0x30
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a78      	ldr	r2, [pc, #480]	; (80015b8 <md5ProcessBlock+0xbe8>)
 80013d8:	4413      	add	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4413      	add	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	ea4f 63b3 	mov.w	r3, r3, ror #26
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4413      	add	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[3],  10, k[53]);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43da      	mvns	r2, r3
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	405a      	eors	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	330c      	adds	r3, #12
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <md5ProcessBlock+0xbec>)
 8001402:	4413      	add	r3, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[10], 15, k[54]);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	43da      	mvns	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	431a      	orrs	r2, r3
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	405a      	eors	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3328      	adds	r3, #40	; 0x28
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4413      	add	r3, r2
 800142a:	4a65      	ldr	r2, [pc, #404]	; (80015c0 <md5ProcessBlock+0xbf0>)
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4413      	add	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	ea4f 4373 	mov.w	r3, r3, ror #17
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[1],  21, k[55]);
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	431a      	orrs	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	405a      	eors	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3304      	adds	r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a5b      	ldr	r2, [pc, #364]	; (80015c4 <md5ProcessBlock+0xbf4>)
 8001456:	4413      	add	r3, r2
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4413      	add	r3, r2
 8001468:	617b      	str	r3, [r7, #20]
   II(a, b, c, d, x[8],  6,  k[56]);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43da      	mvns	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	431a      	orrs	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	405a      	eors	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3320      	adds	r3, #32
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4413      	add	r3, r2
 800147e:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <md5ProcessBlock+0xbf8>)
 8001480:	4413      	add	r3, r2
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4413      	add	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4413      	add	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[15], 10, k[57]);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43da      	mvns	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	431a      	orrs	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	405a      	eors	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	333c      	adds	r3, #60	; 0x3c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a48      	ldr	r2, [pc, #288]	; (80015cc <md5ProcessBlock+0xbfc>)
 80014aa:	4413      	add	r3, r2
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[6],  15, k[58]);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	43da      	mvns	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	405a      	eors	r2, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3318      	adds	r3, #24
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a3f      	ldr	r2, [pc, #252]	; (80015d0 <md5ProcessBlock+0xc00>)
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4413      	add	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	ea4f 4373 	mov.w	r3, r3, ror #17
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[13], 21, k[59]);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	405a      	eors	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3334      	adds	r3, #52	; 0x34
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a35      	ldr	r2, [pc, #212]	; (80015d4 <md5ProcessBlock+0xc04>)
 80014fe:	4413      	add	r3, r2
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4413      	add	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4413      	add	r3, r2
 8001510:	617b      	str	r3, [r7, #20]
   II(a, b, c, d, x[4],  6,  k[60]);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	431a      	orrs	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	405a      	eors	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3310      	adds	r3, #16
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4413      	add	r3, r2
 8001526:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <md5ProcessBlock+0xc08>)
 8001528:	4413      	add	r3, r2
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4413      	add	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4413      	add	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[11], 10, k[61]);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43da      	mvns	r2, r3
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	431a      	orrs	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	405a      	eors	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	332c      	adds	r3, #44	; 0x2c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <md5ProcessBlock+0xc0c>)
 8001552:	4413      	add	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[2],  15, k[62]);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	43da      	mvns	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	431a      	orrs	r2, r3
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	405a      	eors	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3308      	adds	r3, #8
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4413      	add	r3, r2
 800157a:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <md5ProcessBlock+0xc10>)
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4413      	add	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	ea4f 4373 	mov.w	r3, r3, ror #17
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4413      	add	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[9],  21, k[63]);
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	43da      	mvns	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	431a      	orrs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	405a      	eors	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3324      	adds	r3, #36	; 0x24
 80015a0:	e020      	b.n	80015e4 <md5ProcessBlock+0xc14>
 80015a2:	bf00      	nop
 80015a4:	c4ac5665 	.word	0xc4ac5665
 80015a8:	f4292244 	.word	0xf4292244
 80015ac:	432aff97 	.word	0x432aff97
 80015b0:	ab9423a7 	.word	0xab9423a7
 80015b4:	fc93a039 	.word	0xfc93a039
 80015b8:	655b59c3 	.word	0x655b59c3
 80015bc:	8f0ccc92 	.word	0x8f0ccc92
 80015c0:	ffeff47d 	.word	0xffeff47d
 80015c4:	85845dd1 	.word	0x85845dd1
 80015c8:	6fa87e4f 	.word	0x6fa87e4f
 80015cc:	fe2ce6e0 	.word	0xfe2ce6e0
 80015d0:	a3014314 	.word	0xa3014314
 80015d4:	4e0811a1 	.word	0x4e0811a1
 80015d8:	f7537e82 	.word	0xf7537e82
 80015dc:	bd3af235 	.word	0xbd3af235
 80015e0:	2ad7d2bb 	.word	0x2ad7d2bb
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <md5ProcessBlock+0xc6c>)
 80015ea:	4413      	add	r3, r2
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4413      	add	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

   //Update the hash value
   context->h[0] += a;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	441a      	add	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
   context->h[1] += b;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	441a      	add	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	605a      	str	r2, [r3, #4]
   context->h[2] += c;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	441a      	add	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	609a      	str	r2, [r3, #8]
   context->h[3] += d;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	441a      	add	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60da      	str	r2, [r3, #12]
}
 800162e:	bf00      	nop
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	eb86d391 	.word	0xeb86d391

08001640 <ipSendDatagram>:
 * @return Error code
 **/

error_t ipSendDatagram(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, uint_t flags)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d10b      	bne.n	800166e <ipSendDatagram+0x2e>
   {
      //Form an IPv4 packet and send it
      error = ipv4SendDatagram(interface, &pseudoHeader->ipv4Data,
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1d19      	adds	r1, r3, #4
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f007 f853 	bl	800870e <ipv4SendDatagram>
 8001668:	4603      	mov	r3, r0
 800166a:	82fb      	strh	r3, [r7, #22]
 800166c:	e001      	b.n	8001672 <ipSendDatagram+0x32>
   else
#endif
   //Destination address is invalid
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 800166e:	23e4      	movs	r3, #228	; 0xe4
 8001670:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8001672:	8afb      	ldrh	r3, [r7, #22]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <ipSelectSourceAddr>:
 * @return Error code
 **/

error_t ipSelectSourceAddr(NetInterface **interface,
   const IpAddr *destAddr, IpAddr *srcAddr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //The destination address is an IPv4 address?
   if(destAddr->length == sizeof(Ipv4Addr))
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d10d      	bne.n	80016ac <ipSelectSourceAddr+0x30>
   {
      //An IPv4 address is expected
      srcAddr->length = sizeof(Ipv4Addr);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2204      	movs	r2, #4
 8001694:	601a      	str	r2, [r3, #0]

      //Get the most appropriate source address to use
      error = ipv4SelectSourceAddr(interface, destAddr->ipv4Addr,
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	6859      	ldr	r1, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3304      	adds	r3, #4
 800169e:	461a      	mov	r2, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f007 fdb5 	bl	8009210 <ipv4SelectSourceAddr>
 80016a6:	4603      	mov	r3, r0
 80016a8:	82fb      	strh	r3, [r7, #22]
 80016aa:	e001      	b.n	80016b0 <ipSelectSourceAddr+0x34>
   else
#endif
   //The destination address is not valid?
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 80016ac:	23e4      	movs	r3, #228	; 0xe4
 80016ae:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80016b0:	8afb      	ldrh	r3, [r7, #22]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <ipIsUnspecifiedAddr>:
 * @param[in] ipAddr IP address
 * @return TRUE if the IP address is unspecified, else FALSE
 **/

bool_t ipIsUnspecifiedAddr(const IpAddr *ipAddr)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d109      	bne.n	80016de <ipIsUnspecifiedAddr+0x24>
   {
      //Compare IPv4 address
      if(ipAddr->ipv4Addr == IPV4_UNSPECIFIED_ADDR)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <ipIsUnspecifiedAddr+0x1e>
      {
         result = TRUE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	e004      	b.n	80016e2 <ipIsUnspecifiedAddr+0x28>
      }
      else
      {
         result = FALSE;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e001      	b.n	80016e2 <ipIsUnspecifiedAddr+0x28>
   }
   else
#endif
   //Invalid IP address?
   {
      result = FALSE;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
   }

   //Return TRUE if the IP address is unspecified, else FALSE
   return result;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <ipIsMulticastAddr>:
 * @param[in] ipAddr IP address
 * @return TRUE if the IP address is a multicast address, else FALSE
 **/

bool_t ipIsMulticastAddr(const IpAddr *ipAddr)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d10a      	bne.n	8001716 <ipIsMulticastAddr+0x26>
   {
      //Check whether the IPv4 address is a multicast address
      result = ipv4IsMulticastAddr(ipAddr->ipv4Addr);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001708:	2be0      	cmp	r3, #224	; 0xe0
 800170a:	bf0c      	ite	eq
 800170c:	2301      	moveq	r3, #1
 800170e:	2300      	movne	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e001      	b.n	800171a <ipIsMulticastAddr+0x2a>
   }
   else
#endif
   //Invalid IP address?
   {
      result = FALSE;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
   }

   //Return TRUE if the IP address is a multicast address, else FALSE
   return result;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <ipCalcChecksum>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksum(const void *data, size_t length)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
   uint32_t temp;
   uint32_t checksum;
   const uint8_t *p;

   //Checksum preset value
   checksum = 0x0000;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]

   //Point to the data over which to calculate the IP checksum
   p = (const uint8_t *) data;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	613b      	str	r3, [r7, #16]

   //Pointer not aligned on a 16-bit boundary?
   if(((uint_t) p & 1) != 0)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00e      	beq.n	8001762 <ipCalcChecksum+0x3a>
   {
      if(length >= 1)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <ipCalcChecksum+0x3a>
#ifdef _CPU_BIG_ENDIAN
         //Update checksum value
         checksum += (uint32_t) *p;
#else
         //Update checksum value
         checksum += (uint32_t) *p << 8;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	4413      	add	r3, r2
 8001754:	617b      	str	r3, [r7, #20]
#endif
         //Restore the alignment on 16-bit boundaries
         p++;
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	3301      	adds	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length--;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	3b01      	subs	r3, #1
 8001760:	603b      	str	r3, [r7, #0]
      }
   }

   //Pointer not aligned on a 32-bit boundary?
   if(((uint_t) p & 2) != 0)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d024      	beq.n	80017b6 <ipCalcChecksum+0x8e>
   {
      if(length >= 2)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d921      	bls.n	80017b6 <ipCalcChecksum+0x8e>
      {
         //Update checksum value
         checksum += (uint32_t) *((uint16_t *) p);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4413      	add	r3, r2
 800177c:	617b      	str	r3, [r7, #20]

         //Restore the alignment on 32-bit boundaries
         p += 2;
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	3302      	adds	r3, #2
 8001782:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length -= 2;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3b02      	subs	r3, #2
 8001788:	603b      	str	r3, [r7, #0]
      }
   }

   //Process the data 4 bytes at a time
   while(length >= 4)
 800178a:	e014      	b.n	80017b6 <ipCalcChecksum+0x8e>
   {
      //Update checksum value
      temp = checksum + *((uint32_t *) p);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]

      //Add carry bit, if any
      if(temp < checksum)
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	429a      	cmp	r2, r3
 800179c:	d203      	bcs.n	80017a6 <ipCalcChecksum+0x7e>
      {
         checksum = temp + 1;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e001      	b.n	80017aa <ipCalcChecksum+0x82>
      }
      else
      {
         checksum = temp;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	617b      	str	r3, [r7, #20]
      }

      //Point to the next 32-bit word
      p += 4;
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	3304      	adds	r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 4;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3b04      	subs	r3, #4
 80017b4:	603b      	str	r3, [r7, #0]
   while(length >= 4)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d8e7      	bhi.n	800178c <ipCalcChecksum+0x64>
   }

   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	0c1b      	lsrs	r3, r3, #16
 80017c4:	4413      	add	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]

   //Add left-over 16-bit word, if any
   if(length >= 2)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d90b      	bls.n	80017e6 <ipCalcChecksum+0xbe>
   {
      //Update checksum value
      checksum += (uint32_t) *((uint16_t *) p);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	4413      	add	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]

      //Point to the next byte
      p += 2;
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	3302      	adds	r3, #2
 80017de:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 2;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	3b02      	subs	r3, #2
 80017e4:	603b      	str	r3, [r7, #0]
   }

   //Add left-over byte, if any
   if(length >= 1)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <ipCalcChecksum+0xd0>
#ifdef _CPU_BIG_ENDIAN
      //Update checksum value
      checksum += (uint32_t) *p << 8;
#else
      //Update checksum value
      checksum += (uint32_t) *p;
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	4413      	add	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
#endif
   }

   //Fold 32-bit sum to 16 bits (first pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	4413      	add	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits (second pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	b29a      	uxth	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	4413      	add	r3, r2
 800180e:	617b      	str	r3, [r7, #20]

   //Restore checksum endianness
   if(((uint_t) data & 1) != 0)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <ipCalcChecksum+0x100>
   {
      //Swap checksum value
      checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	0a1a      	lsrs	r2, r3, #8
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	4313      	orrs	r3, r2
 8001824:	b29b      	uxth	r3, r3
 8001826:	617b      	str	r3, [r7, #20]
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	b29b      	uxth	r3, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	b29b      	uxth	r3, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <ipCalcChecksumEx>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksumEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
   uint_t pos;
   uint8_t *data;
   uint32_t checksum;

   //Checksum preset value
   checksum = 0x0000;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]

   //Current position in the multi-part buffer
   pos = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
 8001854:	e060      	b.n	8001918 <ipCalcChecksumEx+0xdc>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	3301      	adds	r3, #1
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	889b      	ldrh	r3, [r3, #4]
 8001862:	461a      	mov	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4293      	cmp	r3, r2
 8001868:	d249      	bcs.n	80018fe <ipCalcChecksumEx+0xc2>
      {
         //Point to the first data byte
         data = (uint8_t *) buffer->chunk[i].address + offset;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186e:	3201      	adds	r2, #1
 8001870:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4413      	add	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]

         //Number of bytes available in the current chunk
         n = buffer->chunk[i].length - offset;
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	3301      	adds	r3, #1
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	889b      	ldrh	r3, [r3, #4]
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
         //Limit the number of byte to process
         n = MIN(n, length - pos);
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4293      	cmp	r3, r2
 8001898:	bf28      	it	cs
 800189a:	4613      	movcs	r3, r2
 800189c:	617b      	str	r3, [r7, #20]

         //Take care of alignment issues
         if((pos & 1) != 0)
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <ipCalcChecksumEx+0x7a>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	0a1a      	lsrs	r2, r3, #8
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	61fb      	str	r3, [r7, #28]
         }

         //Process data chunk
         checksum += ipCalcChecksum(data, n) ^ 0xFFFF;
 80018b6:	6979      	ldr	r1, [r7, #20]
 80018b8:	69b8      	ldr	r0, [r7, #24]
 80018ba:	f7ff ff35 	bl	8001728 <ipCalcChecksum>
 80018be:	4603      	mov	r3, r0
 80018c0:	43db      	mvns	r3, r3
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	61fb      	str	r3, [r7, #28]
         //Fold 32-bit sum to 16 bits
         checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	4413      	add	r3, r2
 80018d6:	61fb      	str	r3, [r7, #28]

         //Restore checksum endianness
         if((pos & 1) != 0)
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <ipCalcChecksumEx+0xb4>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	0a1a      	lsrs	r2, r3, #8
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	61fb      	str	r3, [r7, #28]
         }

         //Advance current position
         pos += n;
 80018f0:	6a3a      	ldr	r2, [r7, #32]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	4413      	add	r3, r2
 80018f6:	623b      	str	r3, [r7, #32]
         //Process the next block from the start
         offset = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	e009      	b.n	8001912 <ipCalcChecksumEx+0xd6>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	3301      	adds	r3, #1
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	889b      	ldrh	r3, [r3, #4]
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	3301      	adds	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191e:	429a      	cmp	r2, r3
 8001920:	d203      	bcs.n	800192a <ipCalcChecksumEx+0xee>
 8001922:	6a3a      	ldr	r2, [r7, #32]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d395      	bcc.n	8001856 <ipCalcChecksumEx+0x1a>
      }
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	b29b      	uxth	r3, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	b29b      	uxth	r3, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <ipCalcUpperLayerChecksumEx>:
 * @return Checksum value
 **/

uint16_t ipCalcUpperLayerChecksumEx(const void *pseudoHeader,
   size_t pseudoHeaderLen, const NetBuffer *buffer, size_t offset, size_t length)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	603b      	str	r3, [r7, #0]
   uint32_t checksum;

   //Process pseudo header
   checksum = ipCalcChecksum(pseudoHeader, pseudoHeaderLen) ^ 0xFFFF;
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff feec 	bl	8001728 <ipCalcChecksum>
 8001950:	4603      	mov	r3, r0
 8001952:	43db      	mvns	r3, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	617b      	str	r3, [r7, #20]
   //Process upper-layer data
   checksum += ipCalcChecksumEx(buffer, offset, length) ^ 0xFFFF;
 8001958:	6a3a      	ldr	r2, [r7, #32]
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff6d 	bl	800183c <ipCalcChecksumEx>
 8001962:	4603      	mov	r3, r0
 8001964:	43db      	mvns	r3, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	4413      	add	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	b29a      	uxth	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	0c1b      	lsrs	r3, r3, #16
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	b29b      	uxth	r3, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	b29b      	uxth	r3, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <ipAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ipAllocBuffer(size_t length, size_t *offset)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
#if (IPV6_SUPPORT == ENABLED)
   //Maximum overhead when using IPv6
   headerLen = sizeof(Ipv6Header) + sizeof(Ipv6FragmentHeader);
#else
   //Maximum overhead when using IPv4
   headerLen = sizeof(Ipv4Header);
 8001996:	2314      	movs	r3, #20
 8001998:	60fb      	str	r3, [r7, #12]
#if (ETH_SUPPORT == ENABLED)
   //Allocate a buffer to hold the Ethernet header and the IP packet
   buffer = ethAllocBuffer(length + headerLen, offset);
#elif (PPP_SUPPORT == ENABLED)
   //Allocate a buffer to hold the PPP header and the IP packet
   buffer = pppAllocBuffer(length + headerLen, offset);
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00c f854 	bl	800da50 <pppAllocBuffer>
 80019a8:	60b8      	str	r0, [r7, #8]
   //Clear offset value
   *offset = 0;
#endif

   //Successful memory allocation?
   if(buffer != NULL)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <ipAllocBuffer+0x30>
   {
      //Offset to the first byte of the payload
      *offset += headerLen;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	441a      	add	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	601a      	str	r2, [r3, #0]
   }

   //Return a pointer to the freshly allocated buffer
   return buffer;
 80019bc:	68bb      	ldr	r3, [r7, #8]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <ipStringToAddr>:
 * @param[out] ipAddr Binary representation of the IP address
 * @return Error code
 **/

error_t ipStringToAddr(const char_t *str, IpAddr *ipAddr)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
   }
   else
#endif
#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(strchr(str, '.'))
 80019d0:	212e      	movs	r1, #46	; 0x2e
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f019 ff8e 	bl	801b8f4 <strchr>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <ipStringToAddr+0x30>
   {
      //IPv4 addresses are 4-byte long
      ipAddr->length = sizeof(Ipv4Addr);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2204      	movs	r2, #4
 80019e2:	601a      	str	r2, [r3, #0]
      //Convert the string to IPv4 address
      error = ipv4StringToAddr(str, &ipAddr->ipv4Addr);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	3304      	adds	r3, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f006 ff82 	bl	80088f4 <ipv4StringToAddr>
 80019f0:	4603      	mov	r3, r0
 80019f2:	81fb      	strh	r3, [r7, #14]
 80019f4:	e001      	b.n	80019fa <ipStringToAddr+0x34>
   else
#endif
   //Invalid IP address?
   {
      //Report an error
      error = ERROR_FAILURE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 80019fa:	89fb      	ldrh	r3, [r7, #14]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <ipAddrToString>:
 * @param[out] str NULL-terminated string representing the IP address
 * @return Pointer to the formatted string
 **/

char_t *ipAddrToString(const IpAddr *ipAddr, char_t *str)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d107      	bne.n	8001a26 <ipAddrToString+0x22>
   {
      //Convert IPv4 address to string representation
      return ipv4AddrToString(ipAddr->ipv4Addr, str);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	6839      	ldr	r1, [r7, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f006 ffd1 	bl	80089c4 <ipv4AddrToString>
 8001a22:	4603      	mov	r3, r0
 8001a24:	e008      	b.n	8001a38 <ipAddrToString+0x34>
   //Invalid IP address?
   {
      static char_t c;

      //The last parameter is optional
      if(str == NULL)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <ipAddrToString+0x2c>
      {
         str = &c;
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <ipAddrToString+0x3c>)
 8001a2e:	603b      	str	r3, [r7, #0]
      }

      //Properly terminate the string
      str[0] = '\0';
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]

      //Return an empty string
      return str;
 8001a36:	683b      	ldr	r3, [r7, #0]
   }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000244 	.word	0x20000244

08001a44 <netInit>:
 * @brief TCP/IP stack initialization
 * @return Error code
 **/

error_t netInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
   error_t error;
   uint_t i;
   NetInterface *interface;

   //The TCP/IP process is currently suspended
   netTaskRunning = FALSE;
 8001a4a:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <netInit+0x148>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
   //Get current time
   netTimestamp = osGetSystemTime();
 8001a50:	f7fe febe 	bl	80007d0 <osGetSystemTime>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b4e      	ldr	r3, [pc, #312]	; (8001b90 <netInit+0x14c>)
 8001a58:	601a      	str	r2, [r3, #0]

   //Create a mutex to prevent simultaneous access to the TCP/IP stack
   if(!osCreateMutex(&netMutex))
 8001a5a:	484e      	ldr	r0, [pc, #312]	; (8001b94 <netInit+0x150>)
 8001a5c:	f7fe fe83 	bl	8000766 <osCreateMutex>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <netInit+0x26>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001a66:	2365      	movs	r3, #101	; 0x65
 8001a68:	e08b      	b.n	8001b82 <netInit+0x13e>
   }

   //Create a event object to receive notifications from device drivers
   if(!osCreateEvent(&netEvent))
 8001a6a:	484b      	ldr	r0, [pc, #300]	; (8001b98 <netInit+0x154>)
 8001a6c:	f7fe fdfe 	bl	800066c <osCreateEvent>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <netInit+0x36>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001a76:	2365      	movs	r3, #101	; 0x65
 8001a78:	e083      	b.n	8001b82 <netInit+0x13e>
   }

   //Memory pool initialization
   error = memPoolInit();
 8001a7a:	f000 fc35 	bl	80022e8 <memPoolInit>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001a82:	897b      	ldrh	r3, [r7, #10]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <netInit+0x48>
      return error;
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	e07a      	b.n	8001b82 <netInit+0x13e>

   //Clear configuration data for each interface
   memset(netInterface, 0, sizeof(netInterface));
 8001a8c:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001a90:	2100      	movs	r1, #0
 8001a92:	4842      	ldr	r0, [pc, #264]	; (8001b9c <netInit+0x158>)
 8001a94:	f019 fb68 	bl	801b168 <memset>

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e01b      	b.n	8001ad6 <netInit+0x92>
   {
      //Point to the current interface
      interface = &netInterface[i];
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	4a3c      	ldr	r2, [pc, #240]	; (8001b9c <netInit+0x158>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	607b      	str	r3, [r7, #4]

      //Default interface name
      sprintf(interface->name, "eth%u", i);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3310      	adds	r3, #16
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	493a      	ldr	r1, [pc, #232]	; (8001ba0 <netInit+0x15c>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f019 fede 	bl	801b878 <siprintf>

      //Zero-based index
      interface->index = i;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]
      //Unique number identifying the interface
      interface->id = i;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	605a      	str	r2, [r3, #4]
      //Default PHY address
      interface->phyAddr = UINT8_MAX;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	22ff      	movs	r2, #255	; 0xff
 8001acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0e0      	beq.n	8001a9e <netInit+0x5a>
   }

   //Create a mutex to prevent simultaneous access to the callback table
   if(!osCreateMutex(&callbackTableMutex))
 8001adc:	4831      	ldr	r0, [pc, #196]	; (8001ba4 <netInit+0x160>)
 8001ade:	f7fe fe42 	bl	8000766 <osCreateMutex>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <netInit+0xa8>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001ae8:	2365      	movs	r3, #101	; 0x65
 8001aea:	e04a      	b.n	8001b82 <netInit+0x13e>
   }

   //Initialize callback table
   memset(callbackTable, 0, sizeof(callbackTable));
 8001aec:	2248      	movs	r2, #72	; 0x48
 8001aee:	2100      	movs	r1, #0
 8001af0:	482d      	ldr	r0, [pc, #180]	; (8001ba8 <netInit+0x164>)
 8001af2:	f019 fb39 	bl	801b168 <memset>

   //Socket related initialization
   error = socketInit();
 8001af6:	f001 f939 	bl	8002d6c <socketInit>
 8001afa:	4603      	mov	r3, r0
 8001afc:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <netInit+0xc4>
      return error;
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	e03c      	b.n	8001b82 <netInit+0x13e>
      return error;
#endif

#if (UDP_SUPPORT == ENABLED)
   //UDP related initialization
   error = udpInit();
 8001b08:	f004 fee4 	bl	80068d4 <udpInit>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001b10:	897b      	ldrh	r3, [r7, #10]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <netInit+0xd6>
      return error;
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	e033      	b.n	8001b82 <netInit+0x13e>
#endif

#if (TCP_SUPPORT == ENABLED)
   //TCP related initialization
   error = tcpInit();
 8001b1a:	f001 fc39 	bl	8003390 <tcpInit>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <netInit+0xe8>
      return error;
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	e02a      	b.n	8001b82 <netInit+0x13e>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //DNS cache initialization
   error = dnsInit();
 8001b2c:	f005 fb14 	bl	8007158 <dnsInit>
 8001b30:	4603      	mov	r3, r0
 8001b32:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001b34:	897b      	ldrh	r3, [r7, #10]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <netInit+0xfa>
      return error;
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	e021      	b.n	8001b82 <netInit+0x13e>
#endif

   //Initialize tick counters
   nicTickCounter = 0;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <netInit+0x168>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

#if (PPP_SUPPORT == ENABLED)
   pppTickCounter = 0;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <netInit+0x16c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   arpTickCounter = 0;
#endif
#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   ipv4FragTickCounter = 0;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <netInit+0x170>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
#endif
#if (IPV6_SUPPORT == ENABLED && DHCPV6_CLIENT_SUPPORT == ENABLED)
   dhcpv6ClientTickCounter = 0;
#endif
#if (TCP_SUPPORT == ENABLED)
   tcpTickCounter = 0;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <netInit+0x174>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
#endif
#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   dnsTickCounter = 0;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <netInit+0x178>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
   //Create a task to handle TCP/IP events
   osCreateStaticTask(&netTaskInstance, "TCP/IP Stack", (OsTaskCode) netTask,
      NULL, netTaskStack, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);
#else
   //Create a task to handle TCP/IP events
   netTaskHandle = osCreateTask("TCP/IP Stack", (OsTaskCode) netTask,
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	f240 238a 	movw	r3, #650	; 0x28a
 8001b64:	2200      	movs	r2, #0
 8001b66:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <netInit+0x17c>)
 8001b68:	4816      	ldr	r0, [pc, #88]	; (8001bc4 <netInit+0x180>)
 8001b6a:	f7fe fd40 	bl	80005ee <osCreateTask>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <netInit+0x184>)
 8001b72:	601a      	str	r2, [r3, #0]
      NULL, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);

   //Unable to create the task?
   if(netTaskHandle == OS_INVALID_HANDLE)
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <netInit+0x184>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <netInit+0x13c>
      return ERROR_OUT_OF_RESOURCES;
 8001b7c:	2365      	movs	r3, #101	; 0x65
 8001b7e:	e000      	b.n	8001b82 <netInit+0x13e>
   //The TCP/IP process is now running
   netTaskRunning = TRUE;
#endif

   //Successful initialization
   return NO_ERROR;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000248 	.word	0x20000248
 8001b90:	2000024c 	.word	0x2000024c
 8001b94:	2000e460 	.word	0x2000e460
 8001b98:	2000e458 	.word	0x2000e458
 8001b9c:	2000e464 	.word	0x2000e464
 8001ba0:	0801c360 	.word	0x0801c360
 8001ba4:	20000254 	.word	0x20000254
 8001ba8:	20000258 	.word	0x20000258
 8001bac:	2000e838 	.word	0x2000e838
 8001bb0:	20010234 	.word	0x20010234
 8001bb4:	20010230 	.word	0x20010230
 8001bb8:	2000fe44 	.word	0x2000fe44
 8001bbc:	2001022c 	.word	0x2001022c
 8001bc0:	08001efd 	.word	0x08001efd
 8001bc4:	0801c368 	.word	0x0801c368
 8001bc8:	2000e45c 	.word	0x2000e45c

08001bcc <netSetInterfaceName>:
 * @param[in] name NULL-terminated string that contains the interface name
 * @return Error code
 **/

error_t netSetInterfaceName(NetInterface *interface, const char_t *name)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || name == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <netSetInterfaceName+0x16>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <netSetInterfaceName+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001be2:	2302      	movs	r3, #2
 8001be4:	e00d      	b.n	8001c02 <netSetInterfaceName+0x36>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001be6:	4809      	ldr	r0, [pc, #36]	; (8001c0c <netSetInterfaceName+0x40>)
 8001be8:	f7fe fdd6 	bl	8000798 <osAcquireMutex>

   //Set interface name
   strSafeCopy(interface->name, name, NET_MAX_IF_NAME_LEN);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3310      	adds	r3, #16
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	6839      	ldr	r1, [r7, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fdf6 	bl	80007e6 <strSafeCopy>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001bfa:	4804      	ldr	r0, [pc, #16]	; (8001c0c <netSetInterfaceName+0x40>)
 8001bfc:	f7fe fddb 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000e460 	.word	0x2000e460

08001c10 <netSetDriver>:
 * @param[in] driver Ethernet MAC driver
 * @return Error code
 **/

error_t netSetDriver(NetInterface *interface, const NicDriver *driver)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <netSetDriver+0x16>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <netSetDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001c26:	2302      	movs	r3, #2
 8001c28:	e009      	b.n	8001c3e <netSetDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001c2a:	4807      	ldr	r0, [pc, #28]	; (8001c48 <netSetDriver+0x38>)
 8001c2c:	f7fe fdb4 	bl	8000798 <osAcquireMutex>
   //Set Ethernet MAC driver
   interface->nicDriver = driver;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	649a      	str	r2, [r3, #72]	; 0x48
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001c36:	4804      	ldr	r0, [pc, #16]	; (8001c48 <netSetDriver+0x38>)
 8001c38:	f7fe fdbd 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000e460 	.word	0x2000e460

08001c4c <netSetUartDriver>:
 * @param[in] driver Underlying UART driver
 * @return Error code
 **/

error_t netSetUartDriver(NetInterface *interface, const UartDriver *driver)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <netSetUartDriver+0x16>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <netSetUartDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001c62:	2302      	movs	r3, #2
 8001c64:	e009      	b.n	8001c7a <netSetUartDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001c66:	4807      	ldr	r0, [pc, #28]	; (8001c84 <netSetUartDriver+0x38>)
 8001c68:	f7fe fd96 	bl	8000798 <osAcquireMutex>
   //Set UART driver
   interface->uartDriver = driver;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	659a      	str	r2, [r3, #88]	; 0x58
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001c72:	4804      	ldr	r0, [pc, #16]	; (8001c84 <netSetUartDriver+0x38>)
 8001c74:	f7fe fd9f 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000e460 	.word	0x2000e460

08001c88 <netConfigInterface>:
 * @param[in] interface Network interface to configure
 * @return Error code
 **/

error_t netConfigInterface(NetInterface *interface)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
   error_t error;

   //Make sure the network interface is valid
   if(interface == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <netConfigInterface+0x12>
      return ERROR_INVALID_PARAMETER;
 8001c96:	2302      	movs	r3, #2
 8001c98:	e04b      	b.n	8001d32 <netConfigInterface+0xaa>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001c9a:	4828      	ldr	r0, [pc, #160]	; (8001d3c <netConfigInterface+0xb4>)
 8001c9c:	f7fe fd7c 	bl	8000798 <osAcquireMutex>

   //Disable hardware interrupts
   if(interface->nicDriver != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <netConfigInterface+0x2a>
      interface->nicDriver->disableIrq(interface);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3

   //Start of exception handling block
   do
   {
      //Receive notifications when the transmitter is ready to send
      if(!osCreateEvent(&interface->nicTxEvent))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3370      	adds	r3, #112	; 0x70
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fcd8 	bl	800066c <osCreateEvent>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <netConfigInterface+0x40>
      {
         //Failed to create event object
         error = ERROR_OUT_OF_RESOURCES;
 8001cc2:	2365      	movs	r3, #101	; 0x65
 8001cc4:	81fb      	strh	r3, [r7, #14]
         //Stop immediately
         break;
 8001cc6:	e016      	b.n	8001cf6 <netConfigInterface+0x6e>
      }

      //Valid NIC driver?
      if(interface->nicDriver != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d009      	beq.n	8001ce4 <netConfigInterface+0x5c>
      {
         //Network controller initialization
         error = interface->nicDriver->init(interface);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	81fb      	strh	r3, [r7, #14]
         //Any error to report?
         if(error)
 8001cde:	89fb      	ldrh	r3, [r7, #14]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <netConfigInterface+0x6c>
         break;
#endif

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 initialization
      error = ipv4Init(interface);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f006 fabd 	bl	8008264 <ipv4Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 8001cee:	89fb      	ldrh	r3, [r7, #14]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <netConfigInterface+0x6e>
            break;
 8001cf4:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Check status code
   if(!error)
 8001cf6:	89fb      	ldrh	r3, [r7, #14]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <netConfigInterface+0x98>
   {
      //The network interface is now fully configured
      interface->configured = TRUE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      //Check whether the TCP/IP process is running
      if(netTaskRunning)
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <netConfigInterface+0xb8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00e      	beq.n	8001d2a <netConfigInterface+0xa2>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00a      	beq.n	8001d2a <netConfigInterface+0xa2>
            interface->nicDriver->enableIrq(interface);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
 8001d1e:	e004      	b.n	8001d2a <netConfigInterface+0xa2>
      }
   }
   else
   {
      //Clean up side effects before returning
      osDeleteEvent(&interface->nicTxEvent);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3370      	adds	r3, #112	; 0x70
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fcc1 	bl	80006ac <osDeleteEvent>
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <netConfigInterface+0xb4>)
 8001d2c:	f7fe fd43 	bl	80007b6 <osReleaseMutex>

   //Return status code
   return error;
 8001d30:	89fb      	ldrh	r3, [r7, #14]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000e460 	.word	0x2000e460
 8001d40:	20000248 	.word	0x20000248

08001d44 <netProcessLinkChange>:
 * @brief Process link state change event
 * @param[in] interface Underlying network interface
 **/

void netProcessLinkChange(NetInterface *interface)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
   uint_t i;
   Socket *socket;

   //Check link state
   if(interface->linkState)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d07c      	beq.n	8001e4e <netProcessLinkChange+0x10a>
   {
      //Display link state
      TRACE_INFO("Link is up (%s)...\r\n", interface->name);
 8001d54:	f7fe fc74 	bl	8000640 <osSuspendAllTasks>
 8001d58:	4b5b      	ldr	r3, [pc, #364]	; (8001ec8 <netProcessLinkChange+0x184>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68d8      	ldr	r0, [r3, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3310      	adds	r3, #16
 8001d62:	461a      	mov	r2, r3
 8001d64:	4959      	ldr	r1, [pc, #356]	; (8001ecc <netProcessLinkChange+0x188>)
 8001d66:	f019 f919 	bl	801af9c <fiprintf>
 8001d6a:	f7fe fc74 	bl	8000656 <osResumeAllTasks>

      //Display link speed
      if(interface->linkSpeed == NIC_LINK_SPEED_1GBPS)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d74:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <netProcessLinkChange+0x18c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10c      	bne.n	8001d94 <netProcessLinkChange+0x50>
      {
         //1000BASE-T
         TRACE_INFO("  Link speed = 1000 Mbps\r\n");
 8001d7a:	f7fe fc61 	bl	8000640 <osSuspendAllTasks>
 8001d7e:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <netProcessLinkChange+0x184>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	221a      	movs	r2, #26
 8001d86:	2101      	movs	r1, #1
 8001d88:	4852      	ldr	r0, [pc, #328]	; (8001ed4 <netProcessLinkChange+0x190>)
 8001d8a:	f019 f967 	bl	801b05c <fwrite>
 8001d8e:	f7fe fc62 	bl	8000656 <osResumeAllTasks>
 8001d92:	e038      	b.n	8001e06 <netProcessLinkChange+0xc2>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_100MBPS)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d9a:	4a4f      	ldr	r2, [pc, #316]	; (8001ed8 <netProcessLinkChange+0x194>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d10c      	bne.n	8001dba <netProcessLinkChange+0x76>
      {
         //100BASE-TX
         TRACE_INFO("  Link speed = 100 Mbps\r\n");
 8001da0:	f7fe fc4e 	bl	8000640 <osSuspendAllTasks>
 8001da4:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <netProcessLinkChange+0x184>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2219      	movs	r2, #25
 8001dac:	2101      	movs	r1, #1
 8001dae:	484b      	ldr	r0, [pc, #300]	; (8001edc <netProcessLinkChange+0x198>)
 8001db0:	f019 f954 	bl	801b05c <fwrite>
 8001db4:	f7fe fc4f 	bl	8000656 <osResumeAllTasks>
 8001db8:	e025      	b.n	8001e06 <netProcessLinkChange+0xc2>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_10MBPS)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc0:	4a47      	ldr	r2, [pc, #284]	; (8001ee0 <netProcessLinkChange+0x19c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10c      	bne.n	8001de0 <netProcessLinkChange+0x9c>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = 10 Mbps\r\n");
 8001dc6:	f7fe fc3b 	bl	8000640 <osSuspendAllTasks>
 8001dca:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <netProcessLinkChange+0x184>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2218      	movs	r2, #24
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4843      	ldr	r0, [pc, #268]	; (8001ee4 <netProcessLinkChange+0x1a0>)
 8001dd6:	f019 f941 	bl	801b05c <fwrite>
 8001dda:	f7fe fc3c 	bl	8000656 <osResumeAllTasks>
 8001dde:	e012      	b.n	8001e06 <netProcessLinkChange+0xc2>
      }
      else if(interface->linkSpeed != NIC_LINK_SPEED_UNKNOWN)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00d      	beq.n	8001e06 <netProcessLinkChange+0xc2>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = %" PRIu32 " bps\r\n",
 8001dea:	f7fe fc29 	bl	8000640 <osSuspendAllTasks>
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <netProcessLinkChange+0x184>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68d8      	ldr	r0, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	493a      	ldr	r1, [pc, #232]	; (8001ee8 <netProcessLinkChange+0x1a4>)
 8001dfe:	f019 f8cd 	bl	801af9c <fiprintf>
 8001e02:	f7fe fc28 	bl	8000656 <osResumeAllTasks>
            interface->linkSpeed);
      }

      //Display duplex mode
      if(interface->duplexMode == NIC_FULL_DUPLEX_MODE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d10c      	bne.n	8001e2a <netProcessLinkChange+0xe6>
      {
         //1000BASE-T
         TRACE_INFO("  Duplex mode = Full-Duplex\r\n");
 8001e10:	f7fe fc16 	bl	8000640 <osSuspendAllTasks>
 8001e14:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <netProcessLinkChange+0x184>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	221d      	movs	r2, #29
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4833      	ldr	r0, [pc, #204]	; (8001eec <netProcessLinkChange+0x1a8>)
 8001e20:	f019 f91c 	bl	801b05c <fwrite>
 8001e24:	f7fe fc17 	bl	8000656 <osResumeAllTasks>
 8001e28:	e01e      	b.n	8001e68 <netProcessLinkChange+0x124>
      }
      else if(interface->duplexMode == NIC_HALF_DUPLEX_MODE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d119      	bne.n	8001e68 <netProcessLinkChange+0x124>
      {
         //100BASE-TX
         TRACE_INFO("  Duplex mode = Half-Duplex\r\n");
 8001e34:	f7fe fc04 	bl	8000640 <osSuspendAllTasks>
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <netProcessLinkChange+0x184>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	221d      	movs	r2, #29
 8001e40:	2101      	movs	r1, #1
 8001e42:	482b      	ldr	r0, [pc, #172]	; (8001ef0 <netProcessLinkChange+0x1ac>)
 8001e44:	f019 f90a 	bl	801b05c <fwrite>
 8001e48:	f7fe fc05 	bl	8000656 <osResumeAllTasks>
 8001e4c:	e00c      	b.n	8001e68 <netProcessLinkChange+0x124>
      }
   }
   else
   {
      //Display link state
      TRACE_INFO("Link is down (%s)...\r\n", interface->name);
 8001e4e:	f7fe fbf7 	bl	8000640 <osSuspendAllTasks>
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <netProcessLinkChange+0x184>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68d8      	ldr	r0, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3310      	adds	r3, #16
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4925      	ldr	r1, [pc, #148]	; (8001ef4 <netProcessLinkChange+0x1b0>)
 8001e60:	f019 f89c 	bl	801af9c <fiprintf>
 8001e64:	f7fe fbf7 	bl	8000656 <osResumeAllTasks>
   IF_MIB_SET_TIME_TICKS(ifTable[interface->index].ifLastChange,
      osGetSystemTime() / 10);

#if (IPV4_SUPPORT == ENABLED)
   //Notify IPv4 of link state changes
   ipv4LinkChangeEvent(interface);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f006 fafd 	bl	8008468 <ipv4LinkChangeEvent>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Flush DNS cache
   dnsFlushCache(interface);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f005 f980 	bl	8007174 <dnsFlushCache>
#if (DNS_SD_SUPPORT == ENABLED)
   //Perform probing and announcing
   dnsSdLinkChangeEvent(interface->dnsSdContext);
#endif
   //Notify registered users of link state changes
   netInvokeLinkChangeCallback(interface, interface->linkState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f9fc 	bl	8002278 <netInvokeLinkChangeCallback>

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e018      	b.n	8001eb8 <netProcessLinkChange+0x174>
   {
      //Point to the current socket
      socket = socketTable + i;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f44f 720d 	mov.w	r2, #564	; 0x234
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <netProcessLinkChange+0x1b4>)
 8001e92:	4413      	add	r3, r2
 8001e94:	60bb      	str	r3, [r7, #8]

#if (TCP_SUPPORT == ENABLED)
      //Connection-oriented socket?
      if(socket->type == SOCKET_TYPE_STREAM)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <netProcessLinkChange+0x160>
      {
         tcpUpdateEvents(socket);
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f004 f88a 	bl	8005fb8 <tcpUpdateEvents>
      }
#endif

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d102      	bne.n	8001eb2 <netProcessLinkChange+0x16e>
      {
         udpUpdateEvents(socket);
 8001eac:	68b8      	ldr	r0, [r7, #8]
 8001eae:	f005 f835 	bl	8006f1c <udpUpdateEvents>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	d9e3      	bls.n	8001e86 <netProcessLinkChange+0x142>
      {
         rawSocketUpdateEvents(socket);
      }
#endif
   }
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000058 	.word	0x20000058
 8001ecc:	0801c378 	.word	0x0801c378
 8001ed0:	3b9aca00 	.word	0x3b9aca00
 8001ed4:	0801c390 	.word	0x0801c390
 8001ed8:	05f5e100 	.word	0x05f5e100
 8001edc:	0801c3ac 	.word	0x0801c3ac
 8001ee0:	00989680 	.word	0x00989680
 8001ee4:	0801c3c8 	.word	0x0801c3c8
 8001ee8:	0801c3e4 	.word	0x0801c3e4
 8001eec:	0801c400 	.word	0x0801c400
 8001ef0:	0801c420 	.word	0x0801c420
 8001ef4:	0801c440 	.word	0x0801c440
 8001ef8:	2000e83c 	.word	0x2000e83c

08001efc <netTask>:
/**
 * @brief TCP/IP events handling
 **/

void netTask(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
#if (NET_RTOS_SUPPORT == ENABLED)
   //Task prologue
   osEnterTask();

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001f02:	4851      	ldr	r0, [pc, #324]	; (8002048 <netTask+0x14c>)
 8001f04:	f7fe fc48 	bl	8000798 <osAcquireMutex>

   //The TCP/IP process is now running
   netTaskRunning = TRUE;
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <netTask+0x150>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	e018      	b.n	8001f46 <netTask+0x4a>
   {
      //Point to the current network interface
      interface = &netInterface[i];
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a4c      	ldr	r2, [pc, #304]	; (8002050 <netTask+0x154>)
 8001f20:	4413      	add	r3, r2
 8001f22:	607b      	str	r3, [r7, #4]

      //Check whether the interface is fully configured
      if(interface->configured)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <netTask+0x44>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <netTask+0x44>
         {
            interface->nicDriver->enableIrq(interface);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3301      	adds	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0e3      	beq.n	8001f14 <netTask+0x18>
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001f4c:	483e      	ldr	r0, [pc, #248]	; (8002048 <netTask+0x14c>)
 8001f4e:	f7fe fc32 	bl	80007b6 <osReleaseMutex>
   //Main loop
   while(1)
   {
#endif
      //Get current time
      time = osGetSystemTime();
 8001f52:	f7fe fc3d 	bl	80007d0 <osGetSystemTime>
 8001f56:	60f8      	str	r0, [r7, #12]

      //Compute the maximum blocking time when waiting for an event
      if(timeCompare(time, netTimestamp) < 0)
 8001f58:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <netTask+0x158>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da05      	bge.n	8001f70 <netTask+0x74>
         timeout = netTimestamp - time;
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <netTask+0x158>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e001      	b.n	8001f74 <netTask+0x78>
      else
         timeout = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]

      //Receive notifications when a frame has been received, or the
      //link state of any network interfaces has changed
      status = osWaitForEvent(&netEvent, timeout);
 8001f74:	6939      	ldr	r1, [r7, #16]
 8001f76:	4838      	ldr	r0, [pc, #224]	; (8002058 <netTask+0x15c>)
 8001f78:	f7fe fbc4 	bl	8000704 <osWaitForEvent>
 8001f7c:	60b8      	str	r0, [r7, #8]

      //Check whether the specified event is in signaled state
      if(status)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d04a      	beq.n	800201a <netTask+0x11e>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8001f84:	4830      	ldr	r0, [pc, #192]	; (8002048 <netTask+0x14c>)
 8001f86:	f7fe fc07 	bl	8000798 <osAcquireMutex>

         //Process events
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e03e      	b.n	800200e <netTask+0x112>
         {
            //Point to the current network interface
            interface = &netInterface[i];
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <netTask+0x154>)
 8001f9c:	4413      	add	r3, r2
 8001f9e:	607b      	str	r3, [r7, #4]

            //Check whether a NIC event is pending
            if(interface->nicEvent)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d015      	beq.n	8001fd4 <netTask+0xd8>
            {
               //Acknowledge the event by clearing the flag
               interface->nicEvent = FALSE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	675a      	str	r2, [r3, #116]	; 0x74

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00e      	beq.n	8001fd4 <netTask+0xd8>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
                  //Handle NIC events
                  interface->nicDriver->eventHandler(interface);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
               }
            }

            //Check whether a PHY event is pending
            if(interface->phyEvent)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d015      	beq.n	8002008 <netTask+0x10c>
            {
               //Acknowledge the event by clearing the flag
               interface->phyEvent = FALSE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	679a      	str	r2, [r3, #120]	; 0x78

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00e      	beq.n	8002008 <netTask+0x10c>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
                  //Handle PHY events
                  interface->phyDriver->eventHandler(interface);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3301      	adds	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0bd      	beq.n	8001f90 <netTask+0x94>
               }
            }
         }

         //Release exclusive access
         osReleaseMutex(&netMutex);
 8002014:	480c      	ldr	r0, [pc, #48]	; (8002048 <netTask+0x14c>)
 8002016:	f7fe fbce 	bl	80007b6 <osReleaseMutex>
      }

      //Get current time
      time = osGetSystemTime();
 800201a:	f7fe fbd9 	bl	80007d0 <osGetSystemTime>
 800201e:	60f8      	str	r0, [r7, #12]

      //Check current time
      if(timeCompare(time, netTimestamp) >= 0)
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <netTask+0x158>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	db92      	blt.n	8001f52 <netTask+0x56>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <netTask+0x14c>)
 800202e:	f7fe fbb3 	bl	8000798 <osAcquireMutex>
         //Handle periodic operations
         netTick();
 8002032:	f000 f813 	bl	800205c <netTick>
         //Release exclusive access
         osReleaseMutex(&netMutex);
 8002036:	4804      	ldr	r0, [pc, #16]	; (8002048 <netTask+0x14c>)
 8002038:	f7fe fbbd 	bl	80007b6 <osReleaseMutex>

         //Next event
         netTimestamp = time + NET_TICK_INTERVAL;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3364      	adds	r3, #100	; 0x64
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <netTask+0x158>)
 8002042:	6013      	str	r3, [r2, #0]
      time = osGetSystemTime();
 8002044:	e785      	b.n	8001f52 <netTask+0x56>
 8002046:	bf00      	nop
 8002048:	2000e460 	.word	0x2000e460
 800204c:	20000248 	.word	0x20000248
 8002050:	2000e464 	.word	0x2000e464
 8002054:	2000024c 	.word	0x2000024c
 8002058:	2000e458 	.word	0x2000e458

0800205c <netTick>:
/**
 * @brief Manage TCP/IP timers
 **/

void netTick(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
   uint_t i;

   //Increment tick counter
   nicTickCounter += NET_TICK_INTERVAL;
 8002062:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <netTick+0x148>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3364      	adds	r3, #100	; 0x64
 8002068:	4a4e      	ldr	r2, [pc, #312]	; (80021a4 <netTick+0x148>)
 800206a:	6013      	str	r3, [r2, #0]

   //Handle periodic operations such as polling the link state
   if(nicTickCounter >= NIC_TICK_INTERVAL)
 800206c:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <netTick+0x148>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002074:	d320      	bcc.n	80020b8 <netTick+0x5c>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	e017      	b.n	80020ac <netTick+0x50>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 800207c:	4a4a      	ldr	r2, [pc, #296]	; (80021a8 <netTick+0x14c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3388      	adds	r3, #136	; 0x88
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <netTick+0x4a>
            nicTick(&netInterface[i]);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	4a42      	ldr	r2, [pc, #264]	; (80021a8 <netTick+0x14c>)
 800209e:	4413      	add	r3, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fd82 	bl	8002baa <nicTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3301      	adds	r3, #1
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0e4      	beq.n	800207c <netTick+0x20>
      }

      //Reset tick counter
      nicTickCounter = 0;
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <netTick+0x148>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
   }

#if (PPP_SUPPORT == ENABLED)
   //Increment tick counter
   pppTickCounter += NET_TICK_INTERVAL;
 80020b8:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <netTick+0x150>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3364      	adds	r3, #100	; 0x64
 80020be:	4a3b      	ldr	r2, [pc, #236]	; (80021ac <netTick+0x150>)
 80020c0:	6013      	str	r3, [r2, #0]

   //Manage PPP related timers
   if(pppTickCounter >= PPP_TICK_INTERVAL)
 80020c2:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <netTick+0x150>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020ca:	d320      	bcc.n	800210e <netTick+0xb2>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	e017      	b.n	8002102 <netTick+0xa6>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 80020d2:	4a35      	ldr	r2, [pc, #212]	; (80021a8 <netTick+0x14c>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3388      	adds	r3, #136	; 0x88
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d009      	beq.n	80020fc <netTick+0xa0>
            pppTick(&netInterface[i]);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	4a2d      	ldr	r2, [pc, #180]	; (80021a8 <netTick+0x14c>)
 80020f4:	4413      	add	r3, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f00b fa92 	bl	800d620 <pppTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3301      	adds	r3, #1
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0e4      	beq.n	80020d2 <netTick+0x76>
      }

      //Reset tick counter
      pppTickCounter = 0;
 8002108:	4b28      	ldr	r3, [pc, #160]	; (80021ac <netTick+0x150>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   //Increment tick counter
   ipv4FragTickCounter += NET_TICK_INTERVAL;
 800210e:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <netTick+0x154>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3364      	adds	r3, #100	; 0x64
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <netTick+0x154>)
 8002116:	6013      	str	r3, [r2, #0]

   //Handle IPv4 fragment reassembly timeout
   if(ipv4FragTickCounter >= IPV4_FRAG_TICK_INTERVAL)
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <netTick+0x154>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002120:	d320      	bcc.n	8002164 <netTick+0x108>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	e017      	b.n	8002158 <netTick+0xfc>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8002128:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <netTick+0x14c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3388      	adds	r3, #136	; 0x88
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <netTick+0xf6>
            ipv4FragTick(&netInterface[i]);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <netTick+0x14c>)
 800214a:	4413      	add	r3, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f006 fe92 	bl	8008e76 <ipv4FragTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3301      	adds	r3, #1
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0e4      	beq.n	8002128 <netTick+0xcc>
      }

      //Reset tick counter
      ipv4FragTickCounter = 0;
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <netTick+0x154>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
   }
#endif

#if (TCP_SUPPORT == ENABLED)
   //Increment tick counter
   tcpTickCounter += NET_TICK_INTERVAL;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <netTick+0x158>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3364      	adds	r3, #100	; 0x64
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <netTick+0x158>)
 800216c:	6013      	str	r3, [r2, #0]

   //Manage TCP related timers
   if(tcpTickCounter >= TCP_TICK_INTERVAL)
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <netTick+0x158>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b63      	cmp	r3, #99	; 0x63
 8002174:	d904      	bls.n	8002180 <netTick+0x124>
   {
      //TCP timer handler
      tcpTick();
 8002176:	f004 f9c1 	bl	80064fc <tcpTick>
      //Reset tick counter
      tcpTickCounter = 0;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <netTick+0x158>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dnsTickCounter += NET_TICK_INTERVAL;
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <netTick+0x15c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3364      	adds	r3, #100	; 0x64
 8002186:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <netTick+0x15c>)
 8002188:	6013      	str	r3, [r2, #0]

   //Manage DNS cache
   if(dnsTickCounter >= DNS_TICK_INTERVAL)
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <netTick+0x15c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2bc7      	cmp	r3, #199	; 0xc7
 8002190:	d904      	bls.n	800219c <netTick+0x140>
   {
      //DNS timer handler
      dnsTick();
 8002192:	f005 f8c1 	bl	8007318 <dnsTick>
      //Reset tick counter
      dnsTickCounter = 0;
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <netTick+0x15c>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

      //Reset tick counter
      dnsSdTickCounter = 0;
   }
#endif
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000e838 	.word	0x2000e838
 80021a8:	2000e464 	.word	0x2000e464
 80021ac:	20010234 	.word	0x20010234
 80021b0:	20010230 	.word	0x20010230
 80021b4:	2000fe44 	.word	0x2000fe44
 80021b8:	2001022c 	.word	0x2001022c

080021bc <netGetDefaultInterface>:
 * @brief Get default network interface
 * @return Pointer to the default network interface to be used
 **/

NetInterface *netGetDefaultInterface(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
   //Default network interface
   return &netInterface[0];
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <netGetDefaultInterface+0x10>)
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	2000e464 	.word	0x2000e464

080021d0 <netGetRand>:
 * @brief Get a random value
 * @return Random value
 **/

uint32_t netGetRand(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
   uint32_t value;

   //Use a linear congruential generator (LCG) to update the state of the PRNG
   prngState *= 1103515245;
 80021d6:	4b26      	ldr	r3, [pc, #152]	; (8002270 <netGetRand+0xa0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a26      	ldr	r2, [pc, #152]	; (8002274 <netGetRand+0xa4>)
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	4a23      	ldr	r2, [pc, #140]	; (8002270 <netGetRand+0xa0>)
 80021e2:	6013      	str	r3, [r2, #0]
   prngState += 12345;
 80021e4:	4b22      	ldr	r3, [pc, #136]	; (8002270 <netGetRand+0xa0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80021ec:	3339      	adds	r3, #57	; 0x39
 80021ee:	4a20      	ldr	r2, [pc, #128]	; (8002270 <netGetRand+0xa0>)
 80021f0:	6013      	str	r3, [r2, #0]
   value = (prngState >> 16) & 0x07FF;
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <netGetRand+0xa0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021fc:	607b      	str	r3, [r7, #4]

   prngState *= 1103515245;
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <netGetRand+0xa0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <netGetRand+0xa4>)
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <netGetRand+0xa0>)
 800220a:	6013      	str	r3, [r2, #0]
   prngState += 12345;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <netGetRand+0xa0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002214:	3339      	adds	r3, #57	; 0x39
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <netGetRand+0xa0>)
 8002218:	6013      	str	r3, [r2, #0]
   value <<= 10;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	029b      	lsls	r3, r3, #10
 800221e:	607b      	str	r3, [r7, #4]
   value |= (prngState >> 16) & 0x03FF;
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <netGetRand+0xa0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4313      	orrs	r3, r2
 800222e:	607b      	str	r3, [r7, #4]

   prngState *= 1103515245;
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <netGetRand+0xa0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0f      	ldr	r2, [pc, #60]	; (8002274 <netGetRand+0xa4>)
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <netGetRand+0xa0>)
 800223c:	6013      	str	r3, [r2, #0]
   prngState += 12345;
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <netGetRand+0xa0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002246:	3339      	adds	r3, #57	; 0x39
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <netGetRand+0xa0>)
 800224a:	6013      	str	r3, [r2, #0]
   value <<= 10;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	029b      	lsls	r3, r3, #10
 8002250:	607b      	str	r3, [r7, #4]
   value |= (prngState >> 16) & 0x03FF;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <netGetRand+0xa0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4313      	orrs	r3, r2
 8002260:	607b      	str	r3, [r7, #4]

   //Return the random value
   return value;
 8002262:	687b      	ldr	r3, [r7, #4]
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	20000250 	.word	0x20000250
 8002274:	41c64e6d 	.word	0x41c64e6d

08002278 <netInvokeLinkChangeCallback>:
 * @param[in] interface Underlying network interface
 * @param[in] linkState Link state
 **/

void netInvokeLinkChangeCallback(NetInterface *interface, bool_t linkState)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
   uint_t i;
   LinkChangeCallbackDesc *entry;

   //Acquire exclusive access to the callback table
   osAcquireMutex(&callbackTableMutex);
 8002282:	4817      	ldr	r0, [pc, #92]	; (80022e0 <netInvokeLinkChangeCallback+0x68>)
 8002284:	f7fe fa88 	bl	8000798 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < NET_CALLBACK_TABLE_SIZE; i++)
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e01e      	b.n	80022cc <netInvokeLinkChangeCallback+0x54>
   {
      //Point to the current entry
      entry = &callbackTable[i];
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <netInvokeLinkChangeCallback+0x6c>)
 800229a:	4413      	add	r3, r2
 800229c:	60bb      	str	r3, [r7, #8]

      //Any registered callback?
      if(entry->callback != NULL)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00f      	beq.n	80022c6 <netInvokeLinkChangeCallback+0x4e>
      {
         //Check whether the network interface matches the current entry
         if(entry->interface == NULL || entry->interface == interface)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <netInvokeLinkChangeCallback+0x40>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <netInvokeLinkChangeCallback+0x4e>
         {
            //Invoke user callback function
            entry->callback(interface, linkState, entry->param);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	6892      	ldr	r2, [r2, #8]
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
   for(i = 0; i < NET_CALLBACK_TABLE_SIZE; i++)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d9dd      	bls.n	800228e <netInvokeLinkChangeCallback+0x16>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&callbackTableMutex);
 80022d2:	4803      	ldr	r0, [pc, #12]	; (80022e0 <netInvokeLinkChangeCallback+0x68>)
 80022d4:	f7fe fa6f 	bl	80007b6 <osReleaseMutex>
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000254 	.word	0x20000254
 80022e4:	20000258 	.word	0x20000258

080022e8 <memPoolInit>:
 * @brief Memory pool initialization
 * @return Error code
 **/

error_t memPoolInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
//Use fixed-size blocks allocation?
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   //Create a mutex to prevent simultaneous access to the memory pool
   if(!osCreateMutex(&memPoolMutex))
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <memPoolInit+0x30>)
 80022ee:	f7fe fa3a 	bl	8000766 <osCreateMutex>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <memPoolInit+0x14>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 80022f8:	2365      	movs	r3, #101	; 0x65
 80022fa:	e00b      	b.n	8002314 <memPoolInit+0x2c>
   }

   //Clear allocation table
   memset(memPoolAllocTable, 0, sizeof(memPoolAllocTable));
 80022fc:	2280      	movs	r2, #128	; 0x80
 80022fe:	2100      	movs	r1, #0
 8002300:	4806      	ldr	r0, [pc, #24]	; (800231c <memPoolInit+0x34>)
 8002302:	f018 ff31 	bl	801b168 <memset>

   //Clear statistics
   memPoolCurrentUsage = 0;
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <memPoolInit+0x38>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
   memPoolMaxUsage = 0;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <memPoolInit+0x3c>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
#endif

   //Successful initialization
   return NO_ERROR;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200002a0 	.word	0x200002a0
 800231c:	2000c2a4 	.word	0x2000c2a4
 8002320:	2000e830 	.word	0x2000e830
 8002324:	2000e834 	.word	0x2000e834

08002328 <memPoolAlloc>:
 * @param[in] size Bytes to allocate
 * @return Pointer to the allocated space or NULL if there is insufficient memory available
 **/

void *memPoolAlloc(size_t size)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   uint_t i;
#endif

   //Pointer to the allocated memory block
   void *p = NULL;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes...\r\n", size);

//Use fixed-size blocks allocation?
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   //Acquire exclusive access to the memory pool
   osAcquireMutex(&memPoolMutex);
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <memPoolAlloc+0xa0>)
 8002336:	f7fe fa2f 	bl	8000798 <osAcquireMutex>

   //Enforce block size
   if(size <= NET_MEM_POOL_BUFFER_SIZE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002340:	d82a      	bhi.n	8002398 <memPoolAlloc+0x70>
   {
      //Loop through allocation table
      for(i = 0; i < NET_MEM_POOL_BUFFER_COUNT; i++)
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e024      	b.n	8002392 <memPoolAlloc+0x6a>
      {
         //Check whether the current block is free
         if(!memPoolAllocTable[i])
 8002348:	4a20      	ldr	r2, [pc, #128]	; (80023cc <memPoolAlloc+0xa4>)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d11b      	bne.n	800238c <memPoolAlloc+0x64>
         {
            //Mark the current entry as used
            memPoolAllocTable[i] = TRUE;
 8002354:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <memPoolAlloc+0xa4>)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2101      	movs	r1, #1
 800235a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            //Point to the corresponding memory block
            p = memPool[i];
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	025b      	lsls	r3, r3, #9
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <memPoolAlloc+0xa8>)
 800236a:	4413      	add	r3, r2
 800236c:	60bb      	str	r3, [r7, #8]

            //Update statistics
            memPoolCurrentUsage++;
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <memPoolAlloc+0xac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <memPoolAlloc+0xac>)
 8002376:	6013      	str	r3, [r2, #0]
            //Maximum number of buffers that have been allocated so far
            memPoolMaxUsage = MAX(memPoolCurrentUsage, memPoolMaxUsage);
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <memPoolAlloc+0xb0>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <memPoolAlloc+0xac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4293      	cmp	r3, r2
 8002382:	bf38      	it	cc
 8002384:	4613      	movcc	r3, r2
 8002386:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <memPoolAlloc+0xb0>)
 8002388:	6013      	str	r3, [r2, #0]

            //Exit immediately
            break;
 800238a:	e005      	b.n	8002398 <memPoolAlloc+0x70>
      for(i = 0; i < NET_MEM_POOL_BUFFER_COUNT; i++)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3301      	adds	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b1f      	cmp	r3, #31
 8002396:	d9d7      	bls.n	8002348 <memPoolAlloc+0x20>
         }
      }
   }

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
 8002398:	480b      	ldr	r0, [pc, #44]	; (80023c8 <memPoolAlloc+0xa0>)
 800239a:	f7fe fa0c 	bl	80007b6 <osReleaseMutex>
   //Allocate a memory block
   p = osAllocMem(size);
#endif

   //Failed to allocate memory?
   if(!p)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <memPoolAlloc+0x94>
   {
      //Debug message
      TRACE_WARNING("Memory allocation failed!\r\n");
 80023a4:	f7fe f94c 	bl	8000640 <osSuspendAllTasks>
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <memPoolAlloc+0xb4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	221b      	movs	r2, #27
 80023b0:	2101      	movs	r1, #1
 80023b2:	480b      	ldr	r0, [pc, #44]	; (80023e0 <memPoolAlloc+0xb8>)
 80023b4:	f018 fe52 	bl	801b05c <fwrite>
 80023b8:	f7fe f94d 	bl	8000656 <osResumeAllTasks>
   }

   //Return a pointer to the allocated memory block
   return p;
 80023bc:	68bb      	ldr	r3, [r7, #8]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200002a0 	.word	0x200002a0
 80023cc:	2000c2a4 	.word	0x2000c2a4
 80023d0:	200002a4 	.word	0x200002a4
 80023d4:	2000e830 	.word	0x2000e830
 80023d8:	2000e834 	.word	0x2000e834
 80023dc:	20000058 	.word	0x20000058
 80023e0:	0801c458 	.word	0x0801c458

080023e4 <memPoolFree>:
 * @brief Release a memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void memPoolFree(void *p)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
//Use fixed-size blocks allocation?
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   uint_t i;

   //Acquire exclusive access to the memory pool
   osAcquireMutex(&memPoolMutex);
 80023ec:	4813      	ldr	r0, [pc, #76]	; (800243c <memPoolFree+0x58>)
 80023ee:	f7fe f9d3 	bl	8000798 <osAcquireMutex>

   //Loop through allocation table
   for(i = 0; i < NET_MEM_POOL_BUFFER_COUNT; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e017      	b.n	8002428 <memPoolFree+0x44>
   {
      if(memPool[i] == p)
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	025b      	lsls	r3, r3, #9
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <memPoolFree+0x5c>)
 8002404:	4413      	add	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d10a      	bne.n	8002422 <memPoolFree+0x3e>
      {
         //Mark the current block as free
         memPoolAllocTable[i] = FALSE;
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <memPoolFree+0x60>)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2100      	movs	r1, #0
 8002412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

         //Update statistics
         memPoolCurrentUsage--;
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <memPoolFree+0x64>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3b01      	subs	r3, #1
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <memPoolFree+0x64>)
 800241e:	6013      	str	r3, [r2, #0]

         //Exit immediately
         break;
 8002420:	e005      	b.n	800242e <memPoolFree+0x4a>
   for(i = 0; i < NET_MEM_POOL_BUFFER_COUNT; i++)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3301      	adds	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b1f      	cmp	r3, #31
 800242c:	d9e4      	bls.n	80023f8 <memPoolFree+0x14>
      }
   }

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
 800242e:	4803      	ldr	r0, [pc, #12]	; (800243c <memPoolFree+0x58>)
 8002430:	f7fe f9c1 	bl	80007b6 <osReleaseMutex>
#else
   //Release memory block
   osFreeMem(p);
#endif
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200002a0 	.word	0x200002a0
 8002440:	200002a4 	.word	0x200002a4
 8002444:	2000c2a4 	.word	0x2000c2a4
 8002448:	2000e830 	.word	0x2000e830

0800244c <netBufferAlloc>:
 * @return Pointer to the allocated buffer or NULL if there is
 *   insufficient memory available
 **/

NetBuffer *netBufferAlloc(size_t length)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
   error_t error;
   NetBuffer *buffer;

   //Allocate memory to hold the multi-part buffer
   buffer = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 8002454:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002458:	f7ff ff66 	bl	8002328 <memPoolAlloc>
 800245c:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(buffer == NULL)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <netBufferAlloc+0x1c>
      return NULL;
 8002464:	2300      	movs	r3, #0
 8002466:	e020      	b.n	80024aa <netBufferAlloc+0x5e>

   //The multi-part buffer consists of a single chunk
   buffer->chunkCount = 1;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
   buffer->maxChunkCount = MAX_CHUNK_COUNT;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2209      	movs	r2, #9
 8002472:	605a      	str	r2, [r3, #4]
   buffer->chunk[0].address = (uint8_t *) buffer + CHUNKED_BUFFER_HEADER_SIZE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	609a      	str	r2, [r3, #8]
   buffer->chunk[0].length = NET_MEM_POOL_BUFFER_SIZE - CHUNKED_BUFFER_HEADER_SIZE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 8002484:	819a      	strh	r2, [r3, #12]
   buffer->chunk[0].size = 0;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	81da      	strh	r2, [r3, #14]

   //Adjust the length of the buffer
   error = netBufferSetLength(buffer, length);
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f840 	bl	8002514 <netBufferSetLength>
 8002494:	4603      	mov	r3, r0
 8002496:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8002498:	897b      	ldrh	r3, [r7, #10]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <netBufferAlloc+0x5c>
   {
      //Clean up side effects
      netBufferFree(buffer);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f807 	bl	80024b2 <netBufferFree>
      //Report an failure
      return NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <netBufferAlloc+0x5e>
   }

   //Successful memory allocation
   return buffer;
 80024a8:	68fb      	ldr	r3, [r7, #12]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <netBufferFree>:
 * @brief Dispose a multi-part buffer
 * @param[in] buffer Pointer to the multi-part buffer to be released
 **/

void netBufferFree(NetBuffer *buffer)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   //Properly dispose data chunks
   netBufferSetLength(buffer, 0);
 80024ba:	2100      	movs	r1, #0
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f829 	bl	8002514 <netBufferSetLength>
   //Release multi-part buffer
   memPoolFree(buffer);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ff8e 	bl	80023e4 <memPoolFree>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <netBufferGetLength>:
 * @param[in] buffer Pointer to a multi-part buffer
 * @return Actual length in bytes
 **/

size_t netBufferGetLength(const NetBuffer *buffer)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Total length
   size_t length = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	e00c      	b.n	80024fc <netBufferGetLength+0x2c>
      length += buffer->chunk[i].length;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3301      	adds	r3, #1
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	889b      	ldrh	r3, [r3, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4413      	add	r3, r2
 80024f4:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount; i++)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3301      	adds	r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	429a      	cmp	r2, r3
 8002504:	d3ed      	bcc.n	80024e2 <netBufferGetLength+0x12>

   //Return total length
   return length;
 8002506:	68bb      	ldr	r3, [r7, #8]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <netBufferSetLength>:
 * @param[in] length Desired length
 * @return Error code
 **/

error_t netBufferSetLength(NetBuffer *buffer, size_t length)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t chunkCount;
   ChunkDesc *chunk;

   //Get the actual number of chunks
   chunkCount = buffer->chunkCount;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]

   //Loop through data chunks
   for(i = 0; i < chunkCount && length > 0; i++)
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	e02c      	b.n	8002584 <netBufferSetLength+0x70>
   {
      //Point to the chunk descriptor;
      chunk = &buffer->chunk[i];
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

      //Adjust the length of the current chunk when possible
      if(length <= chunk->length)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	889b      	ldrh	r3, [r3, #4]
 800253a:	461a      	mov	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4293      	cmp	r3, r2
 8002540:	d804      	bhi.n	800254c <netBufferSetLength+0x38>
      {
         chunk->length = length;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	809a      	strh	r2, [r3, #4]
 800254a:	e012      	b.n	8002572 <netBufferSetLength+0x5e>
      }
      else if(chunk->size > 0 && i == (chunkCount - 1))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88db      	ldrh	r3, [r3, #6]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <netBufferSetLength+0x5e>
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	3b01      	subs	r3, #1
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	429a      	cmp	r2, r3
 800255c:	d109      	bne.n	8002572 <netBufferSetLength+0x5e>
      {
         chunk->length = MIN(length, chunk->size);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	88db      	ldrh	r3, [r3, #6]
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4293      	cmp	r3, r2
 8002568:	bf28      	it	cs
 800256a:	4613      	movcs	r3, r2
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	809a      	strh	r2, [r3, #4]
      }

      //Prepare to process next chunk
      length -= chunk->length;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	889b      	ldrh	r3, [r3, #4]
 8002576:	461a      	mov	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	603b      	str	r3, [r7, #0]
   for(i = 0; i < chunkCount && length > 0; i++)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	429a      	cmp	r2, r3
 800258a:	d202      	bcs.n	8002592 <netBufferSetLength+0x7e>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1cb      	bne.n	800252a <netBufferSetLength+0x16>
   }

   //The size of the buffer should be decreased?
   if(!length)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d151      	bne.n	800263c <netBufferSetLength+0x128>
   {
      //Adjust the number of chunks
      buffer->chunkCount = i;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	601a      	str	r2, [r3, #0]

      //Delete unnecessary data chunks
      while(i < chunkCount)
 800259e:	e01a      	b.n	80025d6 <netBufferSetLength+0xc2>
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

         //Release previously allocated memory
         if(chunk->size > 0)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	88db      	ldrh	r3, [r3, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <netBufferSetLength+0xaa>
            memPoolFree(chunk->address);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff13 	bl	80023e4 <memPoolFree>

         //Mark the current chunk as free
         chunk->address = NULL;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
         chunk->length = 0;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	809a      	strh	r2, [r3, #4]
         chunk->size = 0;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	80da      	strh	r2, [r3, #6]

         //Next chunk
         i++;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
      while(i < chunkCount)
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d3e0      	bcc.n	80025a0 <netBufferSetLength+0x8c>
 80025de:	e035      	b.n	800264c <netBufferSetLength+0x138>
   {
      //Add as many chunks as necessary
      while(i < buffer->maxChunkCount && length > 0)
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3301      	adds	r3, #1
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

         //Allocate memory to hold a new chunk
         chunk->address = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 80025ec:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80025f0:	f7ff fe9a 	bl	8002328 <memPoolAlloc>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]
         //Failed to allocate memory?
         if(!chunk->address)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <netBufferSetLength+0xf2>
            return ERROR_OUT_OF_MEMORY;
 8002602:	2364      	movs	r3, #100	; 0x64
 8002604:	e028      	b.n	8002658 <netBufferSetLength+0x144>

         //Allocated memory
         chunk->size = NET_MEM_POOL_BUFFER_SIZE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800260c:	80da      	strh	r2, [r3, #6]
         //Actual length of the data chunk
         chunk->length = MIN(length, NET_MEM_POOL_BUFFER_SIZE);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002614:	bf28      	it	cs
 8002616:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	809a      	strh	r2, [r3, #4]

         //Prepare to process next chunk
         length -= chunk->length;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	889b      	ldrh	r3, [r3, #4]
 8002624:	461a      	mov	r2, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	603b      	str	r3, [r7, #0]
         buffer->chunkCount++;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]
         i++;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
      while(i < buffer->maxChunkCount && length > 0)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	429a      	cmp	r2, r3
 8002644:	d202      	bcs.n	800264c <netBufferSetLength+0x138>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1c9      	bne.n	80025e0 <netBufferSetLength+0xcc>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_OUT_OF_RESOURCES : NO_ERROR;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <netBufferSetLength+0x142>
 8002652:	2365      	movs	r3, #101	; 0x65
 8002654:	e000      	b.n	8002658 <netBufferSetLength+0x144>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <netBufferAt>:
 * @param[in] offset Offset from the beginning of the buffer
 * @return Pointer the data at the specified position
 **/

void *netBufferAt(const NetBuffer *buffer, size_t offset)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e01e      	b.n	80026ae <netBufferAt+0x4e>
   {
      //The data at the specified offset resides in the current chunk?
      if(offset < buffer->chunk[i].length)
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3301      	adds	r3, #1
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	889b      	ldrh	r3, [r3, #4]
 800267c:	461a      	mov	r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	4293      	cmp	r3, r2
 8002682:	d207      	bcs.n	8002694 <netBufferAt+0x34>
         return (uint8_t *) buffer->chunk[i].address + offset;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	3201      	adds	r2, #1
 800268a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	4413      	add	r3, r2
 8002692:	e012      	b.n	80026ba <netBufferAt+0x5a>

      //Jump to the next chunk
      offset -= buffer->chunk[i].length;
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3301      	adds	r3, #1
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	889b      	ldrh	r3, [r3, #4]
 80026a0:	461a      	mov	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	603b      	str	r3, [r7, #0]
   for(i = 0; i < buffer->chunkCount; i++)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3301      	adds	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d3db      	bcc.n	8002670 <netBufferAt+0x10>
   }

   //Invalid offset...
   return NULL;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <netBufferConcat>:
 * @return Error code
 **/

error_t netBufferConcat(NetBuffer *dest,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b087      	sub	sp, #28
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	603b      	str	r3, [r7, #0]
   uint_t i;
   uint_t j;

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e016      	b.n	8002708 <netBufferConcat+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	3301      	adds	r3, #1
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	889b      	ldrh	r3, [r3, #4]
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d312      	bcc.n	8002714 <netBufferConcat+0x4e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	3301      	adds	r3, #1
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	889b      	ldrh	r3, [r3, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	607b      	str	r3, [r7, #4]
   for(j = 0; j < src->chunkCount; j++)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	3301      	adds	r3, #1
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	429a      	cmp	r2, r3
 8002710:	d3e3      	bcc.n	80026da <netBufferConcat+0x14>
 8002712:	e000      	b.n	8002716 <netBufferConcat+0x50>
         break;
 8002714:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d301      	bcc.n	8002724 <netBufferConcat+0x5e>
      return ERROR_INVALID_PARAMETER;
 8002720:	2302      	movs	r3, #2
 8002722:	e065      	b.n	80027f0 <netBufferConcat+0x12a>

   //Position to the end of the destination data
   i = dest->chunkCount;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	617b      	str	r3, [r7, #20]

   //Copy data blocks
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 800272a:	e04d      	b.n	80027c8 <netBufferConcat+0x102>
   {
      //Copy current block
      dest->chunk[i].address = (uint8_t *) src->chunk[j].address + srcOffset;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	3201      	adds	r2, #1
 8002732:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	18d1      	adds	r1, r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	3201      	adds	r2, #1
 8002740:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      dest->chunk[i].length = src->chunk[j].length - srcOffset;
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	3301      	adds	r3, #1
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	889a      	ldrh	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	b29b      	uxth	r3, r3
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	b299      	uxth	r1, r3
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	460a      	mov	r2, r1
 8002764:	809a      	strh	r2, [r3, #4]
      dest->chunk[i].size = 0;
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	2200      	movs	r2, #0
 8002772:	80da      	strh	r2, [r3, #6]

      //Limit the number of bytes to copy
      if(length < dest->chunk[i].length)
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	889b      	ldrh	r3, [r3, #4]
 8002780:	461a      	mov	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	4293      	cmp	r3, r2
 8002786:	d208      	bcs.n	800279a <netBufferConcat+0xd4>
         dest->chunk[i].length = length;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	b299      	uxth	r1, r3
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	460a      	mov	r2, r1
 8002798:	809a      	strh	r2, [r3, #4]

      //Decrement the number of remaining bytes
      length -= dest->chunk[i].length;
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	889b      	ldrh	r3, [r3, #4]
 80027a6:	461a      	mov	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	603b      	str	r3, [r7, #0]
      //Increment the number of chunks
      dest->chunkCount++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]

      //Adjust variables
      srcOffset = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	607b      	str	r3, [r7, #4]
      i++;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3301      	adds	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
      j++;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	3301      	adds	r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <netBufferConcat+0x11c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d204      	bcs.n	80027e2 <netBufferConcat+0x11c>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d3a4      	bcc.n	800272c <netBufferConcat+0x66>
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	b29b      	uxth	r3, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <netBufferCopy>:
 * @return Error code
 **/

error_t netBufferCopy(NetBuffer *dest, size_t destOffset,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint8_t *p;
   uint8_t *q;

   //Skip the beginning of the source data
   for(i = 0; i < dest->chunkCount; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
 800280e:	e016      	b.n	800283e <netBufferCopy+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(destOffset < dest->chunk[i].length)
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	3301      	adds	r3, #1
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	889b      	ldrh	r3, [r3, #4]
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4293      	cmp	r3, r2
 8002822:	d312      	bcc.n	800284a <netBufferCopy+0x4e>
         break;

      //Jump to the next chunk
      destOffset -= dest->chunk[i].length;
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	889b      	ldrh	r3, [r3, #4]
 8002830:	461a      	mov	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount; i++)
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	3301      	adds	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	429a      	cmp	r2, r3
 8002846:	d3e3      	bcc.n	8002810 <netBufferCopy+0x14>
 8002848:	e000      	b.n	800284c <netBufferCopy+0x50>
         break;
 800284a:	bf00      	nop
   }

   //Invalid offset?
   if(i >= dest->chunkCount)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	429a      	cmp	r2, r3
 8002854:	d301      	bcc.n	800285a <netBufferCopy+0x5e>
      return ERROR_INVALID_PARAMETER;
 8002856:	2302      	movs	r3, #2
 8002858:	e096      	b.n	8002988 <netBufferCopy+0x18c>

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
 800285e:	e016      	b.n	800288e <netBufferCopy+0x92>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	3301      	adds	r3, #1
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	889b      	ldrh	r3, [r3, #4]
 800286c:	461a      	mov	r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	4293      	cmp	r3, r2
 8002872:	d312      	bcc.n	800289a <netBufferCopy+0x9e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	3301      	adds	r3, #1
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	889b      	ldrh	r3, [r3, #4]
 8002880:	461a      	mov	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	603b      	str	r3, [r7, #0]
   for(j = 0; j < src->chunkCount; j++)
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	3301      	adds	r3, #1
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a3a      	ldr	r2, [r7, #32]
 8002894:	429a      	cmp	r2, r3
 8002896:	d3e3      	bcc.n	8002860 <netBufferCopy+0x64>
 8002898:	e000      	b.n	800289c <netBufferCopy+0xa0>
         break;
 800289a:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d35c      	bcc.n	8002960 <netBufferCopy+0x164>
      return ERROR_INVALID_PARAMETER;
 80028a6:	2302      	movs	r3, #2
 80028a8:	e06e      	b.n	8002988 <netBufferCopy+0x18c>

   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
   {
      //Point to the first data byte
      p = (uint8_t *) dest->chunk[i].address + destOffset;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	3201      	adds	r2, #1
 80028b0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4413      	add	r3, r2
 80028b8:	61fb      	str	r3, [r7, #28]
      q = (uint8_t *) src->chunk[j].address + srcOffset;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a3a      	ldr	r2, [r7, #32]
 80028be:	3201      	adds	r2, #1
 80028c0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]

      //Compute the number of bytes to copy
      n = MIN(length, dest->chunk[i].length - destOffset);
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	3301      	adds	r3, #1
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	889b      	ldrh	r3, [r3, #4]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028de:	4293      	cmp	r3, r2
 80028e0:	bf28      	it	cs
 80028e2:	4613      	movcs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
      n = MIN(n, src->chunk[j].length - srcOffset);
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	3301      	adds	r3, #1
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	889b      	ldrh	r3, [r3, #4]
 80028f2:	461a      	mov	r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4293      	cmp	r3, r2
 80028fc:	bf28      	it	cs
 80028fe:	4613      	movcs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

      //Copy data
      memcpy(p, q, n);
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	69b9      	ldr	r1, [r7, #24]
 8002906:	69f8      	ldr	r0, [r7, #28]
 8002908:	f018 fc0a 	bl	801b120 <memcpy>

      destOffset += n;
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	4413      	add	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
      srcOffset += n;
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	4413      	add	r3, r2
 800291a:	603b      	str	r3, [r7, #0]
      length -= n;
 800291c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	633b      	str	r3, [r7, #48]	; 0x30

      if(destOffset >= dest->chunk[i].length)
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	3301      	adds	r3, #1
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	889b      	ldrh	r3, [r3, #4]
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4293      	cmp	r3, r2
 8002936:	d304      	bcc.n	8002942 <netBufferCopy+0x146>
      {
         destOffset = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
         i++;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	3301      	adds	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if(srcOffset >= src->chunk[j].length)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	3301      	adds	r3, #1
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	889b      	ldrh	r3, [r3, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4293      	cmp	r3, r2
 8002954:	d304      	bcc.n	8002960 <netBufferCopy+0x164>
      {
         srcOffset = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
         j++;
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	3301      	adds	r3, #1
 800295e:	623b      	str	r3, [r7, #32]
   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <netBufferCopy+0x17e>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296c:	429a      	cmp	r2, r3
 800296e:	d204      	bcs.n	800297a <netBufferCopy+0x17e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	429a      	cmp	r2, r3
 8002978:	d397      	bcc.n	80028aa <netBufferCopy+0xae>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	b29b      	uxth	r3, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	3728      	adds	r7, #40	; 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <netBufferAppend>:
 * @param[in] length Number of bytes in the user buffer
 * @return Error code
 **/

error_t netBufferAppend(NetBuffer *dest, const void *src, size_t length)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
   uint_t i;

   //Make sure there is enough space to add an extra chunk
   if(dest->chunkCount >= dest->maxChunkCount)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d301      	bcc.n	80029ac <netBufferAppend+0x1c>
      return ERROR_FAILURE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e01e      	b.n	80029ea <netBufferAppend+0x5a>

   //Position to the end of the buffer
   i = dest->chunkCount;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	617b      	str	r3, [r7, #20]

   //Insert a new chunk at the end of the list
   dest->chunk[i].address = (void *) src;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	3201      	adds	r2, #1
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
   dest->chunk[i].length = length;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	b299      	uxth	r1, r3
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	460a      	mov	r2, r1
 80029ce:	809a      	strh	r2, [r3, #4]
   dest->chunk[i].size = 0;
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3301      	adds	r3, #1
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	80da      	strh	r2, [r3, #6]

   //Increment the number of chunks
   dest->chunkCount++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <netBufferWrite>:
 * @return Actual number of bytes copied
 **/

size_t netBufferWrite(NetBuffer *dest,
   size_t destOffset, const void *src, size_t length)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b088      	sub	sp, #32
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes written
   totalLength = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]

   //Loop through data chunks
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	e03e      	b.n	8002a8c <netBufferWrite+0x96>
   {
      //Is there any data to copy in the current chunk?
      if(destOffset < dest->chunk[i].length)
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	3301      	adds	r3, #1
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	889b      	ldrh	r3, [r3, #4]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d227      	bcs.n	8002a72 <netBufferWrite+0x7c>
      {
         //Point to the first byte to be written
         p = (uint8_t *) dest->chunk[i].address + destOffset;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	3201      	adds	r2, #1
 8002a28:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4413      	add	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, dest->chunk[i].length - destOffset);
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3301      	adds	r3, #1
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	889b      	ldrh	r3, [r3, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1acb      	subs	r3, r1, r3
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	bf28      	it	cs
 8002a4e:	4613      	movcs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]

         //Copy data
         memcpy(p, src, n);
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f018 fb62 	bl	801b120 <memcpy>

         //Advance read pointer
         src = (uint8_t *) src + n;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	607b      	str	r3, [r7, #4]
         //Total number of bytes written
         totalLength += n;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4413      	add	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
         //Process the next block from the start
         destOffset = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	e009      	b.n	8002a86 <netBufferWrite+0x90>
      }
      else
      {
         //Skip the current chunk
         destOffset -= dest->chunk[i].length;
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3301      	adds	r3, #1
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	889b      	ldrh	r3, [r3, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d203      	bcs.n	8002a9e <netBufferWrite+0xa8>
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d3b7      	bcc.n	8002a0e <netBufferWrite+0x18>
      }
   }

   //Return the actual number of bytes written
   return totalLength;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <netBufferRead>:
 * @return Actual number of bytes copied
 **/

size_t netBufferRead(void *dest, const NetBuffer *src,
   size_t srcOffset, size_t length)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes copied
   totalLength = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]

   //Loop through data chunks
   for(i = 0; i < src->chunkCount && totalLength < length; i++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	e03e      	b.n	8002b3e <netBufferRead+0x96>
   {
      //Is there any data to copy from the current chunk?
      if(srcOffset < src->chunk[i].length)
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	889b      	ldrh	r3, [r3, #4]
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d227      	bcs.n	8002b24 <netBufferRead+0x7c>
      {
         //Point to the first byte to be read
         p = (uint8_t *) src->chunk[i].address + srcOffset;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	3201      	adds	r2, #1
 8002ada:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, src->chunk[i].length - srcOffset);
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	889b      	ldrh	r3, [r3, #4]
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	1ad2      	subs	r2, r2, r3
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1acb      	subs	r3, r1, r3
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bf28      	it	cs
 8002b00:	4613      	movcs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

         //Copy data
         memcpy(dest, p, n);
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f018 fb09 	bl	801b120 <memcpy>

         //Advance write pointer
         dest = (uint8_t *) dest + n;
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
         //Total number of bytes copied
         totalLength += n;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
         //Process the next block from the start
         srcOffset = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	e009      	b.n	8002b38 <netBufferRead+0x90>
      }
      else
      {
         //Skip the current chunk
         srcOffset -= src->chunk[i].length;
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	889b      	ldrh	r3, [r3, #4]
 8002b30:	461a      	mov	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	607b      	str	r3, [r7, #4]
   for(i = 0; i < src->chunkCount && totalLength < length; i++)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d203      	bcs.n	8002b50 <netBufferRead+0xa8>
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3b7      	bcc.n	8002ac0 <netBufferRead+0x18>
      }
   }

   //Return the actual number of bytes copied
   return totalLength;
 8002b50:	69bb      	ldr	r3, [r7, #24]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <nicGetPhysicalInterface>:
 * @param[in] interface Pointer to the network interface
 * @return Pointer to the physical interface
 **/

NetInterface *nicGetPhysicalInterface(NetInterface *interface)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
      interface = interface->parent;
   }
#endif

   //Return a pointer to the physical interface
   return interface;
 8002b62:	687b      	ldr	r3, [r7, #4]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <nicGetSwitchPort>:
 * @param[in] interface Pointer to the network interface
 * @return Switch port identifier
 **/

uint8_t nicGetSwitchPort(NetInterface *interface)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

   //Return switch port identifier
   return interface->port;
#else
   //Ethernet port multiplication (VLAN or tail tagging) is not supported
   return 0;
 8002b78:	2300      	movs	r3, #0
#endif
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <nicIsParentInterface>:
 * @param[in] parent Pointer to the parent interface
 * @return TRUE is an existing parent/child relationship is found, else FALSE
 **/

bool_t nicIsParentInterface(NetInterface *interface, NetInterface *parent)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]

   //Return TRUE is an existing parent/child relationship is found
   return flag;
#else
   //Virtual interfaces are not supported
   return (interface == parent) ? TRUE : FALSE;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
#endif
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <nicTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void nicTick(NetInterface *interface)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d013      	beq.n	8002be2 <nicTick+0x38>
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3

      //Handle periodic operations
      interface->nicDriver->tick(interface);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3

      //Re-enable interrupts if necessary
      if(interface->configured)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <nicTick+0x38>
      {
         interface->nicDriver->enableIrq(interface);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
      }
   }
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <nicSendPacket>:
 * @return Error code
 **/

error_t nicSendPacket(NetInterface *interface, const NetBuffer *buffer,
   size_t offset)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
   TRACE_DEBUG("Sending packet (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG_NET_BUFFER("  ", buffer, offset, length);
#endif

   //Check whether the interface is enabled for operation
   if(interface->configured && interface->nicDriver != NULL)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d033      	beq.n	8002c68 <nicSendPacket+0x7e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d02f      	beq.n	8002c68 <nicSendPacket+0x7e>
   {
      //Loopback interface?
      if(interface->nicDriver->type == NIC_TYPE_LOOPBACK)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d102      	bne.n	8002c18 <nicSendPacket+0x2e>
      {
         //The loopback interface is always available
         status = TRUE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	e007      	b.n	8002c28 <nicSendPacket+0x3e>
      }
      else
      {
         //Wait for the transmitter to be ready to send
         status = osWaitForEvent(&interface->nicTxEvent, NIC_MAX_BLOCKING_TIME);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3370      	adds	r3, #112	; 0x70
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fd fd6f 	bl	8000704 <osWaitForEvent>
 8002c26:	6138      	str	r0, [r7, #16]
      }

      //Check whether the specified event is in signaled state
      if(status)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d018      	beq.n	8002c60 <nicSendPacket+0x76>
      {
         //Disable interrupts
         interface->nicDriver->disableIrq(interface);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	4798      	blx	r3

         //Send Ethernet frame
         error = interface->nicDriver->sendPacket(interface, buffer, offset);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	4798      	blx	r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	82fb      	strh	r3, [r7, #22]

         //Re-enable interrupts if necessary
         if(interface->configured)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00c      	beq.n	8002c6e <nicSendPacket+0x84>
         {
            interface->nicDriver->enableIrq(interface);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	4798      	blx	r3
      if(status)
 8002c5e:	e006      	b.n	8002c6e <nicSendPacket+0x84>
         }
      }
      else
      {
         //The transmitter is busy
         error = ERROR_TRANSMITTER_BUSY;
 8002c60:	f240 1311 	movw	r3, #273	; 0x111
 8002c64:	82fb      	strh	r3, [r7, #22]
      if(status)
 8002c66:	e002      	b.n	8002c6e <nicSendPacket+0x84>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8002c68:	2307      	movs	r3, #7
 8002c6a:	82fb      	strh	r3, [r7, #22]
 8002c6c:	e000      	b.n	8002c70 <nicSendPacket+0x86>
      if(status)
 8002c6e:	bf00      	nop
   }

   //Return status code
   return error;
 8002c70:	8afb      	ldrh	r3, [r7, #22]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <nicProcessPacket>:
 * @param[in] packet Incoming packet to process
 * @param[in] length Total packet length
 **/

void nicProcessPacket(NetInterface *interface, uint8_t *packet, size_t length)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
   NicType type;

   //Check whether the interface is enabled for operation
   if(interface->configured)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <nicProcessPacket+0x42>
   {
      //Re-enable interrupts
      interface->nicDriver->enableIrq(interface);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	4798      	blx	r3
      //Debug message
      TRACE_DEBUG("Packet received (%" PRIuSIZE " bytes)...\r\n", length);
      TRACE_DEBUG_ARRAY("  ", packet, length);

      //Retrieve network interface type
      type = interface->nicDriver->type;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	75fb      	strb	r3, [r7, #23]
      }
      else
#endif
#if (PPP_SUPPORT == ENABLED)
      //PPP interface?
      if(type == NIC_TYPE_PPP)
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d104      	bne.n	8002cb2 <nicProcessPacket+0x38>
      {
         //Process incoming PPP frame
         pppProcessFrame(interface, packet, length);
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f00a fcd5 	bl	800d65c <pppProcessFrame>
      {
         //Silently discard the received packet
      }

      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	4798      	blx	r3
   }
}
 8002cbc:	bf00      	nop
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <nicNotifyLinkChange>:
 * @brief Process link state change notification
 * @param[in] interface Underlying network interface
 **/

void nicNotifyLinkChange(NetInterface *interface)
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
   uint_t i;
   NetInterface *physicalInterface;
   NetInterface *virtualInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff44 	bl	8002b5a <nicGetPhysicalInterface>
 8002cd2:	6138      	str	r0, [r7, #16]

   //Re-enable interrupts if necessary
   if(physicalInterface->configured)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <nicNotifyLinkChange+0x24>
   {
      physicalInterface->nicDriver->enableIrq(physicalInterface);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	6938      	ldr	r0, [r7, #16]
 8002ce6:	4798      	blx	r3
   }

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e02f      	b.n	8002d4e <nicNotifyLinkChange+0x8a>
   {
      //Point to the current interface
      virtualInterface = &netInterface[i];
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	; (8002d68 <nicNotifyLinkChange+0xa4>)
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

      //Check whether the current virtual interface is attached to the physical
      //interface
      if(nicIsParentInterface(virtualInterface, interface) &&
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff ff40 	bl	8002b86 <nicIsParentInterface>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01d      	beq.n	8002d48 <nicNotifyLinkChange+0x84>
         nicGetSwitchPort(virtualInterface) == nicGetSwitchPort(interface))
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff2f 	bl	8002b70 <nicGetSwitchPort>
 8002d12:	4603      	mov	r3, r0
 8002d14:	461c      	mov	r4, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ff2a 	bl	8002b70 <nicGetSwitchPort>
 8002d1c:	4603      	mov	r3, r0
      if(nicIsParentInterface(virtualInterface, interface) &&
 8002d1e:	429c      	cmp	r4, r3
 8002d20:	d112      	bne.n	8002d48 <nicNotifyLinkChange+0x84>
      {
         //Set operation mode
         virtualInterface->linkSpeed = interface->linkSpeed;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         virtualInterface->duplexMode = interface->duplexMode;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

         //Update link state
         virtualInterface->linkState = interface->linkState;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	67da      	str	r2, [r3, #124]	; 0x7c

         //Process link state change event
         netProcessLinkChange(virtualInterface);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7fe fffe 	bl	8001d44 <netProcessLinkChange>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0cc      	beq.n	8002cee <nicNotifyLinkChange+0x2a>
      }
   }

   //Disable interrupts
   physicalInterface->nicDriver->disableIrq(physicalInterface);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	6938      	ldr	r0, [r7, #16]
 8002d5c:	4798      	blx	r3
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	2000e464 	.word	0x2000e464

08002d6c <socketInit>:
 * @brief Socket related initialization
 * @return Error code
 **/

error_t socketInit(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
   uint_t i;
   uint_t j;

   //Initialize socket descriptors
   memset(socketTable, 0, sizeof(socketTable));
 8002d72:	f241 6208 	movw	r2, #5640	; 0x1608
 8002d76:	2100      	movs	r1, #0
 8002d78:	4820      	ldr	r0, [pc, #128]	; (8002dfc <socketInit+0x90>)
 8002d7a:	f018 f9f5 	bl	801b168 <memset>

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	e032      	b.n	8002dea <socketInit+0x7e>
   {
      //Set socket identifier
      socketTable[i].descriptor = i;
 8002d84:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <socketInit+0x90>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f44f 710d 	mov.w	r1, #564	; 0x234
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	601a      	str	r2, [r3, #0]

      //Create an event object to track socket events
      if(!osCreateEvent(&socketTable[i].event))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	3330      	adds	r3, #48	; 0x30
 8002da2:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <socketInit+0x90>)
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fc5f 	bl	800066c <osCreateEvent>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d117      	bne.n	8002de4 <socketInit+0x78>
      {
         //Clean up side effects
         for(j = 0; j < i; j++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	e00e      	b.n	8002dd8 <socketInit+0x6c>
            osDeleteEvent(&socketTable[j].event);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	3330      	adds	r3, #48	; 0x30
 8002dc6:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <socketInit+0x90>)
 8002dc8:	4413      	add	r3, r2
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fc6d 	bl	80006ac <osDeleteEvent>
         for(j = 0; j < i; j++)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d3ec      	bcc.n	8002dba <socketInit+0x4e>

         //Report an error
         return ERROR_OUT_OF_RESOURCES;
 8002de0:	2365      	movs	r3, #101	; 0x65
 8002de2:	e006      	b.n	8002df2 <socketInit+0x86>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3301      	adds	r3, #1
 8002de8:	607b      	str	r3, [r7, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b09      	cmp	r3, #9
 8002dee:	d9c9      	bls.n	8002d84 <socketInit+0x18>
      }
   }

   //Successful initialization
   return NO_ERROR;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000e83c 	.word	0x2000e83c

08002e00 <socketOpen>:
 * @param[in] protocol Protocol to be used
 * @return Handle referencing the new socket
 **/

Socket *socketOpen(uint_t type, uint_t protocol)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
   uint16_t port;
   Socket *socket;
   OsEvent event;

   //Initialize socket handle
   socket = NULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002e0e:	483c      	ldr	r0, [pc, #240]	; (8002f00 <socketOpen+0x100>)
 8002e10:	f7fd fcc2 	bl	8000798 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(type == SOCKET_TYPE_STREAM)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d108      	bne.n	8002e2c <socketOpen+0x2c>
   {
      //Always use TCP as underlying transport protocol
      protocol = SOCKET_IP_PROTO_TCP;
 8002e1a:	2306      	movs	r3, #6
 8002e1c:	603b      	str	r3, [r7, #0]
      //Get an ephemeral port number
      port = tcpGetDynamicPort();
 8002e1e:	f000 fac5 	bl	80033ac <tcpGetDynamicPort>
 8002e22:	4603      	mov	r3, r0
 8002e24:	82fb      	strh	r3, [r7, #22]
      //Continue processing
      error = NO_ERROR;
 8002e26:	2300      	movs	r3, #0
 8002e28:	83fb      	strh	r3, [r7, #30]
 8002e2a:	e00d      	b.n	8002e48 <socketOpen+0x48>
   }
   else
#endif
#if (UDP_SUPPORT == ENABLED)
   //Connectionless socket?
   if(type == SOCKET_TYPE_DGRAM)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d108      	bne.n	8002e44 <socketOpen+0x44>
   {
      //Always use UDP as underlying transport protocol
      protocol = SOCKET_IP_PROTO_UDP;
 8002e32:	2311      	movs	r3, #17
 8002e34:	603b      	str	r3, [r7, #0]
      //Get an ephemeral port number
      port = udpGetDynamicPort();
 8002e36:	f003 fd69 	bl	800690c <udpGetDynamicPort>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	82fb      	strh	r3, [r7, #22]
      //Continue processing
      error = NO_ERROR;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	83fb      	strh	r3, [r7, #30]
 8002e42:	e001      	b.n	8002e48 <socketOpen+0x48>
   }
   else
#endif
   {
      //The socket type is not supported
      error = ERROR_INVALID_PARAMETER;
 8002e44:	2302      	movs	r3, #2
 8002e46:	83fb      	strh	r3, [r7, #30]
   }

   //Check status code
   if(!error)
 8002e48:	8bfb      	ldrh	r3, [r7, #30]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d150      	bne.n	8002ef0 <socketOpen+0xf0>
   {
      //Loop through socket descriptors
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	e016      	b.n	8002e82 <socketOpen+0x82>
      {
         //Unused socket found?
         if(socketTable[i].type == SOCKET_TYPE_UNUSED)
 8002e54:	4a2b      	ldr	r2, [pc, #172]	; (8002f04 <socketOpen+0x104>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f44f 710d 	mov.w	r1, #564	; 0x234
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <socketOpen+0x7c>
         {
            //Save socket handle
            socket = &socketTable[i];
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <socketOpen+0x104>)
 8002e76:	4413      	add	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
            //We are done
            break;
 8002e7a:	e005      	b.n	8002e88 <socketOpen+0x88>
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	d9e5      	bls.n	8002e54 <socketOpen+0x54>
         }
      }

#if (TCP_SUPPORT == ENABLED)
      //No more sockets available?
      if(socket == NULL)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d102      	bne.n	8002e94 <socketOpen+0x94>
      {
         //Kill the oldest connection in the TIME-WAIT state
         //whenever the socket table runs out of space
         socket = tcpKillOldestConnection();
 8002e8e:	f000 fea5 	bl	8003bdc <tcpKillOldestConnection>
 8002e92:	6138      	str	r0, [r7, #16]
      }
#endif

      //Check whether the current entry is free
      if(socket != NULL)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d02a      	beq.n	8002ef0 <socketOpen+0xf0>
      {
         //Save socket descriptor
         i = socket->descriptor;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61bb      	str	r3, [r7, #24]
         //Save event object instance
         memcpy(&event, &socket->event, sizeof(OsEvent));
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	3334      	adds	r3, #52	; 0x34
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

         //Clear associated structure
         memset(socket, 0, sizeof(Socket));
 8002ea8:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002eac:	2100      	movs	r1, #0
 8002eae:	6938      	ldr	r0, [r7, #16]
 8002eb0:	f018 f95a 	bl	801b168 <memset>
         //Reuse event objects and avoid recreating them whenever possible
         memcpy(&socket->event, &event, sizeof(OsEvent));
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	3334      	adds	r3, #52	; 0x34
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]

         //Save socket characteristics
         socket->descriptor = i;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	601a      	str	r2, [r3, #0]
         socket->type = type;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	605a      	str	r2, [r3, #4]
         socket->protocol = protocol;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	609a      	str	r2, [r3, #8]
         socket->localPort = port;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	8afa      	ldrh	r2, [r7, #22]
 8002ed2:	831a      	strh	r2, [r3, #24]
         socket->timeout = INFINITE_DELAY;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28

#if (TCP_SUPPORT == ENABLED)
         socket->txBufferSize = MIN(TCP_DEFAULT_TX_BUFFER_SIZE, TCP_MAX_TX_BUFFER_SIZE);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f640 322c 	movw	r2, #2860	; 0xb2c
 8002ee2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
         socket->rxBufferSize = MIN(TCP_DEFAULT_RX_BUFFER_SIZE, TCP_MAX_RX_BUFFER_SIZE);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f640 322c 	movw	r2, #2860	; 0xb2c
 8002eec:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002ef0:	4803      	ldr	r0, [pc, #12]	; (8002f00 <socketOpen+0x100>)
 8002ef2:	f7fd fc60 	bl	80007b6 <osReleaseMutex>

   //Return a handle to the freshly created socket
   return socket;
 8002ef6:	693b      	ldr	r3, [r7, #16]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	2000e460 	.word	0x2000e460
 8002f04:	2000e83c 	.word	0x2000e83c

08002f08 <socketSetTimeout>:
 * @param[in] timeout Maximum time to wait
 * @return Error code
 **/

error_t socketSetTimeout(Socket *socket, systime_t timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
   //Make sure the socket handle is valid
   if(socket == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <socketSetTimeout+0x14>
      return ERROR_INVALID_PARAMETER;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e009      	b.n	8002f30 <socketSetTimeout+0x28>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002f1c:	4806      	ldr	r0, [pc, #24]	; (8002f38 <socketSetTimeout+0x30>)
 8002f1e:	f7fd fc3b 	bl	8000798 <osAcquireMutex>
   //Record timeout value
   socket->timeout = timeout;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <socketSetTimeout+0x30>)
 8002f2a:	f7fd fc44 	bl	80007b6 <osReleaseMutex>

   //No error to report
   return NO_ERROR;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	2000e460 	.word	0x2000e460

08002f3c <socketSetInterface>:
 * @param[in] interface Network interface to be used
 * @return Error code
 **/

error_t socketSetInterface(Socket *socket, NetInterface *interface)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
   //Make sure the socket handle is valid
   if(socket == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <socketSetInterface+0x14>
      return ERROR_INVALID_PARAMETER;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e003      	b.n	8002f58 <socketSetInterface+0x1c>

   //Explicitly associate the socket with the specified interface
   socket->interface = interface;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	60da      	str	r2, [r3, #12]

   //No error to report
   return NO_ERROR;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <socketConnect>:
 * @param[in] remotePort Remote port number that will be used to establish the connection
 * @return Error code
 **/

error_t socketConnect(Socket *socket, const IpAddr *remoteIpAddr, uint16_t remotePort)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //Check input parameters
   if(!socket || !remoteIpAddr)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <socketConnect+0x1a>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <socketConnect+0x1e>
      return ERROR_INVALID_PARAMETER;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e034      	b.n	8002fec <socketConnect+0x88>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10e      	bne.n	8002fa8 <socketConnect+0x44>
   {
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8002f8a:	481a      	ldr	r0, [pc, #104]	; (8002ff4 <socketConnect+0x90>)
 8002f8c:	f7fd fc04 	bl	8000798 <osAcquireMutex>

      //Establish TCP connection
      error = tcpConnect(socket, remoteIpAddr, remotePort);
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fa36 	bl	8003408 <tcpConnect>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	82fb      	strh	r3, [r7, #22]

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8002fa0:	4814      	ldr	r0, [pc, #80]	; (8002ff4 <socketConnect+0x90>)
 8002fa2:	f7fd fc08 	bl	80007b6 <osReleaseMutex>
 8002fa6:	e020      	b.n	8002fea <socketConnect+0x86>
   }
   else
#endif
   //Connectionless socket?
   if(socket->type == SOCKET_TYPE_DGRAM)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d10c      	bne.n	8002fca <socketConnect+0x66>
   {
      //Save port number and IP address of the remote host
      socket->remoteIpAddr = *remoteIpAddr;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	331c      	adds	r3, #28
 8002fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fba:	e883 0003 	stmia.w	r3, {r0, r1}
      socket->remotePort = remotePort;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	849a      	strh	r2, [r3, #36]	; 0x24
      //No error to report
      error = NO_ERROR;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	82fb      	strh	r3, [r7, #22]
 8002fc8:	e00f      	b.n	8002fea <socketConnect+0x86>
   }
   //Raw socket?
   else if(socket->type == SOCKET_TYPE_RAW_IP)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d109      	bne.n	8002fe6 <socketConnect+0x82>
   {
      //Save the IP address of the remote host
      socket->remoteIpAddr = *remoteIpAddr;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	331c      	adds	r3, #28
 8002fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fdc:	e883 0003 	stmia.w	r3, {r0, r1}
      //No error to report
      error = NO_ERROR;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	82fb      	strh	r3, [r7, #22]
 8002fe4:	e001      	b.n	8002fea <socketConnect+0x86>
   }
   //Socket type not supported...
   else
   {
      //Invalid socket type
      error = ERROR_INVALID_SOCKET;
 8002fe6:	23d0      	movs	r3, #208	; 0xd0
 8002fe8:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8002fea:	8afb      	ldrh	r3, [r7, #22]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000e460 	.word	0x2000e460

08002ff8 <socketSend>:
 * @return Error code
 **/

error_t socketSend(Socket *socket, const void *data,
   size_t length, size_t *written, uint_t flags)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af04      	add	r7, sp, #16
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
   //Use default remote IP address for connectionless or raw sockets
   return socketSendTo(socket, &socket->remoteIpAddr,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f103 011c 	add.w	r1, r3, #28
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	9302      	str	r3, [sp, #8]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f806 	bl	8003030 <socketSendTo>
 8003024:	4603      	mov	r3, r0
      socket->remotePort, data, length, written, flags);
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <socketSendTo>:
 * @return Error code
 **/

error_t socketSendTo(Socket *socket, const IpAddr *destIpAddr, uint16_t destPort,
   const void *data, size_t length, size_t *written, uint_t flags)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af04      	add	r7, sp, #16
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //No data has been transmitted yet
   if(written)
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <socketSendTo+0x1c>
      *written = 0;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

   //Make sure the socket handle is valid
   if(socket == NULL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <socketSendTo+0x26>
      return ERROR_INVALID_PARAMETER;
 8003052:	2302      	movs	r3, #2
 8003054:	e02a      	b.n	80030ac <socketSendTo+0x7c>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8003056:	4817      	ldr	r0, [pc, #92]	; (80030b4 <socketSendTo+0x84>)
 8003058:	f7fd fb9e 	bl	8000798 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10a      	bne.n	800307a <socketSendTo+0x4a>
   {
      //For connection-oriented sockets, target address is ignored
      error = tcpSend(socket, data, length, written, flags);
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	6a3a      	ldr	r2, [r7, #32]
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 faa8 	bl	80035c4 <tcpSend>
 8003074:	4603      	mov	r3, r0
 8003076:	82fb      	strh	r3, [r7, #22]
 8003078:	e014      	b.n	80030a4 <socketSendTo+0x74>
   }
   else
#endif
#if (UDP_SUPPORT == ENABLED)
   //Connectionless socket?
   if(socket->type == SOCKET_TYPE_DGRAM)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d10e      	bne.n	80030a0 <socketSendTo+0x70>
   {
      //Send UDP datagram
      error = udpSendDatagram(socket, destIpAddr, destPort, data, length,
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	9302      	str	r3, [sp, #8]
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f003 fdab 	bl	8006bf0 <udpSendDatagram>
 800309a:	4603      	mov	r3, r0
 800309c:	82fb      	strh	r3, [r7, #22]
 800309e:	e001      	b.n	80030a4 <socketSendTo+0x74>
   else
#endif
   //Socket type not supported...
   {
      //Invalid socket type
      error = ERROR_INVALID_SOCKET;
 80030a0:	23d0      	movs	r3, #208	; 0xd0
 80030a2:	82fb      	strh	r3, [r7, #22]
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80030a4:	4803      	ldr	r0, [pc, #12]	; (80030b4 <socketSendTo+0x84>)
 80030a6:	f7fd fb86 	bl	80007b6 <osReleaseMutex>

   //Return status code
   return error;
 80030aa:	8afb      	ldrh	r3, [r7, #22]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	2000e460 	.word	0x2000e460

080030b8 <socketReceive>:
 * @return Error code
 **/

error_t socketReceive(Socket *socket, void *data,
   size_t size, size_t *received, uint_t flags)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af04      	add	r7, sp, #16
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
   //For connection-oriented sockets, source and destination addresses are no use
   return socketReceiveEx(socket, NULL, NULL, NULL, data, size, received, flags);
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	9303      	str	r3, [sp, #12]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9302      	str	r3, [sp, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2300      	movs	r3, #0
 80030d8:	2200      	movs	r2, #0
 80030da:	2100      	movs	r1, #0
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f805 	bl	80030ec <socketReceiveEx>
 80030e2:	4603      	mov	r3, r0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <socketReceiveEx>:
 * @return Error code
 **/

error_t socketReceiveEx(Socket *socket, IpAddr *srcIpAddr, uint16_t *srcPort,
   IpAddr *destIpAddr, void *data, size_t size, size_t *received, uint_t flags)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
   error_t error;

   //Make sure the socket handle is valid
   if(socket == NULL)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <socketReceiveEx+0x18>
      return ERROR_INVALID_PARAMETER;
 8003100:	2302      	movs	r3, #2
 8003102:	e04a      	b.n	800319a <socketReceiveEx+0xae>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8003104:	4827      	ldr	r0, [pc, #156]	; (80031a4 <socketReceiveEx+0xb8>)
 8003106:	f7fd fb47 	bl	8000798 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d125      	bne.n	800315e <socketReceiveEx+0x72>
   {
      //Receive data
      error = tcpReceive(socket, data, size, received, flags);
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	6a39      	ldr	r1, [r7, #32]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fb15 	bl	800374c <tcpReceive>
 8003122:	4603      	mov	r3, r0
 8003124:	82fb      	strh	r3, [r7, #22]

      //Output parameters
      if(srcIpAddr)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <socketReceiveEx+0x4e>
         *srcIpAddr = socket->remoteIpAddr;
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	331c      	adds	r3, #28
 8003132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003136:	e882 0003 	stmia.w	r2, {r0, r1}
      if(srcPort)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <socketReceiveEx+0x5c>
         *srcPort = socket->remotePort;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	801a      	strh	r2, [r3, #0]
      if(destIpAddr)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d021      	beq.n	8003192 <socketReceiveEx+0xa6>
         *destIpAddr = socket->localIpAddr;
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3310      	adds	r3, #16
 8003154:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003158:	e882 0003 	stmia.w	r2, {r0, r1}
 800315c:	e019      	b.n	8003192 <socketReceiveEx+0xa6>
   }
   else
#endif
#if (UDP_SUPPORT == ENABLED)
   //Connectionless socket?
   if(socket->type == SOCKET_TYPE_DGRAM)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d110      	bne.n	8003188 <socketReceiveEx+0x9c>
   {
      //Receive UDP datagram
      error = udpReceiveDatagram(socket, srcIpAddr,
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	9303      	str	r3, [sp, #12]
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	9302      	str	r3, [sp, #8]
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f003 fe3b 	bl	8006df8 <udpReceiveDatagram>
 8003182:	4603      	mov	r3, r0
 8003184:	82fb      	strh	r3, [r7, #22]
 8003186:	e004      	b.n	8003192 <socketReceiveEx+0xa6>
   else
#endif
   //Socket type not supported...
   {
      //No data can be read
      *received = 0;
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
      //Invalid socket type
      error = ERROR_INVALID_SOCKET;
 800318e:	23d0      	movs	r3, #208	; 0xd0
 8003190:	82fb      	strh	r3, [r7, #22]
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8003192:	4804      	ldr	r0, [pc, #16]	; (80031a4 <socketReceiveEx+0xb8>)
 8003194:	f7fd fb0f 	bl	80007b6 <osReleaseMutex>

   //Return status code
   return error;
 8003198:	8afb      	ldrh	r3, [r7, #22]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000e460 	.word	0x2000e460

080031a8 <socketShutdown>:
 * @param[in] how Flag that describes what types of operation will no longer be allowed
 * @return Error code
 **/

error_t socketShutdown(Socket *socket, uint_t how)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
#if (TCP_SUPPORT == ENABLED)
   error_t error;

   //Make sure the socket handle is valid
   if(socket == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <socketShutdown+0x14>
      return ERROR_INVALID_PARAMETER;
 80031b8:	2302      	movs	r3, #2
 80031ba:	e01d      	b.n	80031f8 <socketShutdown+0x50>
   //Make sure the socket type is correct
   if(socket->type != SOCKET_TYPE_STREAM)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d001      	beq.n	80031c8 <socketShutdown+0x20>
      return ERROR_INVALID_SOCKET;
 80031c4:	23d0      	movs	r3, #208	; 0xd0
 80031c6:	e017      	b.n	80031f8 <socketShutdown+0x50>
   //Check flags
   if((how != SOCKET_SD_SEND) && (how != SOCKET_SD_RECEIVE) && (how != SOCKET_SD_BOTH))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d007      	beq.n	80031de <socketShutdown+0x36>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <socketShutdown+0x36>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d001      	beq.n	80031de <socketShutdown+0x36>
      return ERROR_INVALID_PARAMETER;
 80031da:	2302      	movs	r3, #2
 80031dc:	e00c      	b.n	80031f8 <socketShutdown+0x50>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80031de:	4808      	ldr	r0, [pc, #32]	; (8003200 <socketShutdown+0x58>)
 80031e0:	f7fd fada 	bl	8000798 <osAcquireMutex>

   //Graceful shutdown
   error = tcpShutdown(socket, how);
 80031e4:	6839      	ldr	r1, [r7, #0]
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fba2 	bl	8003930 <tcpShutdown>
 80031ec:	4603      	mov	r3, r0
 80031ee:	81fb      	strh	r3, [r7, #14]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80031f0:	4803      	ldr	r0, [pc, #12]	; (8003200 <socketShutdown+0x58>)
 80031f2:	f7fd fae0 	bl	80007b6 <osReleaseMutex>

   //Return status code
   return error;
 80031f6:	89fb      	ldrh	r3, [r7, #14]
#else
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	2000e460 	.word	0x2000e460

08003204 <socketClose>:
 * @brief Close an existing socket
 * @param[in] socket Handle identifying the socket to close
 **/

void socketClose(Socket *socket)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
   //Make sure the socket handle is valid
   if(socket == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d02e      	beq.n	8003270 <socketClose+0x6c>
      return;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8003212:	4819      	ldr	r0, [pc, #100]	; (8003278 <socketClose+0x74>)
 8003214:	f7fd fac0 	bl	8000798 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d102      	bne.n	8003226 <socketClose+0x22>
   {
      //Abort the current TCP connection
      tcpAbort(socket);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fc8f 	bl	8003b44 <tcpAbort>
   }
#endif
#if (UDP_SUPPORT == ENABLED || RAW_SOCKET_SUPPORT == ENABLED)
   //Connectionless socket or raw socket?
   if(socket->type == SOCKET_TYPE_DGRAM ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d007      	beq.n	800323e <socketClose+0x3a>
      socket->type == SOCKET_TYPE_RAW_IP ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
   if(socket->type == SOCKET_TYPE_DGRAM ||
 8003232:	2b03      	cmp	r3, #3
 8003234:	d003      	beq.n	800323e <socketClose+0x3a>
      socket->type == SOCKET_TYPE_RAW_ETH)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
      socket->type == SOCKET_TYPE_RAW_IP ||
 800323a:	2b04      	cmp	r3, #4
 800323c:	d114      	bne.n	8003268 <socketClose+0x64>
   {
      //Point to the first item in the receive queue
      SocketQueueItem *queueItem = socket->receiveQueue;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8003244:	60fb      	str	r3, [r7, #12]

      //Purge the receive queue
      while(queueItem)
 8003246:	e009      	b.n	800325c <socketClose+0x58>
      {
         //Keep track of the next item in the queue
         SocketQueueItem *nextQueueItem = queueItem->next;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]
         //Free previously allocated memory
         memPoolFree(queueItem->buffer);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff f8c6 	bl	80023e4 <memPoolFree>
         //Point to the next item
         queueItem = nextQueueItem;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	60fb      	str	r3, [r7, #12]
      while(queueItem)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f2      	bne.n	8003248 <socketClose+0x44>
      }

      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	605a      	str	r2, [r3, #4]
   }
#endif

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8003268:	4803      	ldr	r0, [pc, #12]	; (8003278 <socketClose+0x74>)
 800326a:	f7fd faa4 	bl	80007b6 <osReleaseMutex>
 800326e:	e000      	b.n	8003272 <socketClose+0x6e>
      return;
 8003270:	bf00      	nop
}
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	2000e460 	.word	0x2000e460

0800327c <getHostByName>:
 * @return Error code
 **/

error_t getHostByName(NetInterface *interface,
   const char_t *name, IpAddr *ipAddr, uint_t flags)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
   HostType type;
   HostnameResolver protocol;

   //Default address type depends on TCP/IP stack configuration
#if (IPV4_SUPPORT == ENABLED)
   type = HOST_TYPE_IPV4;
 800328a:	2310      	movs	r3, #16
 800328c:	757b      	strb	r3, [r7, #21]
   type = HOST_TYPE_ANY;
#endif

   //Default name resolution protocol depends on TCP/IP stack configuration
#if (DNS_CLIENT_SUPPORT == ENABLED)
   protocol = HOST_NAME_RESOLVER_DNS;
 800328e:	2301      	movs	r3, #1
 8003290:	753b      	strb	r3, [r7, #20]
#else
   protocol = HOST_NAME_RESOLVER_ANY;
#endif

   //Check parameters
   if(name == NULL || ipAddr == NULL)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <getHostByName+0x22>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <getHostByName+0x26>
      return ERROR_INVALID_PARAMETER;
 800329e:	2302      	movs	r3, #2
 80032a0:	e06f      	b.n	8003382 <getHostByName+0x106>

   //Use default network interface?
   if(interface == NULL)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <getHostByName+0x32>
      interface = netGetDefaultInterface();
 80032a8:	f7fe ff88 	bl	80021bc <netGetDefaultInterface>
 80032ac:	60f8      	str	r0, [r7, #12]

   //The specified name can be either an IP or a host name
   error = ipStringToAddr(name, ipAddr);
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	68b8      	ldr	r0, [r7, #8]
 80032b2:	f7fe fb88 	bl	80019c6 <ipStringToAddr>
 80032b6:	4603      	mov	r3, r0
 80032b8:	82fb      	strh	r3, [r7, #22]

   //Perform name resolution if necessary
   if(error)
 80032ba:	8afb      	ldrh	r3, [r7, #22]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d05f      	beq.n	8003380 <getHostByName+0x104>
   {
      //The user may provide a hint to choose between IPv4 and IPv6
      if(flags & HOST_TYPE_IPV4)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <getHostByName+0x54>
         type = HOST_TYPE_IPV4;
 80032ca:	2310      	movs	r3, #16
 80032cc:	757b      	strb	r3, [r7, #21]
 80032ce:	e006      	b.n	80032de <getHostByName+0x62>
      else if(flags & HOST_TYPE_IPV6)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <getHostByName+0x62>
         type = HOST_TYPE_IPV6;
 80032da:	2320      	movs	r3, #32
 80032dc:	757b      	strb	r3, [r7, #21]

      //The user may provide a hint to to select the desired protocol to be used
      if(flags & HOST_NAME_RESOLVER_DNS)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <getHostByName+0x72>
      {
         //Use DNS to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_DNS;
 80032e8:	2301      	movs	r3, #1
 80032ea:	753b      	strb	r3, [r7, #20]
 80032ec:	e03a      	b.n	8003364 <getHostByName+0xe8>
      }
      else if(flags & HOST_NAME_RESOLVER_MDNS)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <getHostByName+0x82>
      {
         //Use mDNS to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_MDNS;
 80032f8:	2302      	movs	r3, #2
 80032fa:	753b      	strb	r3, [r7, #20]
 80032fc:	e032      	b.n	8003364 <getHostByName+0xe8>
      }
      else if(flags & HOST_NAME_RESOLVER_NBNS)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <getHostByName+0x92>
      {
         //Use NBNS to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_NBNS;
 8003308:	2304      	movs	r3, #4
 800330a:	753b      	strb	r3, [r7, #20]
 800330c:	e02a      	b.n	8003364 <getHostByName+0xe8>
      }
      else if(flags & HOST_NAME_RESOLVER_LLMNR)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <getHostByName+0xa2>
      {
         //Use LLMNR to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_LLMNR;
 8003318:	2308      	movs	r3, #8
 800331a:	753b      	strb	r3, [r7, #20]
 800331c:	e022      	b.n	8003364 <getHostByName+0xe8>
      }
      else
      {
         //Retrieve the length of the host name to be resolved
         size_t n = strlen(name);
 800331e:	68b8      	ldr	r0, [r7, #8]
 8003320:	f7fc ff66 	bl	80001f0 <strlen>
 8003324:	6138      	str	r0, [r7, #16]

         //Select the most suitable protocol
         if(n >= 6 && !strcasecmp(name + n - 6, ".local"))
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d91b      	bls.n	8003364 <getHostByName+0xe8>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	3b06      	subs	r3, #6
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	4413      	add	r3, r2
 8003334:	4915      	ldr	r1, [pc, #84]	; (800338c <getHostByName+0x110>)
 8003336:	4618      	mov	r0, r3
 8003338:	f018 fabe 	bl	801b8b8 <strcasecmp>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <getHostByName+0xe8>
#if (MDNS_CLIENT_SUPPORT == ENABLED)
            //Use mDNS to resolve the specified host name
            protocol = HOST_NAME_RESOLVER_MDNS;
#endif
         }
         else if(n <= 15 && !strchr(name, '.') && type == HOST_TYPE_IPV4)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d80d      	bhi.n	8003364 <getHostByName+0xe8>
 8003348:	212e      	movs	r1, #46	; 0x2e
 800334a:	68b8      	ldr	r0, [r7, #8]
 800334c:	f018 fad2 	bl	801b8f4 <strchr>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <getHostByName+0xe8>
 8003356:	7d7b      	ldrb	r3, [r7, #21]
 8003358:	2b10      	cmp	r3, #16
 800335a:	d003      	beq.n	8003364 <getHostByName+0xe8>
#if (NBNS_CLIENT_SUPPORT == ENABLED)
            //Use NetBIOS Name Service to resolve the specified host name
            protocol = HOST_NAME_RESOLVER_NBNS;
#endif
         }
         else if(!strchr(name, '.'))
 800335c:	212e      	movs	r1, #46	; 0x2e
 800335e:	68b8      	ldr	r0, [r7, #8]
 8003360:	f018 fac8 	bl	801b8f4 <strchr>
         }
      }

#if (DNS_CLIENT_SUPPORT == ENABLED)
      //Use DNS protocol?
      if(protocol == HOST_NAME_RESOLVER_DNS)
 8003364:	7d3b      	ldrb	r3, [r7, #20]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <getHostByName+0x100>
      {
         //Perform host name resolution
         error = dnsResolve(interface, name, type, ipAddr);
 800336a:	7d7a      	ldrb	r2, [r7, #21]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f004 f85d 	bl	8007430 <dnsResolve>
 8003376:	4603      	mov	r3, r0
 8003378:	82fb      	strh	r3, [r7, #22]
 800337a:	e001      	b.n	8003380 <getHostByName+0x104>
      else
#endif
      //Invalid protocol?
      {
         //Report an error
         error = ERROR_INVALID_PARAMETER;
 800337c:	2302      	movs	r3, #2
 800337e:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 8003380:	8afb      	ldrh	r3, [r7, #22]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	0801c474 	.word	0x0801c474

08003390 <tcpInit>:
 * @brief TCP related initialization
 * @return Error code
 **/

error_t tcpInit(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   tcpDynamicPort = 0;
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <tcpInit+0x18>)
 8003396:	2200      	movs	r2, #0
 8003398:	801a      	strh	r2, [r3, #0]

   //Successful initialization
   return NO_ERROR;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000c324 	.word	0x2000c324

080033ac <tcpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t tcpGetDynamicPort(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
   uint_t port;

   //Retrieve current port number
   port = tcpDynamicPort;
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <tcpGetDynamicPort+0x58>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	607b      	str	r3, [r7, #4]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033be:	d303      	bcc.n	80033c8 <tcpGetDynamicPort+0x1c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c6:	d307      	bcc.n	80033d8 <tcpGetDynamicPort+0x2c>
   {
      //Generate a random port number
      port = SOCKET_EPHEMERAL_PORT_MIN + netGetRand() %
 80033c8:	f7fe ff02 	bl	80021d0 <netGetRand>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80033d2:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 80033d6:	607b      	str	r3, [r7, #4]
         (SOCKET_EPHEMERAL_PORT_MAX - SOCKET_EPHEMERAL_PORT_MIN + 1);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80033de:	4293      	cmp	r3, r2
 80033e0:	d806      	bhi.n	80033f0 <tcpGetDynamicPort+0x44>
   {
      //Increment port number
      tcpDynamicPort = port + 1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <tcpGetDynamicPort+0x58>)
 80033ec:	801a      	strh	r2, [r3, #0]
 80033ee:	e003      	b.n	80033f8 <tcpGetDynamicPort+0x4c>
   }
   else
   {
      //Wrap around if necessary
      tcpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <tcpGetDynamicPort+0x58>)
 80033f2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80033f6:	801a      	strh	r2, [r3, #0]
   }

   //Return an ephemeral port number
   return port;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	b29b      	uxth	r3, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	2000c324 	.word	0x2000c324

08003408 <tcpConnect>:
 * @param[in] remotePort Remote port number that will be used to establish the connection
 * @return Error code
 **/

error_t tcpConnect(Socket *socket, const IpAddr *remoteIpAddr, uint16_t remotePort)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]
   error_t error;
   uint_t event;

   //Check current TCP state
   if(socket->state == TCP_STATE_CLOSED)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 80b9 	bne.w	8003594 <tcpConnect+0x18c>
   {
      //Save port number and IP address of the remote host
      socket->remoteIpAddr = *remoteIpAddr;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	331c      	adds	r3, #28
 8003428:	e892 0003 	ldmia.w	r2, {r0, r1}
 800342c:	e883 0003 	stmia.w	r3, {r0, r1}
      socket->remotePort = remotePort;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	849a      	strh	r2, [r3, #36]	; 0x24

      //Select the source address and the relevant network interface
      //to use when establishing the connection
      error = ipSelectSourceAddr(&socket->interface,
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f103 000c 	add.w	r0, r3, #12
         &socket->remoteIpAddr, &socket->localIpAddr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f103 011c 	add.w	r1, r3, #28
      error = ipSelectSourceAddr(&socket->interface,
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3310      	adds	r3, #16
 8003446:	461a      	mov	r2, r3
 8003448:	f7fe f918 	bl	800167c <ipSelectSourceAddr>
 800344c:	4603      	mov	r3, r0
 800344e:	82fb      	strh	r3, [r7, #22]
      //Any error to report?
      if(error)
 8003450:	8afb      	ldrh	r3, [r7, #22]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <tcpConnect+0x52>
         return error;
 8003456:	8afb      	ldrh	r3, [r7, #22]
 8003458:	e0af      	b.n	80035ba <tcpConnect+0x1b2>

      //Make sure the source address is valid
      if(ipIsUnspecifiedAddr(&socket->localIpAddr))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3310      	adds	r3, #16
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe f92b 	bl	80016ba <ipIsUnspecifiedAddr>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <tcpConnect+0x68>
         return ERROR_NOT_CONFIGURED;
 800346a:	f240 2306 	movw	r3, #518	; 0x206
 800346e:	e0a4      	b.n	80035ba <tcpConnect+0x1b2>

      //The user owns the socket
      socket->ownedFlag = TRUE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	649a      	str	r2, [r3, #72]	; 0x48

      //Number of chunks that comprise the TX and the RX buffers
      socket->txBuffer.maxChunkCount = arraysize(socket->txBuffer.chunk);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	220f      	movs	r2, #15
 800347a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      socket->rxBuffer.maxChunkCount = arraysize(socket->rxBuffer.chunk);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	220f      	movs	r2, #15
 8003482:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

      //Allocate transmit buffer
      error = netBufferSetLength((NetBuffer *) &socket->txBuffer,
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f7ff f83d 	bl	8002514 <netBufferSetLength>
 800349a:	4603      	mov	r3, r0
 800349c:	82fb      	strh	r3, [r7, #22]
         socket->txBufferSize);

      //Allocate receive buffer
      if(!error)
 800349e:	8afb      	ldrh	r3, [r7, #22]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <tcpConnect+0xb4>
      {
         error = netBufferSetLength((NetBuffer *) &socket->rxBuffer,
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f503 7298 	add.w	r2, r3, #304	; 0x130
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f7ff f82e 	bl	8002514 <netBufferSetLength>
 80034b8:	4603      	mov	r3, r0
 80034ba:	82fb      	strh	r3, [r7, #22]
            socket->rxBufferSize);
      }

      //Failed to allocate memory?
      if(error)
 80034bc:	8afb      	ldrh	r3, [r7, #22]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <tcpConnect+0xc4>
      {
         //Free any previously allocated memory
         tcpDeleteControlBlock(socket);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f002 f910 	bl	80056e8 <tcpDeleteControlBlock>
         //Report an error to the caller
         return error;
 80034c8:	8afb      	ldrh	r3, [r7, #22]
 80034ca:	e076      	b.n	80035ba <tcpConnect+0x1b2>
      }

      //The SMSS is the size of the largest segment that the sender can transmit
      socket->smss = MIN(TCP_DEFAULT_MSS, TCP_MAX_MSS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f44f 7206 	mov.w	r2, #536	; 0x218
 80034d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      //The RMSS is the size of the largest segment the receiver is willing to accept
      socket->rmss = MIN(socket->rxBufferSize, TCP_MAX_MSS);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80034dc:	f240 5296 	movw	r2, #1430	; 0x596
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bf28      	it	cs
 80034e4:	4613      	movcs	r3, r2
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

      //An initial send sequence number is selected
      socket->iss = netGetRand();
 80034ee:	f7fe fe6f 	bl	80021d0 <netGetRand>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	659a      	str	r2, [r3, #88]	; 0x58

      //Initialize TCP control block
      socket->sndUna = socket->iss;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	661a      	str	r2, [r3, #96]	; 0x60
      socket->sndNxt = socket->iss + 1;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	665a      	str	r2, [r3, #100]	; 0x64
      socket->rcvUser = 0;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
      socket->rcvWnd = socket->rxBufferSize;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

      //Default retransmission timeout
      socket->rto = TCP_INITIAL_RTO;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003526:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Default congestion state
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      //Initial congestion window
      socket->cwnd = MIN(TCP_INITIAL_WINDOW * socket->smss, socket->txBufferSize);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800353e:	4619      	mov	r1, r3
 8003540:	460b      	mov	r3, r1
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	440b      	add	r3, r1
 8003546:	4293      	cmp	r3, r2
 8003548:	bf28      	it	cs
 800354a:	4613      	movcs	r3, r2
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      //Slow start threshold should be set arbitrarily high
      socket->ssthresh = UINT16_MAX;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800355a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      //Recover is set to the initial send sequence number
      socket->recover = socket->iss;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif

      //Send a SYN segment
      error = tcpSendSegment(socket, TCP_FLAG_SYN, socket->iss, 0, 0, TRUE);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800356c:	2301      	movs	r3, #1
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	2300      	movs	r3, #0
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2300      	movs	r3, #0
 8003576:	2102      	movs	r1, #2
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f001 fa21 	bl	80049c0 <tcpSendSegment>
 800357e:	4603      	mov	r3, r0
 8003580:	82fb      	strh	r3, [r7, #22]
      //Failed to send TCP segment?
      if(error)
 8003582:	8afb      	ldrh	r3, [r7, #22]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <tcpConnect+0x184>
         return error;
 8003588:	8afb      	ldrh	r3, [r7, #22]
 800358a:	e016      	b.n	80035ba <tcpConnect+0x1b2>

      //Switch to the SYN-SENT state
      tcpChangeState(socket, TCP_STATE_SYN_SENT);
 800358c:	2102      	movs	r1, #2
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f002 fced 	bl	8005f6e <tcpChangeState>
      MIB2_INC_COUNTER32(tcpGroup.tcpActiveOpens, 1);
      TCP_MIB_INC_COUNTER32(tcpActiveOpens, 1);
   }

   //Wait for the connection to be established
   event = tcpWaitForEvents(socket, SOCKET_EVENT_CONNECTED |
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	461a      	mov	r2, r3
 800359a:	2103      	movs	r1, #3
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f002 fe3d 	bl	800621c <tcpWaitForEvents>
 80035a2:	6138      	str	r0, [r7, #16]
      SOCKET_EVENT_CLOSED, socket->timeout);

   //Connection successfully established?
   if(event == SOCKET_EVENT_CONNECTED)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <tcpConnect+0x1a6>
      return NO_ERROR;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e005      	b.n	80035ba <tcpConnect+0x1b2>
   //Failed to establish connection?
   else if(event == SOCKET_EVENT_CLOSED)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d101      	bne.n	80035b8 <tcpConnect+0x1b0>
      return ERROR_CONNECTION_FAILED;
 80035b4:	23c9      	movs	r3, #201	; 0xc9
 80035b6:	e000      	b.n	80035ba <tcpConnect+0x1b2>
   //Timeout exception?
   else
      return ERROR_TIMEOUT;
 80035b8:	23dc      	movs	r3, #220	; 0xdc
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <tcpSend>:
 * @return Error code
 **/

error_t tcpSend(Socket *socket, const uint8_t *data,
   size_t length, size_t *written, uint_t flags)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint_t totalLength;
   uint_t event;

   //Check whether the socket is in the listening state
   if(socket->state == TCP_STATE_LISTEN)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <tcpSend+0x1c>
      return ERROR_NOT_CONNECTED;
 80035dc:	23cd      	movs	r3, #205	; 0xcd
 80035de:	e0b1      	b.n	8003744 <tcpSend+0x180>

   //Actual number of bytes written
   totalLength = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]

   //Send as much data as possible
   do
   {
      //Wait until there is more room in the send buffer
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_READY, socket->timeout);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	461a      	mov	r2, r3
 80035ea:	2104      	movs	r1, #4
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f002 fe15 	bl	800621c <tcpWaitForEvents>
 80035f2:	61b8      	str	r0, [r7, #24]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_TX_READY)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d001      	beq.n	80035fe <tcpSend+0x3a>
         return ERROR_TIMEOUT;
 80035fa:	23dc      	movs	r3, #220	; 0xdc
 80035fc:	e0a2      	b.n	8003744 <tcpSend+0x180>

      //Check current TCP state
      switch(socket->state)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003604:	3b04      	subs	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d812      	bhi.n	8003630 <tcpSend+0x6c>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <tcpSend+0x4c>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003641 	.word	0x08003641
 8003614:	08003641 	.word	0x08003641
 8003618:	0800362d 	.word	0x0800362d
 800361c:	0800362d 	.word	0x0800362d
 8003620:	0800362d 	.word	0x0800362d
 8003624:	0800362d 	.word	0x0800362d
 8003628:	0800362d 	.word	0x0800362d
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
      case TCP_STATE_CLOSING:
      case TCP_STATE_TIME_WAIT:
         //The connection is being closed
         return ERROR_CONNECTION_CLOSING;
 800362c:	23cb      	movs	r3, #203	; 0xcb
 800362e:	e089      	b.n	8003744 <tcpSend+0x180>

      //CLOSED state?
      default:
         //The connection was reset by remote side?
         return (socket->resetFlag) ? ERROR_CONNECTION_RESET : ERROR_NOT_CONNECTED;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <tcpSend+0x78>
 8003638:	23cc      	movs	r3, #204	; 0xcc
 800363a:	e083      	b.n	8003744 <tcpSend+0x180>
 800363c:	23cd      	movs	r3, #205	; 0xcd
 800363e:	e081      	b.n	8003744 <tcpSend+0x180>
         break;
 8003640:	bf00      	nop
      }

      //Determine the actual number of bytes in the send buffer
      n = socket->sndUser + socket->sndNxt - socket->sndUna;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003648:	461a      	mov	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364e:	441a      	add	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
      //Exit immediately if the transmission buffer is full (sanity check)
      if(n >= socket->txBufferSize)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	d301      	bcc.n	8003668 <tcpSend+0xa4>
         return ERROR_FAILURE;
 8003664:	2301      	movs	r3, #1
 8003666:	e06d      	b.n	8003744 <tcpSend+0x180>

      //Number of bytes available for writing
      n = socket->txBufferSize - n;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	617b      	str	r3, [r7, #20]
      //Calculate the number of bytes to copy at a time
      n = MIN(n, length - totalLength);
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4293      	cmp	r3, r2
 800367e:	bf28      	it	cs
 8003680:	4613      	movcs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

      //Any data to copy?
      if(n > 0)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d034      	beq.n	80036f4 <tcpSend+0x130>
      {
         //Copy user data to send buffer
         tcpWriteTxBuffer(socket, socket->sndNxt + socket->sndUser, data, n);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8003694:	1899      	adds	r1, r3, r2
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f002 fdec 	bl	8006278 <tcpWriteTxBuffer>

         //Update the number of data buffered but not yet sent
         socket->sndUser += n;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
         //Advance data pointer
         data += n;
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
         //Update byte counter
         totalLength += n;
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4413      	add	r3, r2
 80036c2:	61fb      	str	r3, [r7, #28]

         //Total number of data that have been written
         if(written != NULL)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <tcpSend+0x10c>
            *written = totalLength;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	601a      	str	r2, [r3, #0]

         //Update TX events
         tcpUpdateEvents(socket);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f002 fc71 	bl	8005fb8 <tcpUpdateEvents>

         //To avoid a deadlock, it is necessary to have a timeout to force
         //transmission of data, overriding the SWS avoidance algorithm. In
         //practice, this timeout should seldom occur (refer to RFC 1122,
         //section 4.2.3.4)
         if(socket->sndUser == n)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80036dc:	461a      	mov	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d107      	bne.n	80036f4 <tcpSend+0x130>
            tcpTimerStart(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80036ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 f8a6 	bl	8006840 <tcpTimerStart>
      }

      //The Nagle algorithm should be implemented to coalesce
      //short segments (refer to RFC 1122 4.2.3.4)
      tcpNagleAlgo(socket, flags);
 80036f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f002 fb2e 	bl	8005d58 <tcpNagleAlgo>

      //Send as much data as possible
   } while(totalLength < length);
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	f4ff af6f 	bcc.w	80035e4 <tcpSend+0x20>

   //The SOCKET_FLAG_WAIT_ACK flag causes the function to
   //wait for acknowledgment from the remote side
   if(flags & SOCKET_FLAG_WAIT_ACK)
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d018      	beq.n	8003742 <tcpSend+0x17e>
   {
      //Wait for the data to be acknowledged
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_ACKED, socket->timeout);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	461a      	mov	r2, r3
 8003716:	2110      	movs	r1, #16
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f002 fd7f 	bl	800621c <tcpWaitForEvents>
 800371e:	61b8      	str	r0, [r7, #24]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_TX_ACKED)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b10      	cmp	r3, #16
 8003724:	d001      	beq.n	800372a <tcpSend+0x166>
         return ERROR_TIMEOUT;
 8003726:	23dc      	movs	r3, #220	; 0xdc
 8003728:	e00c      	b.n	8003744 <tcpSend+0x180>

      //The connection was closed before an acknowledgment was received?
      if(socket->state != TCP_STATE_ESTABLISHED && socket->state != TCP_STATE_CLOSE_WAIT)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003730:	2b04      	cmp	r3, #4
 8003732:	d006      	beq.n	8003742 <tcpSend+0x17e>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800373a:	2b05      	cmp	r3, #5
 800373c:	d001      	beq.n	8003742 <tcpSend+0x17e>
         return ERROR_NOT_CONNECTED;
 800373e:	23cd      	movs	r3, #205	; 0xcd
 8003740:	e000      	b.n	8003744 <tcpSend+0x180>
   }

   //Successful write operation
   return NO_ERROR;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <tcpReceive>:
 * @return Error code
 **/

error_t tcpReceive(Socket *socket, uint8_t *data,
   size_t size, size_t *received, uint_t flags)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
   uint_t event;
   uint32_t seqNum;
   systime_t timeout;

   //Retrieve the break character code
   char_t c = LSB(flags);
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	76fb      	strb	r3, [r7, #27]
   //No data has been read yet
   *received = 0;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

   //Check whether the socket is in the listening state
   if(socket->state == TCP_STATE_LISTEN)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800376a:	2b01      	cmp	r3, #1
 800376c:	f040 80d2 	bne.w	8003914 <tcpReceive+0x1c8>
      return ERROR_NOT_CONNECTED;
 8003770:	23cd      	movs	r3, #205	; 0xcd
 8003772:	e0d8      	b.n	8003926 <tcpReceive+0x1da>

   //Read as much data as possible
   while(*received < size)
   {
      //The SOCKET_FLAG_DONT_WAIT enables non-blocking operation
      timeout = (flags & SOCKET_FLAG_DONT_WAIT) ? 0 : socket->timeout;
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <tcpReceive+0x38>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	e000      	b.n	8003786 <tcpReceive+0x3a>
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
      //Wait for data to be available for reading
      event = tcpWaitForEvents(socket, SOCKET_EVENT_RX_READY, timeout);
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	2140      	movs	r1, #64	; 0x40
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f002 fd45 	bl	800621c <tcpWaitForEvents>
 8003792:	6138      	str	r0, [r7, #16]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_RX_READY)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d001      	beq.n	800379e <tcpReceive+0x52>
         return ERROR_TIMEOUT;
 800379a:	23dc      	movs	r3, #220	; 0xdc
 800379c:	e0c3      	b.n	8003926 <tcpReceive+0x1da>

      //Check current TCP state
      switch(socket->state)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037a4:	3b04      	subs	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d82f      	bhi.n	800380a <tcpReceive+0xbe>
 80037aa:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <tcpReceive+0x64>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	080037cd 	.word	0x080037cd
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037cd 	.word	0x080037cd
 80037c4:	080037dd 	.word	0x080037dd
 80037c8:	080037dd 	.word	0x080037dd
      //ESTABLISHED, FIN-WAIT-1 or FIN-WAIT-2 state?
      case TCP_STATE_ESTABLISHED:
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
         //Sequence number of the first byte to read
         seqNum = socket->rcvNxt - socket->rcvUser;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	f8b2 207c 	ldrh.w	r2, [r2, #124]	; 0x7c
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	61fb      	str	r3, [r7, #28]
         //Data is available in the receive buffer
         break;
 80037da:	e039      	b.n	8003850 <tcpReceive+0x104>
      case TCP_STATE_CLOSE_WAIT:
      case TCP_STATE_LAST_ACK:
      case TCP_STATE_CLOSING:
      case TCP_STATE_TIME_WAIT:
         //The user must be satisfied with data already on hand
         if(!socket->rcvUser)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d108      	bne.n	80037f8 <tcpReceive+0xac>
         {
            if(*received > 0)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <tcpReceive+0xa6>
               return NO_ERROR;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e099      	b.n	8003926 <tcpReceive+0x1da>
            else
               return ERROR_END_OF_STREAM;
 80037f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f6:	e096      	b.n	8003926 <tcpReceive+0x1da>
         }

         //Sequence number of the first byte to read
         seqNum = (socket->rcvNxt - 1) - socket->rcvUser;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	f8b2 207c 	ldrh.w	r2, [r2, #124]	; 0x7c
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	3b01      	subs	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
         //Data is available in the receive buffer
         break;
 8003808:	e022      	b.n	8003850 <tcpReceive+0x104>

      //CLOSED state?
      default:
         //The connection was reset by remote side?
         if(socket->resetFlag)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <tcpReceive+0xca>
            return ERROR_CONNECTION_RESET;
 8003812:	23cc      	movs	r3, #204	; 0xcc
 8003814:	e087      	b.n	8003926 <tcpReceive+0x1da>
         //The connection has not yet been established?
         if(!socket->closedFlag)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <tcpReceive+0xd6>
            return ERROR_NOT_CONNECTED;
 800381e:	23cd      	movs	r3, #205	; 0xcd
 8003820:	e081      	b.n	8003926 <tcpReceive+0x1da>

         //The user must be satisfied with data already on hand
         if(!socket->rcvUser)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d108      	bne.n	800383e <tcpReceive+0xf2>
         {
            if(*received > 0)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <tcpReceive+0xec>
               return NO_ERROR;
 8003834:	2300      	movs	r3, #0
 8003836:	e076      	b.n	8003926 <tcpReceive+0x1da>
            else
               return ERROR_END_OF_STREAM;
 8003838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800383c:	e073      	b.n	8003926 <tcpReceive+0x1da>
         }

         //Sequence number of the first byte to read
         seqNum = (socket->rcvNxt - 1) - socket->rcvUser;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	f8b2 207c 	ldrh.w	r2, [r2, #124]	; 0x7c
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	3b01      	subs	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
         //Data is available in the receive buffer
         break;
 800384e:	bf00      	nop
      }

      //Sanity check
      if(!socket->rcvUser)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <tcpReceive+0x112>
         return ERROR_FAILURE;
 800385a:	2301      	movs	r3, #1
 800385c:	e063      	b.n	8003926 <tcpReceive+0x1da>

      //Calculate the number of bytes to read at a time
      n = MIN(socket->rcvUser, size - *received);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	f8b2 207c 	ldrh.w	r2, [r2, #124]	; 0x7c
 800386c:	4293      	cmp	r3, r2
 800386e:	bf28      	it	cs
 8003870:	4613      	movcs	r3, r2
 8003872:	623b      	str	r3, [r7, #32]
      //Copy data from circular buffer
      tcpReadRxBuffer(socket, seqNum, data, n);
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	69f9      	ldr	r1, [r7, #28]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f002 fde6 	bl	800644c <tcpReadRxBuffer>

      //Read data until a break character is encountered?
      if(flags & SOCKET_FLAG_BREAK_CHAR)
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d017      	beq.n	80038ba <tcpReceive+0x16e>
      {
         //Search for the specified break character
         for(i = 0; i < n && data[i] != c; i++);
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	e002      	b.n	8003896 <tcpReceive+0x14a>
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	3301      	adds	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
 8003896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	429a      	cmp	r2, r3
 800389c:	d206      	bcs.n	80038ac <tcpReceive+0x160>
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	4413      	add	r3, r2
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	7efa      	ldrb	r2, [r7, #27]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1f1      	bne.n	8003890 <tcpReceive+0x144>
         //Adjust the number of data to read
         n = MIN(n, i + 1);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	3301      	adds	r3, #1
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	4293      	cmp	r3, r2
 80038b4:	bf28      	it	cs
 80038b6:	4613      	movcs	r3, r2
 80038b8:	623b      	str	r3, [r7, #32]
      }

      //Total number of data that have been read
      *received += n;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	441a      	add	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]
      //Remaining data still available in the receive buffer
      socket->rcvUser -= n;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

      //Update the receive window
      tcpUpdateReceiveWindow(socket);
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f002 f8e2 	bl	8005aa4 <tcpUpdateReceiveWindow>
      //Update RX event state
      tcpUpdateEvents(socket);
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f002 fb69 	bl	8005fb8 <tcpUpdateEvents>

      //The SOCKET_FLAG_BREAK_CHAR flag causes the function to stop reading
      //data as soon as the specified break character is encountered
      if(flags & SOCKET_FLAG_BREAK_CHAR)
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <tcpReceive+0x1b6>
      {
         //Check whether a break character has been found
         if(data[n - 1] == c)
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	4413      	add	r3, r2
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	7efa      	ldrb	r2, [r7, #27]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d105      	bne.n	800390c <tcpReceive+0x1c0>
            break;
 8003900:	e010      	b.n	8003924 <tcpReceive+0x1d8>
      }
      //The SOCKET_FLAG_WAIT_ALL flag causes the function to return
      //only when the requested number of bytes have been read
      else if(!(flags & SOCKET_FLAG_WAIT_ALL))
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <tcpReceive+0x1d6>
      {
         break;
      }

      //Advance data pointer
      data += n;
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	4413      	add	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
   while(*received < size)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	f63f af2a 	bhi.w	8003774 <tcpReceive+0x28>
 8003920:	e000      	b.n	8003924 <tcpReceive+0x1d8>
         break;
 8003922:	bf00      	nop
   }

   //Successful read operation
   return NO_ERROR;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3728      	adds	r7, #40	; 0x28
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop

08003930 <tcpShutdown>:
 * @param[in] how Flag that describes what types of operation will no longer be allowed
 * @return Error code
 **/

error_t tcpShutdown(Socket *socket, uint_t how)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af02      	add	r7, sp, #8
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t event;

   //Disable transmission?
   if(how == SOCKET_SD_SEND || how == SOCKET_SD_BOTH)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d003      	beq.n	8003948 <tcpShutdown+0x18>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	f040 80bb 	bne.w	8003abe <tcpShutdown+0x18e>
   {
      //Check current state
      switch(socket->state)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800394e:	2b09      	cmp	r3, #9
 8003950:	f200 80b7 	bhi.w	8003ac2 <tcpShutdown+0x192>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <tcpShutdown+0x2c>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003985 	.word	0x08003985
 8003960:	08003985 	.word	0x08003985
 8003964:	08003ac3 	.word	0x08003ac3
 8003968:	08003989 	.word	0x08003989
 800396c:	08003989 	.word	0x08003989
 8003970:	08003a17 	.word	0x08003a17
 8003974:	08003aa5 	.word	0x08003aa5
 8003978:	08003aa5 	.word	0x08003aa5
 800397c:	08003ac3 	.word	0x08003ac3
 8003980:	08003aa5 	.word	0x08003aa5
      {
      //CLOSED or LISTEN state?
      case TCP_STATE_CLOSED:
      case TCP_STATE_LISTEN:
         //The connection does not exist
         return ERROR_NOT_CONNECTED;
 8003984:	23cd      	movs	r3, #205	; 0xcd
 8003986:	e0d8      	b.n	8003b3a <tcpShutdown+0x20a>

      //SYN-RECEIVED or ESTABLISHED state?
      case TCP_STATE_SYN_RECEIVED:
      case TCP_STATE_ESTABLISHED:
         //Flush the send buffer
         error = tcpSend(socket, NULL, 0, NULL, SOCKET_FLAG_NO_DELAY);
 8003988:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2300      	movs	r3, #0
 8003990:	2200      	movs	r2, #0
 8003992:	2100      	movs	r1, #0
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fe15 	bl	80035c4 <tcpSend>
 800399a:	4603      	mov	r3, r0
 800399c:	817b      	strh	r3, [r7, #10]
         //Any error to report?
         if(error)
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <tcpShutdown+0x78>
            return error;
 80039a4:	897b      	ldrh	r3, [r7, #10]
 80039a6:	e0c8      	b.n	8003b3a <tcpShutdown+0x20a>

         //Make sure all the data has been sent out
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_DONE, socket->timeout);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	461a      	mov	r2, r3
 80039ae:	2108      	movs	r1, #8
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f002 fc33 	bl	800621c <tcpWaitForEvents>
 80039b6:	60f8      	str	r0, [r7, #12]
         //Timeout error?
         if(event != SOCKET_EVENT_TX_DONE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d001      	beq.n	80039c2 <tcpShutdown+0x92>
            return ERROR_TIMEOUT;
 80039be:	23dc      	movs	r3, #220	; 0xdc
 80039c0:	e0bb      	b.n	8003b3a <tcpShutdown+0x20a>

         //Send a FIN segment
         error = tcpSendSegment(socket, TCP_FLAG_FIN | TCP_FLAG_ACK,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80039ca:	2301      	movs	r3, #1
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	2300      	movs	r3, #0
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	460b      	mov	r3, r1
 80039d4:	2111      	movs	r1, #17
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fff2 	bl	80049c0 <tcpSendSegment>
 80039dc:	4603      	mov	r3, r0
 80039de:	817b      	strh	r3, [r7, #10]
            socket->sndNxt, socket->rcvNxt, 0, TRUE);
         //Failed to send FIN segment?
         if(error)
 80039e0:	897b      	ldrh	r3, [r7, #10]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <tcpShutdown+0xba>
            return error;
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	e0a7      	b.n	8003b3a <tcpShutdown+0x20a>

         //Sequence number expected to be received
         socket->sndNxt++;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	665a      	str	r2, [r3, #100]	; 0x64
         //Switch to the FIN-WAIT1 state
         tcpChangeState(socket, TCP_STATE_FIN_WAIT_1);
 80039f4:	2107      	movs	r1, #7
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f002 fab9 	bl	8005f6e <tcpChangeState>

         //Wait for the FIN to be acknowledged
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN, socket->timeout);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	461a      	mov	r2, r3
 8003a02:	2120      	movs	r1, #32
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f002 fc09 	bl	800621c <tcpWaitForEvents>
 8003a0a:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_TX_SHUTDOWN)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d059      	beq.n	8003ac6 <tcpShutdown+0x196>
            return ERROR_TIMEOUT;
 8003a12:	23dc      	movs	r3, #220	; 0xdc
 8003a14:	e091      	b.n	8003b3a <tcpShutdown+0x20a>
         break;

      //CLOSE-WAIT state?
      case TCP_STATE_CLOSE_WAIT:
         //Flush the send buffer
         error = tcpSend(socket, NULL, 0, NULL, SOCKET_FLAG_NO_DELAY);
 8003a16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fdce 	bl	80035c4 <tcpSend>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	817b      	strh	r3, [r7, #10]
         //Any error to report?
         if(error)
 8003a2c:	897b      	ldrh	r3, [r7, #10]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <tcpShutdown+0x106>
            return error;
 8003a32:	897b      	ldrh	r3, [r7, #10]
 8003a34:	e081      	b.n	8003b3a <tcpShutdown+0x20a>

         //Make sure all the data has been sent out
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_DONE, socket->timeout);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2108      	movs	r1, #8
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f002 fbec 	bl	800621c <tcpWaitForEvents>
 8003a44:	60f8      	str	r0, [r7, #12]
         //Timeout error?
         if(event != SOCKET_EVENT_TX_DONE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d001      	beq.n	8003a50 <tcpShutdown+0x120>
            return ERROR_TIMEOUT;
 8003a4c:	23dc      	movs	r3, #220	; 0xdc
 8003a4e:	e074      	b.n	8003b3a <tcpShutdown+0x20a>

         //Send a FIN segment
         error = tcpSendSegment(socket, TCP_FLAG_FIN | TCP_FLAG_ACK,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003a58:	2301      	movs	r3, #1
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	460b      	mov	r3, r1
 8003a62:	2111      	movs	r1, #17
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 ffab 	bl	80049c0 <tcpSendSegment>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	817b      	strh	r3, [r7, #10]
            socket->sndNxt, socket->rcvNxt, 0, TRUE);
         //Failed to send FIN segment?
         if(error)
 8003a6e:	897b      	ldrh	r3, [r7, #10]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <tcpShutdown+0x148>
            return error;
 8003a74:	897b      	ldrh	r3, [r7, #10]
 8003a76:	e060      	b.n	8003b3a <tcpShutdown+0x20a>

         //Sequence number expected to be received
         socket->sndNxt++;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	665a      	str	r2, [r3, #100]	; 0x64
         //Switch to the LAST-ACK state
         tcpChangeState(socket, TCP_STATE_LAST_ACK);
 8003a82:	2106      	movs	r1, #6
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f002 fa72 	bl	8005f6e <tcpChangeState>

         //Wait for the FIN to be acknowledged
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN, socket->timeout);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2120      	movs	r1, #32
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f002 fbc2 	bl	800621c <tcpWaitForEvents>
 8003a98:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_TX_SHUTDOWN)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d014      	beq.n	8003aca <tcpShutdown+0x19a>
            return ERROR_TIMEOUT;
 8003aa0:	23dc      	movs	r3, #220	; 0xdc
 8003aa2:	e04a      	b.n	8003b3a <tcpShutdown+0x20a>
      //FIN-WAIT-1, CLOSING or LAST-ACK state?
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_CLOSING:
      case TCP_STATE_LAST_ACK:
         //Wait for the FIN to be acknowledged
         event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN, socket->timeout);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2120      	movs	r1, #32
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f002 fbb5 	bl	800621c <tcpWaitForEvents>
 8003ab2:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_TX_SHUTDOWN)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d009      	beq.n	8003ace <tcpShutdown+0x19e>
            return ERROR_TIMEOUT;
 8003aba:	23dc      	movs	r3, #220	; 0xdc
 8003abc:	e03d      	b.n	8003b3a <tcpShutdown+0x20a>
      //SYN-SENT, FIN-WAIT-2 or TIME-WAIT state?
      default:
         //Continue processing
         break;
      }
   }
 8003abe:	bf00      	nop
 8003ac0:	e006      	b.n	8003ad0 <tcpShutdown+0x1a0>
         break;
 8003ac2:	bf00      	nop
 8003ac4:	e004      	b.n	8003ad0 <tcpShutdown+0x1a0>
         break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <tcpShutdown+0x1a0>
         break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <tcpShutdown+0x1a0>
         break;
 8003ace:	bf00      	nop

   //Disable reception?
   if(how == SOCKET_SD_RECEIVE || how == SOCKET_SD_BOTH)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <tcpShutdown+0x1ac>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d128      	bne.n	8003b2e <tcpShutdown+0x1fe>
   {
      //Check current state
      switch(socket->state)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	2b07      	cmp	r3, #7
 8003ae6:	d824      	bhi.n	8003b32 <tcpShutdown+0x202>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <tcpShutdown+0x1c0>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b11 	.word	0x08003b11
 8003af4:	08003b15 	.word	0x08003b15
 8003af8:	08003b15 	.word	0x08003b15
 8003afc:	08003b15 	.word	0x08003b15
 8003b00:	08003b33 	.word	0x08003b33
 8003b04:	08003b33 	.word	0x08003b33
 8003b08:	08003b15 	.word	0x08003b15
 8003b0c:	08003b15 	.word	0x08003b15
      {
      //LISTEN state?
      case TCP_STATE_LISTEN:
         //The connection does not exist
         return ERROR_NOT_CONNECTED;
 8003b10:	23cd      	movs	r3, #205	; 0xcd
 8003b12:	e012      	b.n	8003b3a <tcpShutdown+0x20a>
      case TCP_STATE_SYN_RECEIVED:
      case TCP_STATE_ESTABLISHED:
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
         //Wait for a FIN to be received
         event = tcpWaitForEvents(socket, SOCKET_EVENT_RX_SHUTDOWN, socket->timeout);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2180      	movs	r1, #128	; 0x80
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f002 fb7d 	bl	800621c <tcpWaitForEvents>
 8003b22:	60f8      	str	r0, [r7, #12]
         //Timeout interval elapsed?
         if(event != SOCKET_EVENT_RX_SHUTDOWN)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d005      	beq.n	8003b36 <tcpShutdown+0x206>
            return ERROR_TIMEOUT;
 8003b2a:	23dc      	movs	r3, #220	; 0xdc
 8003b2c:	e005      	b.n	8003b3a <tcpShutdown+0x20a>
      //CLOSING, TIME-WAIT, CLOSE-WAIT, LAST-ACK or CLOSED state?
      default:
         //A FIN segment has already been received
         break;
      }
   }
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <tcpShutdown+0x208>
         break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <tcpShutdown+0x208>
         break;
 8003b36:	bf00      	nop

   //Successful operation
   return NO_ERROR;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop

08003b44 <tcpAbort>:
 * @param[in] socket Handle identifying the socket to close
 * @return Error code
 **/

error_t tcpAbort(Socket *socket)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	6078      	str	r0, [r7, #4]
   error_t error;

   //Check current state
   switch(socket->state)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b52:	3b03      	subs	r3, #3
 8003b54:	2b07      	cmp	r3, #7
 8003b56:	d831      	bhi.n	8003bbc <tcpAbort+0x78>
 8003b58:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <tcpAbort+0x1c>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003b81 	.word	0x08003b81
 8003b64:	08003b81 	.word	0x08003b81
 8003b68:	08003b81 	.word	0x08003b81
 8003b6c:	08003bbd 	.word	0x08003bbd
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b81 	.word	0x08003b81
 8003b78:	08003bbd 	.word	0x08003bbd
 8003b7c:	08003bb3 	.word	0x08003bb3
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
   case TCP_STATE_FIN_WAIT_2:
   case TCP_STATE_CLOSE_WAIT:
      //Send a reset segment
      error = tcpSendSegment(socket, TCP_FLAG_RST, socket->sndNxt, 0, 0, FALSE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b84:	2300      	movs	r3, #0
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2104      	movs	r1, #4
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 ff15 	bl	80049c0 <tcpSendSegment>
 8003b96:	4603      	mov	r3, r0
 8003b98:	81fb      	strh	r3, [r7, #14]
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f002 f9e6 	bl	8005f6e <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(socket);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f001 fda0 	bl	80056e8 <tcpDeleteControlBlock>
      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
      //Return status code
      return error;
 8003bae:	89fb      	ldrh	r3, [r7, #14]
 8003bb0:	e00f      	b.n	8003bd2 <tcpAbort+0x8e>

   //TIME-WAIT state?
   case TCP_STATE_TIME_WAIT:
#if (TCP_2MSL_TIMER > 0)
      //The user doe not own the socket anymore...
      socket->ownedFlag = FALSE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	649a      	str	r2, [r3, #72]	; 0x48
      //TCB will be deleted and socket will be closed
      //when the 2MSL timer will elapse
      return NO_ERROR;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e00a      	b.n	8003bd2 <tcpAbort+0x8e>
#endif

   //Any other state?
   default:
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f002 f9d5 	bl	8005f6e <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(socket);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f001 fd8f 	bl	80056e8 <tcpDeleteControlBlock>
      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	605a      	str	r2, [r3, #4]
      //No error to report
      return NO_ERROR;
 8003bd0:	2300      	movs	r3, #0
   }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop

08003bdc <tcpKillOldestConnection>:
 * @return Handle identifying the oldest TCP connection in the TIME-WAIT state.
 *   NULL is returned if no socket is currently in the TIME-WAIT state
 **/

Socket *tcpKillOldestConnection(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
   systime_t time;
   Socket *socket;
   Socket *oldestSocket;

   //Get current time
   time = osGetSystemTime();
 8003be2:	f7fc fdf5 	bl	80007d0 <osGetSystemTime>
 8003be6:	6078      	str	r0, [r7, #4]

   //Keep track of the oldest socket in the TIME-WAIT state
   oldestSocket = NULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	e026      	b.n	8003c40 <tcpKillOldestConnection+0x64>
   {
      //Point to the current socket descriptor
      socket = &socketTable[i];
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f44f 720d 	mov.w	r2, #564	; 0x234
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <tcpKillOldestConnection+0x90>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	603b      	str	r3, [r7, #0]

      //TCP connection found?
      if(socket->type == SOCKET_TYPE_STREAM)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d117      	bne.n	8003c3a <tcpKillOldestConnection+0x5e>
      {
         //Check current state
         if(socket->state == TCP_STATE_TIME_WAIT)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c10:	2b0a      	cmp	r3, #10
 8003c12:	d112      	bne.n	8003c3a <tcpKillOldestConnection+0x5e>
         {
            //Keep track of the oldest socket in the TIME-WAIT state
            if(oldestSocket == NULL)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <tcpKillOldestConnection+0x42>
            {
               //Save socket handle
               oldestSocket = socket;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	60bb      	str	r3, [r7, #8]
            }
            if((time - socket->timeWaitTimer.startTime) >
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	1ad2      	subs	r2, r2, r3
               (time - oldestSocket->timeWaitTimer.startTime))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	1acb      	subs	r3, r1, r3
            if((time - socket->timeWaitTimer.startTime) >
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d901      	bls.n	8003c3a <tcpKillOldestConnection+0x5e>
            {
               //Save socket handle
               oldestSocket = socket;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b09      	cmp	r3, #9
 8003c44:	d9d5      	bls.n	8003bf2 <tcpKillOldestConnection+0x16>
         }
      }
   }

   //Any connection in the TIME-WAIT state?
   if(oldestSocket != NULL)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <tcpKillOldestConnection+0x84>
   {
      //Enter CLOSED state
      tcpChangeState(oldestSocket, TCP_STATE_CLOSED);
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	f002 f98d 	bl	8005f6e <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(oldestSocket);
 8003c54:	68b8      	ldr	r0, [r7, #8]
 8003c56:	f001 fd47 	bl	80056e8 <tcpDeleteControlBlock>
      //Mark the socket as closed
      oldestSocket->type = SOCKET_TYPE_UNUSED;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	605a      	str	r2, [r3, #4]
   }

   //The oldest connection in the TIME-WAIT state can be reused
   //when the socket table runs out of space
   return oldestSocket;
 8003c60:	68bb      	ldr	r3, [r7, #8]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2000e83c 	.word	0x2000e83c

08003c70 <tcpProcessSegment>:
 * @param[in] offset Offset to the first byte of the TCP header
 **/

void tcpProcessSegment(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, const NetBuffer *buffer, size_t offset)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b08d      	sub	sp, #52	; 0x34
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]

   //A TCP implementation must silently discard an incoming segment that
   //is addressed to a broadcast or multicast address (refer to RFC 1122,
   //section 4.2.3.10)
#if (IPV4_SUPPORT == ENABLED)
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	f040 81a6 	bne.w	8003fd4 <tcpProcessSegment+0x364>
   {
      //Ensure the destination address is not a broadcast address
      if(ipv4IsBroadcastAddr(interface, pseudoHeader->ipv4Data.destAddr))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f005 fbc8 	bl	8009424 <ipv4IsBroadcastAddr>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 819e 	bne.w	8003fd8 <tcpProcessSegment+0x368>
         return;
      //Ensure the destination address is not a multicast address
      if(ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca4:	2be0      	cmp	r3, #224	; 0xe0
 8003ca6:	f000 8199 	beq.w	8003fdc <tcpProcessSegment+0x36c>
      //This should never occur...
      return;
   }

   //Retrieve the length of the TCP segment
   length = netBufferGetLength(buffer) - offset;
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fe fc10 	bl	80024d0 <netBufferGetLength>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	61bb      	str	r3, [r7, #24]

   //Point to the TCP header
   segment = netBufferAt(buffer, offset);
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fe fcd0 	bl	8002660 <netBufferAt>
 8003cc0:	6178      	str	r0, [r7, #20]
   //Sanity check
   if(segment == NULL)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 818b 	beq.w	8003fe0 <tcpProcessSegment+0x370>
      return;

   //Ensure the TCP header is valid
   if(length < sizeof(TcpHeader))
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b13      	cmp	r3, #19
 8003cce:	f240 8189 	bls.w	8003fe4 <tcpProcessSegment+0x374>
      //Exit immediately
      return;
   }

   //Check header length
   if(segment->dataOffset < 5 || ((size_t) segment->dataOffset * 4) > length)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	7b1b      	ldrb	r3, [r3, #12]
 8003cd6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	f240 8183 	bls.w	8003fe8 <tcpProcessSegment+0x378>
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	7b1b      	ldrb	r3, [r3, #12]
 8003ce6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	f0c0 8179 	bcc.w	8003fe8 <tcpProcessSegment+0x378>
      //Exit immediately
      return;
   }

   //Verify TCP checksum
   if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	1d18      	adds	r0, r3, #4
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	f7fd fe18 	bl	800193a <ipCalcUpperLayerChecksumEx>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 816d 	bne.w	8003fec <tcpProcessSegment+0x37c>
      //Exit immediately
      return;
   }

   //No matching socket in the LISTEN state for the moment
   passiveSocket = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]

   //Look through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	e067      	b.n	8003dec <tcpProcessSegment+0x17c>
   {
      //Point to the current socket
      socket = socketTable + i;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	f44f 720d 	mov.w	r2, #564	; 0x234
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	4aa4      	ldr	r2, [pc, #656]	; (8003fb8 <tcpProcessSegment+0x348>)
 8003d28:	4413      	add	r3, r2
 8003d2a:	623b      	str	r3, [r7, #32]

      //TCP socket found?
      if(socket->type != SOCKET_TYPE_STREAM)
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d149      	bne.n	8003dc8 <tcpProcessSegment+0x158>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <tcpProcessSegment+0xd6>
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d142      	bne.n	8003dcc <tcpProcessSegment+0x15c>
         continue;
      //Check destination port number
      if(socket->localPort != ntohs(segment->destPort))
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	8b1c      	ldrh	r4, [r3, #24]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	885b      	ldrh	r3, [r3, #2]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fc fc25 	bl	80005a0 <swapInt16>
 8003d56:	4603      	mov	r3, r0
 8003d58:	429c      	cmp	r4, r3
 8003d5a:	d139      	bne.n	8003dd0 <tcpProcessSegment+0x160>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d137      	bne.n	8003dd4 <tcpProcessSegment+0x164>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <tcpProcessSegment+0x110>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d131      	bne.n	8003dd8 <tcpProcessSegment+0x168>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d12d      	bne.n	8003ddc <tcpProcessSegment+0x16c>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <tcpProcessSegment+0x12c>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d127      	bne.n	8003de0 <tcpProcessSegment+0x170>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	6a1a      	ldr	r2, [r3, #32]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d123      	bne.n	8003de4 <tcpProcessSegment+0x174>
         //This should never occur...
         continue;
      }

      //Keep track of the first matching socket in the LISTEN state
      if(socket->state == TCP_STATE_LISTEN && passiveSocket == NULL)
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d104      	bne.n	8003db0 <tcpProcessSegment+0x140>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <tcpProcessSegment+0x140>
         passiveSocket = socket;
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	61fb      	str	r3, [r7, #28]

      //Source port filtering
      if(socket->remotePort != ntohs(segment->srcPort))
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fbf0 	bl	80005a0 <swapInt16>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	429c      	cmp	r4, r3
 8003dc4:	d016      	beq.n	8003df4 <tcpProcessSegment+0x184>
         continue;
 8003dc6:	e00e      	b.n	8003de6 <tcpProcessSegment+0x176>
         continue;
 8003dc8:	bf00      	nop
 8003dca:	e00c      	b.n	8003de6 <tcpProcessSegment+0x176>
         continue;
 8003dcc:	bf00      	nop
 8003dce:	e00a      	b.n	8003de6 <tcpProcessSegment+0x176>
         continue;
 8003dd0:	bf00      	nop
 8003dd2:	e008      	b.n	8003de6 <tcpProcessSegment+0x176>
         continue;
 8003dd4:	bf00      	nop
 8003dd6:	e006      	b.n	8003de6 <tcpProcessSegment+0x176>
               continue;
 8003dd8:	bf00      	nop
 8003dda:	e004      	b.n	8003de6 <tcpProcessSegment+0x176>
               continue;
 8003ddc:	bf00      	nop
 8003dde:	e002      	b.n	8003de6 <tcpProcessSegment+0x176>
               continue;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <tcpProcessSegment+0x176>
               continue;
 8003de4:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	3301      	adds	r3, #1
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	2b09      	cmp	r3, #9
 8003df0:	d994      	bls.n	8003d1c <tcpProcessSegment+0xac>
 8003df2:	e000      	b.n	8003df6 <tcpProcessSegment+0x186>

      //A matching socket has been found
      break;
 8003df4:	bf00      	nop
   }

   //If no matching socket has been found then try to
   //use the first matching socket in the LISTEN state
   if(i >= SOCKET_MAX_COUNT)
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	2b09      	cmp	r3, #9
 8003dfa:	d901      	bls.n	8003e00 <tcpProcessSegment+0x190>
      socket = passiveSocket;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	623b      	str	r3, [r7, #32]

   //Offset to the first data byte
   offset += segment->dataOffset * 4;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	7b1b      	ldrb	r3, [r3, #12]
 8003e04:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	603b      	str	r3, [r7, #0]
   //Calculate the length of the data
   length -= segment->dataOffset * 4;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	7b1b      	ldrb	r3, [r3, #12]
 8003e18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	461a      	mov	r2, r3
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
   //Debug message
   TRACE_DEBUG("%s: TCP segment received (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   if(socket == NULL)
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <tcpProcessSegment+0x1cc>
      tcpDumpHeader(segment, length, 0, 0);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2200      	movs	r2, #0
 8003e32:	69b9      	ldr	r1, [r7, #24]
 8003e34:	6978      	ldr	r0, [r7, #20]
 8003e36:	f002 fb53 	bl	80064e0 <tcpDumpHeader>
 8003e3a:	e007      	b.n	8003e4c <tcpProcessSegment+0x1dc>
   else
      tcpDumpHeader(segment, length, socket->irs, socket->iss);
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	6978      	ldr	r0, [r7, #20]
 8003e48:	f002 fb4a 	bl	80064e0 <tcpDumpHeader>

   //Convert from network byte order to host byte order
   segment->srcPort = ntohs(segment->srcPort);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fba4 	bl	80005a0 <swapInt16>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	801a      	strh	r2, [r3, #0]
   segment->destPort = ntohs(segment->destPort);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	885b      	ldrh	r3, [r3, #2]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc fb9a 	bl	80005a0 <swapInt16>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	805a      	strh	r2, [r3, #2]
   segment->seqNum = ntohl(segment->seqNum);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fc fb9f 	bl	80005bc <swapInt32>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	605a      	str	r2, [r3, #4]
   segment->ackNum = ntohl(segment->ackNum);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc fb97 	bl	80005bc <swapInt32>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	609a      	str	r2, [r3, #8]
   segment->window = ntohs(segment->window);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	89db      	ldrh	r3, [r3, #14]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc fb80 	bl	80005a0 <swapInt16>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	81da      	strh	r2, [r3, #14]
   segment->urgentPointer = ntohs(segment->urgentPointer);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	8a5b      	ldrh	r3, [r3, #18]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc fb76 	bl	80005a0 <swapInt16>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	825a      	strh	r2, [r3, #18]

   //Specified port is unreachable?
   if(socket == NULL)
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d110      	bne.n	8003ee4 <tcpProcessSegment+0x274>
   {
      //An incoming segment not containing a RST causes
      //a reset to be sent in response
      if(!(segment->flags & TCP_FLAG_RST))
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	7b5b      	ldrb	r3, [r3, #13]
 8003ec6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 808d 	bne.w	8003ff0 <tcpProcessSegment+0x380>
         tcpSendResetSegment(interface, pseudoHeader, segment, length);
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fee2 	bl	8004ca6 <tcpSendResetSegment>

      //Return immediately
      return;
 8003ee2:	e085      	b.n	8003ff0 <tcpProcessSegment+0x380>
   }

   //Check current state
   switch(socket->state)
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eea:	2b0a      	cmp	r3, #10
 8003eec:	d86c      	bhi.n	8003fc8 <tcpProcessSegment+0x358>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <tcpProcessSegment+0x284>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f41 	.word	0x08003f41
 8003f00:	08003f4d 	.word	0x08003f4d
 8003f04:	08003f5f 	.word	0x08003f5f
 8003f08:	08003f71 	.word	0x08003f71
 8003f0c:	08003f7d 	.word	0x08003f7d
 8003f10:	08003f89 	.word	0x08003f89
 8003f14:	08003f9b 	.word	0x08003f9b
 8003f18:	08003fad 	.word	0x08003fad
 8003f1c:	08003fbd 	.word	0x08003fbd
   {
   //Process CLOSED state
   case TCP_STATE_CLOSED:
      //This is the default state that each connection starts in before
      //the process of establishing it begins
      tcpStateClosed(interface, pseudoHeader, segment, length);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f866 	bl	8003ff8 <tcpStateClosed>
      break;
 8003f2c:	e061      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Process LISTEN state
   case TCP_STATE_LISTEN:
      //A device (normally a server) is waiting to receive a synchronize (SYN)
      //message from a client. It has not yet sent its own SYN message
      tcpStateListen(socket, interface, pseudoHeader, segment, length);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	6a38      	ldr	r0, [r7, #32]
 8003f3a:	f000 f877 	bl	800402c <tcpStateListen>
      break;
 8003f3e:	e058      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Process SYN_SENT state
   case TCP_STATE_SYN_SENT:
      //The device (normally a client) has sent a synchronize (SYN) message and
      //is waiting for a matching SYN from the other device (usually a server)
      tcpStateSynSent(socket, segment, length);
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	6979      	ldr	r1, [r7, #20]
 8003f44:	6a38      	ldr	r0, [r7, #32]
 8003f46:	f000 f939 	bl	80041bc <tcpStateSynSent>
      break;
 8003f4a:	e052      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Process SYN_RECEIVED state
   case TCP_STATE_SYN_RECEIVED:
      //The device has both received a SYN from its partner and sent its own SYN.
      //It is now waiting for an ACK to its SYN to finish connection setup
      tcpStateSynReceived(socket, segment, buffer, offset, length);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6979      	ldr	r1, [r7, #20]
 8003f56:	6a38      	ldr	r0, [r7, #32]
 8003f58:	f000 fa23 	bl	80043a2 <tcpStateSynReceived>
      break;
 8003f5c:	e049      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Process ESTABLISHED state
   case TCP_STATE_ESTABLISHED:
      //Data can be exchanged freely once both devices in the connection enter
      //this state. This will continue until the connection is closed
      tcpStateEstablished(socket, segment, buffer, offset, length);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6979      	ldr	r1, [r7, #20]
 8003f68:	6a38      	ldr	r0, [r7, #32]
 8003f6a:	f000 fa83 	bl	8004474 <tcpStateEstablished>
      break;
 8003f6e:	e040      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Process CLOSE_WAIT state
   case TCP_STATE_CLOSE_WAIT:
      //The device has received a close request (FIN) from the other device. It
      //must now wait for the application to acknowledge this request and
      //generate a matching request
      tcpStateCloseWait(socket, segment, length);
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	6979      	ldr	r1, [r7, #20]
 8003f74:	6a38      	ldr	r0, [r7, #32]
 8003f76:	f000 faf3 	bl	8004560 <tcpStateCloseWait>
      break;
 8003f7a:	e03a      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Process LAST_ACK state
   case TCP_STATE_LAST_ACK:
      //A device that has already received a close request and acknowledged it,
      //has sent its own FIN and is waiting for an ACK to this request
      tcpStateLastAck(socket, segment, length);
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	6979      	ldr	r1, [r7, #20]
 8003f80:	6a38      	ldr	r0, [r7, #32]
 8003f82:	f000 fb30 	bl	80045e6 <tcpStateLastAck>
      break;
 8003f86:	e034      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Process FIN_WAIT_1 state
   case TCP_STATE_FIN_WAIT_1:
      //A device in this state is waiting for an ACK for a FIN it has sent, or
      //is waiting for a connection termination request from the other device
      tcpStateFinWait1(socket, segment, buffer, offset, length);
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6979      	ldr	r1, [r7, #20]
 8003f92:	6a38      	ldr	r0, [r7, #32]
 8003f94:	f000 fb67 	bl	8004666 <tcpStateFinWait1>
      break;
 8003f98:	e02b      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Process FIN_WAIT_2 state
   case TCP_STATE_FIN_WAIT_2:
      //A device in this state has received an ACK for its request to terminate the
      //connection and is now waiting for a matching FIN from the other device
      tcpStateFinWait2(socket, segment, buffer, offset, length);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6979      	ldr	r1, [r7, #20]
 8003fa4:	6a38      	ldr	r0, [r7, #32]
 8003fa6:	f000 fbee 	bl	8004786 <tcpStateFinWait2>
      break;
 8003faa:	e022      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Process CLOSING state
   case TCP_STATE_CLOSING:
      //The device has received a FIN from the other device and sent an ACK for
      //it, but not yet received an ACK for its own FIN message
      tcpStateClosing(socket, segment, length);
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	6979      	ldr	r1, [r7, #20]
 8003fb0:	6a38      	ldr	r0, [r7, #32]
 8003fb2:	f000 fc5b 	bl	800486c <tcpStateClosing>
      break;
 8003fb6:	e01c      	b.n	8003ff2 <tcpProcessSegment+0x382>
 8003fb8:	2000e83c 	.word	0x2000e83c
   case TCP_STATE_TIME_WAIT:
      //The device has now received a FIN from the other device and acknowledged
      //it, and sent its own FIN and received an ACK for it. We are done, except
      //for waiting to ensure the ACK is received and prevent potential overlap
      //with new connections
      tcpStateTimeWait(socket, segment, length);
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	6979      	ldr	r1, [r7, #20]
 8003fc0:	6a38      	ldr	r0, [r7, #32]
 8003fc2:	f000 fc9d 	bl	8004900 <tcpStateTimeWait>
      break;
 8003fc6:	e014      	b.n	8003ff2 <tcpProcessSegment+0x382>
   //Invalid state...
   default:
      //Back to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003fc8:	2100      	movs	r1, #0
 8003fca:	6a38      	ldr	r0, [r7, #32]
 8003fcc:	f001 ffcf 	bl	8005f6e <tcpChangeState>
      //Silently discard incoming packet
      break;
 8003fd0:	bf00      	nop
 8003fd2:	e00e      	b.n	8003ff2 <tcpProcessSegment+0x382>
      return;
 8003fd4:	bf00      	nop
 8003fd6:	e00c      	b.n	8003ff2 <tcpProcessSegment+0x382>
         return;
 8003fd8:	bf00      	nop
 8003fda:	e00a      	b.n	8003ff2 <tcpProcessSegment+0x382>
         return;
 8003fdc:	bf00      	nop
 8003fde:	e008      	b.n	8003ff2 <tcpProcessSegment+0x382>
      return;
 8003fe0:	bf00      	nop
 8003fe2:	e006      	b.n	8003ff2 <tcpProcessSegment+0x382>
      return;
 8003fe4:	bf00      	nop
 8003fe6:	e004      	b.n	8003ff2 <tcpProcessSegment+0x382>
      return;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <tcpProcessSegment+0x382>
      return;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <tcpProcessSegment+0x382>
      return;
 8003ff0:	bf00      	nop
   }
}
 8003ff2:	372c      	adds	r7, #44	; 0x2c
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd90      	pop	{r4, r7, pc}

08003ff8 <tcpStateClosed>:
 * @param[in] length Length of the segment data
 **/

void tcpStateClosed(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSED state\r\n");

   //An incoming segment not containing a RST causes
   //a reset to be sent in response
   if(!(segment->flags & TCP_FLAG_RST))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7b5b      	ldrb	r3, [r3, #13]
 800400a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <tcpStateClosed+0x2c>
      tcpSendResetSegment(interface, pseudoHeader, segment, length);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fe41 	bl	8004ca6 <tcpSendResetSegment>
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <tcpStateListen>:
 * @param[in] length Length of the segment data
 **/

void tcpStateListen(Socket *socket, NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("TCP FSM: LISTEN state\r\n");

   //An incoming RST should be ignored
   if(segment->flags & TCP_FLAG_RST)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	7b5b      	ldrb	r3, [r3, #13]
 800403e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f040 80ab 	bne.w	80041a4 <tcpStateListen+0x178>
      return;

   //Any acknowledgment is bad if it arrives on a connection
   //still in the LISTEN state
   if(segment->flags & TCP_FLAG_ACK)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	7b5b      	ldrb	r3, [r3, #13]
 8004052:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d006      	beq.n	800406e <tcpStateListen+0x42>
   {
      //A reset segment should be formed for any arriving ACK-bearing segment
      tcpSendResetSegment(interface, pseudoHeader, segment, length);
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	68b8      	ldr	r0, [r7, #8]
 8004068:	f000 fe1d 	bl	8004ca6 <tcpSendResetSegment>
      //Return immediately
      return;
 800406c:	e0a3      	b.n	80041b6 <tcpStateListen+0x18a>
   }

   //Check the SYN bit
   if(segment->flags & TCP_FLAG_SYN)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	7b5b      	ldrb	r3, [r3, #13]
 8004072:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 809a 	beq.w	80041b6 <tcpStateListen+0x18a>
   {
      //Silently drop duplicate SYN segments
      if(tcpIsDuplicateSyn(socket, pseudoHeader, segment))
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f001 f99f 	bl	80053ca <tcpIsDuplicateSyn>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f040 808a 	bne.w	80041a8 <tcpStateListen+0x17c>
         return;

      //Check whether the SYN queue is empty
      if(socket->synQueue == NULL)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <tcpStateListen+0x84>
      {
         //Allocate memory to save incoming data
         queueItem = memPoolAlloc(sizeof(TcpSynQueueItem));
 800409e:	2024      	movs	r0, #36	; 0x24
 80040a0:	f7fe f942 	bl	8002328 <memPoolAlloc>
 80040a4:	61b8      	str	r0, [r7, #24]
         //Add the newly created item to the queue
         socket->synQueue = queueItem;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 80040ae:	e01f      	b.n	80040f0 <tcpStateListen+0xc4>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->synQueue;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80040b6:	61bb      	str	r3, [r7, #24]

         //Reach the last item in the SYN queue
         for(i = 1; queueItem->next != NULL; i++)
 80040b8:	2301      	movs	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e005      	b.n	80040ca <tcpStateListen+0x9e>
            queueItem = queueItem->next;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	61bb      	str	r3, [r7, #24]
         for(i = 1; queueItem->next != NULL; i++)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	3301      	adds	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f5      	bne.n	80040be <tcpStateListen+0x92>

         //Make sure the SYN queue is not full
         if(i >= socket->synQueueSize)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d266      	bcs.n	80041ac <tcpStateListen+0x180>
            return;

         //Allocate memory to save incoming data
         queueItem->next = memPoolAlloc(sizeof(TcpSynQueueItem));
 80040de:	2024      	movs	r0, #36	; 0x24
 80040e0:	f7fe f922 	bl	8002328 <memPoolAlloc>
 80040e4:	4602      	mov	r2, r0
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	61bb      	str	r3, [r7, #24]
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d05c      	beq.n	80041b0 <tcpStateListen+0x184>
         return;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 is currently used?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d15a      	bne.n	80041b4 <tcpStateListen+0x188>
      {
         //Save the source IPv4 address
         queueItem->srcAddr.length = sizeof(Ipv4Addr);
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2204      	movs	r2, #4
 8004102:	609a      	str	r2, [r3, #8]
         queueItem->srcAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	60da      	str	r2, [r3, #12]
         //Save the destination IPv4 address
         queueItem->destAddr.length = sizeof(Ipv4Addr);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2204      	movs	r2, #4
 8004110:	615a      	str	r2, [r3, #20]
         queueItem->destAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	619a      	str	r2, [r3, #24]
         //This should never occur...
         return;
      }

      //Initialize next field
      queueItem->next = NULL;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
      //Underlying network interface
      queueItem->interface = interface;
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	605a      	str	r2, [r3, #4]
      //Save the port number of the client
      queueItem->srcPort = segment->srcPort;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29a      	uxth	r2, r3
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	821a      	strh	r2, [r3, #16]
      //Save the initial sequence number
      queueItem->isn = segment->seqNum;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	61da      	str	r2, [r3, #28]
      //Default MSS value
      queueItem->mss = MIN(TCP_DEFAULT_MSS, TCP_MAX_MSS);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800413e:	841a      	strh	r2, [r3, #32]

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 8004140:	2102      	movs	r1, #2
 8004142:	6838      	ldr	r0, [r7, #0]
 8004144:	f000 feec 	bl	8004f20 <tcpGetOption>
 8004148:	6178      	str	r0, [r7, #20]

      //Specified option found?
      if(option != NULL && option->length == 4)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d025      	beq.n	800419c <tcpStateListen+0x170>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d121      	bne.n	800419c <tcpStateListen+0x170>
      {
         //Retrieve MSS value
         memcpy(&queueItem->mss, option->value, 2);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	3320      	adds	r3, #32
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	3202      	adds	r2, #2
 8004160:	8812      	ldrh	r2, [r2, #0]
 8004162:	b292      	uxth	r2, r2
 8004164:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         queueItem->mss = ntohs(queueItem->mss);
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	8c1b      	ldrh	r3, [r3, #32]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc fa18 	bl	80005a0 <swapInt16>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	841a      	strh	r2, [r3, #32]

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", queueItem->mss);

         //Make sure that the MSS advertised by the peer is acceptable
         queueItem->mss = MIN(queueItem->mss, TCP_MAX_MSS);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	8c1b      	ldrh	r3, [r3, #32]
 800417c:	f240 5296 	movw	r2, #1430	; 0x596
 8004180:	4293      	cmp	r3, r2
 8004182:	bf28      	it	cs
 8004184:	4613      	movcs	r3, r2
 8004186:	b29a      	uxth	r2, r3
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	841a      	strh	r2, [r3, #32]
         queueItem->mss = MAX(queueItem->mss, TCP_MIN_MSS);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	8c1b      	ldrh	r3, [r3, #32]
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	bf38      	it	cc
 8004194:	2340      	movcc	r3, #64	; 0x40
 8004196:	b29a      	uxth	r2, r3
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	841a      	strh	r2, [r3, #32]
      }

      //Notify user that a connection request is pending
      tcpUpdateEvents(socket);
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f001 ff0b 	bl	8005fb8 <tcpUpdateEvents>
 80041a2:	e008      	b.n	80041b6 <tcpStateListen+0x18a>
      return;
 80041a4:	bf00      	nop
 80041a6:	e006      	b.n	80041b6 <tcpStateListen+0x18a>
         return;
 80041a8:	bf00      	nop
 80041aa:	e004      	b.n	80041b6 <tcpStateListen+0x18a>
            return;
 80041ac:	bf00      	nop
 80041ae:	e002      	b.n	80041b6 <tcpStateListen+0x18a>
         return;
 80041b0:	bf00      	nop
 80041b2:	e000      	b.n	80041b6 <tcpStateListen+0x18a>
         return;
 80041b4:	bf00      	nop

      //The rest of the processing described in RFC 793 will be done
      //asynchronously when socketAccept() function is called
   }
}
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <tcpStateSynSent>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateSynSent(Socket *socket, TcpHeader *segment, size_t length)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-SENT state\r\n");

   //Check the ACK bit
   if(segment->flags & TCP_FLAG_ACK)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	7b5b      	ldrb	r3, [r3, #13]
 80041cc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01b      	beq.n	8004212 <tcpStateSynSent+0x56>
   {
      //Make sure the acknowledgment number is valid
      if(segment->ackNum != socket->sndNxt)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d015      	beq.n	8004212 <tcpStateSynSent+0x56>
      {
         //Send a reset segment unless the RST bit is set
         if(!(segment->flags & TCP_FLAG_RST))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	7b5b      	ldrb	r3, [r3, #13]
 80041ea:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f040 80ce 	bne.w	8004396 <tcpStateSynSent+0x1da>
            tcpSendSegment(socket, TCP_FLAG_RST, segment->ackNum, 0, 0, FALSE);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	2300      	movs	r3, #0
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2300      	movs	r3, #0
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	2300      	movs	r3, #0
 8004208:	2104      	movs	r1, #4
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fbd8 	bl	80049c0 <tcpSendSegment>

         //Drop the segment and return
         return;
 8004210:	e0c1      	b.n	8004396 <tcpStateSynSent+0x1da>
      }
   }

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	7b5b      	ldrb	r3, [r3, #13]
 8004216:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00e      	beq.n	8004242 <tcpStateSynSent+0x86>
   {
      //Make sure the ACK is acceptable
      if(segment->flags & TCP_FLAG_ACK)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	7b5b      	ldrb	r3, [r3, #13]
 8004228:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80b1 	beq.w	800439a <tcpStateSynSent+0x1de>
      {
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8004238:	2100      	movs	r1, #0
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f001 fe97 	bl	8005f6e <tcpChangeState>
         MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
         TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);
      }

      //Drop the segment and return
      return;
 8004240:	e0ab      	b.n	800439a <tcpStateSynSent+0x1de>
   }

   //Check the SYN bit
   if(segment->flags & TCP_FLAG_SYN)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	7b5b      	ldrb	r3, [r3, #13]
 8004246:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80a3 	beq.w	800439c <tcpStateSynSent+0x1e0>
   {
      //Save initial receive sequence number
      socket->irs = segment->seqNum;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	65da      	str	r2, [r3, #92]	; 0x5c
      //Initialize RCV.NXT pointer
      socket->rcvNxt = segment->seqNum + 1;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	679a      	str	r2, [r3, #120]	; 0x78

      //If there is an ACK, SND.UNA should be advanced to equal SEG.ACK
      if(segment->flags & TCP_FLAG_ACK)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	7b5b      	ldrb	r3, [r3, #13]
 800426c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <tcpStateSynSent+0xc6>
         socket->sndUna = segment->ackNum;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	661a      	str	r2, [r3, #96]	; 0x60

      //Compute retransmission timeout
      tcpComputeRto(socket);
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f001 fc67 	bl	8005b56 <tcpComputeRto>

      //Any segments on the retransmission queue which are thereby
      //acknowledged should be removed
      tcpUpdateRetransmitQueue(socket);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f001 fa48 	bl	800571e <tcpUpdateRetransmitQueue>

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 800428e:	2102      	movs	r1, #2
 8004290:	68b8      	ldr	r0, [r7, #8]
 8004292:	f000 fe45 	bl	8004f20 <tcpGetOption>
 8004296:	6178      	str	r0, [r7, #20]

      //Specified option found?
      if(option != NULL && option->length == 4)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d02b      	beq.n	80042f6 <tcpStateSynSent+0x13a>
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d127      	bne.n	80042f6 <tcpStateSynSent+0x13a>
      {
         //Retrieve MSS value
         memcpy(&socket->smss, option->value, 2);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3354      	adds	r3, #84	; 0x54
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	3202      	adds	r2, #2
 80042ae:	8812      	ldrh	r2, [r2, #0]
 80042b0:	b292      	uxth	r2, r2
 80042b2:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         socket->smss = ntohs(socket->smss);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fc f970 	bl	80005a0 <swapInt16>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", socket->smss);

         //Make sure that the MSS advertised by the peer is acceptable
         socket->smss = MIN(socket->smss, TCP_MAX_MSS);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042d0:	f240 5296 	movw	r2, #1430	; 0x596
 80042d4:	4293      	cmp	r3, r2
 80042d6:	bf28      	it	cs
 80042d8:	4613      	movcs	r3, r2
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
         socket->smss = MAX(socket->smss, TCP_MIN_MSS);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042e8:	2b40      	cmp	r3, #64	; 0x40
 80042ea:	bf38      	it	cc
 80042ec:	2340      	movcc	r3, #64	; 0x40
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Initial congestion window
      socket->cwnd = MIN(TCP_INITIAL_WINDOW * socket->smss, socket->txBufferSize);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004302:	4619      	mov	r1, r3
 8004304:	460b      	mov	r3, r1
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	440b      	add	r3, r1
 800430a:	4293      	cmp	r3, r2
 800430c:	bf28      	it	cs
 800430e:	4613      	movcs	r3, r2
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
#endif

      //Check whether our SYN has been acknowledged (SND.UNA > ISS)
      if(TCP_CMP_SEQ(socket->sndUna, socket->iss) > 0)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	dd25      	ble.n	8004372 <tcpStateSynSent+0x1b6>
      {
         //Update the send window before entering ESTABLISHED state (refer to
         //RFC 1122, section 4.2.2.20)
         socket->sndWnd = segment->window;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	89db      	ldrh	r3, [r3, #14]
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
         socket->sndWl1 = segment->seqNum;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	671a      	str	r2, [r3, #112]	; 0x70
         socket->sndWl2 = segment->ackNum;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	675a      	str	r2, [r3, #116]	; 0x74

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = segment->window;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	89db      	ldrh	r3, [r3, #14]
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

         //Form an ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004356:	2300      	movs	r3, #0
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	2300      	movs	r3, #0
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	460b      	mov	r3, r1
 8004360:	2110      	movs	r1, #16
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fb2c 	bl	80049c0 <tcpSendSegment>
         //Switch to the ESTABLISHED state
         tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 8004368:	2104      	movs	r1, #4
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f001 fdff 	bl	8005f6e <tcpChangeState>
 8004370:	e014      	b.n	800439c <tcpStateSynSent+0x1e0>
      }
      else
      {
         //Form an SYN ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_SYN | TCP_FLAG_ACK, socket->iss, socket->rcvNxt, 0, TRUE);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800437a:	2301      	movs	r3, #1
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	2300      	movs	r3, #0
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	460b      	mov	r3, r1
 8004384:	2112      	movs	r1, #18
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fb1a 	bl	80049c0 <tcpSendSegment>
         //Enter SYN-RECEIVED state
         tcpChangeState(socket, TCP_STATE_SYN_RECEIVED);
 800438c:	2103      	movs	r1, #3
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f001 fded 	bl	8005f6e <tcpChangeState>
 8004394:	e002      	b.n	800439c <tcpStateSynSent+0x1e0>
         return;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <tcpStateSynSent+0x1e0>
      return;
 800439a:	bf00      	nop
      }
   }
}
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <tcpStateSynReceived>:
 * @param[in] length Length of the segment data
 **/

void tcpStateSynReceived(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af02      	add	r7, sp, #8
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-RECEIVED state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fe06 	bl	8004fc6 <tcpCheckSequenceNumber>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d151      	bne.n	8004464 <tcpStateSynReceived+0xc2>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	7b5b      	ldrb	r3, [r3, #13]
 80043c4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <tcpStateSynReceived+0x3a>
   {
      //Return to CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80043d2:	2100      	movs	r1, #0
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f001 fdca 	bl	8005f6e <tcpChangeState>
      //CLOSED state from either the SYN-SENT state or the SYN-RECEIVED state
      MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
      TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);

      //Return immediately
      return;
 80043da:	e048      	b.n	800446e <tcpStateSynReceived+0xcc>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fe80 	bl	80050e6 <tcpCheckSyn>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d13d      	bne.n	8004468 <tcpStateSynReceived+0xc6>
      return;

   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	7b5b      	ldrb	r3, [r3, #13]
 80043f0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d036      	beq.n	800446c <tcpStateSynReceived+0xca>
      return;

   //Make sure the acknowledgment number is valid
   if(segment->ackNum != socket->sndNxt)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004406:	429a      	cmp	r2, r3
 8004408:	d00b      	beq.n	8004422 <tcpStateSynReceived+0x80>
   {
      //If the segment acknowledgment is not acceptable, form a reset
      //segment and send it
      tcpSendSegment(socket, TCP_FLAG_RST, segment->ackNum, 0, 0, FALSE);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	2300      	movs	r3, #0
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	2300      	movs	r3, #0
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	2300      	movs	r3, #0
 8004418:	2104      	movs	r1, #4
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fad0 	bl	80049c0 <tcpSendSegment>

      //Drop the segment and return
      return;
 8004420:	e025      	b.n	800446e <tcpStateSynReceived+0xcc>
   }

   //Update the send window before entering ESTABLISHED state (refer to
   //RFC 1122, section 4.2.2.20)
   socket->sndWnd = segment->window;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	89db      	ldrh	r3, [r3, #14]
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   socket->sndWl1 = segment->seqNum;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	671a      	str	r2, [r3, #112]	; 0x70
   socket->sndWl2 = segment->ackNum;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	675a      	str	r2, [r3, #116]	; 0x74

   //Maximum send window it has seen so far on the connection
   socket->maxSndWnd = segment->window;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	89db      	ldrh	r3, [r3, #14]
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

   //Enter ESTABLISHED state
   tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 800444a:	2104      	movs	r1, #4
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f001 fd8e 	bl	8005f6e <tcpChangeState>
   //And continue processing...
   tcpStateEstablished(socket, segment, buffer, offset, length);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f809 	bl	8004474 <tcpStateEstablished>
 8004462:	e004      	b.n	800446e <tcpStateSynReceived+0xcc>
      return;
 8004464:	bf00      	nop
 8004466:	e002      	b.n	800446e <tcpStateSynReceived+0xcc>
      return;
 8004468:	bf00      	nop
 800446a:	e000      	b.n	800446e <tcpStateSynReceived+0xcc>
      return;
 800446c:	bf00      	nop
}
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <tcpStateEstablished>:
 * @param[in] length Length of the segment data
 **/

void tcpStateEstablished(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
   uint_t flags = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: ESTABLISHED state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8004486:	6a3a      	ldr	r2, [r7, #32]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fd9b 	bl	8004fc6 <tcpCheckSequenceNumber>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d15c      	bne.n	8004550 <tcpStateEstablished+0xdc>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	7b5b      	ldrb	r3, [r3, #13]
 800449a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <tcpStateEstablished+0x3e>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80044a8:	2100      	movs	r1, #0
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f001 fd5f 	bl	8005f6e <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 80044b0:	e053      	b.n	800455a <tcpStateEstablished+0xe6>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80044b2:	6a3a      	ldr	r2, [r7, #32]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fe15 	bl	80050e6 <tcpCheckSyn>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d148      	bne.n	8004554 <tcpStateEstablished+0xe0>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80044c2:	6a3a      	ldr	r2, [r7, #32]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fe47 	bl	800515a <tcpCheckAck>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d142      	bne.n	8004558 <tcpStateEstablished+0xe4>
      return;
   //Process the segment text
   if(length > 0)
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <tcpStateEstablished+0x74>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f001 f878 	bl	80055d8 <tcpProcessSegmentData>

   //Check the FIN bit
   if(segment->flags & TCP_FLAG_FIN)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	7b5b      	ldrb	r3, [r3, #13]
 80044ec:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01d      	beq.n	8004536 <tcpStateEstablished+0xc2>
   {
      //The FIN can only be acknowledged if all the segment data
      //has been successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6859      	ldr	r1, [r3, #4]
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	440b      	add	r3, r1
 8004506:	429a      	cmp	r2, r3
 8004508:	d115      	bne.n	8004536 <tcpStateEstablished+0xc2>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	679a      	str	r2, [r3, #120]	; 0x78
         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800451c:	2300      	movs	r3, #0
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	2300      	movs	r3, #0
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	460b      	mov	r3, r1
 8004526:	2110      	movs	r1, #16
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fa49 	bl	80049c0 <tcpSendSegment>
         //Switch to the CLOSE-WAIT state
         tcpChangeState(socket, TCP_STATE_CLOSE_WAIT);
 800452e:	2105      	movs	r1, #5
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f001 fd1c 	bl	8005f6e <tcpChangeState>
      }
   }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate AK received?
   if(socket->dupAckCount > 0)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <tcpStateEstablished+0xd2>
      flags = SOCKET_FLAG_NO_DELAY;
 8004540:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004544:	617b      	str	r3, [r7, #20]
#endif

   //The Nagle algorithm should be implemented to coalesce
   //short segments (refer to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 8004546:	6979      	ldr	r1, [r7, #20]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f001 fc05 	bl	8005d58 <tcpNagleAlgo>
 800454e:	e004      	b.n	800455a <tcpStateEstablished+0xe6>
      return;
 8004550:	bf00      	nop
 8004552:	e002      	b.n	800455a <tcpStateEstablished+0xe6>
      return;
 8004554:	bf00      	nop
 8004556:	e000      	b.n	800455a <tcpStateEstablished+0xe6>
      return;
 8004558:	bf00      	nop
}
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <tcpStateCloseWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateCloseWait(Socket *socket, TcpHeader *segment, size_t length)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
   uint_t flags = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSE-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fd26 	bl	8004fc6 <tcpCheckSequenceNumber>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d12a      	bne.n	80045d6 <tcpStateCloseWait+0x76>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	7b5b      	ldrb	r3, [r3, #13]
 8004584:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d004      	beq.n	800459c <tcpStateCloseWait+0x3c>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8004592:	2100      	movs	r1, #0
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f001 fcea 	bl	8005f6e <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 800459a:	e021      	b.n	80045e0 <tcpStateCloseWait+0x80>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fda0 	bl	80050e6 <tcpCheckSyn>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d116      	bne.n	80045da <tcpStateCloseWait+0x7a>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fdd2 	bl	800515a <tcpCheckAck>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d110      	bne.n	80045de <tcpStateCloseWait+0x7e>
      return;

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate AK received?
   if(socket->dupAckCount > 0)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <tcpStateCloseWait+0x6c>
      flags = SOCKET_FLAG_NO_DELAY;
 80045c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045ca:	617b      	str	r3, [r7, #20]
#endif

   //The Nagle algorithm should be implemented to coalesce
   //short segments (refer to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f001 fbc2 	bl	8005d58 <tcpNagleAlgo>
 80045d4:	e004      	b.n	80045e0 <tcpStateCloseWait+0x80>
      return;
 80045d6:	bf00      	nop
 80045d8:	e002      	b.n	80045e0 <tcpStateCloseWait+0x80>
      return;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <tcpStateCloseWait+0x80>
      return;
 80045de:	bf00      	nop
}
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <tcpStateLastAck>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateLastAck(Socket *socket, TcpHeader *segment, size_t length)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: LAST-ACK state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fce5 	bl	8004fc6 <tcpCheckSequenceNumber>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d129      	bne.n	8004656 <tcpStateLastAck+0x70>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	7b5b      	ldrb	r3, [r3, #13]
 8004606:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <tcpStateLastAck+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8004614:	2100      	movs	r1, #0
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f001 fca9 	bl	8005f6e <tcpChangeState>
      //Return immediately
      return;
 800461c:	e020      	b.n	8004660 <tcpStateLastAck+0x7a>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fd5f 	bl	80050e6 <tcpCheckSyn>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d115      	bne.n	800465a <tcpStateLastAck+0x74>
      return;
   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	7b5b      	ldrb	r3, [r3, #13]
 8004632:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00e      	beq.n	800465e <tcpStateLastAck+0x78>
      return;

   //The only thing that can arrive in this state is an
   //acknowledgment of our FIN
   if(segment->ackNum == socket->sndNxt)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004648:	429a      	cmp	r2, r3
 800464a:	d109      	bne.n	8004660 <tcpStateLastAck+0x7a>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800464c:	2100      	movs	r1, #0
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f001 fc8d 	bl	8005f6e <tcpChangeState>
 8004654:	e004      	b.n	8004660 <tcpStateLastAck+0x7a>
      return;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <tcpStateLastAck+0x7a>
      return;
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <tcpStateLastAck+0x7a>
      return;
 800465e:	bf00      	nop
   }
}
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <tcpStateFinWait1>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait1(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af02      	add	r7, sp, #8
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-1 state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fca4 	bl	8004fc6 <tcpCheckSequenceNumber>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d178      	bne.n	8004776 <tcpStateFinWait1+0x110>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	7b5b      	ldrb	r3, [r3, #13]
 8004688:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d004      	beq.n	80046a0 <tcpStateFinWait1+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8004696:	2100      	movs	r1, #0
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f001 fc68 	bl	8005f6e <tcpChangeState>
      //Return immediately
      return;
 800469e:	e06f      	b.n	8004780 <tcpStateFinWait1+0x11a>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fd1e 	bl	80050e6 <tcpCheckSyn>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d164      	bne.n	800477a <tcpStateFinWait1+0x114>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fd50 	bl	800515a <tcpCheckAck>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d15e      	bne.n	800477e <tcpStateFinWait1+0x118>
      return;

   //Check whether our FIN is now acknowledged
   if(segment->ackNum == socket->sndNxt)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d10b      	bne.n	80046e4 <tcpStateFinWait1+0x7e>
   {
      //Start the FIN-WAIT-2 timer to prevent the connection
      //from staying in the FIN-WAIT-2 state forever
      tcpTimerStart(&socket->finWait2Timer, TCP_FIN_WAIT_2_TIMER);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80046d2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f002 f8b2 	bl	8006840 <tcpTimerStart>
      //enter FIN-WAIT-2 and continue processing in that state
      tcpChangeState(socket, TCP_STATE_FIN_WAIT_2);
 80046dc:	2108      	movs	r1, #8
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f001 fc45 	bl	8005f6e <tcpChangeState>
   }

   //Process the segment text
   if(length > 0)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <tcpStateFinWait1+0x94>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 ff6f 	bl	80055d8 <tcpProcessSegmentData>

   //Check the FIN bit
   if(segment->flags & TCP_FLAG_FIN)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	7b5b      	ldrb	r3, [r3, #13]
 80046fe:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d039      	beq.n	8004780 <tcpStateFinWait1+0x11a>
   {
      //The FIN can only be acknowledged if all the segment data
      //has been successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	440b      	add	r3, r1
 8004718:	429a      	cmp	r2, r3
 800471a:	d131      	bne.n	8004780 <tcpStateFinWait1+0x11a>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	679a      	str	r2, [r3, #120]	; 0x78
         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800472e:	2300      	movs	r3, #0
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	2300      	movs	r3, #0
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	460b      	mov	r3, r1
 8004738:	2110      	movs	r1, #16
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f940 	bl	80049c0 <tcpSendSegment>

         //Check if our FIN has been acknowledged
         if(segment->ackNum == socket->sndNxt)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004748:	429a      	cmp	r2, r3
 800474a:	d10f      	bne.n	800476c <tcpStateFinWait1+0x106>
         {
            //Release previously allocated resources
            tcpDeleteControlBlock(socket);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 ffcb 	bl	80056e8 <tcpDeleteControlBlock>
            //Start the 2MSL timer
            tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004758:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800475c:	4618      	mov	r0, r3
 800475e:	f002 f86f 	bl	8006840 <tcpTimerStart>
            //Switch to the TIME-WAIT state
            tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 8004762:	210a      	movs	r1, #10
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f001 fc02 	bl	8005f6e <tcpChangeState>
 800476a:	e009      	b.n	8004780 <tcpStateFinWait1+0x11a>
         }
         else
         {
            //If our FIN has not been acknowledged, then enter CLOSING state
            tcpChangeState(socket, TCP_STATE_CLOSING);
 800476c:	2109      	movs	r1, #9
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f001 fbfd 	bl	8005f6e <tcpChangeState>
 8004774:	e004      	b.n	8004780 <tcpStateFinWait1+0x11a>
      return;
 8004776:	bf00      	nop
 8004778:	e002      	b.n	8004780 <tcpStateFinWait1+0x11a>
      return;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <tcpStateFinWait1+0x11a>
      return;
 800477e:	bf00      	nop
         }
      }
   }
}
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <tcpStateFinWait2>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait2(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b086      	sub	sp, #24
 800478a:	af02      	add	r7, sp, #8
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-2 state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fc14 	bl	8004fc6 <tcpCheckSequenceNumber>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d15b      	bne.n	800485c <tcpStateFinWait2+0xd6>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	7b5b      	ldrb	r3, [r3, #13]
 80047a8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <tcpStateFinWait2+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80047b6:	2100      	movs	r1, #0
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f001 fbd8 	bl	8005f6e <tcpChangeState>
      //Return immediately
      return;
 80047be:	e052      	b.n	8004866 <tcpStateFinWait2+0xe0>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fc8e 	bl	80050e6 <tcpCheckSyn>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d147      	bne.n	8004860 <tcpStateFinWait2+0xda>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fcc0 	bl	800515a <tcpCheckAck>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d141      	bne.n	8004864 <tcpStateFinWait2+0xde>
      return;
   //Process the segment text
   if(length > 0)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <tcpStateFinWait2+0x70>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fef1 	bl	80055d8 <tcpProcessSegmentData>

   //Check the FIN bit
   if(segment->flags & TCP_FLAG_FIN)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	7b5b      	ldrb	r3, [r3, #13]
 80047fa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02e      	beq.n	8004866 <tcpStateFinWait2+0xe0>
   {
      //The FIN can only be acknowledged if all the segment data
      //has been successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	440b      	add	r3, r1
 8004814:	429a      	cmp	r2, r3
 8004816:	d126      	bne.n	8004866 <tcpStateFinWait2+0xe0>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	679a      	str	r2, [r3, #120]	; 0x78
         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800482a:	2300      	movs	r3, #0
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	2300      	movs	r3, #0
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	460b      	mov	r3, r1
 8004834:	2110      	movs	r1, #16
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8c2 	bl	80049c0 <tcpSendSegment>

         //Release previously allocated resources
         tcpDeleteControlBlock(socket);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 ff53 	bl	80056e8 <tcpDeleteControlBlock>
         //Start the 2MSL timer
         tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004848:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800484c:	4618      	mov	r0, r3
 800484e:	f001 fff7 	bl	8006840 <tcpTimerStart>
         //Switch to the TIME_WAIT state
         tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 8004852:	210a      	movs	r1, #10
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f001 fb8a 	bl	8005f6e <tcpChangeState>
 800485a:	e004      	b.n	8004866 <tcpStateFinWait2+0xe0>
      return;
 800485c:	bf00      	nop
 800485e:	e002      	b.n	8004866 <tcpStateFinWait2+0xe0>
      return;
 8004860:	bf00      	nop
 8004862:	e000      	b.n	8004866 <tcpStateFinWait2+0xe0>
      return;
 8004864:	bf00      	nop
      }
   }
}
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <tcpStateClosing>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateClosing(Socket *socket, TcpHeader *segment, size_t length)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSING state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fba2 	bl	8004fc6 <tcpCheckSequenceNumber>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d133      	bne.n	80048f0 <tcpStateClosing+0x84>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	7b5b      	ldrb	r3, [r3, #13]
 800488c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d004      	beq.n	80048a4 <tcpStateClosing+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800489a:	2100      	movs	r1, #0
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f001 fb66 	bl	8005f6e <tcpChangeState>
      //Return immediately
      return;
 80048a2:	e02a      	b.n	80048fa <tcpStateClosing+0x8e>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fc1c 	bl	80050e6 <tcpCheckSyn>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11f      	bne.n	80048f4 <tcpStateClosing+0x88>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fc4e 	bl	800515a <tcpCheckAck>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d119      	bne.n	80048f8 <tcpStateClosing+0x8c>
      return;

   //If the ACK acknowledges our FIN then enter the TIME-WAIT
   //state, otherwise ignore the segment
   if(segment->ackNum == socket->sndNxt)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d114      	bne.n	80048fa <tcpStateClosing+0x8e>
   {
      //Release previously allocated resources
      tcpDeleteControlBlock(socket);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 ff09 	bl	80056e8 <tcpDeleteControlBlock>
      //Start the 2MSL timer
      tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80048dc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 ffad 	bl	8006840 <tcpTimerStart>
      //Switch to the TIME-WAIT state
      tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 80048e6:	210a      	movs	r1, #10
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f001 fb40 	bl	8005f6e <tcpChangeState>
 80048ee:	e004      	b.n	80048fa <tcpStateClosing+0x8e>
      return;
 80048f0:	bf00      	nop
 80048f2:	e002      	b.n	80048fa <tcpStateClosing+0x8e>
      return;
 80048f4:	bf00      	nop
 80048f6:	e000      	b.n	80048fa <tcpStateClosing+0x8e>
      return;
 80048f8:	bf00      	nop
   }
}
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <tcpStateTimeWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateTimeWait(Socket *socket, TcpHeader *segment, size_t length)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: TIME-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fb58 	bl	8004fc6 <tcpCheckSequenceNumber>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d147      	bne.n	80049ac <tcpStateTimeWait+0xac>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	7b5b      	ldrb	r3, [r3, #13]
 8004920:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <tcpStateTimeWait+0x4c>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800492e:	2100      	movs	r1, #0
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f001 fb1c 	bl	8005f6e <tcpChangeState>

      //Dispose the socket if the user does not have the ownership anymore
      if(!socket->ownedFlag)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493a:	2b00      	cmp	r3, #0
 800493c:	d138      	bne.n	80049b0 <tcpStateTimeWait+0xb0>
      {
         //Delete the TCB
         tcpDeleteControlBlock(socket);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fed2 	bl	80056e8 <tcpDeleteControlBlock>
         //Mark the socket as closed
         socket->type = SOCKET_TYPE_UNUSED;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	605a      	str	r2, [r3, #4]
      }

      //Return immediately
      return;
 800494a:	e031      	b.n	80049b0 <tcpStateTimeWait+0xb0>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fbc8 	bl	80050e6 <tcpCheckSyn>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d12b      	bne.n	80049b4 <tcpStateTimeWait+0xb4>
      return;
   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	7b5b      	ldrb	r3, [r3, #13]
 8004960:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d024      	beq.n	80049b8 <tcpStateTimeWait+0xb8>
      return;

   //The only thing that can arrive in this state is a retransmission
   //of the remote FIN. Acknowledge it and restart the 2 MSL timeout
   if(segment->flags & TCP_FLAG_FIN)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	7b5b      	ldrb	r3, [r3, #13]
 8004972:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01c      	beq.n	80049ba <tcpStateTimeWait+0xba>
   {
      //Send an acknowledgment for the FIN
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004988:	2300      	movs	r3, #0
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	2300      	movs	r3, #0
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	460b      	mov	r3, r1
 8004992:	2110      	movs	r1, #16
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f813 	bl	80049c0 <tcpSendSegment>
      //Restart the 2MSL timer
      tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80049a0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 ff4b 	bl	8006840 <tcpTimerStart>
 80049aa:	e006      	b.n	80049ba <tcpStateTimeWait+0xba>
      return;
 80049ac:	bf00      	nop
 80049ae:	e004      	b.n	80049ba <tcpStateTimeWait+0xba>
      return;
 80049b0:	bf00      	nop
 80049b2:	e002      	b.n	80049ba <tcpStateTimeWait+0xba>
      return;
 80049b4:	bf00      	nop
 80049b6:	e000      	b.n	80049ba <tcpStateTimeWait+0xba>
      return;
 80049b8:	bf00      	nop
   }
}
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <tcpSendSegment>:
 * @return Error code
 **/

error_t tcpSendSegment(Socket *socket, uint8_t flags, uint32_t seqNum,
   uint32_t ackNum, size_t length, bool_t addToQueue)
{
 80049c0:	b590      	push	{r4, r7, lr}
 80049c2:	b093      	sub	sp, #76	; 0x4c
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	460b      	mov	r3, r1
 80049ce:	72fb      	strb	r3, [r7, #11]
   TcpHeader *segment;
   TcpQueueItem *queueItem;
   IpPseudoHeader pseudoHeader;

   //Maximum segment size
   uint16_t mss = HTONS(socket->rmss);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049d6:	ba5b      	rev16	r3, r3
 80049d8:	b29b      	uxth	r3, r3
 80049da:	82fb      	strh	r3, [r7, #22]

   //Allocate a memory buffer to hold the TCP segment
   buffer = ipAllocBuffer(TCP_MAX_HEADER_LENGTH, &offset);
 80049dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049e0:	4619      	mov	r1, r3
 80049e2:	203c      	movs	r0, #60	; 0x3c
 80049e4:	f7fc ffd2 	bl	800198c <ipAllocBuffer>
 80049e8:	63b8      	str	r0, [r7, #56]	; 0x38
   //Failed to allocate memory?
   if(buffer == NULL)
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <tcpSendSegment+0x34>
      return ERROR_OUT_OF_MEMORY;
 80049f0:	2364      	movs	r3, #100	; 0x64
 80049f2:	e154      	b.n	8004c9e <tcpSendSegment+0x2de>

   //Point to the beginning of the TCP segment
   segment = netBufferAt(buffer, offset);
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	4619      	mov	r1, r3
 80049f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049fa:	f7fd fe31 	bl	8002660 <netBufferAt>
 80049fe:	6378      	str	r0, [r7, #52]	; 0x34

   //Format TCP header
   segment->srcPort = htons(socket->localPort);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8b1b      	ldrh	r3, [r3, #24]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fb fdcb 	bl	80005a0 <swapInt16>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	801a      	strh	r2, [r3, #0]
   segment->destPort = htons(socket->remotePort);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fb fdc2 	bl	80005a0 <swapInt16>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a22:	805a      	strh	r2, [r3, #2]
   segment->seqNum = htonl(seqNum);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fb fdc9 	bl	80005bc <swapInt32>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	605a      	str	r2, [r3, #4]
   segment->ackNum = (flags & TCP_FLAG_ACK) ? htonl(ackNum) : 0;
 8004a30:	7afb      	ldrb	r3, [r7, #11]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <tcpSendSegment+0x84>
 8004a3a:	6838      	ldr	r0, [r7, #0]
 8004a3c:	f7fb fdbe 	bl	80005bc <swapInt32>
 8004a40:	4602      	mov	r2, r0
 8004a42:	e000      	b.n	8004a46 <tcpSendSegment+0x86>
 8004a44:	2200      	movs	r2, #0
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a48:	609a      	str	r2, [r3, #8]
   segment->reserved1 = 0;
 8004a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a4c:	7b13      	ldrb	r3, [r2, #12]
 8004a4e:	f36f 0303 	bfc	r3, #0, #4
 8004a52:	7313      	strb	r3, [r2, #12]
   segment->dataOffset = 5;
 8004a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a56:	7b13      	ldrb	r3, [r2, #12]
 8004a58:	2105      	movs	r1, #5
 8004a5a:	f361 1307 	bfi	r3, r1, #4, #4
 8004a5e:	7313      	strb	r3, [r2, #12]
   segment->flags = flags;
 8004a60:	7afb      	ldrb	r3, [r7, #11]
 8004a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a66:	b2d9      	uxtb	r1, r3
 8004a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a6a:	7b53      	ldrb	r3, [r2, #13]
 8004a6c:	f361 0305 	bfi	r3, r1, #0, #6
 8004a70:	7353      	strb	r3, [r2, #13]
   segment->reserved2 = 0;
 8004a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a74:	7b53      	ldrb	r3, [r2, #13]
 8004a76:	f36f 1387 	bfc	r3, #6, #2
 8004a7a:	7353      	strb	r3, [r2, #13]
   segment->window = htons(socket->rcvWnd);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fb fd8c 	bl	80005a0 <swapInt16>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	81da      	strh	r2, [r3, #14]
   segment->checksum = 0;
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	2200      	movs	r2, #0
 8004a94:	741a      	strb	r2, [r3, #16]
 8004a96:	2200      	movs	r2, #0
 8004a98:	745a      	strb	r2, [r3, #17]
   segment->urgentPointer = 0;
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	749a      	strb	r2, [r3, #18]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	74da      	strb	r2, [r3, #19]

   //SYN flag set?
   if(flags & TCP_FLAG_SYN)
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <tcpSendSegment+0xfc>
   {
      //Append MSS option
      tcpAddOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE, &mss, sizeof(mss));
 8004aae:	f107 0216 	add.w	r2, r7, #22
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ab8:	f000 f9ce 	bl	8004e58 <tcpAddOption>
      tcpAddOption(segment, TCP_OPTION_SACK_PERMITTED, NULL, 0);
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + segment->dataOffset * 4);
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	7b1b      	ldrb	r3, [r3, #12]
 8004ac0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	4413      	add	r3, r2
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ad2:	f7fd fd1f 	bl	8002514 <netBufferSetLength>

   //Any data to send?
   if(length > 0)
 8004ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00f      	beq.n	8004afc <tcpSendSegment+0x13c>
   {
      //Copy data
      error = tcpReadTxBuffer(socket, seqNum, buffer, length);
 8004adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f001 fc13 	bl	800630e <tcpReadTxBuffer>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	867b      	strh	r3, [r7, #50]	; 0x32
      //Any error to report?
      if(error)
 8004aec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d004      	beq.n	8004afc <tcpSendSegment+0x13c>
      {
         //Clean up side effects
         netBufferFree(buffer);
 8004af2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004af4:	f7fd fcdd 	bl	80024b2 <netBufferFree>
         //Exit immediately
         return error;
 8004af8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004afa:	e0d0      	b.n	8004c9e <tcpSendSegment+0x2de>
      }
   }

   //Calculate the length of the complete TCP segment
   totalLength = segment->dataOffset * 4 + length;
 8004afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afe:	7b1b      	ldrb	r3, [r3, #12]
 8004b00:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0c:	4413      	add	r3, r2
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(socket->remoteIpAddr.length == sizeof(Ipv4Addr))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d128      	bne.n	8004b6a <tcpSendSegment+0x1aa>
   {
      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8004b18:	230c      	movs	r3, #12
 8004b1a:	61bb      	str	r3, [r7, #24]
      pseudoHeader.ipv4Data.srcAddr = socket->localIpAddr.ipv4Addr;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	61fb      	str	r3, [r7, #28]
      pseudoHeader.ipv4Data.destAddr = socket->remoteIpAddr.ipv4Addr;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	623b      	str	r3, [r7, #32]
      pseudoHeader.ipv4Data.reserved = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 8004b2e:	2306      	movs	r3, #6
 8004b30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      pseudoHeader.ipv4Data.length = htons(totalLength);
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fb fd31 	bl	80005a0 <swapInt16>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	84fb      	strh	r3, [r7, #38]	; 0x26

      //Calculate TCP header checksum
      segment->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 8004b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b44:	f107 0318 	add.w	r3, r7, #24
 8004b48:	1d18      	adds	r0, r3, #4
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b52:	210c      	movs	r1, #12
 8004b54:	f7fc fef1 	bl	800193a <ipCalcUpperLayerChecksumEx>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	821a      	strh	r2, [r3, #16]
      //This should never occur...
      return ERROR_INVALID_ADDRESS;
   }

   //Add current segment to retransmission queue?
   if(addToQueue)
 8004b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8082 	beq.w	8004c6c <tcpSendSegment+0x2ac>
 8004b68:	e004      	b.n	8004b74 <tcpSendSegment+0x1b4>
      netBufferFree(buffer);
 8004b6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b6c:	f7fd fca1 	bl	80024b2 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 8004b70:	23e4      	movs	r3, #228	; 0xe4
 8004b72:	e094      	b.n	8004c9e <tcpSendSegment+0x2de>
   {
      //Empty retransmission queue?
      if(!socket->retransmitQueue)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <tcpSendSegment+0x1d0>
      {
         //Create a new item
         queueItem = memPoolAlloc(sizeof(TcpQueueItem));
 8004b7e:	2058      	movs	r0, #88	; 0x58
 8004b80:	f7fd fbd2 	bl	8002328 <memPoolAlloc>
 8004b84:	63f8      	str	r0, [r7, #60]	; 0x3c
         //Add the newly created item to the queue
         socket->retransmitQueue = queueItem;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b8a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 8004b8e:	e014      	b.n	8004bba <tcpSendSegment+0x1fa>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->retransmitQueue;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
         //Reach the last item of the retransmission queue
         while(queueItem->next) queueItem = queueItem->next;
 8004b98:	e002      	b.n	8004ba0 <tcpSendSegment+0x1e0>
 8004b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f8      	bne.n	8004b9a <tcpSendSegment+0x1da>
         //Create a new item
         queueItem->next = memPoolAlloc(sizeof(TcpQueueItem));
 8004ba8:	2058      	movs	r0, #88	; 0x58
 8004baa:	f7fd fbbd 	bl	8002328 <memPoolAlloc>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb2:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8004bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 8004bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d104      	bne.n	8004bca <tcpSendSegment+0x20a>
      {
         //Free previously allocated memory
         netBufferFree(buffer);
 8004bc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004bc2:	f7fd fc76 	bl	80024b2 <netBufferFree>
         //Return status
         return ERROR_OUT_OF_MEMORY;
 8004bc6:	2364      	movs	r3, #100	; 0x64
 8004bc8:	e069      	b.n	8004c9e <tcpSendSegment+0x2de>
      }

      //Retransmission mechanism requires additional information
      queueItem->next = NULL;
 8004bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
      queueItem->length = length;
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bd4:	605a      	str	r2, [r3, #4]
      queueItem->sacked = FALSE;
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd8:	2200      	movs	r2, #0
 8004bda:	609a      	str	r2, [r3, #8]
      //Save TCP header
      memcpy(queueItem->header, segment, segment->dataOffset * 4);
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	f103 001c 	add.w	r0, r3, #28
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	7b1b      	ldrb	r3, [r3, #12]
 8004be6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	461a      	mov	r2, r3
 8004bf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bf2:	f016 fa95 	bl	801b120 <memcpy>
      //Save pseudo header
      queueItem->pseudoHeader = pseudoHeader;
 8004bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf8:	f103 040c 	add.w	r4, r3, #12
 8004bfc:	f107 0318 	add.w	r3, r7, #24
 8004c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

      //Take one RTT measurement at a time
      if(!socket->rttBusy)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d116      	bne.n	8004c3e <tcpSendSegment+0x27e>
      {
         //Save round-trip start time
         socket->rttStartTime = osGetSystemTime();
 8004c10:	f7fb fdde 	bl	80007d0 <osGetSystemTime>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         //Record current sequence number
         socket->rttSeqNum = ntohl(segment->seqNum);
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fb fccb 	bl	80005bc <swapInt32>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
         //Wait for an acknowledgment that covers that sequence number...
         socket->rttBusy = TRUE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
         //Reset the byte counter
         socket->n = 0;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
      }

      //Check whether the RTO timer is already running
      if(!tcpTimerRunning(&socket->retransmitTimer))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c44:	4618      	mov	r0, r3
 8004c46:	f001 fe1c 	bl	8006882 <tcpTimerRunning>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <tcpSendSegment+0x2ac>
      {
         //If the timer is not running, start it running so that
         //it will expire after RTO seconds
         tcpTimerStart(&socket->retransmitTimer, socket->rto);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f001 fdee 	bl	8006840 <tcpTimerStart>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   //Debug message
   TRACE_DEBUG("%s: Sending TCP segment (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment, length, socket->iss, socket->irs);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c78:	f001 fc32 	bl	80064e0 <tcpDumpHeader>

   //Send TCP segment
   error = ipSendDatagram(socket->interface, &pseudoHeader, buffer, offset, 0);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68d8      	ldr	r0, [r3, #12]
 8004c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c82:	f107 0118 	add.w	r1, r7, #24
 8004c86:	2300      	movs	r3, #0
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c8e:	f7fc fcd7 	bl	8001640 <ipSendDatagram>
 8004c92:	4603      	mov	r3, r0
 8004c94:	867b      	strh	r3, [r7, #50]	; 0x32

   //Free previously allocated memory
   netBufferFree(buffer);
 8004c96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c98:	f7fd fc0b 	bl	80024b2 <netBufferFree>
   //Return error code
   return error;
 8004c9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3744      	adds	r7, #68	; 0x44
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd90      	pop	{r4, r7, pc}

08004ca6 <tcpSendResetSegment>:
 * @return Error code
 **/

error_t tcpSendResetSegment(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b092      	sub	sp, #72	; 0x48
 8004caa:	af02      	add	r7, sp, #8
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	603b      	str	r3, [r7, #0]
   NetBuffer *buffer;
   TcpHeader *segment2;
   IpPseudoHeader pseudoHeader2;

   //Check whether the ACK bit is set
   if(segment->flags & TCP_FLAG_ACK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	7b5b      	ldrb	r3, [r3, #13]
 8004cb8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d008      	beq.n	8004cd8 <tcpSendResetSegment+0x32>
   {
      //If the incoming segment has an ACK field, the reset takes
      //its sequence number from the ACK field of the segment
      flags = TCP_FLAG_RST;
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      seqNum = segment->ackNum;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	63bb      	str	r3, [r7, #56]	; 0x38
      ackNum = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd6:	e021      	b.n	8004d1c <tcpSendResetSegment+0x76>
   }
   else
   {
      //Otherwise the reset has sequence number zero and the ACK field is set to
      //the sum of the sequence number and segment length of the incoming segment
      flags = TCP_FLAG_RST | TCP_FLAG_ACK;
 8004cd8:	2314      	movs	r3, #20
 8004cda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      seqNum = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
      ackNum = segment->seqNum + length;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	4413      	add	r3, r2
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34

      //Advance the acknowledgment number over the SYN or the FIN
      if(segment->flags & TCP_FLAG_SYN)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	7b5b      	ldrb	r3, [r3, #13]
 8004cf0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <tcpSendResetSegment+0x5e>
         ackNum++;
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d00:	3301      	adds	r3, #1
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
      if(segment->flags & TCP_FLAG_FIN)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7b5b      	ldrb	r3, [r3, #13]
 8004d08:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <tcpSendResetSegment+0x76>
         ackNum++;
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	3301      	adds	r3, #1
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
   }

   //Allocate a memory buffer to hold the reset segment
   buffer = ipAllocBuffer(sizeof(TcpHeader), &offset);
 8004d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d20:	4619      	mov	r1, r3
 8004d22:	2014      	movs	r0, #20
 8004d24:	f7fc fe32 	bl	800198c <ipAllocBuffer>
 8004d28:	6338      	str	r0, [r7, #48]	; 0x30
   //Failed to allocate memory?
   if(buffer == NULL)
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <tcpSendResetSegment+0x8e>
      return ERROR_OUT_OF_MEMORY;
 8004d30:	2364      	movs	r3, #100	; 0x64
 8004d32:	e08d      	b.n	8004e50 <tcpSendResetSegment+0x1aa>

   //Point to the beginning of the TCP segment
   segment2 = netBufferAt(buffer, offset);
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	4619      	mov	r1, r3
 8004d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3a:	f7fd fc91 	bl	8002660 <netBufferAt>
 8004d3e:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Format TCP header
   segment2->srcPort = htons(segment->destPort);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	885b      	ldrh	r3, [r3, #2]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fc2a 	bl	80005a0 <swapInt16>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	801a      	strh	r2, [r3, #0]
   segment2->destPort = htons(segment->srcPort);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fc20 	bl	80005a0 <swapInt16>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	805a      	strh	r2, [r3, #2]
   segment2->seqNum = htonl(seqNum);
 8004d68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d6a:	f7fb fc27 	bl	80005bc <swapInt32>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	605a      	str	r2, [r3, #4]
   segment2->ackNum = htonl(ackNum);
 8004d74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d76:	f7fb fc21 	bl	80005bc <swapInt32>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	609a      	str	r2, [r3, #8]
   segment2->reserved1 = 0;
 8004d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d82:	7b13      	ldrb	r3, [r2, #12]
 8004d84:	f36f 0303 	bfc	r3, #0, #4
 8004d88:	7313      	strb	r3, [r2, #12]
   segment2->dataOffset = 5;
 8004d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8c:	7b13      	ldrb	r3, [r2, #12]
 8004d8e:	2105      	movs	r1, #5
 8004d90:	f361 1307 	bfi	r3, r1, #4, #4
 8004d94:	7313      	strb	r3, [r2, #12]
   segment2->flags = flags;
 8004d96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9e:	b2d9      	uxtb	r1, r3
 8004da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da2:	7b53      	ldrb	r3, [r2, #13]
 8004da4:	f361 0305 	bfi	r3, r1, #0, #6
 8004da8:	7353      	strb	r3, [r2, #13]
   segment2->reserved2 = 0;
 8004daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dac:	7b53      	ldrb	r3, [r2, #13]
 8004dae:	f36f 1387 	bfc	r3, #6, #2
 8004db2:	7353      	strb	r3, [r2, #13]
   segment2->window = 0;
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	2200      	movs	r2, #0
 8004db8:	739a      	strb	r2, [r3, #14]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	73da      	strb	r2, [r3, #15]
   segment2->checksum = 0;
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	741a      	strb	r2, [r3, #16]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	745a      	strb	r2, [r3, #17]
   segment2->urgentPointer = 0;
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	2200      	movs	r2, #0
 8004dcc:	749a      	strb	r2, [r3, #18]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	74da      	strb	r2, [r3, #19]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d136      	bne.n	8004e48 <tcpSendResetSegment+0x1a2>
   {
      //Format IPv4 pseudo header
      pseudoHeader2.length = sizeof(Ipv4PseudoHeader);
 8004dda:	230c      	movs	r3, #12
 8004ddc:	617b      	str	r3, [r7, #20]
      pseudoHeader2.ipv4Data.srcAddr = pseudoHeader->ipv4Data.destAddr;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
      pseudoHeader2.ipv4Data.destAddr = pseudoHeader->ipv4Data.srcAddr;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	61fb      	str	r3, [r7, #28]
      pseudoHeader2.ipv4Data.reserved = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 3020 	strb.w	r3, [r7, #32]
      pseudoHeader2.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 8004df0:	2306      	movs	r3, #6
 8004df2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      pseudoHeader2.ipv4Data.length = HTONS(sizeof(TcpHeader));
 8004df6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004dfa:	847b      	strh	r3, [r7, #34]	; 0x22

      //Calculate TCP header checksum
      segment2->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader2.ipv4Data,
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfe:	f107 0314 	add.w	r3, r7, #20
 8004e02:	1d18      	adds	r0, r3, #4
 8004e04:	2314      	movs	r3, #20
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0c:	210c      	movs	r1, #12
 8004e0e:	f7fc fd94 	bl	800193a <ipCalcUpperLayerChecksumEx>
 8004e12:	4603      	mov	r3, r0
 8004e14:	461a      	mov	r2, r3
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	821a      	strh	r2, [r3, #16]

   //Debug message
   TRACE_DEBUG("%s: Sending TCP reset segment...\r\n",
      formatSystemTime(osGetSystemTime(), NULL));
   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment2, length, 0, 0);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e22:	f001 fb5d 	bl	80064e0 <tcpDumpHeader>

   //Send TCP segment
   error = ipSendDatagram(interface, &pseudoHeader2, buffer, offset, 0);
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	f107 0114 	add.w	r1, r7, #20
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7fc fc03 	bl	8001640 <ipSendDatagram>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	857b      	strh	r3, [r7, #42]	; 0x2a

   //Free previously allocated memory
   netBufferFree(buffer);
 8004e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e40:	f7fd fb37 	bl	80024b2 <netBufferFree>
   //Return error code
   return error;
 8004e44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e46:	e003      	b.n	8004e50 <tcpSendResetSegment+0x1aa>
      netBufferFree(buffer);
 8004e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4a:	f7fd fb32 	bl	80024b2 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 8004e4e:	23e4      	movs	r3, #228	; 0xe4
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3740      	adds	r7, #64	; 0x40
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <tcpAddOption>:
 * @return Error code
 **/

error_t tcpAddOption(TcpHeader *segment, uint8_t kind, const void *value,
   uint8_t length)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	461a      	mov	r2, r3
 8004e64:	460b      	mov	r3, r1
 8004e66:	72fb      	strb	r3, [r7, #11]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	72bb      	strb	r3, [r7, #10]
   uint_t i;
   size_t paddingSize;
   TcpOption *option;

   //Length of the complete option field
   length += sizeof(TcpOption);
 8004e6c:	7abb      	ldrb	r3, [r7, #10]
 8004e6e:	3302      	adds	r3, #2
 8004e70:	72bb      	strb	r3, [r7, #10]

   //Make sure there is enough space to add the specified option
   if((segment->dataOffset * 4 + length) > TCP_MAX_HEADER_LENGTH)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	7b1b      	ldrb	r3, [r3, #12]
 8004e76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	009a      	lsls	r2, r3, #2
 8004e7e:	7abb      	ldrb	r3, [r7, #10]
 8004e80:	4413      	add	r3, r2
 8004e82:	2b3c      	cmp	r3, #60	; 0x3c
 8004e84:	dd01      	ble.n	8004e8a <tcpAddOption+0x32>
      return ERROR_FAILURE;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e046      	b.n	8004f18 <tcpAddOption+0xc0>

   //Index of the first available byte
   i = segment->dataOffset * 4 - sizeof(TcpHeader);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	7b1b      	ldrb	r3, [r3, #12]
 8004e8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	3b14      	subs	r3, #20
 8004e98:	61fb      	str	r3, [r7, #28]

   //Calculate the number of padding bytes
   paddingSize = (length % 4) ? 4 - (length % 4) : 0;
 8004e9a:	7abb      	ldrb	r3, [r7, #10]
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <tcpAddOption+0x5a>
 8004ea6:	7abb      	ldrb	r3, [r7, #10]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	f1c3 0304 	rsb	r3, r3, #4
 8004eb0:	e000      	b.n	8004eb4 <tcpAddOption+0x5c>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
   //Write padding bytes
   while(paddingSize--)
 8004eb6:	e006      	b.n	8004ec6 <tcpAddOption+0x6e>
      segment->options[i++] = TCP_OPTION_NOP;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	61fa      	str	r2, [r7, #28]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	751a      	strb	r2, [r3, #20]
   while(paddingSize--)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	61ba      	str	r2, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f3      	bne.n	8004eb8 <tcpAddOption+0x60>

   //Point to the current location
   option = (TcpOption *) (segment->options + i);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f103 0214 	add.w	r2, r3, #20
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
   //Write specified option
   option->kind = kind;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	7afa      	ldrb	r2, [r7, #11]
 8004ee0:	701a      	strb	r2, [r3, #0]
   option->length = length;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	7aba      	ldrb	r2, [r7, #10]
 8004ee6:	705a      	strb	r2, [r3, #1]
   memcpy(option->value, value, length - sizeof(TcpOption));
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	1c98      	adds	r0, r3, #2
 8004eec:	7abb      	ldrb	r3, [r7, #10]
 8004eee:	3b02      	subs	r3, #2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	f016 f914 	bl	801b120 <memcpy>
   //Adjust index value
   i += length;
 8004ef8:	7abb      	ldrb	r3, [r7, #10]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	61fb      	str	r3, [r7, #28]

   //Update TCP header length
   segment->dataOffset = (sizeof(TcpHeader) + i) / 4;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	3314      	adds	r3, #20
 8004f04:	089b      	lsrs	r3, r3, #2
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	b2d9      	uxtb	r1, r3
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	7b13      	ldrb	r3, [r2, #12]
 8004f10:	f361 1307 	bfi	r3, r1, #4, #4
 8004f14:	7313      	strb	r3, [r2, #12]

   //Option successfully added
   return NO_ERROR;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <tcpGetOption>:
 * @return If the specified option is found, a pointer to the corresponding
 *   option is returned. Otherwise NULL pointer is returned
 **/

TcpOption *tcpGetOption(TcpHeader *segment, uint8_t kind)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
   size_t length;
   uint_t i;
   TcpOption *option;

   //Make sure the TCP header is valid
   if(segment->dataOffset < 5)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	7b1b      	ldrb	r3, [r3, #12]
 8004f30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d801      	bhi.n	8004f3e <tcpGetOption+0x1e>
      return NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e03d      	b.n	8004fba <tcpGetOption+0x9a>

   //Compute the length of the options field
   length = segment->dataOffset * 4 - sizeof(TcpHeader);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	7b1b      	ldrb	r3, [r3, #12]
 8004f42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	3b14      	subs	r3, #20
 8004f4c:	613b      	str	r3, [r7, #16]

   //Point to the very first option
   i = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]

   //Parse TCP options
   while(i < length)
 8004f52:	e02b      	b.n	8004fac <tcpGetOption+0x8c>
   {
      //Point to the current option
      option = (TcpOption *) (segment->options + i);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f103 0214 	add.w	r2, r3, #20
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

      //NOP option detected?
      if(option->kind == TCP_OPTION_NOP)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d103      	bne.n	8004f70 <tcpGetOption+0x50>
      {
         i++;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	617b      	str	r3, [r7, #20]
         continue;
 8004f6e:	e01d      	b.n	8004fac <tcpGetOption+0x8c>
      }
      //END option detected?
      if(option->kind == TCP_OPTION_END)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01e      	beq.n	8004fb6 <tcpGetOption+0x96>
         break;
      //Check option length
      if((i + 1) >= length || (i + option->length) > length)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d91a      	bls.n	8004fb8 <tcpGetOption+0x98>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	461a      	mov	r2, r3
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d312      	bcc.n	8004fb8 <tcpGetOption+0x98>
         break;

      //Current option kind match the specified one?
      if(option->kind == kind)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d101      	bne.n	8004fa0 <tcpGetOption+0x80>
         return option;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	e00c      	b.n	8004fba <tcpGetOption+0x9a>

      //Jump to next the next option
      i += option->length;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	4413      	add	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
   while(i < length)
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3cf      	bcc.n	8004f54 <tcpGetOption+0x34>
 8004fb4:	e000      	b.n	8004fb8 <tcpGetOption+0x98>
         break;
 8004fb6:	bf00      	nop
   }

   //Specified option code not found
   return NULL;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <tcpCheckSequenceNumber>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the incoming segment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckSequenceNumber(Socket *socket, TcpHeader *segment, size_t length)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b088      	sub	sp, #32
 8004fca:	af02      	add	r7, sp, #8
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
   //Acceptability test for an incoming segment
   bool_t acceptable = FALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]

   //Case where both segment length and receive window are zero
   if(!length && !socket->rcvWnd)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10d      	bne.n	8004ff8 <tcpCheckSequenceNumber+0x32>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <tcpCheckSequenceNumber+0x32>
   {
      //Make sure that SEG.SEQ = RCV.NXT
      if(segment->seqNum == socket->rcvNxt)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d159      	bne.n	80050a6 <tcpCheckSequenceNumber+0xe0>
      {
         acceptable = TRUE;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	617b      	str	r3, [r7, #20]
      if(segment->seqNum == socket->rcvNxt)
 8004ff6:	e056      	b.n	80050a6 <tcpCheckSequenceNumber+0xe0>
      }
   }
   //Case where segment length is zero and receive window is non zero
   else if(!length && socket->rcvWnd)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d119      	bne.n	8005032 <tcpCheckSequenceNumber+0x6c>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8005004:	2b00      	cmp	r3, #0
 8005006:	d014      	beq.n	8005032 <tcpCheckSequenceNumber+0x6c>
   {
      //Make sure that RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	db46      	blt.n	80050a4 <tcpCheckSequenceNumber+0xde>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 8005024:	440b      	add	r3, r1
 8005026:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8005028:	2b00      	cmp	r3, #0
 800502a:	da3b      	bge.n	80050a4 <tcpCheckSequenceNumber+0xde>
      {
         acceptable = TRUE;
 800502c:	2301      	movs	r3, #1
 800502e:	617b      	str	r3, [r7, #20]
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8005030:	e038      	b.n	80050a4 <tcpCheckSequenceNumber+0xde>
      }
   }
   //Case where both segment length and receive window are non zero
   else if(length && socket->rcvWnd)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d036      	beq.n	80050a6 <tcpCheckSequenceNumber+0xe0>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800503e:	2b00      	cmp	r3, #0
 8005040:	d031      	beq.n	80050a6 <tcpCheckSequenceNumber+0xe0>
   {
      //Check whether RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	db0d      	blt.n	800506c <tcpCheckSequenceNumber+0xa6>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005058:	68f9      	ldr	r1, [r7, #12]
 800505a:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 800505e:	440b      	add	r3, r1
 8005060:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8005062:	2b00      	cmp	r3, #0
 8005064:	da02      	bge.n	800506c <tcpCheckSequenceNumber+0xa6>
      {
         acceptable = TRUE;
 8005066:	2301      	movs	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e01c      	b.n	80050a6 <tcpCheckSequenceNumber+0xe0>
      }
      //or RCV.NXT <= SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	441a      	add	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005078:	425b      	negs	r3, r3
 800507a:	4413      	add	r3, r2
 800507c:	3b01      	subs	r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	db11      	blt.n	80050a6 <tcpCheckSequenceNumber+0xe0>
         TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt + socket->rcvWnd) < 0)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	441a      	add	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 8005094:	440b      	add	r3, r1
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	3b01      	subs	r3, #1
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 800509a:	2b00      	cmp	r3, #0
 800509c:	da03      	bge.n	80050a6 <tcpCheckSequenceNumber+0xe0>
      {
         acceptable = TRUE;
 800509e:	2301      	movs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e000      	b.n	80050a6 <tcpCheckSequenceNumber+0xe0>
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 80050a4:	bf00      	nop
      }
   }

   //Non acceptable sequence number?
   if(!acceptable)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d117      	bne.n	80050dc <tcpCheckSequenceNumber+0x116>
      //Debug message
      TRACE_WARNING("Sequence number is not acceptable!\r\n");

      //If an incoming segment is not acceptable, an acknowledgment
      //should be sent in reply (unless the RST bit is set)
      if(!(segment->flags & TCP_FLAG_RST))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	7b5b      	ldrb	r3, [r3, #13]
 80050b0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10c      	bne.n	80050d8 <tcpCheckSequenceNumber+0x112>
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80050c6:	2300      	movs	r3, #0
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	2300      	movs	r3, #0
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	460b      	mov	r3, r1
 80050d0:	2110      	movs	r1, #16
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fc74 	bl	80049c0 <tcpSendSegment>

      //Return status code
      return ERROR_FAILURE;
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <tcpCheckSequenceNumber+0x118>
   }

   //Sequence number is acceptable
   return NO_ERROR;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <tcpCheckSyn>:
 * @param[in] length Length of the segment data
 * @return ERROR_FAILURE if the SYN is in the window, NO_ERROR otherwise
 **/

error_t tcpCheckSyn(Socket *socket, TcpHeader *segment, size_t length)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b086      	sub	sp, #24
 80050ea:	af02      	add	r7, sp, #8
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
   //Check the SYN bit
   if(segment->flags & TCP_FLAG_SYN)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	7b5b      	ldrb	r3, [r3, #13]
 80050f6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d025      	beq.n	8005150 <tcpCheckSyn+0x6a>
   {
      //If this step is reached, the SYN is in the window. It is an error
      //and a reset shall be sent in response
      if(segment->flags & TCP_FLAG_ACK)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	7b5b      	ldrb	r3, [r3, #13]
 8005108:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <tcpCheckSyn+0x48>
      {
         tcpSendSegment(socket, TCP_FLAG_RST, segment->ackNum, 0, 0, FALSE);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	2300      	movs	r3, #0
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	2300      	movs	r3, #0
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	2300      	movs	r3, #0
 8005124:	2104      	movs	r1, #4
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff fc4a 	bl	80049c0 <tcpSendSegment>
 800512c:	e00e      	b.n	800514c <tcpCheckSyn+0x66>
      }
      else
      {
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
            segment->seqNum + length + 1, 0, FALSE);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4413      	add	r3, r2
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	2300      	movs	r3, #0
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	2200      	movs	r2, #0
 8005144:	2114      	movs	r1, #20
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff fc3a 	bl	80049c0 <tcpSendSegment>
      }

      //Return immediately
      return ERROR_FAILURE;
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <tcpCheckSyn+0x6c>
   }

   //No error to report
   return NO_ERROR;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <tcpCheckAck>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the acknowledgment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckAck(Socket *socket, TcpHeader *segment, size_t length)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b08c      	sub	sp, #48	; 0x30
 800515e:	af02      	add	r7, sp, #8
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
   uint_t thresh;
   bool_t duplicateFlag;
   bool_t updateFlag;

   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	7b5b      	ldrb	r3, [r3, #13]
 800516a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <tcpCheckAck+0x22>
      return ERROR_FAILURE;
 8005178:	2301      	movs	r3, #1
 800517a:	e122      	b.n	80053c2 <tcpCheckAck+0x268>

   //Test the case where SEG.ACK < SND.UNA
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) < 0)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	da01      	bge.n	800518e <tcpCheckAck+0x34>
   {
      //An old duplicate ACK has been received
      return NO_ERROR;
 800518a:	2300      	movs	r3, #0
 800518c:	e119      	b.n	80053c2 <tcpCheckAck+0x268>
   }
   //Test the case where SEG.ACK > SND.NXT
   else if(TCP_CMP_SEQ(segment->ackNum, socket->sndNxt) > 0)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	dd0e      	ble.n	80051ba <tcpCheckAck+0x60>
   {
      //Send an ACK segment indicating the current send sequence number
      //and the acknowledgment number expected to be received
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80051a4:	2300      	movs	r3, #0
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	2300      	movs	r3, #0
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	460b      	mov	r3, r1
 80051ae:	2110      	movs	r1, #16
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff fc05 	bl	80049c0 <tcpSendSegment>

      //The ACK segment acknowledges something not yet sent
      return ERROR_FAILURE;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e103      	b.n	80053c2 <tcpCheckAck+0x268>
   }

   //Check whether the ACK is a duplicate
   duplicateFlag = tcpIsDuplicateAck(socket, segment, length);
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f93e 	bl	8005440 <tcpIsDuplicateAck>
 80051c4:	61f8      	str	r0, [r7, #28]

   //The send window should be updated
   tcpUpdateSendWindow(socket, segment);
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fbeb 	bl	80059a4 <tcpUpdateSendWindow>

   //The incoming ACK segment acknowledges new data?
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) > 0)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dd77      	ble.n	80052cc <tcpCheckAck+0x172>
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Compute the number of bytes acknowledged by the incoming ACK
      n = segment->ackNum - socket->sndUna;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24

      //Check whether the ACK segment acknowledges our SYN
      if(socket->sndUna == socket->iss)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d102      	bne.n	80051fa <tcpCheckAck+0xa0>
         n--;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	3b01      	subs	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24

      //Total number of bytes acknowledged during the whole round-trip
      socket->n += n;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	441a      	add	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
      //Update SND.UNA pointer
      socket->sndUna = segment->ackNum;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	661a      	str	r2, [r3, #96]	; 0x60

      //Compute retransmission timeout
      updateFlag = tcpComputeRto(socket);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fc9f 	bl	8005b56 <tcpComputeRto>
 8005218:	6178      	str	r0, [r7, #20]

      //Any segments on the retransmission queue which are thereby
      //entirely acknowledged are removed
      tcpUpdateRetransmitQueue(socket);
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fa7f 	bl	800571e <tcpUpdateRetransmitQueue>

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005226:	2b01      	cmp	r3, #1
 8005228:	d105      	bne.n	8005236 <tcpCheckAck+0xdc>
      {
         //Invoke fast recovery (refer to RFC 6582)
         tcpFastRecovery(socket, segment, n);
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f96e 	bl	8005510 <tcpFastRecovery>
 8005234:	e03c      	b.n	80052b0 <tcpCheckAck+0x156>
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

         //Check congestion state
         if(socket->congestState == TCP_CONGEST_STATE_LOSS_RECOVERY)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005244:	2b02      	cmp	r3, #2
 8005246:	d103      	bne.n	8005250 <tcpCheckAck+0xf6>
         {
            //Invoke fast loss recovery
            tcpFastLossRecovery(socket, segment);
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f9a7 	bl	800559e <tcpFastLossRecovery>
         }

         //Slow start algorithm is used when cwnd is lower than ssthresh
         if(socket->cwnd < socket->ssthresh)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800525c:	429a      	cmp	r2, r3
 800525e:	d211      	bcs.n	8005284 <tcpCheckAck+0x12a>
         {
            //During slow start, TCP increments cwnd by at most SMSS bytes
            //for each ACK received that cumulatively acknowledges new data
            socket->cwnd += MIN(n, socket->smss);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800526c:	4619      	mov	r1, r3
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	428b      	cmp	r3, r1
 8005272:	bf28      	it	cs
 8005274:	460b      	movcs	r3, r1
 8005276:	b29b      	uxth	r3, r3
 8005278:	4413      	add	r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005282:	e015      	b.n	80052b0 <tcpCheckAck+0x156>
         }
         //Congestion avoidance algorithm is used when cwnd exceeds ssthres
         else
         {
            //Congestion window is updated once per RTT
            if(updateFlag)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d012      	beq.n	80052b0 <tcpCheckAck+0x156>
            {
               //TCP must not increment cwnd by more than SMSS bytes
               socket->cwnd += MIN(socket->n, socket->smss);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005296:	4619      	mov	r1, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800529e:	428b      	cmp	r3, r1
 80052a0:	bf28      	it	cs
 80052a2:	460b      	movcs	r3, r1
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	4413      	add	r3, r2
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
            }
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f8b2 209a 	ldrh.w	r2, [r2, #154]	; 0x9a
 80052bc:	4293      	cmp	r3, r2
 80052be:	bf28      	it	cs
 80052c0:	4613      	movcs	r3, r2
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80052ca:	e076      	b.n	80053ba <tcpCheckAck+0x260>
   //The incoming ACK segment does not acknowledge new data?
   else
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check whether the acknowledgment is a duplicate
      if(duplicateFlag)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <tcpCheckAck+0x188>
      {
         //Increment duplicate ACK counter
         socket->dupAckCount++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80052e0:	e003      	b.n	80052ea <tcpCheckAck+0x190>
         TRACE_INFO("TCP duplicate ACK #%u\r\n", socket->dupAckCount);
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      }

      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_IDLE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d142      	bne.n	800537a <tcpCheckAck+0x220>
      {
         //Use default duplicate ACK threshold
         thresh = TCP_FAST_RETRANSMIT_THRES;
 80052f4:	2303      	movs	r3, #3
 80052f6:	623b      	str	r3, [r7, #32]
         //Amount of data sent but not yet acknowledged
         ownd = socket->sndNxt - socket->sndUna;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	61bb      	str	r3, [r7, #24]

         //Test if there is either no unsent data ready for transmission at
         //the sender, or the advertised receive window does not permit new
         //segments to be transmitted (refer to RFC 5827 section 3.1)
         if(socket->sndUser == 0 || socket->sndWnd <= (socket->sndNxt - socket->sndUna))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <tcpCheckAck+0x1ca>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005314:	4619      	mov	r1, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	4299      	cmp	r1, r3
 8005322:	d817      	bhi.n	8005354 <tcpCheckAck+0x1fa>
         {
            //Compute the duplicate ACK threshold used to trigger a
            //retransmission
            if(ownd <= (3 * socket->smss))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800532a:	461a      	mov	r2, r3
 800532c:	4613      	mov	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4413      	add	r3, r2
 8005332:	461a      	mov	r2, r3
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	4293      	cmp	r3, r2
 8005338:	d802      	bhi.n	8005340 <tcpCheckAck+0x1e6>
               thresh = 1;
 800533a:	2301      	movs	r3, #1
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	e009      	b.n	8005354 <tcpCheckAck+0x1fa>
            else if(ownd <= (4 * socket->smss))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	461a      	mov	r2, r3
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	4293      	cmp	r3, r2
 800534e:	d801      	bhi.n	8005354 <tcpCheckAck+0x1fa>
               thresh = 2;
 8005350:	2302      	movs	r3, #2
 8005352:	623b      	str	r3, [r7, #32]
         }

         //Check the number of duplicate ACKs that have been received
         if(socket->dupAckCount >= thresh)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800535a:	6a3a      	ldr	r2, [r7, #32]
 800535c:	429a      	cmp	r2, r3
 800535e:	d81f      	bhi.n	80053a0 <tcpCheckAck+0x246>
         {
            //The TCP sender first checks the value of recover to see if the
            //cumulative acknowledgment field covers more than recover
            if(TCP_CMP_SEQ(segment->ackNum, socket->recover + 1) > 0)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	dd16      	ble.n	80053a0 <tcpCheckAck+0x246>
            {
               //Invoke Fast Retransmit (refer to RFC 6582)
               tcpFastRetransmit(socket);
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f894 	bl	80054a0 <tcpFastRetransmit>
 8005378:	e012      	b.n	80053a0 <tcpCheckAck+0x246>
               //If not, the TCP does not enter fast retransmit and does not
               //reset ssthres...
            }
         }
      }
      else if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005380:	2b01      	cmp	r3, #1
 8005382:	d10d      	bne.n	80053a0 <tcpCheckAck+0x246>
      {
         //Duplicate ACK received?
         if(duplicateFlag)
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <tcpCheckAck+0x246>
         {
            //For each additional duplicate ACK received (after the third),
            //cwnd must be incremented by SMSS. This artificially inflates
            //the congestion window in order to reflect the additional
            //segment that has left the network
            socket->cwnd += socket->smss;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005396:	4413      	add	r3, r2
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	f8b2 209a 	ldrh.w	r2, [r2, #154]	; 0x9a
 80053ac:	4293      	cmp	r3, r2
 80053ae:	bf28      	it	cs
 80053b0:	4613      	movcs	r3, r2
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
#endif
   }

   //Update TX events
   tcpUpdateEvents(socket);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fdfc 	bl	8005fb8 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3728      	adds	r7, #40	; 0x28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <tcpIsDuplicateSyn>:
 * @return TRUE if the SYN segment is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateSyn(Socket *socket, IpPseudoHeader *pseudoHeader,
   TcpHeader *segment)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
   bool_t flag;
   TcpSynQueueItem *queueItem;

   //Initialize flag
   flag = FALSE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]

   //Point to the very first item
   queueItem = socket->synQueue;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80053e0:	613b      	str	r3, [r7, #16]

   //Loop through the SYN queue
   while(queueItem != NULL)
 80053e2:	e023      	b.n	800542c <tcpIsDuplicateSyn+0x62>
   {
#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d11c      	bne.n	8005426 <tcpIsDuplicateSyn+0x5c>
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	695b      	ldr	r3, [r3, #20]
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d118      	bne.n	8005426 <tcpIsDuplicateSyn+0x5c>
         pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	681b      	ldr	r3, [r3, #0]
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d114      	bne.n	8005426 <tcpIsDuplicateSyn+0x5c>
      {
         //Check source and destination addresses
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d10e      	bne.n	8005426 <tcpIsDuplicateSyn+0x5c>
            queueItem->destAddr.ipv4Addr == pseudoHeader->ipv4Data.destAddr)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	689b      	ldr	r3, [r3, #8]
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8005410:	429a      	cmp	r2, r3
 8005412:	d108      	bne.n	8005426 <tcpIsDuplicateSyn+0x5c>
         {
            //Check source port
            if(queueItem->srcPort == segment->srcPort)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	8a1a      	ldrh	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	429a      	cmp	r2, r3
 8005420:	d101      	bne.n	8005426 <tcpIsDuplicateSyn+0x5c>
            {
               //Duplicate SYN
               flag = TRUE;
 8005422:	2301      	movs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
      {
         //Just for sanity
      }

      //Next item
      queueItem = queueItem->next;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	613b      	str	r3, [r7, #16]
   while(queueItem != NULL)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1d8      	bne.n	80053e4 <tcpIsDuplicateSyn+0x1a>
   }

   //Return TRUE if the SYN segment is a duplicate
   return flag;
 8005432:	697b      	ldr	r3, [r7, #20]
}
 8005434:	4618      	mov	r0, r3
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <tcpIsDuplicateAck>:
 * @param[in] length Length of the segment data
 * @return TRUE if the ACK is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
   bool_t flag;

   //An ACK is considered a duplicate when the following conditions are met
   flag = FALSE;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]

   //The receiver of the ACK has outstanding data
   if(socket->retransmitQueue != NULL)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01b      	beq.n	8005492 <tcpIsDuplicateAck+0x52>
   {
      //The incoming acknowledgment carries no data
      if(length == 0)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d118      	bne.n	8005492 <tcpIsDuplicateAck+0x52>
      {
         //the SYN and FIN bits are both off
         if(!(segment->flags & (TCP_FLAG_SYN | TCP_FLAG_FIN)))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	7b5b      	ldrb	r3, [r3, #13]
 8005464:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <tcpIsDuplicateAck+0x52>
         {
            //The acknowledgment number is equal to the greatest acknowledgment
            //received on the given connection
            if(segment->ackNum == socket->sndUna)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	429a      	cmp	r2, r3
 800547c:	d109      	bne.n	8005492 <tcpIsDuplicateAck+0x52>
            {
               //The advertised window in the incoming acknowledgment equals
               //the advertised window in the last incoming acknowledgment
               if(segment->window == socket->sndWnd)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	89db      	ldrh	r3, [r3, #14]
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800548a:	429a      	cmp	r2, r3
 800548c:	d101      	bne.n	8005492 <tcpIsDuplicateAck+0x52>
               {
                  //Duplicate ACK
                  flag = TRUE;
 800548e:	2301      	movs	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
         }
      }
   }

   //Return TRUE if the acknowledgment is a duplicate
   return flag;
 8005492:	697b      	ldr	r3, [r7, #20]
}
 8005494:	4618      	mov	r0, r3
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <tcpFastRetransmit>:
 * @brief Fast retransmit procedure
 * @param[in] socket Handle referencing the current socket
 **/

void tcpFastRetransmit(Socket *socket)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   uint_t flightSize;

   //Amount of data that has been sent but not yet acknowledged
   flightSize = socket->sndNxt - socket->sndUna;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	60fb      	str	r3, [r7, #12]
   //After receiving 3 duplicate ACKs, ssthresh must be adjusted
   socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	461a      	mov	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	4293      	cmp	r3, r2
 80054c4:	bf38      	it	cc
 80054c6:	4613      	movcc	r3, r2
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

   //The value of recover is incremented to the value of the highest
   //sequence number transmitted by the TCP so far
   socket->recover = socket->sndNxt - 1;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d4:	1e5a      	subs	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
   //Debug message
   TRACE_INFO("TCP fast retransmit...\r\n");

   //TCP performs a retransmission of what appears to be the missing segment,
   //without waiting for the retransmission timer to expire
   tcpRetransmitSegment(socket);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fbc0 	bl	8005c62 <tcpRetransmitSegment>

   //cwnd must set to ssthresh plus 3*SMSS. This artificially inflates the
   //congestion window by the number of segments (three) that have left the
   //network and which the receiver has buffered
   socket->cwnd = socket->ssthresh + TCP_FAST_RETRANSMIT_THRES * socket->smss;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80054ee:	4619      	mov	r1, r3
 80054f0:	0049      	lsls	r1, r1, #1
 80054f2:	440b      	add	r3, r1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

   //Enter the fast recovery procedure
   socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
#endif
}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <tcpFastRecovery>:
 * @param[in] segment Pointer to the incoming TCP segment
 * @param[in] n Number of bytes acknowledged by the incoming ACK
 **/

void tcpFastRecovery(Socket *socket, TcpHeader *segment, uint_t n)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and including
   //recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	dd0a      	ble.n	8005542 <tcpFastRecovery+0x32>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Set cwnd to ssthresh
      socket->cwnd = socket->ssthresh;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      //Exit the fast recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      //Do not exit the fast recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
   }
#endif
}
 8005540:	e029      	b.n	8005596 <tcpFastRecovery+0x86>
      tcpRetransmitSegment(socket);
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 fb8d 	bl	8005c62 <tcpRetransmitSegment>
      if(socket->cwnd > n)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800554e:	461a      	mov	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4293      	cmp	r3, r2
 8005554:	d209      	bcs.n	800556a <tcpFastRecovery+0x5a>
         socket->cwnd -= n;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	b29b      	uxth	r3, r3
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      if(n >= socket->smss)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4293      	cmp	r3, r2
 8005576:	d30a      	bcc.n	800558e <tcpFastRecovery+0x7e>
         socket->cwnd += socket->smss;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005584:	4413      	add	r3, r2
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <tcpFastLossRecovery>:
 * @param[in] socket Handle referencing the current socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpFastLossRecovery(Socket *socket, TcpHeader *segment)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6039      	str	r1, [r7, #0]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and
   //including recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dd04      	ble.n	80055c2 <tcpFastLossRecovery+0x24>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Exit the fast loss recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      //Do not exit the fast loss recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
   }
#endif
}
 80055c0:	e006      	b.n	80055d0 <tcpFastLossRecovery+0x32>
      tcpRetransmitSegment(socket);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fb4d 	bl	8005c62 <tcpRetransmitSegment>
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <tcpProcessSegmentData>:
 * @param[in] length Length of the segment data
 **/

void tcpProcessSegmentData(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
   uint32_t leftEdge;
   uint32_t rightEdge;

   //First sequence number occupied by the incoming segment
   leftEdge = segment->seqNum;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	617b      	str	r3, [r7, #20]
   //Sequence number immediately following the incoming segment
   rightEdge = segment->seqNum + length;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	4413      	add	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

   //Check whether some data falls outside the receive window
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) < 0)
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	da09      	bge.n	8005616 <tcpProcessSegmentData+0x3e>
   {
      //Position of the first byte to be read
      offset += socket->rcvNxt - leftEdge;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	4413      	add	r3, r2
 800560e:	603b      	str	r3, [r7, #0]
      //Ignore the data that falls outside the receive window
      leftEdge = socket->rcvNxt;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005614:	617b      	str	r3, [r7, #20]
   }
   if(TCP_CMP_SEQ(rightEdge, socket->rcvNxt + socket->rcvWnd) > 0)
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561c:	68f9      	ldr	r1, [r7, #12]
 800561e:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 8005622:	440b      	add	r3, r1
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	dd06      	ble.n	8005638 <tcpProcessSegmentData+0x60>
   {
      //Ignore the data that falls outside the receive window
      rightEdge = socket->rcvNxt + socket->rcvWnd;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	f8b2 207e 	ldrh.w	r2, [r2, #126]	; 0x7e
 8005634:	4413      	add	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
   }

   //Copy the incoming data to the receive buffer
   tcpWriteRxBuffer(socket, leftEdge, buffer, offset, rightEdge - leftEdge);
 8005638:	6979      	ldr	r1, [r7, #20]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 feaf 	bl	80063aa <tcpWriteRxBuffer>

   //Update the list of non-contiguous blocks of data that
   //have been received and queued
   tcpUpdateSackBlocks(socket, &leftEdge, &rightEdge);
 800564c:	f107 0210 	add.w	r2, r7, #16
 8005650:	f107 0314 	add.w	r3, r7, #20
 8005654:	4619      	mov	r1, r3
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f917 	bl	800588a <tcpUpdateSackBlocks>

   //Check whether the segment was received out of order
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) > 0)
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	dd0d      	ble.n	8005684 <tcpProcessSegmentData+0xac>
   {
      //Out of order data segments should be acknowledged immediately, in
      //order to accelerate loss recovery
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005670:	2300      	movs	r3, #0
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	2300      	movs	r3, #0
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	460b      	mov	r3, r1
 800567a:	2110      	movs	r1, #16
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f7ff f99f 	bl	80049c0 <tcpSendSegment>
         FALSE);

      //Notify user task that data is available
      tcpUpdateEvents(socket);
   }
}
 8005682:	e02d      	b.n	80056e0 <tcpProcessSegmentData+0x108>
      length = rightEdge - leftEdge;
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	623b      	str	r3, [r7, #32]
      socket->rcvNxt += length;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	441a      	add	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	679a      	str	r2, [r3, #120]	; 0x78
      socket->rcvUser += length;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	4413      	add	r3, r2
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
      socket->rcvWnd -= length;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80056c8:	2300      	movs	r3, #0
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	2300      	movs	r3, #0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	460b      	mov	r3, r1
 80056d2:	2110      	movs	r1, #16
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff f973 	bl	80049c0 <tcpSendSegment>
      tcpUpdateEvents(socket);
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fc6c 	bl	8005fb8 <tcpUpdateEvents>
}
 80056e0:	bf00      	nop
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <tcpDeleteControlBlock>:
 * @brief Delete TCB structure
 * @param[in] socket Handle referencing the socket
 **/

void tcpDeleteControlBlock(Socket *socket)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
   //Delete retransmission queue
   tcpFlushRetransmitQueue(socket);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f88c 	bl	800580e <tcpFlushRetransmitQueue>

   //Delete SYN queue
   tcpFlushSynQueue(socket);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8ab 	bl	8005852 <tcpFlushSynQueue>

   //Release transmit buffer
   netBufferSetLength((NetBuffer *) &socket->txBuffer, 0);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	33ac      	adds	r3, #172	; 0xac
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f7fc ff06 	bl	8002514 <netBufferSetLength>

   //Release receive buffer
   netBufferSetLength((NetBuffer *) &socket->rxBuffer, 0);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800570e:	2100      	movs	r1, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f7fc feff 	bl	8002514 <netBufferSetLength>
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <tcpUpdateRetransmitQueue>:
 * @brief Remove acknowledged segments from retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateRetransmitQueue(Socket *socket)
{
 800571e:	b590      	push	{r4, r7, lr}
 8005720:	b087      	sub	sp, #28
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
   TcpQueueItem *prevQueueItem;
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Point to the first item of the retransmission queue
   prevQueueItem = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
   queueItem = socket->retransmitQueue;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8005730:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 8005732:	e05a      	b.n	80057ea <tcpUpdateRetransmitQueue+0xcc>
   {
      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	331c      	adds	r3, #28
 8005738:	60bb      	str	r3, [r7, #8]

      //Calculate the length of the TCP segment
      if(header->flags & TCP_FLAG_SYN)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	7b5b      	ldrb	r3, [r3, #13]
 800573e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8005742:	b2db      	uxtb	r3, r3
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <tcpUpdateRetransmitQueue+0x34>
         length = 1;
 800574c:	2301      	movs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e010      	b.n	8005774 <tcpUpdateRetransmitQueue+0x56>
      else if(header->flags & TCP_FLAG_FIN)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	7b5b      	ldrb	r3, [r3, #13]
 8005756:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800575a:	b2db      	uxtb	r3, r3
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <tcpUpdateRetransmitQueue+0x50>
         length = queueItem->length + 1;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	3301      	adds	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e002      	b.n	8005774 <tcpUpdateRetransmitQueue+0x56>
      else
         length = queueItem->length;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	617b      	str	r3, [r7, #20]

      //If an acknowledgment is received for a segment before its timer
      //expires, the segment is removed from the retransmission queue
      if(TCP_CMP_SEQ(socket->sndUna, ntohl(header->seqNum) + length) >= 0)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fa ff1d 	bl	80005bc <swapInt32>
 8005782:	4602      	mov	r2, r0
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	1ae3      	subs	r3, r4, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	db28      	blt.n	80057e0 <tcpUpdateRetransmitQueue+0xc2>
      {
         //First item of the queue?
         if(prevQueueItem == NULL)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10c      	bne.n	80057ae <tcpUpdateRetransmitQueue+0x90>
         {
            //Remove the current item from the queue
            socket->retransmitQueue = queueItem->next;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
            //The item can now be safely deleted
            memPoolFree(queueItem);
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f7fc fe20 	bl	80023e4 <memPoolFree>
            //Point to the next item
            queueItem = socket->retransmitQueue;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e009      	b.n	80057c2 <tcpUpdateRetransmitQueue+0xa4>
         }
         else
         {
            //Remove the current item from the queue
            prevQueueItem->next = queueItem->next;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	601a      	str	r2, [r3, #0]
            //The item can now be safely deleted
            memPoolFree(queueItem);
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7fc fe14 	bl	80023e4 <memPoolFree>
            //Point to the next item
            queueItem = prevQueueItem->next;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]
         }

         //When an ACK is received that acknowledges new data, restart the
         //retransmission timer so that it will expire after RTO seconds
         tcpTimerStart(&socket->retransmitTimer, socket->rto);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f001 f835 	bl	8006840 <tcpTimerStart>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 80057de:	e004      	b.n	80057ea <tcpUpdateRetransmitQueue+0xcc>
      }
      //No acknowledgment received for the current segment...
      else
      {
         //Point to the next item
         prevQueueItem = queueItem;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	613b      	str	r3, [r7, #16]
         queueItem = queueItem->next;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1a1      	bne.n	8005734 <tcpUpdateRetransmitQueue+0x16>
      }
   }

   //When all outstanding data has been acknowledged,
   //turn off the retransmission timer
   if(socket->retransmitQueue == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d105      	bne.n	8005806 <tcpUpdateRetransmitQueue+0xe8>
      tcpTimerStop(&socket->retransmitTimer);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f831 	bl	8006868 <tcpTimerStop>
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	bd90      	pop	{r4, r7, pc}

0800580e <tcpFlushRetransmitQueue>:
 * @brief Flush retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushRetransmitQueue(Socket *socket)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
   //Point to the first item in the retransmission queue
   TcpQueueItem *queueItem = socket->retransmitQueue;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800581c:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 800581e:	e007      	b.n	8005830 <tcpFlushRetransmitQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpQueueItem *nextQueueItem = queueItem->next;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7fc fddc 	bl	80023e4 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f4      	bne.n	8005820 <tcpFlushRetransmitQueue+0x12>
   }

   //The retransmission queue is now flushed
   socket->retransmitQueue = NULL;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

   //Turn off the retransmission timer
   tcpTimerStop(&socket->retransmitTimer);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005844:	4618      	mov	r0, r3
 8005846:	f001 f80f 	bl	8006868 <tcpTimerStop>
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <tcpFlushSynQueue>:
 * @brief Flush SYN queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushSynQueue(Socket *socket)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
   //Point to the first item in the SYN queue
   TcpSynQueueItem *queueItem = socket->synQueue;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8005860:	60fb      	str	r3, [r7, #12]

   //Loop through SYN queue
   while(queueItem != NULL)
 8005862:	e007      	b.n	8005874 <tcpFlushSynQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpSynQueueItem *nextQueueItem = queueItem->next;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7fc fdba 	bl	80023e4 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f4      	bne.n	8005864 <tcpFlushSynQueue+0x12>
   }

   //SYN queue was successfully flushed
   socket->synQueue = NULL;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <tcpUpdateSackBlocks>:
 * @param[in,out] leftEdge First sequence number occupied by the incoming data
 * @param[in,out] rightEdge Sequence number immediately following the incoming data
 **/

void tcpUpdateSackBlocks(Socket *socket, uint32_t *leftEdge, uint32_t *rightEdge)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b086      	sub	sp, #24
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
   uint_t i = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]

   //Loop through the blocks
   while(i < socket->sackBlockCount)
 800589a:	e050      	b.n	800593e <tcpUpdateSackBlocks+0xb4>
   {
      //Find each block that overlaps the specified one
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	3341      	adds	r3, #65	; 0x41
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	440b      	add	r3, r1
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	db42      	blt.n	8005938 <tcpUpdateSackBlocks+0xae>
         TCP_CMP_SEQ(*leftEdge, socket->sackBlock[i].rightEdge) <= 0)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68f9      	ldr	r1, [r7, #12]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	3341      	adds	r3, #65	; 0x41
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	440b      	add	r3, r1
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	dc37      	bgt.n	8005938 <tcpUpdateSackBlocks+0xae>
      {
         //Merge blocks to form a contiguous one
         *leftEdge = MIN(*leftEdge, socket->sackBlock[i].leftEdge);
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	3341      	adds	r3, #65	; 0x41
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	bf28      	it	cs
 80058dc:	461a      	movcs	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	601a      	str	r2, [r3, #0]
         *rightEdge = MAX(*rightEdge, socket->sackBlock[i].rightEdge);
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	3341      	adds	r3, #65	; 0x41
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4413      	add	r3, r2
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	bf38      	it	cc
 80058f6:	461a      	movcc	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]

         //Delete current block
         memmove(socket->sackBlock + i, socket->sackBlock + i + 1,
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	18d0      	adds	r0, r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	3301      	adds	r3, #1
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	18d1      	adds	r1, r2, r3
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4613      	mov	r3, r2
 800591a:	075b      	lsls	r3, r3, #29
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	3318      	adds	r3, #24
 8005922:	461a      	mov	r2, r3
 8005924:	f015 fc07 	bl	801b136 <memmove>
            (TCP_MAX_SACK_BLOCKS - i - 1) * sizeof(TcpSackBlock));

         //Decrement the number of non-contiguous blocks
         socket->sackBlockCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800592e:	1e5a      	subs	r2, r3, #1
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
 8005936:	e002      	b.n	800593e <tcpUpdateSackBlocks+0xb4>
      }
      else
      {
         //Point to the next block
         i++;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	3301      	adds	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
   while(i < socket->sackBlockCount)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	429a      	cmp	r2, r3
 8005948:	d3a8      	bcc.n	800589c <tcpUpdateSackBlocks+0x12>
      }
   }

   //Check whether the incoming segment was received out of order
   if(TCP_CMP_SEQ(*leftEdge, socket->rcvNxt) > 0)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	dd21      	ble.n	800599c <tcpUpdateSackBlocks+0x112>
   {
      //Make room for the new non-contiguous block
      memmove(socket->sackBlock + 1, socket->sackBlock,
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800595e:	f103 0008 	add.w	r0, r3, #8
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8005968:	2218      	movs	r2, #24
 800596a:	4619      	mov	r1, r3
 800596c:	f015 fbe3 	bl	801b136 <memmove>
         (TCP_MAX_SACK_BLOCKS - 1) * sizeof(TcpSackBlock));

      //Insert the element in the list
      socket->sackBlock[0].leftEdge = *leftEdge;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
      socket->sackBlock[0].rightEdge = *rightEdge;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

      //Increment the number of non-contiguous blocks
      if(socket->sackBlockCount < TCP_MAX_SACK_BLOCKS)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800598a:	2b03      	cmp	r3, #3
 800598c:	d806      	bhi.n	800599c <tcpUpdateSackBlocks+0x112>
         socket->sackBlockCount++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
   }
}
 800599c:	bf00      	nop
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <tcpUpdateSendWindow>:
 * @param[in] socket Handle referencing the socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpUpdateSendWindow(Socket *socket, TcpHeader *segment)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
   //Case where neither the sequence nor the acknowledgment number is increased
   if(segment->seqNum == socket->sndWl1 && segment->ackNum == socket->sndWl2)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d129      	bne.n	8005a0e <tcpUpdateSendWindow+0x6a>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d123      	bne.n	8005a0e <tcpUpdateSendWindow+0x6a>
   {
      //TCP may ignore a window update with a smaller window than previously
      //offered if neither the sequence number nor the acknowledgment number
      //is increased (refer to RFC 1122, section 4.2.2.16)
      if(segment->window > socket->sndWnd)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	89db      	ldrh	r3, [r3, #14]
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d962      	bls.n	8005a9c <tcpUpdateSendWindow+0xf8>
      {
         //Update the send window and record the sequence number and the
         //acknowledgment number used to update SND.WND
         socket->sndWnd = segment->window;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	89db      	ldrh	r3, [r3, #14]
 80059da:	b29a      	uxth	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
         socket->sndWl1 = segment->seqNum;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	671a      	str	r2, [r3, #112]	; 0x70
         socket->sndWl2 = segment->ackNum;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	675a      	str	r2, [r3, #116]	; 0x74

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	89db      	ldrh	r3, [r3, #14]
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80059fe:	4293      	cmp	r3, r2
 8005a00:	bf38      	it	cc
 8005a02:	4613      	movcc	r3, r2
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      if(segment->window > socket->sndWnd)
 8005a0c:	e046      	b.n	8005a9c <tcpUpdateSendWindow+0xf8>
      }
   }
   //Case where the sequence or the acknowledgment number is increased
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	db3f      	blt.n	8005a9c <tcpUpdateSendWindow+0xf8>
      TCP_CMP_SEQ(segment->ackNum, socket->sndWl2) >= 0)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a24:	1ad3      	subs	r3, r2, r3
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	db38      	blt.n	8005a9c <tcpUpdateSendWindow+0xf8>
   {
      //The remote host advertises a zero window?
      if(!segment->window && socket->sndWnd)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	89db      	ldrh	r3, [r3, #14]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d117      	bne.n	8005a64 <tcpUpdateSendWindow+0xc0>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d012      	beq.n	8005a64 <tcpUpdateSendWindow+0xc0>
      {
         //Start the persist timer
         socket->wndProbeCount = 0;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
         socket->wndProbeInterval = TCP_DEFAULT_PROBE_INTERVAL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a4c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
         tcpTimerStart(&socket->persistTimer, socket->wndProbeInterval);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f000 feee 	bl	8006840 <tcpTimerStart>
      }

      //Update the send window and record the sequence number and the
      //acknowledgment number used to update SND.WND
      socket->sndWnd = segment->window;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	89db      	ldrh	r3, [r3, #14]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      socket->sndWl1 = segment->seqNum;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	671a      	str	r2, [r3, #112]	; 0x70
      socket->sndWl2 = segment->ackNum;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	675a      	str	r2, [r3, #116]	; 0x74

      //Maximum send window it has seen so far on the connection
      socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	89db      	ldrh	r3, [r3, #14]
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	bf38      	it	cc
 8005a90:	4613      	movcc	r3, r2
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
   }
}
 8005a9a:	e7ff      	b.n	8005a9c <tcpUpdateSendWindow+0xf8>
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <tcpUpdateReceiveWindow>:
 * @brief Update receive window so as to avoid Silly Window Syndrome
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateReceiveWindow(Socket *socket)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	6078      	str	r0, [r7, #4]
   uint16_t reduction;

   //Space available but not yet advertised
   reduction = socket->rxBufferSize - socket->rcvUser - socket->rcvWnd;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	81fb      	strh	r3, [r7, #14]

   //To avoid SWS, the receiver should not advertise small windows
   if((socket->rcvWnd + reduction) >= MIN(socket->rmss, socket->rxBufferSize / 2))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8005ace:	461a      	mov	r2, r3
 8005ad0:	89fb      	ldrh	r3, [r7, #14]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	bf28      	it	cs
 8005ae8:	4613      	movcs	r3, r2
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d32f      	bcc.n	8005b4e <tcpUpdateReceiveWindow+0xaa>
   {
      //Check whether a window update should be sent
      if(socket->rcvWnd < MIN(socket->rmss, socket->rxBufferSize / 2))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8005af4:	4619      	mov	r1, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005afc:	085b      	lsrs	r3, r3, #1
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bf28      	it	cs
 8005b08:	4613      	movcs	r3, r2
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	d216      	bcs.n	8005b3c <tcpUpdateReceiveWindow+0x98>
         //Debug message
         TRACE_INFO("%s: TCP sending window update...\r\n",
            formatSystemTime(osGetSystemTime(), NULL));

         //Update the receive window
         socket->rcvWnd += reduction;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
 8005b14:	89fb      	ldrh	r3, [r7, #14]
 8005b16:	4413      	add	r3, r2
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
         //Send an ACK segment to advertise the new window size
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005b28:	2300      	movs	r3, #0
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	460b      	mov	r3, r1
 8005b32:	2110      	movs	r1, #16
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fe ff43 	bl	80049c0 <tcpSendSegment>
      {
         //The receive window can be updated
         socket->rcvWnd += reduction;
      }
   }
}
 8005b3a:	e008      	b.n	8005b4e <tcpUpdateReceiveWindow+0xaa>
         socket->rcvWnd += reduction;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
 8005b42:	89fb      	ldrh	r3, [r7, #14]
 8005b44:	4413      	add	r3, r2
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <tcpComputeRto>:
 * @param[in] socket Handle referencing the socket
 * @return TRUE if the RTT measurement is complete, else FALSE
 **/

bool_t tcpComputeRto(Socket *socket)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
   bool_t flag;
   systime_t r;
   systime_t delta;

   //Clear flag
   flag = FALSE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]

   //TCP implementation takes one RTT measurement at a time
   if(socket->rttBusy)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d075      	beq.n	8005c58 <tcpComputeRto+0x102>
   {
      //Ensure the incoming ACK number covers the expected sequence number
      if(TCP_CMP_SEQ(socket->sndUna, socket->rttSeqNum) > 0)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dd6d      	ble.n	8005c58 <tcpComputeRto+0x102>
      {
         //Calculate round-time trip
         r = osGetSystemTime() - socket->rttStartTime;
 8005b7c:	f7fa fe28 	bl	80007d0 <osGetSystemTime>
 8005b80:	4602      	mov	r2, r0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	613b      	str	r3, [r7, #16]

         //First RTT measurement?
         if(!socket->srtt && !socket->rttvar)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10e      	bne.n	8005bb4 <tcpComputeRto+0x5e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <tcpComputeRto+0x5e>
         {
            //Initialize RTO calculation algorithm
            socket->srtt = r;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            socket->rttvar = r / 2;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	085a      	lsrs	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005bb2:	e029      	b.n	8005c08 <tcpComputeRto+0xb2>
         }
         else
         {
            //Calculate the difference between the measured value and the
            //current RTT estimator
            delta = (r > socket->srtt) ? (r - socket->srtt) : (socket->srtt - r);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d905      	bls.n	8005bcc <tcpComputeRto+0x76>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	e004      	b.n	8005bd6 <tcpComputeRto+0x80>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	60fb      	str	r3, [r7, #12]

            //Implement Van Jacobson's algorithm (as specified in RFC 6298 2.3)
            socket->rttvar = (3 * socket->rttvar + delta) / 4;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005bde:	4613      	mov	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	441a      	add	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	089a      	lsrs	r2, r3, #2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            socket->srtt = (7 * socket->srtt + r) / 8;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	1a9a      	subs	r2, r3, r2
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	08da      	lsrs	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
         }

         //Calculate the next retransmission timeout
         socket->rto = socket->srtt + 4 * socket->rttvar;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

         //Whenever RTO is computed, if it is less than 1 second, then the RTO
         //should be rounded up to 1 second
         socket->rto = MAX(socket->rto, TCP_MIN_RTO);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c28:	bf38      	it	cc
 8005c2a:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
 8005c2e:	461a      	mov	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

         //A maximum value may be placed on RTO provided it is at least 60
         //seconds
         socket->rto = MIN(socket->rto, TCP_MAX_RTO);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005c40:	429a      	cmp	r2, r3
 8005c42:	bf28      	it	cs
 8005c44:	461a      	movcs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         //Debug message
         TRACE_DEBUG("R=%" PRIu32 ", SRTT=%" PRIu32 ", RTTVAR=%" PRIu32 ", RTO=%" PRIu32 "\r\n",
            r, socket->srtt, socket->rttvar, socket->rto);

         //RTT measurement is complete
         socket->rttBusy = FALSE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         //Set flag
         flag = TRUE;
 8005c54:	2301      	movs	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
      }
   }

   //Return TRUE if the RTT measurement is complete
   return flag;
 8005c58:	697b      	ldr	r3, [r7, #20]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <tcpRetransmitSegment>:
 * @param[in] socket Handle referencing the socket
 * @return Error code
 **/

error_t tcpRetransmitSegment(Socket *socket)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b08a      	sub	sp, #40	; 0x28
 8005c66:	af02      	add	r7, sp, #8
 8005c68:	6078      	str	r0, [r7, #4]
   NetBuffer *buffer;
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Initialize error code
   error = NO_ERROR;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	83fb      	strh	r3, [r7, #30]
   //Total number of bytes that have been retransmitted
   length = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61bb      	str	r3, [r7, #24]

   //Point to the retransmission queue
   queueItem = socket->retransmitQueue;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8005c78:	617b      	str	r3, [r7, #20]

   //Any segment in the retransmission queue?
   while(queueItem != NULL)
 8005c7a:	e063      	b.n	8005d44 <tcpRetransmitSegment+0xe2>
   {
      //Total number of bytes that have been retransmitted
      length += queueItem->length;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4413      	add	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]

      //The amount of data that can be sent cannot exceed the MSS
      if(length > socket->smss)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d902      	bls.n	8005c9a <tcpRetransmitSegment+0x38>
      {
         //We are done
         error = NO_ERROR;
 8005c94:	2300      	movs	r3, #0
 8005c96:	83fb      	strh	r3, [r7, #30]
         //Exit immediately
         break;
 8005c98:	e059      	b.n	8005d4e <tcpRetransmitSegment+0xec>
      }

      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	331c      	adds	r3, #28
 8005c9e:	613b      	str	r3, [r7, #16]

      //Allocate a memory buffer to hold the TCP segment
      buffer = ipAllocBuffer(0, &offset);
 8005ca0:	f107 0308 	add.w	r3, r7, #8
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f7fb fe70 	bl	800198c <ipAllocBuffer>
 8005cac:	60f8      	str	r0, [r7, #12]
      //Failed to allocate memory?
      if(buffer == NULL)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <tcpRetransmitSegment+0x58>
      {
         //Report an error
         error = ERROR_OUT_OF_MEMORY;
 8005cb4:	2364      	movs	r3, #100	; 0x64
 8005cb6:	83fb      	strh	r3, [r7, #30]
         //Exit immediately
         break;
 8005cb8:	e049      	b.n	8005d4e <tcpRetransmitSegment+0xec>

      //Start of exception handling block
      do
      {
         //Copy TCP header
         error = netBufferAppend(buffer, header, header->dataOffset * 4);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	7b1b      	ldrb	r3, [r3, #12]
 8005cbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6939      	ldr	r1, [r7, #16]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7fc fe60 	bl	8002990 <netBufferAppend>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	83fb      	strh	r3, [r7, #30]
         //Any error to report?
         if(error)
 8005cd4:	8bfb      	ldrh	r3, [r7, #30]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d128      	bne.n	8005d2c <tcpRetransmitSegment+0xca>
            break;

         //Copy data from send buffer
         error = tcpReadTxBuffer(socket, ntohl(header->seqNum), buffer,
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fa fc6c 	bl	80005bc <swapInt32>
 8005ce4:	4601      	mov	r1, r0
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fb0e 	bl	800630e <tcpReadTxBuffer>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	83fb      	strh	r3, [r7, #30]
            queueItem->length);
         //Any error to report?
         if(error)
 8005cf6:	8bfb      	ldrh	r3, [r7, #30]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d119      	bne.n	8005d30 <tcpRetransmitSegment+0xce>
         //Total number of segments retransmitted
         MIB2_INC_COUNTER32(tcpGroup.tcpRetransSegs, 1);
         TCP_MIB_INC_COUNTER32(tcpRetransSegs, 1);

         //Dump TCP header contents for debugging purpose
         tcpDumpHeader(header, queueItem->length, socket->iss, socket->irs);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	6859      	ldr	r1, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d08:	6938      	ldr	r0, [r7, #16]
 8005d0a:	f000 fbe9 	bl	80064e0 <tcpDumpHeader>

         //Retransmit the lost segment without waiting for the retransmission
         //timer to expire
         error = ipSendDatagram(socket->interface, &queueItem->pseudoHeader,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68d8      	ldr	r0, [r3, #12]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f103 010c 	add.w	r1, r3, #12
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	f7fb fc8d 	bl	8001640 <ipSendDatagram>
 8005d26:	4603      	mov	r3, r0
 8005d28:	83fb      	strh	r3, [r7, #30]
 8005d2a:	e002      	b.n	8005d32 <tcpRetransmitSegment+0xd0>
            break;
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <tcpRetransmitSegment+0xd0>
            break;
 8005d30:	bf00      	nop

         //End of exception handling block
      } while(0);

      //Free previously allocated memory
      netBufferFree(buffer);
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7fc fbbd 	bl	80024b2 <netBufferFree>

      //Any error to report?
      if(error)
 8005d38:	8bfb      	ldrh	r3, [r7, #30]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <tcpRetransmitSegment+0xea>
         //Exit immediately
         break;
      }

      //Point to the next segment in the queue
      queueItem = queueItem->next;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	617b      	str	r3, [r7, #20]
   while(queueItem != NULL)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d198      	bne.n	8005c7c <tcpRetransmitSegment+0x1a>
 8005d4a:	e000      	b.n	8005d4e <tcpRetransmitSegment+0xec>
         break;
 8005d4c:	bf00      	nop
   }

   //Return status code
   return error;
 8005d4e:	8bfb      	ldrh	r3, [r7, #30]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <tcpNagleAlgo>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t tcpNagleAlgo(Socket *socket, uint_t flags)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
   uint_t n;
   uint_t u;

   //The amount of data that can be sent at any given time is
   //limited by the receiver window and the congestion window
   n = MIN(socket->sndWnd, socket->txBufferSize);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	bf28      	it	cs
 8005d72:	4613      	movcs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check the congestion window
   n = MIN(n, socket->cwnd);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	bf28      	it	cs
 8005d84:	4613      	movcs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
#endif

   //Retrieve the size of the usable window
   u = n - (socket->sndNxt - socket->sndUna);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

   //The Nagle algorithm discourages sending tiny segments when
   //the data to be sent increases in small increments
   while(socket->sndUser > 0)
 8005d98:	e0d3      	b.n	8005f42 <tcpNagleAlgo+0x1ea>
   {
      //The usable window size may become zero or negative,
      //preventing packet transmission
      if((int_t) u <= 0)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f340 80d7 	ble.w	8005f50 <tcpNagleAlgo+0x1f8>
         break;

      //Calculate the number of bytes to send at a time
      n = MIN(u, socket->sndUser);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005da8:	461a      	mov	r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bf28      	it	cs
 8005db0:	4613      	movcs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
      n = MIN(n, socket->smss);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005dba:	461a      	mov	r2, r3
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	bf28      	it	cs
 8005dc2:	4613      	movcs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

      //Disable Nagle algorithm?
      if(flags & SOCKET_FLAG_NO_DELAY)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d018      	beq.n	8005e02 <tcpNagleAlgo+0xaa>
      {
         //All packets will be send no matter what size they have
         if(n > 0)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 80be 	beq.w	8005f54 <tcpNagleAlgo+0x1fc>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005de0:	2301      	movs	r3, #1
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	460b      	mov	r3, r1
 8005dea:	2118      	movs	r1, #24
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7fe fde7 	bl	80049c0 <tcpSendSegment>
 8005df2:	4603      	mov	r3, r0
 8005df4:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8005df6:	89fb      	ldrh	r3, [r7, #14]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 808e 	beq.w	8005f1a <tcpNagleAlgo+0x1c2>
               return error;
 8005dfe:	89fb      	ldrh	r3, [r7, #14]
 8005e00:	e0b1      	b.n	8005f66 <tcpNagleAlgo+0x20e>
         {
            //We are done...
            break;
         }
      }
      else if(flags & SOCKET_FLAG_DELAY)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d021      	beq.n	8005e50 <tcpNagleAlgo+0xf8>
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e12:	461a      	mov	r2, r3
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bf28      	it	cs
 8005e1a:	4613      	movcs	r3, r2
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8005e22:	4293      	cmp	r3, r2
 8005e24:	f0c0 8098 	bcc.w	8005f58 <tcpNagleAlgo+0x200>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005e30:	2301      	movs	r3, #1
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	2118      	movs	r1, #24
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7fe fdbf 	bl	80049c0 <tcpSendSegment>
 8005e42:	4603      	mov	r3, r0
 8005e44:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8005e46:	89fb      	ldrh	r3, [r7, #14]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d066      	beq.n	8005f1a <tcpNagleAlgo+0x1c2>
               return error;
 8005e4c:	89fb      	ldrh	r3, [r7, #14]
 8005e4e:	e08a      	b.n	8005f66 <tcpNagleAlgo+0x20e>
         }
      }
      else
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e56:	461a      	mov	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	bf28      	it	cs
 8005e5e:	4613      	movcs	r3, r2
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d313      	bcc.n	8005e92 <tcpNagleAlgo+0x13a>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005e72:	2301      	movs	r3, #1
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	2118      	movs	r1, #24
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fe fd9e 	bl	80049c0 <tcpSendSegment>
 8005e84:	4603      	mov	r3, r0
 8005e86:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8005e88:	89fb      	ldrh	r3, [r7, #14]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d045      	beq.n	8005f1a <tcpNagleAlgo+0x1c2>
               return error;
 8005e8e:	89fb      	ldrh	r3, [r7, #14]
 8005e90:	e069      	b.n	8005f66 <tcpNagleAlgo+0x20e>
         }
         //Or if all queued data can be sent now
         else if(socket->sndNxt == socket->sndUna && socket->sndUser <= u)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d11a      	bne.n	8005ed4 <tcpNagleAlgo+0x17c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d313      	bcc.n	8005ed4 <tcpNagleAlgo+0x17c>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	2118      	movs	r1, #24
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7fe fd7d 	bl	80049c0 <tcpSendSegment>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8005eca:	89fb      	ldrh	r3, [r7, #14]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d024      	beq.n	8005f1a <tcpNagleAlgo+0x1c2>
               return error;
 8005ed0:	89fb      	ldrh	r3, [r7, #14]
 8005ed2:	e048      	b.n	8005f66 <tcpNagleAlgo+0x20e>
         }
         //Or if at least a fraction of the maximum window can be sent
         else if(MIN(socket->sndUser, u) >= (socket->maxSndWnd / 2))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005eda:	461a      	mov	r2, r3
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	bf28      	it	cs
 8005ee2:	4613      	movcs	r3, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 8005eea:	0852      	lsrs	r2, r2, #1
 8005eec:	b292      	uxth	r2, r2
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d334      	bcc.n	8005f5c <tcpNagleAlgo+0x204>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005efa:	2301      	movs	r3, #1
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	460b      	mov	r3, r1
 8005f04:	2118      	movs	r1, #24
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fe fd5a 	bl	80049c0 <tcpSendSegment>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8005f10:	89fb      	ldrh	r3, [r7, #14]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <tcpNagleAlgo+0x1c2>
               return error;
 8005f16:	89fb      	ldrh	r3, [r7, #14]
 8005f18:	e025      	b.n	8005f66 <tcpNagleAlgo+0x20e>
            break;
         }
      }

      //Advance SND.NXT pointer
      socket->sndNxt += n;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	441a      	add	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	665a      	str	r2, [r3, #100]	; 0x64
      //Update the number of data buffered but not yet sent
      socket->sndUser -= n;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      //Update the size of the usable window
      u -= n;
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	617b      	str	r3, [r7, #20]
   while(socket->sndUser > 0)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f47f af26 	bne.w	8005d9a <tcpNagleAlgo+0x42>
 8005f4e:	e006      	b.n	8005f5e <tcpNagleAlgo+0x206>
         break;
 8005f50:	bf00      	nop
 8005f52:	e004      	b.n	8005f5e <tcpNagleAlgo+0x206>
            break;
 8005f54:	bf00      	nop
 8005f56:	e002      	b.n	8005f5e <tcpNagleAlgo+0x206>
            break;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <tcpNagleAlgo+0x206>
            break;
 8005f5c:	bf00      	nop
   }

   //Check whether the transmitter can accept more data
   tcpUpdateEvents(socket);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f82a 	bl	8005fb8 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <tcpChangeState>:
 * @param[in] socket Handle referencing the socket
 * @param[in] newState New TCP state to switch to
 **/

void tcpChangeState(Socket *socket, TcpState newState)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70fb      	strb	r3, [r7, #3]
   //Enter CLOSED state?
   if(newState == TCP_STATE_CLOSED)
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d110      	bne.n	8005fa2 <tcpChangeState+0x34>
   {
      //Check previous state
      if(socket->state == TCP_STATE_LAST_ACK ||
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f86:	2b06      	cmp	r3, #6
 8005f88:	d004      	beq.n	8005f94 <tcpChangeState+0x26>
         socket->state == TCP_STATE_TIME_WAIT)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
      if(socket->state == TCP_STATE_LAST_ACK ||
 8005f90:	2b0a      	cmp	r3, #10
 8005f92:	d103      	bne.n	8005f9c <tcpChangeState+0x2e>
      {
         //The connection has been closed properly
         socket->closedFlag = TRUE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f9a:	e002      	b.n	8005fa2 <tcpChangeState+0x34>
      }
      else
      {
         //The connection has been reset by the peer
         socket->resetFlag = TRUE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	651a      	str	r2, [r3, #80]	; 0x50
      }
   }

   //Enter the desired state
   socket->state = newState;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   //Update TCP related events
   tcpUpdateEvents(socket);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f804 	bl	8005fb8 <tcpUpdateEvents>
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <tcpUpdateEvents>:
 * @brief Update TCP related events
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateEvents(Socket *socket)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	63da      	str	r2, [r3, #60]	; 0x3c

   //Check current TCP state
   switch(socket->state)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fcc:	2b0a      	cmp	r3, #10
 8005fce:	d84d      	bhi.n	800606c <tcpUpdateEvents+0xb4>
 8005fd0:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <tcpUpdateEvents+0x20>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08006047 	.word	0x08006047
 8005fdc:	0800606d 	.word	0x0800606d
 8005fe0:	0800606d 	.word	0x0800606d
 8005fe4:	0800606d 	.word	0x0800606d
 8005fe8:	08006005 	.word	0x08006005
 8005fec:	0800602d 	.word	0x0800602d
 8005ff0:	0800602d 	.word	0x0800602d
 8005ff4:	08006005 	.word	0x08006005
 8005ff8:	08006013 	.word	0x08006013
 8005ffc:	0800602d 	.word	0x0800602d
 8006000:	08006047 	.word	0x08006047
   {
   //ESTABLISHED or FIN-WAIT-1 state?
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006008:	f043 0201 	orr.w	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8006010:	e02d      	b.n	800606e <tcpUpdateEvents+0xb6>
   //FIN-WAIT-2 state?
   case TCP_STATE_FIN_WAIT_2:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	f043 0201 	orr.w	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	f043 0220 	orr.w	r2, r3, #32
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800602a:	e020      	b.n	800606e <tcpUpdateEvents+0xb6>
   //CLOSE-WAIT, LAST-ACK or CLOSING state?
   case TCP_STATE_CLOSE_WAIT:
   case TCP_STATE_LAST_ACK:
   case TCP_STATE_CLOSING:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006030:	f043 0201 	orr.w	r2, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8006044:	e013      	b.n	800606e <tcpUpdateEvents+0xb6>
   //TIME-WAIT or CLOSED state?
   case TCP_STATE_TIME_WAIT:
   case TCP_STATE_CLOSED:
      socket->eventFlags |= SOCKET_EVENT_CLOSED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	f043 0202 	orr.w	r2, r3, #2
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800606a:	e000      	b.n	800606e <tcpUpdateEvents+0xb6>
   //Any other state
   default:
      break;
 800606c:	bf00      	nop
   }

   //Handle TX specific events
   if(socket->state == TCP_STATE_SYN_SENT ||
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006074:	2b02      	cmp	r3, #2
 8006076:	d004      	beq.n	8006082 <tcpUpdateEvents+0xca>
      socket->state == TCP_STATE_SYN_RECEIVED)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   if(socket->state == TCP_STATE_SYN_SENT ||
 800607e:	2b03      	cmp	r3, #3
 8006080:	d10c      	bne.n	800609c <tcpUpdateEvents+0xe4>
   {
      //Disallow write operations until the connection is established
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006086:	f043 0208 	orr.w	r2, r3, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	f043 0210 	orr.w	r2, r3, #16
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	63da      	str	r2, [r3, #60]	; 0x3c
 800609a:	e050      	b.n	800613e <tcpUpdateEvents+0x186>
   }
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d004      	beq.n	80060b0 <tcpUpdateEvents+0xf8>
      socket->state == TCP_STATE_CLOSE_WAIT)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 80060ac:	2b05      	cmp	r3, #5
 80060ae:	d12d      	bne.n	800610c <tcpUpdateEvents+0x154>
   {
      //Check whether the send buffer is full or not
      if((socket->sndUser + socket->sndNxt - socket->sndUna) < socket->txBufferSize)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060bc:	441a      	add	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c2:	1ad2      	subs	r2, r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d205      	bcs.n	80060da <tcpUpdateEvents+0x122>
         socket->eventFlags |= SOCKET_EVENT_TX_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	f043 0204 	orr.w	r2, r3, #4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	63da      	str	r2, [r3, #60]	; 0x3c

      //Check whether all the data in the send buffer has been transmitted
      if(!socket->sndUser)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d12b      	bne.n	800613c <tcpUpdateEvents+0x184>
      {
         //All the pending data has been sent out
         socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	f043 0208 	orr.w	r2, r3, #8
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	63da      	str	r2, [r3, #60]	; 0x3c

         //Check whether an acknowledgment has been received
         if(TCP_CMP_SEQ(socket->sndUna, socket->sndNxt) >= 0)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	db1e      	blt.n	800613c <tcpUpdateEvents+0x184>
            socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006102:	f043 0210 	orr.w	r2, r3, #16
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	63da      	str	r2, [r3, #60]	; 0x3c
      if(!socket->sndUser)
 800610a:	e017      	b.n	800613c <tcpUpdateEvents+0x184>
      }
   }
   else if(socket->state != TCP_STATE_LISTEN)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006112:	2b01      	cmp	r3, #1
 8006114:	d013      	beq.n	800613e <tcpUpdateEvents+0x186>
   {
      //Unblock user task if the connection is being closed
      socket->eventFlags |= SOCKET_EVENT_TX_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	f043 0204 	orr.w	r2, r3, #4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	f043 0208 	orr.w	r2, r3, #8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	f043 0210 	orr.w	r2, r3, #16
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	63da      	str	r2, [r3, #60]	; 0x3c
 800613a:	e000      	b.n	800613e <tcpUpdateEvents+0x186>
      if(!socket->sndUser)
 800613c:	bf00      	nop
   }

   //Handle RX specific events
   if(socket->state == TCP_STATE_ESTABLISHED ||
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006144:	2b04      	cmp	r3, #4
 8006146:	d009      	beq.n	800615c <tcpUpdateEvents+0x1a4>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   if(socket->state == TCP_STATE_ESTABLISHED ||
 800614e:	2b07      	cmp	r3, #7
 8006150:	d004      	beq.n	800615c <tcpUpdateEvents+0x1a4>
      socket->state == TCP_STATE_FIN_WAIT_2)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8006158:	2b08      	cmp	r3, #8
 800615a:	d10b      	bne.n	8006174 <tcpUpdateEvents+0x1bc>
   {
      //Data is available for reading?
      if(socket->rcvUser > 0)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d027      	beq.n	80061b6 <tcpUpdateEvents+0x1fe>
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	63da      	str	r2, [r3, #60]	; 0x3c
      if(socket->rcvUser > 0)
 8006172:	e020      	b.n	80061b6 <tcpUpdateEvents+0x1fe>
   }
   else if(socket->state == TCP_STATE_LISTEN)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800617a:	2b01      	cmp	r3, #1
 800617c:	d10b      	bne.n	8006196 <tcpUpdateEvents+0x1de>
   {
      //If the socket is currently in the listen state, it will be marked
      //as readable if an incoming connection request has been received
      if(socket->synQueue != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d016      	beq.n	80061b6 <tcpUpdateEvents+0x1fe>
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	63da      	str	r2, [r3, #60]	; 0x3c
 8006194:	e00f      	b.n	80061b6 <tcpUpdateEvents+0x1fe>
   }
   else if(socket->state != TCP_STATE_SYN_SENT &&
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800619c:	2b02      	cmp	r3, #2
 800619e:	d00a      	beq.n	80061b6 <tcpUpdateEvents+0x1fe>
      socket->state != TCP_STATE_SYN_RECEIVED)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   else if(socket->state != TCP_STATE_SYN_SENT &&
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d005      	beq.n	80061b6 <tcpUpdateEvents+0x1fe>
   {
      //Readability can also indicate that a request to close
      //the socket has been received from the peer
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	63da      	str	r2, [r3, #60]	; 0x3c
   }

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d011      	beq.n	80061e2 <tcpUpdateEvents+0x22a>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d006      	beq.n	80061d6 <tcpUpdateEvents+0x21e>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80061d4:	e005      	b.n	80061e2 <tcpUpdateEvents+0x22a>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	63da      	str	r2, [r3, #60]	; 0x3c
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	401a      	ands	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	63da      	str	r2, [r3, #60]	; 0x3c

   //Any event to signal?
   if(socket->eventFlags)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <tcpUpdateEvents+0x25c>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3334      	adds	r3, #52	; 0x34
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fa fa66 	bl	80006ce <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <tcpUpdateEvents+0x25c>
         osSetEvent(socket->userEvent);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa fa5d 	bl	80006ce <osSetEvent>
   }
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <tcpWaitForEvents>:
 * @param[in] timeout Maximum time to wait
 * @return Logic OR of all the TCP events that satisfied the wait
 **/

uint_t tcpWaitForEvents(Socket *socket, uint_t eventMask, systime_t timeout)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
   //Sanity check
   if(socket == NULL)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <tcpWaitForEvents+0x16>
      return 0;
 800622e:	2300      	movs	r3, #0
 8006230:	e01c      	b.n	800626c <tcpWaitForEvents+0x50>

   //Only one of the events listed here may complete the wait
   socket->eventMask = eventMask;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
   //Update TCP related events
   tcpUpdateEvents(socket);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff febd 	bl	8005fb8 <tcpUpdateEvents>

   //No event is signaled?
   if(!socket->eventFlags)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d110      	bne.n	8006268 <tcpWaitForEvents+0x4c>
   {
      //Reset the event object
      osResetEvent(&socket->event);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3334      	adds	r3, #52	; 0x34
 800624a:	4618      	mov	r0, r3
 800624c:	f7fa fa4c 	bl	80006e8 <osResetEvent>

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8006250:	4808      	ldr	r0, [pc, #32]	; (8006274 <tcpWaitForEvents+0x58>)
 8006252:	f7fa fab0 	bl	80007b6 <osReleaseMutex>
      //Wait until an event is triggered
      osWaitForEvent(&socket->event, timeout);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3334      	adds	r3, #52	; 0x34
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4618      	mov	r0, r3
 800625e:	f7fa fa51 	bl	8000704 <osWaitForEvent>
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8006262:	4804      	ldr	r0, [pc, #16]	; (8006274 <tcpWaitForEvents+0x58>)
 8006264:	f7fa fa98 	bl	8000798 <osAcquireMutex>
   }

   //Return the list of TCP events that satisfied the wait
   return socket->eventFlags;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	2000e460 	.word	0x2000e460

08006278 <tcpWriteTxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteTxBuffer(Socket *socket, uint32_t seqNum,
   const uint8_t *data, size_t length)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8006296:	fbb3 f1f2 	udiv	r1, r3, r2
 800629a:	fb02 f201 	mul.w	r2, r2, r1
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	441a      	add	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d808      	bhi.n	80062c4 <tcpWriteTxBuffer+0x4c>
   {
      //Copy the payload
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f103 00ac 	add.w	r0, r3, #172	; 0xac
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6979      	ldr	r1, [r7, #20]
 80062be:	f7fc fb9a 	bl	80029f6 <netBufferWrite>
         offset, data, socket->txBufferSize - offset);
      //Wrap around to the beginning of the circular buffer
      netBufferWrite((NetBuffer *) &socket->txBuffer,
         0, data + socket->txBufferSize - offset, length - socket->txBufferSize + offset);
   }
}
 80062c2:	e020      	b.n	8006306 <tcpWriteTxBuffer+0x8e>
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f103 00ac 	add.w	r0, r3, #172	; 0xac
         offset, data, socket->txBufferSize - offset);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6979      	ldr	r1, [r7, #20]
 80062d8:	f7fc fb8d 	bl	80029f6 <netBufferWrite>
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f103 00ac 	add.w	r0, r3, #172	; 0xac
         0, data + socket->txBufferSize - offset, length - socket->txBufferSize + offset);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	18d1      	adds	r1, r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	1ad2      	subs	r2, r2, r3
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	4413      	add	r3, r2
 80062fe:	460a      	mov	r2, r1
 8006300:	2100      	movs	r1, #0
 8006302:	f7fc fb78 	bl	80029f6 <netBufferWrite>
}
 8006306:	bf00      	nop
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <tcpReadTxBuffer>:
 * @return Error code
 **/

error_t tcpReadTxBuffer(Socket *socket, uint32_t seqNum,
   NetBuffer *buffer, size_t length)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	603b      	str	r3, [r7, #0]
   error_t error;

   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 800632c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006330:	fb02 f201 	mul.w	r2, r2, r1
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	613b      	str	r3, [r7, #16]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	441a      	add	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8006344:	429a      	cmp	r2, r3
 8006346:	d80a      	bhi.n	800635e <tcpReadTxBuffer+0x50>
   {
      //Copy the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fc f9b7 	bl	80026c6 <netBufferConcat>
 8006358:	4603      	mov	r3, r0
 800635a:	82fb      	strh	r3, [r7, #22]
 800635c:	e020      	b.n	80063a0 <tcpReadTxBuffer+0x92>
         offset, length);
   }
   else
   {
      //Copy the first part of the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f103 01ac 	add.w	r1, r3, #172	; 0xac
         offset, socket->txBufferSize - offset);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7fc f9a8 	bl	80026c6 <netBufferConcat>
 8006376:	4603      	mov	r3, r0
 8006378:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 800637a:	8afb      	ldrh	r3, [r7, #22]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10f      	bne.n	80063a0 <tcpReadTxBuffer+0x92>
      {
         //Wrap around to the beginning of the circular buffer
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f103 01ac 	add.w	r1, r3, #172	; 0xac
            0, length - socket->txBufferSize + offset);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	1ad2      	subs	r2, r2, r3
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4413      	add	r3, r2
 8006394:	2200      	movs	r2, #0
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fc f995 	bl	80026c6 <netBufferConcat>
 800639c:	4603      	mov	r3, r0
 800639e:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 80063a0:	8afb      	ldrh	r3, [r7, #22]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <tcpWriteRxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteRxBuffer(Socket *socket, uint32_t seqNum,
   const NetBuffer *data, size_t dataOffset, size_t length)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b088      	sub	sp, #32
 80063ae:	af02      	add	r7, sp, #8
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 80063c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80063cc:	fb02 f201 	mul.w	r2, r2, r1
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	441a      	add	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d80a      	bhi.n	80063fa <tcpWriteRxBuffer+0x50>
   {
      //Copy the payload
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 7098 	add.w	r0, r3, #304	; 0x130
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6979      	ldr	r1, [r7, #20]
 80063f4:	f7fc fa02 	bl	80027fc <netBufferCopy>
         offset, data, dataOffset, socket->rxBufferSize - offset);
      //Wrap around to the beginning of the circular buffer
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
         dataOffset + socket->rxBufferSize - offset, length - socket->rxBufferSize + offset);
   }
}
 80063f8:	e024      	b.n	8006444 <tcpWriteRxBuffer+0x9a>
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 7098 	add.w	r0, r3, #304	; 0x130
         offset, data, dataOffset, socket->rxBufferSize - offset);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	f7fc f9f3 	bl	80027fc <netBufferCopy>
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 7098 	add.w	r0, r3, #304	; 0x130
         dataOffset + socket->rxBufferSize - offset, length - socket->rxBufferSize + offset);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	441a      	add	r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	1ad1      	subs	r1, r2, r3
         dataOffset + socket->rxBufferSize - offset, length - socket->rxBufferSize + offset);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8006430:	6a3a      	ldr	r2, [r7, #32]
 8006432:	1ad2      	subs	r2, r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	4413      	add	r3, r2
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	460b      	mov	r3, r1
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	2100      	movs	r1, #0
 8006440:	f7fc f9dc 	bl	80027fc <netBufferCopy>
}
 8006444:	bf00      	nop
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <tcpReadRxBuffer>:
 * @param[in] length Number of data to read
 **/

void tcpReadRxBuffer(Socket *socket, uint32_t seqNum, uint8_t *data,
   size_t length)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 800646a:	fbb3 f1f2 	udiv	r1, r3, r2
 800646e:	fb02 f201 	mul.w	r2, r2, r1
 8006472:	1a9b      	subs	r3, r3, r2
 8006474:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	441a      	add	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8006482:	429a      	cmp	r2, r3
 8006484:	d808      	bhi.n	8006498 <tcpReadRxBuffer+0x4c>
   {
      //Copy the payload
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fc fb09 	bl	8002aa8 <netBufferRead>
         offset, socket->rxBufferSize - offset);
      //Wrap around to the beginning of the circular buffer
      netBufferRead(data + socket->rxBufferSize - offset, (NetBuffer *) &socket->rxBuffer,
         0, length - socket->rxBufferSize + offset);
   }
}
 8006496:	e01f      	b.n	80064d8 <tcpReadRxBuffer+0x8c>
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 7198 	add.w	r1, r3, #304	; 0x130
         offset, socket->rxBufferSize - offset);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fc fafc 	bl	8002aa8 <netBufferRead>
      netBufferRead(data + socket->rxBufferSize - offset, (NetBuffer *) &socket->rxBuffer,
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	18d0      	adds	r0, r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 7198 	add.w	r1, r3, #304	; 0x130
         0, length - socket->rxBufferSize + offset);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	1ad2      	subs	r2, r2, r3
      netBufferRead(data + socket->rxBufferSize - offset, (NetBuffer *) &socket->rxBuffer,
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	4413      	add	r3, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	f7fc fae8 	bl	8002aa8 <netBufferRead>
}
 80064d8:	bf00      	nop
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <tcpDumpHeader>:
 * @param[in] irs Initial receive sequence number (needed to compute relative ACK number)
 **/

void tcpDumpHeader(const TcpHeader *segment, size_t length, uint32_t iss,
   uint32_t irs)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
      (segment->flags & TCP_FLAG_ACK) ? 'A' : '-',
      (segment->flags & TCP_FLAG_URG) ? 'U' : '-',
      ntohl(segment->seqNum), ntohl(segment->seqNum) - iss,
      ntohl(segment->ackNum), ntohl(segment->ackNum) - irs,
      ntohs(segment->window), length);
}
 80064ee:	bf00      	nop
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
	...

080064fc <tcpTick>:
 * FIN-WAIT-2 timer and TIME-WAIT timer)
 *
 **/

void tcpTick(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af02      	add	r7, sp, #8
   uint_t i;
   uint_t n;
   uint_t u;

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	e193      	b.n	8006830 <tcpTick+0x334>
   {
      //Shortcut to the current socket
      Socket *socket = socketTable + i;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f44f 720d 	mov.w	r2, #564	; 0x234
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	4aa2      	ldr	r2, [pc, #648]	; (800679c <tcpTick+0x2a0>)
 8006514:	4413      	add	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
      //Check socket type
      if(socket->type != SOCKET_TYPE_STREAM)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b01      	cmp	r3, #1
 800651e:	f040 817f 	bne.w	8006820 <tcpTick+0x324>
         continue;
      //Check the current state of the TCP state machine
      if(socket->state == TCP_STATE_CLOSED)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 817b 	beq.w	8006824 <tcpTick+0x328>
         continue;

      //Is there any packet in the retransmission queue?
      if(socket->retransmitQueue != NULL)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d06c      	beq.n	8006612 <tcpTick+0x116>
      {
         //Retransmission timeout?
         if(tcpTimerElapsed(&socket->retransmitTimer))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800653e:	4618      	mov	r0, r3
 8006540:	f000 f9ab 	bl	800689a <tcpTimerElapsed>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d063      	beq.n	8006612 <tcpTick+0x116>
         {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //When a TCP sender detects segment loss using the retransmission
            //timer and the given segment has not yet been resent by way of
            //the retransmission timer, the value of ssthresh must be updated
            if(!socket->retransmitCount)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d113      	bne.n	800657c <tcpTick+0x80>
            {
               //Amount of data that has been sent but not yet acknowledged
               uint_t flightSize = socket->sndNxt - socket->sndUna;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	60bb      	str	r3, [r7, #8]
               //Adjust ssthresh value
               socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	085b      	lsrs	r3, r3, #1
 800656e:	4293      	cmp	r3, r2
 8006570:	bf38      	it	cc
 8006572:	4613      	movcc	r3, r2
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
            }

            //Furthermore, upon a timeout cwnd must be set to no more than
            //the loss window, LW, which equals 1 full-sized segment
            socket->cwnd = MIN(TCP_LOSS_WINDOW * socket->smss, socket->txBufferSize);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8006588:	4293      	cmp	r3, r2
 800658a:	bf28      	it	cs
 800658c:	4613      	movcs	r3, r2
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

            //After a retransmit timeout, record the highest sequence number
            //transmitted in the variable recover
            socket->recover = socket->sndNxt - 1;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659a:	1e5a      	subs	r2, r3, #1
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

            //Enter the fast loss recovery procedure
            socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
#endif
            //Make sure the maximum number of retransmissions has not been reached
            if(socket->retransmitCount < TCP_MAX_RETRIES)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d820      	bhi.n	80065f6 <tcpTick+0xfa>
                  formatSystemTime(osGetSystemTime(), NULL), socket->retransmitCount + 1,
                  socket->retransmitQueue->length);

               //Retransmit the earliest segment that has not been
               //acknowledged by the TCP receiver
               tcpRetransmitSegment(socket);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff fb54 	bl	8005c62 <tcpRetransmitSegment>

               //Use exponential back-off algorithm to calculate the new RTO
               socket->rto = MIN(socket->rto * 2, TCP_MAX_RTO);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80065c6:	429a      	cmp	r2, r3
 80065c8:	bf28      	it	cs
 80065ca:	461a      	movcs	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
               //Restart retransmission timer
               tcpTimerStart(&socket->retransmitTimer, socket->rto);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f000 f92d 	bl	8006840 <tcpTimerStart>
               //Increment retransmission counter
               socket->retransmitCount++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 80065f4:	e009      	b.n	800660a <tcpTick+0x10e>
            }
            else
            {
               //The maximum number of retransmissions has been exceeded
               tcpChangeState(socket, TCP_STATE_CLOSED);
 80065f6:	2100      	movs	r1, #0
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f7ff fcb8 	bl	8005f6e <tcpChangeState>
               //Turn off the retransmission timer
               tcpTimerStop(&socket->retransmitTimer);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006604:	4618      	mov	r0, r3
 8006606:	f000 f92f 	bl	8006868 <tcpTimerStop>
            }

            //TCP must use Karn's algorithm for taking RTT samples. That is, RTT
            //samples must not be made using segments that were retransmitted
            socket->rttBusy = FALSE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         }
      }

      //Check the current state of the TCP state machine
      if(socket->state == TCP_STATE_CLOSED)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 8105 	beq.w	8006828 <tcpTick+0x32c>
         continue;

      //The persist timer is used when the remote host advertises
      //a window size of zero
      if(!socket->sndWnd && socket->wndProbeInterval)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006624:	2b00      	cmp	r3, #0
 8006626:	d142      	bne.n	80066ae <tcpTick+0x1b2>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800662e:	2b00      	cmp	r3, #0
 8006630:	d03d      	beq.n	80066ae <tcpTick+0x1b2>
      {
         //Time to send a new probe?
         if(tcpTimerElapsed(&socket->persistTimer))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f92e 	bl	800689a <tcpTimerElapsed>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d034      	beq.n	80066ae <tcpTick+0x1b2>
         {
            //Make sure the maximum number of retransmissions has not been reached
            if(socket->wndProbeCount < TCP_MAX_RETRIES)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800664a:	2b04      	cmp	r3, #4
 800664c:	d82b      	bhi.n	80066a6 <tcpTick+0x1aa>
               //Debug message
               TRACE_INFO("%s: TCP zero window probe #%u...\r\n",
                  formatSystemTime(osGetSystemTime(), NULL), socket->wndProbeCount + 1);

               //Zero window probes usually have the sequence number one less than expected
               tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt - 1, socket->rcvNxt, 0, FALSE);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006652:	1e5a      	subs	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8006658:	2300      	movs	r3, #0
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	2300      	movs	r3, #0
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	460b      	mov	r3, r1
 8006662:	2110      	movs	r1, #16
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7fe f9ab 	bl	80049c0 <tcpSendSegment>
               //The interval between successive probes should be increased exponentially
               socket->wndProbeInterval = MIN(socket->wndProbeInterval * 2, TCP_MAX_PROBE_INTERVAL);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006676:	429a      	cmp	r2, r3
 8006678:	bf28      	it	cs
 800667a:	461a      	movcs	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
               //Restart the persist timer
               tcpTimerStart(&socket->persistTimer, socket->wndProbeInterval);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f000 f8d5 	bl	8006840 <tcpTimerStart>
               //Increment window probe counter
               socket->wndProbeCount++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 80066a4:	e003      	b.n	80066ae <tcpTick+0x1b2>
            }
            else
            {
               //Enter CLOSED state
               tcpChangeState(socket, TCP_STATE_CLOSED);
 80066a6:	2100      	movs	r1, #0
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff fc60 	bl	8005f6e <tcpChangeState>

      //To avoid a deadlock, it is necessary to have a timeout to force
      //transmission of data, overriding the SWS avoidance algorithm. In
      //practice, this timeout should seldom occur (refer to RFC 1122,
      //section 4.2.3.4)
      if(socket->state == TCP_STATE_ESTABLISHED || socket->state == TCP_STATE_CLOSE_WAIT)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d004      	beq.n	80066c2 <tcpTick+0x1c6>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066be:	2b05      	cmp	r3, #5
 80066c0:	d17f      	bne.n	80067c2 <tcpTick+0x2c6>
      {
         //The override timeout occurred?
         if(socket->sndUser && tcpTimerElapsed(&socket->overrideTimer))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d07a      	beq.n	80067c2 <tcpTick+0x2c6>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f8e1 	bl	800689a <tcpTimerElapsed>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d071      	beq.n	80067c2 <tcpTick+0x2c6>
         {
            //The amount of data that can be sent at any given time is
            //limited by the receiver window and the congestion window
            n = MIN(socket->sndWnd, socket->txBufferSize);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 80066ea:	4293      	cmp	r3, r2
 80066ec:	bf28      	it	cs
 80066ee:	4613      	movcs	r3, r2
 80066f0:	607b      	str	r3, [r7, #4]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //Check the congestion window
            n = MIN(n, socket->cwnd);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	bf28      	it	cs
 8006700:	4613      	movcs	r3, r2
 8006702:	607b      	str	r3, [r7, #4]
#endif
            //Retrieve the size of the usable window
            u = n - (socket->sndNxt - socket->sndUna);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	613b      	str	r3, [r7, #16]

            //Send as much data as possible
            while(socket->sndUser > 0)
 8006714:	e03a      	b.n	800678c <tcpTick+0x290>
            {
               //The usable window size may become zero or negative,
               //preventing packet transmission
               if((int_t) u <= 0)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	dd3d      	ble.n	8006798 <tcpTick+0x29c>
                  break;

               //Calculate the number of bytes to send at a time
               n = MIN(u, socket->sndUser);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006722:	461a      	mov	r2, r3
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4293      	cmp	r3, r2
 8006728:	bf28      	it	cs
 800672a:	4613      	movcs	r3, r2
 800672c:	607b      	str	r3, [r7, #4]
               n = MIN(n, socket->smss);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006734:	461a      	mov	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4293      	cmp	r3, r2
 800673a:	bf28      	it	cs
 800673c:	4613      	movcs	r3, r2
 800673e:	607b      	str	r3, [r7, #4]

               //Send TCP segment
               error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8006748:	2301      	movs	r3, #1
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	460b      	mov	r3, r1
 8006752:	2118      	movs	r1, #24
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7fe f933 	bl	80049c0 <tcpSendSegment>
 800675a:	4603      	mov	r3, r0
 800675c:	807b      	strh	r3, [r7, #2]
                  socket->sndNxt, socket->rcvNxt, n, TRUE);
               //Failed to send TCP segment?
               if(error)
 800675e:	887b      	ldrh	r3, [r7, #2]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d11d      	bne.n	80067a0 <tcpTick+0x2a4>
                  break;

               //Advance SND.NXT pointer
               socket->sndNxt += n;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	441a      	add	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	665a      	str	r2, [r3, #100]	; 0x64
               //Adjust the number of bytes buffered but not yet sent
               socket->sndUser -= n;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	b29b      	uxth	r3, r3
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
               //Update the size of the usable window
               u -= n;
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	613b      	str	r3, [r7, #16]
            while(socket->sndUser > 0)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1bf      	bne.n	8006716 <tcpTick+0x21a>
 8006796:	e004      	b.n	80067a2 <tcpTick+0x2a6>
                  break;
 8006798:	bf00      	nop
 800679a:	e002      	b.n	80067a2 <tcpTick+0x2a6>
 800679c:	2000e83c 	.word	0x2000e83c
                  break;
 80067a0:	bf00      	nop
            }

            //Check whether the transmitter can accept more data
            tcpUpdateEvents(socket);
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7ff fc08 	bl	8005fb8 <tcpUpdateEvents>

            //Restart override timer if necessary
            if(socket->sndUser > 0)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d007      	beq.n	80067c2 <tcpTick+0x2c6>
               tcpTimerStart(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80067b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 f83f 	bl	8006840 <tcpTimerStart>
         }
      }

      //The FIN-WAIT-2 timer prevents the connection
      //from staying in the FIN-WAIT-2 state forever
      if(socket->state == TCP_STATE_FIN_WAIT_2)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d10c      	bne.n	80067e6 <tcpTick+0x2ea>
      {
         //Maximum FIN-WAIT-2 time has elapsed?
         if(tcpTimerElapsed(&socket->finWait2Timer))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f861 	bl	800689a <tcpTimerElapsed>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <tcpTick+0x2ea>
         {
            //Debug message
            TRACE_WARNING("TCP FIN-WAIT-2 timer elapsed...\r\n");
            //Enter CLOSED state
            tcpChangeState(socket, TCP_STATE_CLOSED);
 80067de:	2100      	movs	r1, #0
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7ff fbc4 	bl	8005f6e <tcpChangeState>
         }
      }

      //TIME-WAIT timer
      if(socket->state == TCP_STATE_TIME_WAIT)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ec:	2b0a      	cmp	r3, #10
 80067ee:	d11c      	bne.n	800682a <tcpTick+0x32e>
      {
         //2MSL time has elapsed?
         if(tcpTimerElapsed(&socket->timeWaitTimer))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f84f 	bl	800689a <tcpTimerElapsed>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d013      	beq.n	800682a <tcpTick+0x32e>
         {
            //Debug message
            TRACE_WARNING("TCP 2MSL timer elapsed (socket %u)...\r\n", i);
            //Enter CLOSED state
            tcpChangeState(socket, TCP_STATE_CLOSED);
 8006802:	2100      	movs	r1, #0
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff fbb2 	bl	8005f6e <tcpChangeState>

            //Dispose the socket if the user does not have the ownership anymore
            if(!socket->ownedFlag)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <tcpTick+0x32e>
            {
               //Delete the TCB
               tcpDeleteControlBlock(socket);
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7fe ff68 	bl	80056e8 <tcpDeleteControlBlock>
               //Mark the socket as closed
               socket->type = SOCKET_TYPE_UNUSED;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	e004      	b.n	800682a <tcpTick+0x32e>
         continue;
 8006820:	bf00      	nop
 8006822:	e002      	b.n	800682a <tcpTick+0x32e>
         continue;
 8006824:	bf00      	nop
 8006826:	e000      	b.n	800682a <tcpTick+0x32e>
         continue;
 8006828:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	3301      	adds	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b09      	cmp	r3, #9
 8006834:	f67f ae68 	bls.w	8006508 <tcpTick+0xc>
            }
         }
      }
   }
}
 8006838:	bf00      	nop
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <tcpTimerStart>:
 * @param[in] timer Pointer to the timer structure
 * @param[in] delay Time interval
 **/

void tcpTimerStart(TcpTimer *timer, systime_t delay)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
   //Start timer
   timer->startTime = osGetSystemTime();
 800684a:	f7f9 ffc1 	bl	80007d0 <osGetSystemTime>
 800684e:	4602      	mov	r2, r0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	605a      	str	r2, [r3, #4]
   timer->interval = delay;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	609a      	str	r2, [r3, #8]

   //The timer is now running...
   timer->running = TRUE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <tcpTimerStop>:
 * @brief Stop TCP timer
 * @param[in] timer Pointer to the timer structure
 **/

void tcpTimerStop(TcpTimer *timer)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
   //Stop timer
   timer->running = FALSE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <tcpTimerRunning>:
 * @param[in] timer Pointer to the timer structure
 * @return Timer state
 **/

bool_t tcpTimerRunning(TcpTimer *timer)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
   //Check whether the timer is running
   return timer->running;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
}
 800688e:	4618      	mov	r0, r3
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <tcpTimerElapsed>:
 * @param[in] timer Pointer to the timer structure
 * @return Timer state
 **/

bool_t tcpTimerElapsed(TcpTimer *timer)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Check whether the timer is running
   if(!timer->running)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <tcpTimerElapsed+0x14>
      return FALSE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e00e      	b.n	80068cc <tcpTimerElapsed+0x32>

   //Get current time
   time = osGetSystemTime();
 80068ae:	f7f9 ff8f 	bl	80007d0 <osGetSystemTime>
 80068b2:	60f8      	str	r0, [r7, #12]

   //Check whether the specified time interval has elapsed
   if(timeCompare(time, timer->startTime + timer->interval) >= 0)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	4413      	add	r3, r2
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	db01      	blt.n	80068ca <tcpTimerElapsed+0x30>
      return TRUE;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <tcpTimerElapsed+0x32>
   else
      return FALSE;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <udpInit>:
 * @brief UDP related initialization
 * @return Error code
 **/

error_t udpInit(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   udpDynamicPort = 0;
 80068d8:	4b09      	ldr	r3, [pc, #36]	; (8006900 <udpInit+0x2c>)
 80068da:	2200      	movs	r2, #0
 80068dc:	801a      	strh	r2, [r3, #0]

   //Create a mutex to prevent simultaneous access to the callback table
   if(!osCreateMutex(&udpCallbackMutex))
 80068de:	4809      	ldr	r0, [pc, #36]	; (8006904 <udpInit+0x30>)
 80068e0:	f7f9 ff41 	bl	8000766 <osCreateMutex>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <udpInit+0x1a>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 80068ea:	2365      	movs	r3, #101	; 0x65
 80068ec:	e005      	b.n	80068fa <udpInit+0x26>
   }

   //Initialize callback table
   memset(udpCallbackTable, 0, sizeof(udpCallbackTable));
 80068ee:	22a0      	movs	r2, #160	; 0xa0
 80068f0:	2100      	movs	r1, #0
 80068f2:	4805      	ldr	r0, [pc, #20]	; (8006908 <udpInit+0x34>)
 80068f4:	f014 fc38 	bl	801b168 <memset>

   //Successful initialization
   return NO_ERROR;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	2000c326 	.word	0x2000c326
 8006904:	2000fe48 	.word	0x2000fe48
 8006908:	2000fe4c 	.word	0x2000fe4c

0800690c <udpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t udpGetDynamicPort(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
   uint_t port;

   //Retrieve current port number
   port = udpDynamicPort;
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <udpGetDynamicPort+0x58>)
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	607b      	str	r3, [r7, #4]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800691e:	d303      	bcc.n	8006928 <udpGetDynamicPort+0x1c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006926:	d307      	bcc.n	8006938 <udpGetDynamicPort+0x2c>
   {
      //Generate a random port number
      port = SOCKET_EPHEMERAL_PORT_MIN + netGetRand() %
 8006928:	f7fb fc52 	bl	80021d0 <netGetRand>
 800692c:	4603      	mov	r3, r0
 800692e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006932:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8006936:	607b      	str	r3, [r7, #4]
         (SOCKET_EPHEMERAL_PORT_MAX - SOCKET_EPHEMERAL_PORT_MIN + 1);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800693e:	4293      	cmp	r3, r2
 8006940:	d806      	bhi.n	8006950 <udpGetDynamicPort+0x44>
   {
      //Increment port number
      udpDynamicPort = port + 1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	b29b      	uxth	r3, r3
 8006946:	3301      	adds	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <udpGetDynamicPort+0x58>)
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e003      	b.n	8006958 <udpGetDynamicPort+0x4c>
   }
   else
   {
      //Wrap around if necessary
      udpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <udpGetDynamicPort+0x58>)
 8006952:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006956:	801a      	strh	r2, [r3, #0]
   }

   //Return an ephemeral port number
   return port;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	b29b      	uxth	r3, r3
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	2000c326 	.word	0x2000c326

08006968 <udpProcessDatagram>:
 * @return Error code
 **/

error_t udpProcessDatagram(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, const NetBuffer *buffer, size_t offset)
{
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b08f      	sub	sp, #60	; 0x3c
 800696c:	af02      	add	r7, sp, #8
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
   Socket *socket;
   SocketQueueItem *queueItem;
   NetBuffer *p;

   //Retrieve the length of the UDP datagram
   length = netBufferGetLength(buffer) - offset;
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fb fdaa 	bl	80024d0 <netBufferGetLength>
 800697c:	4602      	mov	r2, r0
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	623b      	str	r3, [r7, #32]

   //Ensure the UDP header is valid
   if(length < sizeof(UdpHeader))
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	2b07      	cmp	r3, #7
 8006988:	d801      	bhi.n	800698e <udpProcessDatagram+0x26>
      //reasons other than the lack of an application at the destination port
      MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
      UDP_MIB_INC_COUNTER32(udpInErrors, 1);

      //Report an error
      return ERROR_INVALID_HEADER;
 800698a:	23d4      	movs	r3, #212	; 0xd4
 800698c:	e129      	b.n	8006be2 <udpProcessDatagram+0x27a>
   }

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fb fe65 	bl	8002660 <netBufferAt>
 8006996:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(header == NULL)
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <udpProcessDatagram+0x3a>
      return ERROR_FAILURE;
 800699e:	2301      	movs	r3, #1
 80069a0:	e11f      	b.n	8006be2 <udpProcessDatagram+0x27a>

   //Debug message
   TRACE_INFO("UDP datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 80069a2:	69f8      	ldr	r0, [r7, #28]
 80069a4:	f000 fbce 	bl	8007144 <udpDumpHeader>

   //When UDP runs over IPv6, the checksum is mandatory
   if(header->checksum != 0x0000 || pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	88db      	ldrh	r3, [r3, #6]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <udpProcessDatagram+0x52>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b28      	cmp	r3, #40	; 0x28
 80069b8:	d10e      	bne.n	80069d8 <udpProcessDatagram+0x70>
   {
      //Verify UDP checksum
      if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	1d18      	adds	r0, r3, #4
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6819      	ldr	r1, [r3, #0]
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	f7fa ffb6 	bl	800193a <ipCalcUpperLayerChecksumEx>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <udpProcessDatagram+0x70>
         //reasons other than the lack of an application at the destination port
         MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
         UDP_MIB_INC_COUNTER32(udpInErrors, 1);

         //Report an error
         return ERROR_WRONG_CHECKSUM;
 80069d4:	23d5      	movs	r3, #213	; 0xd5
 80069d6:	e104      	b.n	8006be2 <udpProcessDatagram+0x27a>
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069dc:	e065      	b.n	8006aaa <udpProcessDatagram+0x142>
   {
      //Point to the current socket
      socket = socketTable + i;
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	f44f 720d 	mov.w	r2, #564	; 0x234
 80069e4:	fb02 f303 	mul.w	r3, r2, r3
 80069e8:	4a80      	ldr	r2, [pc, #512]	; (8006bec <udpProcessDatagram+0x284>)
 80069ea:	4413      	add	r3, r2
 80069ec:	62bb      	str	r3, [r7, #40]	; 0x28

      //UDP socket found?
      if(socket->type != SOCKET_TYPE_DGRAM)
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d147      	bne.n	8006a86 <udpProcessDatagram+0x11e>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <udpProcessDatagram+0xa0>
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d140      	bne.n	8006a8a <udpProcessDatagram+0x122>
         continue;
      //Check destination port number
      if(socket->localPort == 0 || socket->localPort != ntohs(header->destPort))
 8006a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0a:	8b1b      	ldrh	r3, [r3, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d03e      	beq.n	8006a8e <udpProcessDatagram+0x126>
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	8b1c      	ldrh	r4, [r3, #24]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	885b      	ldrh	r3, [r3, #2]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7f9 fdc0 	bl	80005a0 <swapInt16>
 8006a20:	4603      	mov	r3, r0
 8006a22:	429c      	cmp	r4, r3
 8006a24:	d133      	bne.n	8006a8e <udpProcessDatagram+0x126>
         continue;
      //Source port number filtering
      if(socket->remotePort != 0 && socket->remotePort != ntohs(header->srcPort))
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <udpProcessDatagram+0xdc>
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7f9 fdb1 	bl	80005a0 <swapInt16>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	429c      	cmp	r4, r3
 8006a42:	d126      	bne.n	8006a92 <udpProcessDatagram+0x12a>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b0c      	cmp	r3, #12
 8006a4a:	d124      	bne.n	8006a96 <udpProcessDatagram+0x12e>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d009      	beq.n	8006a68 <udpProcessDatagram+0x100>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d11e      	bne.n	8006a9a <udpProcessDatagram+0x132>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	695a      	ldr	r2, [r3, #20]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d11a      	bne.n	8006a9e <udpProcessDatagram+0x136>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d020      	beq.n	8006ab2 <udpProcessDatagram+0x14a>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d114      	bne.n	8006aa2 <udpProcessDatagram+0x13a>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	6a1a      	ldr	r2, [r3, #32]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d016      	beq.n	8006ab2 <udpProcessDatagram+0x14a>
               continue;
 8006a84:	e00e      	b.n	8006aa4 <udpProcessDatagram+0x13c>
         continue;
 8006a86:	bf00      	nop
 8006a88:	e00c      	b.n	8006aa4 <udpProcessDatagram+0x13c>
         continue;
 8006a8a:	bf00      	nop
 8006a8c:	e00a      	b.n	8006aa4 <udpProcessDatagram+0x13c>
         continue;
 8006a8e:	bf00      	nop
 8006a90:	e008      	b.n	8006aa4 <udpProcessDatagram+0x13c>
         continue;
 8006a92:	bf00      	nop
 8006a94:	e006      	b.n	8006aa4 <udpProcessDatagram+0x13c>
      else
#endif
      //Invalid packet received?
      {
         //This should never occur...
         continue;
 8006a96:	bf00      	nop
 8006a98:	e004      	b.n	8006aa4 <udpProcessDatagram+0x13c>
               continue;
 8006a9a:	bf00      	nop
 8006a9c:	e002      	b.n	8006aa4 <udpProcessDatagram+0x13c>
               continue;
 8006a9e:	bf00      	nop
 8006aa0:	e000      	b.n	8006aa4 <udpProcessDatagram+0x13c>
               continue;
 8006aa2:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	2b09      	cmp	r3, #9
 8006aae:	d996      	bls.n	80069de <udpProcessDatagram+0x76>
 8006ab0:	e000      	b.n	8006ab4 <udpProcessDatagram+0x14c>
      }

      //The current socket meets all the criteria
      break;
 8006ab2:	bf00      	nop
   }

   //Point to the payload
   offset += sizeof(UdpHeader);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	603b      	str	r3, [r7, #0]
   length -= sizeof(UdpHeader);
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	3b08      	subs	r3, #8
 8006abe:	623b      	str	r3, [r7, #32]

   //No matching socket found?
   if(i >= SOCKET_MAX_COUNT)
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	2b09      	cmp	r3, #9
 8006ac4:	d90b      	bls.n	8006ade <udpProcessDatagram+0x176>
   {
      //Invoke user callback, if any
      error = udpInvokeRxCallback(interface, pseudoHeader, header, buffer, offset);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fadd 	bl	8007090 <udpInvokeRxCallback>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	82fb      	strh	r3, [r7, #22]
      //Return status code
      return error;
 8006ada:	8afb      	ldrh	r3, [r7, #22]
 8006adc:	e081      	b.n	8006be2 <udpProcessDatagram+0x27a>
   }

   //Empty receive queue?
   if(!socket->receiveQueue)
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d118      	bne.n	8006b1a <udpProcessDatagram+0x1b2>
   {
      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	3320      	adds	r3, #32
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fb fcad 	bl	800244c <netBufferAlloc>
 8006af2:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00c      	beq.n	8006b14 <udpProcessDatagram+0x1ac>
      {
         //Point to the newly created item
         queueItem = netBufferAt(p, 0);
 8006afa:	2100      	movs	r1, #0
 8006afc:	69b8      	ldr	r0, [r7, #24]
 8006afe:	f7fb fdaf 	bl	8002660 <netBufferAt>
 8006b02:	6278      	str	r0, [r7, #36]	; 0x24
         queueItem->buffer = p;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	619a      	str	r2, [r3, #24]
         //Add the newly created item to the queue
         socket->receiveQueue = queueItem;
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
 8006b12:	e031      	b.n	8006b78 <udpProcessDatagram+0x210>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
 8006b18:	e02e      	b.n	8006b78 <udpProcessDatagram+0x210>
      }
   }
   else
   {
      //Point to the very first item
      queueItem = socket->receiveQueue;
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
      //Reach the last item in the receive queue
      for(i = 1; queueItem->next; i++)
 8006b22:	2301      	movs	r3, #1
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b26:	e005      	b.n	8006b34 <udpProcessDatagram+0x1cc>
         queueItem = queueItem->next;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
      for(i = 1; queueItem->next; i++)
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	3301      	adds	r3, #1
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f5      	bne.n	8006b28 <udpProcessDatagram+0x1c0>

      //Make sure the receive queue is not full
      if(i >= UDP_RX_QUEUE_SIZE)
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d901      	bls.n	8006b46 <udpProcessDatagram+0x1de>
         return ERROR_RECEIVE_QUEUE_FULL;
 8006b42:	23db      	movs	r3, #219	; 0xdb
 8006b44:	e04d      	b.n	8006be2 <udpProcessDatagram+0x27a>

      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	3320      	adds	r3, #32
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fb fc7e 	bl	800244c <netBufferAlloc>
 8006b50:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00d      	beq.n	8006b74 <udpProcessDatagram+0x20c>
      {
         //Add the newly created item to the queue
         queueItem->next = netBufferAt(p, 0);
 8006b58:	2100      	movs	r1, #0
 8006b5a:	69b8      	ldr	r0, [r7, #24]
 8006b5c:	f7fb fd80 	bl	8002660 <netBufferAt>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
         queueItem->buffer = p;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	619a      	str	r2, [r3, #24]
 8006b72:	e001      	b.n	8006b78 <udpProcessDatagram+0x210>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
      }
   }

   //Failed to allocate memory?
   if(queueItem == NULL)
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <udpProcessDatagram+0x21a>
      return ERROR_OUT_OF_MEMORY;
 8006b7e:	2364      	movs	r3, #100	; 0x64
 8006b80:	e02f      	b.n	8006be2 <udpProcessDatagram+0x27a>

   //Initialize next field
   queueItem->next = NULL;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
   //Record the source port number
   queueItem->srcPort = ntohs(header->srcPort);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7f9 fd06 	bl	80005a0 <swapInt16>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	819a      	strh	r2, [r3, #12]

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 remote address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b0c      	cmp	r3, #12
 8006ba2:	d10d      	bne.n	8006bc0 <udpProcessDatagram+0x258>
   {
      //Save the source IPv4 address
      queueItem->srcIpAddr.length = sizeof(Ipv4Addr);
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	605a      	str	r2, [r3, #4]
      queueItem->srcIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	609a      	str	r2, [r3, #8]
      //Save the destination IPv4 address
      queueItem->destIpAddr.length = sizeof(Ipv4Addr);
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	2204      	movs	r2, #4
 8006bb6:	611a      	str	r2, [r3, #16]
      queueItem->destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	615a      	str	r2, [r3, #20]
      queueItem->destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
   }
#endif

   //Offset to the payload
   queueItem->offset = sizeof(SocketQueueItem);
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	61da      	str	r2, [r3, #28]
   //Copy the payload
   netBufferCopy(queueItem->buffer, queueItem->offset, buffer, offset, length);
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	6998      	ldr	r0, [r3, #24]
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	69d9      	ldr	r1, [r3, #28]
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	f7fb fe11 	bl	80027fc <netBufferCopy>

   //Notify user that data is available
   udpUpdateEvents(socket);
 8006bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bdc:	f000 f99e 	bl	8006f1c <udpUpdateEvents>
   MIB2_INC_COUNTER32(udpGroup.udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);

   //Successful processing
   return NO_ERROR;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3734      	adds	r7, #52	; 0x34
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd90      	pop	{r4, r7, pc}
 8006bea:	bf00      	nop
 8006bec:	2000e83c 	.word	0x2000e83c

08006bf0 <udpSendDatagram>:
 **/

error_t udpSendDatagram(Socket *socket, const IpAddr *destIpAddr,
   uint16_t destPort, const void *data, size_t length, size_t *written,
   uint_t flags)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08c      	sub	sp, #48	; 0x30
 8006bf4:	af04      	add	r7, sp, #16
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	80fb      	strh	r3, [r7, #6]
   error_t error;
   size_t offset;
   NetBuffer *buffer;

   //Ignore unused flags
   flags &= SOCKET_FLAG_DONT_ROUTE;
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c06:	633b      	str	r3, [r7, #48]	; 0x30

   //Check whether the destination IP address is a multicast address
   if(ipIsMulticastAddr(destIpAddr))
 8006c08:	68b8      	ldr	r0, [r7, #8]
 8006c0a:	f7fa fd71 	bl	80016f0 <ipIsMulticastAddr>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <udpSendDatagram+0x34>
      flags |= socket->multicastTtl;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	633b      	str	r3, [r7, #48]	; 0x30
 8006c22:	e006      	b.n	8006c32 <udpSendDatagram+0x42>
   else
      flags |= socket->ttl;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	633b      	str	r3, [r7, #48]	; 0x30

   //Allocate a memory buffer to hold the UDP datagram
   buffer = udpAllocBuffer(0, &offset);
 8006c32:	f107 0314 	add.w	r3, r7, #20
 8006c36:	4619      	mov	r1, r3
 8006c38:	2000      	movs	r0, #0
 8006c3a:	f000 f953 	bl	8006ee4 <udpAllocBuffer>
 8006c3e:	61b8      	str	r0, [r7, #24]
   //Failed to allocate buffer?
   if(buffer == NULL)
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <udpSendDatagram+0x5a>
      return ERROR_OUT_OF_MEMORY;
 8006c46:	2364      	movs	r3, #100	; 0x64
 8006c48:	e029      	b.n	8006c9e <udpSendDatagram+0xae>

   //Copy data payload
   error = netBufferAppend(buffer, data, length);
 8006c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	69b8      	ldr	r0, [r7, #24]
 8006c50:	f7fb fe9e 	bl	8002990 <netBufferAppend>
 8006c54:	4603      	mov	r3, r0
 8006c56:	83fb      	strh	r3, [r7, #30]

   //Successful processing?
   if(!error)
 8006c58:	8bfb      	ldrh	r3, [r7, #30]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d112      	bne.n	8006c84 <udpSendDatagram+0x94>
   {
      //Send UDP datagram
      error = udpSendDatagramEx(socket->interface, NULL, socket->localPort,
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	68d8      	ldr	r0, [r3, #12]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8b19      	ldrh	r1, [r3, #24]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6a:	9203      	str	r2, [sp, #12]
 8006c6c:	9302      	str	r3, [sp, #8]
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	460a      	mov	r2, r1
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	f000 f813 	bl	8006ca6 <udpSendDatagramEx>
 8006c80:	4603      	mov	r3, r0
 8006c82:	83fb      	strh	r3, [r7, #30]
         destIpAddr, destPort, buffer, offset, flags);
   }

   //Successful processing?
   if(!error)
 8006c84:	8bfb      	ldrh	r3, [r7, #30]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d105      	bne.n	8006c96 <udpSendDatagram+0xa6>
   {
      //Total number of data bytes successfully transmitted
      if(written != NULL)
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <udpSendDatagram+0xa6>
         *written = length;
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c94:	601a      	str	r2, [r3, #0]
   }

   //Free previously allocated memory
   netBufferFree(buffer);
 8006c96:	69b8      	ldr	r0, [r7, #24]
 8006c98:	f7fb fc0b 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 8006c9c:	8bfb      	ldrh	r3, [r7, #30]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <udpSendDatagramEx>:
 **/

error_t udpSendDatagramEx(NetInterface *interface, const IpAddr *srcIpAddr,
   uint16_t srcPort, const IpAddr *destIpAddr, uint16_t destPort,
   NetBuffer *buffer, size_t offset, uint_t flags)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b08e      	sub	sp, #56	; 0x38
 8006caa:	af02      	add	r7, sp, #8
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]
   size_t length;
   UdpHeader *header;
   IpPseudoHeader pseudoHeader;

   //Make room for the UDP header
   offset -= sizeof(UdpHeader);
 8006cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb8:	3b08      	subs	r3, #8
 8006cba:	643b      	str	r3, [r7, #64]	; 0x40
   //Retrieve the length of the datagram
   length = netBufferGetLength(buffer) - offset;
 8006cbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006cbe:	f7fb fc07 	bl	80024d0 <netBufferGetLength>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 8006cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ccc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006cce:	f7fb fcc7 	bl	8002660 <netBufferAt>
 8006cd2:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(header == NULL)
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <udpSendDatagramEx+0x38>
      return ERROR_FAILURE;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e088      	b.n	8006df0 <udpSendDatagramEx+0x14a>

   //Format UDP header
   header->srcPort = htons(srcPort);
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7f9 fc5d 	bl	80005a0 <swapInt16>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	801a      	strh	r2, [r3, #0]
   header->destPort = htons(destPort);
 8006cee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7f9 fc55 	bl	80005a0 <swapInt16>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	805a      	strh	r2, [r3, #2]
   header->length = htons(length);
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7f9 fc4c 	bl	80005a0 <swapInt16>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	809a      	strh	r2, [r3, #4]
   header->checksum = 0;
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	2200      	movs	r2, #0
 8006d14:	719a      	strb	r2, [r3, #6]
 8006d16:	2200      	movs	r2, #0
 8006d18:	71da      	strb	r2, [r3, #7]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(destIpAddr->length == sizeof(Ipv4Addr))
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d14e      	bne.n	8006dc0 <udpSendDatagramEx+0x11a>
   {
      //Valid source IP address?
      if(srcIpAddr != NULL && srcIpAddr->length == sizeof(Ipv4Addr))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <udpSendDatagramEx+0x92>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d103      	bne.n	8006d38 <udpSendDatagramEx+0x92>
      {
         //Copy the source IP address
         pseudoHeader.ipv4Data.srcAddr = srcIpAddr->ipv4Addr;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	e01d      	b.n	8006d74 <udpSendDatagramEx+0xce>
      {
         Ipv4Addr ipAddr;

         //Select the source IPv4 address and the relevant network interface
         //to use when sending data to the specified destination host
         error = ipv4SelectSourceAddr(&interface, destIpAddr->ipv4Addr,
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6859      	ldr	r1, [r3, #4]
 8006d3c:	f107 0210 	add.w	r2, r7, #16
 8006d40:	f107 030c 	add.w	r3, r7, #12
 8006d44:	4618      	mov	r0, r3
 8006d46:	f002 fa63 	bl	8009210 <ipv4SelectSourceAddr>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	84fb      	strh	r3, [r7, #38]	; 0x26
            &ipAddr);

         //Check status code
         if(!error)
 8006d4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d102      	bne.n	8006d5a <udpSendDatagramEx+0xb4>
         {
            //Copy the resulting source IP address
            pseudoHeader.ipv4Data.srcAddr = ipAddr;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	61bb      	str	r3, [r7, #24]
 8006d58:	e00c      	b.n	8006d74 <udpSendDatagramEx+0xce>
         }
         else
         {
            //Handle the special case where the destination address is the
            //broadcast address
            if(destIpAddr->ipv4Addr == IPV4_BROADCAST_ADDR && interface != NULL)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d62:	d105      	bne.n	8006d70 <udpSendDatagramEx+0xca>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <udpSendDatagramEx+0xca>
            {
               //Use the unspecified address as source address
               pseudoHeader.ipv4Data.srcAddr = IPV4_UNSPECIFIED_ADDR;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	e001      	b.n	8006d74 <udpSendDatagramEx+0xce>
            }
            else
            {
               //Source address selection failed
               return error;
 8006d70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d72:	e03d      	b.n	8006df0 <udpSendDatagramEx+0x14a>
            }
         }
      }

      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8006d74:	230c      	movs	r3, #12
 8006d76:	617b      	str	r3, [r7, #20]
      pseudoHeader.ipv4Data.destAddr = destIpAddr->ipv4Addr;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	61fb      	str	r3, [r7, #28]
      pseudoHeader.ipv4Data.reserved = 0;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f887 3020 	strb.w	r3, [r7, #32]
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_UDP;
 8006d84:	2311      	movs	r3, #17
 8006d86:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      pseudoHeader.ipv4Data.length = htons(length);
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7f9 fc06 	bl	80005a0 <swapInt16>
 8006d94:	4603      	mov	r3, r0
 8006d96:	847b      	strh	r3, [r7, #34]	; 0x22

      //Calculate UDP header checksum
      header->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 8006d98:	f107 0314 	add.w	r3, r7, #20
 8006d9c:	1d18      	adds	r0, r3, #4
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006da6:	210c      	movs	r1, #12
 8006da8:	f7fa fdc7 	bl	800193a <ipCalcUpperLayerChecksumEx>
 8006dac:	4603      	mov	r3, r0
 8006dae:	461a      	mov	r2, r3
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	80da      	strh	r2, [r3, #6]
   }

   //If the computed checksum is zero, it is transmitted as all ones. An all
   //zero transmitted checksum value means that the transmitter generated no
   //checksum
   if(header->checksum == 0x0000)
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	88db      	ldrh	r3, [r3, #6]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <udpSendDatagramEx+0x12c>
 8006dbe:	e001      	b.n	8006dc4 <udpSendDatagramEx+0x11e>
      return ERROR_FAILURE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e015      	b.n	8006df0 <udpSendDatagramEx+0x14a>
   {
      header->checksum = 0xFFFF;
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dca:	719a      	strb	r2, [r3, #6]
 8006dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dd0:	71da      	strb	r2, [r3, #7]
   UDP_MIB_INC_COUNTER64(udpHCOutDatagrams, 1);

   //Debug message
   TRACE_INFO("Sending UDP datagram (%" PRIuSIZE " bytes)\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 8006dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd4:	f000 f9b6 	bl	8007144 <udpDumpHeader>

   //Send UDP datagram
   error = ipSendDatagram(interface, &pseudoHeader, buffer, offset, flags);
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f107 0114 	add.w	r1, r7, #20
 8006dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006de6:	f7fa fc2b 	bl	8001640 <ipSendDatagram>
 8006dea:	4603      	mov	r3, r0
 8006dec:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Return status code
   return error;
 8006dee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3730      	adds	r7, #48	; 0x30
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <udpReceiveDatagram>:
 * @return Error code
 **/

error_t udpReceiveDatagram(Socket *socket, IpAddr *srcIpAddr, uint16_t *srcPort,
   IpAddr *destIpAddr, void *data, size_t size, size_t *received, uint_t flags)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
   SocketQueueItem *queueItem;

   //The SOCKET_FLAG_DONT_WAIT enables non-blocking operation
   if(!(flags & SOCKET_FLAG_DONT_WAIT))
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11b      	bne.n	8006e48 <udpReceiveDatagram+0x50>
   {
      //The receive queue is empty?
      if(!socket->receiveQueue)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d116      	bne.n	8006e48 <udpReceiveDatagram+0x50>
      {
         //Set the events the application is interested in
         socket->eventMask = SOCKET_EVENT_RX_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2240      	movs	r2, #64	; 0x40
 8006e1e:	639a      	str	r2, [r3, #56]	; 0x38
         //Reset the event object
         osResetEvent(&socket->event);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3334      	adds	r3, #52	; 0x34
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7f9 fc5f 	bl	80006e8 <osResetEvent>

         //Release exclusive access
         osReleaseMutex(&netMutex);
 8006e2a:	482d      	ldr	r0, [pc, #180]	; (8006ee0 <udpReceiveDatagram+0xe8>)
 8006e2c:	f7f9 fcc3 	bl	80007b6 <osReleaseMutex>
         //Wait until an event is triggered
         osWaitForEvent(&socket->event, socket->timeout);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f7f9 fc61 	bl	8000704 <osWaitForEvent>
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8006e42:	4827      	ldr	r0, [pc, #156]	; (8006ee0 <udpReceiveDatagram+0xe8>)
 8006e44:	f7f9 fca8 	bl	8000798 <osAcquireMutex>
      }
   }

   //Check whether the read operation timed out
   if(!socket->receiveQueue)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <udpReceiveDatagram+0x64>
   {
      //No data can be read
      *received = 0;
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
      //Report a timeout error
      return ERROR_TIMEOUT;
 8006e58:	23dc      	movs	r3, #220	; 0xdc
 8006e5a:	e03c      	b.n	8006ed6 <udpReceiveDatagram+0xde>
   }

   //Point to the first item in the receive queue
   queueItem = socket->receiveQueue;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006e62:	617b      	str	r3, [r7, #20]
   //Copy data to user buffer
   *received = netBufferRead(data, queueItem->buffer, queueItem->offset, size);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	6999      	ldr	r1, [r3, #24]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	6a38      	ldr	r0, [r7, #32]
 8006e70:	f7fb fe1a 	bl	8002aa8 <netBufferRead>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	601a      	str	r2, [r3, #0]

   //Save the source IP address
   if(srcIpAddr)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <udpReceiveDatagram+0x96>
      *srcIpAddr = queueItem->srcIpAddr;
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	3304      	adds	r3, #4
 8006e86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006e8a:	e882 0003 	stmia.w	r2, {r0, r1}
   //Save the source port number
   if(srcPort)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <udpReceiveDatagram+0xa4>
      *srcPort = queueItem->srcPort;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	899a      	ldrh	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	801a      	strh	r2, [r3, #0]
   //Save the destination IP address
   if(destIpAddr)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d006      	beq.n	8006eb0 <udpReceiveDatagram+0xb8>
      *destIpAddr = queueItem->destIpAddr;
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3310      	adds	r3, #16
 8006ea8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006eac:	e882 0003 	stmia.w	r2, {r0, r1}

   //If the SOCKET_FLAG_PEEK flag is set, the data is copied
   //into the buffer but is not removed from the input queue
   if(!(flags & SOCKET_FLAG_PEEK))
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <udpReceiveDatagram+0xd6>
   {
      //Remove the item from the receive queue
      socket->receiveQueue = queueItem->next;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
      //Deallocate memory buffer
      netBufferFree(queueItem->buffer);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fb faf2 	bl	80024b2 <netBufferFree>
   }

   //Update the state of events
   udpUpdateEvents(socket);
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f824 	bl	8006f1c <udpUpdateEvents>

   //Successful read operation
   return NO_ERROR;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	2000e460 	.word	0x2000e460

08006ee4 <udpAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *udpAllocBuffer(size_t length, size_t *offset)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;

   //Allocate a buffer to hold the UDP header and the payload
   buffer = ipAllocBuffer(length + sizeof(UdpHeader), offset);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fa fd49 	bl	800198c <ipAllocBuffer>
 8006efa:	60f8      	str	r0, [r7, #12]
   //Failed to allocate buffer?
   if(buffer == NULL)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <udpAllocBuffer+0x22>
      return NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e006      	b.n	8006f14 <udpAllocBuffer+0x30>

   //Offset to the first byte of the payload
   *offset += sizeof(UdpHeader);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f103 0208 	add.w	r2, r3, #8
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <udpUpdateEvents>:
 * @brief Update UDP related events
 * @param[in] socket Handle referencing the socket
 **/

void udpUpdateEvents(Socket *socket)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	63da      	str	r2, [r3, #60]	; 0x3c

   //The socket is marked as readable if a datagram is pending in the queue
   if(socket->receiveQueue)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <udpUpdateEvents+0x24>
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	63da      	str	r2, [r3, #60]	; 0x3c

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d011      	beq.n	8006f6c <udpUpdateEvents+0x50>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d006      	beq.n	8006f60 <udpUpdateEvents+0x44>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f5e:	e005      	b.n	8006f6c <udpUpdateEvents+0x50>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	63da      	str	r2, [r3, #60]	; 0x3c
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	401a      	ands	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	63da      	str	r2, [r3, #60]	; 0x3c

   //Any event to signal?
   if(socket->eventFlags)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00d      	beq.n	8006f9e <udpUpdateEvents+0x82>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3334      	adds	r3, #52	; 0x34
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7f9 fba1 	bl	80006ce <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <udpUpdateEvents+0x82>
         osSetEvent(socket->userEvent);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7f9 fb98 	bl	80006ce <osSetEvent>
   }
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <udpAttachRxCallback>:
 * @return Error code
 **/

error_t udpAttachRxCallback(NetInterface *interface,
   uint16_t port, UdpRxCallback callback, void *param)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	817b      	strh	r3, [r7, #10]
   uint_t i;
   UdpRxCallbackDesc *entry;

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 8006fb8:	4817      	ldr	r0, [pc, #92]	; (8007018 <udpAttachRxCallback+0x70>)
 8006fba:	f7f9 fbed 	bl	8000798 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e018      	b.n	8006ff6 <udpAttachRxCallback+0x4e>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	4a14      	ldr	r2, [pc, #80]	; (800701c <udpAttachRxCallback+0x74>)
 8006fca:	4413      	add	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]

      //Check whether the entry is currently in used
      if(entry->callback == NULL)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10c      	bne.n	8006ff0 <udpAttachRxCallback+0x48>
      {
         //Create a new entry
         entry->interface = interface;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	601a      	str	r2, [r3, #0]
         entry->port = port;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	897a      	ldrh	r2, [r7, #10]
 8006fe0:	809a      	strh	r2, [r3, #4]
         entry->callback = callback;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	609a      	str	r2, [r3, #8]
         entry->param = param;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	60da      	str	r2, [r3, #12]
         //We are done
         break;
 8006fee:	e005      	b.n	8006ffc <udpAttachRxCallback+0x54>
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b09      	cmp	r3, #9
 8006ffa:	d9e3      	bls.n	8006fc4 <udpAttachRxCallback+0x1c>
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 8006ffc:	4806      	ldr	r0, [pc, #24]	; (8007018 <udpAttachRxCallback+0x70>)
 8006ffe:	f7f9 fbda 	bl	80007b6 <osReleaseMutex>

   //Failed to attach the specified user callback?
   if(i >= UDP_CALLBACK_TABLE_SIZE)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b09      	cmp	r3, #9
 8007006:	d901      	bls.n	800700c <udpAttachRxCallback+0x64>
      return ERROR_OUT_OF_RESOURCES;
 8007008:	2365      	movs	r3, #101	; 0x65
 800700a:	e000      	b.n	800700e <udpAttachRxCallback+0x66>

   //Successful processing
   return NO_ERROR;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	2000fe48 	.word	0x2000fe48
 800701c:	2000fe4c 	.word	0x2000fe4c

08007020 <udpDetachRxCallback>:
 * @param[in] port UDP port number
 * @return Error code
 **/

error_t udpDetachRxCallback(NetInterface *interface, uint16_t port)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	807b      	strh	r3, [r7, #2]
   error_t error;
   uint_t i;
   UdpRxCallbackDesc *entry;

   //Initialize status code
   error = ERROR_FAILURE;
 800702c:	2301      	movs	r3, #1
 800702e:	82fb      	strh	r3, [r7, #22]

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 8007030:	4815      	ldr	r0, [pc, #84]	; (8007088 <udpDetachRxCallback+0x68>)
 8007032:	f7f9 fbb1 	bl	8000798 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e01a      	b.n	8007072 <udpDetachRxCallback+0x52>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	4a12      	ldr	r2, [pc, #72]	; (800708c <udpDetachRxCallback+0x6c>)
 8007042:	4413      	add	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

      //Check whether the entry is currently in used
      if(entry->callback != NULL)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <udpDetachRxCallback+0x4c>
      {
         //Does the specified port number match the current entry?
         if(entry->port == port && entry->interface == interface)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	889b      	ldrh	r3, [r3, #4]
 8007052:	887a      	ldrh	r2, [r7, #2]
 8007054:	429a      	cmp	r2, r3
 8007056:	d109      	bne.n	800706c <udpDetachRxCallback+0x4c>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d104      	bne.n	800706c <udpDetachRxCallback+0x4c>
         {
            //Unregister user callback
            entry->callback = NULL;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	609a      	str	r2, [r3, #8]
            //A matching entry has been found
            error = NO_ERROR;
 8007068:	2300      	movs	r3, #0
 800706a:	82fb      	strh	r3, [r7, #22]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	3301      	adds	r3, #1
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b09      	cmp	r3, #9
 8007076:	d9e1      	bls.n	800703c <udpDetachRxCallback+0x1c>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 8007078:	4803      	ldr	r0, [pc, #12]	; (8007088 <udpDetachRxCallback+0x68>)
 800707a:	f7f9 fb9c 	bl	80007b6 <osReleaseMutex>

   //Return status code
   return error;
 800707e:	8afb      	ldrh	r3, [r7, #22]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	2000fe48 	.word	0x2000fe48
 800708c:	2000fe4c 	.word	0x2000fe4c

08007090 <udpInvokeRxCallback>:
 * @return Error code
 **/

error_t udpInvokeRxCallback(NetInterface *interface, const IpPseudoHeader *pseudoHeader,
   const UdpHeader *header, const NetBuffer *buffer, size_t offset)
{
 8007090:	b590      	push	{r4, r7, lr}
 8007092:	b08b      	sub	sp, #44	; 0x2c
 8007094:	af02      	add	r7, sp, #8
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
   uint_t i;
   void *param;
   UdpRxCallbackDesc *entry;

   //Initialize status code
   error = ERROR_PORT_UNREACHABLE;
 800709e:	23d2      	movs	r3, #210	; 0xd2
 80070a0:	83fb      	strh	r3, [r7, #30]

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 80070a2:	4826      	ldr	r0, [pc, #152]	; (800713c <udpInvokeRxCallback+0xac>)
 80070a4:	f7f9 fb78 	bl	8000798 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80070a8:	2300      	movs	r3, #0
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	e03b      	b.n	8007126 <udpInvokeRxCallback+0x96>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	4a23      	ldr	r2, [pc, #140]	; (8007140 <udpInvokeRxCallback+0xb0>)
 80070b4:	4413      	add	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]

      //Check whether the entry is currently in used
      if(entry->callback != NULL)
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d02f      	beq.n	8007120 <udpInvokeRxCallback+0x90>
      {
         //Bound to a particular interface?
         if(entry->interface == NULL || entry->interface == interface)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <udpInvokeRxCallback+0x42>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d126      	bne.n	8007120 <udpInvokeRxCallback+0x90>
         {
            //Does the specified port number match the current entry?
            if(entry->port == ntohs(header->destPort))
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	889c      	ldrh	r4, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	885b      	ldrh	r3, [r3, #2]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	4618      	mov	r0, r3
 80070de:	f7f9 fa5f 	bl	80005a0 <swapInt16>
 80070e2:	4603      	mov	r3, r0
 80070e4:	429c      	cmp	r4, r3
 80070e6:	d11b      	bne.n	8007120 <udpInvokeRxCallback+0x90>
            {
               //Retrieve callback parameter
               param = entry->param;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	613b      	str	r3, [r7, #16]

               //Release mutex to prevent any deadlock
               if(param == NULL)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d102      	bne.n	80070fa <udpInvokeRxCallback+0x6a>
                  osReleaseMutex(&udpCallbackMutex);
 80070f4:	4811      	ldr	r0, [pc, #68]	; (800713c <udpInvokeRxCallback+0xac>)
 80070f6:	f7f9 fb5e 	bl	80007b6 <osReleaseMutex>

               //Invoke user callback function
               entry->callback(interface, pseudoHeader,
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	689c      	ldr	r4, [r3, #8]
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	47a0      	blx	r4
                  header, buffer, offset, param);

               //Acquire mutex
               if(param == NULL)
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d102      	bne.n	800711c <udpInvokeRxCallback+0x8c>
                  osAcquireMutex(&udpCallbackMutex);
 8007116:	4809      	ldr	r0, [pc, #36]	; (800713c <udpInvokeRxCallback+0xac>)
 8007118:	f7f9 fb3e 	bl	8000798 <osAcquireMutex>

               //A matching entry has been found
               error = NO_ERROR;
 800711c:	2300      	movs	r3, #0
 800711e:	83fb      	strh	r3, [r7, #30]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	3301      	adds	r3, #1
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b09      	cmp	r3, #9
 800712a:	d9c0      	bls.n	80070ae <udpInvokeRxCallback+0x1e>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 800712c:	4803      	ldr	r0, [pc, #12]	; (800713c <udpInvokeRxCallback+0xac>)
 800712e:	f7f9 fb42 	bl	80007b6 <osReleaseMutex>
      UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
      UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);
   }

   //Return status code
   return error;
 8007132:	8bfb      	ldrh	r3, [r7, #30]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3724      	adds	r7, #36	; 0x24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd90      	pop	{r4, r7, pc}
 800713c:	2000fe48 	.word	0x2000fe48
 8007140:	2000fe4c 	.word	0x2000fe4c

08007144 <udpDumpHeader>:
 * @brief Dump UDP header for debugging purpose
 * @param[in] datagram Pointer to the UDP header
 **/

void udpDumpHeader(const UdpHeader *datagram)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
   //Dump UDP header contents
   TRACE_DEBUG("  Source Port = %" PRIu16 "\r\n", ntohs(datagram->srcPort));
   TRACE_DEBUG("  Destination Port = %" PRIu16 "\r\n", ntohs(datagram->destPort));
   TRACE_DEBUG("  Length = %" PRIu16 "\r\n", ntohs(datagram->length));
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(datagram->checksum));
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <dnsInit>:
 * @brief DNS cache initialization
 * @return Error code
 **/

error_t dnsInit(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
   //Initialize DNS cache
   memset(dnsCache, 0, sizeof(dnsCache));
 800715c:	f44f 7250 	mov.w	r2, #832	; 0x340
 8007160:	2100      	movs	r1, #0
 8007162:	4803      	ldr	r0, [pc, #12]	; (8007170 <dnsInit+0x18>)
 8007164:	f014 f800 	bl	801b168 <memset>

   //Successful initialization
   return NO_ERROR;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	2000feec 	.word	0x2000feec

08007174 <dnsFlushCache>:
 * @brief Flush DNS cache
 * @param[in] interface Underlying network interface
 **/

void dnsFlushCache(NetInterface *interface)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
   uint_t i;
   DnsCacheEntry *entry;

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e015      	b.n	80071ae <dnsFlushCache+0x3a>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2268      	movs	r2, #104	; 0x68
 8007186:	fb02 f303 	mul.w	r3, r2, r3
 800718a:	4a0c      	ldr	r2, [pc, #48]	; (80071bc <dnsFlushCache+0x48>)
 800718c:	4413      	add	r3, r2
 800718e:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in used
      if(entry->state != DNS_STATE_NONE)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <dnsFlushCache+0x34>
      {
         //Delete DNS entries only for the given network interface
         if(entry->interface == interface)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d102      	bne.n	80071a8 <dnsFlushCache+0x34>
            dnsDeleteEntry(entry);
 80071a2:	68b8      	ldr	r0, [r7, #8]
 80071a4:	f000 f84a 	bl	800723c <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3301      	adds	r3, #1
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b07      	cmp	r3, #7
 80071b2:	d9e6      	bls.n	8007182 <dnsFlushCache+0xe>
      }
   }
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	2000feec 	.word	0x2000feec

080071c0 <dnsCreateEntry>:
 * @brief Create a new entry in the DNS cache
 * @return Pointer to the newly created entry
 **/

DnsCacheEntry *dnsCreateEntry(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
   systime_t time;
   DnsCacheEntry *entry;
   DnsCacheEntry *oldestEntry;

   //Get current time
   time = osGetSystemTime();
 80071c6:	f7f9 fb03 	bl	80007d0 <osGetSystemTime>
 80071ca:	6078      	str	r0, [r7, #4]

   //Keep track of the oldest entry
   oldestEntry = &dnsCache[0];
 80071cc:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <dnsCreateEntry+0x78>)
 80071ce:	60bb      	str	r3, [r7, #8]

   //Loop through DNS cache entries
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e020      	b.n	8007218 <dnsCreateEntry+0x58>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2268      	movs	r2, #104	; 0x68
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	4a16      	ldr	r2, [pc, #88]	; (8007238 <dnsCreateEntry+0x78>)
 80071e0:	4413      	add	r3, r2
 80071e2:	603b      	str	r3, [r7, #0]

      //Check whether the entry is currently in used or not
      if(entry->state == DNS_STATE_NONE)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d106      	bne.n	80071fa <dnsCreateEntry+0x3a>
      {
         //Erase contents
         memset(entry, 0, sizeof(DnsCacheEntry));
 80071ec:	2268      	movs	r2, #104	; 0x68
 80071ee:	2100      	movs	r1, #0
 80071f0:	6838      	ldr	r0, [r7, #0]
 80071f2:	f013 ffb9 	bl	801b168 <memset>
         //Return a pointer to the DNS entry
         return entry;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	e01a      	b.n	8007230 <dnsCreateEntry+0x70>
      }

      //Keep track of the oldest entry in the table
      if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	1ad2      	subs	r2, r2, r3
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	1acb      	subs	r3, r1, r3
 800720a:	429a      	cmp	r2, r3
 800720c:	d901      	bls.n	8007212 <dnsCreateEntry+0x52>
      {
         oldestEntry = entry;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b07      	cmp	r3, #7
 800721c:	d9db      	bls.n	80071d6 <dnsCreateEntry+0x16>
      }
   }

   //The oldest entry is removed whenever the table runs out of space
   dnsDeleteEntry(oldestEntry);
 800721e:	68b8      	ldr	r0, [r7, #8]
 8007220:	f000 f80c 	bl	800723c <dnsDeleteEntry>
   //Erase contents
   memset(oldestEntry, 0, sizeof(DnsCacheEntry));
 8007224:	2268      	movs	r2, #104	; 0x68
 8007226:	2100      	movs	r1, #0
 8007228:	68b8      	ldr	r0, [r7, #8]
 800722a:	f013 ff9d 	bl	801b168 <memset>
   //Return a pointer to the DNS entry
   return oldestEntry;
 800722e:	68bb      	ldr	r3, [r7, #8]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	2000feec 	.word	0x2000feec

0800723c <dnsDeleteEntry>:
 * @brief Delete the specified DNS cache entry
 * @param[in] entry Pointer to the DNS cache entry to be deleted
 **/

void dnsDeleteEntry(DnsCacheEntry *entry)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
   //Make sure the specified entry is valid
   if(entry != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d012      	beq.n	8007270 <dnsDeleteEntry+0x34>
   {
#if (DNS_CLIENT_SUPPORT == ENABLED)
      //DNS resolver?
      if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	789b      	ldrb	r3, [r3, #2]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d10b      	bne.n	800726a <dnsDeleteEntry+0x2e>
      {
         //Name resolution in progress?
         if(entry->state == DNS_STATE_IN_PROGRESS)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d107      	bne.n	800726a <dnsDeleteEntry+0x2e>
         {
            //Unregister user callback
            udpDetachRxCallback(entry->interface, entry->port);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	899b      	ldrh	r3, [r3, #12]
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7ff fedb 	bl	8007020 <udpDetachRxCallback>
         }
      }
#endif
      //Delete DNS cache entry
      entry->state = DNS_STATE_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	701a      	strb	r2, [r3, #0]
   }
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <dnsFindEntry>:
 *   if the specified domain name could not be found in the DNS cache
 **/

DnsCacheEntry *dnsFindEntry(NetInterface *interface,
   const char_t *name, HostType type, HostnameResolver protocol)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	4611      	mov	r1, r2
 8007284:	461a      	mov	r2, r3
 8007286:	460b      	mov	r3, r1
 8007288:	71fb      	strb	r3, [r7, #7]
 800728a:	4613      	mov	r3, r2
 800728c:	71bb      	strb	r3, [r7, #6]
   uint_t i;
   DnsCacheEntry *entry;

   //Loop through DNS cache entries
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 800728e:	2300      	movs	r3, #0
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	e037      	b.n	8007304 <dnsFindEntry+0x8c>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2268      	movs	r2, #104	; 0x68
 8007298:	fb02 f303 	mul.w	r3, r2, r3
 800729c:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <dnsFindEntry+0x9c>)
 800729e:	4413      	add	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]

      //Make sure that the entry is currently in used
      if(entry->state == DNS_STATE_NONE)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d022      	beq.n	80072f0 <dnsFindEntry+0x78>
         continue;

      //Filter out entries that do not match the specified criteria
      if(entry->interface != interface)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d11f      	bne.n	80072f4 <dnsFindEntry+0x7c>
         continue;
      if(entry->type != type && type != HOST_TYPE_ANY)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	785b      	ldrb	r3, [r3, #1]
 80072b8:	79fa      	ldrb	r2, [r7, #7]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d002      	beq.n	80072c4 <dnsFindEntry+0x4c>
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d119      	bne.n	80072f8 <dnsFindEntry+0x80>
         continue;
      if(entry->protocol != protocol && protocol != HOST_NAME_RESOLVER_ANY)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	789b      	ldrb	r3, [r3, #2]
 80072c8:	79ba      	ldrb	r2, [r7, #6]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d002      	beq.n	80072d4 <dnsFindEntry+0x5c>
 80072ce:	79bb      	ldrb	r3, [r7, #6]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d113      	bne.n	80072fc <dnsFindEntry+0x84>
         continue;

      //Does the entry match the specified domain name?
      if(name == NULL || !strcasecmp(entry->name, name))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <dnsFindEntry+0x74>
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3310      	adds	r3, #16
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f014 fae9 	bl	801b8b8 <strcasecmp>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d108      	bne.n	80072fe <dnsFindEntry+0x86>
         return entry;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	e00d      	b.n	800730c <dnsFindEntry+0x94>
         continue;
 80072f0:	bf00      	nop
 80072f2:	e004      	b.n	80072fe <dnsFindEntry+0x86>
         continue;
 80072f4:	bf00      	nop
 80072f6:	e002      	b.n	80072fe <dnsFindEntry+0x86>
         continue;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <dnsFindEntry+0x86>
         continue;
 80072fc:	bf00      	nop
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3301      	adds	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b07      	cmp	r3, #7
 8007308:	d9c4      	bls.n	8007294 <dnsFindEntry+0x1c>
   }

   //No matching entry in the DNS cache...
   return NULL;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	2000feec 	.word	0x2000feec

08007318 <dnsTick>:
 * manage DNS cache
 *
 **/

void dnsTick(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
   uint_t i;
   systime_t time;
   DnsCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800731e:	f7f9 fa57 	bl	80007d0 <osGetSystemTime>
 8007322:	6078      	str	r0, [r7, #4]

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007324:	2300      	movs	r3, #0
 8007326:	60bb      	str	r3, [r7, #8]
 8007328:	e079      	b.n	800741e <dnsTick+0x106>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2268      	movs	r2, #104	; 0x68
 800732e:	fb02 f303 	mul.w	r3, r2, r3
 8007332:	4a3e      	ldr	r2, [pc, #248]	; (800742c <dnsTick+0x114>)
 8007334:	4413      	add	r3, r2
 8007336:	603b      	str	r3, [r7, #0]

      //Name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d15b      	bne.n	80073f8 <dnsTick+0xe0>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007348:	4413      	add	r3, r2
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	db62      	blt.n	8007418 <dnsTick+0x100>
         {
            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount > 0)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007356:	2b00      	cmp	r3, #0
 8007358:	d025      	beq.n	80073a6 <dnsTick+0x8e>
            {
#if (DNS_CLIENT_SUPPORT == ENABLED)
               //DNS resolver?
               if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	789b      	ldrb	r3, [r3, #2]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <dnsTick+0x56>
               {
                  //Retransmit DNS query
                  error = dnsSendQuery(entry);
 8007362:	6838      	ldr	r0, [r7, #0]
 8007364:	f000 f95a 	bl	800761c <dnsSendQuery>
 8007368:	4603      	mov	r3, r0
 800736a:	81fb      	strh	r3, [r7, #14]
 800736c:	e001      	b.n	8007372 <dnsTick+0x5a>
               }
               else
#endif
               //Unknown protocol?
               {
                  error = ERROR_FAILURE;
 800736e:	2301      	movs	r3, #1
 8007370:	81fb      	strh	r3, [r7, #14]
               }

               //Query message successfully sent?
               if(!error)
 8007372:	89fb      	ldrh	r3, [r7, #14]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d112      	bne.n	800739e <dnsTick+0x86>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	659a      	str	r2, [r3, #88]	; 0x58
                  //The timeout value is doubled for each subsequent retransmission
                  entry->timeout = MIN(entry->timeout * 2, entry->maxTimeout);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	429a      	cmp	r2, r3
 800738a:	bf28      	it	cs
 800738c:	461a      	movcs	r2, r3
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007396:	1e5a      	subs	r2, r3, #1
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	665a      	str	r2, [r3, #100]	; 0x64
 800739c:	e03c      	b.n	8007418 <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 800739e:	6838      	ldr	r0, [r7, #0]
 80073a0:	f7ff ff4c 	bl	800723c <dnsDeleteEntry>
 80073a4:	e038      	b.n	8007418 <dnsTick+0x100>
               }
            }
#if (DNS_CLIENT_SUPPORT == ENABLED)
            //DNS resolver?
            else if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	789b      	ldrb	r3, [r3, #2]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d120      	bne.n	80073f0 <dnsTick+0xd8>
            {
               //Select the next DNS server
               entry->dnsServerNum++;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	609a      	str	r2, [r3, #8]
               //Initialize retransmission counter
               entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2203      	movs	r2, #3
 80073bc:	665a      	str	r2, [r3, #100]	; 0x64
               //Send DNS query
               error = dnsSendQuery(entry);
 80073be:	6838      	ldr	r0, [r7, #0]
 80073c0:	f000 f92c 	bl	800761c <dnsSendQuery>
 80073c4:	4603      	mov	r3, r0
 80073c6:	81fb      	strh	r3, [r7, #14]

               //DNS message successfully sent?
               if(!error)
 80073c8:	89fb      	ldrh	r3, [r7, #14]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10c      	bne.n	80073e8 <dnsTick+0xd0>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	659a      	str	r2, [r3, #88]	; 0x58
                  //Set timeout value
                  entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073da:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e0:	1e5a      	subs	r2, r3, #1
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	665a      	str	r2, [r3, #100]	; 0x64
 80073e6:	e017      	b.n	8007418 <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 80073e8:	6838      	ldr	r0, [r7, #0]
 80073ea:	f7ff ff27 	bl	800723c <dnsDeleteEntry>
 80073ee:	e013      	b.n	8007418 <dnsTick+0x100>
            }
#endif
            else
            {
               //The maximum number of retransmissions has been exceeded
               dnsDeleteEntry(entry);
 80073f0:	6838      	ldr	r0, [r7, #0]
 80073f2:	f7ff ff23 	bl	800723c <dnsDeleteEntry>
 80073f6:	e00f      	b.n	8007418 <dnsTick+0x100>
            }
         }
      }
      //Name successfully resolved?
      else if(entry->state == DNS_STATE_RESOLVED)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d10b      	bne.n	8007418 <dnsTick+0x100>
      {
         //Check the lifetime of the current DNS cache entry
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007408:	4413      	add	r3, r2
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	db02      	blt.n	8007418 <dnsTick+0x100>
         {
            //Periodically time out DNS cache entries
            dnsDeleteEntry(entry);
 8007412:	6838      	ldr	r0, [r7, #0]
 8007414:	f7ff ff12 	bl	800723c <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	3301      	adds	r3, #1
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b07      	cmp	r3, #7
 8007422:	d982      	bls.n	800732a <dnsTick+0x12>
         }
      }
   }
}
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	2000feec 	.word	0x2000feec

08007430 <dnsResolve>:
 * @param[out] ipAddr IP address corresponding to the specified host name
 **/

error_t dnsResolve(NetInterface *interface, const char_t *name,
   HostType type, IpAddr *ipAddr)
{
 8007430:	b590      	push	{r4, r7, lr}
 8007432:	b089      	sub	sp, #36	; 0x24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	71fb      	strb	r3, [r7, #7]

#if (NET_RTOS_SUPPORT == ENABLED)
   systime_t delay;

   //Debug message
   TRACE_INFO("Resolving host name %s (DNS resolver)...\r\n", name);
 8007440:	f7f9 f8fe 	bl	8000640 <osSuspendAllTasks>
 8007444:	4b6f      	ldr	r3, [pc, #444]	; (8007604 <dnsResolve+0x1d4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	496e      	ldr	r1, [pc, #440]	; (8007608 <dnsResolve+0x1d8>)
 800744e:	4618      	mov	r0, r3
 8007450:	f013 fda4 	bl	801af9c <fiprintf>
 8007454:	f7f9 f8ff 	bl	8000656 <osResumeAllTasks>
#endif

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8007458:	486c      	ldr	r0, [pc, #432]	; (800760c <dnsResolve+0x1dc>)
 800745a:	f7f9 f99d 	bl	8000798 <osAcquireMutex>

   //Search the DNS cache for the specified host name
   entry = dnsFindEntry(interface, name, type, HOST_NAME_RESOLVER_DNS);
 800745e:	79fa      	ldrb	r2, [r7, #7]
 8007460:	2301      	movs	r3, #1
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff ff07 	bl	8007278 <dnsFindEntry>
 800746a:	6178      	str	r0, [r7, #20]

   //Check whether a matching entry has been found
   if(entry)
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d015      	beq.n	800749e <dnsResolve+0x6e>
   {
      //Host name already resolved?
      if(entry->state == DNS_STATE_RESOLVED ||
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d003      	beq.n	8007482 <dnsResolve+0x52>
         entry->state == DNS_STATE_PERMANENT)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	781b      	ldrb	r3, [r3, #0]
      if(entry->state == DNS_STATE_RESOLVED ||
 800747e:	2b03      	cmp	r3, #3
 8007480:	d109      	bne.n	8007496 <dnsResolve+0x66>
      {
         //Return the corresponding IP address
         *ipAddr = entry->ipAddr;
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	3350      	adds	r3, #80	; 0x50
 8007488:	e893 0003 	ldmia.w	r3, {r0, r1}
 800748c:	e882 0003 	stmia.w	r2, {r0, r1}
         //Successful host name resolution
         error = NO_ERROR;
 8007490:	2300      	movs	r3, #0
 8007492:	83fb      	strh	r3, [r7, #30]
 8007494:	e05a      	b.n	800754c <dnsResolve+0x11c>
      }
      else
      {
         //Host name resolution is in progress...
         error = ERROR_IN_PROGRESS;
 8007496:	f240 2303 	movw	r3, #515	; 0x203
 800749a:	83fb      	strh	r3, [r7, #30]
 800749c:	e056      	b.n	800754c <dnsResolve+0x11c>
      }
   }
   else
   {
      //If no entry exists, then create a new one
      entry = dnsCreateEntry();
 800749e:	f7ff fe8f 	bl	80071c0 <dnsCreateEntry>
 80074a2:	6178      	str	r0, [r7, #20]

      //Record the host name whose IP address is unknown
      strcpy(entry->name, name);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	3310      	adds	r3, #16
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f014 fa2f 	bl	801b90e <strcpy>

      //Initialize DNS cache entry
      entry->type = type;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	79fa      	ldrb	r2, [r7, #7]
 80074b4:	705a      	strb	r2, [r3, #1]
      entry->protocol = HOST_NAME_RESOLVER_DNS;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2201      	movs	r2, #1
 80074ba:	709a      	strb	r2, [r3, #2]
      entry->interface = interface;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	605a      	str	r2, [r3, #4]
      //Select primary DNS server
      entry->dnsServerNum = 0;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2200      	movs	r2, #0
 80074c6:	609a      	str	r2, [r3, #8]

      //Get an ephemeral port number
      entry->port = udpGetDynamicPort();
 80074c8:	f7ff fa20 	bl	800690c <udpGetDynamicPort>
 80074cc:	4603      	mov	r3, r0
 80074ce:	461a      	mov	r2, r3
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	819a      	strh	r2, [r3, #12]

      //An identifier is used by the DNS client to match replies
      //with corresponding requests
      entry->id = (uint16_t) netGetRand();
 80074d4:	f7fa fe7c 	bl	80021d0 <netGetRand>
 80074d8:	4603      	mov	r3, r0
 80074da:	b29a      	uxth	r2, r3
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	81da      	strh	r2, [r3, #14]

      //Callback function to be called when a DNS response is received
      error = udpAttachRxCallback(interface, entry->port, dnsProcessResponse,
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	8999      	ldrh	r1, [r3, #12]
 80074e4:	2300      	movs	r3, #0
 80074e6:	4a4a      	ldr	r2, [pc, #296]	; (8007610 <dnsResolve+0x1e0>)
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff fd5d 	bl	8006fa8 <udpAttachRxCallback>
 80074ee:	4603      	mov	r3, r0
 80074f0:	83fb      	strh	r3, [r7, #30]
         NULL);

      //Check status code
      if(!error)
 80074f2:	8bfb      	ldrh	r3, [r7, #30]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d129      	bne.n	800754c <dnsResolve+0x11c>
      {
         //Initialize retransmission counter
         entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2203      	movs	r2, #3
 80074fc:	665a      	str	r2, [r3, #100]	; 0x64
         //Send DNS query
         error = dnsSendQuery(entry);
 80074fe:	6978      	ldr	r0, [r7, #20]
 8007500:	f000 f88c 	bl	800761c <dnsSendQuery>
 8007504:	4603      	mov	r3, r0
 8007506:	83fb      	strh	r3, [r7, #30]

         //DNS message successfully sent?
         if(!error)
 8007508:	8bfb      	ldrh	r3, [r7, #30]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d118      	bne.n	8007540 <dnsResolve+0x110>
         {
            //Save the time at which the query message was sent
            entry->timestamp = osGetSystemTime();
 800750e:	f7f9 f95f 	bl	80007d0 <osGetSystemTime>
 8007512:	4602      	mov	r2, r0
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	659a      	str	r2, [r3, #88]	; 0x58
            //Set timeout value
            entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800751e:	65da      	str	r2, [r3, #92]	; 0x5c
            entry->maxTimeout = DNS_CLIENT_MAX_TIMEOUT;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	661a      	str	r2, [r3, #96]	; 0x60
            //Decrement retransmission counter
            entry->retransmitCount--;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800752c:	1e5a      	subs	r2, r3, #1
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	665a      	str	r2, [r3, #100]	; 0x64

            //Switch state
            entry->state = DNS_STATE_IN_PROGRESS;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2201      	movs	r2, #1
 8007536:	701a      	strb	r2, [r3, #0]
            //Host name resolution is in progress
            error = ERROR_IN_PROGRESS;
 8007538:	f240 2303 	movw	r3, #515	; 0x203
 800753c:	83fb      	strh	r3, [r7, #30]
 800753e:	e005      	b.n	800754c <dnsResolve+0x11c>
         }
         else
         {
            //Unregister callback function
            udpDetachRxCallback(interface, entry->port);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	899b      	ldrh	r3, [r3, #12]
 8007544:	4619      	mov	r1, r3
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fd6a 	bl	8007020 <udpDetachRxCallback>
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800754c:	482f      	ldr	r0, [pc, #188]	; (800760c <dnsResolve+0x1dc>)
 800754e:	f7f9 f932 	bl	80007b6 <osReleaseMutex>

#if (NET_RTOS_SUPPORT == ENABLED)
   //Set default polling interval
   delay = DNS_CACHE_INIT_POLLING_INTERVAL;
 8007552:	230a      	movs	r3, #10
 8007554:	61bb      	str	r3, [r7, #24]

   //Wait the host name resolution to complete
   while(error == ERROR_IN_PROGRESS)
 8007556:	e02a      	b.n	80075ae <dnsResolve+0x17e>
   {
      //Wait until the next polling period
      osDelayTask(delay);
 8007558:	69b8      	ldr	r0, [r7, #24]
 800755a:	f7f9 f866 	bl	800062a <osDelayTask>

      //Get exclusive access
      osAcquireMutex(&netMutex);
 800755e:	482b      	ldr	r0, [pc, #172]	; (800760c <dnsResolve+0x1dc>)
 8007560:	f7f9 f91a 	bl	8000798 <osAcquireMutex>

      //Search the DNS cache for the specified host name
      entry = dnsFindEntry(interface, name, type, HOST_NAME_RESOLVER_DNS);
 8007564:	79fa      	ldrb	r2, [r7, #7]
 8007566:	2301      	movs	r3, #1
 8007568:	68b9      	ldr	r1, [r7, #8]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff fe84 	bl	8007278 <dnsFindEntry>
 8007570:	6178      	str	r0, [r7, #20]

      //Check whether a matching entry has been found
      if(entry)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00d      	beq.n	8007594 <dnsResolve+0x164>
      {
         //Host name successfully resolved?
         if(entry->state == DNS_STATE_RESOLVED)
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d10b      	bne.n	8007598 <dnsResolve+0x168>
         {
            //Return the corresponding IP address
            *ipAddr = entry->ipAddr;
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	3350      	adds	r3, #80	; 0x50
 8007586:	e893 0003 	ldmia.w	r3, {r0, r1}
 800758a:	e882 0003 	stmia.w	r2, {r0, r1}
            //Successful host name resolution
            error = NO_ERROR;
 800758e:	2300      	movs	r3, #0
 8007590:	83fb      	strh	r3, [r7, #30]
 8007592:	e001      	b.n	8007598 <dnsResolve+0x168>
         }
      }
      else
      {
         //Host name resolution failed
         error = ERROR_FAILURE;
 8007594:	2301      	movs	r3, #1
 8007596:	83fb      	strh	r3, [r7, #30]
      }

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8007598:	481c      	ldr	r0, [pc, #112]	; (800760c <dnsResolve+0x1dc>)
 800759a:	f7f9 f90c 	bl	80007b6 <osReleaseMutex>

      //Backoff support for less aggressive polling
      delay = MIN(delay * 2, DNS_CACHE_MAX_POLLING_INTERVAL);
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075a6:	bf28      	it	cs
 80075a8:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 80075ac:	61bb      	str	r3, [r7, #24]
   while(error == ERROR_IN_PROGRESS)
 80075ae:	8bfb      	ldrh	r3, [r7, #30]
 80075b0:	f240 2203 	movw	r2, #515	; 0x203
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d0cf      	beq.n	8007558 <dnsResolve+0x128>
   }

   //Check status code
   if(error)
 80075b8:	8bfb      	ldrh	r3, [r7, #30]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00c      	beq.n	80075d8 <dnsResolve+0x1a8>
   {
      //Failed to resolve host name
      TRACE_INFO("Host name resolution failed!\r\n");
 80075be:	f7f9 f83f 	bl	8000640 <osSuspendAllTasks>
 80075c2:	4b10      	ldr	r3, [pc, #64]	; (8007604 <dnsResolve+0x1d4>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	221e      	movs	r2, #30
 80075ca:	2101      	movs	r1, #1
 80075cc:	4811      	ldr	r0, [pc, #68]	; (8007614 <dnsResolve+0x1e4>)
 80075ce:	f013 fd45 	bl	801b05c <fwrite>
 80075d2:	f7f9 f840 	bl	8000656 <osResumeAllTasks>
 80075d6:	e010      	b.n	80075fa <dnsResolve+0x1ca>
   }
   else
   {
      //Successful host name resolution
      TRACE_INFO("Host name resolved to %s...\r\n", ipAddrToString(ipAddr, NULL));
 80075d8:	f7f9 f832 	bl	8000640 <osSuspendAllTasks>
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <dnsResolve+0x1d4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68dc      	ldr	r4, [r3, #12]
 80075e2:	2100      	movs	r1, #0
 80075e4:	6838      	ldr	r0, [r7, #0]
 80075e6:	f7fa fa0d 	bl	8001a04 <ipAddrToString>
 80075ea:	4603      	mov	r3, r0
 80075ec:	461a      	mov	r2, r3
 80075ee:	490a      	ldr	r1, [pc, #40]	; (8007618 <dnsResolve+0x1e8>)
 80075f0:	4620      	mov	r0, r4
 80075f2:	f013 fcd3 	bl	801af9c <fiprintf>
 80075f6:	f7f9 f82e 	bl	8000656 <osResumeAllTasks>
   }
#endif

   //Return status code
   return error;
 80075fa:	8bfb      	ldrh	r3, [r7, #30]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3724      	adds	r7, #36	; 0x24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd90      	pop	{r4, r7, pc}
 8007604:	20000058 	.word	0x20000058
 8007608:	0801c47c 	.word	0x0801c47c
 800760c:	2000e460 	.word	0x2000e460
 8007610:	080077d5 	.word	0x080077d5
 8007614:	0801c4a8 	.word	0x0801c4a8
 8007618:	0801c4c8 	.word	0x0801c4c8

0800761c <dnsSendQuery>:
 * @param[in] entry Pointer to a valid DNS cache entry
 * @return Error code
 **/

error_t dnsSendQuery(DnsCacheEntry *entry)
{
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	b091      	sub	sp, #68	; 0x44
 8007620:	af04      	add	r7, sp, #16
 8007622:	6078      	str	r0, [r7, #4]
   DnsQuestion *dnsQuestion;
   IpAddr destIpAddr;

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b10      	cmp	r3, #16
 800762a:	d11a      	bne.n	8007662 <dnsSendQuery+0x46>
   {
      //Point to the IPv4 context
      Ipv4Context *ipv4Context = &entry->interface->ipv4Context;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	338c      	adds	r3, #140	; 0x8c
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c

      //Out of range index?
      if(entry->dnsServerNum >= IPV4_DNS_SERVER_LIST_SIZE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d902      	bls.n	8007642 <dnsSendQuery+0x26>
         return ERROR_NO_DNS_SERVER;
 800763c:	f240 2323 	movw	r3, #547	; 0x223
 8007640:	e0bf      	b.n	80077c2 <dnsSendQuery+0x1a6>

      //Select the relevant DNS server
      destIpAddr.length = sizeof(Ipv4Addr);
 8007642:	2304      	movs	r3, #4
 8007644:	60fb      	str	r3, [r7, #12]
      destIpAddr.ipv4Addr = ipv4Context->dnsServerList[entry->dnsServerNum];
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764c:	3308      	adds	r3, #8
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	613b      	str	r3, [r7, #16]

      //Make sure the IP address is valid
      if(destIpAddr.ipv4Addr == IPV4_UNSPECIFIED_ADDR)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <dnsSendQuery+0x4a>
         return ERROR_NO_DNS_SERVER;
 800765c:	f240 2323 	movw	r3, #547	; 0x223
 8007660:	e0af      	b.n	80077c2 <dnsSendQuery+0x1a6>
   else
#endif
   //Invalid host type?
   {
      //Report an error
      return ERROR_INVALID_PARAMETER;
 8007662:	2302      	movs	r3, #2
 8007664:	e0ad      	b.n	80077c2 <dnsSendQuery+0x1a6>
   }

   //Allocate a memory buffer to hold the DNS query message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 8007666:	f107 0314 	add.w	r3, r7, #20
 800766a:	4619      	mov	r1, r3
 800766c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007670:	f7ff fc38 	bl	8006ee4 <udpAllocBuffer>
 8007674:	62b8      	str	r0, [r7, #40]	; 0x28
   //Failed to allocate buffer?
   if(buffer == NULL)
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <dnsSendQuery+0x64>
      return ERROR_OUT_OF_MEMORY;
 800767c:	2364      	movs	r3, #100	; 0x64
 800767e:	e0a0      	b.n	80077c2 <dnsSendQuery+0x1a6>

   //Point to the DNS header
   message = netBufferAt(buffer, offset);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	4619      	mov	r1, r3
 8007684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007686:	f7fa ffeb 	bl	8002660 <netBufferAt>
 800768a:	6278      	str	r0, [r7, #36]	; 0x24

   //Format DNS query message
   message->id = htons(entry->id);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	89db      	ldrh	r3, [r3, #14]
 8007690:	4618      	mov	r0, r3
 8007692:	f7f8 ff85 	bl	80005a0 <swapInt16>
 8007696:	4603      	mov	r3, r0
 8007698:	461a      	mov	r2, r3
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	801a      	strh	r2, [r3, #0]
   message->qr = 0;
 800769e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a0:	7893      	ldrb	r3, [r2, #2]
 80076a2:	f36f 13c7 	bfc	r3, #7, #1
 80076a6:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 80076a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076aa:	7893      	ldrb	r3, [r2, #2]
 80076ac:	f36f 03c6 	bfc	r3, #3, #4
 80076b0:	7093      	strb	r3, [r2, #2]
   message->aa = 0;
 80076b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b4:	7893      	ldrb	r3, [r2, #2]
 80076b6:	f36f 0382 	bfc	r3, #2, #1
 80076ba:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 80076bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076be:	7893      	ldrb	r3, [r2, #2]
 80076c0:	f36f 0341 	bfc	r3, #1, #1
 80076c4:	7093      	strb	r3, [r2, #2]
   message->rd = 1;
 80076c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c8:	7893      	ldrb	r3, [r2, #2]
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	7093      	strb	r3, [r2, #2]
   message->ra = 0;
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	78d3      	ldrb	r3, [r2, #3]
 80076d4:	f36f 13c7 	bfc	r3, #7, #1
 80076d8:	70d3      	strb	r3, [r2, #3]
   message->z = 0;
 80076da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076dc:	78d3      	ldrb	r3, [r2, #3]
 80076de:	f36f 1306 	bfc	r3, #4, #3
 80076e2:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 80076e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e6:	78d3      	ldrb	r3, [r2, #3]
 80076e8:	f36f 0303 	bfc	r3, #0, #4
 80076ec:	70d3      	strb	r3, [r2, #3]

   //The DNS query contains one question
   message->qdcount = HTONS(1);
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	2200      	movs	r2, #0
 80076f2:	711a      	strb	r2, [r3, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	2200      	movs	r2, #0
 8007700:	719a      	strb	r2, [r3, #6]
 8007702:	2200      	movs	r2, #0
 8007704:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	2200      	movs	r2, #0
 800770a:	721a      	strb	r2, [r3, #8]
 800770c:	2200      	movs	r2, #0
 800770e:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	2200      	movs	r2, #0
 8007714:	729a      	strb	r2, [r3, #10]
 8007716:	2200      	movs	r2, #0
 8007718:	72da      	strb	r2, [r3, #11]

   //Length of the DNS query message
   length = sizeof(DnsHeader);
 800771a:	230c      	movs	r3, #12
 800771c:	623b      	str	r3, [r7, #32]

   //Encode the host name using the DNS name notation
   length += dnsEncodeName(entry->name, message->questions);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f103 0210 	add.w	r2, r3, #16
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	330c      	adds	r3, #12
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f000 f9d8 	bl	8007ae0 <dnsEncodeName>
 8007730:	4602      	mov	r2, r0
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	4413      	add	r3, r2
 8007736:	623b      	str	r3, [r7, #32]

   //Point to the corresponding question structure
   dnsQuestion = DNS_GET_QUESTION(message, length);
 8007738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	4413      	add	r3, r2
 800773e:	61fb      	str	r3, [r7, #28]

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	2b10      	cmp	r3, #16
 8007746:	d10d      	bne.n	8007764 <dnsSendQuery+0x148>
   {
      //Fill in question structure
      dnsQuestion->qtype = HTONS(DNS_RR_TYPE_A);
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	2200      	movs	r2, #0
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	705a      	strb	r2, [r3, #1]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2200      	movs	r2, #0
 800775a:	709a      	strb	r2, [r3, #2]
 800775c:	2200      	movs	r2, #0
 800775e:	f042 0201 	orr.w	r2, r2, #1
 8007762:	70da      	strb	r2, [r3, #3]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
   }
#endif

   //Update the length of the DNS query message
   length += sizeof(DnsQuestion);
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	3304      	adds	r3, #4
 8007768:	623b      	str	r3, [r7, #32]

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	4413      	add	r3, r2
 8007770:	4619      	mov	r1, r3
 8007772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007774:	f7fa fece 	bl	8002514 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending DNS message (%" PRIuSIZE " bytes)...\r\n", length);
 8007778:	f7f8 ff62 	bl	8000640 <osSuspendAllTasks>
 800777c:	4b13      	ldr	r3, [pc, #76]	; (80077cc <dnsSendQuery+0x1b0>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	6a3a      	ldr	r2, [r7, #32]
 8007784:	4912      	ldr	r1, [pc, #72]	; (80077d0 <dnsSendQuery+0x1b4>)
 8007786:	4618      	mov	r0, r3
 8007788:	f013 fc08 	bl	801af9c <fiprintf>
 800778c:	f7f8 ff63 	bl	8000656 <osResumeAllTasks>
   //Dump message
   dnsDumpMessage(message, length);

   //Send DNS query message
   error = udpSendDatagramEx(entry->interface, NULL, entry->port,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6858      	ldr	r0, [r3, #4]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8999      	ldrh	r1, [r3, #12]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f107 040c 	add.w	r4, r7, #12
 800779e:	2200      	movs	r2, #0
 80077a0:	9203      	str	r2, [sp, #12]
 80077a2:	9302      	str	r3, [sp, #8]
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	2335      	movs	r3, #53	; 0x35
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	4623      	mov	r3, r4
 80077ae:	460a      	mov	r2, r1
 80077b0:	2100      	movs	r1, #0
 80077b2:	f7ff fa78 	bl	8006ca6 <udpSendDatagramEx>
 80077b6:	4603      	mov	r3, r0
 80077b8:	837b      	strh	r3, [r7, #26]
      &destIpAddr, DNS_PORT, buffer, offset, 0);

   //Free previously allocated memory
   netBufferFree(buffer);
 80077ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077bc:	f7fa fe79 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 80077c0:	8b7b      	ldrh	r3, [r7, #26]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3734      	adds	r7, #52	; 0x34
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd90      	pop	{r4, r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000058 	.word	0x20000058
 80077d0:	0801c4e8 	.word	0x0801c4e8

080077d4 <dnsProcessResponse>:
 * @param[in] param Callback function parameter (not used)
 **/

void dnsProcessResponse(NetInterface *interface, const IpPseudoHeader *pseudoHeader,
   const UdpHeader *udpHeader, const NetBuffer *buffer, size_t offset, void *param)
{
 80077d4:	b590      	push	{r4, r7, lr}
 80077d6:	b08f      	sub	sp, #60	; 0x3c
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
   DnsQuestion *question;
   DnsResourceRecord *record;
   DnsCacheEntry *entry;

   //Retrieve the length of the DNS message
   length = netBufferGetLength(buffer) - offset;
 80077e2:	6838      	ldr	r0, [r7, #0]
 80077e4:	f7fa fe74 	bl	80024d0 <netBufferGetLength>
 80077e8:	4602      	mov	r2, r0
 80077ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	623b      	str	r3, [r7, #32]

   //Ensure the DNS message is valid
   if(length < sizeof(DnsHeader))
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	2b0b      	cmp	r3, #11
 80077f4:	f240 8150 	bls.w	8007a98 <dnsProcessResponse+0x2c4>
      return;
   if(length > DNS_MESSAGE_MAX_SIZE)
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fe:	f200 814d 	bhi.w	8007a9c <dnsProcessResponse+0x2c8>
      return;

   //Point to the DNS message header
   message = netBufferAt(buffer, offset);
 8007802:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007804:	6838      	ldr	r0, [r7, #0]
 8007806:	f7fa ff2b 	bl	8002660 <netBufferAt>
 800780a:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(message == NULL)
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 8146 	beq.w	8007aa0 <dnsProcessResponse+0x2cc>
      return;

   //Debug message
   TRACE_INFO("DNS message received (%" PRIuSIZE " bytes)...\r\n", length);
 8007814:	f7f8 ff14 	bl	8000640 <osSuspendAllTasks>
 8007818:	4bac      	ldr	r3, [pc, #688]	; (8007acc <dnsProcessResponse+0x2f8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	6a3a      	ldr	r2, [r7, #32]
 8007820:	49ab      	ldr	r1, [pc, #684]	; (8007ad0 <dnsProcessResponse+0x2fc>)
 8007822:	4618      	mov	r0, r3
 8007824:	f013 fbba 	bl	801af9c <fiprintf>
 8007828:	f7f8 ff15 	bl	8000656 <osResumeAllTasks>
   //Dump message
   dnsDumpMessage(message, length);

   //Check message type
   if(!message->qr)
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	789b      	ldrb	r3, [r3, #2]
 8007830:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 8134 	beq.w	8007aa4 <dnsProcessResponse+0x2d0>
      return;

   //The DNS message shall contain one question
   if(ntohs(message->qdcount) != 1)
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	889b      	ldrh	r3, [r3, #4]
 8007840:	b29b      	uxth	r3, r3
 8007842:	4618      	mov	r0, r3
 8007844:	f7f8 feac 	bl	80005a0 <swapInt16>
 8007848:	4603      	mov	r3, r0
 800784a:	2b01      	cmp	r3, #1
 800784c:	f040 812c 	bne.w	8007aa8 <dnsProcessResponse+0x2d4>
      return;

   //Loop through DNS cache entries
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007850:	2300      	movs	r3, #0
 8007852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007854:	e11b      	b.n	8007a8e <dnsProcessResponse+0x2ba>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	2268      	movs	r2, #104	; 0x68
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	4a9d      	ldr	r2, [pc, #628]	; (8007ad4 <dnsProcessResponse+0x300>)
 8007860:	4413      	add	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]

      //DNS name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS &&
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	f040 810d 	bne.w	8007a88 <dnsProcessResponse+0x2b4>
         entry->protocol == HOST_NAME_RESOLVER_DNS)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	789b      	ldrb	r3, [r3, #2]
      if(entry->state == DNS_STATE_IN_PROGRESS &&
 8007872:	2b01      	cmp	r3, #1
 8007874:	f040 8108 	bne.w	8007a88 <dnsProcessResponse+0x2b4>
      {
         //Check destination port number
         if(entry->port == ntohs(udpHeader->destPort))
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	899c      	ldrh	r4, [r3, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	885b      	ldrh	r3, [r3, #2]
 8007880:	b29b      	uxth	r3, r3
 8007882:	4618      	mov	r0, r3
 8007884:	f7f8 fe8c 	bl	80005a0 <swapInt16>
 8007888:	4603      	mov	r3, r0
 800788a:	429c      	cmp	r4, r3
 800788c:	f040 80fc 	bne.w	8007a88 <dnsProcessResponse+0x2b4>
         {
            //Compare identifier against the expected one
            if(ntohs(message->id) != entry->id)
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	4618      	mov	r0, r3
 8007898:	f7f8 fe82 	bl	80005a0 <swapInt16>
 800789c:	4603      	mov	r3, r0
 800789e:	461a      	mov	r2, r3
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	89db      	ldrh	r3, [r3, #14]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	f040 8101 	bne.w	8007aac <dnsProcessResponse+0x2d8>
               break;

            //Point to the first question
            pos = sizeof(DnsHeader);
 80078aa:	230c      	movs	r3, #12
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
            //Parse domain name
            pos = dnsParseName(message, length, pos, NULL, 0);
 80078ae:	2300      	movs	r3, #0
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	2300      	movs	r3, #0
 80078b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b6:	6a39      	ldr	r1, [r7, #32]
 80078b8:	69f8      	ldr	r0, [r7, #28]
 80078ba:	f000 f97c 	bl	8007bb6 <dnsParseName>
 80078be:	6278      	str	r0, [r7, #36]	; 0x24

            //Invalid name?
            if(!pos)
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80f4 	beq.w	8007ab0 <dnsProcessResponse+0x2dc>
               break;
            //Malformed DNS message?
            if((pos + sizeof(DnsQuestion)) > length)
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	3304      	adds	r3, #4
 80078cc:	6a3a      	ldr	r2, [r7, #32]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	f0c0 80f0 	bcc.w	8007ab4 <dnsProcessResponse+0x2e0>
               break;

            //Compare domain name
            if(dnsCompareName(message, length, sizeof(DnsHeader), entry->name, 0))
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f103 0210 	add.w	r2, r3, #16
 80078da:	2300      	movs	r3, #0
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	4613      	mov	r3, r2
 80078e0:	220c      	movs	r2, #12
 80078e2:	6a39      	ldr	r1, [r7, #32]
 80078e4:	69f8      	ldr	r0, [r7, #28]
 80078e6:	f000 fa04 	bl	8007cf2 <dnsCompareName>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 80e3 	bne.w	8007ab8 <dnsProcessResponse+0x2e4>
               break;

            //Point to the corresponding entry
            question = DNS_GET_QUESTION(message, pos);
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	4413      	add	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]

            //Check the class of the query
            if(ntohs(question->qclass) != DNS_RR_CLASS_IN)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	4618      	mov	r0, r3
 8007902:	f7f8 fe4d 	bl	80005a0 <swapInt16>
 8007906:	4603      	mov	r3, r0
 8007908:	2b01      	cmp	r3, #1
 800790a:	f040 80d7 	bne.w	8007abc <dnsProcessResponse+0x2e8>
               break;

            //Check the type of the query
            if(entry->type == HOST_TYPE_IPV4 && ntohs(question->qtype) != DNS_RR_TYPE_A)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b10      	cmp	r3, #16
 8007914:	d109      	bne.n	800792a <dnsProcessResponse+0x156>
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	4618      	mov	r0, r3
 800791e:	f7f8 fe3f 	bl	80005a0 <swapInt16>
 8007922:	4603      	mov	r3, r0
 8007924:	2b01      	cmp	r3, #1
 8007926:	f040 80cb 	bne.w	8007ac0 <dnsProcessResponse+0x2ec>
               break;
            if(entry->type == HOST_TYPE_IPV6 && ntohs(question->qtype) != DNS_RR_TYPE_AAAA)
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b20      	cmp	r3, #32
 8007930:	d109      	bne.n	8007946 <dnsProcessResponse+0x172>
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	4618      	mov	r0, r3
 800793a:	f7f8 fe31 	bl	80005a0 <swapInt16>
 800793e:	4603      	mov	r3, r0
 8007940:	2b1c      	cmp	r3, #28
 8007942:	f040 80bf 	bne.w	8007ac4 <dnsProcessResponse+0x2f0>
               break;

            //Check return code
            if(message->rcode != DNS_RCODE_NO_ERROR)
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	78db      	ldrb	r3, [r3, #3]
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <dnsProcessResponse+0x188>
            {
               //The entry should be deleted since name resolution has failed
               dnsDeleteEntry(entry);
 8007954:	69b8      	ldr	r0, [r7, #24]
 8007956:	f7ff fc71 	bl	800723c <dnsDeleteEntry>
               //Exit immediately
               break;
 800795a:	e0b4      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
            }

            //Point to the first answer
            pos += sizeof(DnsQuestion);
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	3304      	adds	r3, #4
 8007960:	627b      	str	r3, [r7, #36]	; 0x24

            //Parse answer resource records
            for(j = 0; j < ntohs(message->ancount); j++)
 8007962:	2300      	movs	r3, #0
 8007964:	62bb      	str	r3, [r7, #40]	; 0x28
 8007966:	e07c      	b.n	8007a62 <dnsProcessResponse+0x28e>
            {
               //Parse domain name
               pos = dnsParseName(message, length, pos, NULL, 0);
 8007968:	2300      	movs	r3, #0
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	2300      	movs	r3, #0
 800796e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007970:	6a39      	ldr	r1, [r7, #32]
 8007972:	69f8      	ldr	r0, [r7, #28]
 8007974:	f000 f91f 	bl	8007bb6 <dnsParseName>
 8007978:	6278      	str	r0, [r7, #36]	; 0x24
               //Invalid name?
               if(!pos)
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	d07d      	beq.n	8007a7c <dnsProcessResponse+0x2a8>
                  break;

               //Point to the associated resource record
               record = DNS_GET_RESOURCE_RECORD(message, pos);
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	4413      	add	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
               //Point to the resource data
               pos += sizeof(DnsResourceRecord);
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	330a      	adds	r3, #10
 800798c:	627b      	str	r3, [r7, #36]	; 0x24

               //Make sure the resource record is valid
               if(pos > length)
 800798e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	429a      	cmp	r2, r3
 8007994:	d874      	bhi.n	8007a80 <dnsProcessResponse+0x2ac>
                  break;
               if((pos + ntohs(record->rdlength)) > length)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	891b      	ldrh	r3, [r3, #8]
 800799a:	b29b      	uxth	r3, r3
 800799c:	4618      	mov	r0, r3
 800799e:	f7f8 fdff 	bl	80005a0 <swapInt16>
 80079a2:	4603      	mov	r3, r0
 80079a4:	461a      	mov	r2, r3
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	4413      	add	r3, r2
 80079aa:	6a3a      	ldr	r2, [r7, #32]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d369      	bcc.n	8007a84 <dnsProcessResponse+0x2b0>
                  break;

#if (IPV4_SUPPORT == ENABLED)
               //IPv4 address expected?
               if(entry->type == HOST_TYPE_IPV4)
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	2b10      	cmp	r3, #16
 80079b6:	d146      	bne.n	8007a46 <dnsProcessResponse+0x272>
               {
                  //A resource record found?
                  if(ntohs(record->rtype) == DNS_RR_TYPE_A &&
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f8 fdee 	bl	80005a0 <swapInt16>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d13d      	bne.n	8007a46 <dnsProcessResponse+0x272>
                     ntohs(record->rdlength) == sizeof(Ipv4Addr))
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	891b      	ldrh	r3, [r3, #8]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7f8 fde5 	bl	80005a0 <swapInt16>
 80079d6:	4603      	mov	r3, r0
                  if(ntohs(record->rtype) == DNS_RR_TYPE_A &&
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d134      	bne.n	8007a46 <dnsProcessResponse+0x272>
                  {
                     //Copy the IPv4 address
                     entry->ipAddr.length = sizeof(Ipv4Addr);
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	2204      	movs	r2, #4
 80079e0:	651a      	str	r2, [r3, #80]	; 0x50
                     ipv4CopyAddr(&entry->ipAddr.ipv4Addr, record->rdata);
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	3354      	adds	r3, #84	; 0x54
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	320a      	adds	r2, #10
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	601a      	str	r2, [r3, #0]

                     //Save current time
                     entry->timestamp = osGetSystemTime();
 80079ee:	f7f8 feef 	bl	80007d0 <osGetSystemTime>
 80079f2:	4602      	mov	r2, r0
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	659a      	str	r2, [r3, #88]	; 0x58
                     //Save TTL value
                     entry->timeout = ntohl(record->ttl) * 1000;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7f8 fddd 	bl	80005bc <swapInt32>
 8007a02:	4602      	mov	r2, r0
 8007a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a08:	fb03 f202 	mul.w	r2, r3, r2
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	65da      	str	r2, [r3, #92]	; 0x5c

                     //Limit the lifetime of the DNS cache entries
                     if(entry->timeout >= DNS_MAX_LIFETIME)
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a14:	4a30      	ldr	r2, [pc, #192]	; (8007ad8 <dnsProcessResponse+0x304>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d902      	bls.n	8007a20 <dnsProcessResponse+0x24c>
                        entry->timeout = DNS_MAX_LIFETIME;
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	4a2f      	ldr	r2, [pc, #188]	; (8007adc <dnsProcessResponse+0x308>)
 8007a1e:	65da      	str	r2, [r3, #92]	; 0x5c
                     if(entry->timeout <= DNS_MIN_LIFETIME)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a28:	d803      	bhi.n	8007a32 <dnsProcessResponse+0x25e>
                        entry->timeout = DNS_MIN_LIFETIME;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a30:	65da      	str	r2, [r3, #92]	; 0x5c

                     //Unregister UDP callback function
                     udpDetachRxCallback(interface, entry->port);
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	899b      	ldrh	r3, [r3, #12]
 8007a36:	4619      	mov	r1, r3
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff faf1 	bl	8007020 <udpDetachRxCallback>
                     //Host name successfully resolved
                     entry->state = DNS_STATE_RESOLVED;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2202      	movs	r2, #2
 8007a42:	701a      	strb	r2, [r3, #0]
                     //Exit immediately
                     break;
 8007a44:	e01f      	b.n	8007a86 <dnsProcessResponse+0x2b2>
                     break;
                  }
               }
#endif
               //Point to the next resource record
               pos += ntohs(record->rdlength);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	891b      	ldrh	r3, [r3, #8]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7f8 fda7 	bl	80005a0 <swapInt16>
 8007a52:	4603      	mov	r3, r0
 8007a54:	461a      	mov	r2, r3
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	4413      	add	r3, r2
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
            for(j = 0; j < ntohs(message->ancount); j++)
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	3301      	adds	r3, #1
 8007a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	88db      	ldrh	r3, [r3, #6]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7f8 fd99 	bl	80005a0 <swapInt16>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	461a      	mov	r2, r3
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	4293      	cmp	r3, r2
 8007a76:	f4ff af77 	bcc.w	8007968 <dnsProcessResponse+0x194>
            }

            //We are done
            break;
 8007a7a:	e024      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
                  break;
 8007a7c:	bf00      	nop
 8007a7e:	e022      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
                  break;
 8007a80:	bf00      	nop
 8007a82:	e020      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
                  break;
 8007a84:	bf00      	nop
            break;
 8007a86:	e01e      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	2b07      	cmp	r3, #7
 8007a92:	f67f aee0 	bls.w	8007856 <dnsProcessResponse+0x82>
 8007a96:	e016      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
      return;
 8007a98:	bf00      	nop
 8007a9a:	e014      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
      return;
 8007a9c:	bf00      	nop
 8007a9e:	e012      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
      return;
 8007aa0:	bf00      	nop
 8007aa2:	e010      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
      return;
 8007aa4:	bf00      	nop
 8007aa6:	e00e      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
      return;
 8007aa8:	bf00      	nop
 8007aaa:	e00c      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
               break;
 8007aac:	bf00      	nop
 8007aae:	e00a      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
               break;
 8007ab0:	bf00      	nop
 8007ab2:	e008      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
               break;
 8007ab4:	bf00      	nop
 8007ab6:	e006      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
               break;
 8007ab8:	bf00      	nop
 8007aba:	e004      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
               break;
 8007abc:	bf00      	nop
 8007abe:	e002      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
               break;
 8007ac0:	bf00      	nop
 8007ac2:	e000      	b.n	8007ac6 <dnsProcessResponse+0x2f2>
               break;
 8007ac4:	bf00      	nop
         }
      }
   }
}
 8007ac6:	3734      	adds	r7, #52	; 0x34
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd90      	pop	{r4, r7, pc}
 8007acc:	20000058 	.word	0x20000058
 8007ad0:	0801c50c 	.word	0x0801c50c
 8007ad4:	2000feec 	.word	0x2000feec
 8007ad8:	0036ee7f 	.word	0x0036ee7f
 8007adc:	0036ee80 	.word	0x0036ee80

08007ae0 <dnsEncodeName>:
 * @param[out] dest Pointer to the encoded domain name (optional parameter)
 * @return Length of the encoded domain name
 **/

size_t dnsEncodeName(const char_t *src, uint8_t *dest)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
   uint_t i = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
   size_t length = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]

   //Parse input name
   while(1)
   {
      //End of string detected?
      if(src[i] == '\0')
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d11b      	bne.n	8007b36 <dnsEncodeName+0x56>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <dnsEncodeName+0x2a>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b3f      	cmp	r3, #63	; 0x3f
 8007b08:	d901      	bls.n	8007b0e <dnsEncodeName+0x2e>
            return 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e04d      	b.n	8007baa <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d009      	beq.n	8007b28 <dnsEncodeName+0x48>
         {
            dest[0] = i;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	701a      	strb	r2, [r3, #0]
            dest[i + 1] = 0;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	4413      	add	r3, r2
 8007b24:	2200      	movs	r2, #0
 8007b26:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the resulting string
         length += i + 2;
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3302      	adds	r3, #2
 8007b30:	60bb      	str	r3, [r7, #8]

         //Stop parsing the input string
         return length;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	e039      	b.n	8007baa <dnsEncodeName+0xca>
      }
      //Separator detected?
      else if(src[i] == '.')
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b40:	d123      	bne.n	8007b8a <dnsEncodeName+0xaa>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <dnsEncodeName+0x6e>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b3f      	cmp	r3, #63	; 0x3f
 8007b4c:	d901      	bls.n	8007b52 <dnsEncodeName+0x72>
            return 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e02b      	b.n	8007baa <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <dnsEncodeName+0x80>
            dest[0] = i;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	701a      	strb	r2, [r3, #0]

         //Adjust the length of the resulting string
         length += i + 1;
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4413      	add	r3, r2
 8007b66:	3301      	adds	r3, #1
 8007b68:	60bb      	str	r3, [r7, #8]

         //Advance write pointer
         if(dest != NULL)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <dnsEncodeName+0x9a>
            dest += i + 1;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3301      	adds	r3, #1
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	4413      	add	r3, r2
 8007b78:	603b      	str	r3, [r7, #0]

         //Prepare to decode the next label
         src += i + 1;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	607b      	str	r3, [r7, #4]
         i = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	e7b3      	b.n	8007af2 <dnsEncodeName+0x12>
      }
      //Any other character?
      else
      {
         //Copy current character
         if(dest != NULL)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <dnsEncodeName+0xc2>
            dest[i + 1] = src[i];
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	440b      	add	r3, r1
 8007b9e:	7812      	ldrb	r2, [r2, #0]
 8007ba0:	701a      	strb	r2, [r3, #0]

         //Point to the next character
         i++;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	60fb      	str	r3, [r7, #12]
      if(src[i] == '\0')
 8007ba8:	e7a3      	b.n	8007af2 <dnsEncodeName+0x12>
      }
   }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <dnsParseName>:
 * @return The position of the resource record that immediately follows the domain name
 **/

size_t dnsParseName(const DnsHeader *message,
   size_t length, size_t pos, char_t *dest, uint_t level)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b08a      	sub	sp, #40	; 0x28
 8007bba:	af02      	add	r7, sp, #8
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	607a      	str	r2, [r7, #4]
 8007bc2:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *src;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d901      	bls.n	8007bce <dnsParseName+0x18>
      return 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e08d      	b.n	8007cea <dnsParseName+0x134>

   //Cast the input DNS message to byte array
   src = (uint8_t *) message;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 8007bd2:	e084      	b.n	8007cde <dnsParseName+0x128>
   {
      //End marker found?
      if(src[pos] == 0)
 8007bd4:	69fa      	ldr	r2, [r7, #28]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4413      	add	r3, r2
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d108      	bne.n	8007bf2 <dnsParseName+0x3c>
      {
         //Properly terminate the string
         if(dest != NULL)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <dnsParseName+0x36>
            *dest = '\0';
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	e07b      	b.n	8007cea <dnsParseName+0x134>
      }
      //Compression tag found?
      else if(src[pos] >= DNS_COMPRESSION_TAG)
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2bbf      	cmp	r3, #191	; 0xbf
 8007bfc:	d92a      	bls.n	8007c54 <dnsParseName+0x9e>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3301      	adds	r3, #1
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d801      	bhi.n	8007c0c <dnsParseName+0x56>
            return 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e06e      	b.n	8007cea <dnsParseName+0x134>

         //Read the most significant byte of the pointer
         pointer = (src[pos] & ~DNS_COMPRESSION_TAG) << 8;
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4413      	add	r3, r2
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	021b      	lsls	r3, r3, #8
 8007c16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007c1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c1e:	617b      	str	r3, [r7, #20]
         //Read the least significant byte of the pointer
         pointer |= src[pos + 1];
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3301      	adds	r3, #1
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	617b      	str	r3, [r7, #20]

         //Decode the remaining part of the domain name
         if(!dnsParseName(message, length, pointer, dest, level + 1))
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	3301      	adds	r3, #1
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff ffb9 	bl	8007bb6 <dnsParseName>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <dnsParseName+0x98>
         {
            //Domain name decoding failed
            return 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e04d      	b.n	8007cea <dnsParseName+0x134>
         }

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 2);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3302      	adds	r3, #2
 8007c52:	e04a      	b.n	8007cea <dnsParseName+0x134>
      }
      //Valid label length?
      else if(src[pos] < DNS_LABEL_MAX_SIZE)
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4413      	add	r3, r2
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b3e      	cmp	r3, #62	; 0x3e
 8007c5e:	d836      	bhi.n	8007cce <dnsParseName+0x118>
      {
         //Get the length of the current label
         n = src[pos++];
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	607a      	str	r2, [r7, #4]
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	61bb      	str	r3, [r7, #24]

         //Malformed DNS message?
         if((pos + n) > length)
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	4413      	add	r3, r2
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d201      	bcs.n	8007c7e <dnsParseName+0xc8>
            return 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e035      	b.n	8007cea <dnsParseName+0x134>

         //The last parameter is optional
         if(dest != NULL)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01f      	beq.n	8007cc4 <dnsParseName+0x10e>
         {
            //Copy current label
            memcpy(dest, src + pos, n);
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4413      	add	r3, r2
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6838      	ldr	r0, [r7, #0]
 8007c90:	f013 fa46 	bl	801b120 <memcpy>

            //Advance read pointer
            pos += n;
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	4413      	add	r3, r2
 8007c9a:	607b      	str	r3, [r7, #4]
            //Advance write pointer
            dest += n;
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	603b      	str	r3, [r7, #0]

            //Append a separator if necessary
            if(pos < length && src[pos] != '\0')
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d218      	bcs.n	8007cde <dnsParseName+0x128>
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d012      	beq.n	8007cde <dnsParseName+0x128>
               *(dest++) = '.';
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	603a      	str	r2, [r7, #0]
 8007cbe:	222e      	movs	r2, #46	; 0x2e
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	e00c      	b.n	8007cde <dnsParseName+0x128>
         }
         else
         {
            //Advance read pointer
            pos += n;
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	4413      	add	r3, r2
 8007cca:	607b      	str	r3, [r7, #4]
 8007ccc:	e007      	b.n	8007cde <dnsParseName+0x128>
      }
      //Invalid label length?
      else
      {
         //Properly terminate the string
         if(dest != NULL)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <dnsParseName+0x124>
            *dest = '\0';
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	701a      	strb	r2, [r3, #0]
         //Domain name decoding failed
         return 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e005      	b.n	8007cea <dnsParseName+0x134>
   while(pos < length)
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	f4ff af76 	bcc.w	8007bd4 <dnsParseName+0x1e>
      }
   }

   //Domain name decoding failed
   return 0;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3720      	adds	r7, #32
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <dnsCompareName>:
 *   second domain name lexicographically precedes the first name
 **/

int_t dnsCompareName(const DnsHeader *message, size_t length,
   size_t pos, const char_t *name, uint_t level)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b08a      	sub	sp, #40	; 0x28
 8007cf6:	af02      	add	r7, sp, #8
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	607a      	str	r2, [r7, #4]
 8007cfe:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *p;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d902      	bls.n	8007d0c <dnsCompareName+0x1a>
      return -2;
 8007d06:	f06f 0301 	mvn.w	r3, #1
 8007d0a:	e076      	b.n	8007dfa <dnsCompareName+0x108>

   //Cast the DNS message to byte array
   p = (uint8_t *) message;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 8007d10:	e06d      	b.n	8007dee <dnsCompareName+0xfc>
   {
      //Retrieve the length of the current label
      n = p[pos];
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4413      	add	r3, r2
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	61bb      	str	r3, [r7, #24]

      //End marker found?
      if(n == 0)
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d108      	bne.n	8007d34 <dnsCompareName+0x42>
      {
         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0')
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <dnsCompareName+0x3e>
            return -1;
 8007d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d2e:	e064      	b.n	8007dfa <dnsCompareName+0x108>

         //The domain names match each other
         return 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e062      	b.n	8007dfa <dnsCompareName+0x108>
      }
      //Compression tag found?
      else if(n >= DNS_COMPRESSION_TAG)
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2bbf      	cmp	r3, #191	; 0xbf
 8007d38:	d925      	bls.n	8007d86 <dnsCompareName+0x94>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d801      	bhi.n	8007d48 <dnsCompareName+0x56>
            return FALSE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e058      	b.n	8007dfa <dnsCompareName+0x108>

         //Read the most significant byte of the pointer
         pointer = (p[pos] & ~DNS_COMPRESSION_TAG) << 8;
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d5a:	613b      	str	r3, [r7, #16]
         //Read the least significant byte of the pointer
         pointer |= p[pos + 1];
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]

         //Compare the remaining part
         res = dnsCompareName(message, length, pointer, name, level + 1);
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	3301      	adds	r3, #1
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7ff ffb9 	bl	8007cf2 <dnsCompareName>
 8007d80:	6178      	str	r0, [r7, #20]

         //Return comparison result
         return res;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	e039      	b.n	8007dfa <dnsCompareName+0x108>
      }
      else
      {
         //Advance data pointer
         pos++;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	607b      	str	r3, [r7, #4]

         //Malformed DNS message?
         if((pos + n) > length)
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	4413      	add	r3, r2
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d202      	bcs.n	8007d9e <dnsCompareName+0xac>
            return -2;
 8007d98:	f06f 0301 	mvn.w	r3, #1
 8007d9c:	e02d      	b.n	8007dfa <dnsCompareName+0x108>

         //Compare current label
         res = strncasecmp((char_t *) p + pos, name, n);
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f013 fdb8 	bl	801b91e <strncasecmp>
 8007dae:	6178      	str	r0, [r7, #20]
         //Any mismatch?
         if(res)
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <dnsCompareName+0xc8>
            return res;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	e01f      	b.n	8007dfa <dnsCompareName+0x108>

         //Advance data pointer
         pos += n;
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	607b      	str	r3, [r7, #4]
         name += n;
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	603b      	str	r3, [r7, #0]

         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0' && *name != '.')
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d006      	beq.n	8007de0 <dnsCompareName+0xee>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8007dd8:	d002      	beq.n	8007de0 <dnsCompareName+0xee>
            return -1;
 8007dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dde:	e00c      	b.n	8007dfa <dnsCompareName+0x108>

         //Skip the separator character, if any
         if(*name == '.')
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b2e      	cmp	r3, #46	; 0x2e
 8007de6:	d102      	bne.n	8007dee <dnsCompareName+0xfc>
            name++;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	3301      	adds	r3, #1
 8007dec:	603b      	str	r3, [r7, #0]
   while(pos < length)
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d38d      	bcc.n	8007d12 <dnsCompareName+0x20>
      }
   }

   //Malformed DNS message
   return -2;
 8007df6:	f06f 0301 	mvn.w	r3, #1
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <icmpProcessMessage>:
 **/

void icmpProcessMessage(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *buffer,
   size_t offset)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b086      	sub	sp, #24
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
 8007e0e:	603b      	str	r3, [r7, #0]
   //Total number of ICMP messages which the entity received
   MIB2_INC_COUNTER32(icmpGroup.icmpInMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsInMsgs, 1);

   //Retrieve the length of the ICMP message
   length = netBufferGetLength(buffer) - offset;
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7fa fb5d 	bl	80024d0 <netBufferGetLength>
 8007e16:	4602      	mov	r2, r0
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	617b      	str	r3, [r7, #20]

   //Ensure the message length is correct
   if(length < sizeof(IcmpHeader))
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d923      	bls.n	8007e6c <icmpProcessMessage+0x6a>
      //Silently discard incoming message
      return;
   }

   //Point to the ICMP message header
   header = netBufferAt(buffer, offset);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7fa fc1a 	bl	8002660 <netBufferAt>
 8007e2c:	6138      	str	r0, [r7, #16]
   //Sanity check
   if(header == NULL)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01d      	beq.n	8007e70 <icmpProcessMessage+0x6e>
      return;

   //Debug message
   TRACE_INFO("ICMP message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpDumpMessage(header);
 8007e34:	6938      	ldr	r0, [r7, #16]
 8007e36:	f000 f9f7 	bl	8008228 <icmpDumpMessage>

   //Verify checksum value
   if(ipCalcChecksumEx(buffer, offset, length) != 0x0000)
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7f9 fcfc 	bl	800183c <ipCalcChecksumEx>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d114      	bne.n	8007e74 <icmpProcessMessage+0x72>
      //Drop incoming message
      return;
   }

   //Update ICMP statistics
   icmpUpdateInStats(header->type);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f982 	bl	8008158 <icmpUpdateInStats>

   //Check the type of ICMP message
   switch(header->type)
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d000      	beq.n	8007e5e <icmpProcessMessage+0x5c>
   //Unknown type?
   default:
      //Debug message
      TRACE_WARNING("Unknown ICMP message type!\r\n");
      //Discard incoming ICMP message
      break;
 8007e5c:	e00b      	b.n	8007e76 <icmpProcessMessage+0x74>
      icmpProcessEchoRequest(interface, requestPseudoHeader, buffer, offset);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f809 	bl	8007e7c <icmpProcessEchoRequest>
      break;
 8007e6a:	e004      	b.n	8007e76 <icmpProcessMessage+0x74>
      return;
 8007e6c:	bf00      	nop
 8007e6e:	e002      	b.n	8007e76 <icmpProcessMessage+0x74>
      return;
 8007e70:	bf00      	nop
 8007e72:	e000      	b.n	8007e76 <icmpProcessMessage+0x74>
      return;
 8007e74:	bf00      	nop
   }
}
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <icmpProcessEchoRequest>:
 **/

void icmpProcessEchoRequest(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *request,
   size_t requestOffset)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b092      	sub	sp, #72	; 0x48
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
   IcmpEchoMessage *requestHeader;
   IcmpEchoMessage *replyHeader;
   Ipv4PseudoHeader replyPseudoHeader;

   //Retrieve the length of the Echo Request message
   requestLength = netBufferGetLength(request) - requestOffset;
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fa fb20 	bl	80024d0 <netBufferGetLength>
 8007e90:	4602      	mov	r2, r0
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Ensure the packet length is correct
   if(requestLength < sizeof(IcmpEchoMessage))
 8007e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9a:	2b07      	cmp	r3, #7
 8007e9c:	f240 80a1 	bls.w	8007fe2 <icmpProcessEchoRequest+0x166>
      return;

   //Point to the Echo Request header
   requestHeader = netBufferAt(request, requestOffset);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fa fbdc 	bl	8002660 <netBufferAt>
 8007ea8:	63b8      	str	r0, [r7, #56]	; 0x38
   //Sanity check
   if(requestHeader == NULL)
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 809a 	beq.w	8007fe6 <icmpProcessEchoRequest+0x16a>
      return;

   //Debug message
   TRACE_INFO("ICMP Echo Request message received (%" PRIuSIZE " bytes)...\r\n", requestLength);
   //Dump message contents for debugging purpose
   icmpDumpEchoMessage(requestHeader);
 8007eb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007eb4:	f000 f9c2 	bl	800823c <icmpDumpEchoMessage>

   //Check whether the destination address of the Echo Request message is
   //a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f001 faaf 	bl	8009424 <ipv4IsBroadcastAddr>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d105      	bne.n	8007ed8 <icmpProcessEchoRequest+0x5c>
      ipv4IsMulticastAddr(requestPseudoHeader->destAddr))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 8007ed4:	2be0      	cmp	r3, #224	; 0xe0
 8007ed6:	d116      	bne.n	8007f06 <icmpProcessEchoRequest+0x8a>
   {
      Ipv4Addr ipAddr;

      //If support for broadcast Echo Request messages has been explicitly
      //disabled, then the host shall not respond to the incoming request
      if(!interface->ipv4Context.enableBroadcastEchoReq)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 8083 	beq.w	8007fea <icmpProcessEchoRequest+0x16e>
         return;

      //The source address of the reply must be a unicast address belonging to
      //the interface on which the broadcast Echo Request message was received
      error = ipv4SelectSourceAddr(&interface, requestPseudoHeader->srcAddr,
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	6819      	ldr	r1, [r3, #0]
 8007ee8:	f107 0214 	add.w	r2, r7, #20
 8007eec:	f107 030c 	add.w	r3, r7, #12
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 f98d 	bl	8009210 <ipv4SelectSourceAddr>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	86fb      	strh	r3, [r7, #54]	; 0x36
         &ipAddr);
      //Any error to report?
      if(error)
 8007efa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d176      	bne.n	8007fee <icmpProcessEchoRequest+0x172>
         return;

      //Copy the resulting source IP address
      replyPseudoHeader.srcAddr = ipAddr;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	61bb      	str	r3, [r7, #24]
   {
 8007f04:	e002      	b.n	8007f0c <icmpProcessEchoRequest+0x90>
   }
   else
   {
      //The destination address of the Echo Request message is a unicast address
      replyPseudoHeader.srcAddr = requestPseudoHeader->destAddr;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	61bb      	str	r3, [r7, #24]
   }

   //Allocate memory to hold the Echo Reply message
   reply = ipAllocBuffer(sizeof(IcmpEchoMessage), &replyOffset);
 8007f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f10:	4619      	mov	r1, r3
 8007f12:	2008      	movs	r0, #8
 8007f14:	f7f9 fd3a 	bl	800198c <ipAllocBuffer>
 8007f18:	6338      	str	r0, [r7, #48]	; 0x30
   //Failed to allocate memory?
   if(reply == NULL)
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d068      	beq.n	8007ff2 <icmpProcessEchoRequest+0x176>
      return;

   //Point to the Echo Reply header
   replyHeader = netBufferAt(reply, replyOffset);
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	4619      	mov	r1, r3
 8007f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f26:	f7fa fb9b 	bl	8002660 <netBufferAt>
 8007f2a:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Format Echo Reply header
   replyHeader->type = ICMP_TYPE_ECHO_REPLY;
 8007f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2e:	2200      	movs	r2, #0
 8007f30:	701a      	strb	r2, [r3, #0]
   replyHeader->code = 0;
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	2200      	movs	r2, #0
 8007f36:	705a      	strb	r2, [r3, #1]
   replyHeader->checksum = 0;
 8007f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	709a      	strb	r2, [r3, #2]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	70da      	strb	r2, [r3, #3]
   replyHeader->identifier = requestHeader->identifier;
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	889b      	ldrh	r3, [r3, #4]
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	809a      	strh	r2, [r3, #4]
   replyHeader->sequenceNumber = requestHeader->sequenceNumber;
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	88db      	ldrh	r3, [r3, #6]
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	80da      	strh	r2, [r3, #6]

   //Point to the first data byte
   requestOffset += sizeof(IcmpEchoMessage);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	603b      	str	r3, [r7, #0]
   requestLength -= sizeof(IcmpEchoMessage);
 8007f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5e:	3b08      	subs	r3, #8
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Copy data
   error = netBufferConcat(reply, request, requestOffset, requestLength);
 8007f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f6a:	f7fa fbac 	bl	80026c6 <netBufferConcat>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	86fb      	strh	r3, [r7, #54]	; 0x36

   //Check status code
   if(!error)
 8007f72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d130      	bne.n	8007fda <icmpProcessEchoRequest+0x15e>
   {
      //Get the length of the resulting message
      replyLength = netBufferGetLength(reply) - replyOffset;
 8007f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f7a:	f7fa faa9 	bl	80024d0 <netBufferGetLength>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	62bb      	str	r3, [r7, #40]	; 0x28
      //Calculate ICMP header checksum
      replyHeader->checksum = ipCalcChecksumEx(reply, replyOffset, replyLength);
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f8e:	f7f9 fc55 	bl	800183c <ipCalcChecksumEx>
 8007f92:	4603      	mov	r3, r0
 8007f94:	461a      	mov	r2, r3
 8007f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f98:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      replyPseudoHeader.destAddr = requestPseudoHeader->srcAddr;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	61fb      	str	r3, [r7, #28]
      replyPseudoHeader.reserved = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f887 3020 	strb.w	r3, [r7, #32]
      replyPseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      replyPseudoHeader.length = htons(replyLength);
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7f8 faf5 	bl	80005a0 <swapInt16>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	847b      	strh	r3, [r7, #34]	; 0x22

      //Update ICMP statistics
      icmpUpdateOutStats(ICMP_TYPE_ECHO_REPLY);
 8007fba:	2000      	movs	r0, #0
 8007fbc:	f000 f900 	bl	80081c0 <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Echo Reply message (%" PRIuSIZE " bytes)...\r\n", replyLength);
      //Dump message contents for debugging purpose
      icmpDumpEchoMessage(replyHeader);
 8007fc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fc2:	f000 f93b 	bl	800823c <icmpDumpEchoMessage>

      //Send Echo Reply message
      ipv4SendDatagram(interface, &replyPseudoHeader, reply, replyOffset,
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	f107 0118 	add.w	r1, r7, #24
 8007fce:	2340      	movs	r3, #64	; 0x40
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd6:	f000 fb9a 	bl	800870e <ipv4SendDatagram>
         IPV4_DEFAULT_TTL);
   }

   //Free previously allocated memory block
   netBufferFree(reply);
 8007fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fdc:	f7fa fa69 	bl	80024b2 <netBufferFree>
 8007fe0:	e008      	b.n	8007ff4 <icmpProcessEchoRequest+0x178>
      return;
 8007fe2:	bf00      	nop
 8007fe4:	e006      	b.n	8007ff4 <icmpProcessEchoRequest+0x178>
      return;
 8007fe6:	bf00      	nop
 8007fe8:	e004      	b.n	8007ff4 <icmpProcessEchoRequest+0x178>
         return;
 8007fea:	bf00      	nop
 8007fec:	e002      	b.n	8007ff4 <icmpProcessEchoRequest+0x178>
         return;
 8007fee:	bf00      	nop
 8007ff0:	e000      	b.n	8007ff4 <icmpProcessEchoRequest+0x178>
      return;
 8007ff2:	bf00      	nop
}
 8007ff4:	3740      	adds	r7, #64	; 0x40
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <icmpSendErrorMessage>:
 * @return Error code
 **/

error_t icmpSendErrorMessage(NetInterface *interface, uint8_t type, uint8_t code,
   uint8_t parameter, const NetBuffer *ipPacket, size_t ipPacketOffset)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b08e      	sub	sp, #56	; 0x38
 8007ffe:	af02      	add	r7, sp, #8
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	461a      	mov	r2, r3
 8008008:	4603      	mov	r3, r0
 800800a:	70fb      	strb	r3, [r7, #3]
 800800c:	460b      	mov	r3, r1
 800800e:	70bb      	strb	r3, [r7, #2]
 8008010:	4613      	mov	r3, r2
 8008012:	707b      	strb	r3, [r7, #1]
   NetBuffer *icmpMessage;
   IcmpErrorMessage *icmpHeader;
   Ipv4PseudoHeader pseudoHeader;

   //Retrieve the length of the invoking IPv4 packet
   length = netBufferGetLength(ipPacket) - ipPacketOffset;
 8008014:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008016:	f7fa fa5b 	bl	80024d0 <netBufferGetLength>
 800801a:	4602      	mov	r2, r0
 800801c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	62bb      	str	r3, [r7, #40]	; 0x28

   //Check the length of the IPv4 packet
   if(length < sizeof(Ipv4Header))
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	2b13      	cmp	r3, #19
 8008026:	d801      	bhi.n	800802c <icmpSendErrorMessage+0x32>
      return ERROR_INVALID_LENGTH;
 8008028:	23eb      	movs	r3, #235	; 0xeb
 800802a:	e091      	b.n	8008150 <icmpSendErrorMessage+0x156>

   //Point to the header of the invoking packet
   ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 800802c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800802e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008030:	f7fa fb16 	bl	8002660 <netBufferAt>
 8008034:	6278      	str	r0, [r7, #36]	; 0x24
   //Sanity check
   if(ipHeader == NULL)
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <icmpSendErrorMessage+0x46>
      return ERROR_FAILURE;
 800803c:	2301      	movs	r3, #1
 800803e:	e087      	b.n	8008150 <icmpSendErrorMessage+0x156>

   //Never respond to a packet destined to a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f001 f9ec 	bl	8009424 <ipv4IsBroadcastAddr>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d105      	bne.n	800805e <icmpSendErrorMessage+0x64>
      ipv4IsMulticastAddr(ipHeader->destAddr))
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 800805a:	2be0      	cmp	r3, #224	; 0xe0
 800805c:	d101      	bne.n	8008062 <icmpSendErrorMessage+0x68>
   {
      //Report an error
      return ERROR_INVALID_ADDRESS;
 800805e:	23e4      	movs	r3, #228	; 0xe4
 8008060:	e076      	b.n	8008150 <icmpSendErrorMessage+0x156>
   }

   //Length of the data that will be returned along with the ICMP header
   length = MIN(length, (size_t) ipHeader->headerLength * 4 + 8);
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800806a:	b2db      	uxtb	r3, r3
 800806c:	3302      	adds	r3, #2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008072:	4293      	cmp	r3, r2
 8008074:	bf28      	it	cs
 8008076:	4613      	movcs	r3, r2
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28

   //Allocate a memory buffer to hold the ICMP message
   icmpMessage = ipAllocBuffer(sizeof(IcmpErrorMessage), &offset);
 800807a:	f107 0318 	add.w	r3, r7, #24
 800807e:	4619      	mov	r1, r3
 8008080:	2008      	movs	r0, #8
 8008082:	f7f9 fc83 	bl	800198c <ipAllocBuffer>
 8008086:	6238      	str	r0, [r7, #32]
   //Failed to allocate memory?
   if(icmpMessage == NULL)
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <icmpSendErrorMessage+0x98>
      return ERROR_OUT_OF_MEMORY;
 800808e:	2364      	movs	r3, #100	; 0x64
 8008090:	e05e      	b.n	8008150 <icmpSendErrorMessage+0x156>

   //Point to the ICMP header
   icmpHeader = netBufferAt(icmpMessage, offset);
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	4619      	mov	r1, r3
 8008096:	6a38      	ldr	r0, [r7, #32]
 8008098:	f7fa fae2 	bl	8002660 <netBufferAt>
 800809c:	61f8      	str	r0, [r7, #28]

   //Format ICMP message
   icmpHeader->type = type;
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	78fa      	ldrb	r2, [r7, #3]
 80080a2:	701a      	strb	r2, [r3, #0]
   icmpHeader->code = code;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	78ba      	ldrb	r2, [r7, #2]
 80080a8:	705a      	strb	r2, [r3, #1]
   icmpHeader->checksum = 0;
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	2200      	movs	r2, #0
 80080ae:	709a      	strb	r2, [r3, #2]
 80080b0:	2200      	movs	r2, #0
 80080b2:	70da      	strb	r2, [r3, #3]
   icmpHeader->parameter = parameter;
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	787a      	ldrb	r2, [r7, #1]
 80080b8:	711a      	strb	r2, [r3, #4]
   icmpHeader->unused = 0;
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	2200      	movs	r2, #0
 80080be:	715a      	strb	r2, [r3, #5]
 80080c0:	2200      	movs	r2, #0
 80080c2:	719a      	strb	r2, [r3, #6]
 80080c4:	2200      	movs	r2, #0
 80080c6:	71da      	strb	r2, [r3, #7]

   //Copy the IP header and the first 8 bytes of the original datagram data
   error = netBufferConcat(icmpMessage, ipPacket, ipPacketOffset, length);
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080ce:	6a38      	ldr	r0, [r7, #32]
 80080d0:	f7fa faf9 	bl	80026c6 <netBufferConcat>
 80080d4:	4603      	mov	r3, r0
 80080d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Check status code
   if(!error)
 80080d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d134      	bne.n	8008148 <icmpSendErrorMessage+0x14e>
   {
      //Get the length of the resulting message
      length = netBufferGetLength(icmpMessage) - offset;
 80080de:	6a38      	ldr	r0, [r7, #32]
 80080e0:	f7fa f9f6 	bl	80024d0 <netBufferGetLength>
 80080e4:	4602      	mov	r2, r0
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	62bb      	str	r3, [r7, #40]	; 0x28
      //Message checksum calculation
      icmpHeader->checksum = ipCalcChecksumEx(icmpMessage, offset, length);
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080f0:	4619      	mov	r1, r3
 80080f2:	6a38      	ldr	r0, [r7, #32]
 80080f4:	f7f9 fba2 	bl	800183c <ipCalcChecksumEx>
 80080f8:	4603      	mov	r3, r0
 80080fa:	461a      	mov	r2, r3
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      pseudoHeader.srcAddr = ipHeader->destAddr;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	60fb      	str	r3, [r7, #12]
      pseudoHeader.destAddr = ipHeader->srcAddr;
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	613b      	str	r3, [r7, #16]
      pseudoHeader.reserved = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	753b      	strb	r3, [r7, #20]
      pseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 8008110:	2301      	movs	r3, #1
 8008112:	757b      	strb	r3, [r7, #21]
      pseudoHeader.length = htons(length);
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	b29b      	uxth	r3, r3
 8008118:	4618      	mov	r0, r3
 800811a:	f7f8 fa41 	bl	80005a0 <swapInt16>
 800811e:	4603      	mov	r3, r0
 8008120:	82fb      	strh	r3, [r7, #22]

      //Update ICMP statistics
      icmpUpdateOutStats(type);
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f84b 	bl	80081c0 <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Error message (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump message contents for debugging purpose
      icmpDumpErrorMessage(icmpHeader);
 800812a:	69f8      	ldr	r0, [r7, #28]
 800812c:	f000 f890 	bl	8008250 <icmpDumpErrorMessage>

      //Send ICMP Error message
      error = ipv4SendDatagram(interface, &pseudoHeader, icmpMessage, offset,
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	f107 010c 	add.w	r1, r7, #12
 8008136:	2340      	movs	r3, #64	; 0x40
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4613      	mov	r3, r2
 800813c:	6a3a      	ldr	r2, [r7, #32]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fae5 	bl	800870e <ipv4SendDatagram>
 8008144:	4603      	mov	r3, r0
 8008146:	85fb      	strh	r3, [r7, #46]	; 0x2e
         IPV4_DEFAULT_TTL);
   }

   //Free previously allocated memory
   netBufferFree(icmpMessage);
 8008148:	6a38      	ldr	r0, [r7, #32]
 800814a:	f7fa f9b2 	bl	80024b2 <netBufferFree>

   //Return status code
   return error;
 800814e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8008150:	4618      	mov	r0, r3
 8008152:	3730      	adds	r7, #48	; 0x30
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <icmpUpdateInStats>:
 * @brief Update ICMP input statistics
 * @param[in] type ICMP message type
 **/

void icmpUpdateInStats(uint8_t type)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	71fb      	strb	r3, [r7, #7]
   //Check ICMP message type
   switch(type)
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	3b03      	subs	r3, #3
 8008166:	2b0f      	cmp	r3, #15
 8008168:	d822      	bhi.n	80081b0 <icmpUpdateInStats+0x58>
 800816a:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <icmpUpdateInStats+0x18>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	080081b1 	.word	0x080081b1
 8008174:	080081b1 	.word	0x080081b1
 8008178:	080081b1 	.word	0x080081b1
 800817c:	080081b1 	.word	0x080081b1
 8008180:	080081b1 	.word	0x080081b1
 8008184:	080081b1 	.word	0x080081b1
 8008188:	080081b1 	.word	0x080081b1
 800818c:	080081b1 	.word	0x080081b1
 8008190:	080081b1 	.word	0x080081b1
 8008194:	080081b1 	.word	0x080081b1
 8008198:	080081b1 	.word	0x080081b1
 800819c:	080081b1 	.word	0x080081b1
 80081a0:	080081b1 	.word	0x080081b1
 80081a4:	080081b1 	.word	0x080081b1
 80081a8:	080081b1 	.word	0x080081b1
 80081ac:	080081b1 	.word	0x080081b1
      //Number of ICMP Address Mask Reply messages received
      MIB2_INC_COUNTER32(icmpGroup.icmpInAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 80081b0:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsInPkts[type], 1);
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop

080081c0 <icmpUpdateOutStats>:
 * @brief Update ICMP output statistics
 * @param[in] type ICMPv6 message type
 **/

void icmpUpdateOutStats(uint8_t type)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	71fb      	strb	r3, [r7, #7]
   //Total number of ICMP messages which this entity attempted to send
   MIB2_INC_COUNTER32(icmpGroup.icmpOutMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsOutMsgs, 1);

   //Check ICMP message type
   switch(type)
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	3b03      	subs	r3, #3
 80081ce:	2b0f      	cmp	r3, #15
 80081d0:	d822      	bhi.n	8008218 <icmpUpdateOutStats+0x58>
 80081d2:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <icmpUpdateOutStats+0x18>)
 80081d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d8:	08008219 	.word	0x08008219
 80081dc:	08008219 	.word	0x08008219
 80081e0:	08008219 	.word	0x08008219
 80081e4:	08008219 	.word	0x08008219
 80081e8:	08008219 	.word	0x08008219
 80081ec:	08008219 	.word	0x08008219
 80081f0:	08008219 	.word	0x08008219
 80081f4:	08008219 	.word	0x08008219
 80081f8:	08008219 	.word	0x08008219
 80081fc:	08008219 	.word	0x08008219
 8008200:	08008219 	.word	0x08008219
 8008204:	08008219 	.word	0x08008219
 8008208:	08008219 	.word	0x08008219
 800820c:	08008219 	.word	0x08008219
 8008210:	08008219 	.word	0x08008219
 8008214:	08008219 	.word	0x08008219
      //Number of ICMP Address Mask Reply messages sent
      MIB2_INC_COUNTER32(icmpGroup.icmpOutAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 8008218:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsOutPkts[type], 1);
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop

08008228 <icmpDumpMessage>:
 * @brief Dump ICMP message for debugging purpose
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpMessage(const IcmpHeader *message)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <icmpDumpEchoMessage>:
 * @brief Dump ICMP Echo Request or Echo Reply message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpEchoMessage(const IcmpEchoMessage *message)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Identifier = 0x%04" PRIX16 "\r\n", ntohs(message->identifier));
   TRACE_DEBUG("  Sequence Number = 0x%04" PRIX16 "\r\n", ntohs(message->sequenceNumber));
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <icmpDumpErrorMessage>:
 * @brief Dump generic ICMP Error message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpErrorMessage(const IcmpErrorMessage *message)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Parameter = %" PRIu8 "\r\n", message->parameter);
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <ipv4Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ipv4Init(NetInterface *interface)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7fa fc74 	bl	8002b5a <nicGetPhysicalInterface>
 8008272:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	338c      	adds	r3, #140	; 0x8c
 8008278:	60bb      	str	r3, [r7, #8]

   //Clear the IPv4 context
   memset(context, 0, sizeof(Ipv4Context));
 800827a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800827e:	2100      	movs	r1, #0
 8008280:	68b8      	ldr	r0, [r7, #8]
 8008282:	f012 ff71 	bl	801b168 <memset>

   //Initialize interface specific variables
   context->linkMtu = physicalInterface->nicDriver->mtu;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	601a      	str	r2, [r3, #0]
   context->isRouter = FALSE;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2200      	movs	r2, #0
 8008294:	605a      	str	r2, [r3, #4]

   //Broadcast ICMP Echo Request messages are allowed by default
   context->enableBroadcastEchoReq = TRUE;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2201      	movs	r2, #1
 800829a:	609a      	str	r2, [r3, #8]

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   context->identification = 0;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2200      	movs	r2, #0
 80082a0:	819a      	strh	r2, [r3, #12]

   //Initialize the list of DNS servers
   memset(context->dnsServerList, 0, sizeof(context->dnsServerList));
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	3324      	adds	r3, #36	; 0x24
 80082a6:	2208      	movs	r2, #8
 80082a8:	2100      	movs	r1, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f012 ff5c 	bl	801b168 <memset>
   //Initialize the multicast filter table
   memset(context->multicastFilter, 0, sizeof(context->multicastFilter));
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	332c      	adds	r3, #44	; 0x2c
 80082b4:	2250      	movs	r2, #80	; 0x50
 80082b6:	2100      	movs	r1, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f012 ff55 	bl	801b168 <memset>

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Initialize the reassembly queue
   memset(context->fragQueue, 0, sizeof(context->fragQueue));
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	337c      	adds	r3, #124	; 0x7c
 80082c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80082c6:	2100      	movs	r1, #0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f012 ff4d 	bl	801b168 <memset>
#endif

   //Successful initialization
   return NO_ERROR;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <ipv4SetHostAddr>:
 * @param[in] addr IPv4 host address
 * @return Error code
 **/

error_t ipv4SetHostAddr(NetInterface *interface, Ipv4Addr addr)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
   //Set IPv4 host address
   return ipv4SetHostAddrEx(interface, 0, addr);
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	2100      	movs	r1, #0
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f806 	bl	80082f8 <ipv4SetHostAddrEx>
 80082ec:	4603      	mov	r3, r0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <ipv4SetHostAddrEx>:
 * @param[in] addr IPv4 host address
 * @return Error code
 **/

error_t ipv4SetHostAddrEx(NetInterface *interface, uint_t index, Ipv4Addr addr)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
   Ipv4AddrEntry *entry;

   //Check parameters
   if(interface == NULL)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <ipv4SetHostAddrEx+0x16>
      return ERROR_INVALID_PARAMETER;
 800830a:	2302      	movs	r3, #2
 800830c:	e02d      	b.n	800836a <ipv4SetHostAddrEx+0x72>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <ipv4SetHostAddrEx+0x22>
      return ERROR_OUT_OF_RANGE;
 8008314:	f240 1305 	movw	r3, #261	; 0x105
 8008318:	e027      	b.n	800836a <ipv4SetHostAddrEx+0x72>

   //The IPv4 address must be a valid unicast address
   if(ipv4IsMulticastAddr(addr))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008320:	2be0      	cmp	r3, #224	; 0xe0
 8008322:	d101      	bne.n	8008328 <ipv4SetHostAddrEx+0x30>
      return ERROR_INVALID_ADDRESS;
 8008324:	23e4      	movs	r3, #228	; 0xe4
 8008326:	e020      	b.n	800836a <ipv4SetHostAddrEx+0x72>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8008328:	4812      	ldr	r0, [pc, #72]	; (8008374 <ipv4SetHostAddrEx+0x7c>)
 800832a:	f7f8 fa35 	bl	8000798 <osAcquireMutex>

   //Point to the corresponding entry
   entry = &interface->ipv4Context.addrList[index];
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	3398      	adds	r3, #152	; 0x98
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	3304      	adds	r3, #4
 8008340:	617b      	str	r3, [r7, #20]

   //Set up host address
   entry->addr = addr;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]
   //Clear conflict flag
   entry->conflict = FALSE;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2200      	movs	r2, #0
 800834c:	609a      	str	r2, [r3, #8]

   //Check whether the new host address is valid
   if(addr != IPV4_UNSPECIFIED_ADDR)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <ipv4SetHostAddrEx+0x64>
   {
      //The use of the IPv4 address is now unrestricted
      entry->state = IPV4_ADDR_STATE_VALID;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2202      	movs	r2, #2
 8008358:	711a      	strb	r2, [r3, #4]
 800835a:	e002      	b.n	8008362 <ipv4SetHostAddrEx+0x6a>
   }
   else
   {
      //The IPv4 address is no longer valid
      entry->state = IPV4_ADDR_STATE_INVALID;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2200      	movs	r2, #0
 8008360:	711a      	strb	r2, [r3, #4]
   //Restart mDNS probing process
   mdnsResponderStartProbing(interface->mdnsResponderContext);
#endif

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8008362:	4804      	ldr	r0, [pc, #16]	; (8008374 <ipv4SetHostAddrEx+0x7c>)
 8008364:	f7f8 fa27 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	2000e460 	.word	0x2000e460

08008378 <ipv4SetSubnetMask>:
 * @param[in] mask Subnet mask
 * @return Error code
 **/

error_t ipv4SetSubnetMask(NetInterface *interface, Ipv4Addr mask)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
   //Set subnet mask
   return ipv4SetSubnetMaskEx(interface, 0, mask);
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	2100      	movs	r1, #0
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f806 	bl	8008398 <ipv4SetSubnetMaskEx>
 800838c:	4603      	mov	r3, r0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <ipv4SetSubnetMaskEx>:
 * @param[in] mask Subnet mask
 * @return Error code
 **/

error_t ipv4SetSubnetMaskEx(NetInterface *interface, uint_t index, Ipv4Addr mask)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(interface == NULL)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <ipv4SetSubnetMaskEx+0x16>
      return ERROR_INVALID_PARAMETER;
 80083aa:	2302      	movs	r3, #2
 80083ac:	e016      	b.n	80083dc <ipv4SetSubnetMaskEx+0x44>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <ipv4SetSubnetMaskEx+0x22>
      return ERROR_OUT_OF_RANGE;
 80083b4:	f240 1305 	movw	r3, #261	; 0x105
 80083b8:	e010      	b.n	80083dc <ipv4SetSubnetMaskEx+0x44>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80083ba:	480a      	ldr	r0, [pc, #40]	; (80083e4 <ipv4SetSubnetMaskEx+0x4c>)
 80083bc:	f7f8 f9ec 	bl	8000798 <osAcquireMutex>
   //Set up subnet mask
   interface->ipv4Context.addrList[index].subnetMask = mask;
 80083c0:	68f9      	ldr	r1, [r7, #12]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	440b      	add	r3, r1
 80083ce:	33a8      	adds	r3, #168	; 0xa8
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 80083d4:	4803      	ldr	r0, [pc, #12]	; (80083e4 <ipv4SetSubnetMaskEx+0x4c>)
 80083d6:	f7f8 f9ee 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	2000e460 	.word	0x2000e460

080083e8 <ipv4SetDefaultGateway>:
 * @param[in] addr Default gateway address
 * @return Error code
 **/

error_t ipv4SetDefaultGateway(NetInterface *interface, Ipv4Addr addr)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
   //Set default gateway
   return ipv4SetDefaultGatewayEx(interface, 0, addr);
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	2100      	movs	r1, #0
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f806 	bl	8008408 <ipv4SetDefaultGatewayEx>
 80083fc:	4603      	mov	r3, r0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <ipv4SetDefaultGatewayEx>:
 * @return Error code
 **/

error_t ipv4SetDefaultGatewayEx(NetInterface *interface, uint_t index,
   Ipv4Addr addr)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(interface == NULL)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <ipv4SetDefaultGatewayEx+0x16>
      return ERROR_INVALID_PARAMETER;
 800841a:	2302      	movs	r3, #2
 800841c:	e01d      	b.n	800845a <ipv4SetDefaultGatewayEx+0x52>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <ipv4SetDefaultGatewayEx+0x22>
      return ERROR_OUT_OF_RANGE;
 8008424:	f240 1305 	movw	r3, #261	; 0x105
 8008428:	e017      	b.n	800845a <ipv4SetDefaultGatewayEx+0x52>

   //The IPv4 address must be a valid unicast address
   if(ipv4IsMulticastAddr(addr))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008430:	2be0      	cmp	r3, #224	; 0xe0
 8008432:	d101      	bne.n	8008438 <ipv4SetDefaultGatewayEx+0x30>
      return ERROR_INVALID_ADDRESS;
 8008434:	23e4      	movs	r3, #228	; 0xe4
 8008436:	e010      	b.n	800845a <ipv4SetDefaultGatewayEx+0x52>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8008438:	480a      	ldr	r0, [pc, #40]	; (8008464 <ipv4SetDefaultGatewayEx+0x5c>)
 800843a:	f7f8 f9ad 	bl	8000798 <osAcquireMutex>
   //Set up default gateway address
   interface->ipv4Context.addrList[index].defaultGateway = addr;
 800843e:	68f9      	ldr	r1, [r7, #12]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	33ac      	adds	r3, #172	; 0xac
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	601a      	str	r2, [r3, #0]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8008452:	4804      	ldr	r0, [pc, #16]	; (8008464 <ipv4SetDefaultGatewayEx+0x5c>)
 8008454:	f7f8 f9af 	bl	80007b6 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	2000e460 	.word	0x2000e460

08008468 <ipv4LinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ipv4LinkChangeEvent(NetInterface *interface)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7fa fb72 	bl	8002b5a <nicGetPhysicalInterface>
 8008476:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	338c      	adds	r3, #140	; 0x8c
 800847c:	60bb      	str	r3, [r7, #8]

   //Restore default MTU
   context->linkMtu = physicalInterface->nicDriver->mtu;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	601a      	str	r2, [r3, #0]
   arpFlushCache(interface);
#endif

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Flush the reassembly queue
   ipv4FlushFragQueue(interface);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fe11 	bl	80090b0 <ipv4FlushFragQueue>

#if (DHCP_CLIENT_SUPPORT == ENABLED)
   //Notify the DHCP client of link state changes
   dhcpClientLinkChangeEvent(interface->dhcpClientContext);
#endif
}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <ipv4ProcessPacket>:
 * @param[in] packet Incoming IPv4 packet
 * @param[in] length Packet length including header and payload
 **/

void ipv4ProcessPacket(NetInterface *interface, Ipv4Header *packet, size_t length)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b08a      	sub	sp, #40	; 0x28
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	607a      	str	r2, [r7, #4]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 80084a2:	2300      	movs	r3, #0
 80084a4:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Start of exception handling block
   do
   {
      //Ensure the packet length is greater than 20 bytes
      if(length < sizeof(Ipv4Header))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b13      	cmp	r3, #19
 80084aa:	d802      	bhi.n	80084b2 <ipv4ProcessPacket+0x1c>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 80084ac:	23eb      	movs	r3, #235	; 0xeb
 80084ae:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 80084b0:	e09a      	b.n	80085e8 <ipv4ProcessPacket+0x152>
      }

      //Debug message
      TRACE_INFO("IPv4 packet received (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump IP header contents for debugging purpose
      ipv4DumpHeader(packet);
 80084b2:	68b8      	ldr	r0, [r7, #8]
 80084b4:	f000 fab2 	bl	8008a1c <ipv4DumpHeader>

      //A packet whose version number is not 4 must be silently discarded
      if(packet->version != IPV4_VERSION)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	f023 030f 	bic.w	r3, r3, #15
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d002      	beq.n	80084cc <ipv4ProcessPacket+0x36>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 80084c6:	23d4      	movs	r3, #212	; 0xd4
 80084c8:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 80084ca:	e08d      	b.n	80085e8 <ipv4ProcessPacket+0x152>
      }

      //Valid IPv4 header shall contains more than five 32-bit words
      if(packet->headerLength < 5)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d802      	bhi.n	80084e0 <ipv4ProcessPacket+0x4a>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 80084da:	23d4      	movs	r3, #212	; 0xd4
 80084dc:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 80084de:	e083      	b.n	80085e8 <ipv4ProcessPacket+0x152>
      }

      //Ensure the total length is correct before processing the packet
      if(ntohs(packet->totalLength) < (packet->headerLength * 4))
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	885b      	ldrh	r3, [r3, #2]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7f8 f85a 	bl	80005a0 <swapInt16>
 80084ec:	4603      	mov	r3, r0
 80084ee:	461a      	mov	r2, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	429a      	cmp	r2, r3
 80084fe:	da02      	bge.n	8008506 <ipv4ProcessPacket+0x70>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8008500:	23d4      	movs	r3, #212	; 0xd4
 8008502:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008504:	e070      	b.n	80085e8 <ipv4ProcessPacket+0x152>
      }

      //Truncated packet?
      if(length < ntohs(packet->totalLength))
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	885b      	ldrh	r3, [r3, #2]
 800850a:	b29b      	uxth	r3, r3
 800850c:	4618      	mov	r0, r3
 800850e:	f7f8 f847 	bl	80005a0 <swapInt16>
 8008512:	4603      	mov	r3, r0
 8008514:	461a      	mov	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4293      	cmp	r3, r2
 800851a:	d202      	bcs.n	8008522 <ipv4ProcessPacket+0x8c>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 800851c:	23eb      	movs	r3, #235	; 0xeb
 800851e:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008520:	e062      	b.n	80085e8 <ipv4ProcessPacket+0x152>
      }

      //Source address filtering
      if(ipv4CheckSourceAddr(interface, packet->srcAddr))
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fdff 	bl	800912c <ipv4CheckSourceAddr>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <ipv4ProcessPacket+0xa4>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8008534:	23d4      	movs	r3, #212	; 0xd4
 8008536:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008538:	e056      	b.n	80085e8 <ipv4ProcessPacket+0x152>

#if defined(IPV4_PACKET_FORWARD_HOOK)
      IPV4_PACKET_FORWARD_HOOK(interface, packet, length);
#else
      //Destination address filtering
      if(ipv4CheckDestAddr(interface, packet->destAddr))
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	4619      	mov	r1, r3
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 fe0b 	bl	800915c <ipv4CheckDestAddr>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <ipv4ProcessPacket+0xbc>

         //Forward the packet according to the routing table
         ipv4ForwardPacket(interface, (NetBuffer *) &buffer, 0);
#else
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 800854c:	23e4      	movs	r3, #228	; 0xe4
 800854e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
         //We are done
         break;
 8008550:	e04a      	b.n	80085e8 <ipv4ProcessPacket+0x152>
      }
#endif

      //Packets addressed to a tentative address should be silently discarded
      if(ipv4IsTentativeAddr(interface, packet->destAddr))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	4619      	mov	r1, r3
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 ffa3 	bl	80094a4 <ipv4IsTentativeAddr>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <ipv4ProcessPacket+0xd4>
      {
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 8008564:	23e4      	movs	r3, #228	; 0xe4
 8008566:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008568:	e03e      	b.n	80085e8 <ipv4ProcessPacket+0x152>
      }

      //The host must verify the IP header checksum on every received datagram
      //and silently discard every datagram that has a bad checksum (refer to
      //RFC 1122, section 3.2.1.2)
      if(ipCalcChecksum(packet, packet->headerLength * 4) != 0x0000)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008572:	b2db      	uxtb	r3, r3
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4619      	mov	r1, r3
 8008578:	68b8      	ldr	r0, [r7, #8]
 800857a:	f7f9 f8d5 	bl	8001728 <ipCalcChecksum>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <ipv4ProcessPacket+0xf4>
      {
         //Debug message
         TRACE_WARNING("Wrong IP header checksum!\r\n");

         //Discard incoming packet
         error = ERROR_INVALID_HEADER;
 8008584:	23d4      	movs	r3, #212	; 0xd4
 8008586:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8008588:	e02e      	b.n	80085e8 <ipv4ProcessPacket+0x152>
      }

      //Update IP statistics
      ipv4UpdateInStats(interface, packet->destAddr, length);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	4619      	mov	r1, r3
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f001 f851 	bl	800963a <ipv4UpdateInStats>

      //Convert the total length from network byte order
      length = ntohs(packet->totalLength);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	885b      	ldrh	r3, [r3, #2]
 800859c:	b29b      	uxth	r3, r3
 800859e:	4618      	mov	r0, r3
 80085a0:	f7f7 fffe 	bl	80005a0 <swapInt16>
 80085a4:	4603      	mov	r3, r0
 80085a6:	607b      	str	r3, [r7, #4]

      //A fragmented packet was received?
      if(ntohs(packet->fragmentOffset) & (IPV4_FLAG_MF | IPV4_OFFSET_MASK))
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	88db      	ldrh	r3, [r3, #6]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7f7 fff6 	bl	80005a0 <swapInt16>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <ipv4ProcessPacket+0x134>
      {
#if (IPV4_FRAG_SUPPORT == ENABLED)
         //Reassemble the original datagram
         ipv4ReassembleDatagram(interface, packet, length);
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 fabf 	bl	8008b46 <ipv4ReassembleDatagram>
 80085c8:	e00e      	b.n	80085e8 <ipv4ProcessPacket+0x152>
      else
      {
         NetBuffer1 buffer;

         //Unfragmented datagrams fit in a single chunk
         buffer.chunkCount = 1;
 80085ca:	2301      	movs	r3, #1
 80085cc:	617b      	str	r3, [r7, #20]
         buffer.maxChunkCount = 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	61bb      	str	r3, [r7, #24]
         buffer.chunk[0].address = packet;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	61fb      	str	r3, [r7, #28]
         buffer.chunk[0].length = (uint16_t) length;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	843b      	strh	r3, [r7, #32]

         //Pass the IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &buffer);
 80085dc:	f107 0314 	add.w	r3, r7, #20
 80085e0:	4619      	mov	r1, r3
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 f80c 	bl	8008600 <ipv4ProcessDatagram>

      //End of exception handling block
   } while(0);

   //Invalid IPv4 packet received?
   if(error)
 80085e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <ipv4ProcessPacket+0x162>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 80085ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085f0:	4619      	mov	r1, r3
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f001 f842 	bl	800967c <ipv4UpdateErrorStats>
   }
}
 80085f8:	bf00      	nop
 80085fa:	3728      	adds	r7, #40	; 0x28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <ipv4ProcessDatagram>:
 * @param[in] interface Underlying network interface
 * @param[in] buffer Multi-part buffer that holds the incoming IPv4 datagram
 **/

void ipv4ProcessDatagram(NetInterface *interface, const NetBuffer *buffer)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08c      	sub	sp, #48	; 0x30
 8008604:	af02      	add	r7, sp, #8
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
   size_t length;
   Ipv4Header *header;
   IpPseudoHeader pseudoHeader;

   //Retrieve the length of the IPv4 datagram
   length = netBufferGetLength(buffer);
 800860a:	6838      	ldr	r0, [r7, #0]
 800860c:	f7f9 ff60 	bl	80024d0 <netBufferGetLength>
 8008610:	6238      	str	r0, [r7, #32]

   //Point to the IPv4 header
   header = netBufferAt(buffer, 0);
 8008612:	2100      	movs	r1, #0
 8008614:	6838      	ldr	r0, [r7, #0]
 8008616:	f7fa f823 	bl	8002660 <netBufferAt>
 800861a:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(header == NULL)
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d071      	beq.n	8008706 <ipv4ProcessDatagram+0x106>
      return;

   //Debug message
   TRACE_INFO("IPv4 datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump IP header contents for debugging purpose
   ipv4DumpHeader(header);
 8008622:	69f8      	ldr	r0, [r7, #28]
 8008624:	f000 f9fa 	bl	8008a1c <ipv4DumpHeader>

   //Get the offset to the payload
   offset = header->headerLength * 4;
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008630:	b2db      	uxtb	r3, r3
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	61bb      	str	r3, [r7, #24]
   //Compute the length of the payload
   length -= header->headerLength * 4;
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800863e:	b2db      	uxtb	r3, r3
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	461a      	mov	r2, r3
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	1a9b      	subs	r3, r3, r2
 8008648:	623b      	str	r3, [r7, #32]

   //Form the IPv4 pseudo header
   pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 800864a:	230c      	movs	r3, #12
 800864c:	60bb      	str	r3, [r7, #8]
   pseudoHeader.ipv4Data.srcAddr = header->srcAddr;
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	60fb      	str	r3, [r7, #12]
   pseudoHeader.ipv4Data.destAddr = header->destAddr;
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	613b      	str	r3, [r7, #16]
   pseudoHeader.ipv4Data.reserved = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	753b      	strb	r3, [r7, #20]
   pseudoHeader.ipv4Data.protocol = header->protocol;
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	7a5b      	ldrb	r3, [r3, #9]
 8008662:	757b      	strb	r3, [r7, #21]
   pseudoHeader.ipv4Data.length = htons(length);
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	b29b      	uxth	r3, r3
 8008668:	4618      	mov	r0, r3
 800866a:	f7f7 ff99 	bl	80005a0 <swapInt16>
 800866e:	4603      	mov	r3, r0
 8008670:	82fb      	strh	r3, [r7, #22]
#if defined(IPV4_DATAGRAM_FORWARD_HOOK)
   IPV4_DATAGRAM_FORWARD_HOOK(interface, &pseudoHeader, buffer, offset);
#endif

   //Check the protocol field
   switch(header->protocol)
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	7a5b      	ldrb	r3, [r3, #9]
 8008676:	2b06      	cmp	r3, #6
 8008678:	d00e      	beq.n	8008698 <ipv4ProcessDatagram+0x98>
 800867a:	2b11      	cmp	r3, #17
 800867c:	d016      	beq.n	80086ac <ipv4ProcessDatagram+0xac>
 800867e:	2b01      	cmp	r3, #1
 8008680:	d11e      	bne.n	80086c0 <ipv4ProcessDatagram+0xc0>
   {
   //ICMP protocol?
   case IPV4_PROTOCOL_ICMP:
      //Process incoming ICMP message
      icmpProcessMessage(interface, &pseudoHeader.ipv4Data, buffer, offset);
 8008682:	f107 0308 	add.w	r3, r7, #8
 8008686:	1d19      	adds	r1, r3, #4
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff fbb8 	bl	8007e02 <icmpProcessMessage>
#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Allow raw sockets to process ICMP messages
      rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset);
#endif
      //No error to report
      error = NO_ERROR;
 8008692:	2300      	movs	r3, #0
 8008694:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Continue processing
      break;
 8008696:	e016      	b.n	80086c6 <ipv4ProcessDatagram+0xc6>

#if (TCP_SUPPORT == ENABLED)
   //TCP protocol?
   case IPV4_PROTOCOL_TCP:
      //Process incoming TCP segment
      tcpProcessSegment(interface, &pseudoHeader, buffer, offset);
 8008698:	f107 0108 	add.w	r1, r7, #8
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7fb fae5 	bl	8003c70 <tcpProcessSegment>
      //No error to report
      error = NO_ERROR;
 80086a6:	2300      	movs	r3, #0
 80086a8:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Continue processing
      break;
 80086aa:	e00c      	b.n	80086c6 <ipv4ProcessDatagram+0xc6>

#if (UDP_SUPPORT == ENABLED)
   //UDP protocol?
   case IPV4_PROTOCOL_UDP:
      //Process incoming UDP datagram
      error = udpProcessDatagram(interface, &pseudoHeader, buffer, offset);
 80086ac:	f107 0108 	add.w	r1, r7, #8
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7fe f957 	bl	8006968 <udpProcessDatagram>
 80086ba:	4603      	mov	r3, r0
 80086bc:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Continue processing
      break;
 80086be:	e002      	b.n	80086c6 <ipv4ProcessDatagram+0xc6>
#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Allow raw sockets to process IPv4 packets
      error = rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset);
#else
      //Report an error
      error = ERROR_PROTOCOL_UNREACHABLE;
 80086c0:	23d1      	movs	r3, #209	; 0xd1
 80086c2:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
      //Continue processing
      break;
 80086c4:	bf00      	nop
   }

   //Unreachable protocol?
   if(error == ERROR_PROTOCOL_UNREACHABLE)
 80086c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086c8:	2bd1      	cmp	r3, #209	; 0xd1
 80086ca:	d10e      	bne.n	80086ea <ipv4ProcessDatagram+0xea>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 80086cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 ffd3 	bl	800967c <ipv4UpdateErrorStats>

      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 80086d6:	2300      	movs	r3, #0
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	2300      	movs	r3, #0
 80086e0:	2202      	movs	r2, #2
 80086e2:	2103      	movs	r1, #3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff fc88 	bl	8007ffa <icmpSendErrorMessage>
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInDelivers, 1);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInDelivers, 1);
   }

   //Unreachable port?
   if(error == ERROR_PORT_UNREACHABLE)
 80086ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086ec:	2bd2      	cmp	r3, #210	; 0xd2
 80086ee:	d10b      	bne.n	8008708 <ipv4ProcessDatagram+0x108>
   {
      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 80086f0:	2300      	movs	r3, #0
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2300      	movs	r3, #0
 80086fa:	2203      	movs	r2, #3
 80086fc:	2103      	movs	r1, #3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fc7b 	bl	8007ffa <icmpSendErrorMessage>
 8008704:	e000      	b.n	8008708 <ipv4ProcessDatagram+0x108>
      return;
 8008706:	bf00      	nop
         ICMP_CODE_PORT_UNREACHABLE, 0, buffer, 0);
   }
}
 8008708:	3728      	adds	r7, #40	; 0x28
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <ipv4SendDatagram>:
 * @return Error code
 **/

error_t ipv4SendDatagram(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, uint_t flags)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b08c      	sub	sp, #48	; 0x30
 8008712:	af04      	add	r7, sp, #16
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	607a      	str	r2, [r7, #4]
 800871a:	603b      	str	r3, [r7, #0]
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutRequests, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutRequests, 1);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutRequests, 1);

   //Retrieve the length of payload
   length = netBufferGetLength(buffer) - offset;
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7f9 fed7 	bl	80024d0 <netBufferGetLength>
 8008722:	4602      	mov	r2, r0
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	61bb      	str	r3, [r7, #24]

   //Check whether the TTL value is zero
   if((flags & IP_FLAG_TTL) == 0)
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d103      	bne.n	800873a <ipv4SendDatagram+0x2c>
   {
      //Use default Time-To-Live value
      flags |= IPV4_DEFAULT_TTL;
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008738:	62bb      	str	r3, [r7, #40]	; 0x28
   }

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   id = interface->ipv4Context.identification++;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	b291      	uxth	r1, r2
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	f8a2 1098 	strh.w	r1, [r2, #152]	; 0x98
 800874a:	82fb      	strh	r3, [r7, #22]

   //If the payload length is smaller than the network
   //interface MTU then no fragmentation is needed
   if((length + sizeof(Ipv4Header)) <= interface->ipv4Context.linkMtu)
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	f103 0214 	add.w	r2, r3, #20
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008758:	429a      	cmp	r2, r3
 800875a:	d80e      	bhi.n	800877a <ipv4SendDatagram+0x6c>
   {
      //Send data as is
      error = ipv4SendPacket(interface, pseudoHeader, id, 0, buffer, offset,
 800875c:	8afa      	ldrh	r2, [r7, #22]
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	2300      	movs	r3, #0
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f814 	bl	800879c <ipv4SendPacket>
 8008774:	4603      	mov	r3, r0
 8008776:	83fb      	strh	r3, [r7, #30]
 8008778:	e00b      	b.n	8008792 <ipv4SendDatagram+0x84>
   //then the device must fragment the data
   else
   {
#if (IPV4_FRAG_SUPPORT == ENABLED)
      //Fragment IP datagram into smaller packets
      error = ipv4FragmentDatagram(interface, pseudoHeader, id, buffer, offset,
 800877a:	8afa      	ldrh	r2, [r7, #22]
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f951 	bl	8008a30 <ipv4FragmentDatagram>
 800878e:	4603      	mov	r3, r0
 8008790:	83fb      	strh	r3, [r7, #30]
      error = ERROR_MESSAGE_TOO_LONG;
#endif
   }

   //Return status code
   return error;
 8008792:	8bfb      	ldrh	r3, [r7, #30]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3720      	adds	r7, #32
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <ipv4SendPacket>:
 **/

error_t ipv4SendPacket(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   uint16_t fragId, size_t fragOffset, NetBuffer *buffer, size_t offset,
   uint_t flags)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	4613      	mov	r3, r2
 80087aa:	80fb      	strh	r3, [r7, #6]
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;
#endif

   //Is there enough space for the IPv4 header?
   if(offset < sizeof(Ipv4Header))
 80087ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ae:	2b13      	cmp	r3, #19
 80087b0:	d801      	bhi.n	80087b6 <ipv4SendPacket+0x1a>
      return ERROR_INVALID_PARAMETER;
 80087b2:	2302      	movs	r3, #2
 80087b4:	e09a      	b.n	80088ec <ipv4SendPacket+0x150>

   //Make room for the header
   offset -= sizeof(Ipv4Header);
 80087b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b8:	3b14      	subs	r3, #20
 80087ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   //Calculate the size of the entire packet, including header and data
   length = netBufferGetLength(buffer) - offset;
 80087bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087be:	f7f9 fe87 	bl	80024d0 <netBufferGetLength>
 80087c2:	4602      	mov	r2, r0
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	61bb      	str	r3, [r7, #24]

   //Point to the IPv4 header
   packet = netBufferAt(buffer, offset);
 80087ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ce:	f7f9 ff47 	bl	8002660 <netBufferAt>
 80087d2:	6178      	str	r0, [r7, #20]

   //Format IPv4 header
   packet->version = IPV4_VERSION;
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	7813      	ldrb	r3, [r2, #0]
 80087d8:	2104      	movs	r1, #4
 80087da:	f361 1307 	bfi	r3, r1, #4, #4
 80087de:	7013      	strb	r3, [r2, #0]
   packet->headerLength = 5;
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	7813      	ldrb	r3, [r2, #0]
 80087e4:	2105      	movs	r1, #5
 80087e6:	f361 0303 	bfi	r3, r1, #0, #4
 80087ea:	7013      	strb	r3, [r2, #0]
   packet->typeOfService = 0;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2200      	movs	r2, #0
 80087f0:	705a      	strb	r2, [r3, #1]
   packet->totalLength = htons(length);
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7f7 fed2 	bl	80005a0 <swapInt16>
 80087fc:	4603      	mov	r3, r0
 80087fe:	461a      	mov	r2, r3
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	805a      	strh	r2, [r3, #2]
   packet->identification = htons(fragId);
 8008804:	88fb      	ldrh	r3, [r7, #6]
 8008806:	4618      	mov	r0, r3
 8008808:	f7f7 feca 	bl	80005a0 <swapInt16>
 800880c:	4603      	mov	r3, r0
 800880e:	461a      	mov	r2, r3
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	809a      	strh	r2, [r3, #4]
   packet->fragmentOffset = htons(fragOffset);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	4618      	mov	r0, r3
 800881a:	f7f7 fec1 	bl	80005a0 <swapInt16>
 800881e:	4603      	mov	r3, r0
 8008820:	461a      	mov	r2, r3
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	80da      	strh	r2, [r3, #6]
   packet->timeToLive = flags & IP_FLAG_TTL;
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	b2da      	uxtb	r2, r3
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	721a      	strb	r2, [r3, #8]
   packet->protocol = pseudoHeader->protocol;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	7a5a      	ldrb	r2, [r3, #9]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	725a      	strb	r2, [r3, #9]
   packet->headerChecksum = 0;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2200      	movs	r2, #0
 800883a:	729a      	strb	r2, [r3, #10]
 800883c:	2200      	movs	r2, #0
 800883e:	72da      	strb	r2, [r3, #11]
   packet->srcAddr = pseudoHeader->srcAddr;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	60da      	str	r2, [r3, #12]
   packet->destAddr = pseudoHeader->destAddr;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	611a      	str	r2, [r3, #16]

   //Calculate IP header checksum
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
      packet->headerLength * 4);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008858:	b2db      	uxtb	r3, r3
 800885a:	009b      	lsls	r3, r3, #2
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 800885c:	461a      	mov	r2, r3
 800885e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008862:	f7f8 ffeb 	bl	800183c <ipCalcChecksumEx>
 8008866:	4603      	mov	r3, r0
 8008868:	461a      	mov	r2, r3
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	815a      	strh	r2, [r3, #10]

   //Ensure the source address is valid
   error = ipv4CheckSourceAddr(interface, pseudoHeader->srcAddr);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4619      	mov	r1, r3
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 fc59 	bl	800912c <ipv4CheckSourceAddr>
 800887a:	4603      	mov	r3, r0
 800887c:	83fb      	strh	r3, [r7, #30]
   //Invalid source address?
   if(error)
 800887e:	8bfb      	ldrh	r3, [r7, #30]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <ipv4SendPacket+0xec>
      return error;
 8008884:	8bfb      	ldrh	r3, [r7, #30]
 8008886:	e031      	b.n	80088ec <ipv4SendPacket+0x150>

   //Check destination address
   if(pseudoHeader->destAddr == IPV4_UNSPECIFIED_ADDR)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <ipv4SendPacket+0xfa>
   {
      //The unspecified address must not appear on the public Internet
      error = ERROR_INVALID_ADDRESS;
 8008890:	23e4      	movs	r3, #228	; 0xe4
 8008892:	83fb      	strh	r3, [r7, #30]
 8008894:	e029      	b.n	80088ea <ipv4SendPacket+0x14e>
   }
   else if(ipv4IsLocalHostAddr(pseudoHeader->destAddr))
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fe2c 	bl	80094f8 <ipv4IsLocalHostAddr>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <ipv4SendPacket+0x112>
         }
      }
#else
      //Addresses within the entire 127.0.0.0/8 block do not legitimately
      //appear on any network anywhere
      error = ERROR_NO_ROUTE;
 80088a6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80088aa:	83fb      	strh	r3, [r7, #30]
 80088ac:	e01d      	b.n	80088ea <ipv4SendPacket+0x14e>
      }
      else
#endif
#if (PPP_SUPPORT == ENABLED)
      //PPP interface?
      if(interface->nicDriver != NULL &&
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d017      	beq.n	80088e6 <ipv4SendPacket+0x14a>
         interface->nicDriver->type == NIC_TYPE_PPP)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ba:	781b      	ldrb	r3, [r3, #0]
      if(interface->nicDriver != NULL &&
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d112      	bne.n	80088e6 <ipv4SendPacket+0x14a>
      {
         //Update IP statistics
         ipv4UpdateOutStats(interface, pseudoHeader->destAddr, length);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	4619      	mov	r1, r3
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fec6 	bl	800965a <ipv4UpdateOutStats>

         //Debug message
         TRACE_INFO("Sending IPv4 packet (%" PRIuSIZE " bytes)...\r\n", length);
         //Dump IP header contents for debugging purpose
         ipv4DumpHeader(packet);
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	f000 f8a4 	bl	8008a1c <ipv4DumpHeader>

         //Send PPP frame
         error = pppSendFrame(interface, buffer, offset, PPP_PROTOCOL_IP);
 80088d4:	2321      	movs	r3, #33	; 0x21
 80088d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f004 ff42 	bl	800d764 <pppSendFrame>
 80088e0:	4603      	mov	r3, r0
 80088e2:	83fb      	strh	r3, [r7, #30]
 80088e4:	e001      	b.n	80088ea <ipv4SendPacket+0x14e>
      else
#endif
      //Unknown interface type?
      {
         //Report an error
         error = ERROR_INVALID_INTERFACE;
 80088e6:	2307      	movs	r3, #7
 80088e8:	83fb      	strh	r3, [r7, #30]
      }
   }

   //Return status code
   return error;
 80088ea:	8bfb      	ldrh	r3, [r7, #30]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <ipv4StringToAddr>:
 * @param[out] ipAddr Binary representation of the IPv4 address
 * @return Error code
 **/

error_t ipv4StringToAddr(const char_t *str, Ipv4Addr *ipAddr)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
   error_t error;
   int_t i = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	613b      	str	r3, [r7, #16]
   int_t value = -1;
 8008902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008906:	60fb      	str	r3, [r7, #12]

   //Parse input string
   while(1)
   {
      //Decimal digit found?
      if(isdigit((uint8_t) *str))
 8008908:	f012 fbda 	bl	801b0c0 <__locale_ctype_ptr>
 800890c:	4602      	mov	r2, r0
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	3301      	adds	r3, #1
 8008914:	4413      	add	r3, r2
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d015      	beq.n	800894c <ipv4StringToAddr+0x58>
      {
         //First digit to be decoded?
         if(value < 0)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	da01      	bge.n	800892a <ipv4StringToAddr+0x36>
            value = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]

         //Update the value of the current byte
         value = (value * 10) + (*str - '0');
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	461a      	mov	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	3b30      	subs	r3, #48	; 0x30
 800893c:	4413      	add	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]

         //The resulting value shall be in range 0 to 255
         if(value > 255)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2bff      	cmp	r3, #255	; 0xff
 8008944:	dd35      	ble.n	80089b2 <ipv4StringToAddr+0xbe>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8008946:	2369      	movs	r3, #105	; 0x69
 8008948:	82fb      	strh	r3, [r7, #22]
            break;
 800894a:	e036      	b.n	80089ba <ipv4StringToAddr+0xc6>
         }
      }
      //Dot separator found?
      else if(*str == '.' && i < 4)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b2e      	cmp	r3, #46	; 0x2e
 8008952:	d115      	bne.n	8008980 <ipv4StringToAddr+0x8c>
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2b03      	cmp	r3, #3
 8008958:	dc12      	bgt.n	8008980 <ipv4StringToAddr+0x8c>
      {
         //Each dot must be preceded by a valid number
         if(value < 0)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	da02      	bge.n	8008966 <ipv4StringToAddr+0x72>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8008960:	2369      	movs	r3, #105	; 0x69
 8008962:	82fb      	strh	r3, [r7, #22]
            break;
 8008964:	e029      	b.n	80089ba <ipv4StringToAddr+0xc6>
         }

         //Save the current byte
         ((uint8_t *) ipAddr)[i++] = value;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	613a      	str	r2, [r7, #16]
 800896c:	461a      	mov	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	4413      	add	r3, r2
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	b2d2      	uxtb	r2, r2
 8008976:	701a      	strb	r2, [r3, #0]
         //Prepare to decode the next byte
         value = -1;
 8008978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	e018      	b.n	80089b2 <ipv4StringToAddr+0xbe>
      }
      //End of string detected?
      else if(*str == '\0' && i == 3)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d111      	bne.n	80089ac <ipv4StringToAddr+0xb8>
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2b03      	cmp	r3, #3
 800898c:	d10e      	bne.n	80089ac <ipv4StringToAddr+0xb8>
      {
         //The NULL character must be preceded by a valid number
         if(value < 0)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	da02      	bge.n	800899a <ipv4StringToAddr+0xa6>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8008994:	2369      	movs	r3, #105	; 0x69
 8008996:	82fb      	strh	r3, [r7, #22]
            //The conversion succeeded
            error = NO_ERROR;
         }

         //We are done
         break;
 8008998:	e00f      	b.n	80089ba <ipv4StringToAddr+0xc6>
            ((uint8_t *) ipAddr)[i] = value;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	4413      	add	r3, r2
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	701a      	strb	r2, [r3, #0]
            error = NO_ERROR;
 80089a6:	2300      	movs	r3, #0
 80089a8:	82fb      	strh	r3, [r7, #22]
         break;
 80089aa:	e006      	b.n	80089ba <ipv4StringToAddr+0xc6>
      }
      //Invalid character...
      else
      {
         //The conversion failed
         error = ERROR_INVALID_SYNTAX;
 80089ac:	2369      	movs	r3, #105	; 0x69
 80089ae:	82fb      	strh	r3, [r7, #22]
         break;
 80089b0:	e003      	b.n	80089ba <ipv4StringToAddr+0xc6>
      }

      //Point to the next character
      str++;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3301      	adds	r3, #1
 80089b6:	607b      	str	r3, [r7, #4]
      if(isdigit((uint8_t) *str))
 80089b8:	e7a6      	b.n	8008908 <ipv4StringToAddr+0x14>
   }

   //Return status code
   return error;
 80089ba:	8afb      	ldrh	r3, [r7, #22]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <ipv4AddrToString>:
 * @param[out] str NULL-terminated string representing the IPv4 address
 * @return Pointer to the formatted string
 **/

char_t *ipv4AddrToString(Ipv4Addr ipAddr, char_t *str)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
   uint8_t *p;
   static char_t buffer[16];

   //If the NULL pointer is given as parameter, then the internal buffer is used
   if(str == NULL)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <ipv4AddrToString+0x14>
      str = buffer;
 80089d4:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <ipv4AddrToString+0x50>)
 80089d6:	603b      	str	r3, [r7, #0]

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
 80089d8:	1d3b      	adds	r3, r7, #4
 80089da:	60fb      	str	r3, [r7, #12]
   //Format IPv4 address
   sprintf(str, "%" PRIu8 ".%" PRIu8 ".%" PRIu8 ".%" PRIu8 "", p[0], p[1], p[2], p[3]);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	4619      	mov	r1, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3301      	adds	r3, #1
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	4618      	mov	r0, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3302      	adds	r3, #2
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3303      	adds	r3, #3
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	9200      	str	r2, [sp, #0]
 80089fc:	4603      	mov	r3, r0
 80089fe:	460a      	mov	r2, r1
 8008a00:	4905      	ldr	r1, [pc, #20]	; (8008a18 <ipv4AddrToString+0x54>)
 8008a02:	6838      	ldr	r0, [r7, #0]
 8008a04:	f012 ff38 	bl	801b878 <siprintf>

   //Return a pointer to the formatted string
   return str;
 8008a08:	683b      	ldr	r3, [r7, #0]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	2000c328 	.word	0x2000c328
 8008a18:	0801c534 	.word	0x0801c534

08008a1c <ipv4DumpHeader>:
 * @brief Dump IPv4 header for debugging purpose
 * @param[in] ipHeader Pointer to the IPv4 header
 **/

void ipv4DumpHeader(const Ipv4Header *ipHeader)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Time To Live = %" PRIu8 "\r\n", ipHeader->timeToLive);
   TRACE_DEBUG("  Protocol = %" PRIu8 "\r\n", ipHeader->protocol);
   TRACE_DEBUG("  Header Checksum = 0x%04" PRIX16 "\r\n", ntohs(ipHeader->headerChecksum));
   TRACE_DEBUG("  Src Addr = %s\r\n", ipv4AddrToString(ipHeader->srcAddr, NULL));
   TRACE_DEBUG("  Dest Addr = %s\r\n", ipv4AddrToString(ipHeader->destAddr, NULL));
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <ipv4FragmentDatagram>:
 **/

error_t ipv4FragmentDatagram(NetInterface *interface,
   Ipv4PseudoHeader *pseudoHeader, uint16_t id, const NetBuffer *payload,
   size_t payloadOffset, uint_t flags)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b090      	sub	sp, #64	; 0x40
 8008a34:	af04      	add	r7, sp, #16
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	80fb      	strh	r3, [r7, #6]
   //Number of IP datagrams that would require fragmentation in order to be transmitted
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragReqds, 1);

   //Retrieve the length of the payload
   payloadLen = netBufferGetLength(payload) - payloadOffset;
 8008a40:	6838      	ldr	r0, [r7, #0]
 8008a42:	f7f9 fd45 	bl	80024d0 <netBufferGetLength>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	623b      	str	r3, [r7, #32]

   //Allocate a memory buffer to hold IP fragments
   fragment = ipAllocBuffer(0, &fragmentOffset);
 8008a4e:	f107 0314 	add.w	r3, r7, #20
 8008a52:	4619      	mov	r1, r3
 8008a54:	2000      	movs	r0, #0
 8008a56:	f7f8 ff99 	bl	800198c <ipAllocBuffer>
 8008a5a:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(!fragment)
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <ipv4FragmentDatagram+0x36>
      return ERROR_OUT_OF_MEMORY;
 8008a62:	2364      	movs	r3, #100	; 0x64
 8008a64:	e06b      	b.n	8008b3e <ipv4FragmentDatagram+0x10e>

   //Determine the maximum payload size for fragmented packets
   maxFragmentSize = interface->ipv4Context.linkMtu - sizeof(Ipv4Header);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a6c:	3b14      	subs	r3, #20
 8008a6e:	61bb      	str	r3, [r7, #24]
   //The size shall be a multiple of 8-byte blocks
   maxFragmentSize -= (maxFragmentSize % 8);
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	f023 0307 	bic.w	r3, r3, #7
 8008a76:	61bb      	str	r3, [r7, #24]

   //Initialize error code
   error = NO_ERROR;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Split the payload into multiple IP fragments
   for(offset = 0; offset < payloadLen; offset += length)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a80:	e051      	b.n	8008b26 <ipv4FragmentDatagram+0xf6>
   {
      //Flush the contents of the fragment
      error = netBufferSetLength(fragment, fragmentOffset);
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	4619      	mov	r1, r3
 8008a86:	69f8      	ldr	r0, [r7, #28]
 8008a88:	f7f9 fd44 	bl	8002514 <netBufferSetLength>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Sanity check
      if(error)
 8008a90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d14c      	bne.n	8008b30 <ipv4FragmentDatagram+0x100>
         break;

      //Process the last fragment?
      if((payloadLen - offset) <= maxFragmentSize)
 8008a96:	6a3a      	ldr	r2, [r7, #32]
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d31d      	bcc.n	8008ade <ipv4FragmentDatagram+0xae>
      {
         //Size of the current fragment
         length = payloadLen - offset;
 8008aa2:	6a3a      	ldr	r2, [r7, #32]
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 8008aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	441a      	add	r2, r3
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	69f8      	ldr	r0, [r7, #28]
 8008ab6:	f7f9 fe06 	bl	80026c6 <netBufferConcat>

         //Do not set the MF flag for the last fragment
         error = ipv4SendPacket(interface, pseudoHeader, id,
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	08d8      	lsrs	r0, r3, #3
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	88f9      	ldrh	r1, [r7, #6]
 8008ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ac4:	9202      	str	r2, [sp, #8]
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	4603      	mov	r3, r0
 8008ace:	460a      	mov	r2, r1
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f7ff fe62 	bl	800879c <ipv4SendPacket>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008adc:	e01c      	b.n	8008b18 <ipv4FragmentDatagram+0xe8>
            offset / 8, fragment, fragmentOffset, flags);
      }
      else
      {
         //Size of the current fragment (must be a multiple of 8-byte blocks)
         length = maxFragmentSize;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 8008ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	441a      	add	r2, r3
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	69f8      	ldr	r0, [r7, #28]
 8008aee:	f7f9 fdea 	bl	80026c6 <netBufferConcat>

         //Fragmented packets must have the MF flag set
         error = ipv4SendPacket(interface, pseudoHeader, id,
            IPV4_FLAG_MF | (offset / 8), fragment, fragmentOffset, flags);
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	08db      	lsrs	r3, r3, #3
         error = ipv4SendPacket(interface, pseudoHeader, id,
 8008af6:	f443 5000 	orr.w	r0, r3, #8192	; 0x2000
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	88f9      	ldrh	r1, [r7, #6]
 8008afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b00:	9202      	str	r2, [sp, #8]
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	4603      	mov	r3, r0
 8008b0a:	460a      	mov	r2, r1
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f7ff fe44 	bl	800879c <ipv4SendPacket>
 8008b14:	4603      	mov	r3, r0
 8008b16:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      //Failed to send current IP packet?
      if(error)
 8008b18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10a      	bne.n	8008b34 <ipv4FragmentDatagram+0x104>
   for(offset = 0; offset < payloadLen; offset += length)
 8008b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	4413      	add	r3, r2
 8008b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d3a9      	bcc.n	8008a82 <ipv4FragmentDatagram+0x52>
 8008b2e:	e002      	b.n	8008b36 <ipv4FragmentDatagram+0x106>
         break;
 8008b30:	bf00      	nop
 8008b32:	e000      	b.n	8008b36 <ipv4FragmentDatagram+0x106>
         break;
 8008b34:	bf00      	nop
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragOKs, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragOKs, 1);
   }

   //Free previously allocated memory
   netBufferFree(fragment);
 8008b36:	69f8      	ldr	r0, [r7, #28]
 8008b38:	f7f9 fcbb 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 8008b3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3730      	adds	r7, #48	; 0x30
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <ipv4ReassembleDatagram>:
 * @param[in] length Packet length including header and payload
 **/

void ipv4ReassembleDatagram(NetInterface *interface,
   const Ipv4Header *packet, size_t length)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b08c      	sub	sp, #48	; 0x30
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	607a      	str	r2, [r7, #4]
   MIB2_INC_COUNTER32(ipGroup.ipReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmReqds, 1);

   //Get the length of the payload
   length -= packet->headerLength * 4;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	461a      	mov	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	1a9b      	subs	r3, r3, r2
 8008b64:	607b      	str	r3, [r7, #4]
   //Convert the fragment offset from network byte order
   offset = ntohs(packet->fragmentOffset);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	88db      	ldrh	r3, [r3, #6]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7f7 fd17 	bl	80005a0 <swapInt16>
 8008b72:	4603      	mov	r3, r0
 8008b74:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Every fragment except the last must contain a multiple of 8 bytes of data
   if((offset & IPV4_FLAG_MF) && (length % 8))
 8008b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <ipv4ReassembleDatagram+0x46>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f003 0307 	and.w	r3, r3, #7
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f040 816f 	bne.w	8008e6a <ipv4ReassembleDatagram+0x324>
      //Drop the incoming fragment
      return;
   }

   //Calculate the index of the first byte
   dataFirst = (offset & IPV4_OFFSET_MASK) * 8;
 8008b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	00db      	lsls	r3, r3, #3
 8008b96:	84bb      	strh	r3, [r7, #36]	; 0x24
   //Calculate the index immediately following the last byte
   dataLast = dataFirst + (uint16_t) length;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b9e:	4413      	add	r3, r2
 8008ba0:	847b      	strh	r3, [r7, #34]	; 0x22

   //Search for a matching IP datagram being reassembled
   frag = ipv4SearchFragQueue(interface, packet);
 8008ba2:	68b9      	ldr	r1, [r7, #8]
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f9c7 	bl	8008f38 <ipv4SearchFragQueue>
 8008baa:	61f8      	str	r0, [r7, #28]

   //No matching entry in the reassembly queue?
   if(frag == NULL)
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 815d 	beq.w	8008e6e <ipv4ReassembleDatagram+0x328>
      //Drop the incoming fragment
      return;
   }

   //The very first fragment requires special handling
   if(!(offset & IPV4_OFFSET_MASK))
 8008bb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d132      	bne.n	8008c24 <ipv4ReassembleDatagram+0xde>
   {
      //Calculate the length of the IP header including options
      frag->headerLength = packet->headerLength * 4;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	461a      	mov	r2, r3
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	605a      	str	r2, [r3, #4]

      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + frag->dataLen) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bde:	d906      	bls.n	8008bee <ipv4ReassembleDatagram+0xa8>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	3310      	adds	r3, #16
 8008be4:	2100      	movs	r1, #0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7f9 fc94 	bl	8002514 <netBufferSetLength>
         //Exit immediately
         return;
 8008bec:	e140      	b.n	8008e70 <ipv4ReassembleDatagram+0x32a>
      }

      //Make sure the IP header entirely fits in the first chunk
      if(frag->headerLength > frag->buffer.chunk[0].size)
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	8bd2      	ldrh	r2, [r2, #30]
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d906      	bls.n	8008c08 <ipv4ReassembleDatagram+0xc2>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	3310      	adds	r3, #16
 8008bfe:	2100      	movs	r1, #0
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7f9 fc87 	bl	8002514 <netBufferSetLength>
         //Exit immediately
         return;
 8008c06:	e133      	b.n	8008e70 <ipv4ReassembleDatagram+0x32a>
      }

      //Fix the length of the first chunk
      frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	839a      	strh	r2, [r3, #28]
      //Always take the IP header from the first fragment
      netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	f103 0010 	add.w	r0, r3, #16
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	2100      	movs	r1, #0
 8008c20:	f7f9 fee9 	bl	80029f6 <netBufferWrite>
   }

   //It may be necessary to increase the size of the buffer...
   if(dataLast > frag->dataLen)
 8008c24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d927      	bls.n	8008c7e <ipv4ReassembleDatagram+0x138>
   {
      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + dataLast) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c34:	4413      	add	r3, r2
 8008c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c3a:	d906      	bls.n	8008c4a <ipv4ReassembleDatagram+0x104>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3310      	adds	r3, #16
 8008c40:	2100      	movs	r1, #0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f9 fc66 	bl	8002514 <netBufferSetLength>
         //Exit immediately
         return;
 8008c48:	e112      	b.n	8008e70 <ipv4ReassembleDatagram+0x32a>
      }

      //Adjust the size of the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + dataLast + sizeof(Ipv4HoleDesc));
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c56:	4413      	add	r3, r2
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8008c58:	3306      	adds	r3, #6
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	f7f9 fc5a 	bl	8002514 <netBufferSetLength>
 8008c60:	4603      	mov	r3, r0
 8008c62:	837b      	strh	r3, [r7, #26]

      //Any error to report?
      if(error)
 8008c64:	8b7b      	ldrh	r3, [r7, #26]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <ipv4ReassembleDatagram+0x132>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	3310      	adds	r3, #16
 8008c6e:	2100      	movs	r1, #0
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7f9 fc4f 	bl	8002514 <netBufferSetLength>
         //Exit immediately
         return;
 8008c76:	e0fb      	b.n	8008e70 <ipv4ReassembleDatagram+0x32a>
      }

      //Actual length of the payload
      frag->dataLen = dataLast;
 8008c78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	609a      	str	r2, [r3, #8]
   }

   //Select the first hole descriptor from the list
   hole = ipv4FindHole(frag, frag->firstHole);
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	899b      	ldrh	r3, [r3, #12]
 8008c82:	4619      	mov	r1, r3
 8008c84:	69f8      	ldr	r0, [r7, #28]
 8008c86:	f000 fa32 	bl	80090ee <ipv4FindHole>
 8008c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Keep track of the previous hole in the list
   prevHole = NULL;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	62bb      	str	r3, [r7, #40]	; 0x28

   //Iterate through the hole descriptors
   while(hole != NULL)
 8008c90:	e08b      	b.n	8008daa <ipv4ReassembleDatagram+0x264>
   {
      //Save lower and upper boundaries for later use
      uint16_t holeFirst = hole->first;
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	785b      	ldrb	r3, [r3, #1]
 8008c98:	021b      	lsls	r3, r3, #8
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	827b      	strh	r3, [r7, #18]
      uint16_t holeLast = hole->last;
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	789a      	ldrb	r2, [r3, #2]
 8008ca2:	78db      	ldrb	r3, [r3, #3]
 8008ca4:	021b      	lsls	r3, r3, #8
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	823b      	strh	r3, [r7, #16]

      //Check whether the newly arrived fragment interacts with this hole
      //in some way
      if(dataFirst < holeLast && dataLast > holeFirst)
 8008caa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008cac:	8a3b      	ldrh	r3, [r7, #16]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d269      	bcs.n	8008d86 <ipv4ReassembleDatagram+0x240>
 8008cb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008cb4:	8a7b      	ldrh	r3, [r7, #18]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d965      	bls.n	8008d86 <ipv4ReassembleDatagram+0x240>
      {
         //The current descriptor is no longer valid. We will destroy it,
         //and in the next two steps, we will determine whether or not it
         //is necessary to create any new hole descriptors
         if(prevHole != NULL)
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <ipv4ReassembleDatagram+0x186>
            prevHole->next = hole->next;
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc2:	889b      	ldrh	r3, [r3, #4]
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	809a      	strh	r2, [r3, #4]
 8008cca:	e004      	b.n	8008cd6 <ipv4ReassembleDatagram+0x190>
         else
            frag->firstHole = hole->next;
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cce:	889b      	ldrh	r3, [r3, #4]
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	819a      	strh	r2, [r3, #12]

         //Is there still a hole at the beginning of the segment?
         if(dataFirst > holeFirst)
 8008cd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008cd8:	8a7b      	ldrh	r3, [r7, #18]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d924      	bls.n	8008d28 <ipv4ReassembleDatagram+0x1e2>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, holeFirst);
 8008cde:	8a7b      	ldrh	r3, [r7, #18]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	69f8      	ldr	r0, [r7, #28]
 8008ce4:	f000 fa03 	bl	80090ee <ipv4FindHole>
 8008ce8:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = holeFirst;
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	8a7a      	ldrh	r2, [r7, #18]
 8008cee:	801a      	strh	r2, [r3, #0]
            hole->last = dataFirst;
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008cf4:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 8008cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00a      	beq.n	8008d12 <ipv4ReassembleDatagram+0x1cc>
            {
               hole->next = prevHole->next;
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	889b      	ldrh	r3, [r3, #4]
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	809a      	strh	r2, [r3, #4]
 8008d10:	e008      	b.n	8008d24 <ipv4ReassembleDatagram+0x1de>
            }
            else
            {
               hole->next = frag->firstHole;
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	899a      	ldrh	r2, [r3, #12]
 8008d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d18:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 8008d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
         }

         //Is there still a hole at the end of the segment?
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 8008d28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008d2a:	8a3b      	ldrh	r3, [r7, #16]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d22d      	bcs.n	8008d8c <ipv4ReassembleDatagram+0x246>
 8008d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d028      	beq.n	8008d8c <ipv4ReassembleDatagram+0x246>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, dataLast);
 8008d3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	69f8      	ldr	r0, [r7, #28]
 8008d40:	f000 f9d5 	bl	80090ee <ipv4FindHole>
 8008d44:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = dataLast;
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008d4a:	801a      	strh	r2, [r3, #0]
            hole->last = holeLast;
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	8a3a      	ldrh	r2, [r7, #16]
 8008d50:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00a      	beq.n	8008d6e <ipv4ReassembleDatagram+0x228>
            {
               hole->next = prevHole->next;
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	889b      	ldrh	r3, [r3, #4]
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 8008d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	809a      	strh	r2, [r3, #4]
 8008d6c:	e008      	b.n	8008d80 <ipv4ReassembleDatagram+0x23a>
            }
            else
            {
               hole->next = frag->firstHole;
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	899a      	ldrh	r2, [r3, #12]
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 8008d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d82:	62bb      	str	r3, [r7, #40]	; 0x28
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 8008d84:	e002      	b.n	8008d8c <ipv4ReassembleDatagram+0x246>
         }
      }
      else
      {
         //The newly arrived fragment does not interact with the current hole
         prevHole = hole;
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d8a:	e000      	b.n	8008d8e <ipv4ReassembleDatagram+0x248>
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 8008d8c:	bf00      	nop
      }

      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <ipv4ReassembleDatagram+0x256>
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	889b      	ldrh	r3, [r3, #4]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	e001      	b.n	8008da0 <ipv4ReassembleDatagram+0x25a>
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	899b      	ldrh	r3, [r3, #12]
 8008da0:	4619      	mov	r1, r3
 8008da2:	69f8      	ldr	r0, [r7, #28]
 8008da4:	f000 f9a3 	bl	80090ee <ipv4FindHole>
 8008da8:	62f8      	str	r0, [r7, #44]	; 0x2c
   while(hole != NULL)
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f47f af70 	bne.w	8008c92 <ipv4ReassembleDatagram+0x14c>
   }

   //Copy data from the fragment to the reassembly buffer
   netBufferWrite((NetBuffer *) &frag->buffer,
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	f103 0010 	add.w	r0, r3, #16
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	685a      	ldr	r2, [r3, #4]
   netBufferWrite((NetBuffer *) &frag->buffer,
 8008dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dbe:	18d1      	adds	r1, r2, r3
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	461a      	mov	r2, r3
   netBufferWrite((NetBuffer *) &frag->buffer,
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	441a      	add	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f7f9 fe0f 	bl	80029f6 <netBufferWrite>

   //Dump hole descriptor list
   ipv4DumpHoleList(frag);
 8008dd8:	69f8      	ldr	r0, [r7, #28]
 8008dda:	f000 f99d 	bl	8009118 <ipv4DumpHoleList>

   //If the hole descriptor list is empty, the reassembly process is now complete
   if(!ipv4FindHole(frag, frag->firstHole))
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	899b      	ldrh	r3, [r3, #12]
 8008de2:	4619      	mov	r1, r3
 8008de4:	69f8      	ldr	r0, [r7, #28]
 8008de6:	f000 f982 	bl	80090ee <ipv4FindHole>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d13f      	bne.n	8008e70 <ipv4ReassembleDatagram+0x32a>
   {
      //Discard the extra hole descriptor that follows the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + frag->dataLen);
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	689b      	ldr	r3, [r3, #8]
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8008dfe:	4413      	add	r3, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	f7f9 fb87 	bl	8002514 <netBufferSetLength>
 8008e06:	4603      	mov	r3, r0
 8008e08:	837b      	strh	r3, [r7, #26]

      //Check status code
      if(error)
 8008e0a:	8b7b      	ldrh	r3, [r7, #26]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d125      	bne.n	8008e5c <ipv4ReassembleDatagram+0x316>
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);
      }
      else
      {
         //Point to the IP header
         Ipv4Header *datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	3310      	adds	r3, #16
 8008e14:	2100      	movs	r1, #0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7f9 fc22 	bl	8002660 <netBufferAt>
 8008e1c:	6178      	str	r0, [r7, #20]

         //Fix IP header
         datagram->totalLength = htons(frag->headerLength + frag->dataLen);
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	4413      	add	r3, r2
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f7 fbb6 	bl	80005a0 <swapInt16>
 8008e34:	4603      	mov	r3, r0
 8008e36:	461a      	mov	r2, r3
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	805a      	strh	r2, [r3, #2]
         datagram->fragmentOffset = 0;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	719a      	strb	r2, [r3, #6]
 8008e42:	2200      	movs	r2, #0
 8008e44:	71da      	strb	r2, [r3, #7]
         datagram->headerChecksum = 0;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	729a      	strb	r2, [r3, #10]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	72da      	strb	r2, [r3, #11]
         MIB2_INC_COUNTER32(ipGroup.ipReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmOKs, 1);

         //Pass the original IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &frag->buffer);
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	3310      	adds	r3, #16
 8008e54:	4619      	mov	r1, r3
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f7ff fbd2 	bl	8008600 <ipv4ProcessDatagram>
      }

      //Release previously allocated memory
      netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	3310      	adds	r3, #16
 8008e60:	2100      	movs	r1, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7f9 fb56 	bl	8002514 <netBufferSetLength>
 8008e68:	e002      	b.n	8008e70 <ipv4ReassembleDatagram+0x32a>
      return;
 8008e6a:	bf00      	nop
 8008e6c:	e000      	b.n	8008e70 <ipv4ReassembleDatagram+0x32a>
      return;
 8008e6e:	bf00      	nop
   }
}
 8008e70:	3730      	adds	r7, #48	; 0x30
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <ipv4FragTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void ipv4FragTick(NetInterface *interface)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b08a      	sub	sp, #40	; 0x28
 8008e7a:	af02      	add	r7, sp, #8
 8008e7c:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv4HoleDesc *hole;

   //Get current time
   time = osGetSystemTime();
 8008e7e:	f7f7 fca7 	bl	80007d0 <osGetSystemTime>
 8008e82:	61b8      	str	r0, [r7, #24]

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	e04f      	b.n	8008f2a <ipv4FragTick+0xb4>
   {
      //Point to the current entry in the reassembly queue
      Ipv4FragDesc *frag = &interface->ipv4Context.fragQueue[i];
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	617b      	str	r3, [r7, #20]

      //Make sure the entry is currently in use
      if(frag->buffer.chunkCount > 0)
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d03d      	beq.n	8008f24 <ipv4FragTick+0xae>
      {
         //If the timer runs out, the partially-reassembled datagram must be
         //discarded and ICMP Time Exceeded message sent to the source host
         if((time - frag->timestamp) >= IPV4_FRAG_TIME_TO_LIVE)
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	f643 2297 	movw	r2, #14999	; 0x3a97
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d935      	bls.n	8008f24 <ipv4FragTick+0xae>
         {
            //Debug message
            TRACE_INFO("IPv4 fragment reassembly timeout...\r\n");
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(frag->buffer.chunk[0].address);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff fdad 	bl	8008a1c <ipv4DumpHeader>
            MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

            //Point to the first hole descriptor
            hole = ipv4FindHole(frag, frag->firstHole);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	899b      	ldrh	r3, [r3, #12]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6978      	ldr	r0, [r7, #20]
 8008eca:	f000 f910 	bl	80090ee <ipv4FindHole>
 8008ece:	6138      	str	r0, [r7, #16]

            //Make sure the fragment zero has been received
            //before sending an ICMP message
            if(hole != NULL && hole->first > 0)
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d020      	beq.n	8008f18 <ipv4FragTick+0xa2>
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01b      	beq.n	8008f18 <ipv4FragTick+0xa2>
            {
               //Fix the size of the reconstructed datagram
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f103 0010 	add.w	r0, r3, #16
                  frag->headerLength + hole->first);
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	8812      	ldrh	r2, [r2, #0]
 8008eee:	b292      	uxth	r2, r2
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f7f9 fb0e 	bl	8002514 <netBufferSetLength>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	81fb      	strh	r3, [r7, #14]

               //Check status code
               if(!error)
 8008efc:	89fb      	ldrh	r3, [r7, #14]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10a      	bne.n	8008f18 <ipv4FragTick+0xa2>
               {
                  //Send an ICMP Time Exceeded message
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
                     ICMP_CODE_REASSEMBLY_TIME_EXCEEDED, 0, (NetBuffer *) &frag->buffer, 0);
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	3310      	adds	r3, #16
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
 8008f06:	2200      	movs	r2, #0
 8008f08:	9201      	str	r2, [sp, #4]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2201      	movs	r2, #1
 8008f10:	210b      	movs	r1, #11
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff f871 	bl	8007ffa <icmpSendErrorMessage>
               }
            }

            //Drop the partially reconstructed datagram
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	3310      	adds	r3, #16
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f9 faf8 	bl	8002514 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	3301      	adds	r3, #1
 8008f28:	61fb      	str	r3, [r7, #28]
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d9ac      	bls.n	8008e8a <ipv4FragTick+0x14>
         }
      }
   }
}
 8008f30:	bf00      	nop
 8008f32:	3720      	adds	r7, #32
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <ipv4SearchFragQueue>:
 * @return Matching fragment descriptor
 **/

Ipv4FragDesc *ipv4SearchFragQueue(NetInterface *interface,
   const Ipv4Header *packet)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
   Ipv4Header *datagram;
   Ipv4FragDesc *frag;
   Ipv4HoleDesc *hole;

   //Search for a matching IP datagram being reassembled
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008f42:	2300      	movs	r3, #0
 8008f44:	61fb      	str	r3, [r7, #28]
 8008f46:	e03b      	b.n	8008fc0 <ipv4SearchFragQueue+0x88>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	4413      	add	r3, r2
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	61bb      	str	r3, [r7, #24]

      //Check whether the current entry is used?
      if(frag->buffer.chunkCount > 0)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d029      	beq.n	8008fba <ipv4SearchFragQueue+0x82>
      {
         //Point to the corresponding datagram
         datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	3310      	adds	r3, #16
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7f9 fb77 	bl	8002660 <netBufferAt>
 8008f72:	60f8      	str	r0, [r7, #12]

         //Check source and destination addresses
         if(datagram->srcAddr != packet->srcAddr)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d115      	bne.n	8008fac <ipv4SearchFragQueue+0x74>
            continue;
         if(datagram->destAddr != packet->destAddr)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	691a      	ldr	r2, [r3, #16]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d111      	bne.n	8008fb0 <ipv4SearchFragQueue+0x78>
            continue;
         //Compare identification and protocol fields
         if(datagram->identification != packet->identification)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	889b      	ldrh	r3, [r3, #4]
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	889b      	ldrh	r3, [r3, #4]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d10b      	bne.n	8008fb4 <ipv4SearchFragQueue+0x7c>
            continue;
         if(datagram->protocol != packet->protocol)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	7a5a      	ldrb	r2, [r3, #9]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	7a5b      	ldrb	r3, [r3, #9]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d107      	bne.n	8008fb8 <ipv4SearchFragQueue+0x80>
            continue;

         //A matching entry has been found in the reassembly queue
         return frag;
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	e07d      	b.n	80090a8 <ipv4SearchFragQueue+0x170>
            continue;
 8008fac:	bf00      	nop
 8008fae:	e004      	b.n	8008fba <ipv4SearchFragQueue+0x82>
            continue;
 8008fb0:	bf00      	nop
 8008fb2:	e002      	b.n	8008fba <ipv4SearchFragQueue+0x82>
            continue;
 8008fb4:	bf00      	nop
 8008fb6:	e000      	b.n	8008fba <ipv4SearchFragQueue+0x82>
            continue;
 8008fb8:	bf00      	nop
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	61fb      	str	r3, [r7, #28]
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d9c0      	bls.n	8008f48 <ipv4SearchFragQueue+0x10>
      }
   }

   //If the current packet does not match an existing entry
   //in the reassembly queue, then create a new entry
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	e069      	b.n	80090a0 <ipv4SearchFragQueue+0x168>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 8008fcc:	69fa      	ldr	r2, [r7, #28]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	3308      	adds	r3, #8
 8008fe0:	61bb      	str	r3, [r7, #24]

      //The current entry is free?
      if(!frag->buffer.chunkCount)
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d157      	bne.n	800909a <ipv4SearchFragQueue+0x162>
      {
         //Number of chunks that comprise the reassembly buffer
         frag->buffer.maxChunkCount = arraysize(frag->buffer.chunk);
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2207      	movs	r2, #7
 8008fee:	615a      	str	r2, [r3, #20]

         //Allocate sufficient memory to hold the IPv4 header and
         //the first hole descriptor
         error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	3310      	adds	r3, #16
 8008ff4:	f240 6106 	movw	r1, #1542	; 0x606
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7f9 fa8b 	bl	8002514 <netBufferSetLength>
 8008ffe:	4603      	mov	r3, r0
 8009000:	82fb      	strh	r3, [r7, #22]
            NET_MEM_POOL_BUFFER_SIZE + sizeof(Ipv4HoleDesc));

         //Failed to allocate memory?
         if(error)
 8009002:	8afb      	ldrh	r3, [r7, #22]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <ipv4SearchFragQueue+0xe0>
         {
            //Clean up side effects
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	3310      	adds	r3, #16
 800900c:	2100      	movs	r1, #0
 800900e:	4618      	mov	r0, r3
 8009010:	f7f9 fa80 	bl	8002514 <netBufferSetLength>
            //Exit immediately
            return NULL;
 8009014:	2300      	movs	r3, #0
 8009016:	e047      	b.n	80090a8 <ipv4SearchFragQueue+0x170>
         }

         //Initial length of the reconstructed datagram
         frag->headerLength = packet->headerLength * 4;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009020:	b2db      	uxtb	r3, r3
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	461a      	mov	r2, r3
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	605a      	str	r2, [r3, #4]
         frag->dataLen = 0;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2200      	movs	r2, #0
 800902e:	609a      	str	r2, [r3, #8]

         //Fix the length of the first chunk
         frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	b29a      	uxth	r2, r3
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	839a      	strh	r2, [r3, #28]
         //Copy IPv4 header from the incoming fragment
         netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	f103 0010 	add.w	r0, r3, #16
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	2100      	movs	r1, #0
 8009048:	f7f9 fcd5 	bl	80029f6 <netBufferWrite>

         //Save current time
         frag->timestamp = osGetSystemTime();
 800904c:	f7f7 fbc0 	bl	80007d0 <osGetSystemTime>
 8009050:	4602      	mov	r2, r0
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	601a      	str	r2, [r3, #0]
         //Create a new entry in the hole descriptor list
         frag->firstHole = 0;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2200      	movs	r2, #0
 800905a:	819a      	strh	r2, [r3, #12]

         //Point to first hole descriptor
         hole = ipv4FindHole(frag, frag->firstHole);
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	899b      	ldrh	r3, [r3, #12]
 8009060:	4619      	mov	r1, r3
 8009062:	69b8      	ldr	r0, [r7, #24]
 8009064:	f000 f843 	bl	80090ee <ipv4FindHole>
 8009068:	6138      	str	r0, [r7, #16]
         //The entry describes the datagram as being completely missing
         hole->first = 0;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2200      	movs	r2, #0
 800906e:	701a      	strb	r2, [r3, #0]
 8009070:	2200      	movs	r2, #0
 8009072:	705a      	strb	r2, [r3, #1]
         hole->last = IPV4_INFINITY;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800907a:	709a      	strb	r2, [r3, #2]
 800907c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009080:	70da      	strb	r2, [r3, #3]
         hole->next = IPV4_INFINITY;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009088:	711a      	strb	r2, [r3, #4]
 800908a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800908e:	715a      	strb	r2, [r3, #5]

         //Dump hole descriptor list
         ipv4DumpHoleList(frag);
 8009090:	69b8      	ldr	r0, [r7, #24]
 8009092:	f000 f841 	bl	8009118 <ipv4DumpHoleList>

         //Return the matching fragment descriptor
         return frag;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	e006      	b.n	80090a8 <ipv4SearchFragQueue+0x170>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	3301      	adds	r3, #1
 800909e:	61fb      	str	r3, [r7, #28]
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d992      	bls.n	8008fcc <ipv4SearchFragQueue+0x94>
      }
   }

   //The reassembly queue is full
   return NULL;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <ipv4FlushFragQueue>:
 * @brief Flush IPv4 reassembly queue
 * @param[in] interface Underlying network interface
 **/

void ipv4FlushFragQueue(NetInterface *interface)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	e010      	b.n	80090e0 <ipv4FlushFragQueue+0x30>
   {
      //Drop any partially reconstructed datagram
      netBufferSetLength((NetBuffer *) &interface->ipv4Context.fragQueue[i].buffer, 0);
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4613      	mov	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	4413      	add	r3, r2
 80090d0:	3308      	adds	r3, #8
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7f9 fa1d 	bl	8002514 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3301      	adds	r3, #1
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d9eb      	bls.n	80090be <ipv4FlushFragQueue+0xe>
   }
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <ipv4FindHole>:
 * @return A pointer to the hole descriptor is returned if the
 *   specified offset is valid. Otherwise NULL is returned
 **/

Ipv4HoleDesc *ipv4FindHole(Ipv4FragDesc *frag, uint16_t offset)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	807b      	strh	r3, [r7, #2]
   //Return a pointer to the hole descriptor
   return netBufferAt((NetBuffer *) &frag->buffer, frag->headerLength + offset);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f103 0010 	add.w	r0, r3, #16
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	887b      	ldrh	r3, [r7, #2]
 8009106:	4413      	add	r3, r2
 8009108:	4619      	mov	r1, r3
 800910a:	f7f9 faa9 	bl	8002660 <netBufferAt>
 800910e:	4603      	mov	r3, r0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <ipv4DumpHoleList>:
 * @brief Dump hole descriptor list
 * @param[in] frag IPv4 fragment descriptor
 **/

void ipv4DumpHoleList(Ipv4FragDesc *frag)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
      TRACE_DEBUG("  %" PRIu16 " - %" PRIu16 "\r\n", hole->first, hole->last);
      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, hole->next);
   }
#endif
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <ipv4CheckSourceAddr>:
 * @param[in] ipAddr Source IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckSourceAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
   //Broadcast and multicast addresses must not be used as source address
   //(refer to RFC 1122, section 3.2.1.3)
   if(ipv4IsBroadcastAddr(interface, ipAddr) || ipv4IsMulticastAddr(ipAddr))
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f973 	bl	8009424 <ipv4IsBroadcastAddr>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d104      	bne.n	800914e <ipv4CheckSourceAddr+0x22>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800914a:	2be0      	cmp	r3, #224	; 0xe0
 800914c:	d101      	bne.n	8009152 <ipv4CheckSourceAddr+0x26>
   {
      //Debug message
      TRACE_WARNING("Wrong source IPv4 address!\r\n");
      //The source address not is acceptable
      return ERROR_INVALID_ADDRESS;
 800914e:	23e4      	movs	r3, #228	; 0xe4
 8009150:	e000      	b.n	8009154 <ipv4CheckSourceAddr+0x28>
   }

   //The source address is acceptable
   return NO_ERROR;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <ipv4CheckDestAddr>:
 * @param[in] ipAddr Destination IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckDestAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;
   Ipv4AddrEntry *entry;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 8009166:	23e4      	movs	r3, #228	; 0xe4
 8009168:	82fb      	strh	r3, [r7, #22]

   //Broadcast address?
   if(ipv4IsBroadcastAddr(interface, ipAddr))
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f959 	bl	8009424 <ipv4IsBroadcastAddr>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <ipv4CheckDestAddr+0x22>
   {
      //Always accept broadcast address
      error = NO_ERROR;
 8009178:	2300      	movs	r3, #0
 800917a:	82fb      	strh	r3, [r7, #22]
 800917c:	e043      	b.n	8009206 <ipv4CheckDestAddr+0xaa>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009184:	2be0      	cmp	r3, #224	; 0xe0
 8009186:	d11f      	bne.n	80091c8 <ipv4CheckDestAddr+0x6c>
   {
      //Go through the multicast filter table
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8009188:	2300      	movs	r3, #0
 800918a:	613b      	str	r3, [r7, #16]
 800918c:	e018      	b.n	80091c0 <ipv4CheckDestAddr+0x64>
      {
         Ipv4FilterEntry *entry;

         //Point to the current entry
         entry = &interface->ipv4Context.multicastFilter[i];
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	33b0      	adds	r3, #176	; 0xb0
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	4413      	add	r3, r2
 800919e:	3308      	adds	r3, #8
 80091a0:	60bb      	str	r3, [r7, #8]

         //Valid entry?
         if(entry->refCount > 0)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d007      	beq.n	80091ba <ipv4CheckDestAddr+0x5e>
         {
            //Check whether the destination IPv4 address matches
            //a relevant multicast address
            if(entry->addr == ipAddr)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d102      	bne.n	80091ba <ipv4CheckDestAddr+0x5e>
            {
               //The multicast address is acceptable
               error = NO_ERROR;
 80091b4:	2300      	movs	r3, #0
 80091b6:	82fb      	strh	r3, [r7, #22]
               //Stop immediately
               break;
 80091b8:	e025      	b.n	8009206 <ipv4CheckDestAddr+0xaa>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3301      	adds	r3, #1
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d9e3      	bls.n	800918e <ipv4CheckDestAddr+0x32>
 80091c6:	e01e      	b.n	8009206 <ipv4CheckDestAddr+0xaa>
   }
   //Unicast address?
   else
   {
      //Loop through the list of IPv4 addresses assigned to the interface
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80091c8:	2300      	movs	r3, #0
 80091ca:	613b      	str	r3, [r7, #16]
 80091cc:	e018      	b.n	8009200 <ipv4CheckDestAddr+0xa4>
      {
         //Point to the current entry
         entry = &interface->ipv4Context.addrList[i];
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4613      	mov	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	3398      	adds	r3, #152	; 0x98
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	4413      	add	r3, r2
 80091de:	3304      	adds	r3, #4
 80091e0:	60fb      	str	r3, [r7, #12]

         //Valid entry?
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	791b      	ldrb	r3, [r3, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d007      	beq.n	80091fa <ipv4CheckDestAddr+0x9e>
         {
            //Check whether the destination address matches a valid unicast
            //address assigned to the interface
            if(entry->addr == ipAddr)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d102      	bne.n	80091fa <ipv4CheckDestAddr+0x9e>
            {
               //The destination address is acceptable
               error = NO_ERROR;
 80091f4:	2300      	movs	r3, #0
 80091f6:	82fb      	strh	r3, [r7, #22]
               //We are done
               break;
 80091f8:	e005      	b.n	8009206 <ipv4CheckDestAddr+0xaa>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	3301      	adds	r3, #1
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0e3      	beq.n	80091ce <ipv4CheckDestAddr+0x72>
         }
      }
   }

   //Return status code
   return error;
 8009206:	8afb      	ldrh	r3, [r7, #22]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <ipv4SelectSourceAddr>:
 * @return Error code
 **/

error_t ipv4SelectSourceAddr(NetInterface **interface,
   Ipv4Addr destAddr, Ipv4Addr *srcAddr)
{
 8009210:	b590      	push	{r4, r7, lr}
 8009212:	b08d      	sub	sp, #52	; 0x34
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
   NetInterface *bestInterface;
   Ipv4AddrEntry *currentAddr;
   Ipv4AddrEntry *bestAddr;

   //Initialize variables
   bestInterface = NULL;
 800921c:	2300      	movs	r3, #0
 800921e:	623b      	str	r3, [r7, #32]
   bestAddr = NULL;
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8009224:	2300      	movs	r3, #0
 8009226:	62bb      	str	r3, [r7, #40]	; 0x28
 8009228:	e0e0      	b.n	80093ec <ipv4SelectSourceAddr+0x1dc>
   {
      //Point to the current interface
      currentInterface = &netInterface[i];
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8009230:	fb02 f303 	mul.w	r3, r2, r3
 8009234:	4a7a      	ldr	r2, [pc, #488]	; (8009420 <ipv4SelectSourceAddr+0x210>)
 8009236:	4413      	add	r3, r2
 8009238:	61bb      	str	r3, [r7, #24]

      //A network interface may be provided as a hint
      if(*interface != currentInterface && *interface != NULL)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	429a      	cmp	r2, r3
 8009242:	d004      	beq.n	800924e <ipv4SelectSourceAddr+0x3e>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	f040 80cb 	bne.w	80093e4 <ipv4SelectSourceAddr+0x1d4>
         //Select the next interface in the list
         continue;
      }

      //A sort of the candidate source addresses is being performed
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 800924e:	2300      	movs	r3, #0
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
 8009252:	e0c2      	b.n	80093da <ipv4SelectSourceAddr+0x1ca>
      {
         //Point to the current entry
         currentAddr = &currentInterface->ipv4Context.addrList[j];
 8009254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	3398      	adds	r3, #152	; 0x98
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	4413      	add	r3, r2
 8009264:	3304      	adds	r3, #4
 8009266:	617b      	str	r3, [r7, #20]

         //Check the state of the address
         if(currentAddr->state == IPV4_ADDR_STATE_VALID)
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	791b      	ldrb	r3, [r3, #4]
 800926c:	2b02      	cmp	r3, #2
 800926e:	f040 80b1 	bne.w	80093d4 <ipv4SelectSourceAddr+0x1c4>
         {
            //Select the first address as default
            if(bestAddr == NULL)
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d104      	bne.n	8009282 <ipv4SelectSourceAddr+0x72>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8009280:	e0a8      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
            }

            //Prefer same address
            if(bestAddr->addr == destAddr)
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	429a      	cmp	r2, r3
 800928a:	f000 8098 	beq.w	80093be <ipv4SelectSourceAddr+0x1ae>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->addr == destAddr)
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	429a      	cmp	r2, r3
 8009296:	d104      	bne.n	80092a2 <ipv4SelectSourceAddr+0x92>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 80092a0:	e098      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
            }

            //Check whether the destination address matches the default gateway
            if(bestAddr->defaultGateway == destAddr)
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	f000 808a 	beq.w	80093c2 <ipv4SelectSourceAddr+0x1b2>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway == destAddr)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d104      	bne.n	80092c2 <ipv4SelectSourceAddr+0xb2>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 80092c0:	e088      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
            }

            //Prefer appropriate scope
            if(ipv4GetAddrScope(currentAddr->addr) < ipv4GetAddrScope(bestAddr->addr))
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 f962 	bl	8009590 <ipv4GetAddrScope>
 80092cc:	4604      	mov	r4, r0
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 f95c 	bl	8009590 <ipv4GetAddrScope>
 80092d8:	4603      	mov	r3, r0
 80092da:	429c      	cmp	r4, r3
 80092dc:	d210      	bcs.n	8009300 <ipv4SelectSourceAddr+0xf0>
            {
               if(ipv4GetAddrScope(currentAddr->addr) >= ipv4GetAddrScope(destAddr))
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f954 	bl	8009590 <ipv4GetAddrScope>
 80092e8:	4604      	mov	r4, r0
 80092ea:	68b8      	ldr	r0, [r7, #8]
 80092ec:	f000 f950 	bl	8009590 <ipv4GetAddrScope>
 80092f0:	4603      	mov	r3, r0
 80092f2:	429c      	cmp	r4, r3
 80092f4:	d367      	bcc.n	80093c6 <ipv4SelectSourceAddr+0x1b6>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 80092fe:	e062      	b.n	80093c6 <ipv4SelectSourceAddr+0x1b6>
            }
            else if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(currentAddr->addr))
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f943 	bl	8009590 <ipv4GetAddrScope>
 800930a:	4604      	mov	r4, r0
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4618      	mov	r0, r3
 8009312:	f000 f93d 	bl	8009590 <ipv4GetAddrScope>
 8009316:	4603      	mov	r3, r0
 8009318:	429c      	cmp	r4, r3
 800931a:	d210      	bcs.n	800933e <ipv4SelectSourceAddr+0x12e>
            {
               if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(destAddr))
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4618      	mov	r0, r3
 8009322:	f000 f935 	bl	8009590 <ipv4GetAddrScope>
 8009326:	4604      	mov	r4, r0
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f000 f931 	bl	8009590 <ipv4GetAddrScope>
 800932e:	4603      	mov	r3, r0
 8009330:	429c      	cmp	r4, r3
 8009332:	d24a      	bcs.n	80093ca <ipv4SelectSourceAddr+0x1ba>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 800933c:	e045      	b.n	80093ca <ipv4SelectSourceAddr+0x1ba>
            }

            //If the destination address lies on one of the subnets to which
            //the host is directly connected, the corresponding source address
            //may be chosen (refer to RFC 1122, section 3.3.4.3)
            if(ipv4IsOnSubnet(bestAddr, destAddr))
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	405a      	eors	r2, r3
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d11b      	bne.n	8009388 <ipv4SelectSourceAddr+0x178>
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	405a      	eors	r2, r3
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	4013      	ands	r3, r2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d135      	bne.n	80093ce <ipv4SelectSourceAddr+0x1be>
               {
                  //Use longest subnet mask
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	4618      	mov	r0, r3
 8009368:	f000 f946 	bl	80095f8 <ipv4GetPrefixLength>
 800936c:	4604      	mov	r4, r0
                     ipv4GetPrefixLength(bestAddr->subnetMask))
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	4618      	mov	r0, r3
 8009374:	f000 f940 	bl	80095f8 <ipv4GetPrefixLength>
 8009378:	4603      	mov	r3, r0
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 800937a:	429c      	cmp	r4, r3
 800937c:	d927      	bls.n	80093ce <ipv4SelectSourceAddr+0x1be>
                  {
                     //Give the current source address the higher precedence
                     bestInterface = currentInterface;
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	623b      	str	r3, [r7, #32]
                     bestAddr = currentAddr;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	61fb      	str	r3, [r7, #28]
                  }
               }

               //Select the next address in the list
               continue;
 8009386:	e022      	b.n	80093ce <ipv4SelectSourceAddr+0x1be>
            }
            else
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	405a      	eors	r2, r3
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	4013      	ands	r3, r2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d104      	bne.n	80093a4 <ipv4SelectSourceAddr+0x194>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	61fb      	str	r3, [r7, #28]

                  //Select the next address in the list
                  continue;
 80093a2:	e017      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
            }

            //The default gateways may be consulted. If these gateways are
            //assigned to different interfaces, the interface corresponding
            //to the gateway with the highest preference may be chosen
            if(bestAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d112      	bne.n	80093d2 <ipv4SelectSourceAddr+0x1c2>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00f      	beq.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 80093bc:	e00a      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
               continue;
 80093be:	bf00      	nop
 80093c0:	e008      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
               continue;
 80093c2:	bf00      	nop
 80093c4:	e006      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
               continue;
 80093c6:	bf00      	nop
 80093c8:	e004      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
               continue;
 80093ca:	bf00      	nop
 80093cc:	e002      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
               continue;
 80093ce:	bf00      	nop
 80093d0:	e000      	b.n	80093d4 <ipv4SelectSourceAddr+0x1c4>
               continue;
 80093d2:	bf00      	nop
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	3301      	adds	r3, #1
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f43f af39 	beq.w	8009254 <ipv4SelectSourceAddr+0x44>
 80093e2:	e000      	b.n	80093e6 <ipv4SelectSourceAddr+0x1d6>
         continue;
 80093e4:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	3301      	adds	r3, #1
 80093ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f43f af1b 	beq.w	800922a <ipv4SelectSourceAddr+0x1a>
         }
      }
   }

   //Valid source address?
   if(bestAddr != NULL)
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d009      	beq.n	800940e <ipv4SelectSourceAddr+0x1fe>
   {
      //Return the out-going interface and the source address to be used
      *interface = bestInterface;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6a3a      	ldr	r2, [r7, #32]
 80093fe:	601a      	str	r2, [r3, #0]
      *srcAddr = bestAddr->addr;
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	601a      	str	r2, [r3, #0]

      //Successful source address selection
      error = NO_ERROR;
 8009408:	2300      	movs	r3, #0
 800940a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800940c:	e002      	b.n	8009414 <ipv4SelectSourceAddr+0x204>
   }
   else
   {
      //Report an error
      error = ERROR_NO_ADDRESS;
 800940e:	f240 13f7 	movw	r3, #503	; 0x1f7
 8009412:	85fb      	strh	r3, [r7, #46]	; 0x2e
   }

   //Return status code
   return error;
 8009414:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8009416:	4618      	mov	r0, r3
 8009418:	3734      	adds	r7, #52	; 0x34
 800941a:	46bd      	mov	sp, r7
 800941c:	bd90      	pop	{r4, r7, pc}
 800941e:	bf00      	nop
 8009420:	2000e464 	.word	0x2000e464

08009424 <ipv4IsBroadcastAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a broadcast address, else FALSE
 **/

bool_t ipv4IsBroadcastAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Check whether the specified IPv4 address is the broadcast address
   if(ipAddr == IPV4_BROADCAST_ADDR)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009434:	d101      	bne.n	800943a <ipv4IsBroadcastAddr+0x16>
      return TRUE;
 8009436:	2301      	movs	r3, #1
 8009438:	e02e      	b.n	8009498 <ipv4IsBroadcastAddr+0x74>

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	e027      	b.n	8009490 <ipv4IsBroadcastAddr+0x6c>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	3398      	adds	r3, #152	; 0x98
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	4413      	add	r3, r2
 8009450:	3304      	adds	r3, #4
 8009452:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	791b      	ldrb	r3, [r3, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d016      	beq.n	800948a <ipv4IsBroadcastAddr+0x66>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	405a      	eors	r2, r3
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	4013      	ands	r3, r2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10d      	bne.n	800948a <ipv4IsBroadcastAddr+0x66>
         {
            //Make sure the subnet mask is not 255.255.255.255
            if(entry->subnetMask != IPV4_BROADCAST_ADDR)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009476:	d008      	beq.n	800948a <ipv4IsBroadcastAddr+0x66>
            {
               //Directed broadcast address?
               if((ipAddr | entry->subnetMask) == IPV4_BROADCAST_ADDR)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	68da      	ldr	r2, [r3, #12]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	4313      	orrs	r3, r2
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009484:	d101      	bne.n	800948a <ipv4IsBroadcastAddr+0x66>
               {
                  return TRUE;
 8009486:	2301      	movs	r3, #1
 8009488:	e006      	b.n	8009498 <ipv4IsBroadcastAddr+0x74>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3301      	adds	r3, #1
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0d4      	beq.n	8009440 <ipv4IsBroadcastAddr+0x1c>
         }
      }
   }

   //The specified IPv4 address is not a broadcast address
   return FALSE;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <ipv4IsTentativeAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a tentative address, else FALSE
 **/

bool_t ipv4IsTentativeAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80094ae:	2300      	movs	r3, #0
 80094b0:	60fb      	str	r3, [r7, #12]
 80094b2:	e017      	b.n	80094e4 <ipv4IsTentativeAddr+0x40>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	3398      	adds	r3, #152	; 0x98
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	4413      	add	r3, r2
 80094c4:	3304      	adds	r3, #4
 80094c6:	60bb      	str	r3, [r7, #8]

      //Tentative address?
      if(entry->state == IPV4_ADDR_STATE_TENTATIVE)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	791b      	ldrb	r3, [r3, #4]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d106      	bne.n	80094de <ipv4IsTentativeAddr+0x3a>
      {
         //Check whether the specified address matches a valid unicast
         //address assigned to the interface
         if(entry->addr == ipAddr)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d101      	bne.n	80094de <ipv4IsTentativeAddr+0x3a>
         {
            //The specified IPv4 address is a tentative address
            return TRUE;
 80094da:	2301      	movs	r3, #1
 80094dc:	e006      	b.n	80094ec <ipv4IsTentativeAddr+0x48>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3301      	adds	r3, #1
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0e4      	beq.n	80094b4 <ipv4IsTentativeAddr+0x10>
         }
      }
   }

   //The specified IPv4 address is not a tentative address
   return FALSE;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <ipv4IsLocalHostAddr>:
 * @return TRUE if the IPv4 address matches any address assigned to the host,
 *   else FALSE
 **/

bool_t ipv4IsLocalHostAddr(Ipv4Addr ipAddr)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b089      	sub	sp, #36	; 0x24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
   bool_t flag;
   NetInterface *interface;
   Ipv4AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 8009500:	2300      	movs	r3, #0
 8009502:	617b      	str	r3, [r7, #20]

   //Loopback address?
   if(ipv4IsLoopbackAddr(ipAddr))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b7f      	cmp	r3, #127	; 0x7f
 800950a:	d102      	bne.n	8009512 <ipv4IsLocalHostAddr+0x1a>
   {
      //The 127.0.0.0/8 block is assigned for use as the host loopback address.
      //A datagram sent by a higher-level protocol to an address anywhere within
      //this block loops back inside the host (refer to RFC 5735, section 3)
      flag = TRUE;
 800950c:	2301      	movs	r3, #1
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	e034      	b.n	800957c <ipv4IsLocalHostAddr+0x84>
   }
   else
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 8009512:	2300      	movs	r3, #0
 8009514:	61fb      	str	r3, [r7, #28]
 8009516:	e02b      	b.n	8009570 <ipv4IsLocalHostAddr+0x78>
      {
         //Point to the current interface
         interface = &netInterface[i];
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 800951e:	fb02 f303 	mul.w	r3, r2, r3
 8009522:	4a1a      	ldr	r2, [pc, #104]	; (800958c <ipv4IsLocalHostAddr+0x94>)
 8009524:	4413      	add	r3, r2
 8009526:	613b      	str	r3, [r7, #16]

         //Iterate through the list of addresses assigned to the interface
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 8009528:	2300      	movs	r3, #0
 800952a:	61bb      	str	r3, [r7, #24]
 800952c:	e017      	b.n	800955e <ipv4IsLocalHostAddr+0x66>
         {
            //Point to the current entry
            entry = &interface->ipv4Context.addrList[j];
 800952e:	69ba      	ldr	r2, [r7, #24]
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	3398      	adds	r3, #152	; 0x98
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	4413      	add	r3, r2
 800953e:	3304      	adds	r3, #4
 8009540:	60fb      	str	r3, [r7, #12]

            //Check whether the specified IPv4 address matches any address
            //assigned to the host
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	791b      	ldrb	r3, [r3, #4]
 8009546:	2b02      	cmp	r3, #2
 8009548:	d106      	bne.n	8009558 <ipv4IsLocalHostAddr+0x60>
               entry->addr == ipAddr)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	429a      	cmp	r2, r3
 8009552:	d101      	bne.n	8009558 <ipv4IsLocalHostAddr+0x60>
            {
               flag = TRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	617b      	str	r3, [r7, #20]
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	3301      	adds	r3, #1
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d102      	bne.n	800956a <ipv4IsLocalHostAddr+0x72>
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0e1      	beq.n	800952e <ipv4IsLocalHostAddr+0x36>
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	3301      	adds	r3, #1
 800956e:	61fb      	str	r3, [r7, #28]
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d102      	bne.n	800957c <ipv4IsLocalHostAddr+0x84>
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d0cd      	beq.n	8009518 <ipv4IsLocalHostAddr+0x20>
         }
      }
   }

   //Return TRUE if the specified address matches any address assigned to the host
   return flag;
 800957c:	697b      	ldr	r3, [r7, #20]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3724      	adds	r7, #36	; 0x24
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	2000e464 	.word	0x2000e464

08009590 <ipv4GetAddrScope>:
 * @param[in] ipAddr IPv4 address
 * @return IPv4 address scope
 **/

uint_t ipv4GetAddrScope(Ipv4Addr ipAddr)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
   uint_t scope;

   //Broadcast address?
   if(ipAddr == IPV4_BROADCAST_ADDR)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800959e:	d102      	bne.n	80095a6 <ipv4GetAddrScope+0x16>
   {
      //The broadcast address is never forwarded by the routers connecting
      //the local network to other networks
      scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 80095a0:	2302      	movs	r3, #2
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e021      	b.n	80095ea <ipv4GetAddrScope+0x5a>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095ac:	2be0      	cmp	r3, #224	; 0xe0
 80095ae:	d10a      	bne.n	80095c6 <ipv4GetAddrScope+0x36>
   {
      //Local Network Control Block?
      if((ipAddr & IPV4_MULTICAST_LNCB_MASK) == IPV4_MULTICAST_LNCB_PREFIX)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095b6:	2be0      	cmp	r3, #224	; 0xe0
 80095b8:	d102      	bne.n	80095c0 <ipv4GetAddrScope+0x30>
      {
         //Addresses in the Local Network Control Block are used for protocol
         //control traffic that is not forwarded off link
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 80095ba:	2302      	movs	r3, #2
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e014      	b.n	80095ea <ipv4GetAddrScope+0x5a>
      }
      //Any other multicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 80095c0:	2303      	movs	r3, #3
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	e011      	b.n	80095ea <ipv4GetAddrScope+0x5a>
   }
   //Unicast address?
   else
   {
      //Loopback address?
      if((ipAddr & IPV4_LOOPBACK_MASK) == IPV4_LOOPBACK_PREFIX)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b7f      	cmp	r3, #127	; 0x7f
 80095cc:	d102      	bne.n	80095d4 <ipv4GetAddrScope+0x44>
      {
         //IPv4 loopback addresses, which have the prefix 127.0.0.0/8,
         //are assigned interface-local scope
         scope = IPV4_ADDR_SCOPE_INTERFACE_LOCAL;
 80095ce:	2301      	movs	r3, #1
 80095d0:	60fb      	str	r3, [r7, #12]
 80095d2:	e00a      	b.n	80095ea <ipv4GetAddrScope+0x5a>
      }
      //Link-local address?
      else if((ipAddr & IPV4_LINK_LOCAL_MASK) == IPV4_LINK_LOCAL_PREFIX)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80095dc:	4293      	cmp	r3, r2
 80095de:	d102      	bne.n	80095e6 <ipv4GetAddrScope+0x56>
      {
         //IPv4 auto-configuration addresses, which have the prefix
         //169.254.0.0/16, are assigned link-local scope
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 80095e0:	2302      	movs	r3, #2
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e001      	b.n	80095ea <ipv4GetAddrScope+0x5a>
      }
      //Any other unicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 80095e6:	2303      	movs	r3, #3
 80095e8:	60fb      	str	r3, [r7, #12]
      }
   }

   //Return the scope of the specified IPv4 address
   return scope;
 80095ea:	68fb      	ldr	r3, [r7, #12]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <ipv4GetPrefixLength>:
 * @param[in] mask Subnet mask
 * @return Prefix length
 **/

uint_t ipv4GetPrefixLength(Ipv4Addr mask)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Convert from network byte order to host byte order
   mask = ntohl(mask);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7f6 ffdb 	bl	80005bc <swapInt32>
 8009606:	6078      	str	r0, [r7, #4]

   //Count of the number of leading 1 bits in the network mask
   for(i = 0; i < 32; i++)
 8009608:	2300      	movs	r3, #0
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	e00b      	b.n	8009626 <ipv4GetPrefixLength+0x2e>
   {
      //Check the value of the current bit
      if(!(mask & (1U << (31 - i))))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f1c3 031f 	rsb	r3, r3, #31
 8009614:	2201      	movs	r2, #1
 8009616:	409a      	lsls	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4013      	ands	r3, r2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d006      	beq.n	800962e <ipv4GetPrefixLength+0x36>
   for(i = 0; i < 32; i++)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3301      	adds	r3, #1
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b1f      	cmp	r3, #31
 800962a:	d9f0      	bls.n	800960e <ipv4GetPrefixLength+0x16>
 800962c:	e000      	b.n	8009630 <ipv4GetPrefixLength+0x38>
         break;
 800962e:	bf00      	nop
   }

   //Return prefix length
   return i;
 8009630:	68fb      	ldr	r3, [r7, #12]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <ipv4UpdateInStats>:
 * @param[in] length Length of the incoming IP packet
 **/

void ipv4UpdateInStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 8009646:	68b9      	ldr	r1, [r7, #8]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff feeb 	bl	8009424 <ipv4IsBroadcastAddr>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCInMcastOctets, length);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInMcastOctets, length);
   }
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <ipv4UpdateOutStats>:
 * @param[in] length Length of the outgoing IP packet
 **/

void ipv4UpdateOutStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7ff fedb 	bl	8009424 <ipv4IsBroadcastAddr>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
   //for transmission
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutOctets, length);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutOctets, length);
}
 8009672:	bf00      	nop
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
	...

0800967c <ipv4UpdateErrorStats>:
 * @param[in] interface Underlying network interface
 * @param[in] error Status code describing the error
 **/

void ipv4UpdateErrorStats(NetInterface *interface, error_t error)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	807b      	strh	r3, [r7, #2]
   //Check error code
   switch(error)
 8009688:	887b      	ldrh	r3, [r7, #2]
 800968a:	3bd1      	subs	r3, #209	; 0xd1
 800968c:	2b1a      	cmp	r3, #26
 800968e:	d839      	bhi.n	8009704 <ipv4UpdateErrorStats+0x88>
 8009690:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <ipv4UpdateErrorStats+0x1c>)
 8009692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009696:	bf00      	nop
 8009698:	08009705 	.word	0x08009705
 800969c:	08009705 	.word	0x08009705
 80096a0:	08009705 	.word	0x08009705
 80096a4:	08009705 	.word	0x08009705
 80096a8:	08009705 	.word	0x08009705
 80096ac:	08009705 	.word	0x08009705
 80096b0:	08009705 	.word	0x08009705
 80096b4:	08009705 	.word	0x08009705
 80096b8:	08009705 	.word	0x08009705
 80096bc:	08009705 	.word	0x08009705
 80096c0:	08009705 	.word	0x08009705
 80096c4:	08009705 	.word	0x08009705
 80096c8:	08009705 	.word	0x08009705
 80096cc:	08009705 	.word	0x08009705
 80096d0:	08009705 	.word	0x08009705
 80096d4:	08009705 	.word	0x08009705
 80096d8:	08009705 	.word	0x08009705
 80096dc:	08009705 	.word	0x08009705
 80096e0:	08009705 	.word	0x08009705
 80096e4:	08009705 	.word	0x08009705
 80096e8:	08009705 	.word	0x08009705
 80096ec:	08009705 	.word	0x08009705
 80096f0:	08009705 	.word	0x08009705
 80096f4:	08009705 	.word	0x08009705
 80096f8:	08009705 	.word	0x08009705
 80096fc:	08009705 	.word	0x08009705
 8009700:	08009705 	.word	0x08009705
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInTruncatedPkts, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInTruncatedPkts, 1);
      break;
   default:
      //Just for sanity
      break;
 8009704:	bf00      	nop
   }
}
 8009706:	bf00      	nop
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop

08009714 <modbusClientInit>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientInit(ModbusClientContext *context)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
#if (MODBUS_CLIENT_TLS_SUPPORT == ENABLED)
   error_t error;
#endif

   //Make sure the Modbus/TCP client context is valid
   if(context == NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <modbusClientInit+0x12>
      return ERROR_INVALID_PARAMETER;
 8009722:	2302      	movs	r3, #2
 8009724:	e016      	b.n	8009754 <modbusClientInit+0x40>

   //Clear Modbus/TCP client context
   memset(context, 0, sizeof(ModbusClientContext));
 8009726:	f44f 720d 	mov.w	r2, #564	; 0x234
 800972a:	2100      	movs	r1, #0
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f011 fd1b 	bl	801b168 <memset>
   if(error)
      return error;
#endif

   //Initialize Modbus/TCP client state
   context->state = MODBUS_CLIENT_STATE_DISCONNECTED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	701a      	strb	r2, [r3, #0]

   //Default timeout
   context->timeout = MODBUS_CLIENT_DEFAULT_TIMEOUT;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800973e:	611a      	str	r2, [r3, #16]
   //Default unit identifier
   context->unitId = MODBUS_DEFAULT_UNIT_ID;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	22ff      	movs	r2, #255	; 0xff
 8009744:	721a      	strb	r2, [r3, #8]

   //The transaction identifier is used to uniquely identify the matching
   //requests and responses
   context->transactionId = (uint16_t) netGetRand();
 8009746:	f7f8 fd43 	bl	80021d0 <netGetRand>
 800974a:	4603      	mov	r3, r0
 800974c:	b29a      	uxth	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	815a      	strh	r2, [r3, #10]

   //Successful initialization
   return NO_ERROR;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <modbusClientBindToInterface>:
 * @return Error code
 **/

error_t modbusClientBindToInterface(ModbusClientContext *context,
   NetInterface *interface)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
   //Make sure the Modbus/TCP client context is valid
   if(context == NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <modbusClientBindToInterface+0x14>
      return ERROR_INVALID_PARAMETER;
 800976c:	2302      	movs	r3, #2
 800976e:	e003      	b.n	8009778 <modbusClientBindToInterface+0x1c>

   //Explicitly associate the Modbus/TCP client with the specified interface
   context->interface = interface;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	605a      	str	r2, [r3, #4]

   //Successful processing
   return NO_ERROR;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <modbusClientConnect>:
 * @return Error code
 **/

error_t modbusClientConnect(ModbusClientContext *context,
   const IpAddr *serverIpAddr, uint16_t serverPort)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //Check parameters
   if(context == NULL || serverIpAddr == NULL)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <modbusClientConnect+0x1a>
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <modbusClientConnect+0x1e>
      return ERROR_INVALID_PARAMETER;
 800979e:	2302      	movs	r3, #2
 80097a0:	e04f      	b.n	8009842 <modbusClientConnect+0xbe>

   //Initialize status code
   error = NO_ERROR;
 80097a2:	2300      	movs	r3, #0
 80097a4:	82fb      	strh	r3, [r7, #22]

   //Establish connection with the Modbus/TCP server
   while(!error)
 80097a6:	e03a      	b.n	800981e <modbusClientConnect+0x9a>
   {
      //Check current state
      if(context->state == MODBUS_CLIENT_STATE_DISCONNECTED)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d110      	bne.n	80097d2 <modbusClientConnect+0x4e>
      {
         //Open network connection
         error = modbusClientOpenConnection(context);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fb87 	bl	8009ec4 <modbusClientOpenConnection>
 80097b6:	4603      	mov	r3, r0
 80097b8:	82fb      	strh	r3, [r7, #22]

         //Check status code
         if(!error)
 80097ba:	8afb      	ldrh	r3, [r7, #22]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d12e      	bne.n	800981e <modbusClientConnect+0x9a>
         {
            //Save current time
            context->timestamp = osGetSystemTime();
 80097c0:	f7f7 f806 	bl	80007d0 <osGetSystemTime>
 80097c4:	4602      	mov	r2, r0
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	615a      	str	r2, [r3, #20]
            //Update Modbus/TCP client state
            context->state = MODBUS_CLIENT_STATE_CONNECTING;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2201      	movs	r2, #1
 80097ce:	701a      	strb	r2, [r3, #0]
 80097d0:	e025      	b.n	800981e <modbusClientConnect+0x9a>
         }
      }
      else if(context->state == MODBUS_CLIENT_STATE_CONNECTING)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d11a      	bne.n	8009810 <modbusClientConnect+0x8c>
      {
         //Establish network connection
         error = modbusClientEstablishConnection(context, serverIpAddr,
 80097da:	88fb      	ldrh	r3, [r7, #6]
 80097dc:	461a      	mov	r2, r3
 80097de:	68b9      	ldr	r1, [r7, #8]
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 fba3 	bl	8009f2c <modbusClientEstablishConnection>
 80097e6:	4603      	mov	r3, r0
 80097e8:	82fb      	strh	r3, [r7, #22]
            serverPort);

         //Check status code
         if(error == NO_ERROR)
 80097ea:	8afb      	ldrh	r3, [r7, #22]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d103      	bne.n	80097f8 <modbusClientConnect+0x74>
         {
            //Update Modbus/TCP client state
            context->state = MODBUS_CLIENT_STATE_CONNECTED;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2202      	movs	r2, #2
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	e012      	b.n	800981e <modbusClientConnect+0x9a>
         }
         else if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 80097f8:	8afb      	ldrh	r3, [r7, #22]
 80097fa:	2bdd      	cmp	r3, #221	; 0xdd
 80097fc:	d002      	beq.n	8009804 <modbusClientConnect+0x80>
 80097fe:	8afb      	ldrh	r3, [r7, #22]
 8009800:	2bdc      	cmp	r3, #220	; 0xdc
 8009802:	d10c      	bne.n	800981e <modbusClientConnect+0x9a>
         {
            //Check whether the timeout has elapsed
            error = modbusClientCheckTimeout(context);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 facf 	bl	8009da8 <modbusClientCheckTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	82fb      	strh	r3, [r7, #22]
 800980e:	e006      	b.n	800981e <modbusClientConnect+0x9a>
         else
         {
            //A communication error has occured
         }
      }
      else if(context->state == MODBUS_CLIENT_STATE_CONNECTED)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b02      	cmp	r3, #2
 8009816:	d006      	beq.n	8009826 <modbusClientConnect+0xa2>
         break;
      }
      else
      {
         //Invalid state
         error = ERROR_WRONG_STATE;
 8009818:	f240 13ff 	movw	r3, #511	; 0x1ff
 800981c:	82fb      	strh	r3, [r7, #22]
   while(!error)
 800981e:	8afb      	ldrh	r3, [r7, #22]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0c1      	beq.n	80097a8 <modbusClientConnect+0x24>
 8009824:	e000      	b.n	8009828 <modbusClientConnect+0xa4>
         break;
 8009826:	bf00      	nop
      }
   }

   //Failed to establish connection with the Modbus/TCP server?
   if(error != NO_ERROR && error != ERROR_WOULD_BLOCK)
 8009828:	8afb      	ldrh	r3, [r7, #22]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d008      	beq.n	8009840 <modbusClientConnect+0xbc>
 800982e:	8afb      	ldrh	r3, [r7, #22]
 8009830:	2bdd      	cmp	r3, #221	; 0xdd
 8009832:	d005      	beq.n	8009840 <modbusClientConnect+0xbc>
   {
      //Clean up side effects
      modbusClientCloseConnection(context);
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 fbad 	bl	8009f94 <modbusClientCloseConnection>
      //Update Modbus/TCP client state
      context->state = MODBUS_CLIENT_STATE_DISCONNECTED;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	701a      	strb	r2, [r3, #0]
   }

   //Return status code
   return error;
 8009840:	8afb      	ldrh	r3, [r7, #22]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <modbusClientReadCoils>:
 * @return Error code
 **/

error_t modbusClientReadCoils(ModbusClientContext *context,
   uint16_t address, uint_t quantity, uint8_t *value)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b086      	sub	sp, #24
 800984e:	af00      	add	r7, sp, #0
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	603b      	str	r3, [r7, #0]
 8009856:	460b      	mov	r3, r1
 8009858:	817b      	strh	r3, [r7, #10]
   error_t error;

   //Check parameters
   if(context == NULL || value == NULL)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <modbusClientReadCoils+0x1c>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <modbusClientReadCoils+0x20>
      return ERROR_INVALID_PARAMETER;
 8009866:	2302      	movs	r3, #2
 8009868:	e03b      	b.n	80098e2 <modbusClientReadCoils+0x98>

   //The number of coils must be in range 1 to 2000
   if(quantity < 1 || quantity > 2000)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d003      	beq.n	8009878 <modbusClientReadCoils+0x2e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009876:	d901      	bls.n	800987c <modbusClientReadCoils+0x32>
      return ERROR_INVALID_PARAMETER;
 8009878:	2302      	movs	r3, #2
 800987a:	e032      	b.n	80098e2 <modbusClientReadCoils+0x98>

   //Initialize status code
   error = NO_ERROR;
 800987c:	2300      	movs	r3, #0
 800987e:	82fb      	strh	r3, [r7, #22]

   //Perform Modbus request/response transaction
   while(!error)
 8009880:	e02b      	b.n	80098da <modbusClientReadCoils+0x90>
   {
      //Check current state
      if(context->state == MODBUS_CLIENT_STATE_CONNECTED)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d108      	bne.n	800989c <modbusClientReadCoils+0x52>
      {
         //Format request
         error = modbusClientFormatReadCoilsReq(context, address,
 800988a:	897b      	ldrh	r3, [r7, #10]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4619      	mov	r1, r3
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 fa94 	bl	8009dbe <modbusClientFormatReadCoilsReq>
 8009896:	4603      	mov	r3, r0
 8009898:	82fb      	strh	r3, [r7, #22]
 800989a:	e01e      	b.n	80098da <modbusClientReadCoils+0x90>
            quantity);
      }
      else if(context->state == MODBUS_CLIENT_STATE_SENDING ||
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d003      	beq.n	80098ac <modbusClientReadCoils+0x62>
         context->state == MODBUS_CLIENT_STATE_RECEIVING)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	781b      	ldrb	r3, [r3, #0]
      else if(context->state == MODBUS_CLIENT_STATE_SENDING ||
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d105      	bne.n	80098b8 <modbusClientReadCoils+0x6e>
      {
         //Send Modbus request and wait for a matching response
         error = modbusClientTransaction(context);
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 f871 	bl	8009994 <modbusClientTransaction>
 80098b2:	4603      	mov	r3, r0
 80098b4:	82fb      	strh	r3, [r7, #22]
 80098b6:	e010      	b.n	80098da <modbusClientReadCoils+0x90>
      }
      else if(context->state == MODBUS_CLIENT_STATE_COMPLETE)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b05      	cmp	r3, #5
 80098be:	d10a      	bne.n	80098d6 <modbusClientReadCoils+0x8c>
      {
         //Parse response
         error = modbusClientParseReadCoilsResp(context, quantity,
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 faaa 	bl	8009e1e <modbusClientParseReadCoilsResp>
 80098ca:	4603      	mov	r3, r0
 80098cc:	82fb      	strh	r3, [r7, #22]
            value);

         //The Modbus transaction is complete
         context->state = MODBUS_CLIENT_STATE_CONNECTED;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2202      	movs	r2, #2
 80098d2:	701a      	strb	r2, [r3, #0]
         break;
 80098d4:	e004      	b.n	80098e0 <modbusClientReadCoils+0x96>
      }
      else
      {
         //Invalid state
         error = ERROR_NOT_CONNECTED;
 80098d6:	23cd      	movs	r3, #205	; 0xcd
 80098d8:	82fb      	strh	r3, [r7, #22]
   while(!error)
 80098da:	8afb      	ldrh	r3, [r7, #22]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0d0      	beq.n	8009882 <modbusClientReadCoils+0x38>
      }
   }

   //Return status code
   return error;
 80098e0:	8afb      	ldrh	r3, [r7, #22]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3718      	adds	r7, #24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <modbusClientDisconnect>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientDisconnect(ModbusClientContext *context)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
   error_t error;

   //Make sure the Modbus/TCP client context is valid
   if(context == NULL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <modbusClientDisconnect+0x12>
      return ERROR_INVALID_PARAMETER;
 80098f8:	2302      	movs	r3, #2
 80098fa:	e047      	b.n	800998c <modbusClientDisconnect+0xa2>

   //Initialize status code
   error = NO_ERROR;
 80098fc:	2300      	movs	r3, #0
 80098fe:	81fb      	strh	r3, [r7, #14]

   //Gracefully disconnect from the Modbus/TCP server
   while(!error)
 8009900:	e032      	b.n	8009968 <modbusClientDisconnect+0x7e>
   {
      //Check current state
      if(context->state == MODBUS_CLIENT_STATE_CONNECTED)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b02      	cmp	r3, #2
 8009908:	d108      	bne.n	800991c <modbusClientDisconnect+0x32>
      {
         //Save current time
         context->timestamp = osGetSystemTime();
 800990a:	f7f6 ff61 	bl	80007d0 <osGetSystemTime>
 800990e:	4602      	mov	r2, r0
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	615a      	str	r2, [r3, #20]
         //Update Modbus/TCP client state
         context->state = MODBUS_CLIENT_STATE_DISCONNECTING;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2206      	movs	r2, #6
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	e025      	b.n	8009968 <modbusClientDisconnect+0x7e>
      }
      else if(context->state == MODBUS_CLIENT_STATE_DISCONNECTING)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b06      	cmp	r3, #6
 8009922:	d11a      	bne.n	800995a <modbusClientDisconnect+0x70>
      {
         //Shutdown connection
         error = modbusClientShutdownConnection(context);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fb1b 	bl	8009f60 <modbusClientShutdownConnection>
 800992a:	4603      	mov	r3, r0
 800992c:	81fb      	strh	r3, [r7, #14]

         //Check status code
         if(error == NO_ERROR)
 800992e:	89fb      	ldrh	r3, [r7, #14]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d106      	bne.n	8009942 <modbusClientDisconnect+0x58>
         {
            //Close connection
            modbusClientCloseConnection(context);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fb2d 	bl	8009f94 <modbusClientCloseConnection>
            //Update Modbus/TCP client state
            context->state = MODBUS_CLIENT_STATE_DISCONNECTED;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	701a      	strb	r2, [r3, #0]
 8009940:	e012      	b.n	8009968 <modbusClientDisconnect+0x7e>
         }
         else if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 8009942:	89fb      	ldrh	r3, [r7, #14]
 8009944:	2bdd      	cmp	r3, #221	; 0xdd
 8009946:	d002      	beq.n	800994e <modbusClientDisconnect+0x64>
 8009948:	89fb      	ldrh	r3, [r7, #14]
 800994a:	2bdc      	cmp	r3, #220	; 0xdc
 800994c:	d10c      	bne.n	8009968 <modbusClientDisconnect+0x7e>
         {
            //Check whether the timeout has elapsed
            error = modbusClientCheckTimeout(context);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fa2a 	bl	8009da8 <modbusClientCheckTimeout>
 8009954:	4603      	mov	r3, r0
 8009956:	81fb      	strh	r3, [r7, #14]
 8009958:	e006      	b.n	8009968 <modbusClientDisconnect+0x7e>
         else
         {
            //A communication error has occured
         }
      }
      else if(context->state == MODBUS_CLIENT_STATE_DISCONNECTED)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d006      	beq.n	8009970 <modbusClientDisconnect+0x86>
         break;
      }
      else
      {
         //Invalid state
         error = ERROR_WRONG_STATE;
 8009962:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009966:	81fb      	strh	r3, [r7, #14]
   while(!error)
 8009968:	89fb      	ldrh	r3, [r7, #14]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0c9      	beq.n	8009902 <modbusClientDisconnect+0x18>
 800996e:	e000      	b.n	8009972 <modbusClientDisconnect+0x88>
         break;
 8009970:	bf00      	nop
      }
   }

   //Failed to gracefully disconnect from the Modbus/TCP server?
   if(error != NO_ERROR && error != ERROR_WOULD_BLOCK)
 8009972:	89fb      	ldrh	r3, [r7, #14]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d008      	beq.n	800998a <modbusClientDisconnect+0xa0>
 8009978:	89fb      	ldrh	r3, [r7, #14]
 800997a:	2bdd      	cmp	r3, #221	; 0xdd
 800997c:	d005      	beq.n	800998a <modbusClientDisconnect+0xa0>
   {
      //Close connection
      modbusClientCloseConnection(context);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fb08 	bl	8009f94 <modbusClientCloseConnection>
      //Update Modbus/TCP client state
      context->state = MODBUS_CLIENT_STATE_DISCONNECTED;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	701a      	strb	r2, [r3, #0]
   }

   //Return status code
   return error;
 800998a:	89fb      	ldrh	r3, [r7, #14]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <modbusClientTransaction>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientTransaction(ModbusClientContext *context)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af02      	add	r7, sp, #8
 800999a:	6078      	str	r0, [r7, #4]
   size_t n;
   systime_t time;
   uint8_t *pdu;

   //Initialize status code
   error = NO_ERROR;
 800999c:	2300      	movs	r3, #0
 800999e:	82fb      	strh	r3, [r7, #22]

   //Get current time
   time = osGetSystemTime();
 80099a0:	f7f6 ff16 	bl	80007d0 <osGetSystemTime>
 80099a4:	6138      	str	r0, [r7, #16]

   //Adjust timeout
   if(timeCompare(context->timestamp + context->timeout, time) > 0)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695a      	ldr	r2, [r3, #20]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	441a      	add	r2, r3
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dd0c      	ble.n	80099d2 <modbusClientTransaction+0x3e>
   {
      socketSetTimeout(context->socket, context->timestamp +
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68d8      	ldr	r0, [r3, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	695a      	ldr	r2, [r3, #20]
         context->timeout - time);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
      socketSetTimeout(context->socket, context->timestamp +
 80099c4:	441a      	add	r2, r3
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	4619      	mov	r1, r3
 80099cc:	f7f9 fa9c 	bl	8002f08 <socketSetTimeout>
 80099d0:	e005      	b.n	80099de <modbusClientTransaction+0x4a>
   }
   else
   {
      socketSetTimeout(context->socket, 0);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	2100      	movs	r1, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	f7f9 fa95 	bl	8002f08 <socketSetTimeout>
   }

   //Check current state
   if(context->state == MODBUS_CLIENT_STATE_SENDING)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d13c      	bne.n	8009a60 <modbusClientTransaction+0xcc>
   {
      //Send Modbus request
      if(context->requestAduPos < context->requestAduLen)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d228      	bcs.n	8009a48 <modbusClientTransaction+0xb4>
      {
         //Send more data
         error = modbusClientSendData(context,
            context->requestAdu + context->requestAduPos,
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f103 0218 	add.w	r2, r3, #24
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
         error = modbusClientSendData(context,
 8009a02:	18d1      	adds	r1, r2, r3
            context->requestAduLen - context->requestAduPos,
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
         error = modbusClientSendData(context,
 8009a10:	1ad2      	subs	r2, r2, r3
 8009a12:	f107 0008 	add.w	r0, r7, #8
 8009a16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 facc 	bl	8009fbc <modbusClientSendData>
 8009a24:	4603      	mov	r3, r0
 8009a26:	82fb      	strh	r3, [r7, #22]
            &n, SOCKET_FLAG_NO_DELAY);

         //Check status code
         if(error == NO_ERROR || error == ERROR_TIMEOUT)
 8009a28:	8afb      	ldrh	r3, [r7, #22]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <modbusClientTransaction+0xa2>
 8009a2e:	8afb      	ldrh	r3, [r7, #22]
 8009a30:	2bdc      	cmp	r3, #220	; 0xdc
 8009a32:	f040 80ac 	bne.w	8009b8e <modbusClientTransaction+0x1fa>
         {
            //Advance data pointer
            context->requestAduPos += n;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	441a      	add	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8009a46:	e0a2      	b.n	8009b8e <modbusClientTransaction+0x1fa>
         }
      }
      else
      {
         //Flush receive buffer
         context->responseAduLen = 0;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
         context->responseAduPos = 0;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

         //Wait for response ADU
         context->state = MODBUS_CLIENT_STATE_RECEIVING;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2204      	movs	r2, #4
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	e096      	b.n	8009b8e <modbusClientTransaction+0x1fa>
      }
   }
   else if(context->state == MODBUS_CLIENT_STATE_RECEIVING)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	f040 808f 	bne.w	8009b88 <modbusClientTransaction+0x1f4>
   {
      //Receive Modbus response
      if(context->responseAduPos < sizeof(ModbusHeader))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009a70:	2b06      	cmp	r3, #6
 8009a72:	d82b      	bhi.n	8009acc <modbusClientTransaction+0x138>
      {
         //Receive more data
         error = modbusClientReceiveData(context,
            context->responseAdu + context->responseAduPos,
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f503 7292 	add.w	r2, r3, #292	; 0x124
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
         error = modbusClientReceiveData(context,
 8009a80:	18d1      	adds	r1, r2, r3
            sizeof(ModbusHeader) - context->responseAduPos, &n, 0);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
         error = modbusClientReceiveData(context,
 8009a88:	f1c3 0207 	rsb	r2, r3, #7
 8009a8c:	f107 0008 	add.w	r0, r7, #8
 8009a90:	2300      	movs	r3, #0
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	4603      	mov	r3, r0
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 faa7 	bl	8009fea <modbusClientReceiveData>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	82fb      	strh	r3, [r7, #22]

         //Check status code
         if(error == NO_ERROR)
 8009aa0:	8afb      	ldrh	r3, [r7, #22]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d173      	bne.n	8009b8e <modbusClientTransaction+0x1fa>
         {
            //Advance data pointer
            context->responseAduPos += n;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	441a      	add	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

            //MBAP header successfully received?
            if(context->responseAduPos >= sizeof(ModbusHeader))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009abc:	2b06      	cmp	r3, #6
 8009abe:	d966      	bls.n	8009b8e <modbusClientTransaction+0x1fa>
            {
               //Parse MBAP header
               error = modbusClientParseMbapHeader(context);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f90b 	bl	8009cdc <modbusClientParseMbapHeader>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	82fb      	strh	r3, [r7, #22]
 8009aca:	e060      	b.n	8009b8e <modbusClientTransaction+0x1fa>
            }
         }
      }
      else if(context->responseAduPos < context->responseAduLen)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d223      	bcs.n	8009b24 <modbusClientTransaction+0x190>
      {
         //Receive more data
         error = modbusClientReceiveData(context,
            context->responseAdu + context->responseAduPos,
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f503 7292 	add.w	r2, r3, #292	; 0x124
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
         error = modbusClientReceiveData(context,
 8009ae8:	18d1      	adds	r1, r2, r3
            context->responseAduLen - context->responseAduPos, &n, 0);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
         error = modbusClientReceiveData(context,
 8009af6:	1ad2      	subs	r2, r2, r3
 8009af8:	f107 0008 	add.w	r0, r7, #8
 8009afc:	2300      	movs	r3, #0
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	4603      	mov	r3, r0
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fa71 	bl	8009fea <modbusClientReceiveData>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	82fb      	strh	r3, [r7, #22]

         //Check status code
         if(error == NO_ERROR)
 8009b0c:	8afb      	ldrh	r3, [r7, #22]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d13d      	bne.n	8009b8e <modbusClientTransaction+0x1fa>
         {
            //Advance data pointer
            context->responseAduPos += n;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	441a      	add	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
 8009b22:	e034      	b.n	8009b8e <modbusClientTransaction+0x1fa>
         }
      }
      else
      {
         //Point to the Modbus response PDU
         pdu = modbusClientGetResponsePdu(context, &n);
 8009b24:	f107 0308 	add.w	r3, r7, #8
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f91c 	bl	8009d68 <modbusClientGetResponsePdu>
 8009b30:	60f8      	str	r0, [r7, #12]

         //Debug message
         TRACE_INFO("Modbus Client: Response PDU received (%" PRIuSIZE " bytes)...\r\n", n);
 8009b32:	f7f6 fd85 	bl	8000640 <osSuspendAllTasks>
 8009b36:	4b22      	ldr	r3, [pc, #136]	; (8009bc0 <modbusClientTransaction+0x22c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	4921      	ldr	r1, [pc, #132]	; (8009bc4 <modbusClientTransaction+0x230>)
 8009b40:	4618      	mov	r0, r3
 8009b42:	f011 fa2b 	bl	801af9c <fiprintf>
 8009b46:	f7f6 fd86 	bl	8000656 <osResumeAllTasks>
         //Dump the contents of the PDU for debugging purpose
         modbusDumpResponsePdu(pdu, n);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f000 fa6e 	bl	800a030 <modbusDumpResponsePdu>

         //Check whether the received response matches the request
         error = modbusClientCheckResp(context);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f837 	bl	8009bc8 <modbusClientCheckResp>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	82fb      	strh	r3, [r7, #22]

         //Check status code
         if(error == NO_ERROR)
 8009b5e:	8afb      	ldrh	r3, [r7, #22]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d103      	bne.n	8009b6c <modbusClientTransaction+0x1d8>
         {
            //If the transaction identifier refers to a pending transaction,
            //the response must be parsed in order to send a confirmation to
            //the user application
            context->state = MODBUS_CLIENT_STATE_COMPLETE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2205      	movs	r2, #5
 8009b68:	701a      	strb	r2, [r3, #0]
 8009b6a:	e010      	b.n	8009b8e <modbusClientTransaction+0x1fa>
         }
         else if(error == ERROR_WRONG_IDENTIFIER)
 8009b6c:	8afb      	ldrh	r3, [r7, #22]
 8009b6e:	2bd6      	cmp	r3, #214	; 0xd6
 8009b70:	d10d      	bne.n	8009b8e <modbusClientTransaction+0x1fa>
         {
            //If the transaction identifier does not refer to any pending
            //transaction, the response must be discarded
            context->responseAduLen = 0;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
            context->responseAduPos = 0;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

            //Catch exception
            error = NO_ERROR;
 8009b82:	2300      	movs	r3, #0
 8009b84:	82fb      	strh	r3, [r7, #22]
 8009b86:	e002      	b.n	8009b8e <modbusClientTransaction+0x1fa>
      }
   }
   else
   {
      //Report an error
      error = ERROR_WRONG_STATE;
 8009b88:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009b8c:	82fb      	strh	r3, [r7, #22]
   }

   //Check status code
   if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 8009b8e:	8afb      	ldrh	r3, [r7, #22]
 8009b90:	2bdd      	cmp	r3, #221	; 0xdd
 8009b92:	d002      	beq.n	8009b9a <modbusClientTransaction+0x206>
 8009b94:	8afb      	ldrh	r3, [r7, #22]
 8009b96:	2bdc      	cmp	r3, #220	; 0xdc
 8009b98:	d104      	bne.n	8009ba4 <modbusClientTransaction+0x210>
   {
      //Check whether the timeout has elapsed
      error = modbusClientCheckTimeout(context);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f904 	bl	8009da8 <modbusClientCheckTimeout>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	82fb      	strh	r3, [r7, #22]
   }

   //Modbus transaction failed?
   if(error != NO_ERROR && error != ERROR_WOULD_BLOCK)
 8009ba4:	8afb      	ldrh	r3, [r7, #22]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d005      	beq.n	8009bb6 <modbusClientTransaction+0x222>
 8009baa:	8afb      	ldrh	r3, [r7, #22]
 8009bac:	2bdd      	cmp	r3, #221	; 0xdd
 8009bae:	d002      	beq.n	8009bb6 <modbusClientTransaction+0x222>
   {
      //Revert to default state
      context->state = MODBUS_CLIENT_STATE_CONNECTED;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	701a      	strb	r2, [r3, #0]
   }

   //Return status code
   return error;
 8009bb6:	8afb      	ldrh	r3, [r7, #22]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20000058 	.word	0x20000058
 8009bc4:	0801c548 	.word	0x0801c548

08009bc8 <modbusClientCheckResp>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientCheckResp(ModbusClientContext *context)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
   error_t error;
   ModbusHeader *requestHeader;
   ModbusHeader *responseHeader;

   //Malformed request?
   if(context->requestAduLen < (sizeof(ModbusHeader) + sizeof(uint8_t)))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009bd6:	2b07      	cmp	r3, #7
 8009bd8:	d801      	bhi.n	8009bde <modbusClientCheckResp+0x16>
      return ERROR_INVALID_LENGTH;
 8009bda:	23eb      	movs	r3, #235	; 0xeb
 8009bdc:	e039      	b.n	8009c52 <modbusClientCheckResp+0x8a>

   //Malformed response?
   if(context->responseAduLen < (sizeof(ModbusHeader) + sizeof(uint8_t)))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009be4:	2b07      	cmp	r3, #7
 8009be6:	d801      	bhi.n	8009bec <modbusClientCheckResp+0x24>
      return ERROR_INVALID_LENGTH;
 8009be8:	23eb      	movs	r3, #235	; 0xeb
 8009bea:	e032      	b.n	8009c52 <modbusClientCheckResp+0x8a>

   //Point to the MBAP header of the Modbus request
   requestHeader = (ModbusHeader *) context->requestAdu;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3318      	adds	r3, #24
 8009bf0:	613b      	str	r3, [r7, #16]
   //Point to the MBAP header of the Modbus response
   responseHeader = (ModbusHeader *) context->responseAdu;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009bf8:	60fb      	str	r3, [r7, #12]

   //Check transaction identifier
   if(responseHeader->transactionId != requestHeader->transactionId)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	881b      	ldrh	r3, [r3, #0]
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d001      	beq.n	8009c0e <modbusClientCheckResp+0x46>
      return ERROR_WRONG_IDENTIFIER;
 8009c0a:	23d6      	movs	r3, #214	; 0xd6
 8009c0c:	e021      	b.n	8009c52 <modbusClientCheckResp+0x8a>

   //Check unit identifier
   if(responseHeader->unitId != requestHeader->unitId)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	799a      	ldrb	r2, [r3, #6]
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	799b      	ldrb	r3, [r3, #6]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d001      	beq.n	8009c1e <modbusClientCheckResp+0x56>
      return ERROR_UNEXPECTED_RESPONSE;
 8009c1a:	236b      	movs	r3, #107	; 0x6b
 8009c1c:	e019      	b.n	8009c52 <modbusClientCheckResp+0x8a>

   //Check function code
   if((responseHeader->pdu[0] & MODBUS_FUNCTION_CODE_MASK) !=
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	79da      	ldrb	r2, [r3, #7]
      (requestHeader->pdu[0] & MODBUS_FUNCTION_CODE_MASK))
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	79db      	ldrb	r3, [r3, #7]
   if((responseHeader->pdu[0] & MODBUS_FUNCTION_CODE_MASK) !=
 8009c26:	4053      	eors	r3, r2
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <modbusClientCheckResp+0x6e>
   {
      return ERROR_UNEXPECTED_RESPONSE;
 8009c32:	236b      	movs	r3, #107	; 0x6b
 8009c34:	e00d      	b.n	8009c52 <modbusClientCheckResp+0x8a>
   }

   //Exception response?
   if(responseHeader->pdu[0] & MODBUS_EXCEPTION_MASK)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	79db      	ldrb	r3, [r3, #7]
 8009c3a:	b25b      	sxtb	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	da05      	bge.n	8009c4c <modbusClientCheckResp+0x84>
   {
      //If the server receives the request without a communication error,
      //but cannot handle it, the server will return an exception response
      //informing the client of the nature of the error
      error = modbusClientParseExceptionResp(context);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f924 	bl	8009e8e <modbusClientParseExceptionResp>
 8009c46:	4603      	mov	r3, r0
 8009c48:	82fb      	strh	r3, [r7, #22]
 8009c4a:	e001      	b.n	8009c50 <modbusClientCheckResp+0x88>
   }
   else
   {
      //A normal response has been received
      error = NO_ERROR;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8009c50:	8afb      	ldrh	r3, [r7, #22]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <modbusClientFormatMbapHeader>:
 * @return Error code
 **/

error_t modbusClientFormatMbapHeader(ModbusClientContext *context,
   size_t length)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
   ModbusHeader *header;

   //Point to the beginning of the request ADU
   header = (ModbusHeader *) context->requestAdu;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3318      	adds	r3, #24
 8009c68:	60fb      	str	r3, [r7, #12]

   //The transaction identifier is used to uniquely identify the matching
   //requests and responses
   context->transactionId++;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	895b      	ldrh	r3, [r3, #10]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	815a      	strh	r2, [r3, #10]

   //Format MBAP header
   header->transactionId = htons(context->transactionId);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	895b      	ldrh	r3, [r3, #10]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7f6 fc90 	bl	80005a0 <swapInt16>
 8009c80:	4603      	mov	r3, r0
 8009c82:	461a      	mov	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	801a      	strh	r2, [r3, #0]
   header->protocolId = HTONS(MODBUS_PROTOCOL_ID);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	709a      	strb	r2, [r3, #2]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	70da      	strb	r2, [r3, #3]
   header->length = htons(length + sizeof(uint8_t));
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	3301      	adds	r3, #1
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7f6 fc80 	bl	80005a0 <swapInt16>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	809a      	strh	r2, [r3, #4]
   header->unitId = context->unitId;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	7a1a      	ldrb	r2, [r3, #8]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	719a      	strb	r2, [r3, #6]

   //Compute the length of the request ADU
   context->requestAduLen = length + sizeof(ModbusHeader);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	1dda      	adds	r2, r3, #7
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   TRACE_DEBUG("  Protocol ID = %" PRIu16 "\r\n", ntohs(header->protocolId));
   TRACE_DEBUG("  Length = %" PRIu16 "\r\n", ntohs(header->length));
   TRACE_DEBUG("  Unit ID = %" PRIu16 "\r\n", header->unitId);

   //Rewind to the beginning of the transmit buffer
   context->requestAduPos = 0;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   //Save current time
   context->timestamp = osGetSystemTime();
 8009cc2:	f7f6 fd85 	bl	80007d0 <osGetSystemTime>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	615a      	str	r2, [r3, #20]
   //Send the request ADU to the server
   context->state = MODBUS_CLIENT_STATE_SENDING;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2203      	movs	r2, #3
 8009cd0:	701a      	strb	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <modbusClientParseMbapHeader>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientParseMbapHeader(ModbusClientContext *context)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
   size_t n;
   ModbusHeader *header;

   //Sanity check
   if(context->responseAduPos < sizeof(ModbusHeader))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009cea:	2b06      	cmp	r3, #6
 8009cec:	d801      	bhi.n	8009cf2 <modbusClientParseMbapHeader+0x16>
      return ERROR_INVALID_LENGTH;
 8009cee:	23eb      	movs	r3, #235	; 0xeb
 8009cf0:	e029      	b.n	8009d46 <modbusClientParseMbapHeader+0x6a>

   //Point to the beginning of the response ADU
   header = (ModbusHeader *) context->responseAdu;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009cf8:	60fb      	str	r3, [r7, #12]

   //The length field is a byte count of the following fields, including the
   //unit identifier and data fields
   n = ntohs(header->length);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	889b      	ldrh	r3, [r3, #4]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7f6 fc4d 	bl	80005a0 <swapInt16>
 8009d06:	4603      	mov	r3, r0
 8009d08:	60bb      	str	r3, [r7, #8]

   //Malformed Modbus response?
   if(n < sizeof(uint8_t))
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <modbusClientParseMbapHeader+0x38>
      return ERROR_INVALID_LENGTH;
 8009d10:	23eb      	movs	r3, #235	; 0xeb
 8009d12:	e018      	b.n	8009d46 <modbusClientParseMbapHeader+0x6a>

   //Retrieve the length of the PDU
   n -= sizeof(uint8_t);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	60bb      	str	r3, [r7, #8]
   TRACE_DEBUG("  Protocol ID = %" PRIu16 "\r\n", ntohs(header->protocolId));
   TRACE_DEBUG("  Length = %" PRIu16 "\r\n", ntohs(header->length));
   TRACE_DEBUG("  Unit ID = %" PRIu16 "\r\n", header->unitId);

   //Check protocol identifier
   if(ntohs(header->protocolId) != MODBUS_PROTOCOL_ID)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	885b      	ldrh	r3, [r3, #2]
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7f6 fc3d 	bl	80005a0 <swapInt16>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <modbusClientParseMbapHeader+0x54>
      return ERROR_WRONG_IDENTIFIER;
 8009d2c:	23d6      	movs	r3, #214	; 0xd6
 8009d2e:	e00a      	b.n	8009d46 <modbusClientParseMbapHeader+0x6a>

   //The length of the Modbus PDU is limited to 253 bytes
   if(n > MODBUS_MAX_PDU_SIZE)
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2bfd      	cmp	r3, #253	; 0xfd
 8009d34:	d901      	bls.n	8009d3a <modbusClientParseMbapHeader+0x5e>
      return ERROR_INVALID_LENGTH;
 8009d36:	23eb      	movs	r3, #235	; 0xeb
 8009d38:	e005      	b.n	8009d46 <modbusClientParseMbapHeader+0x6a>

   //Compute the length of the response ADU
   context->responseAduLen = sizeof(ModbusHeader) + n;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	1dda      	adds	r2, r3, #7
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

   //Successful processing
   return NO_ERROR;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <modbusClientGetRequestPdu>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Pointer to the request PDU
 **/

void *modbusClientGetRequestPdu(ModbusClientContext *context)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b083      	sub	sp, #12
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
   //Point to the request PDU
   return context->requestAdu + sizeof(ModbusHeader);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3318      	adds	r3, #24
 8009d5a:	3307      	adds	r3, #7
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <modbusClientGetResponsePdu>:
 * @param[out] length Length of the response PDU, in bytes
 * @return Pointer to the response PDU
 **/

void *modbusClientGetResponsePdu(ModbusClientContext *context, size_t *length)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
   uint8_t *responsePdu;

   //Point to the response PDU
   responsePdu = context->responseAdu + sizeof(ModbusHeader);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009d78:	3307      	adds	r3, #7
 8009d7a:	60fb      	str	r3, [r7, #12]

   //Retrieve the length of the PDU
   if(context->responseAduLen >= sizeof(ModbusHeader))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009d82:	2b06      	cmp	r3, #6
 8009d84:	d906      	bls.n	8009d94 <modbusClientGetResponsePdu+0x2c>
      *length = context->responseAduLen - sizeof(ModbusHeader);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009d8c:	1fda      	subs	r2, r3, #7
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	e002      	b.n	8009d9a <modbusClientGetResponsePdu+0x32>
   else
      *length = 0;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]

   //Return a pointer to the response PDU
   return responsePdu;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <modbusClientCheckTimeout>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientCheckTimeout(ModbusClientContext *context)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]

   //Return status code
   return error;
#else
   //Report a timeout error
   return ERROR_TIMEOUT;
 8009db0:	23dc      	movs	r3, #220	; 0xdc
#endif
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <modbusClientFormatReadCoilsReq>:
 * @return Error code
 **/

error_t modbusClientFormatReadCoilsReq(ModbusClientContext *context,
   uint16_t address, uint_t quantity)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b086      	sub	sp, #24
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	607a      	str	r2, [r7, #4]
 8009dca:	817b      	strh	r3, [r7, #10]
   size_t length;
   ModbusReadCoilsReq *request;

   //Point to the Modbus request PDU
   request = modbusClientGetRequestPdu(context);
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f7ff ffbe 	bl	8009d4e <modbusClientGetRequestPdu>
 8009dd2:	6178      	str	r0, [r7, #20]

   //Format Read Coils request
   request->functionCode = MODBUS_FUNCTION_READ_COILS;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	701a      	strb	r2, [r3, #0]
   request->startingAddr = htons(address);
 8009dda:	897b      	ldrh	r3, [r7, #10]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7f6 fbdf 	bl	80005a0 <swapInt16>
 8009de2:	4603      	mov	r3, r0
 8009de4:	461a      	mov	r2, r3
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	f8a3 2001 	strh.w	r2, [r3, #1]
   request->quantityOfCoils = htons(quantity);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7f6 fbd5 	bl	80005a0 <swapInt16>
 8009df6:	4603      	mov	r3, r0
 8009df8:	461a      	mov	r2, r3
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f8a3 2003 	strh.w	r2, [r3, #3]

   //Compute the length of the request PDU
   length = sizeof(ModbusReadCoilsReq);
 8009e00:	2305      	movs	r3, #5
 8009e02:	613b      	str	r3, [r7, #16]

   //Debug message
   TRACE_DEBUG("\r\nModbus Client: Sending Request PDU (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump the contents of the PDU for debugging purpose
   modbusDumpRequestPdu(request, length);
 8009e04:	6939      	ldr	r1, [r7, #16]
 8009e06:	6978      	ldr	r0, [r7, #20]
 8009e08:	f000 f906 	bl	800a018 <modbusDumpRequestPdu>

   //Format MBAP header
   return modbusClientFormatMbapHeader(context, length);
 8009e0c:	6939      	ldr	r1, [r7, #16]
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f7ff ff23 	bl	8009c5a <modbusClientFormatMbapHeader>
 8009e14:	4603      	mov	r3, r0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <modbusClientParseReadCoilsResp>:
 * @return Error code
 **/

error_t modbusClientParseReadCoilsResp(ModbusClientContext *context,
   uint_t quantity, uint8_t *value)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b088      	sub	sp, #32
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	607a      	str	r2, [r7, #4]
   size_t n;
   size_t length;
   ModbusReadCoilsResp *response;

   //Point to the Modbus response PDU
   response = modbusClientGetResponsePdu(context, &length);
 8009e2a:	f107 0314 	add.w	r3, r7, #20
 8009e2e:	4619      	mov	r1, r3
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7ff ff99 	bl	8009d68 <modbusClientGetResponsePdu>
 8009e36:	61f8      	str	r0, [r7, #28]

   //Malformed PDU?
   if(length < sizeof(ModbusReadCoilsResp))
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d801      	bhi.n	8009e42 <modbusClientParseReadCoilsResp+0x24>
      return ERROR_INVALID_LENGTH;
 8009e3e:	23eb      	movs	r3, #235	; 0xeb
 8009e40:	e021      	b.n	8009e86 <modbusClientParseReadCoilsResp+0x68>

   //Compute the length of the data field
   n = length - sizeof(ModbusReadCoilsResp);
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	3b02      	subs	r3, #2
 8009e46:	61bb      	str	r3, [r7, #24]

   //Check function code
   if(response->functionCode != MODBUS_FUNCTION_READ_COILS)
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d001      	beq.n	8009e54 <modbusClientParseReadCoilsResp+0x36>
      return ERROR_INVALID_RESPONSE;
 8009e50:	236c      	movs	r3, #108	; 0x6c
 8009e52:	e018      	b.n	8009e86 <modbusClientParseReadCoilsResp+0x68>

   //Check byte count field
   if(response->byteCount != n || response->byteCount != ((quantity + 7) / 8))
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d107      	bne.n	8009e70 <modbusClientParseReadCoilsResp+0x52>
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	785b      	ldrb	r3, [r3, #1]
 8009e64:	461a      	mov	r2, r3
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	3307      	adds	r3, #7
 8009e6a:	08db      	lsrs	r3, r3, #3
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d001      	beq.n	8009e74 <modbusClientParseReadCoilsResp+0x56>
      return ERROR_INVALID_LENGTH;
 8009e70:	23eb      	movs	r3, #235	; 0xeb
 8009e72:	e008      	b.n	8009e86 <modbusClientParseReadCoilsResp+0x68>

   //Copy coil values
   memcpy(value, response->coilStatus, response->byteCount);
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	1c99      	adds	r1, r3, #2
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f011 f94e 	bl	801b120 <memcpy>

   //Successful processing
   return NO_ERROR;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3720      	adds	r7, #32
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <modbusClientParseExceptionResp>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientParseExceptionResp(ModbusClientContext *context)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
   size_t length;
   ModbusExceptionResp *response;

   //Point to the Modbus response PDU
   response = modbusClientGetResponsePdu(context, &length);
 8009e96:	f107 0308 	add.w	r3, r7, #8
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff ff63 	bl	8009d68 <modbusClientGetResponsePdu>
 8009ea2:	60f8      	str	r0, [r7, #12]

   //Malformed PDU?
   if(length < sizeof(ModbusExceptionResp))
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d801      	bhi.n	8009eae <modbusClientParseExceptionResp+0x20>
      return ERROR_INVALID_LENGTH;
 8009eaa:	23eb      	movs	r3, #235	; 0xeb
 8009eac:	e006      	b.n	8009ebc <modbusClientParseExceptionResp+0x2e>

   //Save exception code
   context->exceptionCode = (ModbusExceptionCode) response->exceptionCode;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	785a      	ldrb	r2, [r3, #1]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230

   //Send a negative confirmation to the user application
   return ERROR_EXCEPTION_RECEIVED;
 8009eb8:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <modbusClientOpenConnection>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientOpenConnection(ModbusClientContext *context)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
   error_t error;

   //Open a TCP socket
   context->socket = socketOpen(SOCKET_TYPE_STREAM, SOCKET_IP_PROTO_TCP);
 8009ecc:	2106      	movs	r1, #6
 8009ece:	2001      	movs	r0, #1
 8009ed0:	f7f8 ff96 	bl	8002e00 <socketOpen>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	60da      	str	r2, [r3, #12]
   //Failed to open socket?
   if(context->socket == NULL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <modbusClientOpenConnection+0x22>
      return ERROR_OPEN_FAILED;
 8009ee2:	23c8      	movs	r3, #200	; 0xc8
 8009ee4:	e01e      	b.n	8009f24 <modbusClientOpenConnection+0x60>

   //Associate the socket with the relevant interface
   error = socketBindToInterface(context->socket, context->interface);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	f7f9 f823 	bl	8002f3c <socketSetInterface>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 8009efa:	89fb      	ldrh	r3, [r7, #14]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <modbusClientOpenConnection+0x40>
      return error;
 8009f00:	89fb      	ldrh	r3, [r7, #14]
 8009f02:	e00f      	b.n	8009f24 <modbusClientOpenConnection+0x60>

   //Set timeout
   error = socketSetTimeout(context->socket, context->timeout);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	f7f8 fffa 	bl	8002f08 <socketSetTimeout>
 8009f14:	4603      	mov	r3, r0
 8009f16:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 8009f18:	89fb      	ldrh	r3, [r7, #14]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <modbusClientOpenConnection+0x5e>
      return error;
 8009f1e:	89fb      	ldrh	r3, [r7, #14]
 8009f20:	e000      	b.n	8009f24 <modbusClientOpenConnection+0x60>
         return error;
   }
#endif

   //Successful processing
   return NO_ERROR;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <modbusClientEstablishConnection>:
 * @return Error code
 **/

error_t modbusClientEstablishConnection(ModbusClientContext *context,
   const IpAddr *serverIpAddr, uint16_t serverPort)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	4613      	mov	r3, r2
 8009f38:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //Establish TCP connection
   error = socketConnect(context->socket, serverIpAddr, serverPort);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	88fa      	ldrh	r2, [r7, #6]
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7f9 f80e 	bl	8002f64 <socketConnect>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	82fb      	strh	r3, [r7, #22]
   //Any error to report?
   if(error)
 8009f4c:	8afb      	ldrh	r3, [r7, #22]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <modbusClientEstablishConnection+0x2a>
      return error;
 8009f52:	8afb      	ldrh	r3, [r7, #22]
 8009f54:	e000      	b.n	8009f58 <modbusClientEstablishConnection+0x2c>
         return error;
   }
#endif

   //Successful processing
   return NO_ERROR;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <modbusClientShutdownConnection>:
 * @param[in] context Pointer to the Modbus/TCP client context
 * @return Error code
 **/

error_t modbusClientShutdownConnection(ModbusClientContext *context)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	81fb      	strh	r3, [r7, #14]
      error = tlsShutdown(context->tlsContext);
   }
#endif

   //Check status code
   if(!error)
 8009f6c:	89fb      	ldrh	r3, [r7, #14]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10b      	bne.n	8009f8a <modbusClientShutdownConnection+0x2a>
   {
      //Valid TCP socket?
      if(context->socket != NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <modbusClientShutdownConnection+0x2a>
      {
         //Shutdown TCP connection
         error = socketShutdown(context->socket, SOCKET_SD_BOTH);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	2102      	movs	r1, #2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7f9 f911 	bl	80031a8 <socketShutdown>
 8009f86:	4603      	mov	r3, r0
 8009f88:	81fb      	strh	r3, [r7, #14]
      }
   }

   //Return status code
   return error;
 8009f8a:	89fb      	ldrh	r3, [r7, #14]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <modbusClientCloseConnection>:
 * @brief Close network connection
 * @param[in] context Pointer to the Modbus/TCP client context
 **/

void modbusClientCloseConnection(ModbusClientContext *context)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
      context->tlsContext = NULL;
   }
#endif

   //Close TCP connection
   if(context->socket != NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d007      	beq.n	8009fb4 <modbusClientCloseConnection+0x20>
   {
      socketClose(context->socket);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7f9 f92b 	bl	8003204 <socketClose>
      context->socket = NULL;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	60da      	str	r2, [r3, #12]
   }
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <modbusClientSendData>:
 * @return Error code
 **/

error_t modbusClientSendData(ModbusClientContext *context, const void *data,
   size_t length, size_t *written, uint_t flags)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
   }
   else
#endif
   {
      //Transmit data
      error = socketSend(context->socket, data, length, written, flags);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	68d8      	ldr	r0, [r3, #12]
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	f7f9 f80e 	bl	8002ff8 <socketSend>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8009fe0:	8afb      	ldrh	r3, [r7, #22]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <modbusClientReceiveData>:
 * @return Error code
 **/

error_t modbusClientReceiveData(ModbusClientContext *context, void *data,
   size_t size, size_t *received, uint_t flags)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b088      	sub	sp, #32
 8009fee:	af02      	add	r7, sp, #8
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	603b      	str	r3, [r7, #0]
   }
   else
#endif
   {
      //Receive data
      error = socketReceive(context->socket, data, size, received, flags);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68d8      	ldr	r0, [r3, #12]
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	f7f9 f857 	bl	80030b8 <socketReceive>
 800a00a:	4603      	mov	r3, r0
 800a00c:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800a00e:	8afb      	ldrh	r3, [r7, #22]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <modbusDumpRequestPdu>:
 * @param[in] length Length of the PDU, in bytes
 * @return Error code
 **/

error_t modbusDumpRequestPdu(const void *pdu, size_t length)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]

   //Return error code
   return error;
#else
   //Not implemented
   return NO_ERROR;
 800a022:	2300      	movs	r3, #0
#endif
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <modbusDumpResponsePdu>:
 * @param[in] length Length of the PDU, in bytes
 * @return Error code
 **/

error_t modbusDumpResponsePdu(const void *pdu, size_t length)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]

   //Return error code
   return error;
#else
   //Not implemented
   return NO_ERROR;
 800a03a:	2300      	movs	r3, #0
#endif
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <chapStartAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapStartAuth(PppContext *context)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nStarting CHAP authentication...\r\n");
 800a050:	f7f6 faf6 	bl	8000640 <osSuspendAllTasks>
 800a054:	4b15      	ldr	r3, [pc, #84]	; (800a0ac <chapStartAuth+0x64>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	2223      	movs	r2, #35	; 0x23
 800a05c:	2101      	movs	r1, #1
 800a05e:	4814      	ldr	r0, [pc, #80]	; (800a0b0 <chapStartAuth+0x68>)
 800a060:	f010 fffc 	bl	801b05c <fwrite>
 800a064:	f7f6 faf7 	bl	8000656 <osResumeAllTasks>

   //Check whether the other end of the PPP link is being authenticated
   if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800a06e:	f24c 2223 	movw	r2, #49699	; 0xc223
 800a072:	4293      	cmp	r3, r2
 800a074:	d10a      	bne.n	800a08c <chapStartAuth+0x44>
   {
      //Initialize restart counter
      context->chapFsm.restartCounter = CHAP_MAX_CHALLENGES;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2205      	movs	r2, #5
 800a07a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
      //Send a Challenge packet
      chapSendChallenge(context);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fa82 	bl	800a588 <chapSendChallenge>
      //Switch to the Challenge-Sent state
      context->chapFsm.localState = CHAP_STATE_2_CHALLENGE_SENT;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   }

   //Check whether the other end of the PPP link is the authenticator
   if(context->peerConfig.authProtocol == PPP_PROTOCOL_CHAP)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800a092:	f24c 2223 	movw	r2, #49699	; 0xc223
 800a096:	4293      	cmp	r3, r2
 800a098:	d103      	bne.n	800a0a2 <chapStartAuth+0x5a>
   {
      //Switch to the Started state
      context->chapFsm.peerState = CHAP_STATE_1_STARTED;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   }

   //Successful processing
   return NO_ERROR;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20000058 	.word	0x20000058
 800a0b0:	0801c580 	.word	0x0801c580

0800a0b4 <chapAbortAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapAbortAuth(PppContext *context)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nAborting CHAP authentication...\r\n");
 800a0bc:	f7f6 fac0 	bl	8000640 <osSuspendAllTasks>
 800a0c0:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <chapAbortAuth+0x3c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	2223      	movs	r2, #35	; 0x23
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	480a      	ldr	r0, [pc, #40]	; (800a0f4 <chapAbortAuth+0x40>)
 800a0cc:	f010 ffc6 	bl	801b05c <fwrite>
 800a0d0:	f7f6 fac1 	bl	8000656 <osResumeAllTasks>

   //Abort CHAP authentication process
   context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   context->chapFsm.peerState = CHAP_STATE_0_INITIAL;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

   //Successful processing
   return NO_ERROR;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000058 	.word	0x20000058
 800a0f4:	0801c5a4 	.word	0x0801c5a4

0800a0f8 <chapTick>:
 * @brief CHAP timer handler
 * @param[in] context PPP context
 **/

void chapTick(PppContext *context)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->chapFsm.localState == CHAP_STATE_2_CHALLENGE_SENT)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a106:	2b02      	cmp	r3, #2
 800a108:	d127      	bne.n	800a15a <chapTick+0x62>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 800a10a:	f7f6 fb61 	bl	80007d0 <osGetSystemTime>
 800a10e:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->chapFsm.timestamp) >= CHAP_RESTART_TIMER)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800a11e:	4293      	cmp	r3, r2
 800a120:	d91b      	bls.n	800a15a <chapTick+0x62>
      {
         //Debug message
         TRACE_INFO("\r\nCHAP Timeout event\r\n");
 800a122:	f7f6 fa8d 	bl	8000640 <osSuspendAllTasks>
 800a126:	4b0f      	ldr	r3, [pc, #60]	; (800a164 <chapTick+0x6c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	2216      	movs	r2, #22
 800a12e:	2101      	movs	r1, #1
 800a130:	480d      	ldr	r0, [pc, #52]	; (800a168 <chapTick+0x70>)
 800a132:	f010 ff93 	bl	801b05c <fwrite>
 800a136:	f7f6 fa8e 	bl	8000656 <osResumeAllTasks>

         //Check whether the restart counter is greater than zero
         if(context->chapFsm.restartCounter > 0)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d003      	beq.n	800a14c <chapTick+0x54>
         {
            //Retransmit the Challenge packet
            chapSendChallenge(context);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fa1f 	bl	800a588 <chapSendChallenge>
            //Authentication failed
            lcpClose(context);
         }
      }
   }
}
 800a14a:	e006      	b.n	800a15a <chapTick+0x62>
            context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            lcpClose(context);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 fab3 	bl	800b6c0 <lcpClose>
}
 800a15a:	bf00      	nop
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000058 	.word	0x20000058
 800a168:	0801c5c8 	.word	0x0801c5c8

0800a16c <chapProcessPacket>:
 * @param[in] length Length of the packet, in bytes
 **/

void chapProcessPacket(PppContext *context,
   const PppPacket *packet, size_t length)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming CHAP packet is valid
   if(length < sizeof(PppPacket))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d95a      	bls.n	800a234 <chapProcessPacket+0xc8>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	885b      	ldrh	r3, [r3, #2]
 800a182:	b29b      	uxth	r3, r3
 800a184:	4618      	mov	r0, r3
 800a186:	f7f6 fa0b 	bl	80005a0 <swapInt16>
 800a18a:	4603      	mov	r3, r0
 800a18c:	461a      	mov	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4293      	cmp	r3, r2
 800a192:	d351      	bcc.n	800a238 <chapProcessPacket+0xcc>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	885b      	ldrh	r3, [r3, #2]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7f6 fa00 	bl	80005a0 <swapInt16>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	d94a      	bls.n	800a23c <chapProcessPacket+0xd0>
      return;

   //Save the length of the CHAP packet
   length = ntohs(packet->length);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	885b      	ldrh	r3, [r3, #2]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7f6 f9f7 	bl	80005a0 <swapInt16>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("CHAP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 800a1b6:	f7f6 fa43 	bl	8000640 <osSuspendAllTasks>
 800a1ba:	4b24      	ldr	r3, [pc, #144]	; (800a24c <chapProcessPacket+0xe0>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	4923      	ldr	r1, [pc, #140]	; (800a250 <chapProcessPacket+0xe4>)
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f010 fee9 	bl	801af9c <fiprintf>
 800a1ca:	f7f6 fa44 	bl	8000656 <osResumeAllTasks>
   //Dump CHAP packet contents for debugging purpose
   pppDumpPacket(packet, length, PPP_PROTOCOL_CHAP);

   //CHAP is done at initial link establishment, and could also be
   //requested after link establishment
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d004      	beq.n	800a1e2 <chapProcessPacket+0x76>
      context->pppPhase != PPP_PHASE_NETWORK)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d12e      	bne.n	800a240 <chapProcessPacket+0xd4>
      //Any packets received during any other phase must be silently discarded
      return;
   }

   //Check CHAP code field
   switch(packet->code)
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d82b      	bhi.n	800a244 <chapProcessPacket+0xd8>
 800a1ec:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <chapProcessPacket+0x88>)
 800a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f2:	bf00      	nop
 800a1f4:	0800a205 	.word	0x0800a205
 800a1f8:	0800a211 	.word	0x0800a211
 800a1fc:	0800a21d 	.word	0x0800a21d
 800a200:	0800a229 	.word	0x0800a229
   {
   //Challenge packet?
   case CHAP_CODE_CHALLENGE:
      //Process Challenge packet
      chapProcessChallenge(context, (ChapChallengePacket *) packet, length);
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 f823 	bl	800a254 <chapProcessChallenge>
      break;
 800a20e:	e01a      	b.n	800a246 <chapProcessPacket+0xda>
   //Response packet?
   case CHAP_CODE_RESPONSE:
      //Process Response packet
      chapProcessResponse(context, (ChapResponsePacket *) packet, length);
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	68b9      	ldr	r1, [r7, #8]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f889 	bl	800a32c <chapProcessResponse>
      break;
 800a21a:	e014      	b.n	800a246 <chapProcessPacket+0xda>
   //Success packet?
   case CHAP_CODE_SUCCESS:
      //Process Success packet
      chapProcessSuccess(context, (ChapSuccessPacket *) packet, length);
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	68b9      	ldr	r1, [r7, #8]
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 f927 	bl	800a474 <chapProcessSuccess>
      break;
 800a226:	e00e      	b.n	800a246 <chapProcessPacket+0xda>
   //Failure packet?
   case CHAP_CODE_FAILURE:
      //Process Failure packet
      chapProcessFailure(context, (ChapFailurePacket *) packet, length);
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	68b9      	ldr	r1, [r7, #8]
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f971 	bl	800a514 <chapProcessFailure>
      break;
 800a232:	e008      	b.n	800a246 <chapProcessPacket+0xda>
      return;
 800a234:	bf00      	nop
 800a236:	e006      	b.n	800a246 <chapProcessPacket+0xda>
      return;
 800a238:	bf00      	nop
 800a23a:	e004      	b.n	800a246 <chapProcessPacket+0xda>
      return;
 800a23c:	bf00      	nop
 800a23e:	e002      	b.n	800a246 <chapProcessPacket+0xda>
      return;
 800a240:	bf00      	nop
 800a242:	e000      	b.n	800a246 <chapProcessPacket+0xda>
   //Unknown code field
   default:
      //Silently drop the incoming packet
      break;
 800a244:	bf00      	nop
   }
}
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	20000058 	.word	0x20000058
 800a250:	0801c5e0 	.word	0x0801c5e0

0800a254 <chapProcessChallenge>:
 * @return Error code
 **/

error_t chapProcessChallenge(PppContext *context,
   const ChapChallengePacket *challengePacket, size_t length)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b09e      	sub	sp, #120	; 0x78
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
   size_t n;
   Md5Context md5Context;

   //Debug message
   TRACE_INFO("\r\nCHAP Challenge packet received\r\n");
 800a260:	f7f6 f9ee 	bl	8000640 <osSuspendAllTasks>
 800a264:	4b2f      	ldr	r3, [pc, #188]	; (800a324 <chapProcessChallenge+0xd0>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	2222      	movs	r2, #34	; 0x22
 800a26c:	2101      	movs	r1, #1
 800a26e:	482e      	ldr	r0, [pc, #184]	; (800a328 <chapProcessChallenge+0xd4>)
 800a270:	f010 fef4 	bl	801b05c <fwrite>
 800a274:	f7f6 f9ef 	bl	8000656 <osResumeAllTasks>

   //Make sure the Challenge packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_CHAP)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800a27e:	f24c 2223 	movw	r2, #49699	; 0xc223
 800a282:	4293      	cmp	r3, r2
 800a284:	d001      	beq.n	800a28a <chapProcessChallenge+0x36>
      return ERROR_FAILURE;
 800a286:	2301      	movs	r3, #1
 800a288:	e048      	b.n	800a31c <chapProcessChallenge+0xc8>

   //Check the length of the packet
   if(length < sizeof(ChapChallengePacket))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d801      	bhi.n	800a294 <chapProcessChallenge+0x40>
      return ERROR_INVALID_LENGTH;
 800a290:	23eb      	movs	r3, #235	; 0xeb
 800a292:	e043      	b.n	800a31c <chapProcessChallenge+0xc8>

   //Malformed Challenge packet?
   if(length < (sizeof(ChapChallengePacket) + challengePacket->valueSize))
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	791b      	ldrb	r3, [r3, #4]
 800a298:	3305      	adds	r3, #5
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d201      	bcs.n	800a2a4 <chapProcessChallenge+0x50>
      return ERROR_INVALID_LENGTH;
 800a2a0:	23eb      	movs	r3, #235	; 0xeb
 800a2a2:	e03b      	b.n	800a31c <chapProcessChallenge+0xc8>

   //Save the Identifier field
   context->chapFsm.peerIdentifier = challengePacket->identifier;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	785a      	ldrb	r2, [r3, #1]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

   //Retrieve the length of the password
   n = strlen(context->password);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3340      	adds	r3, #64	; 0x40
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7f5 ff9c 	bl	80001f0 <strlen>
 800a2b8:	6778      	str	r0, [r7, #116]	; 0x74

   //The response value is the one-way hash calculated over a stream
   //of octets consisting of the identifier, followed by the secret,
   //followed by the challenge value
   md5Init(&md5Context);
 800a2ba:	f107 0310 	add.w	r3, r7, #16
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7f6 fabc 	bl	800083c <md5Init>
   md5Update(&md5Context, &challengePacket->identifier, sizeof(uint8_t));
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	1c59      	adds	r1, r3, #1
 800a2c8:	f107 0310 	add.w	r3, r7, #16
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7f6 fadc 	bl	800088c <md5Update>
   md5Update(&md5Context, context->password, n);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800a2da:	f107 0310 	add.w	r3, r7, #16
 800a2de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7f6 fad3 	bl	800088c <md5Update>
   md5Update(&md5Context, challengePacket->value, challengePacket->valueSize);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	1d59      	adds	r1, r3, #5
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	791b      	ldrb	r3, [r3, #4]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f107 0310 	add.w	r3, r7, #16
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7f6 fac9 	bl	800088c <md5Update>
   md5Final(&md5Context, NULL);
 800a2fa:	f107 0310 	add.w	r3, r7, #16
 800a2fe:	2100      	movs	r1, #0
 800a300:	4618      	mov	r0, r3
 800a302:	f7f6 fb0d 	bl	8000920 <md5Final>

   //Whenever a Challenge packet is received, the peer must send a Response packet
   chapSendResponse(context, md5Context.digest);
 800a306:	f107 0310 	add.w	r3, r7, #16
 800a30a:	4619      	mov	r1, r3
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 f9cf 	bl	800a6b0 <chapSendResponse>

   //Switch to the Response-Sent state
   context->chapFsm.peerState = CHAP_STATE_4_RESPONSE_SENT;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2204      	movs	r2, #4
 800a316:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

   //Successful processing
   return NO_ERROR;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3778      	adds	r7, #120	; 0x78
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000058 	.word	0x20000058
 800a328:	0801c608 	.word	0x0801c608

0800a32c <chapProcessResponse>:
 * @return Error code
 **/

error_t chapProcessResponse(PppContext *context,
   const ChapResponsePacket *responsePacket, size_t length)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
   bool_t status;
   const uint8_t *p;

   //Debug message
   TRACE_INFO("\r\nCHAP Response packet received\r\n");
 800a338:	f7f6 f982 	bl	8000640 <osSuspendAllTasks>
 800a33c:	4b4b      	ldr	r3, [pc, #300]	; (800a46c <chapProcessResponse+0x140>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	2221      	movs	r2, #33	; 0x21
 800a344:	2101      	movs	r1, #1
 800a346:	484a      	ldr	r0, [pc, #296]	; (800a470 <chapProcessResponse+0x144>)
 800a348:	f010 fe88 	bl	801b05c <fwrite>
 800a34c:	f7f6 f983 	bl	8000656 <osResumeAllTasks>

   //Make sure the Response packet is acceptable
   if(context->localConfig.authProtocol != PPP_PROTOCOL_CHAP)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800a356:	f24c 2223 	movw	r2, #49699	; 0xc223
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d001      	beq.n	800a362 <chapProcessResponse+0x36>
      return ERROR_FAILURE;
 800a35e:	2301      	movs	r3, #1
 800a360:	e07f      	b.n	800a462 <chapProcessResponse+0x136>

   //Check the length of the packet
   if(length < sizeof(ChapResponsePacket))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b04      	cmp	r3, #4
 800a366:	d801      	bhi.n	800a36c <chapProcessResponse+0x40>
      return ERROR_INVALID_LENGTH;
 800a368:	23eb      	movs	r3, #235	; 0xeb
 800a36a:	e07a      	b.n	800a462 <chapProcessResponse+0x136>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(responsePacket->identifier != context->chapFsm.localIdentifier)
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	785a      	ldrb	r2, [r3, #1]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800a376:	429a      	cmp	r2, r3
 800a378:	d001      	beq.n	800a37e <chapProcessResponse+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800a37a:	23d6      	movs	r3, #214	; 0xd6
 800a37c:	e071      	b.n	800a462 <chapProcessResponse+0x136>

   //Malformed Response packet?
   if(length < (sizeof(ChapResponsePacket) + responsePacket->valueSize))
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	791b      	ldrb	r3, [r3, #4]
 800a382:	3305      	adds	r3, #5
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	429a      	cmp	r2, r3
 800a388:	d201      	bcs.n	800a38e <chapProcessResponse+0x62>
      return ERROR_INVALID_LENGTH;
 800a38a:	23eb      	movs	r3, #235	; 0xeb
 800a38c:	e069      	b.n	800a462 <chapProcessResponse+0x136>

   //The length of the response value depends upon the hash algorithm used
   if(responsePacket->valueSize != MD5_DIGEST_SIZE)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	791b      	ldrb	r3, [r3, #4]
 800a392:	2b10      	cmp	r3, #16
 800a394:	d001      	beq.n	800a39a <chapProcessResponse+0x6e>
      return ERROR_INVALID_LENGTH;
 800a396:	23eb      	movs	r3, #235	; 0xeb
 800a398:	e063      	b.n	800a462 <chapProcessResponse+0x136>

   //Retrieve the response value
   context->chapFsm.response = responsePacket->value;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	1d5a      	adds	r2, r3, #5
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

   //Point to the Name field
   p = responsePacket->value + responsePacket->valueSize;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	3305      	adds	r3, #5
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	7912      	ldrb	r2, [r2, #4]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	613b      	str	r3, [r7, #16]
   //Retrieve the length of the Name field
   length -= sizeof(ChapResponsePacket) + responsePacket->valueSize;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	791b      	ldrb	r3, [r3, #4]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	1a9b      	subs	r3, r3, r2
 800a3ba:	3b05      	subs	r3, #5
 800a3bc:	607b      	str	r3, [r7, #4]

   //Limit the length of the string
   length = MIN(length, PPP_MAX_USERNAME_LEN);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b1f      	cmp	r3, #31
 800a3c2:	bf28      	it	cs
 800a3c4:	231f      	movcs	r3, #31
 800a3c6:	607b      	str	r3, [r7, #4]
   //Copy the name of the peer to be identified
   memcpy(context->peerName, p, length);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3360      	adds	r3, #96	; 0x60
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	6939      	ldr	r1, [r7, #16]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f010 fea5 	bl	801b120 <memcpy>
   //Properly terminate the string with a NULL character
   context->peerName[length] = '\0';
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4413      	add	r3, r2
 800a3dc:	3360      	adds	r3, #96	; 0x60
 800a3de:	2200      	movs	r2, #0
 800a3e0:	701a      	strb	r2, [r3, #0]

   //Invoke user-defined callback, if any
   if(context->settings.authCallback != NULL)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d009      	beq.n	800a3fe <chapProcessResponse+0xd2>
   {
      //Perfom username and password verification
      status = context->settings.authCallback(context->interface,
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	6990      	ldr	r0, [r2, #24]
         context->peerName);
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	3260      	adds	r2, #96	; 0x60
      status = context->settings.authCallback(context->interface,
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	4798      	blx	r3
 800a3fa:	6178      	str	r0, [r7, #20]
 800a3fc:	e001      	b.n	800a402 <chapProcessResponse+0xd6>
   }
   else
   {
      //Unable to perform authentication...
      status = FALSE;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]
   }

   //Whenever a Response packet is received, the authenticator compares the
   //Response Value with its own calculation of the expected value. Based on
   //this comparison, the authenticator must send a Success or Failure packet
   if(status)
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d021      	beq.n	800a44c <chapProcessResponse+0x120>
   {
      //Send a Success packet
      chapSendSuccess(context);
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 f9b9 	bl	800a780 <chapSendSuccess>

      //Switch to the Success-Sent state
      context->chapFsm.localState = CHAP_STATE_6_SUCCESS_SENT;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2206      	movs	r2, #6
 800a412:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      //The user has been successfully authenticated
      context->localAuthDone = TRUE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      //Check whether PPP authentication is complete
      if(context->localAuthDone && context->peerAuthDone)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01b      	beq.n	800a460 <chapProcessResponse+0x134>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d016      	beq.n	800a460 <chapProcessResponse+0x134>
      {
         //Check current PPP phase
         if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d111      	bne.n	800a460 <chapProcessResponse+0x134>
         {
            //Advance to the Network phase
            context->pppPhase = PPP_PHASE_NETWORK;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2203      	movs	r2, #3
 800a440:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
            //IPCP Open event
            ipcpOpen(context);
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 fa33 	bl	800a8b0 <ipcpOpen>
 800a44a:	e009      	b.n	800a460 <chapProcessResponse+0x134>
      }
   }
   else
   {
      //Send a Failure packet
      chapSendFailure(context);
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 f9e3 	bl	800a818 <chapSendFailure>

      //Switch to the Failure-Sent state
      context->chapFsm.localState = CHAP_STATE_8_FAILURE_SENT;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2208      	movs	r2, #8
 800a456:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      //The authenticator should take action to terminate the link
      lcpClose(context);
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f001 f930 	bl	800b6c0 <lcpClose>
   }

   //Successful processing
   return NO_ERROR;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20000058 	.word	0x20000058
 800a470:	0801c62c 	.word	0x0801c62c

0800a474 <chapProcessSuccess>:
 * @return Error code
 **/

error_t chapProcessSuccess(PppContext *context,
   const ChapSuccessPacket *successPacket, size_t length)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nCHAP Success packet received\r\n");
 800a480:	f7f6 f8de 	bl	8000640 <osSuspendAllTasks>
 800a484:	4b21      	ldr	r3, [pc, #132]	; (800a50c <chapProcessSuccess+0x98>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	2220      	movs	r2, #32
 800a48c:	2101      	movs	r1, #1
 800a48e:	4820      	ldr	r0, [pc, #128]	; (800a510 <chapProcessSuccess+0x9c>)
 800a490:	f010 fde4 	bl	801b05c <fwrite>
 800a494:	f7f6 f8df 	bl	8000656 <osResumeAllTasks>

   //Make sure the Success packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_CHAP)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800a49e:	f24c 2223 	movw	r2, #49699	; 0xc223
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d001      	beq.n	800a4aa <chapProcessSuccess+0x36>
      return ERROR_FAILURE;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e02c      	b.n	800a504 <chapProcessSuccess+0x90>

   //Check the length of the packet
   if(length < sizeof(ChapSuccessPacket))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d801      	bhi.n	800a4b4 <chapProcessSuccess+0x40>
      return ERROR_INVALID_LENGTH;
 800a4b0:	23eb      	movs	r3, #235	; 0xeb
 800a4b2:	e027      	b.n	800a504 <chapProcessSuccess+0x90>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(successPacket->identifier != context->chapFsm.peerIdentifier)
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	785a      	ldrb	r2, [r3, #1]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d001      	beq.n	800a4c6 <chapProcessSuccess+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800a4c2:	23d6      	movs	r3, #214	; 0xd6
 800a4c4:	e01e      	b.n	800a504 <chapProcessSuccess+0x90>

   //Switch to the Success-Rcvd state
   context->chapFsm.peerState = CHAP_STATE_7_SUCCESS_RCVD;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2207      	movs	r2, #7
 800a4ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   //The user name has been accepted by the authenticator
   context->peerAuthDone = TRUE;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check whether PPP authentication is complete
   if(context->localAuthDone && context->peerAuthDone)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d010      	beq.n	800a502 <chapProcessSuccess+0x8e>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00b      	beq.n	800a502 <chapProcessSuccess+0x8e>
   {
      //Check current PPP phase
      if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d106      	bne.n	800a502 <chapProcessSuccess+0x8e>
      {
         //Advance to the Network phase
         context->pppPhase = PPP_PHASE_NETWORK;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2203      	movs	r2, #3
 800a4f8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
         //IPCP Open event
         ipcpOpen(context);
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f000 f9d7 	bl	800a8b0 <ipcpOpen>
#endif
      }
   }

   //Successful processing
   return NO_ERROR;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	20000058 	.word	0x20000058
 800a510:	0801c650 	.word	0x0801c650

0800a514 <chapProcessFailure>:
 * @return Error code
 **/

error_t chapProcessFailure(PppContext *context,
   const ChapFailurePacket *failurePacket, size_t length)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nCHAP Failure packet received\r\n");
 800a520:	f7f6 f88e 	bl	8000640 <osSuspendAllTasks>
 800a524:	4b16      	ldr	r3, [pc, #88]	; (800a580 <chapProcessFailure+0x6c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	2220      	movs	r2, #32
 800a52c:	2101      	movs	r1, #1
 800a52e:	4815      	ldr	r0, [pc, #84]	; (800a584 <chapProcessFailure+0x70>)
 800a530:	f010 fd94 	bl	801b05c <fwrite>
 800a534:	f7f6 f88f 	bl	8000656 <osResumeAllTasks>

   //Make sure the Failure packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_CHAP)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800a53e:	f24c 2223 	movw	r2, #49699	; 0xc223
 800a542:	4293      	cmp	r3, r2
 800a544:	d001      	beq.n	800a54a <chapProcessFailure+0x36>
      return ERROR_FAILURE;
 800a546:	2301      	movs	r3, #1
 800a548:	e015      	b.n	800a576 <chapProcessFailure+0x62>

   //Check the length of the packet
   if(length < sizeof(ChapFailurePacket))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d801      	bhi.n	800a554 <chapProcessFailure+0x40>
      return ERROR_INVALID_LENGTH;
 800a550:	23eb      	movs	r3, #235	; 0xeb
 800a552:	e010      	b.n	800a576 <chapProcessFailure+0x62>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(failurePacket->identifier != context->chapFsm.peerIdentifier)
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	785a      	ldrb	r2, [r3, #1]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800a55e:	429a      	cmp	r2, r3
 800a560:	d001      	beq.n	800a566 <chapProcessFailure+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800a562:	23d6      	movs	r3, #214	; 0xd6
 800a564:	e007      	b.n	800a576 <chapProcessFailure+0x62>

   //Switch to the Failure-Rcvd state
   context->chapFsm.peerState = CHAP_STATE_9_FAILURE_RCVD;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2209      	movs	r2, #9
 800a56a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   //Authentication failed
   lcpClose(context);
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f001 f8a6 	bl	800b6c0 <lcpClose>

   //Successful processing
   return NO_ERROR;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	20000058 	.word	0x20000058
 800a584:	0801c674 	.word	0x0801c674

0800a588 <chapSendChallenge>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapSendChallenge(PppContext *context)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   ChapChallengePacket *challengePacket;

   //Retrieve the length of the username
   n = strlen(context->username);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	3320      	adds	r3, #32
 800a594:	4618      	mov	r0, r3
 800a596:	f7f5 fe2b 	bl	80001f0 <strlen>
 800a59a:	61b8      	str	r0, [r7, #24]
   //Calculate the length of the Challenge packet
   length = sizeof(ChapChallengePacket) + MD5_DIGEST_SIZE + n;
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	3315      	adds	r3, #21
 800a5a0:	617b      	str	r3, [r7, #20]

   //Allocate a buffer memory to hold the Challenge packet
   buffer = pppAllocBuffer(length, &offset);
 800a5a2:	f107 0308 	add.w	r3, r7, #8
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6978      	ldr	r0, [r7, #20]
 800a5aa:	f003 fa51 	bl	800da50 <pppAllocBuffer>
 800a5ae:	6138      	str	r0, [r7, #16]
   //Failed to allocate memory?
   if(buffer == NULL)
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <chapSendChallenge+0x32>
      return ERROR_OUT_OF_MEMORY;
 800a5b6:	2364      	movs	r3, #100	; 0x64
 800a5b8:	e072      	b.n	800a6a0 <chapSendChallenge+0x118>

   //Point to the Challenge packet
   challengePacket = netBufferAt(buffer, offset);
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6938      	ldr	r0, [r7, #16]
 800a5c0:	f7f8 f84e 	bl	8002660 <netBufferAt>
 800a5c4:	60f8      	str	r0, [r7, #12]

   //Format packet header
   challengePacket->code = CHAP_CODE_CHALLENGE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	701a      	strb	r2, [r3, #0]
   challengePacket->identifier = ++context->chapFsm.localIdentifier;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	705a      	strb	r2, [r3, #1]
   challengePacket->length = htons(length);
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f5 ffd8 	bl	80005a0 <swapInt16>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	805a      	strh	r2, [r3, #2]
   challengePacket->valueSize = MD5_DIGEST_SIZE;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2210      	movs	r2, #16
 800a5fc:	711a      	strb	r2, [r3, #4]

   //Make sure that the callback function has been registered
   if(context->settings.randCallback != NULL)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <chapSendChallenge+0x92>
   {
      //Generate a random challenge value
      error = context->settings.randCallback(
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
         context->chapFsm.challenge, MD5_DIGEST_SIZE);
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	32e8      	adds	r2, #232	; 0xe8
      error = context->settings.randCallback(
 800a60e:	2110      	movs	r1, #16
 800a610:	4610      	mov	r0, r2
 800a612:	4798      	blx	r3
 800a614:	4603      	mov	r3, r0
 800a616:	83fb      	strh	r3, [r7, #30]
 800a618:	e001      	b.n	800a61e <chapSendChallenge+0x96>
   }
   else
   {
      //Report an error
      error = ERROR_FAILURE;
 800a61a:	2301      	movs	r3, #1
 800a61c:	83fb      	strh	r3, [r7, #30]
   }

   //Check status code
   if(!error)
 800a61e:	8bfb      	ldrh	r3, [r7, #30]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d139      	bne.n	800a698 <chapSendChallenge+0x110>
   {
      //Copy the challenge value
      memcpy(challengePacket->value, context->chapFsm.challenge, MD5_DIGEST_SIZE);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	1d58      	adds	r0, r3, #5
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	33e8      	adds	r3, #232	; 0xe8
 800a62c:	2210      	movs	r2, #16
 800a62e:	4619      	mov	r1, r3
 800a630:	f010 fd76 	bl	801b120 <memcpy>

      //The Name field is one or more octets representing the
      //identification of the system transmitting the packet
      memcpy(challengePacket->value + MD5_DIGEST_SIZE, context->username, n);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3305      	adds	r3, #5
 800a638:	f103 0010 	add.w	r0, r3, #16
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3320      	adds	r3, #32
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	4619      	mov	r1, r3
 800a644:	f010 fd6c 	bl	801b120 <memcpy>

      //Debug message
      TRACE_INFO("Sending CHAP Challenge packet (%" PRIuSIZE " bytes)...\r\n", length);
 800a648:	f7f5 fffa 	bl	8000640 <osSuspendAllTasks>
 800a64c:	4b16      	ldr	r3, [pc, #88]	; (800a6a8 <chapSendChallenge+0x120>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	4915      	ldr	r1, [pc, #84]	; (800a6ac <chapSendChallenge+0x124>)
 800a656:	4618      	mov	r0, r3
 800a658:	f010 fca0 	bl	801af9c <fiprintf>
 800a65c:	f7f5 fffb 	bl	8000656 <osResumeAllTasks>
      //Dump packet contents for debugging purpose
      pppDumpPacket((PppPacket *) challengePacket, length, PPP_PROTOCOL_CHAP);

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6998      	ldr	r0, [r3, #24]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	f24c 2323 	movw	r3, #49699	; 0xc223
 800a66a:	6939      	ldr	r1, [r7, #16]
 800a66c:	f003 f87a 	bl	800d764 <pppSendFrame>
 800a670:	4603      	mov	r3, r0
 800a672:	83fb      	strh	r3, [r7, #30]

      //The restart counter is decremented each time a Challenge packet is sent
      if(context->chapFsm.restartCounter > 0)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d006      	beq.n	800a68c <chapSendChallenge+0x104>
         context->chapFsm.restartCounter--;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a684:	1e5a      	subs	r2, r3, #1
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

      //Save the time at which the packet was sent
      context->chapFsm.timestamp = osGetSystemTime();
 800a68c:	f7f6 f8a0 	bl	80007d0 <osGetSystemTime>
 800a690:	4602      	mov	r2, r0
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800a698:	6938      	ldr	r0, [r7, #16]
 800a69a:	f7f7 ff0a 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800a69e:	8bfb      	ldrh	r3, [r7, #30]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3720      	adds	r7, #32
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20000058 	.word	0x20000058
 800a6ac:	0801c698 	.word	0x0801c698

0800a6b0 <chapSendResponse>:
 * @param[in] value Response value
 * @return Error code
 **/

error_t chapSendResponse(PppContext *context, const uint8_t *value)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
   size_t offset;
   NetBuffer *buffer;
   ChapResponsePacket *responsePacket;

   //Retrieve the length of the username
   n = strlen(context->username);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	3320      	adds	r3, #32
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7f5 fd96 	bl	80001f0 <strlen>
 800a6c4:	61f8      	str	r0, [r7, #28]
   //Calculate the length of the Response packet
   length = sizeof(ChapResponsePacket) + MD5_DIGEST_SIZE + n;
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	3315      	adds	r3, #21
 800a6ca:	61bb      	str	r3, [r7, #24]

   //Allocate a buffer memory to hold the Response packet
   buffer = pppAllocBuffer(length, &offset);
 800a6cc:	f107 0308 	add.w	r3, r7, #8
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	69b8      	ldr	r0, [r7, #24]
 800a6d4:	f003 f9bc 	bl	800da50 <pppAllocBuffer>
 800a6d8:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(buffer == NULL)
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <chapSendResponse+0x34>
      return ERROR_OUT_OF_MEMORY;
 800a6e0:	2364      	movs	r3, #100	; 0x64
 800a6e2:	e044      	b.n	800a76e <chapSendResponse+0xbe>

   //Point to the Response packet
   responsePacket = netBufferAt(buffer, offset);
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6978      	ldr	r0, [r7, #20]
 800a6ea:	f7f7 ffb9 	bl	8002660 <netBufferAt>
 800a6ee:	6138      	str	r0, [r7, #16]

   //Format packet header
   responsePacket->code = CHAP_CODE_RESPONSE;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	701a      	strb	r2, [r3, #0]
   responsePacket->identifier = context->chapFsm.peerIdentifier;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	705a      	strb	r2, [r3, #1]
   responsePacket->length = htons(length);
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	b29b      	uxth	r3, r3
 800a704:	4618      	mov	r0, r3
 800a706:	f7f5 ff4b 	bl	80005a0 <swapInt16>
 800a70a:	4603      	mov	r3, r0
 800a70c:	461a      	mov	r2, r3
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	805a      	strh	r2, [r3, #2]
   responsePacket->valueSize = MD5_DIGEST_SIZE;
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	2210      	movs	r2, #16
 800a716:	711a      	strb	r2, [r3, #4]

   //Copy the Response value
   memcpy(responsePacket->value, value, MD5_DIGEST_SIZE);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	3305      	adds	r3, #5
 800a71c:	2210      	movs	r2, #16
 800a71e:	6839      	ldr	r1, [r7, #0]
 800a720:	4618      	mov	r0, r3
 800a722:	f010 fcfd 	bl	801b120 <memcpy>

   //The Name field is one or more octets representing the
   //identification of the system transmitting the packet
   memcpy(responsePacket->value + MD5_DIGEST_SIZE, context->username, n);
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	3305      	adds	r3, #5
 800a72a:	f103 0010 	add.w	r0, r3, #16
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	3320      	adds	r3, #32
 800a732:	69fa      	ldr	r2, [r7, #28]
 800a734:	4619      	mov	r1, r3
 800a736:	f010 fcf3 	bl	801b120 <memcpy>

   //Debug message
   TRACE_INFO("Sending CHAP Response packet (%" PRIuSIZE " bytes)...\r\n", length);
 800a73a:	f7f5 ff81 	bl	8000640 <osSuspendAllTasks>
 800a73e:	4b0e      	ldr	r3, [pc, #56]	; (800a778 <chapSendResponse+0xc8>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	490d      	ldr	r1, [pc, #52]	; (800a77c <chapSendResponse+0xcc>)
 800a748:	4618      	mov	r0, r3
 800a74a:	f010 fc27 	bl	801af9c <fiprintf>
 800a74e:	f7f5 ff82 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) responsePacket, length, PPP_PROTOCOL_CHAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6998      	ldr	r0, [r3, #24]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	f24c 2323 	movw	r3, #49699	; 0xc223
 800a75c:	6979      	ldr	r1, [r7, #20]
 800a75e:	f003 f801 	bl	800d764 <pppSendFrame>
 800a762:	4603      	mov	r3, r0
 800a764:	81fb      	strh	r3, [r7, #14]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800a766:	6978      	ldr	r0, [r7, #20]
 800a768:	f7f7 fea3 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800a76c:	89fb      	ldrh	r3, [r7, #14]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3720      	adds	r7, #32
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000058 	.word	0x20000058
 800a77c:	0801c6c8 	.word	0x0801c6c8

0800a780 <chapSendSuccess>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapSendSuccess(PppContext *context)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppPacket *successPacket;

   //Retrieve the length of the Success packet
   length = sizeof(PppPacket);
 800a788:	2304      	movs	r3, #4
 800a78a:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Success packet
   buffer = pppAllocBuffer(length, &offset);
 800a78c:	f107 030c 	add.w	r3, r7, #12
 800a790:	4619      	mov	r1, r3
 800a792:	69f8      	ldr	r0, [r7, #28]
 800a794:	f003 f95c 	bl	800da50 <pppAllocBuffer>
 800a798:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <chapSendSuccess+0x24>
      return ERROR_OUT_OF_MEMORY;
 800a7a0:	2364      	movs	r3, #100	; 0x64
 800a7a2:	e030      	b.n	800a806 <chapSendSuccess+0x86>

   //Point to the Success packet
   successPacket = netBufferAt(buffer, offset);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	69b8      	ldr	r0, [r7, #24]
 800a7aa:	f7f7 ff59 	bl	8002660 <netBufferAt>
 800a7ae:	6178      	str	r0, [r7, #20]

   //Format packet header
   successPacket->code = CHAP_CODE_SUCCESS;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	701a      	strb	r2, [r3, #0]
   successPacket->identifier = context->chapFsm.localIdentifier;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	705a      	strb	r2, [r3, #1]
   successPacket->length = htons(length);
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7f5 feeb 	bl	80005a0 <swapInt16>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending CHAP Success packet (%" PRIuSIZE " bytes)...\r\n", length);
 800a7d2:	f7f5 ff35 	bl	8000640 <osSuspendAllTasks>
 800a7d6:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <chapSendSuccess+0x90>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	490d      	ldr	r1, [pc, #52]	; (800a814 <chapSendSuccess+0x94>)
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f010 fbdb 	bl	801af9c <fiprintf>
 800a7e6:	f7f5 ff36 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) successPacket, length, PPP_PROTOCOL_CHAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6998      	ldr	r0, [r3, #24]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	f24c 2323 	movw	r3, #49699	; 0xc223
 800a7f4:	69b9      	ldr	r1, [r7, #24]
 800a7f6:	f002 ffb5 	bl	800d764 <pppSendFrame>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800a7fe:	69b8      	ldr	r0, [r7, #24]
 800a800:	f7f7 fe57 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800a804:	8a7b      	ldrh	r3, [r7, #18]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3720      	adds	r7, #32
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20000058 	.word	0x20000058
 800a814:	0801c6f8 	.word	0x0801c6f8

0800a818 <chapSendFailure>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapSendFailure(PppContext *context)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppPacket *failurePacket;

   //Retrieve the length of the Failure packet
   length = sizeof(PppPacket);
 800a820:	2304      	movs	r3, #4
 800a822:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Failure packet
   buffer = pppAllocBuffer(length, &offset);
 800a824:	f107 030c 	add.w	r3, r7, #12
 800a828:	4619      	mov	r1, r3
 800a82a:	69f8      	ldr	r0, [r7, #28]
 800a82c:	f003 f910 	bl	800da50 <pppAllocBuffer>
 800a830:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <chapSendFailure+0x24>
      return ERROR_OUT_OF_MEMORY;
 800a838:	2364      	movs	r3, #100	; 0x64
 800a83a:	e030      	b.n	800a89e <chapSendFailure+0x86>

   //Point to the Failure packet
   failurePacket = netBufferAt(buffer, offset);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4619      	mov	r1, r3
 800a840:	69b8      	ldr	r0, [r7, #24]
 800a842:	f7f7 ff0d 	bl	8002660 <netBufferAt>
 800a846:	6178      	str	r0, [r7, #20]

   //Format packet header
   failurePacket->code = CHAP_CODE_FAILURE;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2204      	movs	r2, #4
 800a84c:	701a      	strb	r2, [r3, #0]
   failurePacket->identifier = context->chapFsm.localIdentifier;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	705a      	strb	r2, [r3, #1]
   failurePacket->length = htons(length);
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7f5 fe9f 	bl	80005a0 <swapInt16>
 800a862:	4603      	mov	r3, r0
 800a864:	461a      	mov	r2, r3
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending CHAP Failure packet (%" PRIuSIZE " bytes)...\r\n", length);
 800a86a:	f7f5 fee9 	bl	8000640 <osSuspendAllTasks>
 800a86e:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <chapSendFailure+0x90>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	69fa      	ldr	r2, [r7, #28]
 800a876:	490d      	ldr	r1, [pc, #52]	; (800a8ac <chapSendFailure+0x94>)
 800a878:	4618      	mov	r0, r3
 800a87a:	f010 fb8f 	bl	801af9c <fiprintf>
 800a87e:	f7f5 feea 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) failurePacket, length, PPP_PROTOCOL_CHAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6998      	ldr	r0, [r3, #24]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	f24c 2323 	movw	r3, #49699	; 0xc223
 800a88c:	69b9      	ldr	r1, [r7, #24]
 800a88e:	f002 ff69 	bl	800d764 <pppSendFrame>
 800a892:	4603      	mov	r3, r0
 800a894:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800a896:	69b8      	ldr	r0, [r7, #24]
 800a898:	f7f7 fe0b 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800a89c:	8a7b      	ldrh	r3, [r7, #18]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000058 	.word	0x20000058
 800a8ac:	0801c724 	.word	0x0801c724

0800a8b0 <ipcpOpen>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpOpen(PppContext *context)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nIPCP Open event\r\n");
 800a8b8:	f7f5 fec2 	bl	8000640 <osSuspendAllTasks>
 800a8bc:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <ipcpOpen+0x48>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	2213      	movs	r2, #19
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	480d      	ldr	r0, [pc, #52]	; (800a8fc <ipcpOpen+0x4c>)
 800a8c8:	f010 fbc8 	bl	801b05c <fwrite>
 800a8cc:	f7f5 fec3 	bl	8000656 <osResumeAllTasks>

   //The link is administratively available for traffic
   pppOpenEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	33a0      	adds	r3, #160	; 0xa0
 800a8d4:	4a0a      	ldr	r2, [pc, #40]	; (800a900 <ipcpOpen+0x50>)
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f003 f939 	bl	800db50 <pppOpenEvent>
   //The lower layer is ready to carry packets
   pppUpEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	33a0      	adds	r3, #160	; 0xa0
 800a8e2:	4a07      	ldr	r2, [pc, #28]	; (800a900 <ipcpOpen+0x50>)
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f003 f8ca 	bl	800da80 <pppUpEvent>

   //Successful processing
   return NO_ERROR;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20000058 	.word	0x20000058
 800a8fc:	0801c750 	.word	0x0801c750
 800a900:	0801d52c 	.word	0x0801d52c

0800a904 <ipcpClose>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpClose(PppContext *context)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nIPCP Close event\r\n");
 800a90c:	f7f5 fe98 	bl	8000640 <osSuspendAllTasks>
 800a910:	4b0e      	ldr	r3, [pc, #56]	; (800a94c <ipcpClose+0x48>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	2214      	movs	r2, #20
 800a918:	2101      	movs	r1, #1
 800a91a:	480d      	ldr	r0, [pc, #52]	; (800a950 <ipcpClose+0x4c>)
 800a91c:	f010 fb9e 	bl	801b05c <fwrite>
 800a920:	f7f5 fe99 	bl	8000656 <osResumeAllTasks>

   //The lower layer is no longer ready to carry packets
   pppDownEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	33a0      	adds	r3, #160	; 0xa0
 800a928:	4a0a      	ldr	r2, [pc, #40]	; (800a954 <ipcpClose+0x50>)
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f003 f8cb 	bl	800dac8 <pppDownEvent>
   //The link is no longer available for traffic
   pppCloseEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	33a0      	adds	r3, #160	; 0xa0
 800a936:	4a07      	ldr	r2, [pc, #28]	; (800a954 <ipcpClose+0x50>)
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f003 f94c 	bl	800dbd8 <pppCloseEvent>

   //Successful processing
   return NO_ERROR;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000058 	.word	0x20000058
 800a950:	0801c764 	.word	0x0801c764
 800a954:	0801d52c 	.word	0x0801d52c

0800a958 <ipcpTick>:
 *
 * @param[in] context PPP context
 **/

void ipcpTick(PppContext *context)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->ipcpFsm.state >= PPP_STATE_4_CLOSING &&
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a966:	2b03      	cmp	r3, #3
 800a968:	d923      	bls.n	800a9b2 <ipcpTick+0x5a>
      context->ipcpFsm.state <= PPP_STATE_8_ACK_SENT)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   if(context->ipcpFsm.state >= PPP_STATE_4_CLOSING &&
 800a970:	2b08      	cmp	r3, #8
 800a972:	d81e      	bhi.n	800a9b2 <ipcpTick+0x5a>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 800a974:	f7f5 ff2c 	bl	80007d0 <osGetSystemTime>
 800a978:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->ipcpFsm.timestamp) >= PPP_RESTART_TIMER)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800a988:	4293      	cmp	r3, r2
 800a98a:	d912      	bls.n	800a9b2 <ipcpTick+0x5a>
      {
         //Debug message
         TRACE_INFO("\r\nIPCP Timeout event\r\n");
 800a98c:	f7f5 fe58 	bl	8000640 <osSuspendAllTasks>
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <ipcpTick+0x64>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	2216      	movs	r2, #22
 800a998:	2101      	movs	r1, #1
 800a99a:	4809      	ldr	r0, [pc, #36]	; (800a9c0 <ipcpTick+0x68>)
 800a99c:	f010 fb5e 	bl	801b05c <fwrite>
 800a9a0:	f7f5 fe59 	bl	8000656 <osResumeAllTasks>

         //The restart timer is used to retransmit Configure-Request
         //and Terminate-Request packets
         pppTimeoutEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	33a0      	adds	r3, #160	; 0xa0
 800a9a8:	4a06      	ldr	r2, [pc, #24]	; (800a9c4 <ipcpTick+0x6c>)
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f003 f96d 	bl	800dc8c <pppTimeoutEvent>
      }
   }
}
 800a9b2:	bf00      	nop
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20000058 	.word	0x20000058
 800a9c0:	0801c77c 	.word	0x0801c77c
 800a9c4:	0801d52c 	.word	0x0801d52c

0800a9c8 <ipcpProcessPacket>:
 * @param[in]  packet IPCP packet received from the peer
 * @param[in] length Length of the packet, in bytes
 **/

void ipcpProcessPacket(PppContext *context, const PppPacket *packet, size_t length)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming IPCP packet is valid
   if(length < sizeof(PppPacket))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d967      	bls.n	800aaaa <ipcpProcessPacket+0xe2>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	885b      	ldrh	r3, [r3, #2]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7f5 fddd 	bl	80005a0 <swapInt16>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d35e      	bcc.n	800aaae <ipcpProcessPacket+0xe6>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	885b      	ldrh	r3, [r3, #2]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7f5 fdd2 	bl	80005a0 <swapInt16>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d957      	bls.n	800aab2 <ipcpProcessPacket+0xea>
      return;

   //Save the length of the IPCP packet
   length = ntohs(packet->length);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	885b      	ldrh	r3, [r3, #2]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7f5 fdc9 	bl	80005a0 <swapInt16>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("IPCP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 800aa12:	f7f5 fe15 	bl	8000640 <osSuspendAllTasks>
 800aa16:	4b29      	ldr	r3, [pc, #164]	; (800aabc <ipcpProcessPacket+0xf4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	4928      	ldr	r1, [pc, #160]	; (800aac0 <ipcpProcessPacket+0xf8>)
 800aa20:	4618      	mov	r0, r3
 800aa22:	f010 fabb 	bl	801af9c <fiprintf>
 800aa26:	f7f5 fe16 	bl	8000656 <osResumeAllTasks>
   //Dump IPCP packet contents for debugging purpose
   pppDumpPacket(packet, length, PPP_PROTOCOL_IPCP);

   //Check IPCP code field
   switch(packet->code)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	2b06      	cmp	r3, #6
 800aa32:	d834      	bhi.n	800aa9e <ipcpProcessPacket+0xd6>
 800aa34:	a201      	add	r2, pc, #4	; (adr r2, 800aa3c <ipcpProcessPacket+0x74>)
 800aa36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3a:	bf00      	nop
 800aa3c:	0800aa59 	.word	0x0800aa59
 800aa40:	0800aa63 	.word	0x0800aa63
 800aa44:	0800aa6d 	.word	0x0800aa6d
 800aa48:	0800aa77 	.word	0x0800aa77
 800aa4c:	0800aa81 	.word	0x0800aa81
 800aa50:	0800aa8b 	.word	0x0800aa8b
 800aa54:	0800aa95 	.word	0x0800aa95
   {
   //Configure-Request packet?
   case PPP_CODE_CONFIGURE_REQ:
      //Process Configure-Request packet
      ipcpProcessConfigureReq(context, (PppConfigurePacket *) packet);
 800aa58:	68b9      	ldr	r1, [r7, #8]
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f000 f832 	bl	800aac4 <ipcpProcessConfigureReq>
      break;
 800aa60:	e028      	b.n	800aab4 <ipcpProcessPacket+0xec>
   //Configure-Ack packet?
   case PPP_CODE_CONFIGURE_ACK:
      //Process Configure-Ack packet
      ipcpProcessConfigureAck(context, (PppConfigurePacket *) packet);
 800aa62:	68b9      	ldr	r1, [r7, #8]
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 f8b1 	bl	800abcc <ipcpProcessConfigureAck>
      break;
 800aa6a:	e023      	b.n	800aab4 <ipcpProcessPacket+0xec>
   //Configure-Nak packet?
   case PPP_CODE_CONFIGURE_NAK:
      //Process Configure-Nak packet
      ipcpProcessConfigureNak(context, (PppConfigurePacket *) packet);
 800aa6c:	68b9      	ldr	r1, [r7, #8]
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f000 f8d8 	bl	800ac24 <ipcpProcessConfigureNak>
      break;
 800aa74:	e01e      	b.n	800aab4 <ipcpProcessPacket+0xec>
   //Configure-Reject packet?
   case PPP_CODE_CONFIGURE_REJ:
      //Process Configure-Reject packet
      ipcpProcessConfigureReject(context, (PppConfigurePacket *) packet);
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f961 	bl	800ad40 <ipcpProcessConfigureReject>
      break;
 800aa7e:	e019      	b.n	800aab4 <ipcpProcessPacket+0xec>
   //Terminate-Request packet?
   case PPP_CODE_TERMINATE_REQ:
      //Process Terminate-Request packet
      ipcpProcessTerminateReq(context, (PppTerminatePacket *) packet);
 800aa80:	68b9      	ldr	r1, [r7, #8]
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 f9cc 	bl	800ae20 <ipcpProcessTerminateReq>
      break;
 800aa88:	e014      	b.n	800aab4 <ipcpProcessPacket+0xec>
   //Terminate-Ack packet?
   case PPP_CODE_TERMINATE_ACK:
      //Process Terminate-Ack packet
      ipcpProcessTerminateAck(context, (PppTerminatePacket *) packet);
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 f9eb 	bl	800ae68 <ipcpProcessTerminateAck>
      break;
 800aa92:	e00f      	b.n	800aab4 <ipcpProcessPacket+0xec>
   //Code-Reject packet?
   case PPP_CODE_CODE_REJ:
      //Process Code-Reject packet
      ipcpProcessCodeRej(context, (PppCodeRejPacket *) packet);
 800aa94:	68b9      	ldr	r1, [r7, #8]
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 fa0a 	bl	800aeb0 <ipcpProcessCodeRej>
      break;
 800aa9c:	e00a      	b.n	800aab4 <ipcpProcessPacket+0xec>
   //Unknown code field
   default:
      //The packet is un-interpretable
      ipcpProcessUnknownCode(context, packet);
 800aa9e:	68b9      	ldr	r1, [r7, #8]
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f000 fa4b 	bl	800af3c <ipcpProcessUnknownCode>
      break;
 800aaa6:	bf00      	nop
 800aaa8:	e004      	b.n	800aab4 <ipcpProcessPacket+0xec>
      return;
 800aaaa:	bf00      	nop
 800aaac:	e002      	b.n	800aab4 <ipcpProcessPacket+0xec>
      return;
 800aaae:	bf00      	nop
 800aab0:	e000      	b.n	800aab4 <ipcpProcessPacket+0xec>
      return;
 800aab2:	bf00      	nop
   }
}
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000058 	.word	0x20000058
 800aac0:	0801c794 	.word	0x0801c794

0800aac4 <ipcpProcessConfigureReq>:
 * @return Error code
 **/

error_t ipcpProcessConfigureReq(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08a      	sub	sp, #40	; 0x28
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
   bool_t notRecognizable;
   bool_t notAcceptable;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Configure-Request event\r\n");
 800aace:	f7f5 fdb7 	bl	8000640 <osSuspendAllTasks>
 800aad2:	4b3b      	ldr	r3, [pc, #236]	; (800abc0 <ipcpProcessConfigureReq+0xfc>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	2228      	movs	r2, #40	; 0x28
 800aada:	2101      	movs	r1, #1
 800aadc:	4839      	ldr	r0, [pc, #228]	; (800abc4 <ipcpProcessConfigureReq+0x100>)
 800aade:	f010 fabd 	bl	801b05c <fwrite>
 800aae2:	f7f5 fdb8 	bl	8000656 <osResumeAllTasks>

   //Initialize variables
   error = NO_ERROR;
 800aae6:	2300      	movs	r3, #0
 800aae8:	83fb      	strh	r3, [r7, #30]
   notRecognizable = FALSE;
 800aaea:	2300      	movs	r3, #0
 800aaec:	617b      	str	r3, [r7, #20]
   notAcceptable = FALSE;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	613b      	str	r3, [r7, #16]

   //Retrieve the length of the option list
   length = ntohs(configureReqPacket->length) - sizeof(PppConfigurePacket);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	885b      	ldrh	r3, [r3, #2]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7f5 fd51 	bl	80005a0 <swapInt16>
 800aafe:	4603      	mov	r3, r0
 800ab00:	3b04      	subs	r3, #4
 800ab02:	61bb      	str	r3, [r7, #24]
   //Point to the first option
   option = (PppOption *) configureReqPacket->options;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	3304      	adds	r3, #4
 800ab08:	60fb      	str	r3, [r7, #12]

   //Parse configuration options
   while(length > 0)
 800ab0a:	e026      	b.n	800ab5a <ipcpProcessConfigureReq+0x96>
   {
      //Parse current option
      error = ipcpParseOption(context, option, length, NULL);
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	69ba      	ldr	r2, [r7, #24]
 800ab10:	68f9      	ldr	r1, [r7, #12]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fd24 	bl	800b560 <ipcpParseOption>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	83fb      	strh	r3, [r7, #30]

      //Any error to report?
      if(error == ERROR_INVALID_TYPE)
 800ab1c:	8bfb      	ldrh	r3, [r7, #30]
 800ab1e:	2bef      	cmp	r3, #239	; 0xef
 800ab20:	d104      	bne.n	800ab2c <ipcpProcessConfigureReq+0x68>
      {
         //Option not recognizable
         notRecognizable = TRUE;
 800ab22:	2301      	movs	r3, #1
 800ab24:	617b      	str	r3, [r7, #20]
         //Catch error
         error = NO_ERROR;
 800ab26:	2300      	movs	r3, #0
 800ab28:	83fb      	strh	r3, [r7, #30]
 800ab2a:	e00a      	b.n	800ab42 <ipcpProcessConfigureReq+0x7e>
      }
      else if(error == ERROR_INVALID_VALUE)
 800ab2c:	8bfb      	ldrh	r3, [r7, #30]
 800ab2e:	2bf0      	cmp	r3, #240	; 0xf0
 800ab30:	d104      	bne.n	800ab3c <ipcpProcessConfigureReq+0x78>
      {
         //Option not acceptable for configuration
         notAcceptable = TRUE;
 800ab32:	2301      	movs	r3, #1
 800ab34:	613b      	str	r3, [r7, #16]
         //Catch error
         error = NO_ERROR;
 800ab36:	2300      	movs	r3, #0
 800ab38:	83fb      	strh	r3, [r7, #30]
 800ab3a:	e002      	b.n	800ab42 <ipcpProcessConfigureReq+0x7e>
      }
      else if(error)
 800ab3c:	8bfb      	ldrh	r3, [r7, #30]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10f      	bne.n	800ab62 <ipcpProcessConfigureReq+0x9e>
         //Malformed Configure-Request packet
         break;
      }

      //Remaining bytes to process
      length -= option->length;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	461a      	mov	r2, r3
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	1a9b      	subs	r3, r3, r2
 800ab4c:	61bb      	str	r3, [r7, #24]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	785b      	ldrb	r3, [r3, #1]
 800ab52:	461a      	mov	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4413      	add	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]
   while(length > 0)
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1d5      	bne.n	800ab0c <ipcpProcessConfigureReq+0x48>
 800ab60:	e000      	b.n	800ab64 <ipcpProcessConfigureReq+0xa0>
         break;
 800ab62:	bf00      	nop
   }

   //Valid Configure-Request packet received from the peer?
   if(!error)
 800ab64:	8bfb      	ldrh	r3, [r7, #30]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d125      	bne.n	800abb6 <ipcpProcessConfigureReq+0xf2>
   {
      //Check flags
      if(notRecognizable)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00a      	beq.n	800ab86 <ipcpProcessConfigureReq+0xc2>
      {
         //If some configuration options received in the Configure-Request are not
         //recognizable or not acceptable for negotiation, then the implementation
         //must transmit a Configure-Reject
         pppRcvConfigureReqEvent(context, &context->ipcpFsm, &ipcpCallbacks,
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800ab76:	2304      	movs	r3, #4
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	4a12      	ldr	r2, [pc, #72]	; (800abc8 <ipcpProcessConfigureReq+0x104>)
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f003 f8d6 	bl	800dd30 <pppRcvConfigureReqEvent>
 800ab84:	e017      	b.n	800abb6 <ipcpProcessConfigureReq+0xf2>
            configureReqPacket, PPP_CODE_CONFIGURE_REJ);
      }
      else if(notAcceptable)
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00a      	beq.n	800aba2 <ipcpProcessConfigureReq+0xde>
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         pppRcvConfigureReqEvent(context, &context->ipcpFsm, &ipcpCallbacks,
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800ab92:	2303      	movs	r3, #3
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	4a0b      	ldr	r2, [pc, #44]	; (800abc8 <ipcpProcessConfigureReq+0x104>)
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f003 f8c8 	bl	800dd30 <pppRcvConfigureReqEvent>
 800aba0:	e009      	b.n	800abb6 <ipcpProcessConfigureReq+0xf2>
      else
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         pppRcvConfigureReqEvent(context, &context->ipcpFsm, &ipcpCallbacks,
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800aba8:	2302      	movs	r3, #2
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	4a06      	ldr	r2, [pc, #24]	; (800abc8 <ipcpProcessConfigureReq+0x104>)
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f003 f8bd 	bl	800dd30 <pppRcvConfigureReqEvent>
            configureReqPacket, PPP_CODE_CONFIGURE_ACK);
      }
   }

   //Return status code
   return error;
 800abb6:	8bfb      	ldrh	r3, [r7, #30]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3720      	adds	r7, #32
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	20000058 	.word	0x20000058
 800abc4:	0801c7bc 	.word	0x0801c7bc
 800abc8:	0801d52c 	.word	0x0801d52c

0800abcc <ipcpProcessConfigureAck>:
 * @return Error code
 **/

error_t ipcpProcessConfigureAck(PppContext *context,
   const PppConfigurePacket *configureAckPacket)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Configure-Ack event\r\n");
 800abd6:	f7f5 fd33 	bl	8000640 <osSuspendAllTasks>
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <ipcpProcessConfigureAck+0x4c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2224      	movs	r2, #36	; 0x24
 800abe2:	2101      	movs	r1, #1
 800abe4:	480d      	ldr	r0, [pc, #52]	; (800ac1c <ipcpProcessConfigureAck+0x50>)
 800abe6:	f010 fa39 	bl	801b05c <fwrite>
 800abea:	f7f5 fd34 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureAckPacket->identifier != context->ipcpFsm.identifier)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	785a      	ldrb	r2, [r3, #1]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d001      	beq.n	800ac00 <ipcpProcessConfigureAck+0x34>
      return ERROR_WRONG_IDENTIFIER;
 800abfc:	23d6      	movs	r3, #214	; 0xd6
 800abfe:	e007      	b.n	800ac10 <ipcpProcessConfigureAck+0x44>

   //A valid Configure-Ack packet has been received from the peer
   pppRcvConfigureAckEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	33a0      	adds	r3, #160	; 0xa0
 800ac04:	4a06      	ldr	r2, [pc, #24]	; (800ac20 <ipcpProcessConfigureAck+0x54>)
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f003 f9b7 	bl	800df7c <pppRcvConfigureAckEvent>

   //Successful processing
   return NO_ERROR;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	20000058 	.word	0x20000058
 800ac1c:	0801c7e8 	.word	0x0801c7e8
 800ac20:	0801d52c 	.word	0x0801d52c

0800ac24 <ipcpProcessConfigureNak>:
 * @return Error code
 **/

error_t ipcpProcessConfigureNak(PppContext *context,
   const PppConfigurePacket *configureNakPacket)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b088      	sub	sp, #32
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("IPCP Receive-Configure-Nak event\r\n");
 800ac2e:	f7f5 fd07 	bl	8000640 <osSuspendAllTasks>
 800ac32:	4b40      	ldr	r3, [pc, #256]	; (800ad34 <ipcpProcessConfigureNak+0x110>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	2222      	movs	r2, #34	; 0x22
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	483e      	ldr	r0, [pc, #248]	; (800ad38 <ipcpProcessConfigureNak+0x114>)
 800ac3e:	f010 fa0d 	bl	801b05c <fwrite>
 800ac42:	f7f5 fd08 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureNakPacket->identifier != context->ipcpFsm.identifier)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	785a      	ldrb	r2, [r3, #1]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d001      	beq.n	800ac58 <ipcpProcessConfigureNak+0x34>
      return ERROR_WRONG_IDENTIFIER;
 800ac54:	23d6      	movs	r3, #214	; 0xd6
 800ac56:	e069      	b.n	800ad2c <ipcpProcessConfigureNak+0x108>

   //Retrieve the length of the option list
   length = ntohs(configureNakPacket->length) - sizeof(PppConfigurePacket);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	885b      	ldrh	r3, [r3, #2]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f5 fc9e 	bl	80005a0 <swapInt16>
 800ac64:	4603      	mov	r3, r0
 800ac66:	3b04      	subs	r3, #4
 800ac68:	61fb      	str	r3, [r7, #28]
   //Point to the first option
   option = (PppOption *) configureNakPacket->options;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	61bb      	str	r3, [r7, #24]

   //Parse configuration options
   while(length > 0)
 800ac70:	e051      	b.n	800ad16 <ipcpProcessConfigureNak+0xf2>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	785b      	ldrb	r3, [r3, #1]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d801      	bhi.n	800ac7e <ipcpProcessConfigureNak+0x5a>
         return ERROR_INVALID_LENGTH;
 800ac7a:	23eb      	movs	r3, #235	; 0xeb
 800ac7c:	e056      	b.n	800ad2c <ipcpProcessConfigureNak+0x108>
      if(option->length > length)
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	785b      	ldrb	r3, [r3, #1]
 800ac82:	461a      	mov	r2, r3
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d201      	bcs.n	800ac8e <ipcpProcessConfigureNak+0x6a>
         return ERROR_INVALID_LENGTH;
 800ac8a:	23eb      	movs	r3, #235	; 0xeb
 800ac8c:	e04e      	b.n	800ad2c <ipcpProcessConfigureNak+0x108>

      //IP-Address option?
      if(option->type == IPCP_OPTION_IP_ADDRESS)
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b03      	cmp	r3, #3
 800ac94:	d10e      	bne.n	800acb4 <ipcpProcessConfigureNak+0x90>
      {
         //Cast option
         IpcpIpAddressOption *ipAddressOption = (IpcpIpAddressOption *) option;
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	60fb      	str	r3, [r7, #12]

         //Check option length
         if(ipAddressOption->length != sizeof(IpcpIpAddressOption))
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	785b      	ldrb	r3, [r3, #1]
 800ac9e:	2b06      	cmp	r3, #6
 800aca0:	d001      	beq.n	800aca6 <ipcpProcessConfigureNak+0x82>
            return ERROR_INVALID_LENGTH;
 800aca2:	23eb      	movs	r3, #235	; 0xeb
 800aca4:	e042      	b.n	800ad2c <ipcpProcessConfigureNak+0x108>

         //Save IP address
         context->localConfig.ipAddr = ipAddressOption->ipAddr;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800acb2:	e024      	b.n	800acfe <ipcpProcessConfigureNak+0xda>
      }
      //Primary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_PRIMARY_DNS)
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b81      	cmp	r3, #129	; 0x81
 800acba:	d10e      	bne.n	800acda <ipcpProcessConfigureNak+0xb6>
      {
         //Cast option
         IpcpPrimaryDnsOption *primaryDns = (IpcpPrimaryDnsOption *) option;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	613b      	str	r3, [r7, #16]

         //Check option length
         if(primaryDns->length != sizeof(IpcpPrimaryDnsOption))
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	785b      	ldrb	r3, [r3, #1]
 800acc4:	2b06      	cmp	r3, #6
 800acc6:	d001      	beq.n	800accc <ipcpProcessConfigureNak+0xa8>
            return ERROR_INVALID_LENGTH;
 800acc8:	23eb      	movs	r3, #235	; 0xeb
 800acca:	e02f      	b.n	800ad2c <ipcpProcessConfigureNak+0x108>

         //Save primary DNS server address
         context->localConfig.primaryDns = primaryDns->ipAddr;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800acd8:	e011      	b.n	800acfe <ipcpProcessConfigureNak+0xda>
      }
      //Secondary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_SECONDARY_DNS)
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b83      	cmp	r3, #131	; 0x83
 800ace0:	d10d      	bne.n	800acfe <ipcpProcessConfigureNak+0xda>
      {
         //Cast option
         IpcpSecondaryDnsOption *secondaryDns = (IpcpSecondaryDnsOption *) option;
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	617b      	str	r3, [r7, #20]

         //Check option length
         if(secondaryDns->length != sizeof(IpcpSecondaryDnsOption))
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	785b      	ldrb	r3, [r3, #1]
 800acea:	2b06      	cmp	r3, #6
 800acec:	d001      	beq.n	800acf2 <ipcpProcessConfigureNak+0xce>
            return ERROR_INVALID_LENGTH;
 800acee:	23eb      	movs	r3, #235	; 0xeb
 800acf0:	e01c      	b.n	800ad2c <ipcpProcessConfigureNak+0x108>

         //Save secondary DNS server address
         context->localConfig.secondaryDns = secondaryDns->ipAddr;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
      }

      //Remaining bytes to process
      length -= option->length;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	785b      	ldrb	r3, [r3, #1]
 800ad02:	461a      	mov	r2, r3
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	1a9b      	subs	r3, r3, r2
 800ad08:	61fb      	str	r3, [r7, #28]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	785b      	ldrb	r3, [r3, #1]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	4413      	add	r3, r2
 800ad14:	61bb      	str	r3, [r7, #24]
   while(length > 0)
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1aa      	bne.n	800ac72 <ipcpProcessConfigureNak+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	33a0      	adds	r3, #160	; 0xa0
 800ad20:	4a06      	ldr	r2, [pc, #24]	; (800ad3c <ipcpProcessConfigureNak+0x118>)
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f003 f97f 	bl	800e028 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3720      	adds	r7, #32
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20000058 	.word	0x20000058
 800ad38:	0801c810 	.word	0x0801c810
 800ad3c:	0801d52c 	.word	0x0801d52c

0800ad40 <ipcpProcessConfigureReject>:
 * @return Error code
 **/

error_t ipcpProcessConfigureReject(PppContext *context,
   const PppConfigurePacket *configureRejPacket)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Configure-Reject event\r\n");
 800ad4a:	f7f5 fc79 	bl	8000640 <osSuspendAllTasks>
 800ad4e:	4b31      	ldr	r3, [pc, #196]	; (800ae14 <ipcpProcessConfigureReject+0xd4>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	2227      	movs	r2, #39	; 0x27
 800ad56:	2101      	movs	r1, #1
 800ad58:	482f      	ldr	r0, [pc, #188]	; (800ae18 <ipcpProcessConfigureReject+0xd8>)
 800ad5a:	f010 f97f 	bl	801b05c <fwrite>
 800ad5e:	f7f5 fc7a 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureRejPacket->identifier != context->ipcpFsm.identifier)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	785a      	ldrb	r2, [r3, #1]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d001      	beq.n	800ad74 <ipcpProcessConfigureReject+0x34>
      return ERROR_WRONG_IDENTIFIER;
 800ad70:	23d6      	movs	r3, #214	; 0xd6
 800ad72:	e04b      	b.n	800ae0c <ipcpProcessConfigureReject+0xcc>

   //Retrieve the length of the option list
   length = ntohs(configureRejPacket->length) - sizeof(PppConfigurePacket);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	885b      	ldrh	r3, [r3, #2]
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7f5 fc10 	bl	80005a0 <swapInt16>
 800ad80:	4603      	mov	r3, r0
 800ad82:	3b04      	subs	r3, #4
 800ad84:	60fb      	str	r3, [r7, #12]
   //Point to the first option
   option = (PppOption *) configureRejPacket->options;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	3304      	adds	r3, #4
 800ad8a:	60bb      	str	r3, [r7, #8]

   //Parse configuration options
   while(length > 0)
 800ad8c:	e033      	b.n	800adf6 <ipcpProcessConfigureReject+0xb6>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	785b      	ldrb	r3, [r3, #1]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d801      	bhi.n	800ad9a <ipcpProcessConfigureReject+0x5a>
         return ERROR_INVALID_LENGTH;
 800ad96:	23eb      	movs	r3, #235	; 0xeb
 800ad98:	e038      	b.n	800ae0c <ipcpProcessConfigureReject+0xcc>
      if(option->length > length)
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	785b      	ldrb	r3, [r3, #1]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d201      	bcs.n	800adaa <ipcpProcessConfigureReject+0x6a>
         return ERROR_INVALID_LENGTH;
 800ada6:	23eb      	movs	r3, #235	; 0xeb
 800ada8:	e030      	b.n	800ae0c <ipcpProcessConfigureReject+0xcc>

      //IP-Address option?
      if(option->type == IPCP_OPTION_IP_ADDRESS)
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d104      	bne.n	800adbc <ipcpProcessConfigureReject+0x7c>
      {
         //The option is not recognized by the peer
         context->localConfig.ipAddrRejected = TRUE;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800adba:	e010      	b.n	800adde <ipcpProcessConfigureReject+0x9e>
      }
      //Primary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_PRIMARY_DNS)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b81      	cmp	r3, #129	; 0x81
 800adc2:	d104      	bne.n	800adce <ipcpProcessConfigureReject+0x8e>
      {
         //The option is not recognized by the peer
         context->localConfig.primaryDnsRejected = TRUE;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800adcc:	e007      	b.n	800adde <ipcpProcessConfigureReject+0x9e>
      }
      //Secondary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_SECONDARY_DNS)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b83      	cmp	r3, #131	; 0x83
 800add4:	d103      	bne.n	800adde <ipcpProcessConfigureReject+0x9e>
      {
         //The option is not recognized by the peer
         context->localConfig.secondaryDnsRejected = TRUE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
      }

      //Remaining bytes to process
      length -= option->length;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	785b      	ldrb	r3, [r3, #1]
 800ade2:	461a      	mov	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	1a9b      	subs	r3, r3, r2
 800ade8:	60fb      	str	r3, [r7, #12]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	785b      	ldrb	r3, [r3, #1]
 800adee:	461a      	mov	r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4413      	add	r3, r2
 800adf4:	60bb      	str	r3, [r7, #8]
   while(length > 0)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1c8      	bne.n	800ad8e <ipcpProcessConfigureReject+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	33a0      	adds	r3, #160	; 0xa0
 800ae00:	4a06      	ldr	r2, [pc, #24]	; (800ae1c <ipcpProcessConfigureReject+0xdc>)
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f003 f90f 	bl	800e028 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	20000058 	.word	0x20000058
 800ae18:	0801c834 	.word	0x0801c834
 800ae1c:	0801d52c 	.word	0x0801d52c

0800ae20 <ipcpProcessTerminateReq>:
 * @return Error code
 **/

error_t ipcpProcessTerminateReq(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Terminate-Request event\r\n");
 800ae2a:	f7f5 fc09 	bl	8000640 <osSuspendAllTasks>
 800ae2e:	4b0b      	ldr	r3, [pc, #44]	; (800ae5c <ipcpProcessTerminateReq+0x3c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	2228      	movs	r2, #40	; 0x28
 800ae36:	2101      	movs	r1, #1
 800ae38:	4809      	ldr	r0, [pc, #36]	; (800ae60 <ipcpProcessTerminateReq+0x40>)
 800ae3a:	f010 f90f 	bl	801b05c <fwrite>
 800ae3e:	f7f5 fc0a 	bl	8000656 <osResumeAllTasks>

   //The Terminate-Request indicates the desire of the peer to close the connection
   pppRcvTerminateReqEvent(context, &context->ipcpFsm,
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	4a06      	ldr	r2, [pc, #24]	; (800ae64 <ipcpProcessTerminateReq+0x44>)
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f003 f93f 	bl	800e0d0 <pppRcvTerminateReqEvent>
      &ipcpCallbacks, terminateReqPacket);

   //Successful processing
   return NO_ERROR;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	20000058 	.word	0x20000058
 800ae60:	0801c85c 	.word	0x0801c85c
 800ae64:	0801d52c 	.word	0x0801d52c

0800ae68 <ipcpProcessTerminateAck>:
 * @return Error code
 **/

error_t ipcpProcessTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateAckPacket)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Terminate-Ack event\r\n");
 800ae72:	f7f5 fbe5 	bl	8000640 <osSuspendAllTasks>
 800ae76:	4b0b      	ldr	r3, [pc, #44]	; (800aea4 <ipcpProcessTerminateAck+0x3c>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	2224      	movs	r2, #36	; 0x24
 800ae7e:	2101      	movs	r1, #1
 800ae80:	4809      	ldr	r0, [pc, #36]	; (800aea8 <ipcpProcessTerminateAck+0x40>)
 800ae82:	f010 f8eb 	bl	801b05c <fwrite>
 800ae86:	f7f5 fbe6 	bl	8000656 <osResumeAllTasks>

   //The Terminate-Ack packet is usually a response to a Terminate-Request
   //packet. This packet may also indicate that the peer is in Closed or
   //Stopped states, and serves to re-synchronize the link configuration
   pppRcvTerminateAckEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	33a0      	adds	r3, #160	; 0xa0
 800ae8e:	4a07      	ldr	r2, [pc, #28]	; (800aeac <ipcpProcessTerminateAck+0x44>)
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f003 f964 	bl	800e160 <pppRcvTerminateAckEvent>

   //Successful processing
   return NO_ERROR;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20000058 	.word	0x20000058
 800aea8:	0801c888 	.word	0x0801c888
 800aeac:	0801d52c 	.word	0x0801d52c

0800aeb0 <ipcpProcessCodeRej>:
 * @return Error code
 **/

error_t ipcpProcessCodeRej(PppContext *context,
   const PppCodeRejPacket *codeRejPacket)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
   size_t length;
   PppPacket *packet;

   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Code-Reject event\r\n");
 800aeba:	f7f5 fbc1 	bl	8000640 <osSuspendAllTasks>
 800aebe:	4b1c      	ldr	r3, [pc, #112]	; (800af30 <ipcpProcessCodeRej+0x80>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	2222      	movs	r2, #34	; 0x22
 800aec6:	2101      	movs	r1, #1
 800aec8:	481a      	ldr	r0, [pc, #104]	; (800af34 <ipcpProcessCodeRej+0x84>)
 800aeca:	f010 f8c7 	bl	801b05c <fwrite>
 800aece:	f7f5 fbc2 	bl	8000656 <osResumeAllTasks>

   //Point to the rejected packet
   packet = (PppPacket *) codeRejPacket->rejectedPacket;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	3304      	adds	r3, #4
 800aed6:	60fb      	str	r3, [r7, #12]
   //Retrieve the length of the rejected packet
   length = ntohs(codeRejPacket->length) - sizeof(PppCodeRejPacket);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	885b      	ldrh	r3, [r3, #2]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	4618      	mov	r0, r3
 800aee0:	f7f5 fb5e 	bl	80005a0 <swapInt16>
 800aee4:	4603      	mov	r3, r0
 800aee6:	3b04      	subs	r3, #4
 800aee8:	60bb      	str	r3, [r7, #8]

   //Make sure the length of the rejected packet is valid
   if(length < sizeof(PppPacket))
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d801      	bhi.n	800aef4 <ipcpProcessCodeRej+0x44>
      return ERROR_INVALID_LENGTH;
 800aef0:	23eb      	movs	r3, #235	; 0xeb
 800aef2:	e019      	b.n	800af28 <ipcpProcessCodeRej+0x78>

   //Check whether the rejected value is acceptable or catastrophic
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <ipcpProcessCodeRej+0x54>
      packet->code > PPP_CODE_CODE_REJ)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	781b      	ldrb	r3, [r3, #0]
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 800af00:	2b07      	cmp	r3, #7
 800af02:	d908      	bls.n	800af16 <ipcpProcessCodeRej+0x66>
   {
      //The RXJ+ event arises when the rejected value is acceptable, such
      //as a Code-Reject of an extended code, or a Protocol-Reject of a
      //NCP. These are within the scope of normal operation
      pppRcvCodeRejEvent(context, &context->ipcpFsm, &ipcpCallbacks, TRUE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800af0a:	2301      	movs	r3, #1
 800af0c:	4a0a      	ldr	r2, [pc, #40]	; (800af38 <ipcpProcessCodeRej+0x88>)
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f003 f986 	bl	800e220 <pppRcvCodeRejEvent>
 800af14:	e007      	b.n	800af26 <ipcpProcessCodeRej+0x76>
   else
   {
      //The RXJ- event arises when the rejected value is catastrophic, such
      //as a Code-Reject of Configure-Request! This event communicates an
      //unrecoverable error that terminates the connection
      pppRcvCodeRejEvent(context, &context->ipcpFsm, &ipcpCallbacks, FALSE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800af1c:	2300      	movs	r3, #0
 800af1e:	4a06      	ldr	r2, [pc, #24]	; (800af38 <ipcpProcessCodeRej+0x88>)
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f003 f97d 	bl	800e220 <pppRcvCodeRejEvent>
   }

   //Successful processing
   return NO_ERROR;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	20000058 	.word	0x20000058
 800af34:	0801c8b0 	.word	0x0801c8b0
 800af38:	0801d52c 	.word	0x0801d52c

0800af3c <ipcpProcessUnknownCode>:
 * @return Error code
 **/

error_t ipcpProcessUnknownCode(PppContext *context,
   const PppPacket *packet)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Unknown-Code event\r\n");
 800af46:	f7f5 fb7b 	bl	8000640 <osSuspendAllTasks>
 800af4a:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <ipcpProcessUnknownCode+0x3c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	2223      	movs	r2, #35	; 0x23
 800af52:	2101      	movs	r1, #1
 800af54:	4809      	ldr	r0, [pc, #36]	; (800af7c <ipcpProcessUnknownCode+0x40>)
 800af56:	f010 f881 	bl	801b05c <fwrite>
 800af5a:	f7f5 fb7c 	bl	8000656 <osResumeAllTasks>

   //This event occurs when an un-interpretable packet is received from
   //the peer. A Code-Reject packet is sent in response
   pppRcvUnknownCodeEvent(context, &context->ipcpFsm, &ipcpCallbacks, packet);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	4a06      	ldr	r2, [pc, #24]	; (800af80 <ipcpProcessUnknownCode+0x44>)
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f003 f941 	bl	800e1f0 <pppRcvUnknownCodeEvent>

   //Successful processing
   return NO_ERROR;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	20000058 	.word	0x20000058
 800af7c:	0801c8d4 	.word	0x0801c8d4
 800af80:	0801d52c 	.word	0x0801d52c

0800af84 <ipcpThisLayerUp>:
 * @brief This-Layer-Up callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerUp(PppContext *context)
{
 800af84:	b590      	push	{r4, r7, lr}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Debug message
   TRACE_INFO("IPCP This-Layer-Up callback\r\n");
 800af8c:	f7f5 fb58 	bl	8000640 <osSuspendAllTasks>
 800af90:	4b48      	ldr	r3, [pc, #288]	; (800b0b4 <ipcpThisLayerUp+0x130>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	221d      	movs	r2, #29
 800af98:	2101      	movs	r1, #1
 800af9a:	4847      	ldr	r0, [pc, #284]	; (800b0b8 <ipcpThisLayerUp+0x134>)
 800af9c:	f010 f85e 	bl	801b05c <fwrite>
 800afa0:	f7f5 fb59 	bl	8000656 <osResumeAllTasks>

   //Debug message
   TRACE_INFO("  Local IP Addr = %s\r\n", ipv4AddrToString(context->localConfig.ipAddr, NULL));
 800afa4:	f7f5 fb4c 	bl	8000640 <osSuspendAllTasks>
 800afa8:	4b42      	ldr	r3, [pc, #264]	; (800b0b4 <ipcpThisLayerUp+0x130>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68dc      	ldr	r4, [r3, #12]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800afb4:	2100      	movs	r1, #0
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fd fd04 	bl	80089c4 <ipv4AddrToString>
 800afbc:	4603      	mov	r3, r0
 800afbe:	461a      	mov	r2, r3
 800afc0:	493e      	ldr	r1, [pc, #248]	; (800b0bc <ipcpThisLayerUp+0x138>)
 800afc2:	4620      	mov	r0, r4
 800afc4:	f00f ffea 	bl	801af9c <fiprintf>
 800afc8:	f7f5 fb45 	bl	8000656 <osResumeAllTasks>
   TRACE_INFO("  Peer IP Addr = %s\r\n", ipv4AddrToString(context->peerConfig.ipAddr, NULL));
 800afcc:	f7f5 fb38 	bl	8000640 <osSuspendAllTasks>
 800afd0:	4b38      	ldr	r3, [pc, #224]	; (800b0b4 <ipcpThisLayerUp+0x130>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68dc      	ldr	r4, [r3, #12]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800afdc:	2100      	movs	r1, #0
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fd fcf0 	bl	80089c4 <ipv4AddrToString>
 800afe4:	4603      	mov	r3, r0
 800afe6:	461a      	mov	r2, r3
 800afe8:	4935      	ldr	r1, [pc, #212]	; (800b0c0 <ipcpThisLayerUp+0x13c>)
 800afea:	4620      	mov	r0, r4
 800afec:	f00f ffd6 	bl	801af9c <fiprintf>
 800aff0:	f7f5 fb31 	bl	8000656 <osResumeAllTasks>
   TRACE_INFO("  Primary DNS = %s\r\n", ipv4AddrToString(context->localConfig.primaryDns, NULL));
 800aff4:	f7f5 fb24 	bl	8000640 <osSuspendAllTasks>
 800aff8:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <ipcpThisLayerUp+0x130>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68dc      	ldr	r4, [r3, #12]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800b004:	2100      	movs	r1, #0
 800b006:	4618      	mov	r0, r3
 800b008:	f7fd fcdc 	bl	80089c4 <ipv4AddrToString>
 800b00c:	4603      	mov	r3, r0
 800b00e:	461a      	mov	r2, r3
 800b010:	492c      	ldr	r1, [pc, #176]	; (800b0c4 <ipcpThisLayerUp+0x140>)
 800b012:	4620      	mov	r0, r4
 800b014:	f00f ffc2 	bl	801af9c <fiprintf>
 800b018:	f7f5 fb1d 	bl	8000656 <osResumeAllTasks>
   TRACE_INFO("  Secondary DNS = %s\r\n", ipv4AddrToString(context->localConfig.secondaryDns, NULL));
 800b01c:	f7f5 fb10 	bl	8000640 <osSuspendAllTasks>
 800b020:	4b24      	ldr	r3, [pc, #144]	; (800b0b4 <ipcpThisLayerUp+0x130>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68dc      	ldr	r4, [r3, #12]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800b02c:	2100      	movs	r1, #0
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fd fcc8 	bl	80089c4 <ipv4AddrToString>
 800b034:	4603      	mov	r3, r0
 800b036:	461a      	mov	r2, r3
 800b038:	4923      	ldr	r1, [pc, #140]	; (800b0c8 <ipcpThisLayerUp+0x144>)
 800b03a:	4620      	mov	r0, r4
 800b03c:	f00f ffae 	bl	801af9c <fiprintf>
 800b040:	f7f5 fb09 	bl	8000656 <osResumeAllTasks>

   //Point to the underlying interface
   interface = context->interface;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	60fb      	str	r3, [r7, #12]

   //Update IPv4 configuration
   interface->ipv4Context.addrList[0].addr = context->localConfig.ipAddr;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   interface->ipv4Context.addrList[0].state = IPV4_ADDR_STATE_VALID;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2202      	movs	r2, #2
 800b05a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
   interface->ipv4Context.addrList[0].defaultGateway = context->peerConfig.ipAddr;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

   //Update the list of DNS servers
   interface->ipv4Context.dnsServerList[0] = context->localConfig.primaryDns;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#if (IPV4_DNS_SERVER_LIST_SIZE >= 2)
   interface->ipv4Context.dnsServerList[1] = context->localConfig.secondaryDns;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif

   //All the outgoing traffic will be routed to the other end of the link
   interface->ipv4Context.addrList[0].subnetMask = IPCP_DEFAULT_SUBNET_MASK;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b088:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //Link is up
   interface->linkState = TRUE;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2201      	movs	r2, #1
 800b090:	67da      	str	r2, [r3, #124]	; 0x7c

   //Disable interrupts
   interface->nicDriver->disableIrq(interface);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	4798      	blx	r3
   //Process link state change event
   nicNotifyLinkChange(interface);
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f7f7 fe11 	bl	8002cc4 <nicNotifyLinkChange>
   //Re-enable interrupts
   interface->nicDriver->enableIrq(interface);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	4798      	blx	r3
}
 800b0ac:	bf00      	nop
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd90      	pop	{r4, r7, pc}
 800b0b4:	20000058 	.word	0x20000058
 800b0b8:	0801c8f8 	.word	0x0801c8f8
 800b0bc:	0801c918 	.word	0x0801c918
 800b0c0:	0801c930 	.word	0x0801c930
 800b0c4:	0801c948 	.word	0x0801c948
 800b0c8:	0801c960 	.word	0x0801c960

0800b0cc <ipcpThisLayerDown>:
 * @brief This-Layer-Down callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerDown(PppContext *context)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Debug message
   TRACE_INFO("IPCP This-Layer-Down callback\r\n");
 800b0d4:	f7f5 fab4 	bl	8000640 <osSuspendAllTasks>
 800b0d8:	4b10      	ldr	r3, [pc, #64]	; (800b11c <ipcpThisLayerDown+0x50>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	221f      	movs	r2, #31
 800b0e0:	2101      	movs	r1, #1
 800b0e2:	480f      	ldr	r0, [pc, #60]	; (800b120 <ipcpThisLayerDown+0x54>)
 800b0e4:	f00f ffba 	bl	801b05c <fwrite>
 800b0e8:	f7f5 fab5 	bl	8000656 <osResumeAllTasks>

   //Point to the underlying interface
   interface = context->interface;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	60fb      	str	r3, [r7, #12]

   //Link is up
   interface->linkState = FALSE;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	67da      	str	r2, [r3, #124]	; 0x7c

   //Disable interrupts
   interface->nicDriver->disableIrq(interface);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	4798      	blx	r3
   //Process link state change event
   nicNotifyLinkChange(interface);
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7f7 fdde 	bl	8002cc4 <nicNotifyLinkChange>
   //Re-enable interrupts
   interface->nicDriver->enableIrq(interface);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	4798      	blx	r3
}
 800b112:	bf00      	nop
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20000058 	.word	0x20000058
 800b120:	0801c978 	.word	0x0801c978

0800b124 <ipcpThisLayerStarted>:
 * @brief This-Layer-Started callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerStarted(PppContext *context)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("IPCP This-Layer-Started callback\r\n");
 800b12c:	f7f5 fa88 	bl	8000640 <osSuspendAllTasks>
 800b130:	4b06      	ldr	r3, [pc, #24]	; (800b14c <ipcpThisLayerStarted+0x28>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	2222      	movs	r2, #34	; 0x22
 800b138:	2101      	movs	r1, #1
 800b13a:	4805      	ldr	r0, [pc, #20]	; (800b150 <ipcpThisLayerStarted+0x2c>)
 800b13c:	f00f ff8e 	bl	801b05c <fwrite>
 800b140:	f7f5 fa89 	bl	8000656 <osResumeAllTasks>
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	20000058 	.word	0x20000058
 800b150:	0801c998 	.word	0x0801c998

0800b154 <ipcpThisLayerFinished>:
 * @brief This-Layer-Finished callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerFinished(PppContext *context)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("IPCP This-Layer-Finished callback\r\n");
 800b15c:	f7f5 fa70 	bl	8000640 <osSuspendAllTasks>
 800b160:	4b06      	ldr	r3, [pc, #24]	; (800b17c <ipcpThisLayerFinished+0x28>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	2223      	movs	r2, #35	; 0x23
 800b168:	2101      	movs	r1, #1
 800b16a:	4805      	ldr	r0, [pc, #20]	; (800b180 <ipcpThisLayerFinished+0x2c>)
 800b16c:	f00f ff76 	bl	801b05c <fwrite>
 800b170:	f7f5 fa71 	bl	8000656 <osResumeAllTasks>
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	20000058 	.word	0x20000058
 800b180:	0801c9bc 	.word	0x0801c9bc

0800b184 <ipcpInitRestartCount>:
 * @param[in] context PPP context
 * @param[in] value Restart counter value
 **/

void ipcpInitRestartCount(PppContext *context, uint_t value)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Initialize-Restart-Count callback\r\n");
 800b18e:	f7f5 fa57 	bl	8000640 <osSuspendAllTasks>
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <ipcpInitRestartCount+0x34>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	2228      	movs	r2, #40	; 0x28
 800b19a:	2101      	movs	r1, #1
 800b19c:	4807      	ldr	r0, [pc, #28]	; (800b1bc <ipcpInitRestartCount+0x38>)
 800b19e:	f00f ff5d 	bl	801b05c <fwrite>
 800b1a2:	f7f5 fa58 	bl	8000656 <osResumeAllTasks>

   //Initialize restart counter
   context->ipcpFsm.restartCounter = value;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20000058 	.word	0x20000058
 800b1bc:	0801c9e0 	.word	0x0801c9e0

0800b1c0 <ipcpZeroRestartCount>:
 * @brief Zero-Restart-Count callback function
 * @param[in] context PPP context
 **/

void ipcpZeroRestartCount(PppContext *context)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("IPCP Zero-Restart-Count callback\r\n");
 800b1c8:	f7f5 fa3a 	bl	8000640 <osSuspendAllTasks>
 800b1cc:	4b0b      	ldr	r3, [pc, #44]	; (800b1fc <ipcpZeroRestartCount+0x3c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	2222      	movs	r2, #34	; 0x22
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	480a      	ldr	r0, [pc, #40]	; (800b200 <ipcpZeroRestartCount+0x40>)
 800b1d8:	f00f ff40 	bl	801b05c <fwrite>
 800b1dc:	f7f5 fa3b 	bl	8000656 <osResumeAllTasks>

   //Zero restart counter
   context->ipcpFsm.restartCounter = 0;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //The receiver of a Terminate-Request should wait for the peer to
   //disconnect, and must not disconnect until at least one Restart
   //time has passed after sending a Terminate-Ack
   context->ipcpFsm.timestamp = osGetSystemTime();
 800b1e8:	f7f5 faf2 	bl	80007d0 <osGetSystemTime>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800b1f4:	bf00      	nop
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20000058 	.word	0x20000058
 800b200:	0801ca0c 	.word	0x0801ca0c

0800b204 <ipcpSendConfigureReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpSendConfigureReq(PppContext *context)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b088      	sub	sp, #32
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppConfigurePacket *configureReqPacket;

   //Debug message
   TRACE_INFO("IPCP Send-Configure-Request callback\r\n");
 800b20c:	f7f5 fa18 	bl	8000640 <osSuspendAllTasks>
 800b210:	4b4e      	ldr	r3, [pc, #312]	; (800b34c <ipcpSendConfigureReq+0x148>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	2226      	movs	r2, #38	; 0x26
 800b218:	2101      	movs	r1, #1
 800b21a:	484d      	ldr	r0, [pc, #308]	; (800b350 <ipcpSendConfigureReq+0x14c>)
 800b21c:	f00f ff1e 	bl	801b05c <fwrite>
 800b220:	f7f5 fa19 	bl	8000656 <osResumeAllTasks>

   //Allocate a buffer memory to hold the Configure-Request packet
   buffer = pppAllocBuffer(PPP_MAX_CONF_REQ_SIZE, &offset);
 800b224:	f107 030c 	add.w	r3, r7, #12
 800b228:	4619      	mov	r1, r3
 800b22a:	2080      	movs	r0, #128	; 0x80
 800b22c:	f002 fc10 	bl	800da50 <pppAllocBuffer>
 800b230:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(buffer == NULL)
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <ipcpSendConfigureReq+0x38>
      return ERROR_OUT_OF_MEMORY;
 800b238:	2364      	movs	r3, #100	; 0x64
 800b23a:	e083      	b.n	800b344 <ipcpSendConfigureReq+0x140>

   //Point to the Configure-Request packet
   configureReqPacket = netBufferAt(buffer, offset);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4619      	mov	r1, r3
 800b240:	69f8      	ldr	r0, [r7, #28]
 800b242:	f7f7 fa0d 	bl	8002660 <netBufferAt>
 800b246:	61b8      	str	r0, [r7, #24]

   //Format packet header
   configureReqPacket->code = PPP_CODE_CONFIGURE_REQ;
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	2201      	movs	r2, #1
 800b24c:	701a      	strb	r2, [r3, #0]
   configureReqPacket->identifier = ++context->ipcpFsm.identifier;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b254:	3301      	adds	r3, #1
 800b256:	b2da      	uxtb	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	705a      	strb	r2, [r3, #1]
   configureReqPacket->length = sizeof(PppConfigurePacket);
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f042 0204 	orr.w	r2, r2, #4
 800b270:	709a      	strb	r2, [r3, #2]
 800b272:	2200      	movs	r2, #0
 800b274:	70da      	strb	r2, [r3, #3]

   //Make sure the IP-Address option has not been previously rejected
   if(!context->localConfig.ipAddrRejected)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d107      	bne.n	800b290 <ipcpSendConfigureReq+0x8c>
   {
      //Add option
      pppAddOption(configureReqPacket, IPCP_OPTION_IP_ADDRESS,
         &context->localConfig.ipAddr, sizeof(Ipv4Addr));
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f503 7296 	add.w	r2, r3, #300	; 0x12c
      pppAddOption(configureReqPacket, IPCP_OPTION_IP_ADDRESS,
 800b286:	2304      	movs	r3, #4
 800b288:	2103      	movs	r1, #3
 800b28a:	69b8      	ldr	r0, [r7, #24]
 800b28c:	f003 fe54 	bl	800ef38 <pppAddOption>
   }

   //Make sure the Primary-DNS-Server-Address option has not been
   //previously rejected
   if(!context->localConfig.primaryDnsRejected)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b296:	2b00      	cmp	r3, #0
 800b298:	d107      	bne.n	800b2aa <ipcpSendConfigureReq+0xa6>
   {
      //Add option
      pppAddOption(configureReqPacket, IPCP_OPTION_PRIMARY_DNS,
         &context->localConfig.primaryDns, sizeof(Ipv4Addr));
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f503 729a 	add.w	r2, r3, #308	; 0x134
      pppAddOption(configureReqPacket, IPCP_OPTION_PRIMARY_DNS,
 800b2a0:	2304      	movs	r3, #4
 800b2a2:	2181      	movs	r1, #129	; 0x81
 800b2a4:	69b8      	ldr	r0, [r7, #24]
 800b2a6:	f003 fe47 	bl	800ef38 <pppAddOption>
   }

   //Make sure the Secondary-DNS-Server-Address option has not been
   //previously rejected
   if(!context->localConfig.secondaryDnsRejected)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d107      	bne.n	800b2c4 <ipcpSendConfigureReq+0xc0>
   {
      //Add option
      pppAddOption(configureReqPacket, IPCP_OPTION_SECONDARY_DNS,
         &context->localConfig.secondaryDns, sizeof(Ipv4Addr));
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f503 729e 	add.w	r2, r3, #316	; 0x13c
      pppAddOption(configureReqPacket, IPCP_OPTION_SECONDARY_DNS,
 800b2ba:	2304      	movs	r3, #4
 800b2bc:	2183      	movs	r1, #131	; 0x83
 800b2be:	69b8      	ldr	r0, [r7, #24]
 800b2c0:	f003 fe3a 	bl	800ef38 <pppAddOption>
   }

   //Save packet length
   length = configureReqPacket->length;
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	885b      	ldrh	r3, [r3, #2]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	617b      	str	r3, [r7, #20]
   //Convert length field to network byte order
   configureReqPacket->length = htons(length);
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7f5 f965 	bl	80005a0 <swapInt16>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	461a      	mov	r2, r3
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	805a      	strh	r2, [r3, #2]

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	69f8      	ldr	r0, [r7, #28]
 800b2e8:	f7f7 f914 	bl	8002514 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending Configure-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800b2ec:	f7f5 f9a8 	bl	8000640 <osSuspendAllTasks>
 800b2f0:	4b16      	ldr	r3, [pc, #88]	; (800b34c <ipcpSendConfigureReq+0x148>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	4916      	ldr	r1, [pc, #88]	; (800b354 <ipcpSendConfigureReq+0x150>)
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f00f fe4e 	bl	801af9c <fiprintf>
 800b300:	f7f5 f9a9 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) configureReqPacket, length, PPP_PROTOCOL_IPCP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_IPCP);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6998      	ldr	r0, [r3, #24]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	f248 0321 	movw	r3, #32801	; 0x8021
 800b30e:	69f9      	ldr	r1, [r7, #28]
 800b310:	f002 fa28 	bl	800d764 <pppSendFrame>
 800b314:	4603      	mov	r3, r0
 800b316:	827b      	strh	r3, [r7, #18]

   //The restart counter is decremented each time a Configure-Request is sent
   if(context->ipcpFsm.restartCounter > 0)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d006      	beq.n	800b330 <ipcpSendConfigureReq+0x12c>
      context->ipcpFsm.restartCounter--;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b328:	1e5a      	subs	r2, r3, #1
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //Save the time at which the packet was sent
   context->ipcpFsm.timestamp = osGetSystemTime();
 800b330:	f7f5 fa4e 	bl	80007d0 <osGetSystemTime>
 800b334:	4602      	mov	r2, r0
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

   //Free previously allocated memory block
   netBufferFree(buffer);
 800b33c:	69f8      	ldr	r0, [r7, #28]
 800b33e:	f7f7 f8b8 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800b342:	8a7b      	ldrh	r3, [r7, #18]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3720      	adds	r7, #32
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20000058 	.word	0x20000058
 800b350:	0801ca30 	.word	0x0801ca30
 800b354:	0801ca58 	.word	0x0801ca58

0800b358 <ipcpSendConfigureAck>:
 * @return Error code
 **/

error_t ipcpSendConfigureAck(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Configure-Ack callback\r\n");
 800b362:	f7f5 f96d 	bl	8000640 <osSuspendAllTasks>
 800b366:	4b0b      	ldr	r3, [pc, #44]	; (800b394 <ipcpSendConfigureAck+0x3c>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	2222      	movs	r2, #34	; 0x22
 800b36e:	2101      	movs	r1, #1
 800b370:	4809      	ldr	r0, [pc, #36]	; (800b398 <ipcpSendConfigureAck+0x40>)
 800b372:	f00f fe73 	bl	801b05c <fwrite>
 800b376:	f7f5 f96e 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Ack packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800b37a:	2302      	movs	r3, #2
 800b37c:	f248 0221 	movw	r2, #32801	; 0x8021
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f003 fb20 	bl	800e9c8 <pppSendConfigureAckNak>
 800b388:	4603      	mov	r3, r0
      PPP_PROTOCOL_IPCP, PPP_CODE_CONFIGURE_ACK);
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	20000058 	.word	0x20000058
 800b398:	0801ca8c 	.word	0x0801ca8c

0800b39c <ipcpSendConfigureNak>:
 * @return Error code
 **/

error_t ipcpSendConfigureNak(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Configure-Nak callback\r\n");
 800b3a6:	f7f5 f94b 	bl	8000640 <osSuspendAllTasks>
 800b3aa:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <ipcpSendConfigureNak+0x3c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	2222      	movs	r2, #34	; 0x22
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	4809      	ldr	r0, [pc, #36]	; (800b3dc <ipcpSendConfigureNak+0x40>)
 800b3b6:	f00f fe51 	bl	801b05c <fwrite>
 800b3ba:	f7f5 f94c 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Nak packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800b3be:	2303      	movs	r3, #3
 800b3c0:	f248 0221 	movw	r2, #32801	; 0x8021
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f003 fafe 	bl	800e9c8 <pppSendConfigureAckNak>
 800b3cc:	4603      	mov	r3, r0
      PPP_PROTOCOL_IPCP, PPP_CODE_CONFIGURE_NAK);
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20000058 	.word	0x20000058
 800b3dc:	0801cab0 	.word	0x0801cab0

0800b3e0 <ipcpSendConfigureRej>:
 * @return Error code
 **/

error_t ipcpSendConfigureRej(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Configure-Reject callback\r\n");
 800b3ea:	f7f5 f929 	bl	8000640 <osSuspendAllTasks>
 800b3ee:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <ipcpSendConfigureRej+0x3c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	2225      	movs	r2, #37	; 0x25
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	4809      	ldr	r0, [pc, #36]	; (800b420 <ipcpSendConfigureRej+0x40>)
 800b3fa:	f00f fe2f 	bl	801b05c <fwrite>
 800b3fe:	f7f5 f92a 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Reject packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800b402:	2304      	movs	r3, #4
 800b404:	f248 0221 	movw	r2, #32801	; 0x8021
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f003 fadc 	bl	800e9c8 <pppSendConfigureAckNak>
 800b410:	4603      	mov	r3, r0
      PPP_PROTOCOL_IPCP, PPP_CODE_CONFIGURE_REJ);
}
 800b412:	4618      	mov	r0, r3
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20000058 	.word	0x20000058
 800b420:	0801cad4 	.word	0x0801cad4

0800b424 <ipcpSendTerminateReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpSendTerminateReq(PppContext *context)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
   error_t error;

   //Debug message
   TRACE_INFO("IPCP Send-Terminate-Request callback\r\n");
 800b42c:	f7f5 f908 	bl	8000640 <osSuspendAllTasks>
 800b430:	4b19      	ldr	r3, [pc, #100]	; (800b498 <ipcpSendTerminateReq+0x74>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	2226      	movs	r2, #38	; 0x26
 800b438:	2101      	movs	r1, #1
 800b43a:	4818      	ldr	r0, [pc, #96]	; (800b49c <ipcpSendTerminateReq+0x78>)
 800b43c:	f00f fe0e 	bl	801b05c <fwrite>
 800b440:	f7f5 f909 	bl	8000656 <osResumeAllTasks>

   //On transmission, the Identifier field must be changed
   context->ipcpFsm.identifier++;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b44a:	3301      	adds	r3, #1
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

   //Send Terminate-Request packet
   error = pppSendTerminateReq(context, context->ipcpFsm.identifier, PPP_PROTOCOL_IPCP);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b45a:	f248 0221 	movw	r2, #32801	; 0x8021
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f003 fb85 	bl	800eb70 <pppSendTerminateReq>
 800b466:	4603      	mov	r3, r0
 800b468:	81fb      	strh	r3, [r7, #14]

   //The restart counter is decremented each time a Terminate-Request is sent
   if(context->ipcpFsm.restartCounter > 0)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b470:	2b00      	cmp	r3, #0
 800b472:	d006      	beq.n	800b482 <ipcpSendTerminateReq+0x5e>
      context->ipcpFsm.restartCounter--;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b47a:	1e5a      	subs	r2, r3, #1
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //Save the time at which the packet was sent
   context->ipcpFsm.timestamp = osGetSystemTime();
 800b482:	f7f5 f9a5 	bl	80007d0 <osGetSystemTime>
 800b486:	4602      	mov	r2, r0
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

   //Return status code
   return error;
 800b48e:	89fb      	ldrh	r3, [r7, #14]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	20000058 	.word	0x20000058
 800b49c:	0801cafc 	.word	0x0801cafc

0800b4a0 <ipcpSendTerminateAck>:
 * @return Error code
 **/

error_t ipcpSendTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
   uint8_t identifier;

   //Debug message
   TRACE_INFO("IPCP Send-Terminate-Ack callback\r\n");
 800b4aa:	f7f5 f8c9 	bl	8000640 <osSuspendAllTasks>
 800b4ae:	4b14      	ldr	r3, [pc, #80]	; (800b500 <ipcpSendTerminateAck+0x60>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	2222      	movs	r2, #34	; 0x22
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	4812      	ldr	r0, [pc, #72]	; (800b504 <ipcpSendTerminateAck+0x64>)
 800b4ba:	f00f fdcf 	bl	801b05c <fwrite>
 800b4be:	f7f5 f8ca 	bl	8000656 <osResumeAllTasks>

   //Check whether this Terminate-Ack acknowledges the reception of a
   //Terminate-Request packet
   if(terminateReqPacket != NULL)
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d003      	beq.n	800b4d0 <ipcpSendTerminateAck+0x30>
   {
      //The Identifier field of the Terminate-Request is copied into the
      //Identifier field of the Terminate-Ack packet
      identifier = terminateReqPacket->identifier;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	73fb      	strb	r3, [r7, #15]
 800b4ce:	e00b      	b.n	800b4e8 <ipcpSendTerminateAck+0x48>
   }
   else
   {
      //This Terminate-Ack packet serves to synchronize the automatons
      identifier = ++context->ipcpFsm.identifier;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b4e6:	73fb      	strb	r3, [r7, #15]
   }

   //Send Terminate-Ack packet
   return pppSendTerminateAck(context, identifier, PPP_PROTOCOL_IPCP);
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	f248 0221 	movw	r2, #32801	; 0x8021
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f003 fb89 	bl	800ec08 <pppSendTerminateAck>
 800b4f6:	4603      	mov	r3, r0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20000058 	.word	0x20000058
 800b504:	0801cb24 	.word	0x0801cb24

0800b508 <ipcpSendCodeRej>:
 * @param[in] packet Un-interpretable packet received from the peer
 * @return Error code
 **/

error_t ipcpSendCodeRej(PppContext *context, const PppPacket *packet)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Code-Reject callback\r\n");
 800b512:	f7f5 f895 	bl	8000640 <osSuspendAllTasks>
 800b516:	4b10      	ldr	r3, [pc, #64]	; (800b558 <ipcpSendCodeRej+0x50>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	2220      	movs	r2, #32
 800b51e:	2101      	movs	r1, #1
 800b520:	480e      	ldr	r0, [pc, #56]	; (800b55c <ipcpSendCodeRej+0x54>)
 800b522:	f00f fd9b 	bl	801b05c <fwrite>
 800b526:	f7f5 f896 	bl	8000656 <osResumeAllTasks>

   //The Identifier field must be changed for each Code-Reject sent
   context->ipcpFsm.identifier++;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800b530:	3301      	adds	r3, #1
 800b532:	b2da      	uxtb	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

   //Send Code-Reject packet
   return pppSendCodeRej(context, packet, context->ipcpFsm.identifier, PPP_PROTOCOL_IPCP);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 800b540:	f248 0321 	movw	r3, #32801	; 0x8021
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f003 fbaa 	bl	800eca0 <pppSendCodeRej>
 800b54c:	4603      	mov	r3, r0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	20000058 	.word	0x20000058
 800b55c:	0801cb48 	.word	0x0801cb48

0800b560 <ipcpParseOption>:
 * @return Error code
 **/

error_t ipcpParseOption(PppContext *context, PppOption *option,
   size_t inPacketLen, PppConfigurePacket *outPacket)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
   error_t error;

   //Malformed IPCP packet?
   if(inPacketLen < sizeof(PppOption))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d801      	bhi.n	800b578 <ipcpParseOption+0x18>
      return ERROR_INVALID_LENGTH;
 800b574:	23eb      	movs	r3, #235	; 0xeb
 800b576:	e02f      	b.n	800b5d8 <ipcpParseOption+0x78>

   //Check option length
   if(option->length < sizeof(PppOption))
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	785b      	ldrb	r3, [r3, #1]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d801      	bhi.n	800b584 <ipcpParseOption+0x24>
      return ERROR_INVALID_LENGTH;
 800b580:	23eb      	movs	r3, #235	; 0xeb
 800b582:	e029      	b.n	800b5d8 <ipcpParseOption+0x78>
   if(option->length > inPacketLen)
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	785b      	ldrb	r3, [r3, #1]
 800b588:	461a      	mov	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d201      	bcs.n	800b594 <ipcpParseOption+0x34>
      return ERROR_INVALID_LENGTH;
 800b590:	23eb      	movs	r3, #235	; 0xeb
 800b592:	e021      	b.n	800b5d8 <ipcpParseOption+0x78>

   //Check option type
   switch(option->type)
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d107      	bne.n	800b5ac <ipcpParseOption+0x4c>
   {
   case IPCP_OPTION_IP_ADDRESS:
      //Check IP-Address option
      error = ipcpParseIpAddressOption(context, (IpcpIpAddressOption *) option, outPacket);
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	68b9      	ldr	r1, [r7, #8]
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 f81d 	bl	800b5e0 <ipcpParseIpAddressOption>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	82fb      	strh	r3, [r7, #22]
      break;
 800b5aa:	e014      	b.n	800b5d6 <ipcpParseOption+0x76>
   default:
      //If some configuration options received in the Configure-Request are not
      //recognizable or not acceptable for negotiation, then the implementation
      //must transmit a Configure-Reject
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_REJ)
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00e      	beq.n	800b5d0 <ipcpParseOption+0x70>
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d10a      	bne.n	800b5d0 <ipcpParseOption+0x70>
      {
         //The options field of the Configure-Reject packet is filled
         //with the unrecognized options from the Configure-Request
         pppAddOption(outPacket, option->type, option->data,
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	7819      	ldrb	r1, [r3, #0]
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, option->type, option->data,
 800b5c6:	3b02      	subs	r3, #2
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	6838      	ldr	r0, [r7, #0]
 800b5cc:	f003 fcb4 	bl	800ef38 <pppAddOption>
      }

      //The option is not acceptable for negotiation
      error = ERROR_INVALID_TYPE;
 800b5d0:	23ef      	movs	r3, #239	; 0xef
 800b5d2:	82fb      	strh	r3, [r7, #22]
      break;
 800b5d4:	bf00      	nop
   }

   //Return status code
   return error;
 800b5d6:	8afb      	ldrh	r3, [r7, #22]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <ipcpParseIpAddressOption>:
 * @return Error code
 **/

error_t ipcpParseIpAddressOption(PppContext *context,
   IpcpIpAddressOption *option, PppConfigurePacket *outPacket)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(IpcpIpAddressOption))
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	785b      	ldrb	r3, [r3, #1]
 800b5f0:	2b06      	cmp	r3, #6
 800b5f2:	d130      	bne.n	800b656 <ipcpParseIpAddressOption+0x76>
   {
      //Check whether the option value is acceptable
      if(option->ipAddr != IPV4_UNSPECIFIED_ADDR)
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d019      	beq.n	800b632 <ipcpParseIpAddressOption+0x52>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d013      	beq.n	800b62c <ipcpParseIpAddressOption+0x4c>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d10f      	bne.n	800b62c <ipcpParseIpAddressOption+0x4c>
         {
            //Save IP address
            context->peerConfig.ipAddr = option->ipAddr;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
               (void *) &option->ipAddr, option->length - sizeof(PppOption));
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	1c9a      	adds	r2, r3, #2
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
 800b620:	3b02      	subs	r3, #2
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2103      	movs	r1, #3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f003 fc86 	bl	800ef38 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 800b62c:	2300      	movs	r3, #0
 800b62e:	82fb      	strh	r3, [r7, #22]
 800b630:	e013      	b.n	800b65a <ipcpParseIpAddressOption+0x7a>
      }
      else
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00b      	beq.n	800b650 <ipcpParseIpAddressOption+0x70>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b03      	cmp	r3, #3
 800b63e:	d107      	bne.n	800b650 <ipcpParseIpAddressOption+0x70>
         {
            //The option must be modified to a value acceptable to the
            //Configure-Nak sender
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
               &context->peerConfig.ipAddr, sizeof(Ipv4Addr));
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f503 72ba 	add.w	r2, r3, #372	; 0x174
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
 800b646:	2304      	movs	r3, #4
 800b648:	2103      	movs	r1, #3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f003 fc74 	bl	800ef38 <pppAddOption>
         }

         //The value is not acceptable
         error = ERROR_INVALID_VALUE;
 800b650:	23f0      	movs	r3, #240	; 0xf0
 800b652:	82fb      	strh	r3, [r7, #22]
 800b654:	e001      	b.n	800b65a <ipcpParseIpAddressOption+0x7a>
      }
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800b656:	23eb      	movs	r3, #235	; 0xeb
 800b658:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800b65a:	8afb      	ldrh	r3, [r7, #22]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <lcpOpen>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpOpen(PppContext *context)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nLCP Open event\r\n");
 800b66c:	f7f4 ffe8 	bl	8000640 <osSuspendAllTasks>
 800b670:	4b10      	ldr	r3, [pc, #64]	; (800b6b4 <lcpOpen+0x50>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	2212      	movs	r2, #18
 800b678:	2101      	movs	r1, #1
 800b67a:	480f      	ldr	r0, [pc, #60]	; (800b6b8 <lcpOpen+0x54>)
 800b67c:	f00f fcee 	bl	801b05c <fwrite>
 800b680:	f7f4 ffe9 	bl	8000656 <osResumeAllTasks>

   //Advance to the Establish phase
   context->pppPhase = PPP_PHASE_ESTABLISH;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

   //The link is administratively available for traffic
   pppOpenEvent(context, &context->lcpFsm, &lcpCallbacks);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	338c      	adds	r3, #140	; 0x8c
 800b690:	4a0a      	ldr	r2, [pc, #40]	; (800b6bc <lcpOpen+0x58>)
 800b692:	4619      	mov	r1, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f002 fa5b 	bl	800db50 <pppOpenEvent>
   //The lower layer is ready to carry packets
   pppUpEvent(context, &context->lcpFsm, &lcpCallbacks);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	338c      	adds	r3, #140	; 0x8c
 800b69e:	4a07      	ldr	r2, [pc, #28]	; (800b6bc <lcpOpen+0x58>)
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f002 f9ec 	bl	800da80 <pppUpEvent>

   //Successful processing
   return NO_ERROR;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000058 	.word	0x20000058
 800b6b8:	0801cb6c 	.word	0x0801cb6c
 800b6bc:	0801d564 	.word	0x0801d564

0800b6c0 <lcpClose>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpClose(PppContext *context)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nLCP Close event\r\n");
 800b6c8:	f7f4 ffba 	bl	8000640 <osSuspendAllTasks>
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <lcpClose+0x38>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	2213      	movs	r2, #19
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	4809      	ldr	r0, [pc, #36]	; (800b6fc <lcpClose+0x3c>)
 800b6d8:	f00f fcc0 	bl	801b05c <fwrite>
 800b6dc:	f7f4 ffbb 	bl	8000656 <osResumeAllTasks>

   //The link is no longer available for traffic
   pppCloseEvent(context, &context->lcpFsm, &lcpCallbacks);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	338c      	adds	r3, #140	; 0x8c
 800b6e4:	4a06      	ldr	r2, [pc, #24]	; (800b700 <lcpClose+0x40>)
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f002 fa75 	bl	800dbd8 <pppCloseEvent>

   //Successful processing
   return NO_ERROR;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	20000058 	.word	0x20000058
 800b6fc:	0801cb80 	.word	0x0801cb80
 800b700:	0801d564 	.word	0x0801d564

0800b704 <lcpTick>:
 *
 * @param[in] context PPP context
 **/

void lcpTick(PppContext *context)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->lcpFsm.state >= PPP_STATE_4_CLOSING &&
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b712:	2b03      	cmp	r3, #3
 800b714:	d923      	bls.n	800b75e <lcpTick+0x5a>
      context->lcpFsm.state <= PPP_STATE_8_ACK_SENT)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   if(context->lcpFsm.state >= PPP_STATE_4_CLOSING &&
 800b71c:	2b08      	cmp	r3, #8
 800b71e:	d81e      	bhi.n	800b75e <lcpTick+0x5a>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 800b720:	f7f5 f856 	bl	80007d0 <osGetSystemTime>
 800b724:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->lcpFsm.timestamp) >= PPP_RESTART_TIMER)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800b734:	4293      	cmp	r3, r2
 800b736:	d912      	bls.n	800b75e <lcpTick+0x5a>
      {
         //Debug message
         TRACE_INFO("\r\nLCP Timeout event\r\n");
 800b738:	f7f4 ff82 	bl	8000640 <osSuspendAllTasks>
 800b73c:	4b0a      	ldr	r3, [pc, #40]	; (800b768 <lcpTick+0x64>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	2215      	movs	r2, #21
 800b744:	2101      	movs	r1, #1
 800b746:	4809      	ldr	r0, [pc, #36]	; (800b76c <lcpTick+0x68>)
 800b748:	f00f fc88 	bl	801b05c <fwrite>
 800b74c:	f7f4 ff83 	bl	8000656 <osResumeAllTasks>

         //The restart timer is used to retransmit Configure-Request
         //and Terminate-Request packets
         pppTimeoutEvent(context, &context->lcpFsm, &lcpCallbacks);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	338c      	adds	r3, #140	; 0x8c
 800b754:	4a06      	ldr	r2, [pc, #24]	; (800b770 <lcpTick+0x6c>)
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f002 fa97 	bl	800dc8c <pppTimeoutEvent>
      }
   }
}
 800b75e:	bf00      	nop
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20000058 	.word	0x20000058
 800b76c:	0801cb94 	.word	0x0801cb94
 800b770:	0801d564 	.word	0x0801d564

0800b774 <lcpProcessPacket>:
 * @param[in] packet LCP packet received from the peer
 * @param[in] length Length of the packet, in bytes
 **/

void lcpProcessPacket(PppContext *context, const PppPacket *packet, size_t length)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming LCP packet is valid
   if(length < sizeof(PppPacket))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b03      	cmp	r3, #3
 800b784:	f240 8083 	bls.w	800b88e <lcpProcessPacket+0x11a>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	885b      	ldrh	r3, [r3, #2]
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	4618      	mov	r0, r3
 800b790:	f7f4 ff06 	bl	80005a0 <swapInt16>
 800b794:	4603      	mov	r3, r0
 800b796:	461a      	mov	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d379      	bcc.n	800b892 <lcpProcessPacket+0x11e>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	885b      	ldrh	r3, [r3, #2]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7f4 fefb 	bl	80005a0 <swapInt16>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b03      	cmp	r3, #3
 800b7ae:	d972      	bls.n	800b896 <lcpProcessPacket+0x122>
      return;

   //Save the length of the LCP packet
   length = ntohs(packet->length);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	885b      	ldrh	r3, [r3, #2]
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7f4 fef2 	bl	80005a0 <swapInt16>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("LCP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 800b7c0:	f7f4 ff3e 	bl	8000640 <osSuspendAllTasks>
 800b7c4:	4b36      	ldr	r3, [pc, #216]	; (800b8a0 <lcpProcessPacket+0x12c>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	4935      	ldr	r1, [pc, #212]	; (800b8a4 <lcpProcessPacket+0x130>)
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f00f fbe4 	bl	801af9c <fiprintf>
 800b7d4:	f7f4 ff3f 	bl	8000656 <osResumeAllTasks>
   //Dump LCP packet contents for debugging purpose
   pppDumpPacket(packet, length, PPP_PROTOCOL_LCP);

   //Check LCP code field
   switch(packet->code)
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	2b0a      	cmp	r3, #10
 800b7e0:	d84f      	bhi.n	800b882 <lcpProcessPacket+0x10e>
 800b7e2:	a201      	add	r2, pc, #4	; (adr r2, 800b7e8 <lcpProcessPacket+0x74>)
 800b7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e8:	0800b815 	.word	0x0800b815
 800b7ec:	0800b81f 	.word	0x0800b81f
 800b7f0:	0800b829 	.word	0x0800b829
 800b7f4:	0800b833 	.word	0x0800b833
 800b7f8:	0800b83d 	.word	0x0800b83d
 800b7fc:	0800b847 	.word	0x0800b847
 800b800:	0800b851 	.word	0x0800b851
 800b804:	0800b85b 	.word	0x0800b85b
 800b808:	0800b865 	.word	0x0800b865
 800b80c:	0800b86f 	.word	0x0800b86f
 800b810:	0800b879 	.word	0x0800b879
   {
   //Configure-Request packet?
   case PPP_CODE_CONFIGURE_REQ:
      //Process Configure-Request packet
      lcpProcessConfigureReq(context, (PppConfigurePacket *) packet);
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 f846 	bl	800b8a8 <lcpProcessConfigureReq>
      break;
 800b81c:	e03c      	b.n	800b898 <lcpProcessPacket+0x124>
   //Configure-Ack packet?
   case PPP_CODE_CONFIGURE_ACK:
      //Process Configure-Ack packet
      lcpProcessConfigureAck(context, (PppConfigurePacket *) packet);
 800b81e:	68b9      	ldr	r1, [r7, #8]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 f8c5 	bl	800b9b0 <lcpProcessConfigureAck>
      break;
 800b826:	e037      	b.n	800b898 <lcpProcessPacket+0x124>
   //Configure-Nak packet?
   case PPP_CODE_CONFIGURE_NAK:
      //Process Configure-Nak packet
      lcpProcessConfigureNak(context, (PppConfigurePacket *) packet);
 800b828:	68b9      	ldr	r1, [r7, #8]
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f000 f8ec 	bl	800ba08 <lcpProcessConfigureNak>
      break;
 800b830:	e032      	b.n	800b898 <lcpProcessPacket+0x124>
   //Configure-Reject packet?
   case PPP_CODE_CONFIGURE_REJ:
      //Process Configure-Reject packet
      lcpProcessConfigureReject(context, (PppConfigurePacket *) packet);
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f000 f9cb 	bl	800bbd0 <lcpProcessConfigureReject>
      break;
 800b83a:	e02d      	b.n	800b898 <lcpProcessPacket+0x124>
   //Terminate-Request packet?
   case PPP_CODE_TERMINATE_REQ:
      //Process Terminate-Request packet
      lcpProcessTerminateReq(context, (PppTerminatePacket *) packet);
 800b83c:	68b9      	ldr	r1, [r7, #8]
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 fa6c 	bl	800bd1c <lcpProcessTerminateReq>
      break;
 800b844:	e028      	b.n	800b898 <lcpProcessPacket+0x124>
   //Terminate-Ack packet?
   case PPP_CODE_TERMINATE_ACK:
      //Process Terminate-Ack packet
      lcpProcessTerminateAck(context, (PppTerminatePacket *) packet);
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f000 fa8b 	bl	800bd64 <lcpProcessTerminateAck>
      break;
 800b84e:	e023      	b.n	800b898 <lcpProcessPacket+0x124>
   //Code-Reject packet?
   case PPP_CODE_CODE_REJ:
      //Process Code-Reject packet
      lcpProcessCodeRej(context, (PppCodeRejPacket *) packet);
 800b850:	68b9      	ldr	r1, [r7, #8]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 faaa 	bl	800bdac <lcpProcessCodeRej>
      break;
 800b858:	e01e      	b.n	800b898 <lcpProcessPacket+0x124>
   //Protocol-Reject packet?
   case PPP_CODE_PROTOCOL_REJ:
      //Process Protocol-Reject packet
      lcpProcessProtocolRej(context, (PppProtocolRejPacket *) packet);
 800b85a:	68b9      	ldr	r1, [r7, #8]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 faeb 	bl	800be38 <lcpProcessProtocolRej>
      break;
 800b862:	e019      	b.n	800b898 <lcpProcessPacket+0x124>
   //Echo-Request packet?
   case PPP_CODE_ECHO_REQ:
      //Process Echo-Request packet
      lcpProcessEchoReq(context, (PppEchoPacket *) packet);
 800b864:	68b9      	ldr	r1, [r7, #8]
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f000 fb52 	bl	800bf10 <lcpProcessEchoReq>
      break;
 800b86c:	e014      	b.n	800b898 <lcpProcessPacket+0x124>
   //Echo-Reply packet?
   case PPP_CODE_ECHO_REP:
      //Process Echo-Reply packet
      lcpProcessEchoRep(context, (PppEchoPacket *) packet);
 800b86e:	68b9      	ldr	r1, [r7, #8]
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 fb71 	bl	800bf58 <lcpProcessEchoRep>
      break;
 800b876:	e00f      	b.n	800b898 <lcpProcessPacket+0x124>
   //Discard-Request packet?
   case PPP_CODE_DISCARD_REQ:
      //Process Discard-Request packet
      lcpProcessDiscardReq(context, (PppDiscardReqPacket *) packet);
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 fb86 	bl	800bf8c <lcpProcessDiscardReq>
      break;
 800b880:	e00a      	b.n	800b898 <lcpProcessPacket+0x124>
   //Unknown code field
   default:
      //The packet is un-interpretable
      lcpProcessUnknownCode(context, packet);
 800b882:	68b9      	ldr	r1, [r7, #8]
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f000 fb9b 	bl	800bfc0 <lcpProcessUnknownCode>
      break;
 800b88a:	bf00      	nop
 800b88c:	e004      	b.n	800b898 <lcpProcessPacket+0x124>
      return;
 800b88e:	bf00      	nop
 800b890:	e002      	b.n	800b898 <lcpProcessPacket+0x124>
      return;
 800b892:	bf00      	nop
 800b894:	e000      	b.n	800b898 <lcpProcessPacket+0x124>
      return;
 800b896:	bf00      	nop
   }
}
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	20000058 	.word	0x20000058
 800b8a4:	0801cbac 	.word	0x0801cbac

0800b8a8 <lcpProcessConfigureReq>:
 * @return Error code
 **/

error_t lcpProcessConfigureReq(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08a      	sub	sp, #40	; 0x28
 800b8ac:	af02      	add	r7, sp, #8
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
   bool_t notRecognizable;
   bool_t notAcceptable;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Configure-Request event\r\n");
 800b8b2:	f7f4 fec5 	bl	8000640 <osSuspendAllTasks>
 800b8b6:	4b3b      	ldr	r3, [pc, #236]	; (800b9a4 <lcpProcessConfigureReq+0xfc>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	2227      	movs	r2, #39	; 0x27
 800b8be:	2101      	movs	r1, #1
 800b8c0:	4839      	ldr	r0, [pc, #228]	; (800b9a8 <lcpProcessConfigureReq+0x100>)
 800b8c2:	f00f fbcb 	bl	801b05c <fwrite>
 800b8c6:	f7f4 fec6 	bl	8000656 <osResumeAllTasks>

   //Initialize variables
   error = NO_ERROR;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	83fb      	strh	r3, [r7, #30]
   notRecognizable = FALSE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	617b      	str	r3, [r7, #20]
   notAcceptable = FALSE;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	613b      	str	r3, [r7, #16]

   //Retrieve the length of the option list
   length = ntohs(configureReqPacket->length) - sizeof(PppConfigurePacket);
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	885b      	ldrh	r3, [r3, #2]
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7f4 fe5f 	bl	80005a0 <swapInt16>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	3b04      	subs	r3, #4
 800b8e6:	61bb      	str	r3, [r7, #24]
   //Point to the first option
   option = (PppOption *) configureReqPacket->options;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	60fb      	str	r3, [r7, #12]

   //Parse configuration options
   while(length > 0)
 800b8ee:	e026      	b.n	800b93e <lcpProcessConfigureReq+0x96>
   {
      //Parse current option
      error = lcpParseOption(context, option, length, NULL);
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	68f9      	ldr	r1, [r7, #12]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fef2 	bl	800c6e0 <lcpParseOption>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	83fb      	strh	r3, [r7, #30]

      //Any error to report?
      if(error == ERROR_INVALID_TYPE)
 800b900:	8bfb      	ldrh	r3, [r7, #30]
 800b902:	2bef      	cmp	r3, #239	; 0xef
 800b904:	d104      	bne.n	800b910 <lcpProcessConfigureReq+0x68>
      {
         //Option not recognizable
         notRecognizable = TRUE;
 800b906:	2301      	movs	r3, #1
 800b908:	617b      	str	r3, [r7, #20]
         //Catch error
         error = NO_ERROR;
 800b90a:	2300      	movs	r3, #0
 800b90c:	83fb      	strh	r3, [r7, #30]
 800b90e:	e00a      	b.n	800b926 <lcpProcessConfigureReq+0x7e>
      }
      else if(error == ERROR_INVALID_VALUE)
 800b910:	8bfb      	ldrh	r3, [r7, #30]
 800b912:	2bf0      	cmp	r3, #240	; 0xf0
 800b914:	d104      	bne.n	800b920 <lcpProcessConfigureReq+0x78>
      {
         //Option not acceptable for configuration
         notAcceptable = TRUE;
 800b916:	2301      	movs	r3, #1
 800b918:	613b      	str	r3, [r7, #16]
         //Catch error
         error = NO_ERROR;
 800b91a:	2300      	movs	r3, #0
 800b91c:	83fb      	strh	r3, [r7, #30]
 800b91e:	e002      	b.n	800b926 <lcpProcessConfigureReq+0x7e>
      }
      else if(error)
 800b920:	8bfb      	ldrh	r3, [r7, #30]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10f      	bne.n	800b946 <lcpProcessConfigureReq+0x9e>
         //Malformed Configure-Request packet
         break;
      }

      //Remaining bytes to process
      length -= option->length;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	785b      	ldrb	r3, [r3, #1]
 800b92a:	461a      	mov	r2, r3
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	1a9b      	subs	r3, r3, r2
 800b930:	61bb      	str	r3, [r7, #24]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	461a      	mov	r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4413      	add	r3, r2
 800b93c:	60fb      	str	r3, [r7, #12]
   while(length > 0)
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1d5      	bne.n	800b8f0 <lcpProcessConfigureReq+0x48>
 800b944:	e000      	b.n	800b948 <lcpProcessConfigureReq+0xa0>
         break;
 800b946:	bf00      	nop
   }

   //Valid Configure-Request packet received from the peer?
   if(!error)
 800b948:	8bfb      	ldrh	r3, [r7, #30]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d125      	bne.n	800b99a <lcpProcessConfigureReq+0xf2>
   {
      //Check flags
      if(notRecognizable)
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00a      	beq.n	800b96a <lcpProcessConfigureReq+0xc2>
      {
         //If some configuration options received in the Configure-Request are not
         //recognizable or not acceptable for negotiation, then the implementation
         //must transmit a Configure-Reject
         pppRcvConfigureReqEvent(context, &context->lcpFsm, &lcpCallbacks,
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b95a:	2304      	movs	r3, #4
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	4a12      	ldr	r2, [pc, #72]	; (800b9ac <lcpProcessConfigureReq+0x104>)
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f002 f9e4 	bl	800dd30 <pppRcvConfigureReqEvent>
 800b968:	e017      	b.n	800b99a <lcpProcessConfigureReq+0xf2>
            configureReqPacket, PPP_CODE_CONFIGURE_REJ);
      }
      else if(notAcceptable)
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00a      	beq.n	800b986 <lcpProcessConfigureReq+0xde>
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         pppRcvConfigureReqEvent(context, &context->lcpFsm, &lcpCallbacks,
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b976:	2303      	movs	r3, #3
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	4a0b      	ldr	r2, [pc, #44]	; (800b9ac <lcpProcessConfigureReq+0x104>)
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f002 f9d6 	bl	800dd30 <pppRcvConfigureReqEvent>
 800b984:	e009      	b.n	800b99a <lcpProcessConfigureReq+0xf2>
      else
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         pppRcvConfigureReqEvent(context, &context->lcpFsm, &lcpCallbacks,
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800b98c:	2302      	movs	r3, #2
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	4a06      	ldr	r2, [pc, #24]	; (800b9ac <lcpProcessConfigureReq+0x104>)
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f002 f9cb 	bl	800dd30 <pppRcvConfigureReqEvent>
            configureReqPacket, PPP_CODE_CONFIGURE_ACK);
      }
   }

   //Return status code
   return error;
 800b99a:	8bfb      	ldrh	r3, [r7, #30]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3720      	adds	r7, #32
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20000058 	.word	0x20000058
 800b9a8:	0801cbd0 	.word	0x0801cbd0
 800b9ac:	0801d564 	.word	0x0801d564

0800b9b0 <lcpProcessConfigureAck>:
 * @return Error code
 **/

error_t lcpProcessConfigureAck(PppContext *context,
   const PppConfigurePacket *configureAckPacket)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Configure-Ack event\r\n");
 800b9ba:	f7f4 fe41 	bl	8000640 <osSuspendAllTasks>
 800b9be:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <lcpProcessConfigureAck+0x4c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	2223      	movs	r2, #35	; 0x23
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	480d      	ldr	r0, [pc, #52]	; (800ba00 <lcpProcessConfigureAck+0x50>)
 800b9ca:	f00f fb47 	bl	801b05c <fwrite>
 800b9ce:	f7f4 fe42 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureAckPacket->identifier != context->lcpFsm.identifier)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	785a      	ldrb	r2, [r3, #1]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d001      	beq.n	800b9e4 <lcpProcessConfigureAck+0x34>
      return ERROR_WRONG_IDENTIFIER;
 800b9e0:	23d6      	movs	r3, #214	; 0xd6
 800b9e2:	e007      	b.n	800b9f4 <lcpProcessConfigureAck+0x44>

   //A valid Configure-Ack packet has been received from the peer
   pppRcvConfigureAckEvent(context, &context->lcpFsm, &lcpCallbacks);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	338c      	adds	r3, #140	; 0x8c
 800b9e8:	4a06      	ldr	r2, [pc, #24]	; (800ba04 <lcpProcessConfigureAck+0x54>)
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f002 fac5 	bl	800df7c <pppRcvConfigureAckEvent>

   //Successful processing
   return NO_ERROR;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	20000058 	.word	0x20000058
 800ba00:	0801cbf8 	.word	0x0801cbf8
 800ba04:	0801d564 	.word	0x0801d564

0800ba08 <lcpProcessConfigureNak>:
 * @return Error code
 **/

error_t lcpProcessConfigureNak(PppContext *context,
   const PppConfigurePacket *configureNakPacket)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("LCP Receive-Configure-Nak event\r\n");
 800ba12:	f7f4 fe15 	bl	8000640 <osSuspendAllTasks>
 800ba16:	4b6b      	ldr	r3, [pc, #428]	; (800bbc4 <lcpProcessConfigureNak+0x1bc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	2221      	movs	r2, #33	; 0x21
 800ba1e:	2101      	movs	r1, #1
 800ba20:	4869      	ldr	r0, [pc, #420]	; (800bbc8 <lcpProcessConfigureNak+0x1c0>)
 800ba22:	f00f fb1b 	bl	801b05c <fwrite>
 800ba26:	f7f4 fe16 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureNakPacket->identifier != context->lcpFsm.identifier)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	785a      	ldrb	r2, [r3, #1]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d001      	beq.n	800ba3c <lcpProcessConfigureNak+0x34>
      return ERROR_WRONG_IDENTIFIER;
 800ba38:	23d6      	movs	r3, #214	; 0xd6
 800ba3a:	e0be      	b.n	800bbba <lcpProcessConfigureNak+0x1b2>

   //Retrieve the length of the option list
   length = ntohs(configureNakPacket->length) - sizeof(PppConfigurePacket);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	885b      	ldrh	r3, [r3, #2]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7f4 fdac 	bl	80005a0 <swapInt16>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	3b04      	subs	r3, #4
 800ba4c:	61fb      	str	r3, [r7, #28]
   //Point to the first option
   option = (PppOption *) configureNakPacket->options;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	3304      	adds	r3, #4
 800ba52:	61bb      	str	r3, [r7, #24]

   //Parse configuration options
   while(length > 0)
 800ba54:	e0a5      	b.n	800bba2 <lcpProcessConfigureNak+0x19a>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	785b      	ldrb	r3, [r3, #1]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d801      	bhi.n	800ba62 <lcpProcessConfigureNak+0x5a>
         return ERROR_INVALID_LENGTH;
 800ba5e:	23eb      	movs	r3, #235	; 0xeb
 800ba60:	e0ab      	b.n	800bbba <lcpProcessConfigureNak+0x1b2>
      if(option->length > length)
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	461a      	mov	r2, r3
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d201      	bcs.n	800ba72 <lcpProcessConfigureNak+0x6a>
         return ERROR_INVALID_LENGTH;
 800ba6e:	23eb      	movs	r3, #235	; 0xeb
 800ba70:	e0a3      	b.n	800bbba <lcpProcessConfigureNak+0x1b2>

      //Maximum-Receive-Unit option?
      if(option->type == LCP_OPTION_MRU)
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d129      	bne.n	800bace <lcpProcessConfigureNak+0xc6>
      {
         //Cast option
         LcpMruOption *mruOption = (LcpMruOption *) option;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	60fb      	str	r3, [r7, #12]

         //Check option length
         if(mruOption->length != sizeof(LcpMruOption))
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	785b      	ldrb	r3, [r3, #1]
 800ba82:	2b04      	cmp	r3, #4
 800ba84:	d001      	beq.n	800ba8a <lcpProcessConfigureNak+0x82>
            return ERROR_INVALID_LENGTH;
 800ba86:	23eb      	movs	r3, #235	; 0xeb
 800ba88:	e097      	b.n	800bbba <lcpProcessConfigureNak+0x1b2>

         //Save value
         context->localConfig.mru = ntohs(mruOption->mru);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	885b      	ldrh	r3, [r3, #2]
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7f4 fd85 	bl	80005a0 <swapInt16>
 800ba96:	4603      	mov	r3, r0
 800ba98:	461a      	mov	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
         //Make sure the MRU is acceptable
         context->localConfig.mru = MAX(context->localConfig.mru, PPP_MIN_MRU);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800baa6:	2b20      	cmp	r3, #32
 800baa8:	bf38      	it	cc
 800baaa:	2320      	movcc	r3, #32
 800baac:	b29a      	uxth	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
         context->localConfig.mru = MIN(context->localConfig.mru, PPP_MAX_MRU);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800baba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800babe:	4293      	cmp	r3, r2
 800bac0:	bf28      	it	cs
 800bac2:	4613      	movcs	r3, r2
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800bacc:	e05d      	b.n	800bb8a <lcpProcessConfigureNak+0x182>
      }
      else if(option->type == LCP_OPTION_ACCM)
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d112      	bne.n	800bafc <lcpProcessConfigureNak+0xf4>
      {
         //Cast option
         LcpAccmOption *accmOption = (LcpAccmOption *) option;
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	613b      	str	r3, [r7, #16]

         //Check option length
         if(accmOption->length != sizeof(LcpAccmOption))
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	785b      	ldrb	r3, [r3, #1]
 800bade:	2b06      	cmp	r3, #6
 800bae0:	d001      	beq.n	800bae6 <lcpProcessConfigureNak+0xde>
            return ERROR_INVALID_LENGTH;
 800bae2:	23eb      	movs	r3, #235	; 0xeb
 800bae4:	e069      	b.n	800bbba <lcpProcessConfigureNak+0x1b2>

         //Save value
         context->localConfig.accm = ntohl(accmOption->accm);
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800baec:	4618      	mov	r0, r3
 800baee:	f7f4 fd65 	bl	80005bc <swapInt32>
 800baf2:	4602      	mov	r2, r0
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800bafa:	e046      	b.n	800bb8a <lcpProcessConfigureNak+0x182>
      }
      //Authentication-Protocol option?
      else if(option->type == LCP_OPTION_AUTH_PROTOCOL)
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b03      	cmp	r3, #3
 800bb02:	d142      	bne.n	800bb8a <lcpProcessConfigureNak+0x182>
      {
         //Cast option
         LcpAuthProtocolOption *authProtocolOption = (LcpAuthProtocolOption *) option;
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	617b      	str	r3, [r7, #20]

         //Check option length
         if(authProtocolOption->length < sizeof(LcpAuthProtocolOption))
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	785b      	ldrb	r3, [r3, #1]
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	d801      	bhi.n	800bb14 <lcpProcessConfigureNak+0x10c>
            return ERROR_INVALID_LENGTH;
 800bb10:	23eb      	movs	r3, #235	; 0xeb
 800bb12:	e052      	b.n	800bbba <lcpProcessConfigureNak+0x1b2>

         //Check the value provided by the peer
         if(ntohs(authProtocolOption->protocol) == PPP_PROTOCOL_PAP)
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	885b      	ldrh	r3, [r3, #2]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7f4 fd40 	bl	80005a0 <swapInt16>
 800bb20:	4603      	mov	r3, r0
 800bb22:	461a      	mov	r2, r3
 800bb24:	f24c 0323 	movw	r3, #49187	; 0xc023
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d10b      	bne.n	800bb44 <lcpProcessConfigureNak+0x13c>
         {
#if (PAP_SUPPORT == ENABLED)
            //Manage authentication policy
            if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f003 0301 	and.w	r3, r3, #1
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d028      	beq.n	800bb8a <lcpProcessConfigureNak+0x182>
            {
               //Select PAP authentication protocol
               context->localConfig.authProtocol = PPP_PROTOCOL_PAP;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f24c 0223 	movw	r2, #49187	; 0xc023
 800bb3e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800bb42:	e022      	b.n	800bb8a <lcpProcessConfigureNak+0x182>
            }
#endif
         }
         else if(ntohs(authProtocolOption->protocol) == PPP_PROTOCOL_CHAP)
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	885b      	ldrh	r3, [r3, #2]
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7f4 fd28 	bl	80005a0 <swapInt16>
 800bb50:	4603      	mov	r3, r0
 800bb52:	461a      	mov	r2, r3
 800bb54:	f24c 2323 	movw	r3, #49699	; 0xc223
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d116      	bne.n	800bb8a <lcpProcessConfigureNak+0x182>
         {
#if (CHAP_SUPPORT == ENABLED)
            //Make sure that the length of the option is correct
            if(authProtocolOption->length > sizeof(LcpAuthProtocolOption))
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	785b      	ldrb	r3, [r3, #1]
 800bb60:	2b04      	cmp	r3, #4
 800bb62:	d912      	bls.n	800bb8a <lcpProcessConfigureNak+0x182>
            {
               //Check the algorithm identifier
               if(authProtocolOption->data[0] == CHAP_ALGO_ID_CHAP_MD5)
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	791b      	ldrb	r3, [r3, #4]
 800bb68:	2b05      	cmp	r3, #5
 800bb6a:	d10e      	bne.n	800bb8a <lcpProcessConfigureNak+0x182>
               {
                  //Manage authentication policy
                  if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	f003 0302 	and.w	r3, r3, #2
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d008      	beq.n	800bb8a <lcpProcessConfigureNak+0x182>
                  {
                     //Select CHAP with MD5 authentication protocol
                     context->localConfig.authProtocol = PPP_PROTOCOL_CHAP;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f24c 2223 	movw	r2, #49699	; 0xc223
 800bb7e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                     context->localConfig.authAlgo = CHAP_ALGO_ID_CHAP_MD5;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2205      	movs	r2, #5
 800bb86:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
#endif
         }
      }

      //Remaining bytes to process
      length -= option->length;
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	785b      	ldrb	r3, [r3, #1]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	1a9b      	subs	r3, r3, r2
 800bb94:	61fb      	str	r3, [r7, #28]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	785b      	ldrb	r3, [r3, #1]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	4413      	add	r3, r2
 800bba0:	61bb      	str	r3, [r7, #24]
   while(length > 0)
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f47f af56 	bne.w	800ba56 <lcpProcessConfigureNak+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->lcpFsm, &lcpCallbacks);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	338c      	adds	r3, #140	; 0x8c
 800bbae:	4a07      	ldr	r2, [pc, #28]	; (800bbcc <lcpProcessConfigureNak+0x1c4>)
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f002 fa38 	bl	800e028 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3720      	adds	r7, #32
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20000058 	.word	0x20000058
 800bbc8:	0801cc1c 	.word	0x0801cc1c
 800bbcc:	0801d564 	.word	0x0801d564

0800bbd0 <lcpProcessConfigureReject>:
 * @return Error code
 **/

error_t lcpProcessConfigureReject(PppContext *context,
   const PppConfigurePacket *configureRejPacket)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Configure-Reject event\r\n");
 800bbda:	f7f4 fd31 	bl	8000640 <osSuspendAllTasks>
 800bbde:	4b4c      	ldr	r3, [pc, #304]	; (800bd10 <lcpProcessConfigureReject+0x140>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	2226      	movs	r2, #38	; 0x26
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	484a      	ldr	r0, [pc, #296]	; (800bd14 <lcpProcessConfigureReject+0x144>)
 800bbea:	f00f fa37 	bl	801b05c <fwrite>
 800bbee:	f7f4 fd32 	bl	8000656 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureRejPacket->identifier != context->lcpFsm.identifier)
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	785a      	ldrb	r2, [r3, #1]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d001      	beq.n	800bc04 <lcpProcessConfigureReject+0x34>
      return ERROR_WRONG_IDENTIFIER;
 800bc00:	23d6      	movs	r3, #214	; 0xd6
 800bc02:	e081      	b.n	800bd08 <lcpProcessConfigureReject+0x138>

   //Retrieve the length of the option list
   length = ntohs(configureRejPacket->length) - sizeof(PppConfigurePacket);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	885b      	ldrh	r3, [r3, #2]
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f4 fcc8 	bl	80005a0 <swapInt16>
 800bc10:	4603      	mov	r3, r0
 800bc12:	3b04      	subs	r3, #4
 800bc14:	60fb      	str	r3, [r7, #12]
   //Point to the first option
   option = (PppOption *) configureRejPacket->options;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	60bb      	str	r3, [r7, #8]

   //Parse configuration options
   while(length > 0)
 800bc1c:	e069      	b.n	800bcf2 <lcpProcessConfigureReject+0x122>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	785b      	ldrb	r3, [r3, #1]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d801      	bhi.n	800bc2a <lcpProcessConfigureReject+0x5a>
         return ERROR_INVALID_LENGTH;
 800bc26:	23eb      	movs	r3, #235	; 0xeb
 800bc28:	e06e      	b.n	800bd08 <lcpProcessConfigureReject+0x138>
      if(option->length > length)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	785b      	ldrb	r3, [r3, #1]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d201      	bcs.n	800bc3a <lcpProcessConfigureReject+0x6a>
         return ERROR_INVALID_LENGTH;
 800bc36:	23eb      	movs	r3, #235	; 0xeb
 800bc38:	e066      	b.n	800bd08 <lcpProcessConfigureReject+0x138>

      //Maximum-Receive-Unit option?
      if(option->type == LCP_OPTION_MRU)
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d109      	bne.n	800bc56 <lcpProcessConfigureReject+0x86>
      {
         //The option is not recognized by the peer
         context->localConfig.mruRejected = TRUE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
         //Restore default value
         context->localConfig.mru = PPP_DEFAULT_MRU;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bc50:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800bc54:	e041      	b.n	800bcda <lcpProcessConfigureReject+0x10a>
      }
      //Async-Control-Character-Map option?
      else if(option->type == LCP_OPTION_ACCM)
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d109      	bne.n	800bc72 <lcpProcessConfigureReject+0xa2>
      {
         //The option is not recognized by the peer
         context->localConfig.accmRejected = TRUE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
         //Restore default value
         context->localConfig.accm = PPP_DEFAULT_ACCM;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc6c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800bc70:	e033      	b.n	800bcda <lcpProcessConfigureReject+0x10a>
      }
      //Authentication-Protocol option?
      else if(option->type == LCP_OPTION_AUTH_PROTOCOL)
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d109      	bne.n	800bc8e <lcpProcessConfigureReject+0xbe>
      {
         //This is an unrecoverable error that terminates the connection
         pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, FALSE);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800bc80:	2300      	movs	r3, #0
 800bc82:	4a25      	ldr	r2, [pc, #148]	; (800bd18 <lcpProcessConfigureReject+0x148>)
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f002 facb 	bl	800e220 <pppRcvCodeRejEvent>
         //Exit immediately
         return ERROR_FAILURE;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e03c      	b.n	800bd08 <lcpProcessConfigureReject+0x138>
      }
      //Magic-Number option?
      else if(option->type == LCP_OPTION_MAGIC_NUMBER)
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	2b05      	cmp	r3, #5
 800bc94:	d108      	bne.n	800bca8 <lcpProcessConfigureReject+0xd8>
      {
         //The option is not recognized by the peer
         context->localConfig.magicNumberRejected = TRUE;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
         //Restore default value
         context->localConfig.magicNumber = PPP_DEFAULT_MAGIC_NUMBER;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bca6:	e018      	b.n	800bcda <lcpProcessConfigureReject+0x10a>
      }
      //Protocol-Field-Compression option?
      else if(option->type == LCP_OPTION_PFC)
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	2b07      	cmp	r3, #7
 800bcae:	d108      	bne.n	800bcc2 <lcpProcessConfigureReject+0xf2>
      {
         //The option is not recognized by the peer
         context->localConfig.pfcRejected = TRUE;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
         //Restore default value
         context->localConfig.pfc = FALSE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 800bcc0:	e00b      	b.n	800bcda <lcpProcessConfigureReject+0x10a>
      }
      //Address-and-Control-Field-Compression option?
      else if(option->type == LCP_OPTION_ACFC)
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	2b08      	cmp	r3, #8
 800bcc8:	d107      	bne.n	800bcda <lcpProcessConfigureReject+0x10a>
      {
         //The option is not recognized by the peer
         context->localConfig.acfcRejected = TRUE;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
         //Restore default value
         context->localConfig.acfc = FALSE;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
      }

      //Remaining bytes to process
      length -= option->length;
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	785b      	ldrb	r3, [r3, #1]
 800bcde:	461a      	mov	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	1a9b      	subs	r3, r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	785b      	ldrb	r3, [r3, #1]
 800bcea:	461a      	mov	r2, r3
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	4413      	add	r3, r2
 800bcf0:	60bb      	str	r3, [r7, #8]
   while(length > 0)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d192      	bne.n	800bc1e <lcpProcessConfigureReject+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->lcpFsm, &lcpCallbacks);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	338c      	adds	r3, #140	; 0x8c
 800bcfc:	4a06      	ldr	r2, [pc, #24]	; (800bd18 <lcpProcessConfigureReject+0x148>)
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f002 f991 	bl	800e028 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20000058 	.word	0x20000058
 800bd14:	0801cc40 	.word	0x0801cc40
 800bd18:	0801d564 	.word	0x0801d564

0800bd1c <lcpProcessTerminateReq>:
 * @return Error code
 **/

error_t lcpProcessTerminateReq(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Terminate-Request event\r\n");
 800bd26:	f7f4 fc8b 	bl	8000640 <osSuspendAllTasks>
 800bd2a:	4b0b      	ldr	r3, [pc, #44]	; (800bd58 <lcpProcessTerminateReq+0x3c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	2227      	movs	r2, #39	; 0x27
 800bd32:	2101      	movs	r1, #1
 800bd34:	4809      	ldr	r0, [pc, #36]	; (800bd5c <lcpProcessTerminateReq+0x40>)
 800bd36:	f00f f991 	bl	801b05c <fwrite>
 800bd3a:	f7f4 fc8c 	bl	8000656 <osResumeAllTasks>

   //The Terminate-Request indicates the desire of the peer to close the connection
   pppRcvTerminateReqEvent(context, &context->lcpFsm,
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	4a06      	ldr	r2, [pc, #24]	; (800bd60 <lcpProcessTerminateReq+0x44>)
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f002 f9c1 	bl	800e0d0 <pppRcvTerminateReqEvent>
      &lcpCallbacks, terminateReqPacket);

   //Successful processing
   return NO_ERROR;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20000058 	.word	0x20000058
 800bd5c:	0801cc68 	.word	0x0801cc68
 800bd60:	0801d564 	.word	0x0801d564

0800bd64 <lcpProcessTerminateAck>:
 * @return Error code
 **/

error_t lcpProcessTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateAckPacket)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Terminate-Ack event\r\n");
 800bd6e:	f7f4 fc67 	bl	8000640 <osSuspendAllTasks>
 800bd72:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <lcpProcessTerminateAck+0x3c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	2223      	movs	r2, #35	; 0x23
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	4809      	ldr	r0, [pc, #36]	; (800bda4 <lcpProcessTerminateAck+0x40>)
 800bd7e:	f00f f96d 	bl	801b05c <fwrite>
 800bd82:	f7f4 fc68 	bl	8000656 <osResumeAllTasks>

   //The Terminate-Ack packet is usually a response to a Terminate-Request
   //packet. This packet may also indicate that the peer is in Closed or
   //Stopped states, and serves to re-synchronize the link configuration
   pppRcvTerminateAckEvent(context, &context->lcpFsm, &lcpCallbacks);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	338c      	adds	r3, #140	; 0x8c
 800bd8a:	4a07      	ldr	r2, [pc, #28]	; (800bda8 <lcpProcessTerminateAck+0x44>)
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f002 f9e6 	bl	800e160 <pppRcvTerminateAckEvent>

   //Successful processing
   return NO_ERROR;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20000058 	.word	0x20000058
 800bda4:	0801cc90 	.word	0x0801cc90
 800bda8:	0801d564 	.word	0x0801d564

0800bdac <lcpProcessCodeRej>:
 * @return Error code
 **/

error_t lcpProcessCodeRej(PppContext *context,
   const PppCodeRejPacket *codeRejPacket)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
   size_t length;
   PppPacket *packet;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Code-Reject event\r\n");
 800bdb6:	f7f4 fc43 	bl	8000640 <osSuspendAllTasks>
 800bdba:	4b1c      	ldr	r3, [pc, #112]	; (800be2c <lcpProcessCodeRej+0x80>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	2221      	movs	r2, #33	; 0x21
 800bdc2:	2101      	movs	r1, #1
 800bdc4:	481a      	ldr	r0, [pc, #104]	; (800be30 <lcpProcessCodeRej+0x84>)
 800bdc6:	f00f f949 	bl	801b05c <fwrite>
 800bdca:	f7f4 fc44 	bl	8000656 <osResumeAllTasks>

   //Point to the rejected packet
   packet = (PppPacket *) codeRejPacket->rejectedPacket;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	60fb      	str	r3, [r7, #12]
   //Retrieve the length of the rejected packet
   length = ntohs(codeRejPacket->length) - sizeof(PppCodeRejPacket);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	885b      	ldrh	r3, [r3, #2]
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7f4 fbe0 	bl	80005a0 <swapInt16>
 800bde0:	4603      	mov	r3, r0
 800bde2:	3b04      	subs	r3, #4
 800bde4:	60bb      	str	r3, [r7, #8]

   //Make sure the length of the rejected packet is valid
   if(length < sizeof(PppPacket))
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d801      	bhi.n	800bdf0 <lcpProcessCodeRej+0x44>
      return ERROR_INVALID_LENGTH;
 800bdec:	23eb      	movs	r3, #235	; 0xeb
 800bdee:	e019      	b.n	800be24 <lcpProcessCodeRej+0x78>

   //Check whether the rejected value is acceptable or catastrophic
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d003      	beq.n	800be00 <lcpProcessCodeRej+0x54>
      packet->code > PPP_CODE_DISCARD_REQ)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 800bdfc:	2b0b      	cmp	r3, #11
 800bdfe:	d908      	bls.n	800be12 <lcpProcessCodeRej+0x66>
   {
      //The RXJ+ event arises when the rejected value is acceptable, such
      //as a Code-Reject of an extended code, or a Protocol-Reject of a
      //NCP. These are within the scope of normal operation
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, TRUE);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800be06:	2301      	movs	r3, #1
 800be08:	4a0a      	ldr	r2, [pc, #40]	; (800be34 <lcpProcessCodeRej+0x88>)
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f002 fa08 	bl	800e220 <pppRcvCodeRejEvent>
 800be10:	e007      	b.n	800be22 <lcpProcessCodeRej+0x76>
   else
   {
      //The RXJ- event arises when the rejected value is catastrophic, such
      //as a Code-Reject of Configure-Request! This event communicates an
      //unrecoverable error that terminates the connection
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, FALSE);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800be18:	2300      	movs	r3, #0
 800be1a:	4a06      	ldr	r2, [pc, #24]	; (800be34 <lcpProcessCodeRej+0x88>)
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f002 f9ff 	bl	800e220 <pppRcvCodeRejEvent>
   }

   //Successful processing
   return NO_ERROR;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	20000058 	.word	0x20000058
 800be30:	0801ccb4 	.word	0x0801ccb4
 800be34:	0801d564 	.word	0x0801d564

0800be38 <lcpProcessProtocolRej>:
 * @return Error code
 **/

error_t lcpProcessProtocolRej(PppContext *context,
   const PppProtocolRejPacket *protocolRejPacket)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
   size_t length;
   uint16_t protocol;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Protocol-Reject event\r\n");
 800be42:	f7f4 fbfd 	bl	8000640 <osSuspendAllTasks>
 800be46:	4b2f      	ldr	r3, [pc, #188]	; (800bf04 <lcpProcessProtocolRej+0xcc>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	2225      	movs	r2, #37	; 0x25
 800be4e:	2101      	movs	r1, #1
 800be50:	482d      	ldr	r0, [pc, #180]	; (800bf08 <lcpProcessProtocolRej+0xd0>)
 800be52:	f00f f903 	bl	801b05c <fwrite>
 800be56:	f7f4 fbfe 	bl	8000656 <osResumeAllTasks>

   //Retrieve the length of the packet
   length = ntohs(protocolRejPacket->length);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	885b      	ldrh	r3, [r3, #2]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	4618      	mov	r0, r3
 800be62:	f7f4 fb9d 	bl	80005a0 <swapInt16>
 800be66:	4603      	mov	r3, r0
 800be68:	60fb      	str	r3, [r7, #12]

   //Make sure the length of the Protocol-Reject packet is valid
   if(length < sizeof(PppProtocolRejPacket))
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b05      	cmp	r3, #5
 800be6e:	d801      	bhi.n	800be74 <lcpProcessProtocolRej+0x3c>
      return ERROR_INVALID_LENGTH;
 800be70:	23eb      	movs	r3, #235	; 0xeb
 800be72:	e042      	b.n	800befa <lcpProcessProtocolRej+0xc2>

   //Convert the Rejected-Protocol field to host byte order
   protocol = ntohs(protocolRejPacket->rejectedProtocol);
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	889b      	ldrh	r3, [r3, #4]
 800be78:	b29b      	uxth	r3, r3
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7f4 fb90 	bl	80005a0 <swapInt16>
 800be80:	4603      	mov	r3, r0
 800be82:	817b      	strh	r3, [r7, #10]

   //Check Rejected-Protocol field value
   switch(protocol)
 800be84:	897b      	ldrh	r3, [r7, #10]
 800be86:	f248 0221 	movw	r2, #32801	; 0x8021
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d01a      	beq.n	800bec4 <lcpProcessProtocolRej+0x8c>
 800be8e:	f248 0221 	movw	r2, #32801	; 0x8021
 800be92:	4293      	cmp	r3, r2
 800be94:	dc04      	bgt.n	800bea0 <lcpProcessProtocolRej+0x68>
 800be96:	2b21      	cmp	r3, #33	; 0x21
 800be98:	d014      	beq.n	800bec4 <lcpProcessProtocolRej+0x8c>
 800be9a:	2b57      	cmp	r3, #87	; 0x57
 800be9c:	d01f      	beq.n	800bede <lcpProcessProtocolRej+0xa6>
      break;

   //Unknown protocol?
   default:
      //Just for sanity's sake...
      break;
 800be9e:	e02b      	b.n	800bef8 <lcpProcessProtocolRej+0xc0>
   switch(protocol)
 800bea0:	f248 0257 	movw	r2, #32855	; 0x8057
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d01a      	beq.n	800bede <lcpProcessProtocolRej+0xa6>
 800bea8:	f24c 0221 	movw	r2, #49185	; 0xc021
 800beac:	4293      	cmp	r3, r2
 800beae:	d000      	beq.n	800beb2 <lcpProcessProtocolRej+0x7a>
      break;
 800beb0:	e022      	b.n	800bef8 <lcpProcessProtocolRej+0xc0>
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, FALSE);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800beb8:	2300      	movs	r3, #0
 800beba:	4a14      	ldr	r2, [pc, #80]	; (800bf0c <lcpProcessProtocolRej+0xd4>)
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f002 f9af 	bl	800e220 <pppRcvCodeRejEvent>
      break;
 800bec2:	e019      	b.n	800bef8 <lcpProcessProtocolRej+0xc0>
      context->ipRejected = TRUE;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, TRUE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800bed2:	2301      	movs	r3, #1
 800bed4:	4a0d      	ldr	r2, [pc, #52]	; (800bf0c <lcpProcessProtocolRej+0xd4>)
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f002 f9a2 	bl	800e220 <pppRcvCodeRejEvent>
      break;
 800bedc:	e00c      	b.n	800bef8 <lcpProcessProtocolRej+0xc0>
      context->ipv6Rejected = TRUE;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, TRUE);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800beec:	2301      	movs	r3, #1
 800beee:	4a07      	ldr	r2, [pc, #28]	; (800bf0c <lcpProcessProtocolRej+0xd4>)
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f002 f995 	bl	800e220 <pppRcvCodeRejEvent>
      break;
 800bef6:	bf00      	nop
   }

   //Successful processing
   return NO_ERROR;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	20000058 	.word	0x20000058
 800bf08:	0801ccd8 	.word	0x0801ccd8
 800bf0c:	0801d564 	.word	0x0801d564

0800bf10 <lcpProcessEchoReq>:
 * @return Error code
 **/

error_t lcpProcessEchoReq(PppContext *context,
   const PppEchoPacket *echoReqPacket)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Echo-Request event\r\n");
 800bf1a:	f7f4 fb91 	bl	8000640 <osSuspendAllTasks>
 800bf1e:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <lcpProcessEchoReq+0x3c>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	2222      	movs	r2, #34	; 0x22
 800bf26:	2101      	movs	r1, #1
 800bf28:	4809      	ldr	r0, [pc, #36]	; (800bf50 <lcpProcessEchoReq+0x40>)
 800bf2a:	f00f f897 	bl	801b05c <fwrite>
 800bf2e:	f7f4 fb92 	bl	8000656 <osResumeAllTasks>

   //An Echo-Reply packet is transmitted to acknowledge the
   //reception of the Echo-Request packet
   pppRcvEchoReqEvent(context, &context->lcpFsm,
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	4a06      	ldr	r2, [pc, #24]	; (800bf54 <lcpProcessEchoReq+0x44>)
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f002 f9df 	bl	800e300 <pppRcvEchoReqEvent>
      &lcpCallbacks, echoReqPacket);

   //Successful processing
   return NO_ERROR;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20000058 	.word	0x20000058
 800bf50:	0801cd00 	.word	0x0801cd00
 800bf54:	0801d564 	.word	0x0801d564

0800bf58 <lcpProcessEchoRep>:
 * @return Error code
 **/

error_t lcpProcessEchoRep(PppContext *context,
   const PppEchoPacket *echoRepPacket)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Echo-Reply event\r\n");
 800bf62:	f7f4 fb6d 	bl	8000640 <osSuspendAllTasks>
 800bf66:	4b07      	ldr	r3, [pc, #28]	; (800bf84 <lcpProcessEchoRep+0x2c>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	2220      	movs	r2, #32
 800bf6e:	2101      	movs	r1, #1
 800bf70:	4805      	ldr	r0, [pc, #20]	; (800bf88 <lcpProcessEchoRep+0x30>)
 800bf72:	f00f f873 	bl	801b05c <fwrite>
 800bf76:	f7f4 fb6e 	bl	8000656 <osResumeAllTasks>

   //Successful processing
   return NO_ERROR;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	20000058 	.word	0x20000058
 800bf88:	0801cd24 	.word	0x0801cd24

0800bf8c <lcpProcessDiscardReq>:
 * @return Error code
 **/

error_t lcpProcessDiscardReq(PppContext *context,
   const PppDiscardReqPacket *discardReqPacket)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Discard-Request event\r\n");
 800bf96:	f7f4 fb53 	bl	8000640 <osSuspendAllTasks>
 800bf9a:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <lcpProcessDiscardReq+0x2c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	2225      	movs	r2, #37	; 0x25
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	4805      	ldr	r0, [pc, #20]	; (800bfbc <lcpProcessDiscardReq+0x30>)
 800bfa6:	f00f f859 	bl	801b05c <fwrite>
 800bfaa:	f7f4 fb54 	bl	8000656 <osResumeAllTasks>

   //The receiver must silently discard any Discard-Request that it receives
   return NO_ERROR;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20000058 	.word	0x20000058
 800bfbc:	0801cd48 	.word	0x0801cd48

0800bfc0 <lcpProcessUnknownCode>:
 * @return Error code
 **/

error_t lcpProcessUnknownCode(PppContext *context,
   const PppPacket *packet)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Unknown-Code event\r\n");
 800bfca:	f7f4 fb39 	bl	8000640 <osSuspendAllTasks>
 800bfce:	4b0b      	ldr	r3, [pc, #44]	; (800bffc <lcpProcessUnknownCode+0x3c>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	2222      	movs	r2, #34	; 0x22
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	4809      	ldr	r0, [pc, #36]	; (800c000 <lcpProcessUnknownCode+0x40>)
 800bfda:	f00f f83f 	bl	801b05c <fwrite>
 800bfde:	f7f4 fb3a 	bl	8000656 <osResumeAllTasks>

   //This event occurs when an un-interpretable packet is received from
   //the peer. A Code-Reject packet is sent in response
   pppRcvUnknownCodeEvent(context, &context->lcpFsm, &lcpCallbacks, packet);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	4a06      	ldr	r2, [pc, #24]	; (800c004 <lcpProcessUnknownCode+0x44>)
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f002 f8ff 	bl	800e1f0 <pppRcvUnknownCodeEvent>

   //Successful processing
   return NO_ERROR;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	20000058 	.word	0x20000058
 800c000:	0801cd70 	.word	0x0801cd70
 800c004:	0801d564 	.word	0x0801d564

0800c008 <lcpProcessUnknownProtocol>:
 * @return Error code
 **/

error_t lcpProcessUnknownProtocol(PppContext *context,
   uint16_t protocol, const uint8_t *information, size_t length)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af02      	add	r7, sp, #8
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	607a      	str	r2, [r7, #4]
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	460b      	mov	r3, r1
 800c016:	817b      	strh	r3, [r7, #10]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Unknown-Protocol event\r\n");
 800c018:	f7f4 fb12 	bl	8000640 <osSuspendAllTasks>
 800c01c:	4b12      	ldr	r3, [pc, #72]	; (800c068 <lcpProcessUnknownProtocol+0x60>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	2226      	movs	r2, #38	; 0x26
 800c024:	2101      	movs	r1, #1
 800c026:	4811      	ldr	r0, [pc, #68]	; (800c06c <lcpProcessUnknownProtocol+0x64>)
 800c028:	f00f f818 	bl	801b05c <fwrite>
 800c02c:	f7f4 fb13 	bl	8000656 <osResumeAllTasks>

   //The peer is attempting to use a protocol which is unsupported
   if(context->lcpFsm.state == PPP_STATE_9_OPENED)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c036:	2b09      	cmp	r3, #9
 800c038:	d111      	bne.n	800c05e <lcpProcessUnknownProtocol+0x56>
   {
      //The Identifier field must be changed for each Protocol-Reject sent
      context->lcpFsm.identifier++;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c040:	3301      	adds	r3, #1
 800c042:	b2da      	uxtb	r2, r3
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

      //If the LCP automaton is in the Opened state, then this must be
      //reported back to the peer by transmitting a Protocol-Reject
      pppSendProtocolRej(context, context->lcpFsm.identifier,
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 800c050:	897a      	ldrh	r2, [r7, #10]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f002 fe8d 	bl	800ed78 <pppSendProtocolRej>
         protocol, information, length);
   }

   //Successful processing
   return NO_ERROR;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	20000058 	.word	0x20000058
 800c06c:	0801cd94 	.word	0x0801cd94

0800c070 <lcpThisLayerUp>:
 * @brief This-Layer-Up callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerUp(PppContext *context)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Up callback\r\n");
 800c078:	f7f4 fae2 	bl	8000640 <osSuspendAllTasks>
 800c07c:	4b32      	ldr	r3, [pc, #200]	; (800c148 <lcpThisLayerUp+0xd8>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	221c      	movs	r2, #28
 800c084:	2101      	movs	r1, #1
 800c086:	4831      	ldr	r0, [pc, #196]	; (800c14c <lcpThisLayerUp+0xdc>)
 800c088:	f00e ffe8 	bl	801b05c <fwrite>
 800c08c:	f7f4 fae3 	bl	8000656 <osResumeAllTasks>

   //Check whether the other end of the PPP link is being authenticated
   if(context->localConfig.authProtocol != 0)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800c096:	2b00      	cmp	r3, #0
 800c098:	d004      	beq.n	800c0a4 <lcpThisLayerUp+0x34>
      context->localAuthDone = FALSE;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800c0a2:	e003      	b.n	800c0ac <lcpThisLayerUp+0x3c>
   else
      context->localAuthDone = TRUE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

   //Check whether the other end of the PPP link is the authenticator
   if(context->peerConfig.authProtocol != 0)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d004      	beq.n	800c0c0 <lcpThisLayerUp+0x50>
      context->peerAuthDone = FALSE;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c0be:	e003      	b.n	800c0c8 <lcpThisLayerUp+0x58>
   else
      context->peerAuthDone = TRUE;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if (PAP_SUPPORT == ENABLED)
   //PAP authentication required?
   if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP ||
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800c0ce:	f24c 0223 	movw	r2, #49187	; 0xc023
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d006      	beq.n	800c0e4 <lcpThisLayerUp+0x74>
      context->peerConfig.authProtocol == PPP_PROTOCOL_PAP)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
   if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP ||
 800c0dc:	f24c 0223 	movw	r2, #49187	; 0xc023
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d106      	bne.n	800c0f2 <lcpThisLayerUp+0x82>
   {
      //Advance to the Authentication phase
      context->pppPhase = PPP_PHASE_AUTHENTICATE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2202      	movs	r2, #2
 800c0e8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      //Start PAP authentication process
      papStartAuth(context);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fd51 	bl	800cb94 <papStartAuth>
   }
#endif
#if (CHAP_SUPPORT == ENABLED)
   //CHAP authentication required?
   if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP ||
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800c0f8:	f24c 2223 	movw	r2, #49699	; 0xc223
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d006      	beq.n	800c10e <lcpThisLayerUp+0x9e>
      context->peerConfig.authProtocol == PPP_PROTOCOL_CHAP)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
   if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP ||
 800c106:	f24c 2223 	movw	r2, #49699	; 0xc223
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d106      	bne.n	800c11c <lcpThisLayerUp+0xac>
   {
      //Advance to the Authentication phase
      context->pppPhase = PPP_PHASE_AUTHENTICATE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2202      	movs	r2, #2
 800c112:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      //Start CHAP authentication process
      chapStartAuth(context);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7fd ff96 	bl	800a048 <chapStartAuth>
   }
#endif

   //Check whether PPP authentication is complete
   if(context->localAuthDone && context->peerAuthDone)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00b      	beq.n	800c13e <lcpThisLayerUp+0xce>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d006      	beq.n	800c13e <lcpThisLayerUp+0xce>
   {
      //Advance to the Network phase
      context->pppPhase = PPP_PHASE_NETWORK;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2203      	movs	r2, #3
 800c134:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
      //IPCP Open event
      ipcpOpen(context);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7fe fbb9 	bl	800a8b0 <ipcpOpen>
#if (IPV6_SUPPORT == ENABLED)
      //IPV6CP Open event
      ipv6cpOpen(context);
#endif
   }
}
 800c13e:	bf00      	nop
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	20000058 	.word	0x20000058
 800c14c:	0801cdbc 	.word	0x0801cdbc

0800c150 <lcpThisLayerDown>:
 * @brief This-Layer-Down callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerDown(PppContext *context)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Down callback\r\n");
 800c158:	f7f4 fa72 	bl	8000640 <osSuspendAllTasks>
 800c15c:	4b0d      	ldr	r3, [pc, #52]	; (800c194 <lcpThisLayerDown+0x44>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	221e      	movs	r2, #30
 800c164:	2101      	movs	r1, #1
 800c166:	480c      	ldr	r0, [pc, #48]	; (800c198 <lcpThisLayerDown+0x48>)
 800c168:	f00e ff78 	bl	801b05c <fwrite>
 800c16c:	f7f4 fa73 	bl	8000656 <osResumeAllTasks>

   //Advance to the Terminate phase
   context->pppPhase = PPP_PHASE_TERMINATE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2204      	movs	r2, #4
 800c174:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
   //IPCP Close event
   ipcpClose(context);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7fe fbc3 	bl	800a904 <ipcpClose>
   ipv6cpClose(context);
#endif

#if (PAP_SUPPORT == ENABLED)
   //Abort PAP authentication process
   papAbortAuth(context);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fd3e 	bl	800cc00 <papAbortAuth>
#endif

#if (CHAP_SUPPORT == ENABLED)
   //Abort CHAP authentication process
   chapAbortAuth(context);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7fd ff95 	bl	800a0b4 <chapAbortAuth>
#endif
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20000058 	.word	0x20000058
 800c198:	0801cddc 	.word	0x0801cddc

0800c19c <lcpThisLayerStarted>:
 * @brief This-Layer-Started callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerStarted(PppContext *context)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Started callback\r\n");
 800c1a4:	f7f4 fa4c 	bl	8000640 <osSuspendAllTasks>
 800c1a8:	4b06      	ldr	r3, [pc, #24]	; (800c1c4 <lcpThisLayerStarted+0x28>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	2221      	movs	r2, #33	; 0x21
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	4805      	ldr	r0, [pc, #20]	; (800c1c8 <lcpThisLayerStarted+0x2c>)
 800c1b4:	f00e ff52 	bl	801b05c <fwrite>
 800c1b8:	f7f4 fa4d 	bl	8000656 <osResumeAllTasks>
}
 800c1bc:	bf00      	nop
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	20000058 	.word	0x20000058
 800c1c8:	0801cdfc 	.word	0x0801cdfc

0800c1cc <lcpThisLayerFinished>:
 * @brief This-Layer-Finished callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerFinished(PppContext *context)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Finished callback\r\n");
 800c1d4:	f7f4 fa34 	bl	8000640 <osSuspendAllTasks>
 800c1d8:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <lcpThisLayerFinished+0x4c>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	2222      	movs	r2, #34	; 0x22
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	480e      	ldr	r0, [pc, #56]	; (800c21c <lcpThisLayerFinished+0x50>)
 800c1e4:	f00e ff3a 	bl	801b05c <fwrite>
 800c1e8:	f7f4 fa35 	bl	8000656 <osResumeAllTasks>

   //The link is no longer available for traffic
   pppCloseEvent(context, &context->lcpFsm, &lcpCallbacks);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	338c      	adds	r3, #140	; 0x8c
 800c1f0:	4a0b      	ldr	r2, [pc, #44]	; (800c220 <lcpThisLayerFinished+0x54>)
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 fcef 	bl	800dbd8 <pppCloseEvent>
   //The lower layer is no longer ready to carry packets
   pppDownEvent(context, &context->lcpFsm, &lcpCallbacks);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	338c      	adds	r3, #140	; 0x8c
 800c1fe:	4a08      	ldr	r2, [pc, #32]	; (800c220 <lcpThisLayerFinished+0x54>)
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f001 fc60 	bl	800dac8 <pppDownEvent>

   //Advance to the Link Dead phase
   context->pppPhase = PPP_PHASE_DEAD;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	20000058 	.word	0x20000058
 800c21c:	0801ce20 	.word	0x0801ce20
 800c220:	0801d564 	.word	0x0801d564

0800c224 <lcpInitRestartCount>:
 * @param[in] context PPP context
 * @param[in] value Restart counter value
 **/

void lcpInitRestartCount(PppContext *context, uint_t value)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Initialize-Restart-Count callback\r\n");
 800c22e:	f7f4 fa07 	bl	8000640 <osSuspendAllTasks>
 800c232:	4b09      	ldr	r3, [pc, #36]	; (800c258 <lcpInitRestartCount+0x34>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	2227      	movs	r2, #39	; 0x27
 800c23a:	2101      	movs	r1, #1
 800c23c:	4807      	ldr	r0, [pc, #28]	; (800c25c <lcpInitRestartCount+0x38>)
 800c23e:	f00e ff0d 	bl	801b05c <fwrite>
 800c242:	f7f4 fa08 	bl	8000656 <osResumeAllTasks>

   //Initialize restart counter
   context->lcpFsm.restartCounter = value;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800c24e:	bf00      	nop
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20000058 	.word	0x20000058
 800c25c:	0801ce44 	.word	0x0801ce44

0800c260 <lcpZeroRestartCount>:
 * @brief Zero-Restart-Count callback function
 * @param[in] context PPP context
 **/

void lcpZeroRestartCount(PppContext *context)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP Zero-Restart-Count callback\r\n");
 800c268:	f7f4 f9ea 	bl	8000640 <osSuspendAllTasks>
 800c26c:	4b0b      	ldr	r3, [pc, #44]	; (800c29c <lcpZeroRestartCount+0x3c>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	2221      	movs	r2, #33	; 0x21
 800c274:	2101      	movs	r1, #1
 800c276:	480a      	ldr	r0, [pc, #40]	; (800c2a0 <lcpZeroRestartCount+0x40>)
 800c278:	f00e fef0 	bl	801b05c <fwrite>
 800c27c:	f7f4 f9eb 	bl	8000656 <osResumeAllTasks>

   //Zero restart counter
   context->lcpFsm.restartCounter = 0;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   //The receiver of a Terminate-Request should wait for the peer to
   //disconnect, and must not disconnect until at least one Restart
   //time has passed after sending a Terminate-Ack
   context->lcpFsm.timestamp = osGetSystemTime();
 800c288:	f7f4 faa2 	bl	80007d0 <osGetSystemTime>
 800c28c:	4602      	mov	r2, r0
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800c294:	bf00      	nop
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	20000058 	.word	0x20000058
 800c2a0:	0801ce6c 	.word	0x0801ce6c

0800c2a4 <lcpSendConfigureReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpSendConfigureReq(PppContext *context)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b08a      	sub	sp, #40	; 0x28
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppConfigurePacket *configureReqPacket;

   //Debug message
   TRACE_INFO("LCP Send-Configure-Request callback\r\n");
 800c2ac:	f7f4 f9c8 	bl	8000640 <osSuspendAllTasks>
 800c2b0:	4b76      	ldr	r3, [pc, #472]	; (800c48c <lcpSendConfigureReq+0x1e8>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	2225      	movs	r2, #37	; 0x25
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	4875      	ldr	r0, [pc, #468]	; (800c490 <lcpSendConfigureReq+0x1ec>)
 800c2bc:	f00e fece 	bl	801b05c <fwrite>
 800c2c0:	f7f4 f9c9 	bl	8000656 <osResumeAllTasks>

   //Allocate a buffer memory to hold the Configure-Request packet
   buffer = pppAllocBuffer(PPP_MAX_CONF_REQ_SIZE, &offset);
 800c2c4:	f107 0314 	add.w	r3, r7, #20
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	2080      	movs	r0, #128	; 0x80
 800c2cc:	f001 fbc0 	bl	800da50 <pppAllocBuffer>
 800c2d0:	6278      	str	r0, [r7, #36]	; 0x24
   //Failed to allocate memory?
   if(buffer == NULL)
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <lcpSendConfigureReq+0x38>
      return ERROR_OUT_OF_MEMORY;
 800c2d8:	2364      	movs	r3, #100	; 0x64
 800c2da:	e0d2      	b.n	800c482 <lcpSendConfigureReq+0x1de>

   //Point to the Configure-Request packet
   configureReqPacket = netBufferAt(buffer, offset);
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	4619      	mov	r1, r3
 800c2e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2e2:	f7f6 f9bd 	bl	8002660 <netBufferAt>
 800c2e6:	6238      	str	r0, [r7, #32]

   //Format packet header
   configureReqPacket->code = PPP_CODE_CONFIGURE_REQ;
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	701a      	strb	r2, [r3, #0]
   configureReqPacket->identifier = ++context->lcpFsm.identifier;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	705a      	strb	r2, [r3, #1]
   configureReqPacket->length = sizeof(PppConfigurePacket);
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f042 0204 	orr.w	r2, r2, #4
 800c310:	709a      	strb	r2, [r3, #2]
 800c312:	2200      	movs	r2, #0
 800c314:	70da      	strb	r2, [r3, #3]

   //Make sure the Maximum-Receive-Unit option has not been
   //previously rejected
   if(!context->localConfig.mruRejected)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10e      	bne.n	800c33e <lcpSendConfigureReq+0x9a>
   {
      //Convert MRU to network byte order
      uint16_t value = htons(context->localConfig.mru);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800c326:	4618      	mov	r0, r3
 800c328:	f7f4 f93a 	bl	80005a0 <swapInt16>
 800c32c:	4603      	mov	r3, r0
 800c32e:	827b      	strh	r3, [r7, #18]
      //Add option
      pppAddOption(configureReqPacket, LCP_OPTION_MRU, &value, sizeof(uint16_t));
 800c330:	f107 0212 	add.w	r2, r7, #18
 800c334:	2302      	movs	r3, #2
 800c336:	2101      	movs	r1, #1
 800c338:	6a38      	ldr	r0, [r7, #32]
 800c33a:	f002 fdfd 	bl	800ef38 <pppAddOption>
   }

   //Make sure the Async-Control-Character-Map option has not been
   //previously rejected
   if(!context->localConfig.accmRejected)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10e      	bne.n	800c366 <lcpSendConfigureReq+0xc2>
   {
      //Convert ACCM to network byte order
      uint32_t value = htonl(context->localConfig.accm);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c34e:	4618      	mov	r0, r3
 800c350:	f7f4 f934 	bl	80005bc <swapInt32>
 800c354:	4603      	mov	r3, r0
 800c356:	60fb      	str	r3, [r7, #12]
      //Add option
      pppAddOption(configureReqPacket, LCP_OPTION_ACCM, &value, sizeof(uint32_t));
 800c358:	f107 020c 	add.w	r2, r7, #12
 800c35c:	2304      	movs	r3, #4
 800c35e:	2102      	movs	r1, #2
 800c360:	6a38      	ldr	r0, [r7, #32]
 800c362:	f002 fde9 	bl	800ef38 <pppAddOption>
   }

   //Make sure the Authentication-Protocol option has not been
   //previously rejected
   if(!context->localConfig.authProtocolRejected)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d128      	bne.n	800c3c2 <lcpSendConfigureReq+0x11e>
   {
      uint8_t value[3];

      //PAP authentication protocol?
      if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800c376:	f24c 0223 	movw	r2, #49187	; 0xc023
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d10b      	bne.n	800c396 <lcpSendConfigureReq+0xf2>
      {
         //Format Authentication-Protocol option
         value[0] = MSB(PPP_PROTOCOL_PAP);
 800c37e:	23c0      	movs	r3, #192	; 0xc0
 800c380:	723b      	strb	r3, [r7, #8]
         value[1] = LSB(PPP_PROTOCOL_PAP);
 800c382:	2323      	movs	r3, #35	; 0x23
 800c384:	727b      	strb	r3, [r7, #9]

         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_AUTH_PROTOCOL, &value, 2);
 800c386:	f107 0208 	add.w	r2, r7, #8
 800c38a:	2302      	movs	r3, #2
 800c38c:	2103      	movs	r1, #3
 800c38e:	6a38      	ldr	r0, [r7, #32]
 800c390:	f002 fdd2 	bl	800ef38 <pppAddOption>
 800c394:	e015      	b.n	800c3c2 <lcpSendConfigureReq+0x11e>
      }
      //CHAP authentication protocol?
      else if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800c39c:	f24c 2223 	movw	r2, #49699	; 0xc223
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d10e      	bne.n	800c3c2 <lcpSendConfigureReq+0x11e>
      {
         //Format Authentication-Protocol option
         value[0] = MSB(PPP_PROTOCOL_CHAP);
 800c3a4:	23c2      	movs	r3, #194	; 0xc2
 800c3a6:	723b      	strb	r3, [r7, #8]
         value[1] = LSB(PPP_PROTOCOL_CHAP);
 800c3a8:	2323      	movs	r3, #35	; 0x23
 800c3aa:	727b      	strb	r3, [r7, #9]
         value[2] = context->localConfig.authAlgo;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800c3b2:	72bb      	strb	r3, [r7, #10]

         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_AUTH_PROTOCOL, &value, 3);
 800c3b4:	f107 0208 	add.w	r2, r7, #8
 800c3b8:	2303      	movs	r3, #3
 800c3ba:	2103      	movs	r1, #3
 800c3bc:	6a38      	ldr	r0, [r7, #32]
 800c3be:	f002 fdbb 	bl	800ef38 <pppAddOption>
      }
   }

   //Make sure the Protocol-Field-Compression option has not been
   //previously rejected
   if(!context->localConfig.pfcRejected)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10a      	bne.n	800c3e2 <lcpSendConfigureReq+0x13e>
   {
      //Check whether compression of the Protocol field is supported
      if(context->localConfig.pfc)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d005      	beq.n	800c3e2 <lcpSendConfigureReq+0x13e>
      {
         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_PFC, NULL, 0);
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2107      	movs	r1, #7
 800c3dc:	6a38      	ldr	r0, [r7, #32]
 800c3de:	f002 fdab 	bl	800ef38 <pppAddOption>
      }
   }

   //Make sure the Address-and-Control-Field-Compression option has not been
   //previously rejected
   if(!context->localConfig.acfcRejected)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <lcpSendConfigureReq+0x15e>
   {
      //Check whether compression of the Address and Control fields is supported
      if(context->localConfig.acfc)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d005      	beq.n	800c402 <lcpSendConfigureReq+0x15e>
      {
         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_ACFC, NULL, 0);
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	2108      	movs	r1, #8
 800c3fc:	6a38      	ldr	r0, [r7, #32]
 800c3fe:	f002 fd9b 	bl	800ef38 <pppAddOption>
      }
   }

   //Save packet length
   length = configureReqPacket->length;
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	885b      	ldrh	r3, [r3, #2]
 800c406:	b29b      	uxth	r3, r3
 800c408:	61fb      	str	r3, [r7, #28]
   //Convert length field to network byte order
   configureReqPacket->length = htons(length);
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	4618      	mov	r0, r3
 800c410:	f7f4 f8c6 	bl	80005a0 <swapInt16>
 800c414:	4603      	mov	r3, r0
 800c416:	461a      	mov	r2, r3
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	805a      	strh	r2, [r3, #2]

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	4413      	add	r3, r2
 800c422:	4619      	mov	r1, r3
 800c424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c426:	f7f6 f875 	bl	8002514 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending Configure-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800c42a:	f7f4 f909 	bl	8000640 <osSuspendAllTasks>
 800c42e:	4b17      	ldr	r3, [pc, #92]	; (800c48c <lcpSendConfigureReq+0x1e8>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	69fa      	ldr	r2, [r7, #28]
 800c436:	4917      	ldr	r1, [pc, #92]	; (800c494 <lcpSendConfigureReq+0x1f0>)
 800c438:	4618      	mov	r0, r3
 800c43a:	f00e fdaf 	bl	801af9c <fiprintf>
 800c43e:	f7f4 f90a 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) configureReqPacket, length, PPP_PROTOCOL_LCP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_LCP);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6998      	ldr	r0, [r3, #24]
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	f24c 0321 	movw	r3, #49185	; 0xc021
 800c44c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c44e:	f001 f989 	bl	800d764 <pppSendFrame>
 800c452:	4603      	mov	r3, r0
 800c454:	837b      	strh	r3, [r7, #26]

   //The restart counter is decremented each time a Configure-Request is sent
   if(context->lcpFsm.restartCounter > 0)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d006      	beq.n	800c46e <lcpSendConfigureReq+0x1ca>
      context->lcpFsm.restartCounter--;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c466:	1e5a      	subs	r2, r3, #1
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   //Save the time at which the packet was sent
   context->lcpFsm.timestamp = osGetSystemTime();
 800c46e:	f7f4 f9af 	bl	80007d0 <osGetSystemTime>
 800c472:	4602      	mov	r2, r0
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Free previously allocated memory block
   netBufferFree(buffer);
 800c47a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c47c:	f7f6 f819 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800c480:	8b7b      	ldrh	r3, [r7, #26]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3728      	adds	r7, #40	; 0x28
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	20000058 	.word	0x20000058
 800c490:	0801ce90 	.word	0x0801ce90
 800c494:	0801ceb8 	.word	0x0801ceb8

0800c498 <lcpSendConfigureAck>:
 * @return Error code
 **/

error_t lcpSendConfigureAck(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Configure-Ack callback\r\n");
 800c4a2:	f7f4 f8cd 	bl	8000640 <osSuspendAllTasks>
 800c4a6:	4b0b      	ldr	r3, [pc, #44]	; (800c4d4 <lcpSendConfigureAck+0x3c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	2221      	movs	r2, #33	; 0x21
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	4809      	ldr	r0, [pc, #36]	; (800c4d8 <lcpSendConfigureAck+0x40>)
 800c4b2:	f00e fdd3 	bl	801b05c <fwrite>
 800c4b6:	f7f4 f8ce 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Ack packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f002 fa80 	bl	800e9c8 <pppSendConfigureAckNak>
 800c4c8:	4603      	mov	r3, r0
      PPP_PROTOCOL_LCP, PPP_CODE_CONFIGURE_ACK);
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20000058 	.word	0x20000058
 800c4d8:	0801ceec 	.word	0x0801ceec

0800c4dc <lcpSendConfigureNak>:
 * @return Error code
 **/

error_t lcpSendConfigureNak(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Configure-Nak callback\r\n");
 800c4e6:	f7f4 f8ab 	bl	8000640 <osSuspendAllTasks>
 800c4ea:	4b0b      	ldr	r3, [pc, #44]	; (800c518 <lcpSendConfigureNak+0x3c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	2221      	movs	r2, #33	; 0x21
 800c4f2:	2101      	movs	r1, #1
 800c4f4:	4809      	ldr	r0, [pc, #36]	; (800c51c <lcpSendConfigureNak+0x40>)
 800c4f6:	f00e fdb1 	bl	801b05c <fwrite>
 800c4fa:	f7f4 f8ac 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Nak packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800c4fe:	2303      	movs	r3, #3
 800c500:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f002 fa5e 	bl	800e9c8 <pppSendConfigureAckNak>
 800c50c:	4603      	mov	r3, r0
      PPP_PROTOCOL_LCP, PPP_CODE_CONFIGURE_NAK);
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20000058 	.word	0x20000058
 800c51c:	0801cf10 	.word	0x0801cf10

0800c520 <lcpSendConfigureRej>:
 * @return Error code
 **/

error_t lcpSendConfigureRej(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Configure-Reject callback\r\n");
 800c52a:	f7f4 f889 	bl	8000640 <osSuspendAllTasks>
 800c52e:	4b0b      	ldr	r3, [pc, #44]	; (800c55c <lcpSendConfigureRej+0x3c>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	2224      	movs	r2, #36	; 0x24
 800c536:	2101      	movs	r1, #1
 800c538:	4809      	ldr	r0, [pc, #36]	; (800c560 <lcpSendConfigureRej+0x40>)
 800c53a:	f00e fd8f 	bl	801b05c <fwrite>
 800c53e:	f7f4 f88a 	bl	8000656 <osResumeAllTasks>

   //Send Configure-Reject packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800c542:	2304      	movs	r3, #4
 800c544:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c548:	6839      	ldr	r1, [r7, #0]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f002 fa3c 	bl	800e9c8 <pppSendConfigureAckNak>
 800c550:	4603      	mov	r3, r0
      PPP_PROTOCOL_LCP, PPP_CODE_CONFIGURE_REJ);
}
 800c552:	4618      	mov	r0, r3
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	20000058 	.word	0x20000058
 800c560:	0801cf34 	.word	0x0801cf34

0800c564 <lcpSendTerminateReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpSendTerminateReq(PppContext *context)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
   error_t error;

   //Debug message
   TRACE_INFO("LCP Send-Terminate-Request callback\r\n");
 800c56c:	f7f4 f868 	bl	8000640 <osSuspendAllTasks>
 800c570:	4b19      	ldr	r3, [pc, #100]	; (800c5d8 <lcpSendTerminateReq+0x74>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	2225      	movs	r2, #37	; 0x25
 800c578:	2101      	movs	r1, #1
 800c57a:	4818      	ldr	r0, [pc, #96]	; (800c5dc <lcpSendTerminateReq+0x78>)
 800c57c:	f00e fd6e 	bl	801b05c <fwrite>
 800c580:	f7f4 f869 	bl	8000656 <osResumeAllTasks>

   //On transmission, the Identifier field must be changed
   context->lcpFsm.identifier++;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c58a:	3301      	adds	r3, #1
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

   //Send Terminate-Request packet
   error = pppSendTerminateReq(context, context->lcpFsm.identifier, PPP_PROTOCOL_LCP);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c59a:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f002 fae5 	bl	800eb70 <pppSendTerminateReq>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	81fb      	strh	r3, [r7, #14]

   //The restart counter is decremented each time a Terminate-Request is sent
   if(context->lcpFsm.restartCounter > 0)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d006      	beq.n	800c5c2 <lcpSendTerminateReq+0x5e>
      context->lcpFsm.restartCounter--;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5ba:	1e5a      	subs	r2, r3, #1
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   //Save the time at which the packet was sent
   context->lcpFsm.timestamp = osGetSystemTime();
 800c5c2:	f7f4 f905 	bl	80007d0 <osGetSystemTime>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Return status code
   return error;
 800c5ce:	89fb      	ldrh	r3, [r7, #14]
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	20000058 	.word	0x20000058
 800c5dc:	0801cf5c 	.word	0x0801cf5c

0800c5e0 <lcpSendTerminateAck>:
 * @return Error code
 **/

error_t lcpSendTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
   uint8_t identifier;

   //Debug message
   TRACE_INFO("LCP Send-Terminate-Ack callback\r\n");
 800c5ea:	f7f4 f829 	bl	8000640 <osSuspendAllTasks>
 800c5ee:	4b14      	ldr	r3, [pc, #80]	; (800c640 <lcpSendTerminateAck+0x60>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	2221      	movs	r2, #33	; 0x21
 800c5f6:	2101      	movs	r1, #1
 800c5f8:	4812      	ldr	r0, [pc, #72]	; (800c644 <lcpSendTerminateAck+0x64>)
 800c5fa:	f00e fd2f 	bl	801b05c <fwrite>
 800c5fe:	f7f4 f82a 	bl	8000656 <osResumeAllTasks>

   //Check whether this Terminate-Ack acknowledges the reception of a
   //Terminate-Request packet
   if(terminateReqPacket != NULL)
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <lcpSendTerminateAck+0x30>
   {
      //The Identifier field of the Terminate-Request is copied into the
      //Identifier field of the Terminate-Ack packet
      identifier = terminateReqPacket->identifier;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	785b      	ldrb	r3, [r3, #1]
 800c60c:	73fb      	strb	r3, [r7, #15]
 800c60e:	e00b      	b.n	800c628 <lcpSendTerminateAck+0x48>
   }
   else
   {
      //This Terminate-Ack packet serves to synchronize the automatons
      identifier = ++context->lcpFsm.identifier;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c616:	3301      	adds	r3, #1
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c626:	73fb      	strb	r3, [r7, #15]
   }

   //Send Terminate-Ack packet
   return pppSendTerminateAck(context, identifier, PPP_PROTOCOL_LCP);
 800c628:	7bfb      	ldrb	r3, [r7, #15]
 800c62a:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f002 fae9 	bl	800ec08 <pppSendTerminateAck>
 800c636:	4603      	mov	r3, r0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	20000058 	.word	0x20000058
 800c644:	0801cf84 	.word	0x0801cf84

0800c648 <lcpSendCodeRej>:
 * @param[in] packet Un-interpretable packet received from the peer
 * @return Error code
 **/

error_t lcpSendCodeRej(PppContext *context, const PppPacket *packet)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Code-Reject callback\r\n");
 800c652:	f7f3 fff5 	bl	8000640 <osSuspendAllTasks>
 800c656:	4b10      	ldr	r3, [pc, #64]	; (800c698 <lcpSendCodeRej+0x50>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	221f      	movs	r2, #31
 800c65e:	2101      	movs	r1, #1
 800c660:	480e      	ldr	r0, [pc, #56]	; (800c69c <lcpSendCodeRej+0x54>)
 800c662:	f00e fcfb 	bl	801b05c <fwrite>
 800c666:	f7f3 fff6 	bl	8000656 <osResumeAllTasks>

   //The Identifier field must be changed for each Code-Reject sent
   context->lcpFsm.identifier++;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c670:	3301      	adds	r3, #1
 800c672:	b2da      	uxtb	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

   //Send Code-Reject packet
   return pppSendCodeRej(context, packet, context->lcpFsm.identifier, PPP_PROTOCOL_LCP);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800c680:	f24c 0321 	movw	r3, #49185	; 0xc021
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f002 fb0a 	bl	800eca0 <pppSendCodeRej>
 800c68c:	4603      	mov	r3, r0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	20000058 	.word	0x20000058
 800c69c:	0801cfa8 	.word	0x0801cfa8

0800c6a0 <lcpSendEchoRep>:
 * @param[in] echoReqPacket Echo-Request packet received from the peer
 * @return Error code
 **/

error_t lcpSendEchoRep(PppContext *context, const PppEchoPacket *echoReqPacket)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Echo-Reply callback\r\n");
 800c6aa:	f7f3 ffc9 	bl	8000640 <osSuspendAllTasks>
 800c6ae:	4b0a      	ldr	r3, [pc, #40]	; (800c6d8 <lcpSendEchoRep+0x38>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	221e      	movs	r2, #30
 800c6b6:	2101      	movs	r1, #1
 800c6b8:	4808      	ldr	r0, [pc, #32]	; (800c6dc <lcpSendEchoRep+0x3c>)
 800c6ba:	f00e fccf 	bl	801b05c <fwrite>
 800c6be:	f7f3 ffca 	bl	8000656 <osResumeAllTasks>

   //Send Echo-Reply packet
   return pppSendEchoRep(context, echoReqPacket, PPP_PROTOCOL_LCP);
 800c6c2:	f24c 0221 	movw	r2, #49185	; 0xc021
 800c6c6:	6839      	ldr	r1, [r7, #0]
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f002 fbc1 	bl	800ee50 <pppSendEchoRep>
 800c6ce:	4603      	mov	r3, r0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	20000058 	.word	0x20000058
 800c6dc:	0801cfc8 	.word	0x0801cfc8

0800c6e0 <lcpParseOption>:
 * @return Error code
 **/

error_t lcpParseOption(PppContext *context, PppOption *option,
   size_t inPacketLen, PppConfigurePacket *outPacket)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	603b      	str	r3, [r7, #0]
   error_t error;

   //Malformed LCP packet?
   if(inPacketLen < sizeof(PppOption))
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d801      	bhi.n	800c6f8 <lcpParseOption+0x18>
      return ERROR_INVALID_LENGTH;
 800c6f4:	23eb      	movs	r3, #235	; 0xeb
 800c6f6:	e06b      	b.n	800c7d0 <lcpParseOption+0xf0>

   //Check option length
   if(option->length < sizeof(PppOption))
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	785b      	ldrb	r3, [r3, #1]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d801      	bhi.n	800c704 <lcpParseOption+0x24>
      return ERROR_INVALID_LENGTH;
 800c700:	23eb      	movs	r3, #235	; 0xeb
 800c702:	e065      	b.n	800c7d0 <lcpParseOption+0xf0>
   if(option->length > inPacketLen)
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	785b      	ldrb	r3, [r3, #1]
 800c708:	461a      	mov	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d201      	bcs.n	800c714 <lcpParseOption+0x34>
      return ERROR_INVALID_LENGTH;
 800c710:	23eb      	movs	r3, #235	; 0xeb
 800c712:	e05d      	b.n	800c7d0 <lcpParseOption+0xf0>

   //Check option type
   switch(option->type)
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	3b01      	subs	r3, #1
 800c71a:	2b07      	cmp	r3, #7
 800c71c:	d842      	bhi.n	800c7a4 <lcpParseOption+0xc4>
 800c71e:	a201      	add	r2, pc, #4	; (adr r2, 800c724 <lcpParseOption+0x44>)
 800c720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c724:	0800c745 	.word	0x0800c745
 800c728:	0800c755 	.word	0x0800c755
 800c72c:	0800c765 	.word	0x0800c765
 800c730:	0800c7a5 	.word	0x0800c7a5
 800c734:	0800c775 	.word	0x0800c775
 800c738:	0800c7a5 	.word	0x0800c7a5
 800c73c:	0800c785 	.word	0x0800c785
 800c740:	0800c795 	.word	0x0800c795
   {
   case LCP_OPTION_MRU:
      //Check Maximum-Receive-Unit option
      error = lcpParseMruOption(context, (LcpMruOption *) option, outPacket);
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	68b9      	ldr	r1, [r7, #8]
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 f845 	bl	800c7d8 <lcpParseMruOption>
 800c74e:	4603      	mov	r3, r0
 800c750:	82fb      	strh	r3, [r7, #22]
      break;
 800c752:	e03c      	b.n	800c7ce <lcpParseOption+0xee>
   case LCP_OPTION_ACCM:
      //Check Async-Control-Character-Map option
      error = lcpParseAccmOption(context, (LcpAccmOption *) option, outPacket);
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	68b9      	ldr	r1, [r7, #8]
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f000 f88d 	bl	800c878 <lcpParseAccmOption>
 800c75e:	4603      	mov	r3, r0
 800c760:	82fb      	strh	r3, [r7, #22]
      break;
 800c762:	e034      	b.n	800c7ce <lcpParseOption+0xee>
   case LCP_OPTION_AUTH_PROTOCOL:
      //Check Authentication-Protocol option
      error = lcpParseAuthProtocolOption(context, (LcpAuthProtocolOption *) option, outPacket);
 800c764:	683a      	ldr	r2, [r7, #0]
 800c766:	68b9      	ldr	r1, [r7, #8]
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f000 f8b4 	bl	800c8d6 <lcpParseAuthProtocolOption>
 800c76e:	4603      	mov	r3, r0
 800c770:	82fb      	strh	r3, [r7, #22]
      break;
 800c772:	e02c      	b.n	800c7ce <lcpParseOption+0xee>
   case LCP_OPTION_MAGIC_NUMBER:
      //Check Magic-Number option
      error = lcpParseMagicNumberOption(context, (LcpMagicNumberOption *) option, outPacket);
 800c774:	683a      	ldr	r2, [r7, #0]
 800c776:	68b9      	ldr	r1, [r7, #8]
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 f992 	bl	800caa2 <lcpParseMagicNumberOption>
 800c77e:	4603      	mov	r3, r0
 800c780:	82fb      	strh	r3, [r7, #22]
      break;
 800c782:	e024      	b.n	800c7ce <lcpParseOption+0xee>
   case LCP_OPTION_PFC:
      //Check Protocol-Field-Compression option
      error = lcpParsePfcOption(context, (LcpPfcOption *) option, outPacket);
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	68b9      	ldr	r1, [r7, #8]
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 f9b9 	bl	800cb00 <lcpParsePfcOption>
 800c78e:	4603      	mov	r3, r0
 800c790:	82fb      	strh	r3, [r7, #22]
      break;
 800c792:	e01c      	b.n	800c7ce <lcpParseOption+0xee>
   case LCP_OPTION_ACFC:
      //Check Address-and-Control-Field-Compression option
      error = lcpParseAcfcOption(context, (LcpAcfcOption *) option, outPacket);
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	68b9      	ldr	r1, [r7, #8]
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f000 f9d6 	bl	800cb4a <lcpParseAcfcOption>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	82fb      	strh	r3, [r7, #22]
      break;
 800c7a2:	e014      	b.n	800c7ce <lcpParseOption+0xee>
   default:
      //If some configuration options received in the Configure-Request are not
      //recognizable or not acceptable for negotiation, then the implementation
      //must transmit a Configure-Reject
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_REJ)
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00e      	beq.n	800c7c8 <lcpParseOption+0xe8>
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	2b04      	cmp	r3, #4
 800c7b0:	d10a      	bne.n	800c7c8 <lcpParseOption+0xe8>
      {
         //The options field of the Configure-Reject packet is filled
         //with the unrecognized options from the Configure-Request
         pppAddOption(outPacket, option->type, option->data,
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	7819      	ldrb	r1, [r3, #0]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, option->type, option->data,
 800c7be:	3b02      	subs	r3, #2
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	6838      	ldr	r0, [r7, #0]
 800c7c4:	f002 fbb8 	bl	800ef38 <pppAddOption>
      }

      //The option is not acceptable for negotiation
      error = ERROR_INVALID_TYPE;
 800c7c8:	23ef      	movs	r3, #239	; 0xef
 800c7ca:	82fb      	strh	r3, [r7, #22]
      break;
 800c7cc:	bf00      	nop
   }

   //Return status code
   return error;
 800c7ce:	8afb      	ldrh	r3, [r7, #22]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3718      	adds	r7, #24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <lcpParseMruOption>:
 * @return Error code
 **/

error_t lcpParseMruOption(PppContext *context,
   LcpMruOption *option, PppConfigurePacket *outPacket)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
   error_t error;
   uint16_t value;

   //Check length field
   if(option->length == sizeof(LcpMruOption))
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	785b      	ldrb	r3, [r3, #1]
 800c7e8:	2b04      	cmp	r3, #4
 800c7ea:	d13e      	bne.n	800c86a <lcpParseMruOption+0x92>
   {
      //Check whether the option value is acceptable
      if(ntohs(option->mru) >= PPP_MIN_MRU)
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	885b      	ldrh	r3, [r3, #2]
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7f3 fed4 	bl	80005a0 <swapInt16>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b1f      	cmp	r3, #31
 800c7fc:	d91e      	bls.n	800c83c <lcpParseMruOption+0x64>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d018      	beq.n	800c836 <lcpParseMruOption+0x5e>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d114      	bne.n	800c836 <lcpParseMruOption+0x5e>
         {
            //Save Maximum-Receive-Unit option
            context->peerConfig.mru = ntohl(option->mru);
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	885b      	ldrh	r3, [r3, #2]
 800c810:	b29b      	uxth	r3, r3
 800c812:	4618      	mov	r0, r3
 800c814:	f7f3 fed2 	bl	80005bc <swapInt32>
 800c818:	4603      	mov	r3, r0
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, LCP_OPTION_MRU, (void *) &option->mru,
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	1c9a      	adds	r2, r3, #2
               option->length - sizeof(PppOption));
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, LCP_OPTION_MRU, (void *) &option->mru,
 800c82a:	3b02      	subs	r3, #2
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	2101      	movs	r1, #1
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f002 fb81 	bl	800ef38 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 800c836:	2300      	movs	r3, #0
 800c838:	82fb      	strh	r3, [r7, #22]
 800c83a:	e018      	b.n	800c86e <lcpParseMruOption+0x96>
      }
      else
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d010      	beq.n	800c864 <lcpParseMruOption+0x8c>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	2b03      	cmp	r3, #3
 800c848:	d10c      	bne.n	800c864 <lcpParseMruOption+0x8c>
         {
            //Use default value
            value = htons(PPP_DEFAULT_MRU);
 800c84a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800c84e:	f7f3 fea7 	bl	80005a0 <swapInt16>
 800c852:	4603      	mov	r3, r0
 800c854:	82bb      	strh	r3, [r7, #20]

            //The option must be modified to a value acceptable to the
            //Configure-Nak sender
            pppAddOption(outPacket, LCP_OPTION_MRU, &value, sizeof(uint16_t));
 800c856:	f107 0214 	add.w	r2, r7, #20
 800c85a:	2302      	movs	r3, #2
 800c85c:	2101      	movs	r1, #1
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f002 fb6a 	bl	800ef38 <pppAddOption>
         }

         //The value is not acceptable
         error = ERROR_INVALID_VALUE;
 800c864:	23f0      	movs	r3, #240	; 0xf0
 800c866:	82fb      	strh	r3, [r7, #22]
 800c868:	e001      	b.n	800c86e <lcpParseMruOption+0x96>
      }
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800c86a:	23eb      	movs	r3, #235	; 0xeb
 800c86c:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800c86e:	8afb      	ldrh	r3, [r7, #22]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <lcpParseAccmOption>:
 * @return Error code
 **/

error_t lcpParseAccmOption(PppContext *context,
   LcpAccmOption *option, PppConfigurePacket *outPacket)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b086      	sub	sp, #24
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpAccmOption))
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	785b      	ldrb	r3, [r3, #1]
 800c888:	2b06      	cmp	r3, #6
 800c88a:	d11d      	bne.n	800c8c8 <lcpParseAccmOption+0x50>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d017      	beq.n	800c8c2 <lcpParseAccmOption+0x4a>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	2b02      	cmp	r3, #2
 800c898:	d113      	bne.n	800c8c2 <lcpParseAccmOption+0x4a>
      {
         //Save Async-Control-Character-Map option
         context->peerConfig.accm = ntohl(option->accm);
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7f3 fe8b 	bl	80005bc <swapInt32>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_ACCM, (void *) &option->accm,
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, LCP_OPTION_ACCM, (void *) &option->accm,
 800c8b6:	3b02      	subs	r3, #2
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2102      	movs	r1, #2
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f002 fb3b 	bl	800ef38 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	82fb      	strh	r3, [r7, #22]
 800c8c6:	e001      	b.n	800c8cc <lcpParseAccmOption+0x54>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800c8c8:	23eb      	movs	r3, #235	; 0xeb
 800c8ca:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800c8cc:	8afb      	ldrh	r3, [r7, #22]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3718      	adds	r7, #24
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <lcpParseAuthProtocolOption>:
 * @return Error code
 **/

error_t lcpParseAuthProtocolOption(PppContext *context,
   LcpAuthProtocolOption *option, PppConfigurePacket *outPacket)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b086      	sub	sp, #24
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	60f8      	str	r0, [r7, #12]
 800c8de:	60b9      	str	r1, [r7, #8]
 800c8e0:	607a      	str	r2, [r7, #4]
   error_t error;
   uint8_t value[3];

   //Assume an error condition...
   error = ERROR_INVALID_LENGTH;
 800c8e2:	23eb      	movs	r3, #235	; 0xeb
 800c8e4:	82fb      	strh	r3, [r7, #22]

   //Check the length of the option
   if(option->length >= sizeof(LcpAuthProtocolOption))
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	785b      	ldrb	r3, [r3, #1]
 800c8ea:	2b03      	cmp	r3, #3
 800c8ec:	d924      	bls.n	800c938 <lcpParseAuthProtocolOption+0x62>
   {
      //The Authentication-Protocol option for PAP must be exactly 4 bytes
      if(ntohs(option->protocol) == PPP_PROTOCOL_PAP)
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	885b      	ldrh	r3, [r3, #2]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7f3 fe53 	bl	80005a0 <swapInt16>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	f24c 0323 	movw	r3, #49187	; 0xc023
 800c902:	429a      	cmp	r2, r3
 800c904:	d106      	bne.n	800c914 <lcpParseAuthProtocolOption+0x3e>
      {
         if(option->length == 4)
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	785b      	ldrb	r3, [r3, #1]
 800c90a:	2b04      	cmp	r3, #4
 800c90c:	d114      	bne.n	800c938 <lcpParseAuthProtocolOption+0x62>
            error = NO_ERROR;
 800c90e:	2300      	movs	r3, #0
 800c910:	82fb      	strh	r3, [r7, #22]
 800c912:	e011      	b.n	800c938 <lcpParseAuthProtocolOption+0x62>
      }
      //The Authentication-Protocol option for CHAP must be exactly 5 bytes
      else if(ntohs(option->protocol) == PPP_PROTOCOL_CHAP)
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	885b      	ldrh	r3, [r3, #2]
 800c918:	b29b      	uxth	r3, r3
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7f3 fe40 	bl	80005a0 <swapInt16>
 800c920:	4603      	mov	r3, r0
 800c922:	461a      	mov	r2, r3
 800c924:	f24c 2323 	movw	r3, #49699	; 0xc223
 800c928:	429a      	cmp	r2, r3
 800c92a:	d105      	bne.n	800c938 <lcpParseAuthProtocolOption+0x62>
      {
         if(option->length == 5)
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	785b      	ldrb	r3, [r3, #1]
 800c930:	2b05      	cmp	r3, #5
 800c932:	d101      	bne.n	800c938 <lcpParseAuthProtocolOption+0x62>
            error = NO_ERROR;
 800c934:	2300      	movs	r3, #0
 800c936:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Make sure the length field is valid
   if(!error)
 800c938:	8afb      	ldrh	r3, [r7, #22]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f040 80ac 	bne.w	800ca98 <lcpParseAuthProtocolOption+0x1c2>
   {
      //PAP authentication protocol?
      if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP &&
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	f003 0301 	and.w	r3, r3, #1
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d025      	beq.n	800c998 <lcpParseAuthProtocolOption+0xc2>
         ntohs(option->protocol) == PPP_PROTOCOL_PAP)
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	885b      	ldrh	r3, [r3, #2]
 800c950:	b29b      	uxth	r3, r3
 800c952:	4618      	mov	r0, r3
 800c954:	f7f3 fe24 	bl	80005a0 <swapInt16>
 800c958:	4603      	mov	r3, r0
 800c95a:	461a      	mov	r2, r3
      if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP &&
 800c95c:	f24c 0323 	movw	r3, #49187	; 0xc023
 800c960:	429a      	cmp	r2, r3
 800c962:	d119      	bne.n	800c998 <lcpParseAuthProtocolOption+0xc2>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d013      	beq.n	800c992 <lcpParseAuthProtocolOption+0xbc>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	2b02      	cmp	r3, #2
 800c970:	d10f      	bne.n	800c992 <lcpParseAuthProtocolOption+0xbc>
         {
            //Save the authentication protocol to be used
            context->peerConfig.authProtocol = PPP_PROTOCOL_PAP;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f24c 0223 	movw	r2, #49187	; 0xc023
 800c978:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	7819      	ldrb	r1, [r3, #0]
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	1c9a      	adds	r2, r3, #2
               option->length - sizeof(PppOption));
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800c988:	3b02      	subs	r3, #2
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f002 fad3 	bl	800ef38 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 800c992:	2300      	movs	r3, #0
 800c994:	82fb      	strh	r3, [r7, #22]
 800c996:	e07f      	b.n	800ca98 <lcpParseAuthProtocolOption+0x1c2>
      }
      //CHAP with MD5 authentication protocol?
      else if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5 &&
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	f003 0302 	and.w	r3, r3, #2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d02d      	beq.n	800ca00 <lcpParseAuthProtocolOption+0x12a>
         ntohs(option->protocol) == PPP_PROTOCOL_CHAP &&
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	885b      	ldrh	r3, [r3, #2]
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7f3 fdf8 	bl	80005a0 <swapInt16>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	461a      	mov	r2, r3
      else if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5 &&
 800c9b4:	f24c 2323 	movw	r3, #49699	; 0xc223
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d121      	bne.n	800ca00 <lcpParseAuthProtocolOption+0x12a>
         option->data[0] == CHAP_ALGO_ID_CHAP_MD5)
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	791b      	ldrb	r3, [r3, #4]
         ntohs(option->protocol) == PPP_PROTOCOL_CHAP &&
 800c9c0:	2b05      	cmp	r3, #5
 800c9c2:	d11d      	bne.n	800ca00 <lcpParseAuthProtocolOption+0x12a>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d017      	beq.n	800c9fa <lcpParseAuthProtocolOption+0x124>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d113      	bne.n	800c9fa <lcpParseAuthProtocolOption+0x124>
         {
            //Save the authentication protocol to be used
            context->peerConfig.authProtocol = PPP_PROTOCOL_CHAP;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f24c 2223 	movw	r2, #49699	; 0xc223
 800c9d8:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
            context->peerConfig.authAlgo = CHAP_ALGO_ID_CHAP_MD5;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2205      	movs	r2, #5
 800c9e0:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	7819      	ldrb	r1, [r3, #0]
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	1c9a      	adds	r2, r3, #2
               option->length - sizeof(PppOption));
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800c9f0:	3b02      	subs	r3, #2
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f002 fa9f 	bl	800ef38 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	82fb      	strh	r3, [r7, #22]
 800c9fe:	e04b      	b.n	800ca98 <lcpParseAuthProtocolOption+0x1c2>
      }
      else
      {
         //PAP authentication protocol allowed?
         if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d014      	beq.n	800ca36 <lcpParseAuthProtocolOption+0x160>
         {
            //If all configuration options are recognizable, but some values are not
            //acceptable, then the implementation must transmit a Configure-Nak
            if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00e      	beq.n	800ca30 <lcpParseAuthProtocolOption+0x15a>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	d10a      	bne.n	800ca30 <lcpParseAuthProtocolOption+0x15a>
            {
               //Format Authentication-Protocol option
               value[0] = MSB(PPP_PROTOCOL_PAP);
 800ca1a:	23c0      	movs	r3, #192	; 0xc0
 800ca1c:	743b      	strb	r3, [r7, #16]
               value[1] = LSB(PPP_PROTOCOL_PAP);
 800ca1e:	2323      	movs	r3, #35	; 0x23
 800ca20:	747b      	strb	r3, [r7, #17]

               //The option must be modified to a value acceptable to the
               //Configure-Nak sender
               pppAddOption(outPacket, LCP_OPTION_AUTH_PROTOCOL, value, 2);
 800ca22:	f107 0210 	add.w	r2, r7, #16
 800ca26:	2302      	movs	r3, #2
 800ca28:	2103      	movs	r1, #3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f002 fa84 	bl	800ef38 <pppAddOption>
            }

            //The value is not acceptable
            error = ERROR_INVALID_VALUE;
 800ca30:	23f0      	movs	r3, #240	; 0xf0
 800ca32:	82fb      	strh	r3, [r7, #22]
 800ca34:	e030      	b.n	800ca98 <lcpParseAuthProtocolOption+0x1c2>
         }
         //CHAP with MD5 authentication protocol allowed?
         else if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	f003 0302 	and.w	r3, r3, #2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d016      	beq.n	800ca70 <lcpParseAuthProtocolOption+0x19a>
         {
            //If all configuration options are recognizable, but some values are not
            //acceptable, then the implementation must transmit a Configure-Nak
            if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d010      	beq.n	800ca6a <lcpParseAuthProtocolOption+0x194>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d10c      	bne.n	800ca6a <lcpParseAuthProtocolOption+0x194>
            {
               //Format Authentication-Protocol option
               value[0] = MSB(PPP_PROTOCOL_CHAP);
 800ca50:	23c2      	movs	r3, #194	; 0xc2
 800ca52:	743b      	strb	r3, [r7, #16]
               value[1] = LSB(PPP_PROTOCOL_CHAP);
 800ca54:	2323      	movs	r3, #35	; 0x23
 800ca56:	747b      	strb	r3, [r7, #17]
               value[2] = CHAP_ALGO_ID_CHAP_MD5;
 800ca58:	2305      	movs	r3, #5
 800ca5a:	74bb      	strb	r3, [r7, #18]

               //The option must be modified to a value acceptable to the
               //Configure-Nak sender
               pppAddOption(outPacket, LCP_OPTION_AUTH_PROTOCOL, value, 3);
 800ca5c:	f107 0210 	add.w	r2, r7, #16
 800ca60:	2303      	movs	r3, #3
 800ca62:	2103      	movs	r1, #3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f002 fa67 	bl	800ef38 <pppAddOption>
            }

            //The value is not acceptable
            error = ERROR_INVALID_VALUE;
 800ca6a:	23f0      	movs	r3, #240	; 0xf0
 800ca6c:	82fb      	strh	r3, [r7, #22]
 800ca6e:	e013      	b.n	800ca98 <lcpParseAuthProtocolOption+0x1c2>
         else
         {
            //If some configuration options received in the Configure-Request are not
            //recognizable or not acceptable for negotiation, then the implementation
            //must transmit a Configure-Reject
            if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_REJ)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00e      	beq.n	800ca94 <lcpParseAuthProtocolOption+0x1be>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b04      	cmp	r3, #4
 800ca7c:	d10a      	bne.n	800ca94 <lcpParseAuthProtocolOption+0x1be>
            {
               //The options field of the Configure-Reject packet is filled
               //with the unrecognized options from the Configure-Request
               pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	7819      	ldrb	r1, [r3, #0]
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	1c9a      	adds	r2, r3, #2
                  option->length - sizeof(PppOption));
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	785b      	ldrb	r3, [r3, #1]
               pppAddOption(outPacket, option->type, (void *) &option->protocol,
 800ca8a:	3b02      	subs	r3, #2
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f002 fa52 	bl	800ef38 <pppAddOption>
            }

            //The option is not acceptable for negotiation
            error = ERROR_INVALID_TYPE;
 800ca94:	23ef      	movs	r3, #239	; 0xef
 800ca96:	82fb      	strh	r3, [r7, #22]
         }
      }
   }

   //Return status code
   return error;
 800ca98:	8afb      	ldrh	r3, [r7, #22]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <lcpParseMagicNumberOption>:
 * @return Error code
 **/

error_t lcpParseMagicNumberOption(PppContext *context,
   LcpMagicNumberOption *option, PppConfigurePacket *outPacket)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b086      	sub	sp, #24
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpMagicNumberOption))
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	785b      	ldrb	r3, [r3, #1]
 800cab2:	2b06      	cmp	r3, #6
 800cab4:	d11d      	bne.n	800caf2 <lcpParseMagicNumberOption+0x50>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d017      	beq.n	800caec <lcpParseMagicNumberOption+0x4a>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d113      	bne.n	800caec <lcpParseMagicNumberOption+0x4a>
      {
         //Save Magic-Number option
         context->peerConfig.magicNumber = ntohl(option->magicNumber);
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800caca:	4618      	mov	r0, r3
 800cacc:	f7f3 fd76 	bl	80005bc <swapInt32>
 800cad0:	4602      	mov	r2, r0
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_MAGIC_NUMBER, (void *) &option->magicNumber,
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, LCP_OPTION_MAGIC_NUMBER, (void *) &option->magicNumber,
 800cae0:	3b02      	subs	r3, #2
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	2105      	movs	r1, #5
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f002 fa26 	bl	800ef38 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800caec:	2300      	movs	r3, #0
 800caee:	82fb      	strh	r3, [r7, #22]
 800caf0:	e001      	b.n	800caf6 <lcpParseMagicNumberOption+0x54>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800caf2:	23eb      	movs	r3, #235	; 0xeb
 800caf4:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800caf6:	8afb      	ldrh	r3, [r7, #22]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <lcpParsePfcOption>:
 * @return Error code
 **/

error_t lcpParsePfcOption(PppContext *context,
   LcpPfcOption *option, PppConfigurePacket *outPacket)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpPfcOption))
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	785b      	ldrb	r3, [r3, #1]
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d113      	bne.n	800cb3c <lcpParsePfcOption+0x3c>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00d      	beq.n	800cb36 <lcpParsePfcOption+0x36>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d109      	bne.n	800cb36 <lcpParsePfcOption+0x36>
      {
         //Save Protocol-Field-Compression option
         context->peerConfig.pfc = TRUE;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_PFC, NULL, 0);
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	2107      	movs	r1, #7
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f002 fa01 	bl	800ef38 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800cb36:	2300      	movs	r3, #0
 800cb38:	82fb      	strh	r3, [r7, #22]
 800cb3a:	e001      	b.n	800cb40 <lcpParsePfcOption+0x40>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800cb3c:	23eb      	movs	r3, #235	; 0xeb
 800cb3e:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800cb40:	8afb      	ldrh	r3, [r7, #22]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <lcpParseAcfcOption>:
 * @return Error code
 **/

error_t lcpParseAcfcOption(PppContext *context,
   LcpAcfcOption *option, PppConfigurePacket *outPacket)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b086      	sub	sp, #24
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpAcfcOption))
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	785b      	ldrb	r3, [r3, #1]
 800cb5a:	2b02      	cmp	r3, #2
 800cb5c:	d113      	bne.n	800cb86 <lcpParseAcfcOption+0x3c>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00d      	beq.n	800cb80 <lcpParseAcfcOption+0x36>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d109      	bne.n	800cb80 <lcpParseAcfcOption+0x36>
      {
         //Save Address-and-Control-Field-Compression option
         context->peerConfig.acfc = TRUE;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_ACFC, NULL, 0);
 800cb74:	2300      	movs	r3, #0
 800cb76:	2200      	movs	r2, #0
 800cb78:	2108      	movs	r1, #8
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f002 f9dc 	bl	800ef38 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800cb80:	2300      	movs	r3, #0
 800cb82:	82fb      	strh	r3, [r7, #22]
 800cb84:	e001      	b.n	800cb8a <lcpParseAcfcOption+0x40>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800cb86:	23eb      	movs	r3, #235	; 0xeb
 800cb88:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800cb8a:	8afb      	ldrh	r3, [r7, #22]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3718      	adds	r7, #24
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <papStartAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t papStartAuth(PppContext *context)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nStarting PAP authentication...\r\n");
 800cb9c:	f7f3 fd50 	bl	8000640 <osSuspendAllTasks>
 800cba0:	4b15      	ldr	r3, [pc, #84]	; (800cbf8 <papStartAuth+0x64>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	2222      	movs	r2, #34	; 0x22
 800cba8:	2101      	movs	r1, #1
 800cbaa:	4814      	ldr	r0, [pc, #80]	; (800cbfc <papStartAuth+0x68>)
 800cbac:	f00e fa56 	bl	801b05c <fwrite>
 800cbb0:	f7f3 fd51 	bl	8000656 <osResumeAllTasks>

   //Check whether the other end of the PPP link is being authenticated
   if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800cbba:	f24c 0223 	movw	r2, #49187	; 0xc023
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d103      	bne.n	800cbca <papStartAuth+0x36>
   {
      //Switch to the Started state
      context->papFsm.localState = PAP_STATE_1_STARTED;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   }

   //Check whether the other end of the PPP link is the authenticator
   if(context->peerConfig.authProtocol == PPP_PROTOCOL_PAP)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800cbd0:	f24c 0223 	movw	r2, #49187	; 0xc023
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d10a      	bne.n	800cbee <papStartAuth+0x5a>
   {
      //Initialize restart counter
      context->papFsm.restartCounter = PAP_MAX_REQUESTS;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2205      	movs	r2, #5
 800cbdc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      //Send Authenticate-Request packet
      papSendAuthReq(context);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f9ff 	bl	800cfe4 <papSendAuthReq>
      //Switch to the Req-Sent state
      context->papFsm.peerState = PAP_STATE_2_REQ_SENT;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2202      	movs	r2, #2
 800cbea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   }

   //Successful processing
   return NO_ERROR;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	20000058 	.word	0x20000058
 800cbfc:	0801cfe8 	.word	0x0801cfe8

0800cc00 <papAbortAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t papAbortAuth(PppContext *context)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nAborting PAP authentication...\r\n");
 800cc08:	f7f3 fd1a 	bl	8000640 <osSuspendAllTasks>
 800cc0c:	4b0b      	ldr	r3, [pc, #44]	; (800cc3c <papAbortAuth+0x3c>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	2222      	movs	r2, #34	; 0x22
 800cc14:	2101      	movs	r1, #1
 800cc16:	480a      	ldr	r0, [pc, #40]	; (800cc40 <papAbortAuth+0x40>)
 800cc18:	f00e fa20 	bl	801b05c <fwrite>
 800cc1c:	f7f3 fd1b 	bl	8000656 <osResumeAllTasks>

   //Abort PAP authentication process
   context->papFsm.localState = PAP_STATE_0_INITIAL;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

   //Successful processing
   return NO_ERROR;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20000058 	.word	0x20000058
 800cc40:	0801d00c 	.word	0x0801d00c

0800cc44 <papTick>:
 *
 * @param[in] context PPP context
 **/

void papTick(PppContext *context)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->papFsm.peerState == PAP_STATE_2_REQ_SENT)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d127      	bne.n	800cca6 <papTick+0x62>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 800cc56:	f7f3 fdbb 	bl	80007d0 <osGetSystemTime>
 800cc5a:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->papFsm.timestamp) >= PAP_RESTART_TIMER)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d91b      	bls.n	800cca6 <papTick+0x62>
      {
         //Debug message
         TRACE_INFO("\r\nPAP Timeout event\r\n");
 800cc6e:	f7f3 fce7 	bl	8000640 <osSuspendAllTasks>
 800cc72:	4b0f      	ldr	r3, [pc, #60]	; (800ccb0 <papTick+0x6c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	2215      	movs	r2, #21
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	480d      	ldr	r0, [pc, #52]	; (800ccb4 <papTick+0x70>)
 800cc7e:	f00e f9ed 	bl	801b05c <fwrite>
 800cc82:	f7f3 fce8 	bl	8000656 <osResumeAllTasks>

         //Check whether the restart counter is greater than zero
         if(context->papFsm.restartCounter > 0)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d003      	beq.n	800cc98 <papTick+0x54>
         {
            //Retransmit the Authenticate-Request packet
            papSendAuthReq(context);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 f9a7 	bl	800cfe4 <papSendAuthReq>
            //Authentication failed
            lcpClose(context);
         }
      }
   }
}
 800cc96:	e006      	b.n	800cca6 <papTick+0x62>
            context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
            lcpClose(context);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7fe fd0d 	bl	800b6c0 <lcpClose>
}
 800cca6:	bf00      	nop
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20000058 	.word	0x20000058
 800ccb4:	0801d030 	.word	0x0801d030

0800ccb8 <papProcessPacket>:
 * @param[in] length Length of the packet, in bytes
 **/

void papProcessPacket(PppContext *context,
   const PppPacket *packet, size_t length)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming PAP packet is valid
   if(length < sizeof(PppPacket))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d94c      	bls.n	800cd64 <papProcessPacket+0xac>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	885b      	ldrh	r3, [r3, #2]
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7f3 fc65 	bl	80005a0 <swapInt16>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	461a      	mov	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d343      	bcc.n	800cd68 <papProcessPacket+0xb0>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	885b      	ldrh	r3, [r3, #2]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7f3 fc5a 	bl	80005a0 <swapInt16>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b03      	cmp	r3, #3
 800ccf0:	d93c      	bls.n	800cd6c <papProcessPacket+0xb4>
      return;

   //Save the length of the PAP packet
   length = ntohs(packet->length);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	885b      	ldrh	r3, [r3, #2]
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7f3 fc51 	bl	80005a0 <swapInt16>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("PAP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 800cd02:	f7f3 fc9d 	bl	8000640 <osSuspendAllTasks>
 800cd06:	4b1c      	ldr	r3, [pc, #112]	; (800cd78 <papProcessPacket+0xc0>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	491b      	ldr	r1, [pc, #108]	; (800cd7c <papProcessPacket+0xc4>)
 800cd10:	4618      	mov	r0, r3
 800cd12:	f00e f943 	bl	801af9c <fiprintf>
 800cd16:	f7f3 fc9e 	bl	8000656 <osResumeAllTasks>
   pppDumpPacket(packet, length, PPP_PROTOCOL_PAP);

   //Because the Authenticate-Ack might be lost, the authenticator must
   //allow repeated Authenticate-Request packets after completing the
   //Authentication phase
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d004      	beq.n	800cd2e <papProcessPacket+0x76>
      context->pppPhase != PPP_PHASE_NETWORK)
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 800cd2a:	2b03      	cmp	r3, #3
 800cd2c:	d120      	bne.n	800cd70 <papProcessPacket+0xb8>
      //Any packets received during any other phase must be silently discarded
      return;
   }

   //Check PAP code field
   switch(packet->code)
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d00a      	beq.n	800cd4c <papProcessPacket+0x94>
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	d00e      	beq.n	800cd58 <papProcessPacket+0xa0>
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d000      	beq.n	800cd40 <papProcessPacket+0x88>
      papProcessAuthNak(context, (PapAuthNakPacket *) packet, length);
      break;
   //Unknown code field
   default:
      //Silently drop the incoming packet
      break;
 800cd3e:	e018      	b.n	800cd72 <papProcessPacket+0xba>
      papProcessAuthReq(context, (PapAuthReqPacket *) packet, length);
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	68b9      	ldr	r1, [r7, #8]
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f000 f81b 	bl	800cd80 <papProcessAuthReq>
      break;
 800cd4a:	e012      	b.n	800cd72 <papProcessPacket+0xba>
      papProcessAuthAck(context, (PapAuthAckPacket *) packet, length);
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 f8bd 	bl	800ced0 <papProcessAuthAck>
      break;
 800cd56:	e00c      	b.n	800cd72 <papProcessPacket+0xba>
      papProcessAuthNak(context, (PapAuthNakPacket *) packet, length);
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	68b9      	ldr	r1, [r7, #8]
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f000 f907 	bl	800cf70 <papProcessAuthNak>
      break;
 800cd62:	e006      	b.n	800cd72 <papProcessPacket+0xba>
      return;
 800cd64:	bf00      	nop
 800cd66:	e004      	b.n	800cd72 <papProcessPacket+0xba>
      return;
 800cd68:	bf00      	nop
 800cd6a:	e002      	b.n	800cd72 <papProcessPacket+0xba>
      return;
 800cd6c:	bf00      	nop
 800cd6e:	e000      	b.n	800cd72 <papProcessPacket+0xba>
      return;
 800cd70:	bf00      	nop
   }
}
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	20000058 	.word	0x20000058
 800cd7c:	0801d048 	.word	0x0801d048

0800cd80 <papProcessAuthReq>:
 * @return Error code
 **/

error_t papProcessAuthReq(PppContext *context,
   const PapAuthReqPacket *authReqPacket, size_t length)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b088      	sub	sp, #32
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
   bool_t status;
   size_t usernameLen;
   const uint8_t *p;

   //Debug message
   TRACE_INFO("\r\nPAP Authenticate-Request packet received\r\n");
 800cd8c:	f7f3 fc58 	bl	8000640 <osSuspendAllTasks>
 800cd90:	4b4d      	ldr	r3, [pc, #308]	; (800cec8 <papProcessAuthReq+0x148>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	222c      	movs	r2, #44	; 0x2c
 800cd98:	2101      	movs	r1, #1
 800cd9a:	484c      	ldr	r0, [pc, #304]	; (800cecc <papProcessAuthReq+0x14c>)
 800cd9c:	f00e f95e 	bl	801b05c <fwrite>
 800cda0:	f7f3 fc59 	bl	8000656 <osResumeAllTasks>

   //Make sure the Authenticate-Request packet is acceptable
   if(context->localConfig.authProtocol != PPP_PROTOCOL_PAP)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800cdaa:	f24c 0223 	movw	r2, #49187	; 0xc023
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d001      	beq.n	800cdb6 <papProcessAuthReq+0x36>
      return ERROR_FAILURE;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e083      	b.n	800cebe <papProcessAuthReq+0x13e>

   //Check the length of the packet
   if(length < sizeof(PapAuthReqPacket))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b04      	cmp	r3, #4
 800cdba:	d801      	bhi.n	800cdc0 <papProcessAuthReq+0x40>
      return ERROR_INVALID_LENGTH;
 800cdbc:	23eb      	movs	r3, #235	; 0xeb
 800cdbe:	e07e      	b.n	800cebe <papProcessAuthReq+0x13e>

   //Retrieve the length of the Peer-ID field
   usernameLen = authReqPacket->peerIdLength;
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	791b      	ldrb	r3, [r3, #4]
 800cdc4:	61bb      	str	r3, [r7, #24]

   //Malformed Authenticate-Request packet?
   if(length < (sizeof(PapAuthReqPacket) + 1 + usernameLen))
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	3306      	adds	r3, #6
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d201      	bcs.n	800cdd4 <papProcessAuthReq+0x54>
      return ERROR_INVALID_LENGTH;
 800cdd0:	23eb      	movs	r3, #235	; 0xeb
 800cdd2:	e074      	b.n	800cebe <papProcessAuthReq+0x13e>

   //Limit the length of the string
   usernameLen = MIN(usernameLen, PPP_MAX_USERNAME_LEN);
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	2b1f      	cmp	r3, #31
 800cdd8:	bf28      	it	cs
 800cdda:	231f      	movcs	r3, #31
 800cddc:	61bb      	str	r3, [r7, #24]
   //Copy the name of the peer to be identified
   memcpy(context->peerName, authReqPacket->peerId, usernameLen);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	3305      	adds	r3, #5
 800cde8:	69ba      	ldr	r2, [r7, #24]
 800cdea:	4619      	mov	r1, r3
 800cdec:	f00e f998 	bl	801b120 <memcpy>
   //Properly terminate the string with a NULL character
   context->peerName[usernameLen] = '\0';
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	3360      	adds	r3, #96	; 0x60
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	701a      	strb	r2, [r3, #0]

   //Point to the Passwd-Length field
   p = authReqPacket->peerId + usernameLen;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	1d5a      	adds	r2, r3, #5
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	4413      	add	r3, r2
 800ce04:	617b      	str	r3, [r7, #20]

   //Save the length of Password field
   context->papFsm.passwordLen = p[0];
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   //Point to the Password field
   context->papFsm.password = p + 1;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	1c5a      	adds	r2, r3, #1
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

   //Malformed Authenticate-Request packet?
   if(length < (sizeof(PapAuthReqPacket) + 1 + usernameLen + context->papFsm.passwordLen))
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	4413      	add	r3, r2
 800ce26:	3306      	adds	r3, #6
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d201      	bcs.n	800ce32 <papProcessAuthReq+0xb2>
      return ERROR_INVALID_LENGTH;
 800ce2e:	23eb      	movs	r3, #235	; 0xeb
 800ce30:	e045      	b.n	800cebe <papProcessAuthReq+0x13e>

   //Invoke user-defined callback, if any
   if(context->settings.authCallback != NULL)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	695b      	ldr	r3, [r3, #20]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d009      	beq.n	800ce4e <papProcessAuthReq+0xce>
   {
      //Perfom username and password verification
      status = context->settings.authCallback(context->interface,
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	6990      	ldr	r0, [r2, #24]
         context->peerName);
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	3260      	adds	r2, #96	; 0x60
      status = context->settings.authCallback(context->interface,
 800ce46:	4611      	mov	r1, r2
 800ce48:	4798      	blx	r3
 800ce4a:	61f8      	str	r0, [r7, #28]
 800ce4c:	e001      	b.n	800ce52 <papProcessAuthReq+0xd2>
   }
   else
   {
      //Unable to perform authentication...
      status = FALSE;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	61fb      	str	r3, [r7, #28]
   }

   //Successful authentication?
   if(status)
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d024      	beq.n	800cea2 <papProcessAuthReq+0x122>
   {
      //If the Peer-ID/Password pair received in the Authenticate-Request
      //is both recognizable and acceptable, then the authenticator must
      //transmit an Authenticate-Ack packet
      papSendAuthAck(context, authReqPacket->identifier);
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	785b      	ldrb	r3, [r3, #1]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f000 f958 	bl	800d114 <papSendAuthAck>

      //Switch to the Ack-Sent state
      context->papFsm.localState = PAP_STATE_4_ACK_SENT;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2204      	movs	r2, #4
 800ce68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      //The user has been successfully authenticated
      context->localAuthDone = TRUE;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      //Check whether PPP authentication is complete
      if(context->localAuthDone && context->peerAuthDone)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d01e      	beq.n	800cebc <papProcessAuthReq+0x13c>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d019      	beq.n	800cebc <papProcessAuthReq+0x13c>
      {
         //Check current PPP phase
         if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d114      	bne.n	800cebc <papProcessAuthReq+0x13c>
         {
            //Advance to the Network phase
            context->pppPhase = PPP_PHASE_NETWORK;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2203      	movs	r2, #3
 800ce96:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
            //IPCP Open event
            ipcpOpen(context);
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f7fd fd08 	bl	800a8b0 <ipcpOpen>
 800cea0:	e00c      	b.n	800cebc <papProcessAuthReq+0x13c>
   else
   {
      //If the Peer-ID/Password pair received in the Authenticate-Request
      //is not recognizable or acceptable, then the authenticator must
      //transmit an Authenticate-Nak packet
      papSendAuthNak(context, authReqPacket->identifier);
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	785b      	ldrb	r3, [r3, #1]
 800cea6:	4619      	mov	r1, r3
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 f981 	bl	800d1b0 <papSendAuthNak>

      //Switch to the Nak-Sent state
      context->papFsm.localState = PAP_STATE_6_NAK_SENT;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2206      	movs	r2, #6
 800ceb2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      //The authenticator should take action to terminate the link
      lcpClose(context);
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7fe fc02 	bl	800b6c0 <lcpClose>
   }

   //Successful processing
   return NO_ERROR;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3720      	adds	r7, #32
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20000058 	.word	0x20000058
 800cecc:	0801d06c 	.word	0x0801d06c

0800ced0 <papProcessAuthAck>:
 * @return Error code
 **/

error_t papProcessAuthAck(PppContext *context,
   const PapAuthAckPacket *authAckPacket, size_t length)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nPAP Authenticate-Ack packet received\r\n");
 800cedc:	f7f3 fbb0 	bl	8000640 <osSuspendAllTasks>
 800cee0:	4b21      	ldr	r3, [pc, #132]	; (800cf68 <papProcessAuthAck+0x98>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	2228      	movs	r2, #40	; 0x28
 800cee8:	2101      	movs	r1, #1
 800ceea:	4820      	ldr	r0, [pc, #128]	; (800cf6c <papProcessAuthAck+0x9c>)
 800ceec:	f00e f8b6 	bl	801b05c <fwrite>
 800cef0:	f7f3 fbb1 	bl	8000656 <osResumeAllTasks>

   //Make sure the Authenticate-Ack packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_PAP)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800cefa:	f24c 0223 	movw	r2, #49187	; 0xc023
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d001      	beq.n	800cf06 <papProcessAuthAck+0x36>
      return ERROR_FAILURE;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e02c      	b.n	800cf60 <papProcessAuthAck+0x90>

   //Check the length of the packet
   if(length < sizeof(PapAuthAckPacket))
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b04      	cmp	r3, #4
 800cf0a:	d801      	bhi.n	800cf10 <papProcessAuthAck+0x40>
      return ERROR_INVALID_LENGTH;
 800cf0c:	23eb      	movs	r3, #235	; 0xeb
 800cf0e:	e027      	b.n	800cf60 <papProcessAuthAck+0x90>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(authAckPacket->identifier != context->papFsm.identifier)
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	785a      	ldrb	r2, [r3, #1]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d001      	beq.n	800cf22 <papProcessAuthAck+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800cf1e:	23d6      	movs	r3, #214	; 0xd6
 800cf20:	e01e      	b.n	800cf60 <papProcessAuthAck+0x90>

   //Switch to the Ack-Rcvd state
   context->papFsm.peerState = PAP_STATE_5_ACK_RCVD;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2205      	movs	r2, #5
 800cf26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   //The user name has been accepted by the authenticator
   context->peerAuthDone = TRUE;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check whether PPP authentication is complete
   if(context->localAuthDone && context->peerAuthDone)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d010      	beq.n	800cf5e <papProcessAuthAck+0x8e>
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00b      	beq.n	800cf5e <papProcessAuthAck+0x8e>
   {
      //Check current PPP phase
      if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d106      	bne.n	800cf5e <papProcessAuthAck+0x8e>
      {
         //Advance to the Network phase
         context->pppPhase = PPP_PHASE_NETWORK;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2203      	movs	r2, #3
 800cf54:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
         //IPCP Open event
         ipcpOpen(context);
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7fd fca9 	bl	800a8b0 <ipcpOpen>
#endif
      }
   }

   //Successful processing
   return NO_ERROR;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20000058 	.word	0x20000058
 800cf6c:	0801d09c 	.word	0x0801d09c

0800cf70 <papProcessAuthNak>:
 * @return Error code
 **/

error_t papProcessAuthNak(PppContext *context,
   const PapAuthNakPacket *authNakPacket, size_t length)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nPAP Authenticate-Nak packet received\r\n");
 800cf7c:	f7f3 fb60 	bl	8000640 <osSuspendAllTasks>
 800cf80:	4b16      	ldr	r3, [pc, #88]	; (800cfdc <papProcessAuthNak+0x6c>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	2228      	movs	r2, #40	; 0x28
 800cf88:	2101      	movs	r1, #1
 800cf8a:	4815      	ldr	r0, [pc, #84]	; (800cfe0 <papProcessAuthNak+0x70>)
 800cf8c:	f00e f866 	bl	801b05c <fwrite>
 800cf90:	f7f3 fb61 	bl	8000656 <osResumeAllTasks>

   //Make sure the Authenticate-Nak packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_PAP)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800cf9a:	f24c 0223 	movw	r2, #49187	; 0xc023
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d001      	beq.n	800cfa6 <papProcessAuthNak+0x36>
      return ERROR_FAILURE;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e015      	b.n	800cfd2 <papProcessAuthNak+0x62>

   //Check the length of the packet
   if(length < sizeof(PapAuthNakPacket))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b04      	cmp	r3, #4
 800cfaa:	d801      	bhi.n	800cfb0 <papProcessAuthNak+0x40>
      return ERROR_INVALID_LENGTH;
 800cfac:	23eb      	movs	r3, #235	; 0xeb
 800cfae:	e010      	b.n	800cfd2 <papProcessAuthNak+0x62>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(authNakPacket->identifier != context->papFsm.identifier)
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	785a      	ldrb	r2, [r3, #1]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d001      	beq.n	800cfc2 <papProcessAuthNak+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800cfbe:	23d6      	movs	r3, #214	; 0xd6
 800cfc0:	e007      	b.n	800cfd2 <papProcessAuthNak+0x62>

   //Switch to the Nak-Rcvd state
   context->papFsm.peerState = PAP_STATE_7_NAK_RCVD;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2207      	movs	r2, #7
 800cfc6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   //Authentication failed
   lcpClose(context);
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f7fe fb78 	bl	800b6c0 <lcpClose>

   //Successful processing
   return NO_ERROR;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20000058 	.word	0x20000058
 800cfe0:	0801d0c8 	.word	0x0801d0c8

0800cfe4 <papSendAuthReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t papSendAuthReq(PppContext *context)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08a      	sub	sp, #40	; 0x28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
   uint8_t *p;
   NetBuffer *buffer;
   PapAuthReqPacket *authReqPacket;

   //Get the length of the user name
   usernameLen = strlen(context->username);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	3320      	adds	r3, #32
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7f3 f8fd 	bl	80001f0 <strlen>
 800cff6:	6278      	str	r0, [r7, #36]	; 0x24
   //Get the length of the password
   passwordLen = strlen(context->password);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	3340      	adds	r3, #64	; 0x40
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7f3 f8f7 	bl	80001f0 <strlen>
 800d002:	6238      	str	r0, [r7, #32]

   //Calculate the length of the Authenticate-Request packet
   length = sizeof(PapAuthReqPacket) + 1 + usernameLen + passwordLen;
 800d004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	4413      	add	r3, r2
 800d00a:	3306      	adds	r3, #6
 800d00c:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the packet
   buffer = pppAllocBuffer(length, &offset);
 800d00e:	f107 0308 	add.w	r3, r7, #8
 800d012:	4619      	mov	r1, r3
 800d014:	69f8      	ldr	r0, [r7, #28]
 800d016:	f000 fd1b 	bl	800da50 <pppAllocBuffer>
 800d01a:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d101      	bne.n	800d026 <papSendAuthReq+0x42>
      return ERROR_OUT_OF_MEMORY;
 800d022:	2364      	movs	r3, #100	; 0x64
 800d024:	e06e      	b.n	800d104 <papSendAuthReq+0x120>

   //Point to the Authenticate-Request packet
   authReqPacket = netBufferAt(buffer, offset);
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	4619      	mov	r1, r3
 800d02a:	69b8      	ldr	r0, [r7, #24]
 800d02c:	f7f5 fb18 	bl	8002660 <netBufferAt>
 800d030:	6178      	str	r0, [r7, #20]

   //Format packet header
   authReqPacket->code = PAP_CODE_AUTH_REQ;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2201      	movs	r2, #1
 800d036:	701a      	strb	r2, [r3, #0]
   authReqPacket->identifier = ++context->papFsm.identifier;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800d03e:	3301      	adds	r3, #1
 800d040:	b2da      	uxtb	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	705a      	strb	r2, [r3, #1]
   authReqPacket->length = htons(length);
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	b29b      	uxth	r3, r3
 800d056:	4618      	mov	r0, r3
 800d058:	f7f3 faa2 	bl	80005a0 <swapInt16>
 800d05c:	4603      	mov	r3, r0
 800d05e:	461a      	mov	r2, r3
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	805a      	strh	r2, [r3, #2]

   //The Peer-ID-Length field indicates the length of Peer-ID field
   authReqPacket->peerIdLength = usernameLen;
 800d064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d066:	b2da      	uxtb	r2, r3
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	711a      	strb	r2, [r3, #4]
   //Append Peer-ID
   memcpy(authReqPacket->peerId, context->username, usernameLen);
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	1d58      	adds	r0, r3, #5
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	3320      	adds	r3, #32
 800d074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d076:	4619      	mov	r1, r3
 800d078:	f00e f852 	bl	801b120 <memcpy>

   //Point to the Passwd-Length field
   p = authReqPacket->peerId + usernameLen;
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	1d5a      	adds	r2, r3, #5
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	4413      	add	r3, r2
 800d084:	613b      	str	r3, [r7, #16]
   //The Passwd-Length field indicates the length of Password field
   p[0] = passwordLen;
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	701a      	strb	r2, [r3, #0]

   //Append Password
   memcpy(p + 1, context->password, passwordLen);
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	1c58      	adds	r0, r3, #1
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	3340      	adds	r3, #64	; 0x40
 800d096:	6a3a      	ldr	r2, [r7, #32]
 800d098:	4619      	mov	r1, r3
 800d09a:	f00e f841 	bl	801b120 <memcpy>

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	69b8      	ldr	r0, [r7, #24]
 800d0a8:	f7f5 fa34 	bl	8002514 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending PAP Authenticate-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800d0ac:	f7f3 fac8 	bl	8000640 <osSuspendAllTasks>
 800d0b0:	4b16      	ldr	r3, [pc, #88]	; (800d10c <papSendAuthReq+0x128>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	69fa      	ldr	r2, [r7, #28]
 800d0b8:	4915      	ldr	r1, [pc, #84]	; (800d110 <papSendAuthReq+0x12c>)
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f00d ff6e 	bl	801af9c <fiprintf>
 800d0c0:	f7f3 fac9 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) authReqPacket, length, PPP_PROTOCOL_PAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_PAP);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6998      	ldr	r0, [r3, #24]
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	f24c 0323 	movw	r3, #49187	; 0xc023
 800d0ce:	69b9      	ldr	r1, [r7, #24]
 800d0d0:	f000 fb48 	bl	800d764 <pppSendFrame>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	81fb      	strh	r3, [r7, #14]

   //The restart counter is decremented each time a Authenticate-Request is sent
   if(context->papFsm.restartCounter > 0)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d006      	beq.n	800d0f0 <papSendAuthReq+0x10c>
      context->papFsm.restartCounter--;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d0e8:	1e5a      	subs	r2, r3, #1
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

   //Save the time at which the packet was sent
   context->papFsm.timestamp = osGetSystemTime();
 800d0f0:	f7f3 fb6e 	bl	80007d0 <osGetSystemTime>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

   //Free previously allocated memory block
   netBufferFree(buffer);
 800d0fc:	69b8      	ldr	r0, [r7, #24]
 800d0fe:	f7f5 f9d8 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800d102:	89fb      	ldrh	r3, [r7, #14]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3728      	adds	r7, #40	; 0x28
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	20000058 	.word	0x20000058
 800d110:	0801d0f4 	.word	0x0801d0f4

0800d114 <papSendAuthAck>:
 * @param[in] identifier Identifier field
 * @return Error code
 **/

error_t papSendAuthAck(PppContext *context, uint8_t identifier)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b088      	sub	sp, #32
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	460b      	mov	r3, r1
 800d11e:	70fb      	strb	r3, [r7, #3]
   size_t offset;
   NetBuffer *buffer;
   PapAuthAckPacket *authAckPacket;

   //Retrieve the length of the Authenticate-Ack packet
   length = sizeof(PapAuthAckPacket);
 800d120:	2305      	movs	r3, #5
 800d122:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Authenticate-Ack packet
   buffer = pppAllocBuffer(length, &offset);
 800d124:	f107 030c 	add.w	r3, r7, #12
 800d128:	4619      	mov	r1, r3
 800d12a:	69f8      	ldr	r0, [r7, #28]
 800d12c:	f000 fc90 	bl	800da50 <pppAllocBuffer>
 800d130:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d101      	bne.n	800d13c <papSendAuthAck+0x28>
      return ERROR_OUT_OF_MEMORY;
 800d138:	2364      	movs	r3, #100	; 0x64
 800d13a:	e031      	b.n	800d1a0 <papSendAuthAck+0x8c>

   //Point to the Authenticate-Ack packet
   authAckPacket = netBufferAt(buffer, offset);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	4619      	mov	r1, r3
 800d140:	69b8      	ldr	r0, [r7, #24]
 800d142:	f7f5 fa8d 	bl	8002660 <netBufferAt>
 800d146:	6178      	str	r0, [r7, #20]

   //Format packet header
   authAckPacket->code = PAP_CODE_AUTH_ACK;
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	2202      	movs	r2, #2
 800d14c:	701a      	strb	r2, [r3, #0]
   authAckPacket->identifier = identifier;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	78fa      	ldrb	r2, [r7, #3]
 800d152:	705a      	strb	r2, [r3, #1]
   authAckPacket->length = htons(length);
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	b29b      	uxth	r3, r3
 800d158:	4618      	mov	r0, r3
 800d15a:	f7f3 fa21 	bl	80005a0 <swapInt16>
 800d15e:	4603      	mov	r3, r0
 800d160:	461a      	mov	r2, r3
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	805a      	strh	r2, [r3, #2]

   //The Message field is zero or more octets, and its contents are
   //implementation dependent
   authAckPacket->msgLength = 0;
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	2200      	movs	r2, #0
 800d16a:	711a      	strb	r2, [r3, #4]

   //Debug message
   TRACE_INFO("Sending PAP Authenticate-Ack packet (%" PRIuSIZE " bytes)...\r\n", length);
 800d16c:	f7f3 fa68 	bl	8000640 <osSuspendAllTasks>
 800d170:	4b0d      	ldr	r3, [pc, #52]	; (800d1a8 <papSendAuthAck+0x94>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	69fa      	ldr	r2, [r7, #28]
 800d178:	490c      	ldr	r1, [pc, #48]	; (800d1ac <papSendAuthAck+0x98>)
 800d17a:	4618      	mov	r0, r3
 800d17c:	f00d ff0e 	bl	801af9c <fiprintf>
 800d180:	f7f3 fa69 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) authAckPacket, length, PPP_PROTOCOL_PAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_PAP);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6998      	ldr	r0, [r3, #24]
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	f24c 0323 	movw	r3, #49187	; 0xc023
 800d18e:	69b9      	ldr	r1, [r7, #24]
 800d190:	f000 fae8 	bl	800d764 <pppSendFrame>
 800d194:	4603      	mov	r3, r0
 800d196:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800d198:	69b8      	ldr	r0, [r7, #24]
 800d19a:	f7f5 f98a 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800d19e:	8a7b      	ldrh	r3, [r7, #18]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3720      	adds	r7, #32
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	20000058 	.word	0x20000058
 800d1ac:	0801d12c 	.word	0x0801d12c

0800d1b0 <papSendAuthNak>:
 * @param[in] identifier Identifier field
 * @return Error code
 **/

error_t papSendAuthNak(PppContext *context, uint8_t identifier)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b088      	sub	sp, #32
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	70fb      	strb	r3, [r7, #3]
   size_t offset;
   NetBuffer *buffer;
   PapAuthNakPacket *authNakPacket;

   //Retrieve the length of the Authenticate-Nak packet
   length = sizeof(PapAuthNakPacket);
 800d1bc:	2305      	movs	r3, #5
 800d1be:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Authenticate-Nak packet
   buffer = pppAllocBuffer(length, &offset);
 800d1c0:	f107 030c 	add.w	r3, r7, #12
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	69f8      	ldr	r0, [r7, #28]
 800d1c8:	f000 fc42 	bl	800da50 <pppAllocBuffer>
 800d1cc:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d101      	bne.n	800d1d8 <papSendAuthNak+0x28>
      return ERROR_OUT_OF_MEMORY;
 800d1d4:	2364      	movs	r3, #100	; 0x64
 800d1d6:	e031      	b.n	800d23c <papSendAuthNak+0x8c>

   //Point to the Authenticate-Nak packet
   authNakPacket = netBufferAt(buffer, offset);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	69b8      	ldr	r0, [r7, #24]
 800d1de:	f7f5 fa3f 	bl	8002660 <netBufferAt>
 800d1e2:	6178      	str	r0, [r7, #20]

   //Format packet header
   authNakPacket->code = PAP_CODE_AUTH_NAK;
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2203      	movs	r2, #3
 800d1e8:	701a      	strb	r2, [r3, #0]
   authNakPacket->identifier = identifier;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	78fa      	ldrb	r2, [r7, #3]
 800d1ee:	705a      	strb	r2, [r3, #1]
   authNakPacket->length = htons(length);
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7f3 f9d3 	bl	80005a0 <swapInt16>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	805a      	strh	r2, [r3, #2]

   //The Message field is zero or more octets, and its contents are
   //implementation dependent
   authNakPacket->msgLength = 0;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2200      	movs	r2, #0
 800d206:	711a      	strb	r2, [r3, #4]

   //Debug message
   TRACE_INFO("Sending PAP Authenticate-Nak packet (%" PRIuSIZE " bytes)...\r\n", length);
 800d208:	f7f3 fa1a 	bl	8000640 <osSuspendAllTasks>
 800d20c:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <papSendAuthNak+0x94>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	69fa      	ldr	r2, [r7, #28]
 800d214:	490c      	ldr	r1, [pc, #48]	; (800d248 <papSendAuthNak+0x98>)
 800d216:	4618      	mov	r0, r3
 800d218:	f00d fec0 	bl	801af9c <fiprintf>
 800d21c:	f7f3 fa1b 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) authNakPacket, length, PPP_PROTOCOL_PAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_PAP);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6998      	ldr	r0, [r3, #24]
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	f24c 0323 	movw	r3, #49187	; 0xc023
 800d22a:	69b9      	ldr	r1, [r7, #24]
 800d22c:	f000 fa9a 	bl	800d764 <pppSendFrame>
 800d230:	4603      	mov	r3, r0
 800d232:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800d234:	69b8      	ldr	r0, [r7, #24]
 800d236:	f7f5 f93c 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800d23a:	8a7b      	ldrh	r3, [r7, #18]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3720      	adds	r7, #32
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	20000058 	.word	0x20000058
 800d248:	0801d160 	.word	0x0801d160

0800d24c <pppGetDefaultSettings>:
 * @brief Initialize settings with default values
 * @param[out] settings Structure that contains PPP settings
 **/

void pppGetDefaultSettings(PppSettings *settings)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
   //Use default interface
   settings->interface = netGetDefaultInterface();
 800d254:	f7f4 ffb2 	bl	80021bc <netGetDefaultInterface>
 800d258:	4602      	mov	r2, r0
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	601a      	str	r2, [r3, #0]

   //Default MRU
   settings->mru = PPP_DEFAULT_MRU;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d264:	809a      	strh	r2, [r3, #4]
   //Default async control character map
   settings->accm = PPP_DEFAULT_ACCM;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d26c:	609a      	str	r2, [r3, #8]
   //Allowed authentication protocols
   settings->authProtocol = PPP_AUTH_PROTOCOL_PAP | PPP_AUTH_PROTOCOL_CHAP_MD5;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2203      	movs	r2, #3
 800d272:	60da      	str	r2, [r3, #12]

   //Random data generation callback function
   settings->randCallback = NULL;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	611a      	str	r2, [r3, #16]
   //PPP authentication callback function
   settings->authCallback = NULL;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	615a      	str	r2, [r3, #20]
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <pppInit>:
 * @param[in] settings PPP specific settings
 * @return Error code
 **/

error_t pppInit(PppContext *context, const PppSettings *settings)
{
 800d288:	b5b0      	push	{r4, r5, r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
   error_t error;
   NetInterface *interface;

   //Debug message
   TRACE_INFO("PPP initialization\r\n");
 800d292:	f7f3 f9d5 	bl	8000640 <osSuspendAllTasks>
 800d296:	4b27      	ldr	r3, [pc, #156]	; (800d334 <pppInit+0xac>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	2214      	movs	r2, #20
 800d29e:	2101      	movs	r1, #1
 800d2a0:	4825      	ldr	r0, [pc, #148]	; (800d338 <pppInit+0xb0>)
 800d2a2:	f00d fedb 	bl	801b05c <fwrite>
 800d2a6:	f7f3 f9d6 	bl	8000656 <osResumeAllTasks>

   //Underlying network interface
   interface = settings->interface;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	60fb      	str	r3, [r7, #12]

   //Initialize PPP context
   memset(context, 0, sizeof(PppContext));
 800d2b0:	f243 7294 	movw	r2, #14228	; 0x3794
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f00d ff56 	bl	801b168 <memset>

   //Save user settings
   context->settings = *settings;
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	4614      	mov	r4, r2
 800d2c2:	461d      	mov	r5, r3
 800d2c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d2cc:	e884 0003 	stmia.w	r4, {r0, r1}
   //CHAP with MD5 authentication is not supported
   context->settings.authProtocol &= ~PPP_AUTH_PROTOCOL_CHAP_MD5;
#endif

   //Attach the PPP context to the network interface
   interface->pppContext = context;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

   //Initialize structure
   context->interface = interface;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	619a      	str	r2, [r3, #24]
   context->timeout = INFINITE_DELAY;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2e4:	61da      	str	r2, [r3, #28]

   //Initialize PPP finite state machine
   context->pppPhase = PPP_PHASE_DEAD;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
   context->lcpFsm.state = PPP_STATE_0_INITIAL;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (IPV4_SUPPORT == ENABLED)
   //Initialize IPCP finite state machine
   context->ipcpFsm.state = PPP_STATE_0_INITIAL;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   context->ipv6cpFsm.state = PPP_STATE_0_INITIAL;
#endif

#if (PAP_SUPPORT == ENABLED)
   //Initialize PAP finite state machine
   context->papFsm.localState = PAP_STATE_0_INITIAL;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

#if (CHAP_SUPPORT == ENABLED)
   //Initialize CHAP finite state machine
   context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   context->chapFsm.peerState = CHAP_STATE_0_INITIAL;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
#endif

   //Attach PPP HDLC driver
   error = netSetDriver(interface, &pppHdlcDriver);
 800d31e:	4907      	ldr	r1, [pc, #28]	; (800d33c <pppInit+0xb4>)
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f7f4 fc75 	bl	8001c10 <netSetDriver>
 800d326:	4603      	mov	r3, r0
 800d328:	817b      	strh	r3, [r7, #10]

   //Return status code
   return error;
 800d32a:	897b      	ldrh	r3, [r7, #10]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bdb0      	pop	{r4, r5, r7, pc}
 800d334:	20000058 	.word	0x20000058
 800d338:	0801d194 	.word	0x0801d194
 800d33c:	0801d79c 	.word	0x0801d79c

0800d340 <pppConnect>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppConnect(NetInterface *interface)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
   systime_t time;
   systime_t start;
#endif

   //Check parameters
   if(interface == NULL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <pppConnect+0x12>
      return ERROR_INVALID_PARAMETER;
 800d34e:	2302      	movs	r3, #2
 800d350:	e160      	b.n	800d614 <pppConnect+0x2d4>
   //Make sure PPP has been properly configured
   if(interface->pppContext == NULL)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d102      	bne.n	800d362 <pppConnect+0x22>
      return ERROR_NOT_CONFIGURED;
 800d35c:	f240 2306 	movw	r3, #518	; 0x206
 800d360:	e158      	b.n	800d614 <pppConnect+0x2d4>

   //Point to the PPP context
   context = interface->pppContext;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d368:	613b      	str	r3, [r7, #16]

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800d36a:	48ac      	ldr	r0, [pc, #688]	; (800d61c <pppConnect+0x2dc>)
 800d36c:	f7f3 fa14 	bl	8000798 <osAcquireMutex>

   //Default PPP phase
   context->pppPhase = PPP_PHASE_DEAD;
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	2200      	movs	r2, #0
 800d374:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

   //Initialize LCP FSM
   context->lcpFsm.state = PPP_STATE_0_INITIAL;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   context->lcpFsm.identifier = 0;
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
   context->lcpFsm.restartCounter = 0;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   context->lcpFsm.failureCounter = 0;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	2200      	movs	r2, #0
 800d394:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

#if (IPV4_SUPPORT == ENABLED)
   //Initialize IPCP FSM
   context->ipcpFsm.state = PPP_STATE_0_INITIAL;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   context->ipcpFsm.identifier = 0;
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
   context->ipcpFsm.restartCounter = 0;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
   context->ipcpFsm.failureCounter = 0;
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
   context->ipv6cpFsm.restartCounter = 0;
   context->ipv6cpFsm.failureCounter = 0;
#endif

   //Authentication has not been completed
   context->localAuthDone = FALSE;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   context->peerAuthDone = FALSE;
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if (PAP_SUPPORT == ENABLED)
   //Initialize PAP FSM
   context->papFsm.localState = PAP_STATE_0_INITIAL;
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   context->papFsm.identifier = 0;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
   context->papFsm.restartCounter = 0;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
#endif

#if (CHAP_SUPPORT == ENABLED)
   //Initialize CHAP FSM
   context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   context->chapFsm.localIdentifier = 0;
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
   context->chapFsm.peerState = CHAP_STATE_0_INITIAL;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   context->chapFsm.peerIdentifier = 0;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	2200      	movs	r2, #0
 800d404:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#endif

   //Default local configuration
   context->localConfig.mru = context->settings.mru;
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	889a      	ldrh	r2, [r3, #4]
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
   context->localConfig.mruRejected = FALSE;
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2200      	movs	r2, #0
 800d416:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   context->localConfig.accm = context->settings.accm;
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	689a      	ldr	r2, [r3, #8]
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   context->localConfig.accmRejected = FALSE;
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	2200      	movs	r2, #0
 800d428:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   context->localConfig.authProtocol = 0;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	2200      	movs	r2, #0
 800d430:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
   context->localConfig.authAlgo = 0;
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	2200      	movs	r2, #0
 800d438:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
   context->localConfig.authProtocolRejected = FALSE;
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2200      	movs	r2, #0
 800d440:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   context->localConfig.magicNumber = PPP_DEFAULT_MAGIC_NUMBER;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	2200      	movs	r2, #0
 800d448:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   context->localConfig.magicNumberRejected = FALSE;
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	2200      	movs	r2, #0
 800d450:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   context->localConfig.pfc = TRUE;
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	2201      	movs	r2, #1
 800d458:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   context->localConfig.pfcRejected = FALSE;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2200      	movs	r2, #0
 800d460:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   context->localConfig.acfc = TRUE;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	2201      	movs	r2, #1
 800d468:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   context->localConfig.acfcRejected = FALSE;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	2200      	movs	r2, #0
 800d470:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

   //Check whether the other end of the PPP link must be authenticated
   if(context->settings.authCallback != NULL)
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	695b      	ldr	r3, [r3, #20]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d019      	beq.n	800d4b0 <pppConnect+0x170>
   {
#if (PAP_SUPPORT == ENABLED)
      //PAP provides an easy implementation of peer authentication
      if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP)
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	2b00      	cmp	r3, #0
 800d486:	d004      	beq.n	800d492 <pppConnect+0x152>
      {
         //Select PAP authentication protocol
         context->localConfig.authProtocol = PPP_PROTOCOL_PAP;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d48e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
      }
#endif
#if (CHAP_SUPPORT == ENABLED)
      //CHAP with MD5 ensures greater security in the implementation
      if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5)
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	f003 0302 	and.w	r3, r3, #2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d008      	beq.n	800d4b0 <pppConnect+0x170>
      {
         //Select CHAP with MD5 authentication protocol
         context->localConfig.authProtocol = PPP_PROTOCOL_CHAP;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	f24c 2223 	movw	r2, #49699	; 0xc223
 800d4a4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
         context->localConfig.authAlgo = CHAP_ALGO_ID_CHAP_MD5;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2205      	movs	r2, #5
 800d4ac:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
      }
#endif
   }

   //Default peer's configuration
   context->peerConfig.mru = PPP_DEFAULT_MRU;
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d4b6:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
   context->peerConfig.accm = PPP_DEFAULT_ACCM;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4c0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   context->peerConfig.authProtocol = 0;
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
   context->peerConfig.magicNumber = PPP_DEFAULT_MAGIC_NUMBER;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
   context->peerConfig.pfc = FALSE;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
   context->peerConfig.acfc = FALSE;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

#if (IPV4_SUPPORT == ENABLED)
   //Default local configuration
   context->localConfig.ipAddr = interface->ipv4Context.addrList[0].addr;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   context->localConfig.ipAddrRejected = FALSE;
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   context->localConfig.primaryDns = interface->ipv4Context.dnsServerList[0];
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
   context->localConfig.primaryDnsRejected = FALSE;
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2200      	movs	r2, #0
 800d508:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

#if (IPV4_DNS_SERVER_LIST_SIZE >= 2)
   context->localConfig.secondaryDns = interface->ipv4Context.dnsServerList[1];
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   context->localConfig.secondaryDnsRejected = FALSE;
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   context->localConfig.secondaryDns = IPV4_UNSPECIFIED_ADDR;
   context->localConfig.secondaryDnsRejected = FALSE;
#endif

   //Manual primary DNS configuration?
   if(context->localConfig.primaryDns != IPV4_UNSPECIFIED_ADDR)
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800d526:	2b00      	cmp	r3, #0
 800d528:	d003      	beq.n	800d532 <pppConnect+0x1f2>
      context->localConfig.primaryDnsRejected = TRUE;
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

   //Manual secondary DNS configuration?
   if(context->localConfig.secondaryDns != IPV4_UNSPECIFIED_ADDR)
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d003      	beq.n	800d544 <pppConnect+0x204>
      context->localConfig.secondaryDnsRejected = TRUE;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	2201      	movs	r2, #1
 800d540:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

   //Default peer's configuration
   context->peerConfig.ipAddr = interface->ipv4Context.addrList[0].defaultGateway;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
   eui64CopyAddr(&context->peerConfig.interfaceId,
      interface->ipv6Context.routerList[0].addr.b + 8);
#endif

   //The link is available for traffic
   error = lcpOpen(context);
 800d550:	6938      	ldr	r0, [r7, #16]
 800d552:	f7fe f887 	bl	800b664 <lcpOpen>
 800d556:	4603      	mov	r3, r0
 800d558:	82fb      	strh	r3, [r7, #22]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800d55a:	4830      	ldr	r0, [pc, #192]	; (800d61c <pppConnect+0x2dc>)
 800d55c:	f7f3 f92b 	bl	80007b6 <osReleaseMutex>

   //Any error to report?
   if(error)
 800d560:	8afb      	ldrh	r3, [r7, #22]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <pppConnect+0x22a>
      return error;
 800d566:	8afb      	ldrh	r3, [r7, #22]
 800d568:	e054      	b.n	800d614 <pppConnect+0x2d4>

#if (NET_RTOS_SUPPORT == ENABLED)
   //Save current time
   start = osGetSystemTime();
 800d56a:	f7f3 f931 	bl	80007d0 <osGetSystemTime>
 800d56e:	60f8      	str	r0, [r7, #12]

   //Wait for the connection to be established
   while(1)
   {
      //Check current PPP phase
      if(context->pppPhase == PPP_PHASE_NETWORK)
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d576:	2b03      	cmp	r3, #3
 800d578:	d107      	bne.n	800d58a <pppConnect+0x24a>
      {
#if (IPV4_SUPPORT == ENABLED)
         //Check current IPCP state
         if(context->ipcpFsm.state == PPP_STATE_9_OPENED)
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d580:	2b09      	cmp	r3, #9
 800d582:	d10a      	bne.n	800d59a <pppConnect+0x25a>
         {
            //Connection successfully established
            error = NO_ERROR;
 800d584:	2300      	movs	r3, #0
 800d586:	82fb      	strh	r3, [r7, #22]
            //Exit immediately
            break;
 800d588:	e01e      	b.n	800d5c8 <pppConnect+0x288>
            //Exit immediately
            break;
         }
#endif
      }
      else if(context->pppPhase == PPP_PHASE_DEAD)
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d590:	2b00      	cmp	r3, #0
 800d592:	d102      	bne.n	800d59a <pppConnect+0x25a>
      {
         //Failed to establish connection
         error = ERROR_CONNECTION_FAILED;
 800d594:	23c9      	movs	r3, #201	; 0xc9
 800d596:	82fb      	strh	r3, [r7, #22]
         //Exit immediately
         break;
 800d598:	e016      	b.n	800d5c8 <pppConnect+0x288>
      }

      //Check timeout value
      if(context->timeout != INFINITE_DELAY)
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	69db      	ldr	r3, [r3, #28]
 800d59e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5a2:	d00d      	beq.n	800d5c0 <pppConnect+0x280>
      {
         //Get current time
         time = osGetSystemTime();
 800d5a4:	f7f3 f914 	bl	80007d0 <osGetSystemTime>
 800d5a8:	60b8      	str	r0, [r7, #8]

         //Check whether the timeout period has elapsed
         if(timeCompare(time, start + context->timeout) >= 0)
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	69da      	ldr	r2, [r3, #28]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	68ba      	ldr	r2, [r7, #8]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	db02      	blt.n	800d5c0 <pppConnect+0x280>
         {
            //Report an error
            error = ERROR_TIMEOUT;
 800d5ba:	23dc      	movs	r3, #220	; 0xdc
 800d5bc:	82fb      	strh	r3, [r7, #22]
            //Exit immediately
            break;
 800d5be:	e003      	b.n	800d5c8 <pppConnect+0x288>
         }
      }

      //Polling delay
      osDelayTask(PPP_POLLING_INTERVAL);
 800d5c0:	2032      	movs	r0, #50	; 0x32
 800d5c2:	f7f3 f832 	bl	800062a <osDelayTask>
      if(context->pppPhase == PPP_PHASE_NETWORK)
 800d5c6:	e7d3      	b.n	800d570 <pppConnect+0x230>
   }

   //Failed to establish connection?
   if(error)
 800d5c8:	8afb      	ldrh	r3, [r7, #22]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d021      	beq.n	800d612 <pppConnect+0x2d2>
   {
      //Get exclusive access
      osAcquireMutex(&netMutex);
 800d5ce:	4813      	ldr	r0, [pc, #76]	; (800d61c <pppConnect+0x2dc>)
 800d5d0:	f7f3 f8e2 	bl	8000798 <osAcquireMutex>

      //Abort the PPP connection
      context->pppPhase = PPP_PHASE_DEAD;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      context->lcpFsm.state = PPP_STATE_0_INITIAL;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (IPV4_SUPPORT == ENABLED)
      //Reset IPCP finite state machine
      context->ipcpFsm.state = PPP_STATE_0_INITIAL;
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      context->ipv6cpFsm.state = PPP_STATE_0_INITIAL;
#endif

#if (PAP_SUPPORT == ENABLED)
      //Abort PAP authentication process
      context->papFsm.localState = PAP_STATE_0_INITIAL;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

#if (CHAP_SUPPORT == ENABLED)
      //Abort CHAP authentication process
      context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      context->chapFsm.peerState = CHAP_STATE_0_INITIAL;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	2200      	movs	r2, #0
 800d608:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
#endif

      //Release exclusive access
      osReleaseMutex(&netMutex);
 800d60c:	4803      	ldr	r0, [pc, #12]	; (800d61c <pppConnect+0x2dc>)
 800d60e:	f7f3 f8d2 	bl	80007b6 <osReleaseMutex>
   }
#endif

   //Return status code
   return error;
 800d612:	8afb      	ldrh	r3, [r7, #22]
}
 800d614:	4618      	mov	r0, r3
 800d616:	3718      	adds	r7, #24
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	2000e460 	.word	0x2000e460

0800d620 <pppTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void pppTick(NetInterface *interface)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
   PppContext *context;

   //PPP driver?
   if(interface->nicDriver->type == NIC_TYPE_PPP)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d10f      	bne.n	800d652 <pppTick+0x32>
   {
      //Point to the PPP context
      context = interface->pppContext;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d638:	60fb      	str	r3, [r7, #12]

      //Handle LCP retransmission timer
      lcpTick(context);
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7fe f862 	bl	800b704 <lcpTick>

#if (IPV4_SUPPORT == ENABLED)
      //Handle IPCP retransmission timer
      ipcpTick(context);
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7fd f989 	bl	800a958 <ipcpTick>
      ipv6cpTick(context);
#endif

#if (PAP_SUPPORT == ENABLED)
      //Handle PAP timer
      papTick(context);
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f7ff fafc 	bl	800cc44 <papTick>
#endif

#if (CHAP_SUPPORT == ENABLED)
      //Handle CHAP timer
      chapTick(context);
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f7fc fd53 	bl	800a0f8 <chapTick>
#endif
   }
}
 800d652:	bf00      	nop
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
	...

0800d65c <pppProcessFrame>:
 * @param[in] frame Incoming PPP frame to process
 * @param[in] length Total frame length
 **/

void pppProcessFrame(NetInterface *interface, uint8_t *frame, size_t length)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
#if (IPV6_SUPPORT == ENABLED)
   NetBuffer1 buffer;
#endif

   //Point to the PPP context
   context = interface->pppContext;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d66e:	61fb      	str	r3, [r7, #28]

   //Check the length of the PPP frame
   if(length < PPP_FCS_SIZE)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b01      	cmp	r3, #1
 800d674:	d96b      	bls.n	800d74e <pppProcessFrame+0xf2>

   //Debug message
   TRACE_DEBUG("PPP frame received (%" PRIuSIZE " bytes)...\r\n", length);

   //The value of the residue is 0x0F47 when no FCS errors are detected
   if(pppCalcFcs(frame, length) != 0x0F47)
 800d676:	6879      	ldr	r1, [r7, #4]
 800d678:	68b8      	ldr	r0, [r7, #8]
 800d67a:	f000 f953 	bl	800d924 <pppCalcFcs>
 800d67e:	4603      	mov	r3, r0
 800d680:	461a      	mov	r2, r3
 800d682:	f640 7347 	movw	r3, #3911	; 0xf47
 800d686:	429a      	cmp	r2, r3
 800d688:	d00c      	beq.n	800d6a4 <pppProcessFrame+0x48>
   {
      //Debug message
      TRACE_WARNING("Wrong FCS detected!\r\n");
 800d68a:	f7f2 ffd9 	bl	8000640 <osSuspendAllTasks>
 800d68e:	4b33      	ldr	r3, [pc, #204]	; (800d75c <pppProcessFrame+0x100>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	2215      	movs	r2, #21
 800d696:	2101      	movs	r1, #1
 800d698:	4831      	ldr	r0, [pc, #196]	; (800d760 <pppProcessFrame+0x104>)
 800d69a:	f00d fcdf 	bl	801b05c <fwrite>
 800d69e:	f7f2 ffda 	bl	8000656 <osResumeAllTasks>
      //Drop the received frame
      return;
 800d6a2:	e057      	b.n	800d754 <pppProcessFrame+0xf8>
   }

   //Calculate the length of PPP frame excluding the FCS field
   length -= PPP_FCS_SIZE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	3b02      	subs	r3, #2
 800d6a8:	607b      	str	r3, [r7, #4]

   //Decompress the frame header
   n = pppParseFrameHeader(frame, length, &protocol);
 800d6aa:	f107 0316 	add.w	r3, r7, #22
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	6879      	ldr	r1, [r7, #4]
 800d6b2:	68b8      	ldr	r0, [r7, #8]
 800d6b4:	f000 f8e1 	bl	800d87a <pppParseFrameHeader>
 800d6b8:	61b8      	str	r0, [r7, #24]
   //Malformed PPP frame?
   if(!n)
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d048      	beq.n	800d752 <pppProcessFrame+0xf6>
      return;

   //Point to the payload field
   frame += n;
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	60bb      	str	r3, [r7, #8]
   length -= n;
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	1ad3      	subs	r3, r2, r3
 800d6ce:	607b      	str	r3, [r7, #4]

   //Check protocol field
   switch(protocol)
 800d6d0:	8afb      	ldrh	r3, [r7, #22]
 800d6d2:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d013      	beq.n	800d702 <pppProcessFrame+0xa6>
 800d6da:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	dc06      	bgt.n	800d6f0 <pppProcessFrame+0x94>
 800d6e2:	2b21      	cmp	r3, #33	; 0x21
 800d6e4:	d019      	beq.n	800d71a <pppProcessFrame+0xbe>
 800d6e6:	f248 0221 	movw	r2, #32801	; 0x8021
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d00f      	beq.n	800d70e <pppProcessFrame+0xb2>
 800d6ee:	e026      	b.n	800d73e <pppProcessFrame+0xe2>
 800d6f0:	f24c 0223 	movw	r2, #49187	; 0xc023
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d016      	beq.n	800d726 <pppProcessFrame+0xca>
 800d6f8:	f24c 2223 	movw	r2, #49699	; 0xc223
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d018      	beq.n	800d732 <pppProcessFrame+0xd6>
 800d700:	e01d      	b.n	800d73e <pppProcessFrame+0xe2>
   {
   //Link control protocol?
   case PPP_PROTOCOL_LCP:
      //Process incoming LCP packet
      lcpProcessPacket(context, (PppPacket *) frame, length);
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	69f8      	ldr	r0, [r7, #28]
 800d708:	f7fe f834 	bl	800b774 <lcpProcessPacket>
      break;
 800d70c:	e022      	b.n	800d754 <pppProcessFrame+0xf8>

#if (IPV4_SUPPORT == ENABLED)
   //IP control protocol?
   case PPP_PROTOCOL_IPCP:
      //Process incoming IPCP packet
      ipcpProcessPacket(context, (PppPacket *) frame, length);
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	68b9      	ldr	r1, [r7, #8]
 800d712:	69f8      	ldr	r0, [r7, #28]
 800d714:	f7fd f958 	bl	800a9c8 <ipcpProcessPacket>
      break;
 800d718:	e01c      	b.n	800d754 <pppProcessFrame+0xf8>
   //IP protocol?
   case PPP_PROTOCOL_IP:
      //Process incoming IPv4 packet
      ipv4ProcessPacket(interface, (Ipv4Header *) frame, length);
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	68b9      	ldr	r1, [r7, #8]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7fa feb9 	bl	8008496 <ipv4ProcessPacket>
      break;
 800d724:	e016      	b.n	800d754 <pppProcessFrame+0xf8>

#if (PAP_SUPPORT == ENABLED)
   //PAP protocol?
   case PPP_PROTOCOL_PAP:
      //Process incoming PAP packet
      papProcessPacket(context, (PppPacket *) frame, length);
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	68b9      	ldr	r1, [r7, #8]
 800d72a:	69f8      	ldr	r0, [r7, #28]
 800d72c:	f7ff fac4 	bl	800ccb8 <papProcessPacket>
      break;
 800d730:	e010      	b.n	800d754 <pppProcessFrame+0xf8>

#if (CHAP_SUPPORT == ENABLED)
   //CHAP protocol?
   case PPP_PROTOCOL_CHAP:
      //Process incoming CHAP packet
      chapProcessPacket(context, (PppPacket *) frame, length);
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	68b9      	ldr	r1, [r7, #8]
 800d736:	69f8      	ldr	r0, [r7, #28]
 800d738:	f7fc fd18 	bl	800a16c <chapProcessPacket>
      break;
 800d73c:	e00a      	b.n	800d754 <pppProcessFrame+0xf8>
#endif

   //Unknown protocol field
   default:
      //The peer is attempting to use a protocol which is unsupported
      lcpProcessUnknownProtocol(context, protocol, frame, length);
 800d73e:	8af9      	ldrh	r1, [r7, #22]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	69f8      	ldr	r0, [r7, #28]
 800d746:	f7fe fc5f 	bl	800c008 <lcpProcessUnknownProtocol>
      break;
 800d74a:	bf00      	nop
 800d74c:	e002      	b.n	800d754 <pppProcessFrame+0xf8>
      return;
 800d74e:	bf00      	nop
 800d750:	e000      	b.n	800d754 <pppProcessFrame+0xf8>
      return;
 800d752:	bf00      	nop
   }
}
 800d754:	3720      	adds	r7, #32
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	20000058 	.word	0x20000058
 800d760:	0801d1ac 	.word	0x0801d1ac

0800d764 <pppSendFrame>:
 * @return Error code
 **/

error_t pppSendFrame(NetInterface *interface,
   NetBuffer *buffer, size_t offset, uint16_t protocol)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
 800d770:	807b      	strh	r3, [r7, #2]
   uint16_t fcs;
   uint8_t *p;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d778:	61fb      	str	r3, [r7, #28]

   //Check whether the Protocol field can be compressed
   if(context->peerConfig.pfc && MSB(protocol) == 0)
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800d780:	2b00      	cmp	r3, #0
 800d782:	d017      	beq.n	800d7b4 <pppSendFrame+0x50>
 800d784:	887b      	ldrh	r3, [r7, #2]
 800d786:	0a1b      	lsrs	r3, r3, #8
 800d788:	b29b      	uxth	r3, r3
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d111      	bne.n	800d7b4 <pppSendFrame+0x50>
   {
      //Is there enough space in the buffer to store the compressed
      //Protocol field?
      if(offset < 1)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <pppSendFrame+0x36>
         return ERROR_FAILURE;
 800d796:	2301      	movs	r3, #1
 800d798:	e06b      	b.n	800d872 <pppSendFrame+0x10e>

      //Make room for the Protocol field
      offset--;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	607b      	str	r3, [r7, #4]
      //Move backward
      p = netBufferAt(buffer, offset);
 800d7a0:	6879      	ldr	r1, [r7, #4]
 800d7a2:	68b8      	ldr	r0, [r7, #8]
 800d7a4:	f7f4 ff5c 	bl	8002660 <netBufferAt>
 800d7a8:	61b8      	str	r0, [r7, #24]
      //Compress the Protocol field
      p[0] = LSB(protocol);
 800d7aa:	887b      	ldrh	r3, [r7, #2]
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	701a      	strb	r2, [r3, #0]
 800d7b2:	e017      	b.n	800d7e4 <pppSendFrame+0x80>
   }
   else
   {
      //Is there enough space in the buffer to store the uncompressed
      //Protocol field?
      if(offset < 2)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d801      	bhi.n	800d7be <pppSendFrame+0x5a>
         return ERROR_FAILURE;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e059      	b.n	800d872 <pppSendFrame+0x10e>

      //Make room for the Protocol field
      offset -= 2;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	3b02      	subs	r3, #2
 800d7c2:	607b      	str	r3, [r7, #4]
      //Move backward
      p = netBufferAt(buffer, offset);
 800d7c4:	6879      	ldr	r1, [r7, #4]
 800d7c6:	68b8      	ldr	r0, [r7, #8]
 800d7c8:	f7f4 ff4a 	bl	8002660 <netBufferAt>
 800d7cc:	61b8      	str	r0, [r7, #24]
      //Do not compress the Protocol field
      p[0] = MSB(protocol);
 800d7ce:	887b      	ldrh	r3, [r7, #2]
 800d7d0:	0a1b      	lsrs	r3, r3, #8
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	701a      	strb	r2, [r3, #0]
      p[1] = LSB(protocol);
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	887a      	ldrh	r2, [r7, #2]
 800d7e0:	b2d2      	uxtb	r2, r2
 800d7e2:	701a      	strb	r2, [r3, #0]
   }

   //Check whether the Address and Control fields can be compressed
   if(context->peerConfig.acfc && protocol != PPP_PROTOCOL_LCP)
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d004      	beq.n	800d7f8 <pppSendFrame+0x94>
 800d7ee:	887b      	ldrh	r3, [r7, #2]
 800d7f0:	f24c 0221 	movw	r2, #49185	; 0xc021
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d113      	bne.n	800d820 <pppSendFrame+0xbc>
   }
   else
   {
      //Is there enough space in the buffer to store the uncompressed
      //Address and Control fields?
      if(offset < 2)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d801      	bhi.n	800d802 <pppSendFrame+0x9e>
         return ERROR_FAILURE;
 800d7fe:	2301      	movs	r3, #1
 800d800:	e037      	b.n	800d872 <pppSendFrame+0x10e>

      //Make room for the Address and Control fields
      offset -= 2;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	3b02      	subs	r3, #2
 800d806:	607b      	str	r3, [r7, #4]
      //Move backward
      p = netBufferAt(buffer, offset);
 800d808:	6879      	ldr	r1, [r7, #4]
 800d80a:	68b8      	ldr	r0, [r7, #8]
 800d80c:	f7f4 ff28 	bl	8002660 <netBufferAt>
 800d810:	61b8      	str	r0, [r7, #24]
      //Do not compress the Address and Control fields
      p[0] = PPP_ADDR_FIELD;
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	22ff      	movs	r2, #255	; 0xff
 800d816:	701a      	strb	r2, [r3, #0]
      p[1] = PPP_CTRL_FIELD;
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	3301      	adds	r3, #1
 800d81c:	2203      	movs	r2, #3
 800d81e:	701a      	strb	r2, [r3, #0]
   }

   //Retrieve the length of the frame
   length = netBufferGetLength(buffer) - offset;
 800d820:	68b8      	ldr	r0, [r7, #8]
 800d822:	f7f4 fe55 	bl	80024d0 <netBufferGetLength>
 800d826:	4602      	mov	r2, r0
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	617b      	str	r3, [r7, #20]

   //Compute FCS over the header and payload
   fcs = pppCalcFcsEx(buffer, offset, length);
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	6879      	ldr	r1, [r7, #4]
 800d832:	68b8      	ldr	r0, [r7, #8]
 800d834:	f000 f8a2 	bl	800d97c <pppCalcFcsEx>
 800d838:	4603      	mov	r3, r0
 800d83a:	823b      	strh	r3, [r7, #16]
   //The FCS is transmitted least significant octet first
   fcs = htole16(fcs);
 800d83c:	8a3b      	ldrh	r3, [r7, #16]
 800d83e:	823b      	strh	r3, [r7, #16]

   //Append the calculated FCS value
   error = netBufferAppend(buffer, &fcs, PPP_FCS_SIZE);
 800d840:	f107 0310 	add.w	r3, r7, #16
 800d844:	2202      	movs	r2, #2
 800d846:	4619      	mov	r1, r3
 800d848:	68b8      	ldr	r0, [r7, #8]
 800d84a:	f7f5 f8a1 	bl	8002990 <netBufferAppend>
 800d84e:	4603      	mov	r3, r0
 800d850:	827b      	strh	r3, [r7, #18]
   //Any error to report?
   if(error)
 800d852:	8a7b      	ldrh	r3, [r7, #18]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <pppSendFrame+0xf8>
      return error;
 800d858:	8a7b      	ldrh	r3, [r7, #18]
 800d85a:	e00a      	b.n	800d872 <pppSendFrame+0x10e>

   //Adjust frame length
   length += PPP_FCS_SIZE;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	3302      	adds	r3, #2
 800d860:	617b      	str	r3, [r7, #20]
   //Debug message
   TRACE_DEBUG("Sending PPP frame (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG("  Protocol = 0x%04" PRIX16 "\r\n", protocol);

   //Send the resulting frame over the specified link
   error = nicSendPacket(interface, buffer, offset);
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	68b9      	ldr	r1, [r7, #8]
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f7f5 f9bf 	bl	8002bea <nicSendPacket>
 800d86c:	4603      	mov	r3, r0
 800d86e:	827b      	strh	r3, [r7, #18]
   //Return status code
   return error;
 800d870:	8a7b      	ldrh	r3, [r7, #18]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3720      	adds	r7, #32
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <pppParseFrameHeader>:
 * @return If the PPP header was successfully parsed, the function returns the size
 *   of the PPP header, in bytes. If a parsing error occurred, zero is returned
 **/

size_t pppParseFrameHeader(const uint8_t *frame, size_t length, uint16_t *protocol)
{
 800d87a:	b480      	push	{r7}
 800d87c:	b087      	sub	sp, #28
 800d87e:	af00      	add	r7, sp, #0
 800d880:	60f8      	str	r0, [r7, #12]
 800d882:	60b9      	str	r1, [r7, #8]
 800d884:	607a      	str	r2, [r7, #4]
   size_t n;

   //Size of the PPP header, in bytes
   n = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	617b      	str	r3, [r7, #20]

   //On reception, the Address and Control fields are decompressed by
   //examining the first two octets
   if(length >= 2)
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d90a      	bls.n	800d8a6 <pppParseFrameHeader+0x2c>
   {
      //If they contain the values 0xff and 0x03, they are assumed to be
      //the Address and Control fields. If not, it is assumed that the
      //fields were compressed and were not transmitted
      if(frame[0] == PPP_ADDR_FIELD && frame[1] == PPP_CTRL_FIELD)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	2bff      	cmp	r3, #255	; 0xff
 800d896:	d106      	bne.n	800d8a6 <pppParseFrameHeader+0x2c>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	3301      	adds	r3, #1
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d101      	bne.n	800d8a6 <pppParseFrameHeader+0x2c>
      {
         //Move to the Protocol field
         n = 2;
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	617b      	str	r3, [r7, #20]
      }
   }

   //Check the length of the PPP frame
   if(length >= (n + 1))
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d32f      	bcc.n	800d910 <pppParseFrameHeader+0x96>
   {
      //PPP Protocol field numbers are chosen such that some values may be
      //compressed into a single octet form which is clearly distinguishable
      //from the two octet form
      if(frame[n] & 0x01)
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	f003 0301 	and.w	r3, r3, #1
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00a      	beq.n	800d8d6 <pppParseFrameHeader+0x5c>
      {
         //The presence of a binary 1 as the LSB marks the last octet of
         //the Protocol field
         *protocol = frame[n];
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	801a      	strh	r2, [r3, #0]

         //Update the length of the header
         n++;
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	617b      	str	r3, [r7, #20]
 800d8d4:	e01e      	b.n	800d914 <pppParseFrameHeader+0x9a>
      }
      else
      {
         //Check the length of the PPP frame
         if(length >= (n + 2))
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	3302      	adds	r3, #2
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d314      	bcc.n	800d90a <pppParseFrameHeader+0x90>
         {
            //The Protocol field is not compressed
            *protocol = (frame[n] << 8) | frame[n + 1];
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	021b      	lsls	r3, r3, #8
 800d8ea:	b21a      	sxth	r2, r3
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	68f9      	ldr	r1, [r7, #12]
 800d8f2:	440b      	add	r3, r1
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	b21b      	sxth	r3, r3
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	b21b      	sxth	r3, r3
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	801a      	strh	r2, [r3, #0]

            //Update the length of the header
            n += 2;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	3302      	adds	r3, #2
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	e004      	b.n	800d914 <pppParseFrameHeader+0x9a>
         }
         else
         {
            //Malformed PPP frame
            n = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	617b      	str	r3, [r7, #20]
 800d90e:	e001      	b.n	800d914 <pppParseFrameHeader+0x9a>
      }
   }
   else
   {
      //Malformed PPP frame
      n = 0;
 800d910:	2300      	movs	r3, #0
 800d912:	617b      	str	r3, [r7, #20]
   }

   //Return the size of the PPP header, in bytes
   return n;
 800d914:	697b      	ldr	r3, [r7, #20]
}
 800d916:	4618      	mov	r0, r3
 800d918:	371c      	adds	r7, #28
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
	...

0800d924 <pppCalcFcs>:
 * @param[in] length Number of bytes to process
 * @return Resulting FCS value
 **/

uint16_t pppCalcFcs(const uint8_t *data, size_t length)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
   size_t i;
   uint16_t fcs;

   //FCS preset value
   fcs = 0xFFFF;
 800d92e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d932:	817b      	strh	r3, [r7, #10]

   //Loop through data
   for(i = 0; i < length; i++)
 800d934:	2300      	movs	r3, #0
 800d936:	60fb      	str	r3, [r7, #12]
 800d938:	e011      	b.n	800d95e <pppCalcFcs+0x3a>
   {
      //The message is processed byte by byte
      fcs = (fcs >> 8) ^ fcsTable[(fcs & 0xFF) ^ data[i]];
 800d93a:	897b      	ldrh	r3, [r7, #10]
 800d93c:	0a1b      	lsrs	r3, r3, #8
 800d93e:	b29a      	uxth	r2, r3
 800d940:	897b      	ldrh	r3, [r7, #10]
 800d942:	b2db      	uxtb	r3, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	68f9      	ldr	r1, [r7, #12]
 800d948:	4401      	add	r1, r0
 800d94a:	7809      	ldrb	r1, [r1, #0]
 800d94c:	404b      	eors	r3, r1
 800d94e:	490a      	ldr	r1, [pc, #40]	; (800d978 <pppCalcFcs+0x54>)
 800d950:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d954:	4053      	eors	r3, r2
 800d956:	817b      	strh	r3, [r7, #10]
   for(i = 0; i < length; i++)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	3301      	adds	r3, #1
 800d95c:	60fb      	str	r3, [r7, #12]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	429a      	cmp	r2, r3
 800d964:	d3e9      	bcc.n	800d93a <pppCalcFcs+0x16>
   }

   //Return 1's complement value
   return ~fcs;
 800d966:	897b      	ldrh	r3, [r7, #10]
 800d968:	43db      	mvns	r3, r3
 800d96a:	b29b      	uxth	r3, r3
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3714      	adds	r7, #20
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr
 800d978:	0801d59c 	.word	0x0801d59c

0800d97c <pppCalcFcsEx>:
 * @param[in] length Number of bytes to process
 * @return Resulting FCS value
 **/

uint16_t pppCalcFcsEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b089      	sub	sp, #36	; 0x24
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint16_t fcs;
   uint8_t *p;

   //FCS preset value
   fcs = 0xFFFF;
 800d988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d98c:	82fb      	strh	r3, [r7, #22]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 800d98e:	2300      	movs	r3, #0
 800d990:	61fb      	str	r3, [r7, #28]
 800d992:	e04a      	b.n	800da2a <pppCalcFcsEx+0xae>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	3301      	adds	r3, #1
 800d99a:	00db      	lsls	r3, r3, #3
 800d99c:	4413      	add	r3, r2
 800d99e:	889b      	ldrh	r3, [r3, #4]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d233      	bcs.n	800da10 <pppCalcFcsEx+0x94>
      {
         //Point to the first data byte
         p = (uint8_t *) buffer->chunk[i].address + offset;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	69fa      	ldr	r2, [r7, #28]
 800d9ac:	3201      	adds	r2, #1
 800d9ae:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	613b      	str	r3, [r7, #16]
         //Compute the number of bytes to process
         n = MIN(buffer->chunk[i].length - offset, length);
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	00db      	lsls	r3, r3, #3
 800d9c0:	4413      	add	r3, r2
 800d9c2:	889b      	ldrh	r3, [r3, #4]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	1ad3      	subs	r3, r2, r3
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	bf28      	it	cs
 800d9d0:	4613      	movcs	r3, r2
 800d9d2:	61bb      	str	r3, [r7, #24]
         //Adjust byte counter
         length -= n;
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	607b      	str	r3, [r7, #4]

         //Process current chunk
         while(n > 0)
 800d9dc:	e012      	b.n	800da04 <pppCalcFcsEx+0x88>
         {
            //The message is processed byte by byte
            fcs = (fcs >> 8) ^ fcsTable[(fcs & 0xFF) ^ *p];
 800d9de:	8afb      	ldrh	r3, [r7, #22]
 800d9e0:	0a1b      	lsrs	r3, r3, #8
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	8afb      	ldrh	r3, [r7, #22]
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	6939      	ldr	r1, [r7, #16]
 800d9ea:	7809      	ldrb	r1, [r1, #0]
 800d9ec:	404b      	eors	r3, r1
 800d9ee:	4917      	ldr	r1, [pc, #92]	; (800da4c <pppCalcFcsEx+0xd0>)
 800d9f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d9f4:	4053      	eors	r3, r2
 800d9f6:	82fb      	strh	r3, [r7, #22]

            //Next byte
            p++;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	613b      	str	r3, [r7, #16]
            n--;
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	3b01      	subs	r3, #1
 800da02:	61bb      	str	r3, [r7, #24]
         while(n > 0)
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d1e9      	bne.n	800d9de <pppCalcFcsEx+0x62>
         }

         //Process the next block from the start
         offset = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	60bb      	str	r3, [r7, #8]
 800da0e:	e009      	b.n	800da24 <pppCalcFcsEx+0xa8>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	3301      	adds	r3, #1
 800da16:	00db      	lsls	r3, r3, #3
 800da18:	4413      	add	r3, r2
 800da1a:	889b      	ldrh	r3, [r3, #4]
 800da1c:	461a      	mov	r2, r3
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	1a9b      	subs	r3, r3, r2
 800da22:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	3301      	adds	r3, #1
 800da28:	61fb      	str	r3, [r7, #28]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	69fa      	ldr	r2, [r7, #28]
 800da30:	429a      	cmp	r2, r3
 800da32:	d202      	bcs.n	800da3a <pppCalcFcsEx+0xbe>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1ac      	bne.n	800d994 <pppCalcFcsEx+0x18>
      }
   }

   //Return 1's complement value
   return ~fcs;
 800da3a:	8afb      	ldrh	r3, [r7, #22]
 800da3c:	43db      	mvns	r3, r3
 800da3e:	b29b      	uxth	r3, r3
}
 800da40:	4618      	mov	r0, r3
 800da42:	3724      	adds	r7, #36	; 0x24
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	0801d59c 	.word	0x0801d59c

0800da50 <pppAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *pppAllocBuffer(size_t length, size_t *offset)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;

   //Allocate a buffer to hold the Ethernet header and the payload
   buffer = netBufferAlloc(length + PPP_FRAME_HEADER_SIZE);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3304      	adds	r3, #4
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f4 fcf4 	bl	800244c <netBufferAlloc>
 800da64:	60f8      	str	r0, [r7, #12]
   //Failed to allocate buffer?
   if(buffer == NULL)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <pppAllocBuffer+0x20>
      return NULL;
 800da6c:	2300      	movs	r3, #0
 800da6e:	e003      	b.n	800da78 <pppAllocBuffer+0x28>

   //Offset to the first byte of the payload
   *offset = PPP_FRAME_HEADER_SIZE;
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	2204      	movs	r2, #4
 800da74:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 800da76:	68fb      	ldr	r3, [r7, #12]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <pppUpEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppUpEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <pppUpEvent+0x1a>
 800da94:	2b01      	cmp	r3, #1
 800da96:	d005      	beq.n	800daa4 <pppUpEvent+0x24>
      break;
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800da98:	e012      	b.n	800dac0 <pppUpEvent+0x40>
      pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800da9a:	2102      	movs	r1, #2
 800da9c:	68b8      	ldr	r0, [r7, #8]
 800da9e:	f000 fc4d 	bl	800e33c <pppChangeState>
      break;
 800daa2:	e00d      	b.n	800dac0 <pppUpEvent+0x40>
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	210a      	movs	r1, #10
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	4798      	blx	r3
      callbacks->sendConfigureReq(context);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	4798      	blx	r3
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800dab6:	2106      	movs	r1, #6
 800dab8:	68b8      	ldr	r0, [r7, #8]
 800daba:	f000 fc3f 	bl	800e33c <pppChangeState>
      break;
 800dabe:	bf00      	nop
   }
}
 800dac0:	bf00      	nop
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <pppDownEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppDownEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	3b02      	subs	r3, #2
 800dada:	2b07      	cmp	r3, #7
 800dadc:	d833      	bhi.n	800db46 <pppDownEvent+0x7e>
 800dade:	a201      	add	r2, pc, #4	; (adr r2, 800dae4 <pppDownEvent+0x1c>)
 800dae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae4:	0800db05 	.word	0x0800db05
 800dae8:	0800db0f 	.word	0x0800db0f
 800daec:	0800db21 	.word	0x0800db21
 800daf0:	0800db2b 	.word	0x0800db2b
 800daf4:	0800db2b 	.word	0x0800db2b
 800daf8:	0800db2b 	.word	0x0800db2b
 800dafc:	0800db2b 	.word	0x0800db2b
 800db00:	0800db35 	.word	0x0800db35
   {
   case PPP_STATE_2_CLOSED:
      //Switch to the Initial state
      pppChangeState(fsm, PPP_STATE_0_INITIAL);
 800db04:	2100      	movs	r1, #0
 800db06:	68b8      	ldr	r0, [r7, #8]
 800db08:	f000 fc18 	bl	800e33c <pppChangeState>
      break;
 800db0c:	e01c      	b.n	800db48 <pppDownEvent+0x80>
   case PPP_STATE_3_STOPPED:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800db0e:	2101      	movs	r1, #1
 800db10:	68b8      	ldr	r0, [r7, #8]
 800db12:	f000 fc13 	bl	800e33c <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Starting state. The lower layer is needed for the link
      callbacks->thisLayerStarted(context);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	4798      	blx	r3
      break;
 800db1e:	e013      	b.n	800db48 <pppDownEvent+0x80>
   case PPP_STATE_4_CLOSING:
      //Switch to the Initial state
      pppChangeState(fsm, PPP_STATE_0_INITIAL);
 800db20:	2100      	movs	r1, #0
 800db22:	68b8      	ldr	r0, [r7, #8]
 800db24:	f000 fc0a 	bl	800e33c <pppChangeState>
      break;
 800db28:	e00e      	b.n	800db48 <pppDownEvent+0x80>
   case PPP_STATE_5_STOPPING:
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800db2a:	2101      	movs	r1, #1
 800db2c:	68b8      	ldr	r0, [r7, #8]
 800db2e:	f000 fc05 	bl	800e33c <pppChangeState>
      break;
 800db32:	e009      	b.n	800db48 <pppDownEvent+0x80>
   case PPP_STATE_9_OPENED:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800db34:	2101      	movs	r1, #1
 800db36:	68b8      	ldr	r0, [r7, #8]
 800db38:	f000 fc00 	bl	800e33c <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	4798      	blx	r3
      break;
 800db44:	e000      	b.n	800db48 <pppDownEvent+0x80>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800db46:	bf00      	nop
   }
}
 800db48:	bf00      	nop
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <pppOpenEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppOpenEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b09      	cmp	r3, #9
 800db62:	d833      	bhi.n	800dbcc <pppOpenEvent+0x7c>
 800db64:	a201      	add	r2, pc, #4	; (adr r2, 800db6c <pppOpenEvent+0x1c>)
 800db66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6a:	bf00      	nop
 800db6c:	0800db95 	.word	0x0800db95
 800db70:	0800dbcd 	.word	0x0800dbcd
 800db74:	0800dba7 	.word	0x0800dba7
 800db78:	0800dbcd 	.word	0x0800dbcd
 800db7c:	0800dbc3 	.word	0x0800dbc3
 800db80:	0800dbcd 	.word	0x0800dbcd
 800db84:	0800dbcd 	.word	0x0800dbcd
 800db88:	0800dbcd 	.word	0x0800dbcd
 800db8c:	0800dbcd 	.word	0x0800dbcd
 800db90:	0800dbcd 	.word	0x0800dbcd
   {
   case PPP_STATE_0_INITIAL:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800db94:	2101      	movs	r1, #1
 800db96:	68b8      	ldr	r0, [r7, #8]
 800db98:	f000 fbd0 	bl	800e33c <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Starting state. The lower layer is needed for the link
      callbacks->thisLayerStarted(context);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	4798      	blx	r3
      break;
 800dba4:	e013      	b.n	800dbce <pppOpenEvent+0x7e>
   case PPP_STATE_1_STARTING:
      //Stay in current state
      break;
   case PPP_STATE_2_CLOSED:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	691b      	ldr	r3, [r3, #16]
 800dbaa:	210a      	movs	r1, #10
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	4798      	blx	r3
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	699b      	ldr	r3, [r3, #24]
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800dbb8:	2106      	movs	r1, #6
 800dbba:	68b8      	ldr	r0, [r7, #8]
 800dbbc:	f000 fbbe 	bl	800e33c <pppChangeState>
      break;
 800dbc0:	e005      	b.n	800dbce <pppOpenEvent+0x7e>
   case PPP_STATE_3_STOPPED:
      //Stay in current state
      break;
   case PPP_STATE_4_CLOSING:
      //Switch to the Stopping state
      pppChangeState(fsm, PPP_STATE_5_STOPPING);
 800dbc2:	2105      	movs	r1, #5
 800dbc4:	68b8      	ldr	r0, [r7, #8]
 800dbc6:	f000 fbb9 	bl	800e33c <pppChangeState>
      break;
 800dbca:	e000      	b.n	800dbce <pppOpenEvent+0x7e>
      break;
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800dbcc:	bf00      	nop
   }
}
 800dbce:	bf00      	nop
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop

0800dbd8 <pppCloseEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppCloseEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b09      	cmp	r3, #9
 800dbea:	d84a      	bhi.n	800dc82 <pppCloseEvent+0xaa>
 800dbec:	a201      	add	r2, pc, #4	; (adr r2, 800dbf4 <pppCloseEvent+0x1c>)
 800dbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf2:	bf00      	nop
 800dbf4:	0800dc83 	.word	0x0800dc83
 800dbf8:	0800dc1d 	.word	0x0800dc1d
 800dbfc:	0800dc83 	.word	0x0800dc83
 800dc00:	0800dc2f 	.word	0x0800dc2f
 800dc04:	0800dc83 	.word	0x0800dc83
 800dc08:	0800dc39 	.word	0x0800dc39
 800dc0c:	0800dc43 	.word	0x0800dc43
 800dc10:	0800dc43 	.word	0x0800dc43
 800dc14:	0800dc43 	.word	0x0800dc43
 800dc18:	0800dc5f 	.word	0x0800dc5f
   case PPP_STATE_0_INITIAL:
      //Stay in current state
      break;
   case PPP_STATE_1_STARTING:
      //Switch to the Initial state
      pppChangeState(fsm, PPP_STATE_0_INITIAL);
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	68b8      	ldr	r0, [r7, #8]
 800dc20:	f000 fb8c 	bl	800e33c <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Initial, Closed or Stopped states. The lower layer is no longer
      //needed for the link
      callbacks->thisLayerFinished(context);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	4798      	blx	r3
      break;
 800dc2c:	e02a      	b.n	800dc84 <pppCloseEvent+0xac>
   case PPP_STATE_2_CLOSED:
      //Stay in current state
      break;
   case PPP_STATE_3_STOPPED:
      //Switch to the Closed state
      pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800dc2e:	2102      	movs	r1, #2
 800dc30:	68b8      	ldr	r0, [r7, #8]
 800dc32:	f000 fb83 	bl	800e33c <pppChangeState>
      break;
 800dc36:	e025      	b.n	800dc84 <pppCloseEvent+0xac>
   case PPP_STATE_4_CLOSING:
      //Stay in current state
      break;
   case PPP_STATE_5_STOPPING:
      //Switch to the Closing state
      pppChangeState(fsm, PPP_STATE_4_CLOSING);
 800dc38:	2104      	movs	r1, #4
 800dc3a:	68b8      	ldr	r0, [r7, #8]
 800dc3c:	f000 fb7e 	bl	800e33c <pppChangeState>
      break;
 800dc40:	e020      	b.n	800dc84 <pppCloseEvent+0xac>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_TERMINATE);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	2102      	movs	r1, #2
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	4798      	blx	r3
      //Send Terminate-Request packet
      callbacks->sendTerminateReq(context);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	4798      	blx	r3
      //Switch to the Closing state
      pppChangeState(fsm, PPP_STATE_4_CLOSING);
 800dc54:	2104      	movs	r1, #4
 800dc56:	68b8      	ldr	r0, [r7, #8]
 800dc58:	f000 fb70 	bl	800e33c <pppChangeState>
      break;
 800dc5c:	e012      	b.n	800dc84 <pppCloseEvent+0xac>
   case PPP_STATE_9_OPENED:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_TERMINATE);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	2102      	movs	r1, #2
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	4798      	blx	r3
      //Send Terminate-Request packet
      callbacks->sendTerminateReq(context);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	4798      	blx	r3
      //Switch to the Closing state
      pppChangeState(fsm, PPP_STATE_4_CLOSING);
 800dc70:	2104      	movs	r1, #4
 800dc72:	68b8      	ldr	r0, [r7, #8]
 800dc74:	f000 fb62 	bl	800e33c <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	4798      	blx	r3
      break;
 800dc80:	e000      	b.n	800dc84 <pppCloseEvent+0xac>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800dc82:	bf00      	nop
   }
}
 800dc84:	bf00      	nop
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <pppTimeoutEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppTimeoutEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
   //The restart counter is greater than zero (TO+ event)
   if(fsm->restartCounter > 0)
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d024      	beq.n	800dcea <pppTimeoutEvent+0x5e>
   {
      //Check current state
      switch(fsm->state)
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3b04      	subs	r3, #4
 800dca6:	2b04      	cmp	r3, #4
 800dca8:	d83a      	bhi.n	800dd20 <pppTimeoutEvent+0x94>
 800dcaa:	a201      	add	r2, pc, #4	; (adr r2, 800dcb0 <pppTimeoutEvent+0x24>)
 800dcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb0:	0800dcc5 	.word	0x0800dcc5
 800dcb4:	0800dcc5 	.word	0x0800dcc5
 800dcb8:	0800dccf 	.word	0x0800dccf
 800dcbc:	0800dccf 	.word	0x0800dccf
 800dcc0:	0800dce1 	.word	0x0800dce1
      {
      case PPP_STATE_4_CLOSING:
      case PPP_STATE_5_STOPPING:
         //Send Terminate-Request packet
         callbacks->sendTerminateReq(context);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	4798      	blx	r3
         //Stay in current state
         break;
 800dccc:	e02b      	b.n	800dd26 <pppTimeoutEvent+0x9a>
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
         //Send Configuration-Request packet
         callbacks->sendConfigureReq(context);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	699b      	ldr	r3, [r3, #24]
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800dcd6:	2106      	movs	r1, #6
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f000 fb2f 	bl	800e33c <pppChangeState>
         break;
 800dcde:	e022      	b.n	800dd26 <pppTimeoutEvent+0x9a>
      case PPP_STATE_8_ACK_SENT:
         //Send Configuration-Request packet
         callbacks->sendConfigureReq(context);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	699b      	ldr	r3, [r3, #24]
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	4798      	blx	r3
         //Stay in current state
         break;
 800dce8:	e01d      	b.n	800dd26 <pppTimeoutEvent+0x9a>
   }
   //The restart counter is not greater than zero (TO- event)
   else
   {
      //Check current state
      switch(fsm->state)
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b04      	cmp	r3, #4
 800dcf0:	d004      	beq.n	800dcfc <pppTimeoutEvent+0x70>
 800dcf2:	2b04      	cmp	r3, #4
 800dcf4:	d316      	bcc.n	800dd24 <pppTimeoutEvent+0x98>
 800dcf6:	2b08      	cmp	r3, #8
 800dcf8:	d814      	bhi.n	800dd24 <pppTimeoutEvent+0x98>
 800dcfa:	e008      	b.n	800dd0e <pppTimeoutEvent+0x82>
      {
      case PPP_STATE_4_CLOSING:
         //Switch to the Closed state
         pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800dcfc:	2102      	movs	r1, #2
 800dcfe:	68b8      	ldr	r0, [r7, #8]
 800dd00:	f000 fb1c 	bl	800e33c <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	4798      	blx	r3
         break;
 800dd0c:	e00b      	b.n	800dd26 <pppTimeoutEvent+0x9a>
      case PPP_STATE_5_STOPPING:
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
      case PPP_STATE_8_ACK_SENT:
         //Switch to the Stopped state
         pppChangeState(fsm, PPP_STATE_3_STOPPED);
 800dd0e:	2103      	movs	r1, #3
 800dd10:	68b8      	ldr	r0, [r7, #8]
 800dd12:	f000 fb13 	bl	800e33c <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	4798      	blx	r3
         break;
 800dd1e:	e002      	b.n	800dd26 <pppTimeoutEvent+0x9a>
         break;
 800dd20:	bf00      	nop
 800dd22:	e000      	b.n	800dd26 <pppTimeoutEvent+0x9a>
      default:
         //This event cannot occur in a properly implemented automaton.
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
 800dd24:	bf00      	nop
      }
   }
}
 800dd26:	bf00      	nop
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop

0800dd30 <pppRcvConfigureReqEvent>:
 * @param[in] code Tells whether the configuration options are acceptable
 **/

void pppRcvConfigureReqEvent(PppContext *context, PppFsm *fsm, const PppCallbacks *callbacks,
   const PppConfigurePacket *configureReqPacket, PppCode code)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
 800dd3c:	603b      	str	r3, [r7, #0]
   //Check whether the configuration options are acceptable
   if(code == PPP_CODE_CONFIGURE_ACK)
 800dd3e:	7e3b      	ldrb	r3, [r7, #24]
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d162      	bne.n	800de0a <pppRcvConfigureReqEvent+0xda>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      switch(fsm->state)
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	3b02      	subs	r3, #2
 800dd4a:	2b07      	cmp	r3, #7
 800dd4c:	f200 810b 	bhi.w	800df66 <pppRcvConfigureReqEvent+0x236>
 800dd50:	a201      	add	r2, pc, #4	; (adr r2, 800dd58 <pppRcvConfigureReqEvent+0x28>)
 800dd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd56:	bf00      	nop
 800dd58:	0800dd79 	.word	0x0800dd79
 800dd5c:	0800dd85 	.word	0x0800dd85
 800dd60:	0800df67 	.word	0x0800df67
 800dd64:	0800df67 	.word	0x0800df67
 800dd68:	0800ddab 	.word	0x0800ddab
 800dd6c:	0800ddbf 	.word	0x0800ddbf
 800dd70:	0800dddb 	.word	0x0800dddb
 800dd74:	0800dde7 	.word	0x0800dde7
      {
      case PPP_STATE_2_CLOSED:
         //Send Terminate-Ack packet
         callbacks->sendTerminateAck(context, NULL);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	4798      	blx	r3
         //Stay in current state
         break;
 800dd82:	e0f7      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_3_STOPPED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	210a      	movs	r1, #10
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	4798      	blx	r3
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	4798      	blx	r3
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	69db      	ldr	r3, [r3, #28]
 800dd9a:	6839      	ldr	r1, [r7, #0]
 800dd9c:	68f8      	ldr	r0, [r7, #12]
 800dd9e:	4798      	blx	r3
         //Switch to the Ack-Sent state
         pppChangeState(fsm, PPP_STATE_8_ACK_SENT);
 800dda0:	2108      	movs	r1, #8
 800dda2:	68b8      	ldr	r0, [r7, #8]
 800dda4:	f000 faca 	bl	800e33c <pppChangeState>
         break;
 800dda8:	e0e4      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_5_STOPPING:
         //Stay in current state
         break;
      case PPP_STATE_6_REQ_SENT:
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	69db      	ldr	r3, [r3, #28]
 800ddae:	6839      	ldr	r1, [r7, #0]
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	4798      	blx	r3
         //Switch to the Ack-Sent state
         pppChangeState(fsm, PPP_STATE_8_ACK_SENT);
 800ddb4:	2108      	movs	r1, #8
 800ddb6:	68b8      	ldr	r0, [r7, #8]
 800ddb8:	f000 fac0 	bl	800e33c <pppChangeState>
         break;
 800ddbc:	e0da      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_7_ACK_RCVD:
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	69db      	ldr	r3, [r3, #28]
 800ddc2:	6839      	ldr	r1, [r7, #0]
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	4798      	blx	r3
         //Switch to the Opened state
         pppChangeState(fsm, PPP_STATE_9_OPENED);
 800ddc8:	2109      	movs	r1, #9
 800ddca:	68b8      	ldr	r0, [r7, #8]
 800ddcc:	f000 fab6 	bl	800e33c <pppChangeState>
         //Indicate to the upper layers that the automaton is entering the
         //Opened state. The link is available for network traffic
         callbacks->thisLayerUp(context);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	4798      	blx	r3
         break;
 800ddd8:	e0cc      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_8_ACK_SENT:
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	69db      	ldr	r3, [r3, #28]
 800ddde:	6839      	ldr	r1, [r7, #0]
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	4798      	blx	r3
         //Stay in current state
         break;
 800dde4:	e0c6      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_9_OPENED:
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	699b      	ldr	r3, [r3, #24]
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	4798      	blx	r3
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	69db      	ldr	r3, [r3, #28]
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	4798      	blx	r3
         //Switch to the Ack-Sent state
         pppChangeState(fsm, PPP_STATE_8_ACK_SENT);
 800ddf8:	2108      	movs	r1, #8
 800ddfa:	68b8      	ldr	r0, [r7, #8]
 800ddfc:	f000 fa9e 	bl	800e33c <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	4798      	blx	r3
         break;
 800de08:	e0b4      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
      }
   }
   else if(code == PPP_CODE_CONFIGURE_NAK)
 800de0a:	7e3b      	ldrb	r3, [r7, #24]
 800de0c:	2b03      	cmp	r3, #3
 800de0e:	d154      	bne.n	800deba <pppRcvConfigureReqEvent+0x18a>
   {
      //If all configuration options are recognizable, but some values are not
      //acceptable, then the implementation must transmit a Configure-Nak
      switch(fsm->state)
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	3b02      	subs	r3, #2
 800de16:	2b07      	cmp	r3, #7
 800de18:	f200 80a7 	bhi.w	800df6a <pppRcvConfigureReqEvent+0x23a>
 800de1c:	a201      	add	r2, pc, #4	; (adr r2, 800de24 <pppRcvConfigureReqEvent+0xf4>)
 800de1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de22:	bf00      	nop
 800de24:	0800de45 	.word	0x0800de45
 800de28:	0800de51 	.word	0x0800de51
 800de2c:	0800df6b 	.word	0x0800df6b
 800de30:	0800df6b 	.word	0x0800df6b
 800de34:	0800de77 	.word	0x0800de77
 800de38:	0800de77 	.word	0x0800de77
 800de3c:	0800de83 	.word	0x0800de83
 800de40:	0800de97 	.word	0x0800de97
      {
      case PPP_STATE_2_CLOSED:
         //Send Terminate-Ack packet
         callbacks->sendTerminateAck(context, NULL);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de48:	2100      	movs	r1, #0
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	4798      	blx	r3
         //Stay in current state
         break;
 800de4e:	e091      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_3_STOPPED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	210a      	movs	r1, #10
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	4798      	blx	r3
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	4798      	blx	r3
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a1b      	ldr	r3, [r3, #32]
 800de66:	6839      	ldr	r1, [r7, #0]
 800de68:	68f8      	ldr	r0, [r7, #12]
 800de6a:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800de6c:	2106      	movs	r1, #6
 800de6e:	68b8      	ldr	r0, [r7, #8]
 800de70:	f000 fa64 	bl	800e33c <pppChangeState>
         break;
 800de74:	e07e      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
         //Stay in current state
         break;
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6a1b      	ldr	r3, [r3, #32]
 800de7a:	6839      	ldr	r1, [r7, #0]
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	4798      	blx	r3
         //Stay in current state
         break;
 800de80:	e078      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_8_ACK_SENT:
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a1b      	ldr	r3, [r3, #32]
 800de86:	6839      	ldr	r1, [r7, #0]
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800de8c:	2106      	movs	r1, #6
 800de8e:	68b8      	ldr	r0, [r7, #8]
 800de90:	f000 fa54 	bl	800e33c <pppChangeState>
         break;
 800de94:	e06e      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_9_OPENED:
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	4798      	blx	r3
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	6839      	ldr	r1, [r7, #0]
 800dea4:	68f8      	ldr	r0, [r7, #12]
 800dea6:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800dea8:	2106      	movs	r1, #6
 800deaa:	68b8      	ldr	r0, [r7, #8]
 800deac:	f000 fa46 	bl	800e33c <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	4798      	blx	r3
         break;
 800deb8:	e05c      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
      }
   }
   else if(code == PPP_CODE_CONFIGURE_REJ)
 800deba:	7e3b      	ldrb	r3, [r7, #24]
 800debc:	2b04      	cmp	r3, #4
 800debe:	d156      	bne.n	800df6e <pppRcvConfigureReqEvent+0x23e>
   {
      //If some configuration options received in the Configure-Request are not
      //recognizable or not acceptable for negotiation, then the implementation
      //must transmit a Configure-Reject
      switch(fsm->state)
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	3b02      	subs	r3, #2
 800dec6:	2b07      	cmp	r3, #7
 800dec8:	d853      	bhi.n	800df72 <pppRcvConfigureReqEvent+0x242>
 800deca:	a201      	add	r2, pc, #4	; (adr r2, 800ded0 <pppRcvConfigureReqEvent+0x1a0>)
 800decc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded0:	0800def1 	.word	0x0800def1
 800ded4:	0800defd 	.word	0x0800defd
 800ded8:	0800df73 	.word	0x0800df73
 800dedc:	0800df73 	.word	0x0800df73
 800dee0:	0800df23 	.word	0x0800df23
 800dee4:	0800df23 	.word	0x0800df23
 800dee8:	0800df2f 	.word	0x0800df2f
 800deec:	0800df43 	.word	0x0800df43
      {
      case PPP_STATE_2_CLOSED:
         //Send Terminate-Ack packet
         callbacks->sendTerminateAck(context, NULL);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def4:	2100      	movs	r1, #0
 800def6:	68f8      	ldr	r0, [r7, #12]
 800def8:	4798      	blx	r3
         //Stay in current state
         break;
 800defa:	e03b      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_3_STOPPED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	210a      	movs	r1, #10
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	4798      	blx	r3
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	699b      	ldr	r3, [r3, #24]
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	4798      	blx	r3
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800df18:	2106      	movs	r1, #6
 800df1a:	68b8      	ldr	r0, [r7, #8]
 800df1c:	f000 fa0e 	bl	800e33c <pppChangeState>
         break;
 800df20:	e028      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
         //Stay in current state
         break;
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	4798      	blx	r3
         //Stay in current state
         break;
 800df2c:	e022      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_8_ACK_SENT:
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df32:	6839      	ldr	r1, [r7, #0]
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800df38:	2106      	movs	r1, #6
 800df3a:	68b8      	ldr	r0, [r7, #8]
 800df3c:	f000 f9fe 	bl	800e33c <pppChangeState>
         break;
 800df40:	e018      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_9_OPENED:
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	699b      	ldr	r3, [r3, #24]
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	4798      	blx	r3
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4e:	6839      	ldr	r1, [r7, #0]
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800df54:	2106      	movs	r1, #6
 800df56:	68b8      	ldr	r0, [r7, #8]
 800df58:	f000 f9f0 	bl	800e33c <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	4798      	blx	r3
         break;
 800df64:	e006      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
         break;
 800df66:	bf00      	nop
 800df68:	e004      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
         break;
 800df6a:	bf00      	nop
 800df6c:	e002      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
         //This event cannot occur in a properly implemented automaton.
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
      }
   }
 800df6e:	bf00      	nop
 800df70:	e000      	b.n	800df74 <pppRcvConfigureReqEvent+0x244>
         break;
 800df72:	bf00      	nop
}
 800df74:	bf00      	nop
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <pppRcvConfigureAckEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppRcvConfigureAckEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3b02      	subs	r3, #2
 800df8e:	2b07      	cmp	r3, #7
 800df90:	d845      	bhi.n	800e01e <pppRcvConfigureAckEvent+0xa2>
 800df92:	a201      	add	r2, pc, #4	; (adr r2, 800df98 <pppRcvConfigureAckEvent+0x1c>)
 800df94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df98:	0800dfb9 	.word	0x0800dfb9
 800df9c:	0800dfb9 	.word	0x0800dfb9
 800dfa0:	0800e01f 	.word	0x0800e01f
 800dfa4:	0800e01f 	.word	0x0800e01f
 800dfa8:	0800dfc5 	.word	0x0800dfc5
 800dfac:	0800dfd7 	.word	0x0800dfd7
 800dfb0:	0800dfe9 	.word	0x0800dfe9
 800dfb4:	0800e005 	.word	0x0800e005
   {
   case PPP_STATE_2_CLOSED:
   case PPP_STATE_3_STOPPED:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, NULL);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	4798      	blx	r3
      //Stay in current state
      break;
 800dfc2:	e02d      	b.n	800e020 <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_5_STOPPING:
      //Stay in current state
      break;
   case PPP_STATE_6_REQ_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	691b      	ldr	r3, [r3, #16]
 800dfc8:	210a      	movs	r1, #10
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	4798      	blx	r3
      //Switch to the Ack-Rcvd state
      fsm->state = PPP_STATE_7_ACK_RCVD;
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2207      	movs	r2, #7
 800dfd2:	601a      	str	r2, [r3, #0]
      break;
 800dfd4:	e024      	b.n	800e020 <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_7_ACK_RCVD:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	699b      	ldr	r3, [r3, #24]
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800dfde:	2106      	movs	r1, #6
 800dfe0:	68b8      	ldr	r0, [r7, #8]
 800dfe2:	f000 f9ab 	bl	800e33c <pppChangeState>
      break;
 800dfe6:	e01b      	b.n	800e020 <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_8_ACK_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	210a      	movs	r1, #10
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	4798      	blx	r3
      //Switch to the Opened state
      pppChangeState(fsm, PPP_STATE_9_OPENED);
 800dff2:	2109      	movs	r1, #9
 800dff4:	68b8      	ldr	r0, [r7, #8]
 800dff6:	f000 f9a1 	bl	800e33c <pppChangeState>
      //Indicate to the upper layers that the automaton is entering the
      //Opened state. The link is available for network traffic
      callbacks->thisLayerUp(context);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	4798      	blx	r3
      break;
 800e002:	e00d      	b.n	800e020 <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_9_OPENED:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	699b      	ldr	r3, [r3, #24]
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800e00c:	2106      	movs	r1, #6
 800e00e:	68b8      	ldr	r0, [r7, #8]
 800e010:	f000 f994 	bl	800e33c <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	4798      	blx	r3
      break;
 800e01c:	e000      	b.n	800e020 <pppRcvConfigureAckEvent+0xa4>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800e01e:	bf00      	nop
   }
}
 800e020:	bf00      	nop
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <pppRcvConfigureNakEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppRcvConfigureNakEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	3b02      	subs	r3, #2
 800e03a:	2b07      	cmp	r3, #7
 800e03c:	d842      	bhi.n	800e0c4 <pppRcvConfigureNakEvent+0x9c>
 800e03e:	a201      	add	r2, pc, #4	; (adr r2, 800e044 <pppRcvConfigureNakEvent+0x1c>)
 800e040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e044:	0800e065 	.word	0x0800e065
 800e048:	0800e065 	.word	0x0800e065
 800e04c:	0800e0c5 	.word	0x0800e0c5
 800e050:	0800e0c5 	.word	0x0800e0c5
 800e054:	0800e071 	.word	0x0800e071
 800e058:	0800e085 	.word	0x0800e085
 800e05c:	0800e097 	.word	0x0800e097
 800e060:	0800e0ab 	.word	0x0800e0ab
   {
   case PPP_STATE_2_CLOSED:
   case PPP_STATE_3_STOPPED:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, NULL);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e068:	2100      	movs	r1, #0
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	4798      	blx	r3
      //Stay in current state
      break;
 800e06e:	e02a      	b.n	800e0c6 <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_5_STOPPING:
      //Stay in current state
      break;
   case PPP_STATE_6_REQ_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	210a      	movs	r1, #10
 800e076:	68f8      	ldr	r0, [r7, #12]
 800e078:	4798      	blx	r3
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	4798      	blx	r3
      //Stay in current state
      break;
 800e082:	e020      	b.n	800e0c6 <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_7_ACK_RCVD:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800e08c:	2106      	movs	r1, #6
 800e08e:	68b8      	ldr	r0, [r7, #8]
 800e090:	f000 f954 	bl	800e33c <pppChangeState>
      break;
 800e094:	e017      	b.n	800e0c6 <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_8_ACK_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	210a      	movs	r1, #10
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	4798      	blx	r3
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	699b      	ldr	r3, [r3, #24]
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	4798      	blx	r3
      //Stay in current state
      break;
 800e0a8:	e00d      	b.n	800e0c6 <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_9_OPENED:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	699b      	ldr	r3, [r3, #24]
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800e0b2:	2106      	movs	r1, #6
 800e0b4:	68b8      	ldr	r0, [r7, #8]
 800e0b6:	f000 f941 	bl	800e33c <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	4798      	blx	r3
      break;
 800e0c2:	e000      	b.n	800e0c6 <pppRcvConfigureNakEvent+0x9e>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800e0c4:	bf00      	nop
   }
}
 800e0c6:	bf00      	nop
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop

0800e0d0 <pppRcvTerminateReqEvent>:
 * @param[in] terminateReqPacket Terminate-Request packet received from the peer
 **/

void pppRcvTerminateReqEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, const PppTerminatePacket *terminateReqPacket)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	607a      	str	r2, [r7, #4]
 800e0dc:	603b      	str	r3, [r7, #0]
   //Check current state
   switch(fsm->state)
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3b02      	subs	r3, #2
 800e0e4:	2b07      	cmp	r3, #7
 800e0e6:	d835      	bhi.n	800e154 <pppRcvTerminateReqEvent+0x84>
 800e0e8:	a201      	add	r2, pc, #4	; (adr r2, 800e0f0 <pppRcvTerminateReqEvent+0x20>)
 800e0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ee:	bf00      	nop
 800e0f0:	0800e111 	.word	0x0800e111
 800e0f4:	0800e111 	.word	0x0800e111
 800e0f8:	0800e111 	.word	0x0800e111
 800e0fc:	0800e111 	.word	0x0800e111
 800e100:	0800e11d 	.word	0x0800e11d
 800e104:	0800e11d 	.word	0x0800e11d
 800e108:	0800e11d 	.word	0x0800e11d
 800e10c:	0800e131 	.word	0x0800e131
   case PPP_STATE_2_CLOSED:
   case PPP_STATE_3_STOPPED:
   case PPP_STATE_4_CLOSING:
   case PPP_STATE_5_STOPPING:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, terminateReqPacket);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e114:	6839      	ldr	r1, [r7, #0]
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	4798      	blx	r3
      //Stay in current state
      break;
 800e11a:	e01c      	b.n	800e156 <pppRcvTerminateReqEvent+0x86>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, terminateReqPacket);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e120:	6839      	ldr	r1, [r7, #0]
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800e126:	2106      	movs	r1, #6
 800e128:	68b8      	ldr	r0, [r7, #8]
 800e12a:	f000 f907 	bl	800e33c <pppChangeState>
      break;
 800e12e:	e012      	b.n	800e156 <pppRcvTerminateReqEvent+0x86>
   case PPP_STATE_9_OPENED:
      //Zero restart counter
      callbacks->zeroRestartCount(context);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	4798      	blx	r3
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, terminateReqPacket);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	4798      	blx	r3
      //Switch to the Stopping state
      pppChangeState(fsm, PPP_STATE_5_STOPPING);
 800e142:	2105      	movs	r1, #5
 800e144:	68b8      	ldr	r0, [r7, #8]
 800e146:	f000 f8f9 	bl	800e33c <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	4798      	blx	r3
      break;
 800e152:	e000      	b.n	800e156 <pppRcvTerminateReqEvent+0x86>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800e154:	bf00      	nop
   }
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop

0800e160 <pppRcvTerminateAckEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppRcvTerminateAckEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	3b02      	subs	r3, #2
 800e172:	2b07      	cmp	r3, #7
 800e174:	d836      	bhi.n	800e1e4 <pppRcvTerminateAckEvent+0x84>
 800e176:	a201      	add	r2, pc, #4	; (adr r2, 800e17c <pppRcvTerminateAckEvent+0x1c>)
 800e178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e17c:	0800e1e5 	.word	0x0800e1e5
 800e180:	0800e1e5 	.word	0x0800e1e5
 800e184:	0800e19d 	.word	0x0800e19d
 800e188:	0800e1af 	.word	0x0800e1af
 800e18c:	0800e1c1 	.word	0x0800e1c1
 800e190:	0800e1c1 	.word	0x0800e1c1
 800e194:	0800e1e5 	.word	0x0800e1e5
 800e198:	0800e1cb 	.word	0x0800e1cb
   case PPP_STATE_3_STOPPED:
      //Stay in current state
      break;
   case PPP_STATE_4_CLOSING:
      //Switch to the Closed state
      pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800e19c:	2102      	movs	r1, #2
 800e19e:	68b8      	ldr	r0, [r7, #8]
 800e1a0:	f000 f8cc 	bl	800e33c <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Initial, Closed or Stopped states. The lower layer is no longer
      //needed for the link
      callbacks->thisLayerFinished(context);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	4798      	blx	r3
      break;
 800e1ac:	e01b      	b.n	800e1e6 <pppRcvTerminateAckEvent+0x86>
   case PPP_STATE_5_STOPPING:
      //Switch to the Stopped state
      pppChangeState(fsm, PPP_STATE_3_STOPPED);
 800e1ae:	2103      	movs	r1, #3
 800e1b0:	68b8      	ldr	r0, [r7, #8]
 800e1b2:	f000 f8c3 	bl	800e33c <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Initial, Closed or Stopped states. The lower layer is no longer
      //needed for the link
      callbacks->thisLayerFinished(context);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	4798      	blx	r3
      break;
 800e1be:	e012      	b.n	800e1e6 <pppRcvTerminateAckEvent+0x86>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800e1c0:	2106      	movs	r1, #6
 800e1c2:	68b8      	ldr	r0, [r7, #8]
 800e1c4:	f000 f8ba 	bl	800e33c <pppChangeState>
      break;
 800e1c8:	e00d      	b.n	800e1e6 <pppRcvTerminateAckEvent+0x86>
   case PPP_STATE_8_ACK_SENT:
      //Stay in current state
      break;
   case PPP_STATE_9_OPENED:
      //Send Configure-Req packet
      callbacks->sendConfigureReq(context);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800e1d2:	2106      	movs	r1, #6
 800e1d4:	68b8      	ldr	r0, [r7, #8]
 800e1d6:	f000 f8b1 	bl	800e33c <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	4798      	blx	r3
      break;
 800e1e2:	e000      	b.n	800e1e6 <pppRcvTerminateAckEvent+0x86>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800e1e4:	bf00      	nop
   }
}
 800e1e6:	bf00      	nop
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop

0800e1f0 <pppRcvUnknownCodeEvent>:
 * @param[in] packet Un-interpretable packet received from the peer
 **/

void pppRcvUnknownCodeEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, const PppPacket *packet)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
 800e1fc:	603b      	str	r3, [r7, #0]
   //Check current state
   switch(fsm->state)
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	3b02      	subs	r3, #2
 800e204:	2b07      	cmp	r3, #7
 800e206:	d805      	bhi.n	800e214 <pppRcvUnknownCodeEvent+0x24>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
   case PPP_STATE_9_OPENED:
      //Send Reject-Code packet
      callbacks->sendCodeRej(context, packet);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	4798      	blx	r3
      //Stay in current state
      break;
 800e212:	e000      	b.n	800e216 <pppRcvUnknownCodeEvent+0x26>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800e214:	bf00      	nop
   }
}
 800e216:	bf00      	nop
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
	...

0800e220 <pppRcvCodeRejEvent>:
 *   is acceptable or catastrophic
 **/

void pppRcvCodeRejEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, bool_t acceptable)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	603b      	str	r3, [r7, #0]
   //Check whether the rejected value is acceptable or catastrophic
   if(acceptable)
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d01c      	beq.n	800e26e <pppRcvCodeRejEvent+0x4e>
   {
      //The RXJ+ event arises when the rejected value is acceptable, such
      //as a Code-Reject of an extended code, or a Protocol-Reject of a
      //NCP. These are within the scope of normal operation
      switch(fsm->state)
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	3b02      	subs	r3, #2
 800e23a:	2b07      	cmp	r3, #7
 800e23c:	d859      	bhi.n	800e2f2 <pppRcvCodeRejEvent+0xd2>
 800e23e:	a201      	add	r2, pc, #4	; (adr r2, 800e244 <pppRcvCodeRejEvent+0x24>)
 800e240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e244:	0800e2f3 	.word	0x0800e2f3
 800e248:	0800e2f3 	.word	0x0800e2f3
 800e24c:	0800e2f3 	.word	0x0800e2f3
 800e250:	0800e2f3 	.word	0x0800e2f3
 800e254:	0800e2f3 	.word	0x0800e2f3
 800e258:	0800e265 	.word	0x0800e265
 800e25c:	0800e2f3 	.word	0x0800e2f3
 800e260:	0800e2f3 	.word	0x0800e2f3
      case PPP_STATE_6_REQ_SENT:
         //Stay in current state
         break;
      case PPP_STATE_7_ACK_RCVD:
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800e264:	2106      	movs	r1, #6
 800e266:	68b8      	ldr	r0, [r7, #8]
 800e268:	f000 f868 	bl	800e33c <pppChangeState>
         break;
 800e26c:	e044      	b.n	800e2f8 <pppRcvCodeRejEvent+0xd8>
   {
      //The RXJ- event arises when the rejected value is catastrophic,
      //such as a Code-Reject of Configure-Request, or a Protocol-Reject
      //of LCP! This event communicates an unrecoverable error that
      //terminates the connection
      switch(fsm->state)
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	3b02      	subs	r3, #2
 800e274:	2b07      	cmp	r3, #7
 800e276:	d83e      	bhi.n	800e2f6 <pppRcvCodeRejEvent+0xd6>
 800e278:	a201      	add	r2, pc, #4	; (adr r2, 800e280 <pppRcvCodeRejEvent+0x60>)
 800e27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e27e:	bf00      	nop
 800e280:	0800e2a1 	.word	0x0800e2a1
 800e284:	0800e2a1 	.word	0x0800e2a1
 800e288:	0800e2ab 	.word	0x0800e2ab
 800e28c:	0800e2bd 	.word	0x0800e2bd
 800e290:	0800e2bd 	.word	0x0800e2bd
 800e294:	0800e2bd 	.word	0x0800e2bd
 800e298:	0800e2bd 	.word	0x0800e2bd
 800e29c:	0800e2cf 	.word	0x0800e2cf
      case PPP_STATE_2_CLOSED:
      case PPP_STATE_3_STOPPED:
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	4798      	blx	r3
         //Stay in current state
         break;
 800e2a8:	e026      	b.n	800e2f8 <pppRcvCodeRejEvent+0xd8>
      case PPP_STATE_4_CLOSING:
         //Switch to the Closed state
         pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800e2aa:	2102      	movs	r1, #2
 800e2ac:	68b8      	ldr	r0, [r7, #8]
 800e2ae:	f000 f845 	bl	800e33c <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	4798      	blx	r3
         break;
 800e2ba:	e01d      	b.n	800e2f8 <pppRcvCodeRejEvent+0xd8>
      case PPP_STATE_5_STOPPING:
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
      case PPP_STATE_8_ACK_SENT:
         //Switch to the Stopped state
         pppChangeState(fsm, PPP_STATE_3_STOPPED);
 800e2bc:	2103      	movs	r1, #3
 800e2be:	68b8      	ldr	r0, [r7, #8]
 800e2c0:	f000 f83c 	bl	800e33c <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	4798      	blx	r3
         break;
 800e2cc:	e014      	b.n	800e2f8 <pppRcvCodeRejEvent+0xd8>
      case PPP_STATE_9_OPENED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_TERMINATE);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	691b      	ldr	r3, [r3, #16]
 800e2d2:	2102      	movs	r1, #2
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	4798      	blx	r3
         //Send Terminate-Req packet
         callbacks->sendTerminateReq(context);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	4798      	blx	r3
         //Switch to the Stopping state
         pppChangeState(fsm, PPP_STATE_5_STOPPING);
 800e2e0:	2105      	movs	r1, #5
 800e2e2:	68b8      	ldr	r0, [r7, #8]
 800e2e4:	f000 f82a 	bl	800e33c <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	4798      	blx	r3
         break;
 800e2f0:	e002      	b.n	800e2f8 <pppRcvCodeRejEvent+0xd8>
         break;
 800e2f2:	bf00      	nop
 800e2f4:	e000      	b.n	800e2f8 <pppRcvCodeRejEvent+0xd8>
      default:
         //This event cannot occur in a properly implemented automaton.
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
 800e2f6:	bf00      	nop
      }
   }
}
 800e2f8:	bf00      	nop
 800e2fa:	3710      	adds	r7, #16
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <pppRcvEchoReqEvent>:
 * @param[in] echoReqPacket Echo-Request packet received from the peer
 **/

void pppRcvEchoReqEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, const PppEchoPacket *echoReqPacket)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
 800e30c:	603b      	str	r3, [r7, #0]
   //Check current state
   switch(fsm->state)
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d30a      	bcc.n	800e32c <pppRcvEchoReqEvent+0x2c>
 800e316:	2b08      	cmp	r3, #8
 800e318:	d90a      	bls.n	800e330 <pppRcvEchoReqEvent+0x30>
 800e31a:	2b09      	cmp	r3, #9
 800e31c:	d000      	beq.n	800e320 <pppRcvEchoReqEvent+0x20>
      break;
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800e31e:	e005      	b.n	800e32c <pppRcvEchoReqEvent+0x2c>
      callbacks->sendEchoRep(context, echoReqPacket);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e324:	6839      	ldr	r1, [r7, #0]
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	4798      	blx	r3
      break;
 800e32a:	e002      	b.n	800e332 <pppRcvEchoReqEvent+0x32>
      break;
 800e32c:	bf00      	nop
 800e32e:	e000      	b.n	800e332 <pppRcvEchoReqEvent+0x32>
      break;
 800e330:	bf00      	nop
   }
}
 800e332:	bf00      	nop
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
	...

0800e33c <pppChangeState>:
 * @param[in,out] fsm Finite state machine
 * @param[in] newState New PPP state to switch to
 **/

void pppChangeState(PppFsm *fsm, PppState newState)
{
 800e33c:	b590      	push	{r4, r7, lr}
 800e33e:	b085      	sub	sp, #20
 800e340:	af02      	add	r7, sp, #8
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	460b      	mov	r3, r1
 800e346:	70fb      	strb	r3, [r7, #3]
      "ACK_SENT", //8
      "OPENED"    //9
   };

   //Sanity check
   if(fsm->state < arraysize(stateLabel) && newState < arraysize(stateLabel))
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b09      	cmp	r3, #9
 800e34e:	d81c      	bhi.n	800e38a <pppChangeState+0x4e>
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	2b09      	cmp	r3, #9
 800e354:	d819      	bhi.n	800e38a <pppChangeState+0x4e>
   {
      //Debug message
      TRACE_INFO("PPP FSM: %s (%u) -> %s (%u)\r\n", stateLabel[fsm->state],
 800e356:	f7f2 f973 	bl	8000640 <osSuspendAllTasks>
 800e35a:	4b0f      	ldr	r3, [pc, #60]	; (800e398 <pppChangeState+0x5c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68d8      	ldr	r0, [r3, #12]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a0d      	ldr	r2, [pc, #52]	; (800e39c <pppChangeState+0x60>)
 800e366:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681c      	ldr	r4, [r3, #0]
 800e36e:	78fb      	ldrb	r3, [r7, #3]
 800e370:	4a0a      	ldr	r2, [pc, #40]	; (800e39c <pppChangeState+0x60>)
 800e372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e376:	78fa      	ldrb	r2, [r7, #3]
 800e378:	9201      	str	r2, [sp, #4]
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	4623      	mov	r3, r4
 800e37e:	460a      	mov	r2, r1
 800e380:	4907      	ldr	r1, [pc, #28]	; (800e3a0 <pppChangeState+0x64>)
 800e382:	f00c fe0b 	bl	801af9c <fiprintf>
 800e386:	f7f2 f966 	bl	8000656 <osResumeAllTasks>
         fsm->state, stateLabel[newState], newState);
   }
#endif

   //Switch to the new state
   fsm->state = newState;
 800e38a:	78fa      	ldrb	r2, [r7, #3]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	601a      	str	r2, [r3, #0]
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	bd90      	pop	{r4, r7, pc}
 800e398:	20000058 	.word	0x20000058
 800e39c:	20000000 	.word	0x20000000
 800e3a0:	0801d1c4 	.word	0x0801d1c4

0800e3a4 <pppHdlcDriverInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppHdlcDriverInit(NetInterface *interface)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
   PppContext *context;

   //Debug message
   TRACE_INFO("Initializing PPP HDLC driver...\r\n");
 800e3ac:	f7f2 f948 	bl	8000640 <osSuspendAllTasks>
 800e3b0:	4b22      	ldr	r3, [pc, #136]	; (800e43c <pppHdlcDriverInit+0x98>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	2221      	movs	r2, #33	; 0x21
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	4821      	ldr	r0, [pc, #132]	; (800e440 <pppHdlcDriverInit+0x9c>)
 800e3bc:	f00c fe4e 	bl	801b05c <fwrite>
 800e3c0:	f7f2 f949 	bl	8000656 <osResumeAllTasks>

   //Point to the PPP context
   context = interface->pppContext;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e3ca:	60fb      	str	r3, [r7, #12]

   //Initialize variables
   context->txBufferLen = 0;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e3d2:	3318      	adds	r3, #24
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	601a      	str	r2, [r3, #0]
   context->txWriteIndex = 0;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e3de:	331c      	adds	r3, #28
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	601a      	str	r2, [r3, #0]
   context->txReadIndex = 0;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	601a      	str	r2, [r3, #0]
   context->rxBufferLen = 0;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e3f4:	3304      	adds	r3, #4
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	601a      	str	r2, [r3, #0]
   context->rxWriteIndex = 0;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e400:	3308      	adds	r3, #8
 800e402:	2200      	movs	r2, #0
 800e404:	601a      	str	r2, [r3, #0]
   context->rxReadIndex = 0;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e40c:	330c      	adds	r3, #12
 800e40e:	2200      	movs	r2, #0
 800e410:	601a      	str	r2, [r3, #0]
   context->rxFrameCount = 0;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e418:	3310      	adds	r3, #16
 800e41a:	2200      	movs	r2, #0
 800e41c:	601a      	str	r2, [r3, #0]

   //Initialize UART
   interface->uartDriver->init();
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4798      	blx	r3

   //Accept any packets from the upper layer
   osSetEvent(&interface->nicTxEvent);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	3370      	adds	r3, #112	; 0x70
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f2 f94f 	bl	80006ce <osSetEvent>

   //Successful initialization
   return NO_ERROR;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	20000058 	.word	0x20000058
 800e440:	0801d248 	.word	0x0801d248

0800e444 <pppHdlcDriverTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverTick(NetInterface *interface)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
}
 800e44c:	bf00      	nop
 800e44e:	370c      	adds	r7, #12
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <pppHdlcDriverEnableIrq>:
 * @brief Enable interrupts
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverEnableIrq(NetInterface *interface)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
   //Enable UART interrupts
   interface->uartDriver->enableIrq();
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	4798      	blx	r3
}
 800e468:	bf00      	nop
 800e46a:	3708      	adds	r7, #8
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <pppHdlcDriverDisableIrq>:
 * @brief Disable interrupts
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverDisableIrq(NetInterface *interface)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
   //USART interrupts are always enabled
}
 800e478:	bf00      	nop
 800e47a:	370c      	adds	r7, #12
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <pppHdlcDriverEventHandler>:
 * @brief PPP HDLC driver event handler
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverEventHandler(NetInterface *interface)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e492:	60fb      	str	r3, [r7, #12]

   //Check PPP state
   if(interface->pppContext->pppPhase != PPP_PHASE_DEAD)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e49a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d017      	beq.n	800e4d2 <pppHdlcDriverEventHandler+0x4e>
   {
      //Process all pending packets
      while(context->rxFrameCount > 0)
 800e4a2:	e00f      	b.n	800e4c4 <pppHdlcDriverEventHandler+0x40>
      {
         //Read incoming packet
         pppHdlcDriverReceivePacket(interface);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 f8e9 	bl	800e67c <pppHdlcDriverReceivePacket>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e4aa:	b672      	cpsid	i

         //Enter critical section
         __disable_irq();
         //Decrement frame counter
         context->rxFrameCount--;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e4b2:	3310      	adds	r3, #16
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	1e5a      	subs	r2, r3, #1
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e4be:	3310      	adds	r3, #16
 800e4c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800e4c2:	b662      	cpsie	i
      while(context->rxFrameCount > 0)
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e4ca:	3310      	adds	r3, #16
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e8      	bne.n	800e4a4 <pppHdlcDriverEventHandler+0x20>
         //Exit critical section
         __enable_irq();
      }
   }
}
 800e4d2:	bf00      	nop
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <pppHdlcDriverSendPacket>:
 * @return Error code
 **/

error_t pppHdlcDriverSendPacket(NetInterface *interface,
   const NetBuffer *buffer, size_t offset)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b08c      	sub	sp, #48	; 0x30
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	60f8      	str	r0, [r7, #12]
 800e4e2:	60b9      	str	r1, [r7, #8]
 800e4e4:	607a      	str	r2, [r7, #4]
   uint16_t protocol;
   uint32_t accm;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e4ec:	623b      	str	r3, [r7, #32]

   //Point to the beginning of the frame
   p = netBufferAt(buffer, offset);
 800e4ee:	6879      	ldr	r1, [r7, #4]
 800e4f0:	68b8      	ldr	r0, [r7, #8]
 800e4f2:	f7f4 f8b5 	bl	8002660 <netBufferAt>
 800e4f6:	61f8      	str	r0, [r7, #28]

   //Parse the PPP frame header
   pppParseFrameHeader(p, PPP_FRAME_HEADER_SIZE, &protocol);
 800e4f8:	f107 0316 	add.w	r3, r7, #22
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	2104      	movs	r1, #4
 800e500:	69f8      	ldr	r0, [r7, #28]
 800e502:	f7ff f9ba 	bl	800d87a <pppParseFrameHeader>

   //Check Protocol field
   if(protocol == PPP_PROTOCOL_IP || protocol == PPP_PROTOCOL_IPV6)
 800e506:	8afb      	ldrh	r3, [r7, #22]
 800e508:	2b21      	cmp	r3, #33	; 0x21
 800e50a:	d002      	beq.n	800e512 <pppHdlcDriverSendPacket+0x38>
 800e50c:	8afb      	ldrh	r3, [r7, #22]
 800e50e:	2b57      	cmp	r3, #87	; 0x57
 800e510:	d104      	bne.n	800e51c <pppHdlcDriverSendPacket+0x42>
   {
      //Use the ACCM value that has been negotiated
      accm = context->peerConfig.accm;
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800e518:	627b      	str	r3, [r7, #36]	; 0x24
 800e51a:	e002      	b.n	800e522 <pppHdlcDriverSendPacket+0x48>
   }
   else
   {
      //Use default ACCM mapping
      accm = PPP_DEFAULT_ACCM;
 800e51c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e520:	627b      	str	r3, [r7, #36]	; 0x24
   }

   //Send flag
   pppHdlcDriverWriteTxQueue(context, PPP_FLAG_CHAR);
 800e522:	217e      	movs	r1, #126	; 0x7e
 800e524:	6a38      	ldr	r0, [r7, #32]
 800e526:	f000 f920 	bl	800e76a <pppHdlcDriverWriteTxQueue>

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 800e52a:	2300      	movs	r3, #0
 800e52c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e52e:	e084      	b.n	800e63a <pppHdlcDriverSendPacket+0x160>
   {
      //Is there any data to copy from the current chunk?
      if(offset < buffer->chunk[i].length)
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e534:	3301      	adds	r3, #1
 800e536:	00db      	lsls	r3, r3, #3
 800e538:	4413      	add	r3, r2
 800e53a:	889b      	ldrh	r3, [r3, #4]
 800e53c:	461a      	mov	r2, r3
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4293      	cmp	r3, r2
 800e542:	d26d      	bcs.n	800e620 <pppHdlcDriverSendPacket+0x146>
      {
         //Point to the first byte to be read
         p = (uint8_t *) buffer->chunk[i].address + offset;
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e548:	3201      	adds	r2, #1
 800e54a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4413      	add	r3, r2
 800e552:	61fb      	str	r3, [r7, #28]
         //Compute the number of bytes to copy at a time
         n = buffer->chunk[i].length - offset;
 800e554:	68ba      	ldr	r2, [r7, #8]
 800e556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e558:	3301      	adds	r3, #1
 800e55a:	00db      	lsls	r3, r3, #3
 800e55c:	4413      	add	r3, r2
 800e55e:	889b      	ldrh	r3, [r3, #4]
 800e560:	461a      	mov	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	61bb      	str	r3, [r7, #24]

         //Copy data to TX queue
         for(j = 0; j < n; j++)
 800e568:	2300      	movs	r3, #0
 800e56a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e56c:	e051      	b.n	800e612 <pppHdlcDriverSendPacket+0x138>
         {
            if(p[j] < PPP_MASK_CHAR)
 800e56e:	69fa      	ldr	r2, [r7, #28]
 800e570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e572:	4413      	add	r3, r2
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	2b1f      	cmp	r3, #31
 800e578:	d824      	bhi.n	800e5c4 <pppHdlcDriverSendPacket+0xea>
            {
               //Check whether the character is flagged
               if(accm & (1 << p[j]))
 800e57a:	69fa      	ldr	r2, [r7, #28]
 800e57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57e:	4413      	add	r3, r2
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	461a      	mov	r2, r3
 800e584:	2301      	movs	r3, #1
 800e586:	4093      	lsls	r3, r2
 800e588:	461a      	mov	r2, r3
 800e58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58c:	4013      	ands	r3, r2
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00f      	beq.n	800e5b2 <pppHdlcDriverSendPacket+0xd8>
               {
                  pppHdlcDriverWriteTxQueue(context, PPP_ESC_CHAR);
 800e592:	217d      	movs	r1, #125	; 0x7d
 800e594:	6a38      	ldr	r0, [r7, #32]
 800e596:	f000 f8e8 	bl	800e76a <pppHdlcDriverWriteTxQueue>
                  pppHdlcDriverWriteTxQueue(context, p[j] ^ PPP_MASK_CHAR);
 800e59a:	69fa      	ldr	r2, [r7, #28]
 800e59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59e:	4413      	add	r3, r2
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	f083 0320 	eor.w	r3, r3, #32
 800e5a6:	b2db      	uxtb	r3, r3
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	6a38      	ldr	r0, [r7, #32]
 800e5ac:	f000 f8dd 	bl	800e76a <pppHdlcDriverWriteTxQueue>
 800e5b0:	e02c      	b.n	800e60c <pppHdlcDriverSendPacket+0x132>
               }
               else
               {
                  //Enqueue current character
                  pppHdlcDriverWriteTxQueue(context, p[j]);
 800e5b2:	69fa      	ldr	r2, [r7, #28]
 800e5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b6:	4413      	add	r3, r2
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	6a38      	ldr	r0, [r7, #32]
 800e5be:	f000 f8d4 	bl	800e76a <pppHdlcDriverWriteTxQueue>
 800e5c2:	e023      	b.n	800e60c <pppHdlcDriverSendPacket+0x132>
               }
            }
            else if(p[j] == PPP_ESC_CHAR || p[j] == PPP_FLAG_CHAR)
 800e5c4:	69fa      	ldr	r2, [r7, #28]
 800e5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c8:	4413      	add	r3, r2
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	2b7d      	cmp	r3, #125	; 0x7d
 800e5ce:	d005      	beq.n	800e5dc <pppHdlcDriverSendPacket+0x102>
 800e5d0:	69fa      	ldr	r2, [r7, #28]
 800e5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d4:	4413      	add	r3, r2
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	2b7e      	cmp	r3, #126	; 0x7e
 800e5da:	d10f      	bne.n	800e5fc <pppHdlcDriverSendPacket+0x122>
            {
               pppHdlcDriverWriteTxQueue(context, PPP_ESC_CHAR);
 800e5dc:	217d      	movs	r1, #125	; 0x7d
 800e5de:	6a38      	ldr	r0, [r7, #32]
 800e5e0:	f000 f8c3 	bl	800e76a <pppHdlcDriverWriteTxQueue>
               pppHdlcDriverWriteTxQueue(context, p[j] ^ PPP_MASK_CHAR);
 800e5e4:	69fa      	ldr	r2, [r7, #28]
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	4413      	add	r3, r2
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	f083 0320 	eor.w	r3, r3, #32
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	6a38      	ldr	r0, [r7, #32]
 800e5f6:	f000 f8b8 	bl	800e76a <pppHdlcDriverWriteTxQueue>
 800e5fa:	e007      	b.n	800e60c <pppHdlcDriverSendPacket+0x132>
            }
            else
            {
               //Enqueue current character
               pppHdlcDriverWriteTxQueue(context, p[j]);
 800e5fc:	69fa      	ldr	r2, [r7, #28]
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	4413      	add	r3, r2
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	4619      	mov	r1, r3
 800e606:	6a38      	ldr	r0, [r7, #32]
 800e608:	f000 f8af 	bl	800e76a <pppHdlcDriverWriteTxQueue>
         for(j = 0; j < n; j++)
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	3301      	adds	r3, #1
 800e610:	62bb      	str	r3, [r7, #40]	; 0x28
 800e612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	429a      	cmp	r2, r3
 800e618:	d3a9      	bcc.n	800e56e <pppHdlcDriverSendPacket+0x94>
            }
         }

         //Process the next block from the start
         offset = 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	607b      	str	r3, [r7, #4]
 800e61e:	e009      	b.n	800e634 <pppHdlcDriverSendPacket+0x15a>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800e620:	68ba      	ldr	r2, [r7, #8]
 800e622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e624:	3301      	adds	r3, #1
 800e626:	00db      	lsls	r3, r3, #3
 800e628:	4413      	add	r3, r2
 800e62a:	889b      	ldrh	r3, [r3, #4]
 800e62c:	461a      	mov	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	1a9b      	subs	r3, r3, r2
 800e632:	607b      	str	r3, [r7, #4]
   for(i = 0; i < buffer->chunkCount; i++)
 800e634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e636:	3301      	adds	r3, #1
 800e638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e640:	429a      	cmp	r2, r3
 800e642:	f4ff af75 	bcc.w	800e530 <pppHdlcDriverSendPacket+0x56>
      }
   }

   //Send flag
   pppHdlcDriverWriteTxQueue(context, PPP_FLAG_CHAR);
 800e646:	217e      	movs	r1, #126	; 0x7e
 800e648:	6a38      	ldr	r0, [r7, #32]
 800e64a:	f000 f88e 	bl	800e76a <pppHdlcDriverWriteTxQueue>

   //Start transferring data
   interface->uartDriver->startTx();
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	4798      	blx	r3

   //Check whether the TX queue is available for writing
   if(context->txBufferLen <= (PPP_TX_BUFFER_SIZE - 3006))
 800e656:	6a3b      	ldr	r3, [r7, #32]
 800e658:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e65c:	3318      	adds	r3, #24
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f240 4242 	movw	r2, #1090	; 0x442
 800e664:	4293      	cmp	r3, r2
 800e666:	d804      	bhi.n	800e672 <pppHdlcDriverSendPacket+0x198>
   {
      //The transmitter can accept another packet
      osSetEvent(&interface->nicTxEvent);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3370      	adds	r3, #112	; 0x70
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7f2 f82e 	bl	80006ce <osSetEvent>
   }

   //Data successfully written
   return NO_ERROR;
 800e672:	2300      	movs	r3, #0
}
 800e674:	4618      	mov	r0, r3
 800e676:	3730      	adds	r7, #48	; 0x30
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <pppHdlcDriverReceivePacket>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppHdlcDriverReceivePacket(NetInterface *interface)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b088      	sub	sp, #32
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
   bool_t escFlag;
   uint32_t accm;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e68a:	617b      	str	r3, [r7, #20]
   //Retrieve ACCM
   accm = context->localConfig.accm;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e692:	613b      	str	r3, [r7, #16]

   //Length of the original PPP frame
   n = 0;
 800e694:	2300      	movs	r3, #0
 800e696:	61fb      	str	r3, [r7, #28]
   //This flag tells whether the next character is escaped
   escFlag = FALSE;
 800e698:	2300      	movs	r3, #0
 800e69a:	61bb      	str	r3, [r7, #24]

   //The receiver must reverse the octet stuffing procedure
   while(n < PPP_MAX_FRAME_SIZE && context->rxBufferLen > 0)
 800e69c:	e03c      	b.n	800e718 <pppHdlcDriverReceivePacket+0x9c>
   {
      //Read a single character
      c = pppHdlcDriverReadRxQueue(context);
 800e69e:	6978      	ldr	r0, [r7, #20]
 800e6a0:	f000 f89f 	bl	800e7e2 <pppHdlcDriverReadRxQueue>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	73fb      	strb	r3, [r7, #15]

      if(c < PPP_MASK_CHAR)
 800e6a8:	7bfb      	ldrb	r3, [r7, #15]
 800e6aa:	2b1f      	cmp	r3, #31
 800e6ac:	d811      	bhi.n	800e6d2 <pppHdlcDriverReceivePacket+0x56>
      {
         //Check whether the character is flagged
         if(accm & (1 << c))
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	4013      	ands	r3, r2
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d12b      	bne.n	800e718 <pppHdlcDriverReceivePacket+0x9c>
            //The extra characters must be removed from the incoming data stream
         }
         else
         {
            //Copy current character
            context->frame[n++] = c;
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	1c5a      	adds	r2, r3, #1
 800e6c4:	61fa      	str	r2, [r7, #28]
 800e6c6:	697a      	ldr	r2, [r7, #20]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	7bfa      	ldrb	r2, [r7, #15]
 800e6cc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800e6d0:	e022      	b.n	800e718 <pppHdlcDriverReceivePacket+0x9c>
         }
      }
      else if(c == PPP_ESC_CHAR)
 800e6d2:	7bfb      	ldrb	r3, [r7, #15]
 800e6d4:	2b7d      	cmp	r3, #125	; 0x7d
 800e6d6:	d102      	bne.n	800e6de <pppHdlcDriverReceivePacket+0x62>
      {
         //All occurrences of 0x7D indicate that the next character is escaped
         escFlag = TRUE;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	61bb      	str	r3, [r7, #24]
 800e6dc:	e01c      	b.n	800e718 <pppHdlcDriverReceivePacket+0x9c>
      }
      else if(c == PPP_FLAG_CHAR)
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
 800e6e0:	2b7e      	cmp	r3, #126	; 0x7e
 800e6e2:	d026      	beq.n	800e732 <pppHdlcDriverReceivePacket+0xb6>
      {
         //0x7E flag found
         break;
      }
      else if(escFlag)
 800e6e4:	69bb      	ldr	r3, [r7, #24]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00e      	beq.n	800e708 <pppHdlcDriverReceivePacket+0x8c>
      {
         //The character is XOR'ed with 0x20
         context->frame[n++] = c ^ PPP_MASK_CHAR;
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	1c5a      	adds	r2, r3, #1
 800e6ee:	61fa      	str	r2, [r7, #28]
 800e6f0:	7bfa      	ldrb	r2, [r7, #15]
 800e6f2:	f082 0220 	eor.w	r2, r2, #32
 800e6f6:	b2d1      	uxtb	r1, r2
 800e6f8:	697a      	ldr	r2, [r7, #20]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	460a      	mov	r2, r1
 800e6fe:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
         escFlag = FALSE;
 800e702:	2300      	movs	r3, #0
 800e704:	61bb      	str	r3, [r7, #24]
 800e706:	e007      	b.n	800e718 <pppHdlcDriverReceivePacket+0x9c>
      }
      else
      {
         //Copy current character
         context->frame[n++] = c;
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	1c5a      	adds	r2, r3, #1
 800e70c:	61fa      	str	r2, [r7, #28]
 800e70e:	697a      	ldr	r2, [r7, #20]
 800e710:	4413      	add	r3, r2
 800e712:	7bfa      	ldrb	r2, [r7, #15]
 800e714:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
   while(n < PPP_MAX_FRAME_SIZE && context->rxBufferLen > 0)
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	f240 52e1 	movw	r2, #1505	; 0x5e1
 800e71e:	4293      	cmp	r3, r2
 800e720:	d808      	bhi.n	800e734 <pppHdlcDriverReceivePacket+0xb8>
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e728:	3304      	adds	r3, #4
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1b6      	bne.n	800e69e <pppHdlcDriverReceivePacket+0x22>
 800e730:	e000      	b.n	800e734 <pppHdlcDriverReceivePacket+0xb8>
         break;
 800e732:	bf00      	nop
      }
   }

   //Check whether a valid PPP frame has been received
   if(n > 0)
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d007      	beq.n	800e74a <pppHdlcDriverReceivePacket+0xce>
      //Debug message
      TRACE_DEBUG("PPP frame received (%" PRIuSIZE " bytes)...\r\n", n);
      TRACE_DEBUG_ARRAY("  ", context->frame, n);

      //Pass the packet to the upper layer
      nicProcessPacket(interface, context->frame, n);
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800e740:	69fa      	ldr	r2, [r7, #28]
 800e742:	4619      	mov	r1, r3
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f7f4 fa98 	bl	8002c7a <nicProcessPacket>
   }

   //Successful read operation
   return NO_ERROR;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3720      	adds	r7, #32
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <pppHdlcDriverUpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppHdlcDriverUpdateMacAddrFilter(NetInterface *interface)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
   //Not implemented
   return NO_ERROR;
 800e75c:	2300      	movs	r3, #0
}
 800e75e:	4618      	mov	r0, r3
 800e760:	370c      	adds	r7, #12
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <pppHdlcDriverWriteTxQueue>:
 * @param[in] context Pointer to the PPP context
 * @param[in] c Character to be written
 **/

void pppHdlcDriverWriteTxQueue(PppContext *context, uint8_t c)
{
 800e76a:	b480      	push	{r7}
 800e76c:	b083      	sub	sp, #12
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	460b      	mov	r3, r1
 800e774:	70fb      	strb	r3, [r7, #3]
   //Enqueue the character
   context->txBuffer[context->txWriteIndex] = c;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e77c:	331c      	adds	r3, #28
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	4413      	add	r3, r2
 800e784:	78fa      	ldrb	r2, [r7, #3]
 800e786:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

   //Increment index and wrap around if necessary
   if(++context->txWriteIndex >= PPP_TX_BUFFER_SIZE)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e790:	331c      	adds	r3, #28
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	1c5a      	adds	r2, r3, #1
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e79c:	331c      	adds	r3, #28
 800e79e:	601a      	str	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e7a6:	331c      	adds	r3, #28
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7ae:	d305      	bcc.n	800e7bc <pppHdlcDriverWriteTxQueue+0x52>
      context->txWriteIndex = 0;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e7b6:	331c      	adds	r3, #28
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7bc:	b672      	cpsid	i

   //Enter critical section
   __disable_irq();
   //Update the length of the queue
   context->txBufferLen++;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e7c4:	3318      	adds	r3, #24
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	1c5a      	adds	r2, r3, #1
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e7d0:	3318      	adds	r3, #24
 800e7d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800e7d4:	b662      	cpsie	i
   //Exit critical section
   __enable_irq();
}
 800e7d6:	bf00      	nop
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <pppHdlcDriverReadRxQueue>:
 * @param[in] context Pointer to the PPP context
 * @return Character read from the queue
 **/

uint8_t pppHdlcDriverReadRxQueue(PppContext *context)
{
 800e7e2:	b480      	push	{r7}
 800e7e4:	b085      	sub	sp, #20
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
   uint8_t c;

   //Read a single character
   c = context->rxBuffer[context->rxReadIndex];
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e7f0:	330c      	adds	r3, #12
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800e7fc:	3304      	adds	r3, #4
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	73fb      	strb	r3, [r7, #15]

   //Increment index and wrap around if necessary
   if(++context->rxReadIndex >= PPP_RX_BUFFER_SIZE)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e808:	330c      	adds	r3, #12
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	1c5a      	adds	r2, r3, #1
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e814:	330c      	adds	r3, #12
 800e816:	601a      	str	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e81e:	330c      	adds	r3, #12
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e826:	d305      	bcc.n	800e834 <pppHdlcDriverReadRxQueue+0x52>
      context->rxReadIndex = 0;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e82e:	330c      	adds	r3, #12
 800e830:	2200      	movs	r2, #0
 800e832:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e834:	b672      	cpsid	i

   //Enter critical section
   __disable_irq();
   //Update the length of the queue
   context->rxBufferLen--;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e83c:	3304      	adds	r3, #4
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	1e5a      	subs	r2, r3, #1
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e848:	3304      	adds	r3, #4
 800e84a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800e84c:	b662      	cpsie	i
   //Exit critical section
   __enable_irq();

   //Return the character that has been read
   return c;
 800e84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3714      	adds	r7, #20
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <pppHdlcDriverReadTxQueue>:
 * @param[out] c Character read from the queue
 * @return TRUE if a context switch is required
 **/

bool_t pppHdlcDriverReadTxQueue(NetInterface *interface, int_t *c)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
   bool_t flag;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e86c:	60bb      	str	r3, [r7, #8]
   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 800e86e:	2300      	movs	r3, #0
 800e870:	60fb      	str	r3, [r7, #12]

   //Any data pending in the TX queue?
   if(context->txBufferLen > 0)
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e878:	3318      	adds	r3, #24
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d03a      	beq.n	800e8f6 <pppHdlcDriverReadTxQueue+0x9a>
   {
      //Read a single character
      *c = context->txBuffer[context->txReadIndex];
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	4413      	add	r3, r2
 800e88c:	f893 3776 	ldrb.w	r3, [r3, #1910]	; 0x776
 800e890:	461a      	mov	r2, r3
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	601a      	str	r2, [r3, #0]

      //Increment index and wrap around if necessary
      if(++context->txReadIndex >= PPP_TX_BUFFER_SIZE)
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	1c5a      	adds	r2, r3, #1
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800e8a6:	601a      	str	r2, [r3, #0]
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8b4:	d304      	bcc.n	800e8c0 <pppHdlcDriverReadTxQueue+0x64>
         context->txReadIndex = 0;
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800e8bc:	2200      	movs	r2, #0
 800e8be:	601a      	str	r2, [r3, #0]

      //Update the length of the queue
      context->txBufferLen--;
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e8c6:	3318      	adds	r3, #24
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	1e5a      	subs	r2, r3, #1
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e8d2:	3318      	adds	r3, #24
 800e8d4:	601a      	str	r2, [r3, #0]

      //Check whether the TX is available for writing
      if(context->txBufferLen == (PPP_TX_BUFFER_SIZE - 3006))
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800e8dc:	3318      	adds	r3, #24
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f240 4242 	movw	r2, #1090	; 0x442
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d10a      	bne.n	800e8fe <pppHdlcDriverReadTxQueue+0xa2>
      {
         flag = osSetEventFromIsr(&interface->nicTxEvent);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	3370      	adds	r3, #112	; 0x70
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7f1 ff2c 	bl	800074a <osSetEventFromIsr>
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	e003      	b.n	800e8fe <pppHdlcDriverReadTxQueue+0xa2>
      }
   }
   else
   {
      //The TX queue is empty
      *c = EOF;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8fc:	601a      	str	r2, [r3, #0]
   }

   //The return value tells whether a context switch is required
   return flag;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <pppHdlcDriverWriteRxQueue>:
 * @param[in] c Character to be written
 * @return TRUE if a context switch is required
 **/

bool_t pppHdlcDriverWriteRxQueue(NetInterface *interface, uint8_t c)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	460b      	mov	r3, r1
 800e912:	70fb      	strb	r3, [r7, #3]
   bool_t flag;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e91a:	60bb      	str	r3, [r7, #8]
   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 800e91c:	2300      	movs	r3, #0
 800e91e:	60fb      	str	r3, [r7, #12]

   //Make sure the RX queue is not full
   if(context->rxBufferLen < PPP_RX_BUFFER_SIZE)
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e926:	3304      	adds	r3, #4
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e92e:	d244      	bcs.n	800e9ba <pppHdlcDriverWriteRxQueue+0xb2>
   {
      //Enqueue the character
      context->rxBuffer[context->rxWriteIndex] = c;
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e936:	3308      	adds	r3, #8
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	4413      	add	r3, r2
 800e93e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800e942:	3304      	adds	r3, #4
 800e944:	78fa      	ldrb	r2, [r7, #3]
 800e946:	701a      	strb	r2, [r3, #0]

      //Increment index and wrap around if necessary
      if(++context->rxWriteIndex >= PPP_RX_BUFFER_SIZE)
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e94e:	3308      	adds	r3, #8
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	1c5a      	adds	r2, r3, #1
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e95a:	3308      	adds	r3, #8
 800e95c:	601a      	str	r2, [r3, #0]
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e964:	3308      	adds	r3, #8
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e96c:	d305      	bcc.n	800e97a <pppHdlcDriverWriteRxQueue+0x72>
         context->rxWriteIndex = 0;
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e974:	3308      	adds	r3, #8
 800e976:	2200      	movs	r2, #0
 800e978:	601a      	str	r2, [r3, #0]

      //Update the length of the queue
      context->rxBufferLen++;
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e980:	3304      	adds	r3, #4
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	1c5a      	adds	r2, r3, #1
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e98c:	3304      	adds	r3, #4
 800e98e:	601a      	str	r2, [r3, #0]

      //0x7E flag found?
      if(c == PPP_FLAG_CHAR)
 800e990:	78fb      	ldrb	r3, [r7, #3]
 800e992:	2b7e      	cmp	r3, #126	; 0x7e
 800e994:	d111      	bne.n	800e9ba <pppHdlcDriverWriteRxQueue+0xb2>
      {
         //Increment frame counter
         context->rxFrameCount++;
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e99c:	3310      	adds	r3, #16
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	1c5a      	adds	r2, r3, #1
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800e9a8:	3310      	adds	r3, #16
 800e9aa:	601a      	str	r2, [r3, #0]

         //A complete HDLC frame has been received
         interface->nicEvent = TRUE;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	675a      	str	r2, [r3, #116]	; 0x74
         //Notify the TCP/IP stack of the event
         flag = osSetEventFromIsr(&netEvent);
 800e9b2:	4804      	ldr	r0, [pc, #16]	; (800e9c4 <pppHdlcDriverWriteRxQueue+0xbc>)
 800e9b4:	f7f1 fec9 	bl	800074a <osSetEventFromIsr>
 800e9b8:	60f8      	str	r0, [r7, #12]
      }
   }

   //The return value tells whether a context switch is required
   return flag;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3710      	adds	r7, #16
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	2000e458 	.word	0x2000e458

0800e9c8 <pppSendConfigureAckNak>:
 * @return Error code
 **/

error_t pppSendConfigureAckNak(PppContext *context,
   const PppConfigurePacket *configureReqPacket, PppProtocol protocol, PppCode code)
{
 800e9c8:	b590      	push	{r4, r7, lr}
 800e9ca:	b08b      	sub	sp, #44	; 0x2c
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	4611      	mov	r1, r2
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	80fb      	strh	r3, [r7, #6]
 800e9da:	4613      	mov	r3, r2
 800e9dc:	717b      	strb	r3, [r7, #5]
   NetBuffer *buffer;
   PppConfigurePacket *configureAckNakPacket;
   PppOption *option;

   //Initialize status code
   error = NO_ERROR;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	83fb      	strh	r3, [r7, #30]
   //Retrieve the length of the Configure-Request packet
   length = ntohs(configureReqPacket->length);
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	885b      	ldrh	r3, [r3, #2]
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7f1 fdd9 	bl	80005a0 <swapInt16>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	627b      	str	r3, [r7, #36]	; 0x24

   //Allocate a buffer memory to hold the Configure-Ack, Nak or Reject packet
   buffer = pppAllocBuffer(length, &offset);
 800e9f2:	f107 0310 	add.w	r3, r7, #16
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9fa:	f7ff f829 	bl	800da50 <pppAllocBuffer>
 800e9fe:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <pppSendConfigureAckNak+0x42>
      return ERROR_OUT_OF_MEMORY;
 800ea06:	2364      	movs	r3, #100	; 0x64
 800ea08:	e0a5      	b.n	800eb56 <pppSendConfigureAckNak+0x18e>

   //Point to the beginning of the packet
   configureAckNakPacket = netBufferAt(buffer, offset);
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	69b8      	ldr	r0, [r7, #24]
 800ea10:	f7f3 fe26 	bl	8002660 <netBufferAt>
 800ea14:	6178      	str	r0, [r7, #20]

   //Format packet header
   configureAckNakPacket->code = code;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	797a      	ldrb	r2, [r7, #5]
 800ea1a:	701a      	strb	r2, [r3, #0]
   configureAckNakPacket->identifier = configureReqPacket->identifier;
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	785a      	ldrb	r2, [r3, #1]
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	705a      	strb	r2, [r3, #1]
   configureAckNakPacket->length = sizeof(PppConfigurePacket);
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	2200      	movs	r2, #0
 800ea28:	f042 0204 	orr.w	r2, r2, #4
 800ea2c:	709a      	strb	r2, [r3, #2]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	70da      	strb	r2, [r3, #3]

   //Retrieve the length of the option list
   length -= sizeof(PppConfigurePacket);
 800ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea34:	3b04      	subs	r3, #4
 800ea36:	627b      	str	r3, [r7, #36]	; 0x24
   //Point to the first option
   option = (PppOption *) configureReqPacket->options;
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	3304      	adds	r3, #4
 800ea3c:	623b      	str	r3, [r7, #32]

   //Parse configuration options
   while(length > 0)
 800ea3e:	e022      	b.n	800ea86 <pppSendConfigureAckNak+0xbe>
   {
      //LCP protocol?
      if(protocol == PPP_PROTOCOL_LCP)
 800ea40:	88fb      	ldrh	r3, [r7, #6]
 800ea42:	f24c 0221 	movw	r2, #49185	; 0xc021
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d106      	bne.n	800ea58 <pppSendConfigureAckNak+0x90>
      {
         //Parse LCP option
         lcpParseOption(context, option, length, configureAckNakPacket);
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea4e:	6a39      	ldr	r1, [r7, #32]
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f7fd fe45 	bl	800c6e0 <lcpParseOption>
 800ea56:	e00a      	b.n	800ea6e <pppSendConfigureAckNak+0xa6>
      }
#if (IPV4_SUPPORT == ENABLED)
      //IPCP protocol?
      else if(protocol == PPP_PROTOCOL_IPCP)
 800ea58:	88fb      	ldrh	r3, [r7, #6]
 800ea5a:	f248 0221 	movw	r2, #32801	; 0x8021
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d105      	bne.n	800ea6e <pppSendConfigureAckNak+0xa6>
      {
         //Parse IPCP option
         ipcpParseOption(context, option, length, configureAckNakPacket);
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea66:	6a39      	ldr	r1, [r7, #32]
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f7fc fd79 	bl	800b560 <ipcpParseOption>
         ipv6cpParseOption(context, option, length, configureAckNakPacket);
      }
#endif

      //Remaining bytes to process
      length -= option->length;
 800ea6e:	6a3b      	ldr	r3, [r7, #32]
 800ea70:	785b      	ldrb	r3, [r3, #1]
 800ea72:	461a      	mov	r2, r3
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	1a9b      	subs	r3, r3, r2
 800ea78:	627b      	str	r3, [r7, #36]	; 0x24
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	785b      	ldrb	r3, [r3, #1]
 800ea7e:	461a      	mov	r2, r3
 800ea80:	6a3b      	ldr	r3, [r7, #32]
 800ea82:	4413      	add	r3, r2
 800ea84:	623b      	str	r3, [r7, #32]
   while(length > 0)
 800ea86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1d9      	bne.n	800ea40 <pppSendConfigureAckNak+0x78>
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + configureAckNakPacket->length);
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	885b      	ldrh	r3, [r3, #2]
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	461a      	mov	r2, r3
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	4413      	add	r3, r2
 800ea98:	4619      	mov	r1, r3
 800ea9a:	69b8      	ldr	r0, [r7, #24]
 800ea9c:	f7f3 fd3a 	bl	8002514 <netBufferSetLength>
   //Convert length field to network byte order
   configureAckNakPacket->length = htons(configureAckNakPacket->length);
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	885b      	ldrh	r3, [r3, #2]
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7f1 fd7a 	bl	80005a0 <swapInt16>
 800eaac:	4603      	mov	r3, r0
 800eaae:	461a      	mov	r2, r3
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	805a      	strh	r2, [r3, #2]

   //Debug message
   if(code == PPP_CODE_CONFIGURE_ACK)
 800eab4:	797b      	ldrb	r3, [r7, #5]
 800eab6:	2b02      	cmp	r3, #2
 800eab8:	d113      	bne.n	800eae2 <pppSendConfigureAckNak+0x11a>
   {
      TRACE_INFO("Sending Configure-Ack packet (%" PRIuSIZE " bytes)...\r\n",
 800eaba:	f7f1 fdc1 	bl	8000640 <osSuspendAllTasks>
 800eabe:	4b28      	ldr	r3, [pc, #160]	; (800eb60 <pppSendConfigureAckNak+0x198>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	68dc      	ldr	r4, [r3, #12]
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	885b      	ldrh	r3, [r3, #2]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7f1 fd68 	bl	80005a0 <swapInt16>
 800ead0:	4603      	mov	r3, r0
 800ead2:	461a      	mov	r2, r3
 800ead4:	4923      	ldr	r1, [pc, #140]	; (800eb64 <pppSendConfigureAckNak+0x19c>)
 800ead6:	4620      	mov	r0, r4
 800ead8:	f00c fa60 	bl	801af9c <fiprintf>
 800eadc:	f7f1 fdbb 	bl	8000656 <osResumeAllTasks>
 800eae0:	e02c      	b.n	800eb3c <pppSendConfigureAckNak+0x174>
         ntohs(configureAckNakPacket->length));
   }
   else if(code == PPP_CODE_CONFIGURE_NAK)
 800eae2:	797b      	ldrb	r3, [r7, #5]
 800eae4:	2b03      	cmp	r3, #3
 800eae6:	d113      	bne.n	800eb10 <pppSendConfigureAckNak+0x148>
   {
      TRACE_INFO("Sending Configure-Nak packet (%" PRIuSIZE " bytes)...\r\n",
 800eae8:	f7f1 fdaa 	bl	8000640 <osSuspendAllTasks>
 800eaec:	4b1c      	ldr	r3, [pc, #112]	; (800eb60 <pppSendConfigureAckNak+0x198>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68dc      	ldr	r4, [r3, #12]
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	885b      	ldrh	r3, [r3, #2]
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7f1 fd51 	bl	80005a0 <swapInt16>
 800eafe:	4603      	mov	r3, r0
 800eb00:	461a      	mov	r2, r3
 800eb02:	4919      	ldr	r1, [pc, #100]	; (800eb68 <pppSendConfigureAckNak+0x1a0>)
 800eb04:	4620      	mov	r0, r4
 800eb06:	f00c fa49 	bl	801af9c <fiprintf>
 800eb0a:	f7f1 fda4 	bl	8000656 <osResumeAllTasks>
 800eb0e:	e015      	b.n	800eb3c <pppSendConfigureAckNak+0x174>
         ntohs(configureAckNakPacket->length));
   }
   else if(code == PPP_CODE_CONFIGURE_REJ)
 800eb10:	797b      	ldrb	r3, [r7, #5]
 800eb12:	2b04      	cmp	r3, #4
 800eb14:	d112      	bne.n	800eb3c <pppSendConfigureAckNak+0x174>
   {
      TRACE_INFO("Sending Configure-Reject packet (%" PRIuSIZE " bytes)...\r\n",
 800eb16:	f7f1 fd93 	bl	8000640 <osSuspendAllTasks>
 800eb1a:	4b11      	ldr	r3, [pc, #68]	; (800eb60 <pppSendConfigureAckNak+0x198>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	68dc      	ldr	r4, [r3, #12]
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	885b      	ldrh	r3, [r3, #2]
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7f1 fd3a 	bl	80005a0 <swapInt16>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	461a      	mov	r2, r3
 800eb30:	490e      	ldr	r1, [pc, #56]	; (800eb6c <pppSendConfigureAckNak+0x1a4>)
 800eb32:	4620      	mov	r0, r4
 800eb34:	f00c fa32 	bl	801af9c <fiprintf>
 800eb38:	f7f1 fd8d 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) configureAckNakPacket,
      ntohs(configureAckNakPacket->length), protocol);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, protocol);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6998      	ldr	r0, [r3, #24]
 800eb40:	693a      	ldr	r2, [r7, #16]
 800eb42:	88fb      	ldrh	r3, [r7, #6]
 800eb44:	69b9      	ldr	r1, [r7, #24]
 800eb46:	f7fe fe0d 	bl	800d764 <pppSendFrame>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	83fb      	strh	r3, [r7, #30]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800eb4e:	69b8      	ldr	r0, [r7, #24]
 800eb50:	f7f3 fcaf 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800eb54:	8bfb      	ldrh	r3, [r7, #30]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	372c      	adds	r7, #44	; 0x2c
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd90      	pop	{r4, r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	20000058 	.word	0x20000058
 800eb64:	0801d27c 	.word	0x0801d27c
 800eb68:	0801d2ac 	.word	0x0801d2ac
 800eb6c:	0801d2dc 	.word	0x0801d2dc

0800eb70 <pppSendTerminateReq>:
 * @return Error code
 **/

error_t pppSendTerminateReq(PppContext *context,
   uint8_t identifier, PppProtocol protocol)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b088      	sub	sp, #32
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	460b      	mov	r3, r1
 800eb7a:	70fb      	strb	r3, [r7, #3]
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	803b      	strh	r3, [r7, #0]
   size_t offset;
   NetBuffer *buffer;
   PppTerminatePacket *terminateReqPacket;

   //Length of the Terminate-Request packet
   length = sizeof(PppTerminatePacket);
 800eb80:	2304      	movs	r3, #4
 800eb82:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Terminate-Request packet
   buffer = pppAllocBuffer(length, &offset);
 800eb84:	f107 030c 	add.w	r3, r7, #12
 800eb88:	4619      	mov	r1, r3
 800eb8a:	69f8      	ldr	r0, [r7, #28]
 800eb8c:	f7fe ff60 	bl	800da50 <pppAllocBuffer>
 800eb90:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <pppSendTerminateReq+0x2c>
      return ERROR_OUT_OF_MEMORY;
 800eb98:	2364      	movs	r3, #100	; 0x64
 800eb9a:	e02d      	b.n	800ebf8 <pppSendTerminateReq+0x88>

   //Point to the Terminate-Request packet
   terminateReqPacket = netBufferAt(buffer, offset);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	69b8      	ldr	r0, [r7, #24]
 800eba2:	f7f3 fd5d 	bl	8002660 <netBufferAt>
 800eba6:	6178      	str	r0, [r7, #20]

   //Format packet header
   terminateReqPacket->code = PPP_CODE_TERMINATE_REQ;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	2205      	movs	r2, #5
 800ebac:	701a      	strb	r2, [r3, #0]
   terminateReqPacket->identifier = identifier;
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	78fa      	ldrb	r2, [r7, #3]
 800ebb2:	705a      	strb	r2, [r3, #1]
   terminateReqPacket->length = htons(length);
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7f1 fcf1 	bl	80005a0 <swapInt16>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending Terminate-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800ebc6:	f7f1 fd3b 	bl	8000640 <osSuspendAllTasks>
 800ebca:	4b0d      	ldr	r3, [pc, #52]	; (800ec00 <pppSendTerminateReq+0x90>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	69fa      	ldr	r2, [r7, #28]
 800ebd2:	490c      	ldr	r1, [pc, #48]	; (800ec04 <pppSendTerminateReq+0x94>)
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f00c f9e1 	bl	801af9c <fiprintf>
 800ebda:	f7f1 fd3c 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) terminateReqPacket, length, protocol);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, protocol);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6998      	ldr	r0, [r3, #24]
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	883b      	ldrh	r3, [r7, #0]
 800ebe6:	69b9      	ldr	r1, [r7, #24]
 800ebe8:	f7fe fdbc 	bl	800d764 <pppSendFrame>
 800ebec:	4603      	mov	r3, r0
 800ebee:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800ebf0:	69b8      	ldr	r0, [r7, #24]
 800ebf2:	f7f3 fc5e 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800ebf6:	8a7b      	ldrh	r3, [r7, #18]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3720      	adds	r7, #32
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	20000058 	.word	0x20000058
 800ec04:	0801d30c 	.word	0x0801d30c

0800ec08 <pppSendTerminateAck>:
 * @return Error code
 **/

error_t pppSendTerminateAck(PppContext *context,
   uint8_t identifier, PppProtocol protocol)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b088      	sub	sp, #32
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	460b      	mov	r3, r1
 800ec12:	70fb      	strb	r3, [r7, #3]
 800ec14:	4613      	mov	r3, r2
 800ec16:	803b      	strh	r3, [r7, #0]
   size_t offset;
   NetBuffer *buffer;
   PppTerminatePacket *terminateAckPacket;

   //Length of the Terminate-Ack packet
   length = sizeof(PppTerminatePacket);
 800ec18:	2304      	movs	r3, #4
 800ec1a:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Terminate-Ack packet
   buffer = pppAllocBuffer(length, &offset);
 800ec1c:	f107 030c 	add.w	r3, r7, #12
 800ec20:	4619      	mov	r1, r3
 800ec22:	69f8      	ldr	r0, [r7, #28]
 800ec24:	f7fe ff14 	bl	800da50 <pppAllocBuffer>
 800ec28:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d101      	bne.n	800ec34 <pppSendTerminateAck+0x2c>
      return ERROR_OUT_OF_MEMORY;
 800ec30:	2364      	movs	r3, #100	; 0x64
 800ec32:	e02d      	b.n	800ec90 <pppSendTerminateAck+0x88>

   //Point to the Terminate-Ack packet
   terminateAckPacket = netBufferAt(buffer, offset);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	4619      	mov	r1, r3
 800ec38:	69b8      	ldr	r0, [r7, #24]
 800ec3a:	f7f3 fd11 	bl	8002660 <netBufferAt>
 800ec3e:	6178      	str	r0, [r7, #20]

   //Format packet header
   terminateAckPacket->code = PPP_CODE_TERMINATE_ACK;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	2206      	movs	r2, #6
 800ec44:	701a      	strb	r2, [r3, #0]
   terminateAckPacket->identifier = identifier;
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	78fa      	ldrb	r2, [r7, #3]
 800ec4a:	705a      	strb	r2, [r3, #1]
   terminateAckPacket->length = htons(length);
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7f1 fca5 	bl	80005a0 <swapInt16>
 800ec56:	4603      	mov	r3, r0
 800ec58:	461a      	mov	r2, r3
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending Terminate-Ack packet (%" PRIuSIZE " bytes)...\r\n", length);
 800ec5e:	f7f1 fcef 	bl	8000640 <osSuspendAllTasks>
 800ec62:	4b0d      	ldr	r3, [pc, #52]	; (800ec98 <pppSendTerminateAck+0x90>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	69fa      	ldr	r2, [r7, #28]
 800ec6a:	490c      	ldr	r1, [pc, #48]	; (800ec9c <pppSendTerminateAck+0x94>)
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f00c f995 	bl	801af9c <fiprintf>
 800ec72:	f7f1 fcf0 	bl	8000656 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) terminateAckPacket, length, protocol);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, protocol);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6998      	ldr	r0, [r3, #24]
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	883b      	ldrh	r3, [r7, #0]
 800ec7e:	69b9      	ldr	r1, [r7, #24]
 800ec80:	f7fe fd70 	bl	800d764 <pppSendFrame>
 800ec84:	4603      	mov	r3, r0
 800ec86:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800ec88:	69b8      	ldr	r0, [r7, #24]
 800ec8a:	f7f3 fc12 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800ec8e:	8a7b      	ldrh	r3, [r7, #18]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3720      	adds	r7, #32
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	20000058 	.word	0x20000058
 800ec9c:	0801d340 	.word	0x0801d340

0800eca0 <pppSendCodeRej>:
 * @return Error code
 **/

error_t pppSendCodeRej(PppContext *context, const PppPacket *packet,
   uint8_t identifier, PppProtocol protocol)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b08a      	sub	sp, #40	; 0x28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	4611      	mov	r1, r2
 800ecac:	461a      	mov	r2, r3
 800ecae:	460b      	mov	r3, r1
 800ecb0:	71fb      	strb	r3, [r7, #7]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	80bb      	strh	r3, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppCodeRejPacket *codeRejPacket;

   //Calculate the length of the Code-Reject packet
   length = ntohs(packet->length) + sizeof(PppCodeRejPacket);
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	885b      	ldrh	r3, [r3, #2]
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7f1 fc6f 	bl	80005a0 <swapInt16>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	623b      	str	r3, [r7, #32]

   //The rejected packet must be truncated to comply with
   //the peer's established MRU
   length = MIN(length, context->peerConfig.mru);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800ecce:	461a      	mov	r2, r3
 800ecd0:	6a3b      	ldr	r3, [r7, #32]
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	bf28      	it	cs
 800ecd6:	4613      	movcs	r3, r2
 800ecd8:	623b      	str	r3, [r7, #32]

   //Allocate a buffer memory to hold the Code-Reject packet
   buffer = pppAllocBuffer(sizeof(PppCodeRejPacket), &offset);
 800ecda:	f107 0314 	add.w	r3, r7, #20
 800ecde:	4619      	mov	r1, r3
 800ece0:	2004      	movs	r0, #4
 800ece2:	f7fe feb5 	bl	800da50 <pppAllocBuffer>
 800ece6:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(buffer == NULL)
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d101      	bne.n	800ecf2 <pppSendCodeRej+0x52>
      return ERROR_OUT_OF_MEMORY;
 800ecee:	2364      	movs	r3, #100	; 0x64
 800ecf0:	e039      	b.n	800ed66 <pppSendCodeRej+0xc6>

   //Point to the Code-Reject packet
   codeRejPacket = netBufferAt(buffer, offset);
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	69f8      	ldr	r0, [r7, #28]
 800ecf8:	f7f3 fcb2 	bl	8002660 <netBufferAt>
 800ecfc:	61b8      	str	r0, [r7, #24]

   //Format packet header
   codeRejPacket->code = PPP_CODE_CODE_REJ;
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	2207      	movs	r2, #7
 800ed02:	701a      	strb	r2, [r3, #0]
   codeRejPacket->identifier = identifier;
 800ed04:	69bb      	ldr	r3, [r7, #24]
 800ed06:	79fa      	ldrb	r2, [r7, #7]
 800ed08:	705a      	strb	r2, [r3, #1]
   codeRejPacket->length = htons(length);
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7f1 fc46 	bl	80005a0 <swapInt16>
 800ed14:	4603      	mov	r3, r0
 800ed16:	461a      	mov	r2, r3
 800ed18:	69bb      	ldr	r3, [r7, #24]
 800ed1a:	805a      	strh	r2, [r3, #2]

   //The Rejected-Packet field contains a copy of the packet which is being rejected
   error = netBufferAppend(buffer, packet, length - sizeof(PppCodeRejPacket));
 800ed1c:	6a3b      	ldr	r3, [r7, #32]
 800ed1e:	3b04      	subs	r3, #4
 800ed20:	461a      	mov	r2, r3
 800ed22:	68b9      	ldr	r1, [r7, #8]
 800ed24:	69f8      	ldr	r0, [r7, #28]
 800ed26:	f7f3 fe33 	bl	8002990 <netBufferAppend>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 800ed2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d114      	bne.n	800ed5e <pppSendCodeRej+0xbe>
   {
      //Debug message
      TRACE_INFO("Sending Code-Reject packet (%" PRIuSIZE " bytes)...\r\n", length);
 800ed34:	f7f1 fc84 	bl	8000640 <osSuspendAllTasks>
 800ed38:	4b0d      	ldr	r3, [pc, #52]	; (800ed70 <pppSendCodeRej+0xd0>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	6a3a      	ldr	r2, [r7, #32]
 800ed40:	490c      	ldr	r1, [pc, #48]	; (800ed74 <pppSendCodeRej+0xd4>)
 800ed42:	4618      	mov	r0, r3
 800ed44:	f00c f92a 	bl	801af9c <fiprintf>
 800ed48:	f7f1 fc85 	bl	8000656 <osResumeAllTasks>

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, protocol);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6998      	ldr	r0, [r3, #24]
 800ed50:	697a      	ldr	r2, [r7, #20]
 800ed52:	88bb      	ldrh	r3, [r7, #4]
 800ed54:	69f9      	ldr	r1, [r7, #28]
 800ed56:	f7fe fd05 	bl	800d764 <pppSendFrame>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	84fb      	strh	r3, [r7, #38]	; 0x26
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800ed5e:	69f8      	ldr	r0, [r7, #28]
 800ed60:	f7f3 fba7 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800ed64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3728      	adds	r7, #40	; 0x28
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	20000058 	.word	0x20000058
 800ed74:	0801d370 	.word	0x0801d370

0800ed78 <pppSendProtocolRej>:
 * @return Error code
 **/

error_t pppSendProtocolRej(PppContext *context, uint8_t identifier,
   uint16_t protocol, const uint8_t *information, size_t length)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b088      	sub	sp, #32
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60f8      	str	r0, [r7, #12]
 800ed80:	607b      	str	r3, [r7, #4]
 800ed82:	460b      	mov	r3, r1
 800ed84:	72fb      	strb	r3, [r7, #11]
 800ed86:	4613      	mov	r3, r2
 800ed88:	813b      	strh	r3, [r7, #8]
   size_t offset;
   NetBuffer *buffer;
   PppProtocolRejPacket *protocolRejPacket;

   //Calculate the length of the Protocol-Reject packet
   length += sizeof(PppProtocolRejPacket);
 800ed8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8c:	3306      	adds	r3, #6
 800ed8e:	62bb      	str	r3, [r7, #40]	; 0x28

   //The Rejected-Information must be truncated to comply with
   //the peer's established MRU
   length = MIN(length, context->peerConfig.mru);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800ed96:	461a      	mov	r2, r3
 800ed98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	bf28      	it	cs
 800ed9e:	4613      	movcs	r3, r2
 800eda0:	62bb      	str	r3, [r7, #40]	; 0x28

   //Allocate a buffer memory to hold the Protocol-Reject packet
   buffer = pppAllocBuffer(sizeof(PppProtocolRejPacket), &offset);
 800eda2:	f107 0310 	add.w	r3, r7, #16
 800eda6:	4619      	mov	r1, r3
 800eda8:	2006      	movs	r0, #6
 800edaa:	f7fe fe51 	bl	800da50 <pppAllocBuffer>
 800edae:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d101      	bne.n	800edba <pppSendProtocolRej+0x42>
      return ERROR_OUT_OF_MEMORY;
 800edb6:	2364      	movs	r3, #100	; 0x64
 800edb8:	e042      	b.n	800ee40 <pppSendProtocolRej+0xc8>

   //Point to the Protocol-Reject packet
   protocolRejPacket = netBufferAt(buffer, offset);
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	4619      	mov	r1, r3
 800edbe:	69b8      	ldr	r0, [r7, #24]
 800edc0:	f7f3 fc4e 	bl	8002660 <netBufferAt>
 800edc4:	6178      	str	r0, [r7, #20]

   //Format packet header
   protocolRejPacket->code = PPP_CODE_PROTOCOL_REJ;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2208      	movs	r2, #8
 800edca:	701a      	strb	r2, [r3, #0]
   protocolRejPacket->identifier = identifier;
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	7afa      	ldrb	r2, [r7, #11]
 800edd0:	705a      	strb	r2, [r3, #1]
   protocolRejPacket->length = htons(length);
 800edd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7f1 fbe2 	bl	80005a0 <swapInt16>
 800eddc:	4603      	mov	r3, r0
 800edde:	461a      	mov	r2, r3
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	805a      	strh	r2, [r3, #2]
   protocolRejPacket->rejectedProtocol = htons(protocol);
 800ede4:	893b      	ldrh	r3, [r7, #8]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7f1 fbda 	bl	80005a0 <swapInt16>
 800edec:	4603      	mov	r3, r0
 800edee:	461a      	mov	r2, r3
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	809a      	strh	r2, [r3, #4]

   //The Rejected-Information field contains a copy of the
   //packet which is being rejected
   error = netBufferAppend(buffer, information,
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	3b06      	subs	r3, #6
 800edf8:	461a      	mov	r2, r3
 800edfa:	6879      	ldr	r1, [r7, #4]
 800edfc:	69b8      	ldr	r0, [r7, #24]
 800edfe:	f7f3 fdc7 	bl	8002990 <netBufferAppend>
 800ee02:	4603      	mov	r3, r0
 800ee04:	83fb      	strh	r3, [r7, #30]
      length - sizeof(PppProtocolRejPacket));

   //Check status code
   if(!error)
 800ee06:	8bfb      	ldrh	r3, [r7, #30]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d115      	bne.n	800ee38 <pppSendProtocolRej+0xc0>
   {
      //Debug message
      TRACE_INFO("Sending Protocol-Reject packet (%" PRIuSIZE " bytes)...\r\n", length);
 800ee0c:	f7f1 fc18 	bl	8000640 <osSuspendAllTasks>
 800ee10:	4b0d      	ldr	r3, [pc, #52]	; (800ee48 <pppSendProtocolRej+0xd0>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee18:	490c      	ldr	r1, [pc, #48]	; (800ee4c <pppSendProtocolRej+0xd4>)
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f00c f8be 	bl	801af9c <fiprintf>
 800ee20:	f7f1 fc19 	bl	8000656 <osResumeAllTasks>

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_LCP);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	6998      	ldr	r0, [r3, #24]
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	f24c 0321 	movw	r3, #49185	; 0xc021
 800ee2e:	69b9      	ldr	r1, [r7, #24]
 800ee30:	f7fe fc98 	bl	800d764 <pppSendFrame>
 800ee34:	4603      	mov	r3, r0
 800ee36:	83fb      	strh	r3, [r7, #30]
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800ee38:	69b8      	ldr	r0, [r7, #24]
 800ee3a:	f7f3 fb3a 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800ee3e:	8bfb      	ldrh	r3, [r7, #30]
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3720      	adds	r7, #32
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	20000058 	.word	0x20000058
 800ee4c:	0801d39c 	.word	0x0801d39c

0800ee50 <pppSendEchoRep>:
 * @return Error code
 **/

error_t pppSendEchoRep(PppContext *context,
   const PppEchoPacket *echoReqPacket, PppProtocol protocol)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b08a      	sub	sp, #40	; 0x28
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	80fb      	strh	r3, [r7, #6]
   size_t offset;
   NetBuffer *buffer;
   PppEchoPacket *echoRepPacket;

   //Retrieve the length of the Echo-Request packet
   length = ntohs(echoReqPacket->length);
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	885b      	ldrh	r3, [r3, #2]
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7f1 fb9b 	bl	80005a0 <swapInt16>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	623b      	str	r3, [r7, #32]

   //Make sure the length is valid
   if(length < sizeof(PppEchoPacket))
 800ee6e:	6a3b      	ldr	r3, [r7, #32]
 800ee70:	2b07      	cmp	r3, #7
 800ee72:	d801      	bhi.n	800ee78 <pppSendEchoRep+0x28>
      return ERROR_INVALID_LENGTH;
 800ee74:	23eb      	movs	r3, #235	; 0xeb
 800ee76:	e056      	b.n	800ef26 <pppSendEchoRep+0xd6>
   if(length > context->peerConfig.mru)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800ee7e:	461a      	mov	r2, r3
 800ee80:	6a3b      	ldr	r3, [r7, #32]
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d901      	bls.n	800ee8a <pppSendEchoRep+0x3a>
      return ERROR_INVALID_LENGTH;
 800ee86:	23eb      	movs	r3, #235	; 0xeb
 800ee88:	e04d      	b.n	800ef26 <pppSendEchoRep+0xd6>

   //Allocate a buffer memory to hold the Echo-Reply packet
   buffer = pppAllocBuffer(sizeof(PppEchoPacket), &offset);
 800ee8a:	f107 0314 	add.w	r3, r7, #20
 800ee8e:	4619      	mov	r1, r3
 800ee90:	2008      	movs	r0, #8
 800ee92:	f7fe fddd 	bl	800da50 <pppAllocBuffer>
 800ee96:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(buffer == NULL)
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d101      	bne.n	800eea2 <pppSendEchoRep+0x52>
      return ERROR_OUT_OF_MEMORY;
 800ee9e:	2364      	movs	r3, #100	; 0x64
 800eea0:	e041      	b.n	800ef26 <pppSendEchoRep+0xd6>

   //Point to the Echo-Reply packet
   echoRepPacket = netBufferAt(buffer, offset);
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	4619      	mov	r1, r3
 800eea6:	69f8      	ldr	r0, [r7, #28]
 800eea8:	f7f3 fbda 	bl	8002660 <netBufferAt>
 800eeac:	61b8      	str	r0, [r7, #24]

   //Format packet header
   echoRepPacket->code = PPP_CODE_ECHO_REP;
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	220a      	movs	r2, #10
 800eeb2:	701a      	strb	r2, [r3, #0]
   echoRepPacket->identifier = echoReqPacket->identifier;
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	785a      	ldrb	r2, [r3, #1]
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	705a      	strb	r2, [r3, #1]
   echoRepPacket->length = htons(length);
 800eebc:	6a3b      	ldr	r3, [r7, #32]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7f1 fb6d 	bl	80005a0 <swapInt16>
 800eec6:	4603      	mov	r3, r0
 800eec8:	461a      	mov	r2, r3
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	805a      	strh	r2, [r3, #2]
   echoRepPacket->magicNumber = context->localConfig.magicNumber;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	605a      	str	r2, [r3, #4]

   //The data field of the Echo-Request packet is copied into the data
   //field of the Echo-Reply packet
   error = netBufferAppend(buffer, echoReqPacket->data, length - sizeof(PppEchoPacket));
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	f103 0108 	add.w	r1, r3, #8
 800eede:	6a3b      	ldr	r3, [r7, #32]
 800eee0:	3b08      	subs	r3, #8
 800eee2:	461a      	mov	r2, r3
 800eee4:	69f8      	ldr	r0, [r7, #28]
 800eee6:	f7f3 fd53 	bl	8002990 <netBufferAppend>
 800eeea:	4603      	mov	r3, r0
 800eeec:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 800eeee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d114      	bne.n	800ef1e <pppSendEchoRep+0xce>
   {
      //Debug message
      TRACE_INFO("Sending Echo-Reply packet (%" PRIuSIZE " bytes)...\r\n", length);
 800eef4:	f7f1 fba4 	bl	8000640 <osSuspendAllTasks>
 800eef8:	4b0d      	ldr	r3, [pc, #52]	; (800ef30 <pppSendEchoRep+0xe0>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	6a3a      	ldr	r2, [r7, #32]
 800ef00:	490c      	ldr	r1, [pc, #48]	; (800ef34 <pppSendEchoRep+0xe4>)
 800ef02:	4618      	mov	r0, r3
 800ef04:	f00c f84a 	bl	801af9c <fiprintf>
 800ef08:	f7f1 fba5 	bl	8000656 <osResumeAllTasks>

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, protocol);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	6998      	ldr	r0, [r3, #24]
 800ef10:	697a      	ldr	r2, [r7, #20]
 800ef12:	88fb      	ldrh	r3, [r7, #6]
 800ef14:	69f9      	ldr	r1, [r7, #28]
 800ef16:	f7fe fc25 	bl	800d764 <pppSendFrame>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	84fb      	strh	r3, [r7, #38]	; 0x26
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800ef1e:	69f8      	ldr	r0, [r7, #28]
 800ef20:	f7f3 fac7 	bl	80024b2 <netBufferFree>
   //Return status code
   return error;
 800ef24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3728      	adds	r7, #40	; 0x28
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	20000058 	.word	0x20000058
 800ef34:	0801d3cc 	.word	0x0801d3cc

0800ef38 <pppAddOption>:
 * @return Error code
 **/

error_t pppAddOption(PppConfigurePacket *packet, uint8_t optionType,
   const void *optionValue, uint8_t optionLen)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b086      	sub	sp, #24
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	607a      	str	r2, [r7, #4]
 800ef42:	461a      	mov	r2, r3
 800ef44:	460b      	mov	r3, r1
 800ef46:	72fb      	strb	r3, [r7, #11]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	72bb      	strb	r3, [r7, #10]
   PppOption *option;

   //Make sure the length is valid
   if(optionLen > (UINT8_MAX - sizeof(PppOption)))
 800ef4c:	7abb      	ldrb	r3, [r7, #10]
 800ef4e:	2bfd      	cmp	r3, #253	; 0xfd
 800ef50:	d901      	bls.n	800ef56 <pppAddOption+0x1e>
      return ERROR_INVALID_LENGTH;
 800ef52:	23eb      	movs	r3, #235	; 0xeb
 800ef54:	e021      	b.n	800ef9a <pppAddOption+0x62>

   //Point to the end of the Configure packet
   option = (PppOption *) ((uint8_t *) packet + packet->length);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	885b      	ldrh	r3, [r3, #2]
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	4413      	add	r3, r2
 800ef62:	617b      	str	r3, [r7, #20]

   //Write specified option at current location
   option->type = optionType;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	7afa      	ldrb	r2, [r7, #11]
 800ef68:	701a      	strb	r2, [r3, #0]
   option->length = optionLen + sizeof(PppOption);
 800ef6a:	7abb      	ldrb	r3, [r7, #10]
 800ef6c:	3302      	adds	r3, #2
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	705a      	strb	r2, [r3, #1]
   //Copy option data
   memcpy(option->data, optionValue, optionLen);
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	3302      	adds	r3, #2
 800ef78:	7aba      	ldrb	r2, [r7, #10]
 800ef7a:	6879      	ldr	r1, [r7, #4]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f00c f8cf 	bl	801b120 <memcpy>

   //Update the length of the Configure packet
   packet->length += optionLen + sizeof(PppOption);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	885b      	ldrh	r3, [r3, #2]
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	7abb      	ldrb	r3, [r7, #10]
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	4413      	add	r3, r2
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	3302      	adds	r3, #2
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	805a      	strh	r2, [r3, #2]

   //Successful processing
   return NO_ERROR;
 800ef98:	2300      	movs	r3, #0
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3718      	adds	r7, #24
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}

0800efa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b082      	sub	sp, #8
 800efa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800efac:	2003      	movs	r0, #3
 800efae:	f000 f95b 	bl	800f268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800efb2:	200f      	movs	r0, #15
 800efb4:	f000 f80e 	bl	800efd4 <HAL_InitTick>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d002      	beq.n	800efc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800efbe:	2301      	movs	r3, #1
 800efc0:	71fb      	strb	r3, [r7, #7]
 800efc2:	e001      	b.n	800efc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800efc4:	f00b f98a 	bl	801a2dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800efc8:	79fb      	ldrb	r3, [r7, #7]
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
	...

0800efd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800efe0:	4b16      	ldr	r3, [pc, #88]	; (800f03c <HAL_InitTick+0x68>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d022      	beq.n	800f02e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800efe8:	4b15      	ldr	r3, [pc, #84]	; (800f040 <HAL_InitTick+0x6c>)
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	4b13      	ldr	r3, [pc, #76]	; (800f03c <HAL_InitTick+0x68>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eff4:	fbb1 f3f3 	udiv	r3, r1, r3
 800eff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800effc:	4618      	mov	r0, r3
 800effe:	f000 f968 	bl	800f2d2 <HAL_SYSTICK_Config>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10f      	bne.n	800f028 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2b0f      	cmp	r3, #15
 800f00c:	d809      	bhi.n	800f022 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f00e:	2200      	movs	r2, #0
 800f010:	6879      	ldr	r1, [r7, #4]
 800f012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f016:	f000 f932 	bl	800f27e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f01a:	4a0a      	ldr	r2, [pc, #40]	; (800f044 <HAL_InitTick+0x70>)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6013      	str	r3, [r2, #0]
 800f020:	e007      	b.n	800f032 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800f022:	2301      	movs	r3, #1
 800f024:	73fb      	strb	r3, [r7, #15]
 800f026:	e004      	b.n	800f032 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800f028:	2301      	movs	r3, #1
 800f02a:	73fb      	strb	r3, [r7, #15]
 800f02c:	e001      	b.n	800f032 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800f02e:	2301      	movs	r3, #1
 800f030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800f032:	7bfb      	ldrb	r3, [r7, #15]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	2000002c 	.word	0x2000002c
 800f040:	20000054 	.word	0x20000054
 800f044:	20000028 	.word	0x20000028

0800f048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f048:	b480      	push	{r7}
 800f04a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f04c:	4b05      	ldr	r3, [pc, #20]	; (800f064 <HAL_IncTick+0x1c>)
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	4b05      	ldr	r3, [pc, #20]	; (800f068 <HAL_IncTick+0x20>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4413      	add	r3, r2
 800f056:	4a03      	ldr	r2, [pc, #12]	; (800f064 <HAL_IncTick+0x1c>)
 800f058:	6013      	str	r3, [r2, #0]
}
 800f05a:	bf00      	nop
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr
 800f064:	20010238 	.word	0x20010238
 800f068:	2000002c 	.word	0x2000002c

0800f06c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f06c:	b480      	push	{r7}
 800f06e:	af00      	add	r7, sp, #0
  return uwTick;
 800f070:	4b03      	ldr	r3, [pc, #12]	; (800f080 <HAL_GetTick+0x14>)
 800f072:	681b      	ldr	r3, [r3, #0]
}
 800f074:	4618      	mov	r0, r3
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	20010238 	.word	0x20010238

0800f084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f08c:	f7ff ffee 	bl	800f06c <HAL_GetTick>
 800f090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f09c:	d004      	beq.n	800f0a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800f09e:	4b09      	ldr	r3, [pc, #36]	; (800f0c4 <HAL_Delay+0x40>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f0a8:	bf00      	nop
 800f0aa:	f7ff ffdf 	bl	800f06c <HAL_GetTick>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d8f7      	bhi.n	800f0aa <HAL_Delay+0x26>
  {
  }
}
 800f0ba:	bf00      	nop
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	2000002c 	.word	0x2000002c

0800f0c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b085      	sub	sp, #20
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f003 0307 	and.w	r3, r3, #7
 800f0d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f0d8:	4b0c      	ldr	r3, [pc, #48]	; (800f10c <__NVIC_SetPriorityGrouping+0x44>)
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f0de:	68ba      	ldr	r2, [r7, #8]
 800f0e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f0e4:	4013      	ands	r3, r2
 800f0e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f0f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f0f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f0f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f0fa:	4a04      	ldr	r2, [pc, #16]	; (800f10c <__NVIC_SetPriorityGrouping+0x44>)
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	60d3      	str	r3, [r2, #12]
}
 800f100:	bf00      	nop
 800f102:	3714      	adds	r7, #20
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	e000ed00 	.word	0xe000ed00

0800f110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800f110:	b480      	push	{r7}
 800f112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f114:	4b04      	ldr	r3, [pc, #16]	; (800f128 <__NVIC_GetPriorityGrouping+0x18>)
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	0a1b      	lsrs	r3, r3, #8
 800f11a:	f003 0307 	and.w	r3, r3, #7
}
 800f11e:	4618      	mov	r0, r3
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr
 800f128:	e000ed00 	.word	0xe000ed00

0800f12c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	db0b      	blt.n	800f156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f13e:	79fb      	ldrb	r3, [r7, #7]
 800f140:	f003 021f 	and.w	r2, r3, #31
 800f144:	4907      	ldr	r1, [pc, #28]	; (800f164 <__NVIC_EnableIRQ+0x38>)
 800f146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f14a:	095b      	lsrs	r3, r3, #5
 800f14c:	2001      	movs	r0, #1
 800f14e:	fa00 f202 	lsl.w	r2, r0, r2
 800f152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800f156:	bf00      	nop
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	e000e100 	.word	0xe000e100

0800f168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	4603      	mov	r3, r0
 800f170:	6039      	str	r1, [r7, #0]
 800f172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	db0a      	blt.n	800f192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	b2da      	uxtb	r2, r3
 800f180:	490c      	ldr	r1, [pc, #48]	; (800f1b4 <__NVIC_SetPriority+0x4c>)
 800f182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f186:	0112      	lsls	r2, r2, #4
 800f188:	b2d2      	uxtb	r2, r2
 800f18a:	440b      	add	r3, r1
 800f18c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f190:	e00a      	b.n	800f1a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	b2da      	uxtb	r2, r3
 800f196:	4908      	ldr	r1, [pc, #32]	; (800f1b8 <__NVIC_SetPriority+0x50>)
 800f198:	79fb      	ldrb	r3, [r7, #7]
 800f19a:	f003 030f 	and.w	r3, r3, #15
 800f19e:	3b04      	subs	r3, #4
 800f1a0:	0112      	lsls	r2, r2, #4
 800f1a2:	b2d2      	uxtb	r2, r2
 800f1a4:	440b      	add	r3, r1
 800f1a6:	761a      	strb	r2, [r3, #24]
}
 800f1a8:	bf00      	nop
 800f1aa:	370c      	adds	r7, #12
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr
 800f1b4:	e000e100 	.word	0xe000e100
 800f1b8:	e000ed00 	.word	0xe000ed00

0800f1bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b089      	sub	sp, #36	; 0x24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f003 0307 	and.w	r3, r3, #7
 800f1ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	f1c3 0307 	rsb	r3, r3, #7
 800f1d6:	2b04      	cmp	r3, #4
 800f1d8:	bf28      	it	cs
 800f1da:	2304      	movcs	r3, #4
 800f1dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	3304      	adds	r3, #4
 800f1e2:	2b06      	cmp	r3, #6
 800f1e4:	d902      	bls.n	800f1ec <NVIC_EncodePriority+0x30>
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	3b03      	subs	r3, #3
 800f1ea:	e000      	b.n	800f1ee <NVIC_EncodePriority+0x32>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f1f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f1fa:	43da      	mvns	r2, r3
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	401a      	ands	r2, r3
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	fa01 f303 	lsl.w	r3, r1, r3
 800f20e:	43d9      	mvns	r1, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f214:	4313      	orrs	r3, r2
         );
}
 800f216:	4618      	mov	r0, r3
 800f218:	3724      	adds	r7, #36	; 0x24
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
	...

0800f224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3b01      	subs	r3, #1
 800f230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f234:	d301      	bcc.n	800f23a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f236:	2301      	movs	r3, #1
 800f238:	e00f      	b.n	800f25a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f23a:	4a0a      	ldr	r2, [pc, #40]	; (800f264 <SysTick_Config+0x40>)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	3b01      	subs	r3, #1
 800f240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f242:	210f      	movs	r1, #15
 800f244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f248:	f7ff ff8e 	bl	800f168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f24c:	4b05      	ldr	r3, [pc, #20]	; (800f264 <SysTick_Config+0x40>)
 800f24e:	2200      	movs	r2, #0
 800f250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f252:	4b04      	ldr	r3, [pc, #16]	; (800f264 <SysTick_Config+0x40>)
 800f254:	2207      	movs	r2, #7
 800f256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f258:	2300      	movs	r3, #0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3708      	adds	r7, #8
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	e000e010 	.word	0xe000e010

0800f268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7ff ff29 	bl	800f0c8 <__NVIC_SetPriorityGrouping>
}
 800f276:	bf00      	nop
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b086      	sub	sp, #24
 800f282:	af00      	add	r7, sp, #0
 800f284:	4603      	mov	r3, r0
 800f286:	60b9      	str	r1, [r7, #8]
 800f288:	607a      	str	r2, [r7, #4]
 800f28a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800f28c:	2300      	movs	r3, #0
 800f28e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800f290:	f7ff ff3e 	bl	800f110 <__NVIC_GetPriorityGrouping>
 800f294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f296:	687a      	ldr	r2, [r7, #4]
 800f298:	68b9      	ldr	r1, [r7, #8]
 800f29a:	6978      	ldr	r0, [r7, #20]
 800f29c:	f7ff ff8e 	bl	800f1bc <NVIC_EncodePriority>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7ff ff5d 	bl	800f168 <__NVIC_SetPriority>
}
 800f2ae:	bf00      	nop
 800f2b0:	3718      	adds	r7, #24
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	b082      	sub	sp, #8
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	4603      	mov	r3, r0
 800f2be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f2c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7ff ff31 	bl	800f12c <__NVIC_EnableIRQ>
}
 800f2ca:	bf00      	nop
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b082      	sub	sp, #8
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f7ff ffa2 	bl	800f224 <SysTick_Config>
 800f2e0:	4603      	mov	r3, r0
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
	...

0800f2ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b087      	sub	sp, #28
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f2fa:	e166      	b.n	800f5ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	2101      	movs	r1, #1
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	fa01 f303 	lsl.w	r3, r1, r3
 800f308:	4013      	ands	r3, r2
 800f30a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f000 8158 	beq.w	800f5c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d003      	beq.n	800f324 <HAL_GPIO_Init+0x38>
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	2b12      	cmp	r3, #18
 800f322:	d123      	bne.n	800f36c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	08da      	lsrs	r2, r3, #3
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	3208      	adds	r2, #8
 800f32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f330:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	f003 0307 	and.w	r3, r3, #7
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	220f      	movs	r2, #15
 800f33c:	fa02 f303 	lsl.w	r3, r2, r3
 800f340:	43db      	mvns	r3, r3
 800f342:	693a      	ldr	r2, [r7, #16]
 800f344:	4013      	ands	r3, r2
 800f346:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	691a      	ldr	r2, [r3, #16]
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	f003 0307 	and.w	r3, r3, #7
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	fa02 f303 	lsl.w	r3, r2, r3
 800f358:	693a      	ldr	r2, [r7, #16]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	08da      	lsrs	r2, r3, #3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	3208      	adds	r2, #8
 800f366:	6939      	ldr	r1, [r7, #16]
 800f368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	2203      	movs	r2, #3
 800f378:	fa02 f303 	lsl.w	r3, r2, r3
 800f37c:	43db      	mvns	r3, r3
 800f37e:	693a      	ldr	r2, [r7, #16]
 800f380:	4013      	ands	r3, r2
 800f382:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	f003 0203 	and.w	r2, r3, #3
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	005b      	lsls	r3, r3, #1
 800f390:	fa02 f303 	lsl.w	r3, r2, r3
 800f394:	693a      	ldr	r2, [r7, #16]
 800f396:	4313      	orrs	r3, r2
 800f398:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	693a      	ldr	r2, [r7, #16]
 800f39e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d00b      	beq.n	800f3c0 <HAL_GPIO_Init+0xd4>
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d007      	beq.n	800f3c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f3b4:	2b11      	cmp	r3, #17
 800f3b6:	d003      	beq.n	800f3c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	2b12      	cmp	r3, #18
 800f3be:	d130      	bne.n	800f422 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	005b      	lsls	r3, r3, #1
 800f3ca:	2203      	movs	r2, #3
 800f3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f3d0:	43db      	mvns	r3, r3
 800f3d2:	693a      	ldr	r2, [r7, #16]
 800f3d4:	4013      	ands	r3, r2
 800f3d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	68da      	ldr	r2, [r3, #12]
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	005b      	lsls	r3, r3, #1
 800f3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800f3e4:	693a      	ldr	r2, [r7, #16]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	693a      	ldr	r2, [r7, #16]
 800f3ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f3fe:	43db      	mvns	r3, r3
 800f400:	693a      	ldr	r2, [r7, #16]
 800f402:	4013      	ands	r3, r2
 800f404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	091b      	lsrs	r3, r3, #4
 800f40c:	f003 0201 	and.w	r2, r3, #1
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	fa02 f303 	lsl.w	r3, r2, r3
 800f416:	693a      	ldr	r2, [r7, #16]
 800f418:	4313      	orrs	r3, r2
 800f41a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	693a      	ldr	r2, [r7, #16]
 800f420:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	005b      	lsls	r3, r3, #1
 800f42c:	2203      	movs	r2, #3
 800f42e:	fa02 f303 	lsl.w	r3, r2, r3
 800f432:	43db      	mvns	r3, r3
 800f434:	693a      	ldr	r2, [r7, #16]
 800f436:	4013      	ands	r3, r2
 800f438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	689a      	ldr	r2, [r3, #8]
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	005b      	lsls	r3, r3, #1
 800f442:	fa02 f303 	lsl.w	r3, r2, r3
 800f446:	693a      	ldr	r2, [r7, #16]
 800f448:	4313      	orrs	r3, r2
 800f44a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	693a      	ldr	r2, [r7, #16]
 800f450:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	f000 80b2 	beq.w	800f5c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f460:	4b61      	ldr	r3, [pc, #388]	; (800f5e8 <HAL_GPIO_Init+0x2fc>)
 800f462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f464:	4a60      	ldr	r2, [pc, #384]	; (800f5e8 <HAL_GPIO_Init+0x2fc>)
 800f466:	f043 0301 	orr.w	r3, r3, #1
 800f46a:	6613      	str	r3, [r2, #96]	; 0x60
 800f46c:	4b5e      	ldr	r3, [pc, #376]	; (800f5e8 <HAL_GPIO_Init+0x2fc>)
 800f46e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f470:	f003 0301 	and.w	r3, r3, #1
 800f474:	60bb      	str	r3, [r7, #8]
 800f476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800f478:	4a5c      	ldr	r2, [pc, #368]	; (800f5ec <HAL_GPIO_Init+0x300>)
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	089b      	lsrs	r3, r3, #2
 800f47e:	3302      	adds	r3, #2
 800f480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	f003 0303 	and.w	r3, r3, #3
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	220f      	movs	r2, #15
 800f490:	fa02 f303 	lsl.w	r3, r2, r3
 800f494:	43db      	mvns	r3, r3
 800f496:	693a      	ldr	r2, [r7, #16]
 800f498:	4013      	ands	r3, r2
 800f49a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800f4a2:	d02b      	beq.n	800f4fc <HAL_GPIO_Init+0x210>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a52      	ldr	r2, [pc, #328]	; (800f5f0 <HAL_GPIO_Init+0x304>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d025      	beq.n	800f4f8 <HAL_GPIO_Init+0x20c>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a51      	ldr	r2, [pc, #324]	; (800f5f4 <HAL_GPIO_Init+0x308>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d01f      	beq.n	800f4f4 <HAL_GPIO_Init+0x208>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a50      	ldr	r2, [pc, #320]	; (800f5f8 <HAL_GPIO_Init+0x30c>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d019      	beq.n	800f4f0 <HAL_GPIO_Init+0x204>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4a4f      	ldr	r2, [pc, #316]	; (800f5fc <HAL_GPIO_Init+0x310>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d013      	beq.n	800f4ec <HAL_GPIO_Init+0x200>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	4a4e      	ldr	r2, [pc, #312]	; (800f600 <HAL_GPIO_Init+0x314>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d00d      	beq.n	800f4e8 <HAL_GPIO_Init+0x1fc>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	4a4d      	ldr	r2, [pc, #308]	; (800f604 <HAL_GPIO_Init+0x318>)
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d007      	beq.n	800f4e4 <HAL_GPIO_Init+0x1f8>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4a4c      	ldr	r2, [pc, #304]	; (800f608 <HAL_GPIO_Init+0x31c>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d101      	bne.n	800f4e0 <HAL_GPIO_Init+0x1f4>
 800f4dc:	2307      	movs	r3, #7
 800f4de:	e00e      	b.n	800f4fe <HAL_GPIO_Init+0x212>
 800f4e0:	2308      	movs	r3, #8
 800f4e2:	e00c      	b.n	800f4fe <HAL_GPIO_Init+0x212>
 800f4e4:	2306      	movs	r3, #6
 800f4e6:	e00a      	b.n	800f4fe <HAL_GPIO_Init+0x212>
 800f4e8:	2305      	movs	r3, #5
 800f4ea:	e008      	b.n	800f4fe <HAL_GPIO_Init+0x212>
 800f4ec:	2304      	movs	r3, #4
 800f4ee:	e006      	b.n	800f4fe <HAL_GPIO_Init+0x212>
 800f4f0:	2303      	movs	r3, #3
 800f4f2:	e004      	b.n	800f4fe <HAL_GPIO_Init+0x212>
 800f4f4:	2302      	movs	r3, #2
 800f4f6:	e002      	b.n	800f4fe <HAL_GPIO_Init+0x212>
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e000      	b.n	800f4fe <HAL_GPIO_Init+0x212>
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	697a      	ldr	r2, [r7, #20]
 800f500:	f002 0203 	and.w	r2, r2, #3
 800f504:	0092      	lsls	r2, r2, #2
 800f506:	4093      	lsls	r3, r2
 800f508:	693a      	ldr	r2, [r7, #16]
 800f50a:	4313      	orrs	r3, r2
 800f50c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800f50e:	4937      	ldr	r1, [pc, #220]	; (800f5ec <HAL_GPIO_Init+0x300>)
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	089b      	lsrs	r3, r3, #2
 800f514:	3302      	adds	r3, #2
 800f516:	693a      	ldr	r2, [r7, #16]
 800f518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800f51c:	4b3b      	ldr	r3, [pc, #236]	; (800f60c <HAL_GPIO_Init+0x320>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	43db      	mvns	r3, r3
 800f526:	693a      	ldr	r2, [r7, #16]
 800f528:	4013      	ands	r3, r2
 800f52a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f534:	2b00      	cmp	r3, #0
 800f536:	d003      	beq.n	800f540 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800f538:	693a      	ldr	r2, [r7, #16]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	4313      	orrs	r3, r2
 800f53e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f540:	4a32      	ldr	r2, [pc, #200]	; (800f60c <HAL_GPIO_Init+0x320>)
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800f546:	4b31      	ldr	r3, [pc, #196]	; (800f60c <HAL_GPIO_Init+0x320>)
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	43db      	mvns	r3, r3
 800f550:	693a      	ldr	r2, [r7, #16]
 800f552:	4013      	ands	r3, r2
 800f554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d003      	beq.n	800f56a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800f562:	693a      	ldr	r2, [r7, #16]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	4313      	orrs	r3, r2
 800f568:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f56a:	4a28      	ldr	r2, [pc, #160]	; (800f60c <HAL_GPIO_Init+0x320>)
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f570:	4b26      	ldr	r3, [pc, #152]	; (800f60c <HAL_GPIO_Init+0x320>)
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	43db      	mvns	r3, r3
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	4013      	ands	r3, r2
 800f57e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d003      	beq.n	800f594 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	4313      	orrs	r3, r2
 800f592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800f594:	4a1d      	ldr	r2, [pc, #116]	; (800f60c <HAL_GPIO_Init+0x320>)
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800f59a:	4b1c      	ldr	r3, [pc, #112]	; (800f60c <HAL_GPIO_Init+0x320>)
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	43db      	mvns	r3, r3
 800f5a4:	693a      	ldr	r2, [r7, #16]
 800f5a6:	4013      	ands	r3, r2
 800f5a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d003      	beq.n	800f5be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800f5b6:	693a      	ldr	r2, [r7, #16]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800f5be:	4a13      	ldr	r2, [pc, #76]	; (800f60c <HAL_GPIO_Init+0x320>)
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f47f ae91 	bne.w	800f2fc <HAL_GPIO_Init+0x10>
  }
}
 800f5da:	bf00      	nop
 800f5dc:	371c      	adds	r7, #28
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	40021000 	.word	0x40021000
 800f5ec:	40010000 	.word	0x40010000
 800f5f0:	48000400 	.word	0x48000400
 800f5f4:	48000800 	.word	0x48000800
 800f5f8:	48000c00 	.word	0x48000c00
 800f5fc:	48001000 	.word	0x48001000
 800f600:	48001400 	.word	0x48001400
 800f604:	48001800 	.word	0x48001800
 800f608:	48001c00 	.word	0x48001c00
 800f60c:	40010400 	.word	0x40010400

0800f610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	460b      	mov	r3, r1
 800f61a:	807b      	strh	r3, [r7, #2]
 800f61c:	4613      	mov	r3, r2
 800f61e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f620:	787b      	ldrb	r3, [r7, #1]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d003      	beq.n	800f62e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f626:	887a      	ldrh	r2, [r7, #2]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f62c:	e002      	b.n	800f634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f62e:	887a      	ldrh	r2, [r7, #2]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f634:	bf00      	nop
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	695a      	ldr	r2, [r3, #20]
 800f650:	887b      	ldrh	r3, [r7, #2]
 800f652:	4013      	ands	r3, r2
 800f654:	2b00      	cmp	r3, #0
 800f656:	d003      	beq.n	800f660 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f658:	887a      	ldrh	r2, [r7, #2]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800f65e:	e002      	b.n	800f666 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f660:	887a      	ldrh	r2, [r7, #2]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	619a      	str	r2, [r3, #24]
}
 800f666:	bf00      	nop
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr

0800f672 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800f672:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f674:	b08f      	sub	sp, #60	; 0x3c
 800f676:	af0a      	add	r7, sp, #40	; 0x28
 800f678:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d101      	bne.n	800f684 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800f680:	2301      	movs	r3, #1
 800f682:	e054      	b.n	800f72e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800f690:	b2db      	uxtb	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	d106      	bne.n	800f6a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f00b f9ac 	bl	801a9fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2203      	movs	r2, #3
 800f6a8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d102      	bne.n	800f6be <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f003 fc60 	bl	8012f88 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	603b      	str	r3, [r7, #0]
 800f6ce:	687e      	ldr	r6, [r7, #4]
 800f6d0:	466d      	mov	r5, sp
 800f6d2:	f106 0410 	add.w	r4, r6, #16
 800f6d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f6d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f6da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f6dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f6de:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f6e2:	e885 0003 	stmia.w	r5, {r0, r1}
 800f6e6:	1d33      	adds	r3, r6, #4
 800f6e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f6ea:	6838      	ldr	r0, [r7, #0]
 800f6ec:	f003 fbe9 	bl	8012ec2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2101      	movs	r1, #1
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f003 fc57 	bl	8012faa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	603b      	str	r3, [r7, #0]
 800f702:	687e      	ldr	r6, [r7, #4]
 800f704:	466d      	mov	r5, sp
 800f706:	f106 0410 	add.w	r4, r6, #16
 800f70a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f70c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f70e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f712:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f716:	e885 0003 	stmia.w	r5, {r0, r1}
 800f71a:	1d33      	adds	r3, r6, #4
 800f71c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f71e:	6838      	ldr	r0, [r7, #0]
 800f720:	f003 fd66 	bl	80131f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f736 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800f736:	b590      	push	{r4, r7, lr}
 800f738:	b089      	sub	sp, #36	; 0x24
 800f73a:	af04      	add	r7, sp, #16
 800f73c:	6078      	str	r0, [r7, #4]
 800f73e:	4608      	mov	r0, r1
 800f740:	4611      	mov	r1, r2
 800f742:	461a      	mov	r2, r3
 800f744:	4603      	mov	r3, r0
 800f746:	70fb      	strb	r3, [r7, #3]
 800f748:	460b      	mov	r3, r1
 800f74a:	70bb      	strb	r3, [r7, #2]
 800f74c:	4613      	mov	r3, r2
 800f74e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800f756:	2b01      	cmp	r3, #1
 800f758:	d101      	bne.n	800f75e <HAL_HCD_HC_Init+0x28>
 800f75a:	2302      	movs	r3, #2
 800f75c:	e07f      	b.n	800f85e <HAL_HCD_HC_Init+0x128>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2201      	movs	r2, #1
 800f762:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800f766:	78fa      	ldrb	r2, [r7, #3]
 800f768:	6879      	ldr	r1, [r7, #4]
 800f76a:	4613      	mov	r3, r2
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	4413      	add	r3, r2
 800f770:	00db      	lsls	r3, r3, #3
 800f772:	440b      	add	r3, r1
 800f774:	333d      	adds	r3, #61	; 0x3d
 800f776:	2200      	movs	r2, #0
 800f778:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800f77a:	78fa      	ldrb	r2, [r7, #3]
 800f77c:	6879      	ldr	r1, [r7, #4]
 800f77e:	4613      	mov	r3, r2
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	4413      	add	r3, r2
 800f784:	00db      	lsls	r3, r3, #3
 800f786:	440b      	add	r3, r1
 800f788:	3338      	adds	r3, #56	; 0x38
 800f78a:	787a      	ldrb	r2, [r7, #1]
 800f78c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800f78e:	78fa      	ldrb	r2, [r7, #3]
 800f790:	6879      	ldr	r1, [r7, #4]
 800f792:	4613      	mov	r3, r2
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	4413      	add	r3, r2
 800f798:	00db      	lsls	r3, r3, #3
 800f79a:	440b      	add	r3, r1
 800f79c:	3340      	adds	r3, #64	; 0x40
 800f79e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f7a0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800f7a2:	78fa      	ldrb	r2, [r7, #3]
 800f7a4:	6879      	ldr	r1, [r7, #4]
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	4413      	add	r3, r2
 800f7ac:	00db      	lsls	r3, r3, #3
 800f7ae:	440b      	add	r3, r1
 800f7b0:	3339      	adds	r3, #57	; 0x39
 800f7b2:	78fa      	ldrb	r2, [r7, #3]
 800f7b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800f7b6:	78fa      	ldrb	r2, [r7, #3]
 800f7b8:	6879      	ldr	r1, [r7, #4]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	4413      	add	r3, r2
 800f7c0:	00db      	lsls	r3, r3, #3
 800f7c2:	440b      	add	r3, r1
 800f7c4:	333f      	adds	r3, #63	; 0x3f
 800f7c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f7ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800f7cc:	78fa      	ldrb	r2, [r7, #3]
 800f7ce:	78bb      	ldrb	r3, [r7, #2]
 800f7d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7d4:	b2d8      	uxtb	r0, r3
 800f7d6:	6879      	ldr	r1, [r7, #4]
 800f7d8:	4613      	mov	r3, r2
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	4413      	add	r3, r2
 800f7de:	00db      	lsls	r3, r3, #3
 800f7e0:	440b      	add	r3, r1
 800f7e2:	333a      	adds	r3, #58	; 0x3a
 800f7e4:	4602      	mov	r2, r0
 800f7e6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800f7e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	da0a      	bge.n	800f806 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800f7f0:	78fa      	ldrb	r2, [r7, #3]
 800f7f2:	6879      	ldr	r1, [r7, #4]
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	4413      	add	r3, r2
 800f7fa:	00db      	lsls	r3, r3, #3
 800f7fc:	440b      	add	r3, r1
 800f7fe:	333b      	adds	r3, #59	; 0x3b
 800f800:	2201      	movs	r2, #1
 800f802:	701a      	strb	r2, [r3, #0]
 800f804:	e009      	b.n	800f81a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800f806:	78fa      	ldrb	r2, [r7, #3]
 800f808:	6879      	ldr	r1, [r7, #4]
 800f80a:	4613      	mov	r3, r2
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	4413      	add	r3, r2
 800f810:	00db      	lsls	r3, r3, #3
 800f812:	440b      	add	r3, r1
 800f814:	333b      	adds	r3, #59	; 0x3b
 800f816:	2200      	movs	r2, #0
 800f818:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800f81a:	78fa      	ldrb	r2, [r7, #3]
 800f81c:	6879      	ldr	r1, [r7, #4]
 800f81e:	4613      	mov	r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	00db      	lsls	r3, r3, #3
 800f826:	440b      	add	r3, r1
 800f828:	333c      	adds	r3, #60	; 0x3c
 800f82a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f82e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6818      	ldr	r0, [r3, #0]
 800f834:	787c      	ldrb	r4, [r7, #1]
 800f836:	78ba      	ldrb	r2, [r7, #2]
 800f838:	78f9      	ldrb	r1, [r7, #3]
 800f83a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f83c:	9302      	str	r3, [sp, #8]
 800f83e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f842:	9301      	str	r3, [sp, #4]
 800f844:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	4623      	mov	r3, r4
 800f84c:	f003 fe14 	bl	8013478 <USB_HC_Init>
 800f850:	4603      	mov	r3, r0
 800f852:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800f85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3714      	adds	r7, #20
 800f862:	46bd      	mov	sp, r7
 800f864:	bd90      	pop	{r4, r7, pc}

0800f866 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800f866:	b580      	push	{r7, lr}
 800f868:	b084      	sub	sp, #16
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
 800f86e:	460b      	mov	r3, r1
 800f870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800f872:	2300      	movs	r3, #0
 800f874:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d101      	bne.n	800f884 <HAL_HCD_HC_Halt+0x1e>
 800f880:	2302      	movs	r3, #2
 800f882:	e00f      	b.n	800f8a4 <HAL_HCD_HC_Halt+0x3e>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	78fa      	ldrb	r2, [r7, #3]
 800f892:	4611      	mov	r1, r2
 800f894:	4618      	mov	r0, r3
 800f896:	f003 fff2 	bl	801387e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800f8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	4608      	mov	r0, r1
 800f8b6:	4611      	mov	r1, r2
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	70fb      	strb	r3, [r7, #3]
 800f8be:	460b      	mov	r3, r1
 800f8c0:	70bb      	strb	r3, [r7, #2]
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800f8c6:	78fa      	ldrb	r2, [r7, #3]
 800f8c8:	6879      	ldr	r1, [r7, #4]
 800f8ca:	4613      	mov	r3, r2
 800f8cc:	009b      	lsls	r3, r3, #2
 800f8ce:	4413      	add	r3, r2
 800f8d0:	00db      	lsls	r3, r3, #3
 800f8d2:	440b      	add	r3, r1
 800f8d4:	333b      	adds	r3, #59	; 0x3b
 800f8d6:	78ba      	ldrb	r2, [r7, #2]
 800f8d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800f8da:	78fa      	ldrb	r2, [r7, #3]
 800f8dc:	6879      	ldr	r1, [r7, #4]
 800f8de:	4613      	mov	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	4413      	add	r3, r2
 800f8e4:	00db      	lsls	r3, r3, #3
 800f8e6:	440b      	add	r3, r1
 800f8e8:	333f      	adds	r3, #63	; 0x3f
 800f8ea:	787a      	ldrb	r2, [r7, #1]
 800f8ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800f8ee:	7c3b      	ldrb	r3, [r7, #16]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d10a      	bne.n	800f90a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800f8f4:	78fa      	ldrb	r2, [r7, #3]
 800f8f6:	6879      	ldr	r1, [r7, #4]
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	4413      	add	r3, r2
 800f8fe:	00db      	lsls	r3, r3, #3
 800f900:	440b      	add	r3, r1
 800f902:	3342      	adds	r3, #66	; 0x42
 800f904:	2203      	movs	r2, #3
 800f906:	701a      	strb	r2, [r3, #0]
 800f908:	e009      	b.n	800f91e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800f90a:	78fa      	ldrb	r2, [r7, #3]
 800f90c:	6879      	ldr	r1, [r7, #4]
 800f90e:	4613      	mov	r3, r2
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	4413      	add	r3, r2
 800f914:	00db      	lsls	r3, r3, #3
 800f916:	440b      	add	r3, r1
 800f918:	3342      	adds	r3, #66	; 0x42
 800f91a:	2202      	movs	r2, #2
 800f91c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800f91e:	787b      	ldrb	r3, [r7, #1]
 800f920:	2b03      	cmp	r3, #3
 800f922:	f200 80d6 	bhi.w	800fad2 <HAL_HCD_HC_SubmitRequest+0x226>
 800f926:	a201      	add	r2, pc, #4	; (adr r2, 800f92c <HAL_HCD_HC_SubmitRequest+0x80>)
 800f928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f92c:	0800f93d 	.word	0x0800f93d
 800f930:	0800fabd 	.word	0x0800fabd
 800f934:	0800f9a9 	.word	0x0800f9a9
 800f938:	0800fa33 	.word	0x0800fa33
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800f93c:	7c3b      	ldrb	r3, [r7, #16]
 800f93e:	2b01      	cmp	r3, #1
 800f940:	f040 80c9 	bne.w	800fad6 <HAL_HCD_HC_SubmitRequest+0x22a>
 800f944:	78bb      	ldrb	r3, [r7, #2]
 800f946:	2b00      	cmp	r3, #0
 800f948:	f040 80c5 	bne.w	800fad6 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 800f94c:	8b3b      	ldrh	r3, [r7, #24]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d109      	bne.n	800f966 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800f952:	78fa      	ldrb	r2, [r7, #3]
 800f954:	6879      	ldr	r1, [r7, #4]
 800f956:	4613      	mov	r3, r2
 800f958:	009b      	lsls	r3, r3, #2
 800f95a:	4413      	add	r3, r2
 800f95c:	00db      	lsls	r3, r3, #3
 800f95e:	440b      	add	r3, r1
 800f960:	3351      	adds	r3, #81	; 0x51
 800f962:	2201      	movs	r2, #1
 800f964:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800f966:	78fa      	ldrb	r2, [r7, #3]
 800f968:	6879      	ldr	r1, [r7, #4]
 800f96a:	4613      	mov	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	4413      	add	r3, r2
 800f970:	00db      	lsls	r3, r3, #3
 800f972:	440b      	add	r3, r1
 800f974:	3351      	adds	r3, #81	; 0x51
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d10a      	bne.n	800f992 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800f97c:	78fa      	ldrb	r2, [r7, #3]
 800f97e:	6879      	ldr	r1, [r7, #4]
 800f980:	4613      	mov	r3, r2
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	4413      	add	r3, r2
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	440b      	add	r3, r1
 800f98a:	3342      	adds	r3, #66	; 0x42
 800f98c:	2200      	movs	r2, #0
 800f98e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800f990:	e0a1      	b.n	800fad6 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800f992:	78fa      	ldrb	r2, [r7, #3]
 800f994:	6879      	ldr	r1, [r7, #4]
 800f996:	4613      	mov	r3, r2
 800f998:	009b      	lsls	r3, r3, #2
 800f99a:	4413      	add	r3, r2
 800f99c:	00db      	lsls	r3, r3, #3
 800f99e:	440b      	add	r3, r1
 800f9a0:	3342      	adds	r3, #66	; 0x42
 800f9a2:	2202      	movs	r2, #2
 800f9a4:	701a      	strb	r2, [r3, #0]
      break;
 800f9a6:	e096      	b.n	800fad6 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800f9a8:	78bb      	ldrb	r3, [r7, #2]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d120      	bne.n	800f9f0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800f9ae:	78fa      	ldrb	r2, [r7, #3]
 800f9b0:	6879      	ldr	r1, [r7, #4]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	4413      	add	r3, r2
 800f9b8:	00db      	lsls	r3, r3, #3
 800f9ba:	440b      	add	r3, r1
 800f9bc:	3351      	adds	r3, #81	; 0x51
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d10a      	bne.n	800f9da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800f9c4:	78fa      	ldrb	r2, [r7, #3]
 800f9c6:	6879      	ldr	r1, [r7, #4]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	4413      	add	r3, r2
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	440b      	add	r3, r1
 800f9d2:	3342      	adds	r3, #66	; 0x42
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800f9d8:	e07e      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800f9da:	78fa      	ldrb	r2, [r7, #3]
 800f9dc:	6879      	ldr	r1, [r7, #4]
 800f9de:	4613      	mov	r3, r2
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	4413      	add	r3, r2
 800f9e4:	00db      	lsls	r3, r3, #3
 800f9e6:	440b      	add	r3, r1
 800f9e8:	3342      	adds	r3, #66	; 0x42
 800f9ea:	2202      	movs	r2, #2
 800f9ec:	701a      	strb	r2, [r3, #0]
      break;
 800f9ee:	e073      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800f9f0:	78fa      	ldrb	r2, [r7, #3]
 800f9f2:	6879      	ldr	r1, [r7, #4]
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	4413      	add	r3, r2
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	440b      	add	r3, r1
 800f9fe:	3350      	adds	r3, #80	; 0x50
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d10a      	bne.n	800fa1c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800fa06:	78fa      	ldrb	r2, [r7, #3]
 800fa08:	6879      	ldr	r1, [r7, #4]
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	4413      	add	r3, r2
 800fa10:	00db      	lsls	r3, r3, #3
 800fa12:	440b      	add	r3, r1
 800fa14:	3342      	adds	r3, #66	; 0x42
 800fa16:	2200      	movs	r2, #0
 800fa18:	701a      	strb	r2, [r3, #0]
      break;
 800fa1a:	e05d      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800fa1c:	78fa      	ldrb	r2, [r7, #3]
 800fa1e:	6879      	ldr	r1, [r7, #4]
 800fa20:	4613      	mov	r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	4413      	add	r3, r2
 800fa26:	00db      	lsls	r3, r3, #3
 800fa28:	440b      	add	r3, r1
 800fa2a:	3342      	adds	r3, #66	; 0x42
 800fa2c:	2202      	movs	r2, #2
 800fa2e:	701a      	strb	r2, [r3, #0]
      break;
 800fa30:	e052      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800fa32:	78bb      	ldrb	r3, [r7, #2]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d120      	bne.n	800fa7a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800fa38:	78fa      	ldrb	r2, [r7, #3]
 800fa3a:	6879      	ldr	r1, [r7, #4]
 800fa3c:	4613      	mov	r3, r2
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	4413      	add	r3, r2
 800fa42:	00db      	lsls	r3, r3, #3
 800fa44:	440b      	add	r3, r1
 800fa46:	3351      	adds	r3, #81	; 0x51
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10a      	bne.n	800fa64 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800fa4e:	78fa      	ldrb	r2, [r7, #3]
 800fa50:	6879      	ldr	r1, [r7, #4]
 800fa52:	4613      	mov	r3, r2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	4413      	add	r3, r2
 800fa58:	00db      	lsls	r3, r3, #3
 800fa5a:	440b      	add	r3, r1
 800fa5c:	3342      	adds	r3, #66	; 0x42
 800fa5e:	2200      	movs	r2, #0
 800fa60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800fa62:	e039      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800fa64:	78fa      	ldrb	r2, [r7, #3]
 800fa66:	6879      	ldr	r1, [r7, #4]
 800fa68:	4613      	mov	r3, r2
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	4413      	add	r3, r2
 800fa6e:	00db      	lsls	r3, r3, #3
 800fa70:	440b      	add	r3, r1
 800fa72:	3342      	adds	r3, #66	; 0x42
 800fa74:	2202      	movs	r2, #2
 800fa76:	701a      	strb	r2, [r3, #0]
      break;
 800fa78:	e02e      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800fa7a:	78fa      	ldrb	r2, [r7, #3]
 800fa7c:	6879      	ldr	r1, [r7, #4]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	009b      	lsls	r3, r3, #2
 800fa82:	4413      	add	r3, r2
 800fa84:	00db      	lsls	r3, r3, #3
 800fa86:	440b      	add	r3, r1
 800fa88:	3350      	adds	r3, #80	; 0x50
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d10a      	bne.n	800faa6 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800fa90:	78fa      	ldrb	r2, [r7, #3]
 800fa92:	6879      	ldr	r1, [r7, #4]
 800fa94:	4613      	mov	r3, r2
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	4413      	add	r3, r2
 800fa9a:	00db      	lsls	r3, r3, #3
 800fa9c:	440b      	add	r3, r1
 800fa9e:	3342      	adds	r3, #66	; 0x42
 800faa0:	2200      	movs	r2, #0
 800faa2:	701a      	strb	r2, [r3, #0]
      break;
 800faa4:	e018      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800faa6:	78fa      	ldrb	r2, [r7, #3]
 800faa8:	6879      	ldr	r1, [r7, #4]
 800faaa:	4613      	mov	r3, r2
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	00db      	lsls	r3, r3, #3
 800fab2:	440b      	add	r3, r1
 800fab4:	3342      	adds	r3, #66	; 0x42
 800fab6:	2202      	movs	r2, #2
 800fab8:	701a      	strb	r2, [r3, #0]
      break;
 800faba:	e00d      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800fabc:	78fa      	ldrb	r2, [r7, #3]
 800fabe:	6879      	ldr	r1, [r7, #4]
 800fac0:	4613      	mov	r3, r2
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	4413      	add	r3, r2
 800fac6:	00db      	lsls	r3, r3, #3
 800fac8:	440b      	add	r3, r1
 800faca:	3342      	adds	r3, #66	; 0x42
 800facc:	2200      	movs	r2, #0
 800face:	701a      	strb	r2, [r3, #0]
      break;
 800fad0:	e002      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800fad2:	bf00      	nop
 800fad4:	e000      	b.n	800fad8 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800fad6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800fad8:	78fa      	ldrb	r2, [r7, #3]
 800fada:	6879      	ldr	r1, [r7, #4]
 800fadc:	4613      	mov	r3, r2
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	4413      	add	r3, r2
 800fae2:	00db      	lsls	r3, r3, #3
 800fae4:	440b      	add	r3, r1
 800fae6:	3344      	adds	r3, #68	; 0x44
 800fae8:	697a      	ldr	r2, [r7, #20]
 800faea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800faec:	78fa      	ldrb	r2, [r7, #3]
 800faee:	8b39      	ldrh	r1, [r7, #24]
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	4613      	mov	r3, r2
 800faf4:	009b      	lsls	r3, r3, #2
 800faf6:	4413      	add	r3, r2
 800faf8:	00db      	lsls	r3, r3, #3
 800fafa:	4403      	add	r3, r0
 800fafc:	3348      	adds	r3, #72	; 0x48
 800fafe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800fb00:	78fa      	ldrb	r2, [r7, #3]
 800fb02:	6879      	ldr	r1, [r7, #4]
 800fb04:	4613      	mov	r3, r2
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	4413      	add	r3, r2
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	440b      	add	r3, r1
 800fb0e:	335c      	adds	r3, #92	; 0x5c
 800fb10:	2200      	movs	r2, #0
 800fb12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800fb14:	78fa      	ldrb	r2, [r7, #3]
 800fb16:	6879      	ldr	r1, [r7, #4]
 800fb18:	4613      	mov	r3, r2
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	4413      	add	r3, r2
 800fb1e:	00db      	lsls	r3, r3, #3
 800fb20:	440b      	add	r3, r1
 800fb22:	334c      	adds	r3, #76	; 0x4c
 800fb24:	2200      	movs	r2, #0
 800fb26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800fb28:	78fa      	ldrb	r2, [r7, #3]
 800fb2a:	6879      	ldr	r1, [r7, #4]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	4413      	add	r3, r2
 800fb32:	00db      	lsls	r3, r3, #3
 800fb34:	440b      	add	r3, r1
 800fb36:	3339      	adds	r3, #57	; 0x39
 800fb38:	78fa      	ldrb	r2, [r7, #3]
 800fb3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800fb3c:	78fa      	ldrb	r2, [r7, #3]
 800fb3e:	6879      	ldr	r1, [r7, #4]
 800fb40:	4613      	mov	r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4413      	add	r3, r2
 800fb46:	00db      	lsls	r3, r3, #3
 800fb48:	440b      	add	r3, r1
 800fb4a:	335d      	adds	r3, #93	; 0x5d
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6818      	ldr	r0, [r3, #0]
 800fb54:	78fa      	ldrb	r2, [r7, #3]
 800fb56:	4613      	mov	r3, r2
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	4413      	add	r3, r2
 800fb5c:	00db      	lsls	r3, r3, #3
 800fb5e:	3338      	adds	r3, #56	; 0x38
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	4413      	add	r3, r2
 800fb64:	4619      	mov	r1, r3
 800fb66:	f003 fd79 	bl	801365c <USB_HC_StartXfer>
 800fb6a:	4603      	mov	r3, r0
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b086      	sub	sp, #24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f003 faed 	bl	801316a <USB_GetMode>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	f040 80f1 	bne.w	800fd7a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f003 fad1 	bl	8013144 <USB_ReadInterrupts>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f000 80e7 	beq.w	800fd78 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f003 fac8 	bl	8013144 <USB_ReadInterrupts>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fbba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fbbe:	d104      	bne.n	800fbca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fbc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f003 fab8 	bl	8013144 <USB_ReadInterrupts>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fbda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fbde:	d104      	bne.n	800fbea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fbe8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f003 faa8 	bl	8013144 <USB_ReadInterrupts>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fbfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fbfe:	d104      	bne.n	800fc0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800fc08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f003 fa98 	bl	8013144 <USB_ReadInterrupts>
 800fc14:	4603      	mov	r3, r0
 800fc16:	f003 0302 	and.w	r3, r3, #2
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d103      	bne.n	800fc26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2202      	movs	r2, #2
 800fc24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f003 fa8a 	bl	8013144 <USB_ReadInterrupts>
 800fc30:	4603      	mov	r3, r0
 800fc32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fc36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc3a:	d117      	bne.n	800fc6c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800fc4a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800fc4e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f00a ff55 	bl	801ab00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f003 fb45 	bl	80132ec <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800fc6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f003 fa67 	bl	8013144 <USB_ReadInterrupts>
 800fc76:	4603      	mov	r3, r0
 800fc78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fc80:	d102      	bne.n	800fc88 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f001 f870 	bl	8010d68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f003 fa59 	bl	8013144 <USB_ReadInterrupts>
 800fc92:	4603      	mov	r3, r0
 800fc94:	f003 0308 	and.w	r3, r3, #8
 800fc98:	2b08      	cmp	r3, #8
 800fc9a:	d106      	bne.n	800fcaa <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f00a ff13 	bl	801aac8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2208      	movs	r2, #8
 800fca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f003 fa48 	bl	8013144 <USB_ReadInterrupts>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fcbe:	d138      	bne.n	800fd32 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f003 fdc9 	bl	801385c <USB_HC_ReadInterrupt>
 800fcca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800fccc:	2300      	movs	r3, #0
 800fcce:	617b      	str	r3, [r7, #20]
 800fcd0:	e025      	b.n	800fd1e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	f003 030f 	and.w	r3, r3, #15
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	fa22 f303 	lsr.w	r3, r2, r3
 800fcde:	f003 0301 	and.w	r3, r3, #1
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d018      	beq.n	800fd18 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	015a      	lsls	r2, r3, #5
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	4413      	add	r3, r2
 800fcee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fcf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcfc:	d106      	bne.n	800fd0c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	4619      	mov	r1, r3
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 f8ba 	bl	800fe7e <HCD_HC_IN_IRQHandler>
 800fd0a:	e005      	b.n	800fd18 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	4619      	mov	r1, r3
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 fc26 	bl	8010564 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	617b      	str	r3, [r7, #20]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	697a      	ldr	r2, [r7, #20]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d3d4      	bcc.n	800fcd2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800fd30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4618      	mov	r0, r3
 800fd38:	f003 fa04 	bl	8013144 <USB_ReadInterrupts>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	f003 0310 	and.w	r3, r3, #16
 800fd42:	2b10      	cmp	r3, #16
 800fd44:	d101      	bne.n	800fd4a <HAL_HCD_IRQHandler+0x1d6>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e000      	b.n	800fd4c <HAL_HCD_IRQHandler+0x1d8>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d014      	beq.n	800fd7a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	699a      	ldr	r2, [r3, #24]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f022 0210 	bic.w	r2, r2, #16
 800fd5e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 ff55 	bl	8010c10 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	699a      	ldr	r2, [r3, #24]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f042 0210 	orr.w	r2, r2, #16
 800fd74:	619a      	str	r2, [r3, #24]
 800fd76:	e000      	b.n	800fd7a <HAL_HCD_IRQHandler+0x206>
      return;
 800fd78:	bf00      	nop
    }
  }
}
 800fd7a:	3718      	adds	r7, #24
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d101      	bne.n	800fd96 <HAL_HCD_Start+0x16>
 800fd92:	2302      	movs	r3, #2
 800fd94:	e013      	b.n	800fdbe <HAL_HCD_Start+0x3e>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2201      	movs	r2, #1
 800fd9a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f003 f8df 	bl	8012f66 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2101      	movs	r1, #1
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f003 fb00 	bl	80133b4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800fdbc:	2300      	movs	r3, #0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b082      	sub	sp, #8
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d101      	bne.n	800fddc <HAL_HCD_Stop+0x16>
 800fdd8:	2302      	movs	r3, #2
 800fdda:	e00d      	b.n	800fdf8 <HAL_HCD_Stop+0x32>
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2201      	movs	r2, #1
 800fde0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f003 fe47 	bl	8013a7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800fdf6:	2300      	movs	r3, #0
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f003 faa7 	bl	8013360 <USB_ResetPort>
 800fe12:	4603      	mov	r3, r0
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	460b      	mov	r3, r1
 800fe26:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800fe28:	78fa      	ldrb	r2, [r7, #3]
 800fe2a:	6879      	ldr	r1, [r7, #4]
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	4413      	add	r3, r2
 800fe32:	00db      	lsls	r3, r3, #3
 800fe34:	440b      	add	r3, r1
 800fe36:	335c      	adds	r3, #92	; 0x5c
 800fe38:	781b      	ldrb	r3, [r3, #0]
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	370c      	adds	r7, #12
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr

0800fe46 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b082      	sub	sp, #8
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f003 fafe 	bl	8013454 <USB_GetCurrentFrame>
 800fe58:	4603      	mov	r3, r0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b082      	sub	sp, #8
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f003 fad9 	bl	8013426 <USB_GetHostSpeed>
 800fe74:	4603      	mov	r3, r0
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b086      	sub	sp, #24
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	6078      	str	r0, [r7, #4]
 800fe86:	460b      	mov	r3, r1
 800fe88:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800fe94:	78fb      	ldrb	r3, [r7, #3]
 800fe96:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	015a      	lsls	r2, r3, #5
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	4413      	add	r3, r2
 800fea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	f003 0304 	and.w	r3, r3, #4
 800feaa:	2b04      	cmp	r3, #4
 800feac:	d119      	bne.n	800fee2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	015a      	lsls	r2, r3, #5
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	4413      	add	r3, r2
 800feb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800feba:	461a      	mov	r2, r3
 800febc:	2304      	movs	r3, #4
 800febe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	015a      	lsls	r2, r3, #5
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	4413      	add	r3, r2
 800fec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	0151      	lsls	r1, r2, #5
 800fed2:	693a      	ldr	r2, [r7, #16]
 800fed4:	440a      	add	r2, r1
 800fed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800feda:	f043 0302 	orr.w	r3, r3, #2
 800fede:	60d3      	str	r3, [r2, #12]
 800fee0:	e095      	b.n	801000e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	015a      	lsls	r2, r3, #5
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	4413      	add	r3, r2
 800feea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	f003 0320 	and.w	r3, r3, #32
 800fef4:	2b20      	cmp	r3, #32
 800fef6:	d109      	bne.n	800ff0c <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	015a      	lsls	r2, r3, #5
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	4413      	add	r3, r2
 800ff00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff04:	461a      	mov	r2, r3
 800ff06:	2320      	movs	r3, #32
 800ff08:	6093      	str	r3, [r2, #8]
 800ff0a:	e080      	b.n	801000e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	015a      	lsls	r2, r3, #5
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	4413      	add	r3, r2
 800ff14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff18:	689b      	ldr	r3, [r3, #8]
 800ff1a:	f003 0308 	and.w	r3, r3, #8
 800ff1e:	2b08      	cmp	r3, #8
 800ff20:	d134      	bne.n	800ff8c <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	015a      	lsls	r2, r3, #5
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	4413      	add	r3, r2
 800ff2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	0151      	lsls	r1, r2, #5
 800ff34:	693a      	ldr	r2, [r7, #16]
 800ff36:	440a      	add	r2, r1
 800ff38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ff3c:	f043 0302 	orr.w	r3, r3, #2
 800ff40:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800ff42:	6879      	ldr	r1, [r7, #4]
 800ff44:	68fa      	ldr	r2, [r7, #12]
 800ff46:	4613      	mov	r3, r2
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	4413      	add	r3, r2
 800ff4c:	00db      	lsls	r3, r3, #3
 800ff4e:	440b      	add	r3, r1
 800ff50:	335d      	adds	r3, #93	; 0x5d
 800ff52:	2205      	movs	r2, #5
 800ff54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	015a      	lsls	r2, r3, #5
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff62:	461a      	mov	r2, r3
 800ff64:	2310      	movs	r3, #16
 800ff66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	015a      	lsls	r2, r3, #5
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	4413      	add	r3, r2
 800ff70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff74:	461a      	mov	r2, r3
 800ff76:	2308      	movs	r3, #8
 800ff78:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	b2d2      	uxtb	r2, r2
 800ff82:	4611      	mov	r1, r2
 800ff84:	4618      	mov	r0, r3
 800ff86:	f003 fc7a 	bl	801387e <USB_HC_Halt>
 800ff8a:	e040      	b.n	801000e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	015a      	lsls	r2, r3, #5
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	4413      	add	r3, r2
 800ff94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffa2:	d134      	bne.n	801000e <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	015a      	lsls	r2, r3, #5
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	4413      	add	r3, r2
 800ffac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	68fa      	ldr	r2, [r7, #12]
 800ffb4:	0151      	lsls	r1, r2, #5
 800ffb6:	693a      	ldr	r2, [r7, #16]
 800ffb8:	440a      	add	r2, r1
 800ffba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ffbe:	f043 0302 	orr.w	r3, r3, #2
 800ffc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	b2d2      	uxtb	r2, r2
 800ffcc:	4611      	mov	r1, r2
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f003 fc55 	bl	801387e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	015a      	lsls	r2, r3, #5
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	4413      	add	r3, r2
 800ffdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	2310      	movs	r3, #16
 800ffe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800ffe6:	6879      	ldr	r1, [r7, #4]
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	4613      	mov	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	4413      	add	r3, r2
 800fff0:	00db      	lsls	r3, r3, #3
 800fff2:	440b      	add	r3, r1
 800fff4:	335d      	adds	r3, #93	; 0x5d
 800fff6:	2208      	movs	r2, #8
 800fff8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	015a      	lsls	r2, r3, #5
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	4413      	add	r3, r2
 8010002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010006:	461a      	mov	r2, r3
 8010008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801000c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	015a      	lsls	r2, r3, #5
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	4413      	add	r3, r2
 8010016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010024:	d122      	bne.n	801006c <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	015a      	lsls	r2, r3, #5
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	4413      	add	r3, r2
 801002e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	68fa      	ldr	r2, [r7, #12]
 8010036:	0151      	lsls	r1, r2, #5
 8010038:	693a      	ldr	r2, [r7, #16]
 801003a:	440a      	add	r2, r1
 801003c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010040:	f043 0302 	orr.w	r3, r3, #2
 8010044:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	68fa      	ldr	r2, [r7, #12]
 801004c:	b2d2      	uxtb	r2, r2
 801004e:	4611      	mov	r1, r2
 8010050:	4618      	mov	r0, r3
 8010052:	f003 fc14 	bl	801387e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	015a      	lsls	r2, r3, #5
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	4413      	add	r3, r2
 801005e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010062:	461a      	mov	r2, r3
 8010064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010068:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 801006a:	e277      	b.n	801055c <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	015a      	lsls	r2, r3, #5
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	4413      	add	r3, r2
 8010074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010078:	689b      	ldr	r3, [r3, #8]
 801007a:	f003 0301 	and.w	r3, r3, #1
 801007e:	2b01      	cmp	r3, #1
 8010080:	f040 80a1 	bne.w	80101c6 <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 8010084:	6879      	ldr	r1, [r7, #4]
 8010086:	68fa      	ldr	r2, [r7, #12]
 8010088:	4613      	mov	r3, r2
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4413      	add	r3, r2
 801008e:	00db      	lsls	r3, r3, #3
 8010090:	440b      	add	r3, r1
 8010092:	335d      	adds	r3, #93	; 0x5d
 8010094:	2201      	movs	r2, #1
 8010096:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8010098:	6879      	ldr	r1, [r7, #4]
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	4613      	mov	r3, r2
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4413      	add	r3, r2
 80100a2:	00db      	lsls	r3, r3, #3
 80100a4:	440b      	add	r3, r1
 80100a6:	3358      	adds	r3, #88	; 0x58
 80100a8:	2200      	movs	r2, #0
 80100aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	015a      	lsls	r2, r3, #5
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	4413      	add	r3, r2
 80100b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100b8:	461a      	mov	r2, r3
 80100ba:	2301      	movs	r3, #1
 80100bc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80100be:	6879      	ldr	r1, [r7, #4]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	4613      	mov	r3, r2
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	4413      	add	r3, r2
 80100c8:	00db      	lsls	r3, r3, #3
 80100ca:	440b      	add	r3, r1
 80100cc:	333f      	adds	r3, #63	; 0x3f
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d00a      	beq.n	80100ea <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80100d4:	6879      	ldr	r1, [r7, #4]
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	4613      	mov	r3, r2
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	4413      	add	r3, r2
 80100de:	00db      	lsls	r3, r3, #3
 80100e0:	440b      	add	r3, r1
 80100e2:	333f      	adds	r3, #63	; 0x3f
 80100e4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80100e6:	2b02      	cmp	r3, #2
 80100e8:	d121      	bne.n	801012e <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	015a      	lsls	r2, r3, #5
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	4413      	add	r3, r2
 80100f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	68fa      	ldr	r2, [r7, #12]
 80100fa:	0151      	lsls	r1, r2, #5
 80100fc:	693a      	ldr	r2, [r7, #16]
 80100fe:	440a      	add	r2, r1
 8010100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010104:	f043 0302 	orr.w	r3, r3, #2
 8010108:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68fa      	ldr	r2, [r7, #12]
 8010110:	b2d2      	uxtb	r2, r2
 8010112:	4611      	mov	r1, r2
 8010114:	4618      	mov	r0, r3
 8010116:	f003 fbb2 	bl	801387e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	015a      	lsls	r2, r3, #5
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	4413      	add	r3, r2
 8010122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010126:	461a      	mov	r2, r3
 8010128:	2310      	movs	r3, #16
 801012a:	6093      	str	r3, [r2, #8]
 801012c:	e034      	b.n	8010198 <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 801012e:	6879      	ldr	r1, [r7, #4]
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	4613      	mov	r3, r2
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	4413      	add	r3, r2
 8010138:	00db      	lsls	r3, r3, #3
 801013a:	440b      	add	r3, r1
 801013c:	333f      	adds	r3, #63	; 0x3f
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	2b03      	cmp	r3, #3
 8010142:	d129      	bne.n	8010198 <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	4413      	add	r3, r2
 801014c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	0151      	lsls	r1, r2, #5
 8010156:	693a      	ldr	r2, [r7, #16]
 8010158:	440a      	add	r2, r1
 801015a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801015e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010162:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8010164:	6879      	ldr	r1, [r7, #4]
 8010166:	68fa      	ldr	r2, [r7, #12]
 8010168:	4613      	mov	r3, r2
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	4413      	add	r3, r2
 801016e:	00db      	lsls	r3, r3, #3
 8010170:	440b      	add	r3, r1
 8010172:	335c      	adds	r3, #92	; 0x5c
 8010174:	2201      	movs	r2, #1
 8010176:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	b2d8      	uxtb	r0, r3
 801017c:	6879      	ldr	r1, [r7, #4]
 801017e:	68fa      	ldr	r2, [r7, #12]
 8010180:	4613      	mov	r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	4413      	add	r3, r2
 8010186:	00db      	lsls	r3, r3, #3
 8010188:	440b      	add	r3, r1
 801018a:	335c      	adds	r3, #92	; 0x5c
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	461a      	mov	r2, r3
 8010190:	4601      	mov	r1, r0
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f00a fcc2 	bl	801ab1c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8010198:	6879      	ldr	r1, [r7, #4]
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	4613      	mov	r3, r2
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	4413      	add	r3, r2
 80101a2:	00db      	lsls	r3, r3, #3
 80101a4:	440b      	add	r3, r1
 80101a6:	3350      	adds	r3, #80	; 0x50
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	f083 0301 	eor.w	r3, r3, #1
 80101ae:	b2d8      	uxtb	r0, r3
 80101b0:	6879      	ldr	r1, [r7, #4]
 80101b2:	68fa      	ldr	r2, [r7, #12]
 80101b4:	4613      	mov	r3, r2
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	4413      	add	r3, r2
 80101ba:	00db      	lsls	r3, r3, #3
 80101bc:	440b      	add	r3, r1
 80101be:	3350      	adds	r3, #80	; 0x50
 80101c0:	4602      	mov	r2, r0
 80101c2:	701a      	strb	r2, [r3, #0]
}
 80101c4:	e1ca      	b.n	801055c <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	015a      	lsls	r2, r3, #5
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	4413      	add	r3, r2
 80101ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	f003 0302 	and.w	r3, r3, #2
 80101d8:	2b02      	cmp	r3, #2
 80101da:	f040 80f1 	bne.w	80103c0 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	015a      	lsls	r2, r3, #5
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	4413      	add	r3, r2
 80101e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	0151      	lsls	r1, r2, #5
 80101f0:	693a      	ldr	r2, [r7, #16]
 80101f2:	440a      	add	r2, r1
 80101f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80101f8:	f023 0302 	bic.w	r3, r3, #2
 80101fc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80101fe:	6879      	ldr	r1, [r7, #4]
 8010200:	68fa      	ldr	r2, [r7, #12]
 8010202:	4613      	mov	r3, r2
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	4413      	add	r3, r2
 8010208:	00db      	lsls	r3, r3, #3
 801020a:	440b      	add	r3, r1
 801020c:	335d      	adds	r3, #93	; 0x5d
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	2b01      	cmp	r3, #1
 8010212:	d10a      	bne.n	801022a <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8010214:	6879      	ldr	r1, [r7, #4]
 8010216:	68fa      	ldr	r2, [r7, #12]
 8010218:	4613      	mov	r3, r2
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4413      	add	r3, r2
 801021e:	00db      	lsls	r3, r3, #3
 8010220:	440b      	add	r3, r1
 8010222:	335c      	adds	r3, #92	; 0x5c
 8010224:	2201      	movs	r2, #1
 8010226:	701a      	strb	r2, [r3, #0]
 8010228:	e0b0      	b.n	801038c <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 801022a:	6879      	ldr	r1, [r7, #4]
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	4613      	mov	r3, r2
 8010230:	009b      	lsls	r3, r3, #2
 8010232:	4413      	add	r3, r2
 8010234:	00db      	lsls	r3, r3, #3
 8010236:	440b      	add	r3, r1
 8010238:	335d      	adds	r3, #93	; 0x5d
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	2b05      	cmp	r3, #5
 801023e:	d10a      	bne.n	8010256 <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8010240:	6879      	ldr	r1, [r7, #4]
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	4613      	mov	r3, r2
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	4413      	add	r3, r2
 801024a:	00db      	lsls	r3, r3, #3
 801024c:	440b      	add	r3, r1
 801024e:	335c      	adds	r3, #92	; 0x5c
 8010250:	2205      	movs	r2, #5
 8010252:	701a      	strb	r2, [r3, #0]
 8010254:	e09a      	b.n	801038c <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8010256:	6879      	ldr	r1, [r7, #4]
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	4613      	mov	r3, r2
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	4413      	add	r3, r2
 8010260:	00db      	lsls	r3, r3, #3
 8010262:	440b      	add	r3, r1
 8010264:	335d      	adds	r3, #93	; 0x5d
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	2b06      	cmp	r3, #6
 801026a:	d00a      	beq.n	8010282 <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 801026c:	6879      	ldr	r1, [r7, #4]
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	4613      	mov	r3, r2
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	4413      	add	r3, r2
 8010276:	00db      	lsls	r3, r3, #3
 8010278:	440b      	add	r3, r1
 801027a:	335d      	adds	r3, #93	; 0x5d
 801027c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 801027e:	2b08      	cmp	r3, #8
 8010280:	d156      	bne.n	8010330 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 8010282:	6879      	ldr	r1, [r7, #4]
 8010284:	68fa      	ldr	r2, [r7, #12]
 8010286:	4613      	mov	r3, r2
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	4413      	add	r3, r2
 801028c:	00db      	lsls	r3, r3, #3
 801028e:	440b      	add	r3, r1
 8010290:	3358      	adds	r3, #88	; 0x58
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	1c59      	adds	r1, r3, #1
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	4613      	mov	r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	4413      	add	r3, r2
 80102a0:	00db      	lsls	r3, r3, #3
 80102a2:	4403      	add	r3, r0
 80102a4:	3358      	adds	r3, #88	; 0x58
 80102a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80102a8:	6879      	ldr	r1, [r7, #4]
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	4613      	mov	r3, r2
 80102ae:	009b      	lsls	r3, r3, #2
 80102b0:	4413      	add	r3, r2
 80102b2:	00db      	lsls	r3, r3, #3
 80102b4:	440b      	add	r3, r1
 80102b6:	3358      	adds	r3, #88	; 0x58
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b03      	cmp	r3, #3
 80102bc:	d914      	bls.n	80102e8 <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80102be:	6879      	ldr	r1, [r7, #4]
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	4613      	mov	r3, r2
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	4413      	add	r3, r2
 80102c8:	00db      	lsls	r3, r3, #3
 80102ca:	440b      	add	r3, r1
 80102cc:	3358      	adds	r3, #88	; 0x58
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80102d2:	6879      	ldr	r1, [r7, #4]
 80102d4:	68fa      	ldr	r2, [r7, #12]
 80102d6:	4613      	mov	r3, r2
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	4413      	add	r3, r2
 80102dc:	00db      	lsls	r3, r3, #3
 80102de:	440b      	add	r3, r1
 80102e0:	335c      	adds	r3, #92	; 0x5c
 80102e2:	2204      	movs	r2, #4
 80102e4:	701a      	strb	r2, [r3, #0]
 80102e6:	e009      	b.n	80102fc <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80102e8:	6879      	ldr	r1, [r7, #4]
 80102ea:	68fa      	ldr	r2, [r7, #12]
 80102ec:	4613      	mov	r3, r2
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	4413      	add	r3, r2
 80102f2:	00db      	lsls	r3, r3, #3
 80102f4:	440b      	add	r3, r1
 80102f6:	335c      	adds	r3, #92	; 0x5c
 80102f8:	2202      	movs	r2, #2
 80102fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	015a      	lsls	r2, r3, #5
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	4413      	add	r3, r2
 8010304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010312:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801031a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	015a      	lsls	r2, r3, #5
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	4413      	add	r3, r2
 8010324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010328:	461a      	mov	r2, r3
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	6013      	str	r3, [r2, #0]
 801032e:	e02d      	b.n	801038c <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8010330:	6879      	ldr	r1, [r7, #4]
 8010332:	68fa      	ldr	r2, [r7, #12]
 8010334:	4613      	mov	r3, r2
 8010336:	009b      	lsls	r3, r3, #2
 8010338:	4413      	add	r3, r2
 801033a:	00db      	lsls	r3, r3, #3
 801033c:	440b      	add	r3, r1
 801033e:	335d      	adds	r3, #93	; 0x5d
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	2b03      	cmp	r3, #3
 8010344:	d122      	bne.n	801038c <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8010346:	6879      	ldr	r1, [r7, #4]
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	4613      	mov	r3, r2
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	4413      	add	r3, r2
 8010350:	00db      	lsls	r3, r3, #3
 8010352:	440b      	add	r3, r1
 8010354:	335c      	adds	r3, #92	; 0x5c
 8010356:	2202      	movs	r2, #2
 8010358:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	015a      	lsls	r2, r3, #5
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	4413      	add	r3, r2
 8010362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010370:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010378:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	015a      	lsls	r2, r3, #5
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	4413      	add	r3, r2
 8010382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010386:	461a      	mov	r2, r3
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	015a      	lsls	r2, r3, #5
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	4413      	add	r3, r2
 8010394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010398:	461a      	mov	r2, r3
 801039a:	2302      	movs	r3, #2
 801039c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	b2d8      	uxtb	r0, r3
 80103a2:	6879      	ldr	r1, [r7, #4]
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	4613      	mov	r3, r2
 80103a8:	009b      	lsls	r3, r3, #2
 80103aa:	4413      	add	r3, r2
 80103ac:	00db      	lsls	r3, r3, #3
 80103ae:	440b      	add	r3, r1
 80103b0:	335c      	adds	r3, #92	; 0x5c
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	461a      	mov	r2, r3
 80103b6:	4601      	mov	r1, r0
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f00a fbaf 	bl	801ab1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80103be:	e0cd      	b.n	801055c <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	015a      	lsls	r2, r3, #5
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	4413      	add	r3, r2
 80103c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103d2:	2b80      	cmp	r3, #128	; 0x80
 80103d4:	d13e      	bne.n	8010454 <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	015a      	lsls	r2, r3, #5
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	4413      	add	r3, r2
 80103de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	68fa      	ldr	r2, [r7, #12]
 80103e6:	0151      	lsls	r1, r2, #5
 80103e8:	693a      	ldr	r2, [r7, #16]
 80103ea:	440a      	add	r2, r1
 80103ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80103f0:	f043 0302 	orr.w	r3, r3, #2
 80103f4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80103f6:	6879      	ldr	r1, [r7, #4]
 80103f8:	68fa      	ldr	r2, [r7, #12]
 80103fa:	4613      	mov	r3, r2
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	4413      	add	r3, r2
 8010400:	00db      	lsls	r3, r3, #3
 8010402:	440b      	add	r3, r1
 8010404:	3358      	adds	r3, #88	; 0x58
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	1c59      	adds	r1, r3, #1
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	68fa      	ldr	r2, [r7, #12]
 801040e:	4613      	mov	r3, r2
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	4413      	add	r3, r2
 8010414:	00db      	lsls	r3, r3, #3
 8010416:	4403      	add	r3, r0
 8010418:	3358      	adds	r3, #88	; 0x58
 801041a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 801041c:	6879      	ldr	r1, [r7, #4]
 801041e:	68fa      	ldr	r2, [r7, #12]
 8010420:	4613      	mov	r3, r2
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	4413      	add	r3, r2
 8010426:	00db      	lsls	r3, r3, #3
 8010428:	440b      	add	r3, r1
 801042a:	335d      	adds	r3, #93	; 0x5d
 801042c:	2206      	movs	r2, #6
 801042e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	b2d2      	uxtb	r2, r2
 8010438:	4611      	mov	r1, r2
 801043a:	4618      	mov	r0, r3
 801043c:	f003 fa1f 	bl	801387e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	015a      	lsls	r2, r3, #5
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	4413      	add	r3, r2
 8010448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801044c:	461a      	mov	r2, r3
 801044e:	2380      	movs	r3, #128	; 0x80
 8010450:	6093      	str	r3, [r2, #8]
}
 8010452:	e083      	b.n	801055c <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	015a      	lsls	r2, r3, #5
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	4413      	add	r3, r2
 801045c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010460:	689b      	ldr	r3, [r3, #8]
 8010462:	f003 0310 	and.w	r3, r3, #16
 8010466:	2b10      	cmp	r3, #16
 8010468:	d178      	bne.n	801055c <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 801046a:	6879      	ldr	r1, [r7, #4]
 801046c:	68fa      	ldr	r2, [r7, #12]
 801046e:	4613      	mov	r3, r2
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	4413      	add	r3, r2
 8010474:	00db      	lsls	r3, r3, #3
 8010476:	440b      	add	r3, r1
 8010478:	333f      	adds	r3, #63	; 0x3f
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	2b03      	cmp	r3, #3
 801047e:	d122      	bne.n	80104c6 <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8010480:	6879      	ldr	r1, [r7, #4]
 8010482:	68fa      	ldr	r2, [r7, #12]
 8010484:	4613      	mov	r3, r2
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	4413      	add	r3, r2
 801048a:	00db      	lsls	r3, r3, #3
 801048c:	440b      	add	r3, r1
 801048e:	3358      	adds	r3, #88	; 0x58
 8010490:	2200      	movs	r2, #0
 8010492:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	015a      	lsls	r2, r3, #5
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	4413      	add	r3, r2
 801049c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	0151      	lsls	r1, r2, #5
 80104a6:	693a      	ldr	r2, [r7, #16]
 80104a8:	440a      	add	r2, r1
 80104aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80104ae:	f043 0302 	orr.w	r3, r3, #2
 80104b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	68fa      	ldr	r2, [r7, #12]
 80104ba:	b2d2      	uxtb	r2, r2
 80104bc:	4611      	mov	r1, r2
 80104be:	4618      	mov	r0, r3
 80104c0:	f003 f9dd 	bl	801387e <USB_HC_Halt>
 80104c4:	e041      	b.n	801054a <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80104c6:	6879      	ldr	r1, [r7, #4]
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	4613      	mov	r3, r2
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	4413      	add	r3, r2
 80104d0:	00db      	lsls	r3, r3, #3
 80104d2:	440b      	add	r3, r1
 80104d4:	333f      	adds	r3, #63	; 0x3f
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00a      	beq.n	80104f2 <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80104dc:	6879      	ldr	r1, [r7, #4]
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	4613      	mov	r3, r2
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	4413      	add	r3, r2
 80104e6:	00db      	lsls	r3, r3, #3
 80104e8:	440b      	add	r3, r1
 80104ea:	333f      	adds	r3, #63	; 0x3f
 80104ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	d12b      	bne.n	801054a <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80104f2:	6879      	ldr	r1, [r7, #4]
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	4613      	mov	r3, r2
 80104f8:	009b      	lsls	r3, r3, #2
 80104fa:	4413      	add	r3, r2
 80104fc:	00db      	lsls	r3, r3, #3
 80104fe:	440b      	add	r3, r1
 8010500:	3358      	adds	r3, #88	; 0x58
 8010502:	2200      	movs	r2, #0
 8010504:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8010506:	6879      	ldr	r1, [r7, #4]
 8010508:	68fa      	ldr	r2, [r7, #12]
 801050a:	4613      	mov	r3, r2
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	4413      	add	r3, r2
 8010510:	00db      	lsls	r3, r3, #3
 8010512:	440b      	add	r3, r1
 8010514:	335d      	adds	r3, #93	; 0x5d
 8010516:	2203      	movs	r2, #3
 8010518:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	015a      	lsls	r2, r3, #5
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	4413      	add	r3, r2
 8010522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	68fa      	ldr	r2, [r7, #12]
 801052a:	0151      	lsls	r1, r2, #5
 801052c:	693a      	ldr	r2, [r7, #16]
 801052e:	440a      	add	r2, r1
 8010530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010534:	f043 0302 	orr.w	r3, r3, #2
 8010538:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	68fa      	ldr	r2, [r7, #12]
 8010540:	b2d2      	uxtb	r2, r2
 8010542:	4611      	mov	r1, r2
 8010544:	4618      	mov	r0, r3
 8010546:	f003 f99a 	bl	801387e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	015a      	lsls	r2, r3, #5
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	4413      	add	r3, r2
 8010552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010556:	461a      	mov	r2, r3
 8010558:	2310      	movs	r3, #16
 801055a:	6093      	str	r3, [r2, #8]
}
 801055c:	bf00      	nop
 801055e:	3718      	adds	r7, #24
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b086      	sub	sp, #24
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	460b      	mov	r3, r1
 801056e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 801057a:	78fb      	ldrb	r3, [r7, #3]
 801057c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	015a      	lsls	r2, r3, #5
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	4413      	add	r3, r2
 8010586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	f003 0304 	and.w	r3, r3, #4
 8010590:	2b04      	cmp	r3, #4
 8010592:	d119      	bne.n	80105c8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	015a      	lsls	r2, r3, #5
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	4413      	add	r3, r2
 801059c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105a0:	461a      	mov	r2, r3
 80105a2:	2304      	movs	r3, #4
 80105a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	015a      	lsls	r2, r3, #5
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	4413      	add	r3, r2
 80105ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	0151      	lsls	r1, r2, #5
 80105b8:	693a      	ldr	r2, [r7, #16]
 80105ba:	440a      	add	r2, r1
 80105bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80105c0:	f043 0302 	orr.w	r3, r3, #2
 80105c4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80105c6:	e31e      	b.n	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	015a      	lsls	r2, r3, #5
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	4413      	add	r3, r2
 80105d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	f003 0320 	and.w	r3, r3, #32
 80105da:	2b20      	cmp	r3, #32
 80105dc:	d141      	bne.n	8010662 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	015a      	lsls	r2, r3, #5
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	4413      	add	r3, r2
 80105e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105ea:	461a      	mov	r2, r3
 80105ec:	2320      	movs	r3, #32
 80105ee:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80105f0:	6879      	ldr	r1, [r7, #4]
 80105f2:	68fa      	ldr	r2, [r7, #12]
 80105f4:	4613      	mov	r3, r2
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	4413      	add	r3, r2
 80105fa:	00db      	lsls	r3, r3, #3
 80105fc:	440b      	add	r3, r1
 80105fe:	333d      	adds	r3, #61	; 0x3d
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	2b01      	cmp	r3, #1
 8010604:	f040 82ff 	bne.w	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8010608:	6879      	ldr	r1, [r7, #4]
 801060a:	68fa      	ldr	r2, [r7, #12]
 801060c:	4613      	mov	r3, r2
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	4413      	add	r3, r2
 8010612:	00db      	lsls	r3, r3, #3
 8010614:	440b      	add	r3, r1
 8010616:	333d      	adds	r3, #61	; 0x3d
 8010618:	2200      	movs	r2, #0
 801061a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 801061c:	6879      	ldr	r1, [r7, #4]
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	4613      	mov	r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4413      	add	r3, r2
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	440b      	add	r3, r1
 801062a:	335c      	adds	r3, #92	; 0x5c
 801062c:	2202      	movs	r2, #2
 801062e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	015a      	lsls	r2, r3, #5
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	4413      	add	r3, r2
 8010638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	68fa      	ldr	r2, [r7, #12]
 8010640:	0151      	lsls	r1, r2, #5
 8010642:	693a      	ldr	r2, [r7, #16]
 8010644:	440a      	add	r2, r1
 8010646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801064a:	f043 0302 	orr.w	r3, r3, #2
 801064e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	b2d2      	uxtb	r2, r2
 8010658:	4611      	mov	r1, r2
 801065a:	4618      	mov	r0, r3
 801065c:	f003 f90f 	bl	801387e <USB_HC_Halt>
}
 8010660:	e2d1      	b.n	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	015a      	lsls	r2, r3, #5
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	4413      	add	r3, r2
 801066a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010674:	2b40      	cmp	r3, #64	; 0x40
 8010676:	d13f      	bne.n	80106f8 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8010678:	6879      	ldr	r1, [r7, #4]
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	4613      	mov	r3, r2
 801067e:	009b      	lsls	r3, r3, #2
 8010680:	4413      	add	r3, r2
 8010682:	00db      	lsls	r3, r3, #3
 8010684:	440b      	add	r3, r1
 8010686:	335d      	adds	r3, #93	; 0x5d
 8010688:	2204      	movs	r2, #4
 801068a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 801068c:	6879      	ldr	r1, [r7, #4]
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	4613      	mov	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	4413      	add	r3, r2
 8010696:	00db      	lsls	r3, r3, #3
 8010698:	440b      	add	r3, r1
 801069a:	333d      	adds	r3, #61	; 0x3d
 801069c:	2201      	movs	r2, #1
 801069e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80106a0:	6879      	ldr	r1, [r7, #4]
 80106a2:	68fa      	ldr	r2, [r7, #12]
 80106a4:	4613      	mov	r3, r2
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	4413      	add	r3, r2
 80106aa:	00db      	lsls	r3, r3, #3
 80106ac:	440b      	add	r3, r1
 80106ae:	3358      	adds	r3, #88	; 0x58
 80106b0:	2200      	movs	r2, #0
 80106b2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	015a      	lsls	r2, r3, #5
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	4413      	add	r3, r2
 80106bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	0151      	lsls	r1, r2, #5
 80106c6:	693a      	ldr	r2, [r7, #16]
 80106c8:	440a      	add	r2, r1
 80106ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80106ce:	f043 0302 	orr.w	r3, r3, #2
 80106d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	b2d2      	uxtb	r2, r2
 80106dc:	4611      	mov	r1, r2
 80106de:	4618      	mov	r0, r3
 80106e0:	f003 f8cd 	bl	801387e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	015a      	lsls	r2, r3, #5
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	4413      	add	r3, r2
 80106ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80106f0:	461a      	mov	r2, r3
 80106f2:	2340      	movs	r3, #64	; 0x40
 80106f4:	6093      	str	r3, [r2, #8]
}
 80106f6:	e286      	b.n	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	015a      	lsls	r2, r3, #5
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	4413      	add	r3, r2
 8010700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801070a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801070e:	d122      	bne.n	8010756 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	015a      	lsls	r2, r3, #5
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	4413      	add	r3, r2
 8010718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801071c:	68db      	ldr	r3, [r3, #12]
 801071e:	68fa      	ldr	r2, [r7, #12]
 8010720:	0151      	lsls	r1, r2, #5
 8010722:	693a      	ldr	r2, [r7, #16]
 8010724:	440a      	add	r2, r1
 8010726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801072a:	f043 0302 	orr.w	r3, r3, #2
 801072e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	68fa      	ldr	r2, [r7, #12]
 8010736:	b2d2      	uxtb	r2, r2
 8010738:	4611      	mov	r1, r2
 801073a:	4618      	mov	r0, r3
 801073c:	f003 f89f 	bl	801387e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	015a      	lsls	r2, r3, #5
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	4413      	add	r3, r2
 8010748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801074c:	461a      	mov	r2, r3
 801074e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010752:	6093      	str	r3, [r2, #8]
}
 8010754:	e257      	b.n	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	015a      	lsls	r2, r3, #5
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	4413      	add	r3, r2
 801075e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010762:	689b      	ldr	r3, [r3, #8]
 8010764:	f003 0301 	and.w	r3, r3, #1
 8010768:	2b01      	cmp	r3, #1
 801076a:	d135      	bne.n	80107d8 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 801076c:	6879      	ldr	r1, [r7, #4]
 801076e:	68fa      	ldr	r2, [r7, #12]
 8010770:	4613      	mov	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	440b      	add	r3, r1
 801077a:	3358      	adds	r3, #88	; 0x58
 801077c:	2200      	movs	r2, #0
 801077e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	015a      	lsls	r2, r3, #5
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	4413      	add	r3, r2
 8010788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	0151      	lsls	r1, r2, #5
 8010792:	693a      	ldr	r2, [r7, #16]
 8010794:	440a      	add	r2, r1
 8010796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801079a:	f043 0302 	orr.w	r3, r3, #2
 801079e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	68fa      	ldr	r2, [r7, #12]
 80107a6:	b2d2      	uxtb	r2, r2
 80107a8:	4611      	mov	r1, r2
 80107aa:	4618      	mov	r0, r3
 80107ac:	f003 f867 	bl	801387e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	015a      	lsls	r2, r3, #5
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	4413      	add	r3, r2
 80107b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80107bc:	461a      	mov	r2, r3
 80107be:	2301      	movs	r3, #1
 80107c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80107c2:	6879      	ldr	r1, [r7, #4]
 80107c4:	68fa      	ldr	r2, [r7, #12]
 80107c6:	4613      	mov	r3, r2
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	4413      	add	r3, r2
 80107cc:	00db      	lsls	r3, r3, #3
 80107ce:	440b      	add	r3, r1
 80107d0:	335d      	adds	r3, #93	; 0x5d
 80107d2:	2201      	movs	r2, #1
 80107d4:	701a      	strb	r2, [r3, #0]
}
 80107d6:	e216      	b.n	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	015a      	lsls	r2, r3, #5
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	4413      	add	r3, r2
 80107e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80107e4:	689b      	ldr	r3, [r3, #8]
 80107e6:	f003 0308 	and.w	r3, r3, #8
 80107ea:	2b08      	cmp	r3, #8
 80107ec:	d12b      	bne.n	8010846 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	015a      	lsls	r2, r3, #5
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	4413      	add	r3, r2
 80107f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80107fa:	461a      	mov	r2, r3
 80107fc:	2308      	movs	r3, #8
 80107fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	015a      	lsls	r2, r3, #5
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	4413      	add	r3, r2
 8010808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	68fa      	ldr	r2, [r7, #12]
 8010810:	0151      	lsls	r1, r2, #5
 8010812:	693a      	ldr	r2, [r7, #16]
 8010814:	440a      	add	r2, r1
 8010816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801081a:	f043 0302 	orr.w	r3, r3, #2
 801081e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	68fa      	ldr	r2, [r7, #12]
 8010826:	b2d2      	uxtb	r2, r2
 8010828:	4611      	mov	r1, r2
 801082a:	4618      	mov	r0, r3
 801082c:	f003 f827 	bl	801387e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8010830:	6879      	ldr	r1, [r7, #4]
 8010832:	68fa      	ldr	r2, [r7, #12]
 8010834:	4613      	mov	r3, r2
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	4413      	add	r3, r2
 801083a:	00db      	lsls	r3, r3, #3
 801083c:	440b      	add	r3, r1
 801083e:	335d      	adds	r3, #93	; 0x5d
 8010840:	2205      	movs	r2, #5
 8010842:	701a      	strb	r2, [r3, #0]
}
 8010844:	e1df      	b.n	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	015a      	lsls	r2, r3, #5
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	4413      	add	r3, r2
 801084e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	f003 0310 	and.w	r3, r3, #16
 8010858:	2b10      	cmp	r3, #16
 801085a:	d135      	bne.n	80108c8 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 801085c:	6879      	ldr	r1, [r7, #4]
 801085e:	68fa      	ldr	r2, [r7, #12]
 8010860:	4613      	mov	r3, r2
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	4413      	add	r3, r2
 8010866:	00db      	lsls	r3, r3, #3
 8010868:	440b      	add	r3, r1
 801086a:	3358      	adds	r3, #88	; 0x58
 801086c:	2200      	movs	r2, #0
 801086e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8010870:	6879      	ldr	r1, [r7, #4]
 8010872:	68fa      	ldr	r2, [r7, #12]
 8010874:	4613      	mov	r3, r2
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	4413      	add	r3, r2
 801087a:	00db      	lsls	r3, r3, #3
 801087c:	440b      	add	r3, r1
 801087e:	335d      	adds	r3, #93	; 0x5d
 8010880:	2203      	movs	r2, #3
 8010882:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	015a      	lsls	r2, r3, #5
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	4413      	add	r3, r2
 801088c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	68fa      	ldr	r2, [r7, #12]
 8010894:	0151      	lsls	r1, r2, #5
 8010896:	693a      	ldr	r2, [r7, #16]
 8010898:	440a      	add	r2, r1
 801089a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801089e:	f043 0302 	orr.w	r3, r3, #2
 80108a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	68fa      	ldr	r2, [r7, #12]
 80108aa:	b2d2      	uxtb	r2, r2
 80108ac:	4611      	mov	r1, r2
 80108ae:	4618      	mov	r0, r3
 80108b0:	f002 ffe5 	bl	801387e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	015a      	lsls	r2, r3, #5
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	4413      	add	r3, r2
 80108bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80108c0:	461a      	mov	r2, r3
 80108c2:	2310      	movs	r3, #16
 80108c4:	6093      	str	r3, [r2, #8]
}
 80108c6:	e19e      	b.n	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	015a      	lsls	r2, r3, #5
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	4413      	add	r3, r2
 80108d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80108d4:	689b      	ldr	r3, [r3, #8]
 80108d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108da:	2b80      	cmp	r3, #128	; 0x80
 80108dc:	d12b      	bne.n	8010936 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	015a      	lsls	r2, r3, #5
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	4413      	add	r3, r2
 80108e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	68fa      	ldr	r2, [r7, #12]
 80108ee:	0151      	lsls	r1, r2, #5
 80108f0:	693a      	ldr	r2, [r7, #16]
 80108f2:	440a      	add	r2, r1
 80108f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80108f8:	f043 0302 	orr.w	r3, r3, #2
 80108fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	b2d2      	uxtb	r2, r2
 8010906:	4611      	mov	r1, r2
 8010908:	4618      	mov	r0, r3
 801090a:	f002 ffb8 	bl	801387e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 801090e:	6879      	ldr	r1, [r7, #4]
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	4613      	mov	r3, r2
 8010914:	009b      	lsls	r3, r3, #2
 8010916:	4413      	add	r3, r2
 8010918:	00db      	lsls	r3, r3, #3
 801091a:	440b      	add	r3, r1
 801091c:	335d      	adds	r3, #93	; 0x5d
 801091e:	2206      	movs	r2, #6
 8010920:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	015a      	lsls	r2, r3, #5
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	4413      	add	r3, r2
 801092a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801092e:	461a      	mov	r2, r3
 8010930:	2380      	movs	r3, #128	; 0x80
 8010932:	6093      	str	r3, [r2, #8]
}
 8010934:	e167      	b.n	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	015a      	lsls	r2, r3, #5
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	4413      	add	r3, r2
 801093e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801094c:	d135      	bne.n	80109ba <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	015a      	lsls	r2, r3, #5
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	4413      	add	r3, r2
 8010956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	68fa      	ldr	r2, [r7, #12]
 801095e:	0151      	lsls	r1, r2, #5
 8010960:	693a      	ldr	r2, [r7, #16]
 8010962:	440a      	add	r2, r1
 8010964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010968:	f043 0302 	orr.w	r3, r3, #2
 801096c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	68fa      	ldr	r2, [r7, #12]
 8010974:	b2d2      	uxtb	r2, r2
 8010976:	4611      	mov	r1, r2
 8010978:	4618      	mov	r0, r3
 801097a:	f002 ff80 	bl	801387e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	015a      	lsls	r2, r3, #5
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	4413      	add	r3, r2
 8010986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801098a:	461a      	mov	r2, r3
 801098c:	2310      	movs	r3, #16
 801098e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	015a      	lsls	r2, r3, #5
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	4413      	add	r3, r2
 8010998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801099c:	461a      	mov	r2, r3
 801099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80109a4:	6879      	ldr	r1, [r7, #4]
 80109a6:	68fa      	ldr	r2, [r7, #12]
 80109a8:	4613      	mov	r3, r2
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	4413      	add	r3, r2
 80109ae:	00db      	lsls	r3, r3, #3
 80109b0:	440b      	add	r3, r1
 80109b2:	335d      	adds	r3, #93	; 0x5d
 80109b4:	2208      	movs	r2, #8
 80109b6:	701a      	strb	r2, [r3, #0]
}
 80109b8:	e125      	b.n	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	015a      	lsls	r2, r3, #5
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	4413      	add	r3, r2
 80109c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	f003 0302 	and.w	r3, r3, #2
 80109cc:	2b02      	cmp	r3, #2
 80109ce:	f040 811a 	bne.w	8010c06 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	015a      	lsls	r2, r3, #5
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	4413      	add	r3, r2
 80109da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	68fa      	ldr	r2, [r7, #12]
 80109e2:	0151      	lsls	r1, r2, #5
 80109e4:	693a      	ldr	r2, [r7, #16]
 80109e6:	440a      	add	r2, r1
 80109e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80109ec:	f023 0302 	bic.w	r3, r3, #2
 80109f0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80109f2:	6879      	ldr	r1, [r7, #4]
 80109f4:	68fa      	ldr	r2, [r7, #12]
 80109f6:	4613      	mov	r3, r2
 80109f8:	009b      	lsls	r3, r3, #2
 80109fa:	4413      	add	r3, r2
 80109fc:	00db      	lsls	r3, r3, #3
 80109fe:	440b      	add	r3, r1
 8010a00:	335d      	adds	r3, #93	; 0x5d
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	d137      	bne.n	8010a78 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8010a08:	6879      	ldr	r1, [r7, #4]
 8010a0a:	68fa      	ldr	r2, [r7, #12]
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	00db      	lsls	r3, r3, #3
 8010a14:	440b      	add	r3, r1
 8010a16:	335c      	adds	r3, #92	; 0x5c
 8010a18:	2201      	movs	r2, #1
 8010a1a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8010a1c:	6879      	ldr	r1, [r7, #4]
 8010a1e:	68fa      	ldr	r2, [r7, #12]
 8010a20:	4613      	mov	r3, r2
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	4413      	add	r3, r2
 8010a26:	00db      	lsls	r3, r3, #3
 8010a28:	440b      	add	r3, r1
 8010a2a:	333f      	adds	r3, #63	; 0x3f
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	2b02      	cmp	r3, #2
 8010a30:	d00b      	beq.n	8010a4a <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8010a32:	6879      	ldr	r1, [r7, #4]
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	4613      	mov	r3, r2
 8010a38:	009b      	lsls	r3, r3, #2
 8010a3a:	4413      	add	r3, r2
 8010a3c:	00db      	lsls	r3, r3, #3
 8010a3e:	440b      	add	r3, r1
 8010a40:	333f      	adds	r3, #63	; 0x3f
 8010a42:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8010a44:	2b03      	cmp	r3, #3
 8010a46:	f040 80c5 	bne.w	8010bd4 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8010a4a:	6879      	ldr	r1, [r7, #4]
 8010a4c:	68fa      	ldr	r2, [r7, #12]
 8010a4e:	4613      	mov	r3, r2
 8010a50:	009b      	lsls	r3, r3, #2
 8010a52:	4413      	add	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	440b      	add	r3, r1
 8010a58:	3351      	adds	r3, #81	; 0x51
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	f083 0301 	eor.w	r3, r3, #1
 8010a60:	b2d8      	uxtb	r0, r3
 8010a62:	6879      	ldr	r1, [r7, #4]
 8010a64:	68fa      	ldr	r2, [r7, #12]
 8010a66:	4613      	mov	r3, r2
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	4413      	add	r3, r2
 8010a6c:	00db      	lsls	r3, r3, #3
 8010a6e:	440b      	add	r3, r1
 8010a70:	3351      	adds	r3, #81	; 0x51
 8010a72:	4602      	mov	r2, r0
 8010a74:	701a      	strb	r2, [r3, #0]
 8010a76:	e0ad      	b.n	8010bd4 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8010a78:	6879      	ldr	r1, [r7, #4]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4413      	add	r3, r2
 8010a82:	00db      	lsls	r3, r3, #3
 8010a84:	440b      	add	r3, r1
 8010a86:	335d      	adds	r3, #93	; 0x5d
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	2b03      	cmp	r3, #3
 8010a8c:	d10a      	bne.n	8010aa4 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8010a8e:	6879      	ldr	r1, [r7, #4]
 8010a90:	68fa      	ldr	r2, [r7, #12]
 8010a92:	4613      	mov	r3, r2
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4413      	add	r3, r2
 8010a98:	00db      	lsls	r3, r3, #3
 8010a9a:	440b      	add	r3, r1
 8010a9c:	335c      	adds	r3, #92	; 0x5c
 8010a9e:	2202      	movs	r2, #2
 8010aa0:	701a      	strb	r2, [r3, #0]
 8010aa2:	e097      	b.n	8010bd4 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8010aa4:	6879      	ldr	r1, [r7, #4]
 8010aa6:	68fa      	ldr	r2, [r7, #12]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	4413      	add	r3, r2
 8010aae:	00db      	lsls	r3, r3, #3
 8010ab0:	440b      	add	r3, r1
 8010ab2:	335d      	adds	r3, #93	; 0x5d
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	2b04      	cmp	r3, #4
 8010ab8:	d10a      	bne.n	8010ad0 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8010aba:	6879      	ldr	r1, [r7, #4]
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	4613      	mov	r3, r2
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	4413      	add	r3, r2
 8010ac4:	00db      	lsls	r3, r3, #3
 8010ac6:	440b      	add	r3, r1
 8010ac8:	335c      	adds	r3, #92	; 0x5c
 8010aca:	2202      	movs	r2, #2
 8010acc:	701a      	strb	r2, [r3, #0]
 8010ace:	e081      	b.n	8010bd4 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8010ad0:	6879      	ldr	r1, [r7, #4]
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	009b      	lsls	r3, r3, #2
 8010ad8:	4413      	add	r3, r2
 8010ada:	00db      	lsls	r3, r3, #3
 8010adc:	440b      	add	r3, r1
 8010ade:	335d      	adds	r3, #93	; 0x5d
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	2b05      	cmp	r3, #5
 8010ae4:	d10a      	bne.n	8010afc <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8010ae6:	6879      	ldr	r1, [r7, #4]
 8010ae8:	68fa      	ldr	r2, [r7, #12]
 8010aea:	4613      	mov	r3, r2
 8010aec:	009b      	lsls	r3, r3, #2
 8010aee:	4413      	add	r3, r2
 8010af0:	00db      	lsls	r3, r3, #3
 8010af2:	440b      	add	r3, r1
 8010af4:	335c      	adds	r3, #92	; 0x5c
 8010af6:	2205      	movs	r2, #5
 8010af8:	701a      	strb	r2, [r3, #0]
 8010afa:	e06b      	b.n	8010bd4 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8010afc:	6879      	ldr	r1, [r7, #4]
 8010afe:	68fa      	ldr	r2, [r7, #12]
 8010b00:	4613      	mov	r3, r2
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	4413      	add	r3, r2
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	440b      	add	r3, r1
 8010b0a:	335d      	adds	r3, #93	; 0x5d
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	2b06      	cmp	r3, #6
 8010b10:	d00a      	beq.n	8010b28 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8010b12:	6879      	ldr	r1, [r7, #4]
 8010b14:	68fa      	ldr	r2, [r7, #12]
 8010b16:	4613      	mov	r3, r2
 8010b18:	009b      	lsls	r3, r3, #2
 8010b1a:	4413      	add	r3, r2
 8010b1c:	00db      	lsls	r3, r3, #3
 8010b1e:	440b      	add	r3, r1
 8010b20:	335d      	adds	r3, #93	; 0x5d
 8010b22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8010b24:	2b08      	cmp	r3, #8
 8010b26:	d155      	bne.n	8010bd4 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8010b28:	6879      	ldr	r1, [r7, #4]
 8010b2a:	68fa      	ldr	r2, [r7, #12]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4413      	add	r3, r2
 8010b32:	00db      	lsls	r3, r3, #3
 8010b34:	440b      	add	r3, r1
 8010b36:	3358      	adds	r3, #88	; 0x58
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	1c59      	adds	r1, r3, #1
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	4613      	mov	r3, r2
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	4413      	add	r3, r2
 8010b46:	00db      	lsls	r3, r3, #3
 8010b48:	4403      	add	r3, r0
 8010b4a:	3358      	adds	r3, #88	; 0x58
 8010b4c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8010b4e:	6879      	ldr	r1, [r7, #4]
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	4613      	mov	r3, r2
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	4413      	add	r3, r2
 8010b58:	00db      	lsls	r3, r3, #3
 8010b5a:	440b      	add	r3, r1
 8010b5c:	3358      	adds	r3, #88	; 0x58
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	2b03      	cmp	r3, #3
 8010b62:	d914      	bls.n	8010b8e <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8010b64:	6879      	ldr	r1, [r7, #4]
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	4613      	mov	r3, r2
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	4413      	add	r3, r2
 8010b6e:	00db      	lsls	r3, r3, #3
 8010b70:	440b      	add	r3, r1
 8010b72:	3358      	adds	r3, #88	; 0x58
 8010b74:	2200      	movs	r2, #0
 8010b76:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8010b78:	6879      	ldr	r1, [r7, #4]
 8010b7a:	68fa      	ldr	r2, [r7, #12]
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	4413      	add	r3, r2
 8010b82:	00db      	lsls	r3, r3, #3
 8010b84:	440b      	add	r3, r1
 8010b86:	335c      	adds	r3, #92	; 0x5c
 8010b88:	2204      	movs	r2, #4
 8010b8a:	701a      	strb	r2, [r3, #0]
 8010b8c:	e009      	b.n	8010ba2 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8010b8e:	6879      	ldr	r1, [r7, #4]
 8010b90:	68fa      	ldr	r2, [r7, #12]
 8010b92:	4613      	mov	r3, r2
 8010b94:	009b      	lsls	r3, r3, #2
 8010b96:	4413      	add	r3, r2
 8010b98:	00db      	lsls	r3, r3, #3
 8010b9a:	440b      	add	r3, r1
 8010b9c:	335c      	adds	r3, #92	; 0x5c
 8010b9e:	2202      	movs	r2, #2
 8010ba0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	015a      	lsls	r2, r3, #5
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	4413      	add	r3, r2
 8010baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010bb8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bc0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	015a      	lsls	r2, r3, #5
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	4413      	add	r3, r2
 8010bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010bce:	461a      	mov	r2, r3
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	015a      	lsls	r2, r3, #5
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	4413      	add	r3, r2
 8010bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010be0:	461a      	mov	r2, r3
 8010be2:	2302      	movs	r3, #2
 8010be4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	b2d8      	uxtb	r0, r3
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	4613      	mov	r3, r2
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	4413      	add	r3, r2
 8010bf4:	00db      	lsls	r3, r3, #3
 8010bf6:	440b      	add	r3, r1
 8010bf8:	335c      	adds	r3, #92	; 0x5c
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	4601      	mov	r1, r0
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f009 ff8b 	bl	801ab1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8010c06:	bf00      	nop
 8010c08:	3718      	adds	r7, #24
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
	...

08010c10 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b08a      	sub	sp, #40	; 0x28
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c20:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	6a1b      	ldr	r3, [r3, #32]
 8010c28:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	f003 030f 	and.w	r3, r3, #15
 8010c30:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	0c5b      	lsrs	r3, r3, #17
 8010c36:	f003 030f 	and.w	r3, r3, #15
 8010c3a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	091b      	lsrs	r3, r3, #4
 8010c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010c44:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d003      	beq.n	8010c54 <HCD_RXQLVL_IRQHandler+0x44>
 8010c4c:	2b05      	cmp	r3, #5
 8010c4e:	f000 8082 	beq.w	8010d56 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8010c52:	e083      	b.n	8010d5c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d07f      	beq.n	8010d5a <HCD_RXQLVL_IRQHandler+0x14a>
 8010c5a:	6879      	ldr	r1, [r7, #4]
 8010c5c:	69ba      	ldr	r2, [r7, #24]
 8010c5e:	4613      	mov	r3, r2
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	4413      	add	r3, r2
 8010c64:	00db      	lsls	r3, r3, #3
 8010c66:	440b      	add	r3, r1
 8010c68:	3344      	adds	r3, #68	; 0x44
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d074      	beq.n	8010d5a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6818      	ldr	r0, [r3, #0]
 8010c74:	6879      	ldr	r1, [r7, #4]
 8010c76:	69ba      	ldr	r2, [r7, #24]
 8010c78:	4613      	mov	r3, r2
 8010c7a:	009b      	lsls	r3, r3, #2
 8010c7c:	4413      	add	r3, r2
 8010c7e:	00db      	lsls	r3, r3, #3
 8010c80:	440b      	add	r3, r1
 8010c82:	3344      	adds	r3, #68	; 0x44
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	693a      	ldr	r2, [r7, #16]
 8010c88:	b292      	uxth	r2, r2
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	f002 fa31 	bl	80130f2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8010c90:	6879      	ldr	r1, [r7, #4]
 8010c92:	69ba      	ldr	r2, [r7, #24]
 8010c94:	4613      	mov	r3, r2
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	4413      	add	r3, r2
 8010c9a:	00db      	lsls	r3, r3, #3
 8010c9c:	440b      	add	r3, r1
 8010c9e:	3344      	adds	r3, #68	; 0x44
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	18d1      	adds	r1, r2, r3
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	69ba      	ldr	r2, [r7, #24]
 8010caa:	4613      	mov	r3, r2
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	4413      	add	r3, r2
 8010cb0:	00db      	lsls	r3, r3, #3
 8010cb2:	4403      	add	r3, r0
 8010cb4:	3344      	adds	r3, #68	; 0x44
 8010cb6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8010cb8:	6879      	ldr	r1, [r7, #4]
 8010cba:	69ba      	ldr	r2, [r7, #24]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	4413      	add	r3, r2
 8010cc2:	00db      	lsls	r3, r3, #3
 8010cc4:	440b      	add	r3, r1
 8010cc6:	334c      	adds	r3, #76	; 0x4c
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	18d1      	adds	r1, r2, r3
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	69ba      	ldr	r2, [r7, #24]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	4413      	add	r3, r2
 8010cd8:	00db      	lsls	r3, r3, #3
 8010cda:	4403      	add	r3, r0
 8010cdc:	334c      	adds	r3, #76	; 0x4c
 8010cde:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	015a      	lsls	r2, r3, #5
 8010ce4:	6a3b      	ldr	r3, [r7, #32]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010cec:	691a      	ldr	r2, [r3, #16]
 8010cee:	4b1d      	ldr	r3, [pc, #116]	; (8010d64 <HCD_RXQLVL_IRQHandler+0x154>)
 8010cf0:	4013      	ands	r3, r2
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d031      	beq.n	8010d5a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8010cf6:	69bb      	ldr	r3, [r7, #24]
 8010cf8:	015a      	lsls	r2, r3, #5
 8010cfa:	6a3b      	ldr	r3, [r7, #32]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010d0c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010d14:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010d16:	69bb      	ldr	r3, [r7, #24]
 8010d18:	015a      	lsls	r2, r3, #5
 8010d1a:	6a3b      	ldr	r3, [r7, #32]
 8010d1c:	4413      	add	r3, r2
 8010d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d22:	461a      	mov	r2, r3
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8010d28:	6879      	ldr	r1, [r7, #4]
 8010d2a:	69ba      	ldr	r2, [r7, #24]
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	009b      	lsls	r3, r3, #2
 8010d30:	4413      	add	r3, r2
 8010d32:	00db      	lsls	r3, r3, #3
 8010d34:	440b      	add	r3, r1
 8010d36:	3350      	adds	r3, #80	; 0x50
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	f083 0301 	eor.w	r3, r3, #1
 8010d3e:	b2d8      	uxtb	r0, r3
 8010d40:	6879      	ldr	r1, [r7, #4]
 8010d42:	69ba      	ldr	r2, [r7, #24]
 8010d44:	4613      	mov	r3, r2
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4413      	add	r3, r2
 8010d4a:	00db      	lsls	r3, r3, #3
 8010d4c:	440b      	add	r3, r1
 8010d4e:	3350      	adds	r3, #80	; 0x50
 8010d50:	4602      	mov	r2, r0
 8010d52:	701a      	strb	r2, [r3, #0]
      break;
 8010d54:	e001      	b.n	8010d5a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8010d56:	bf00      	nop
 8010d58:	e000      	b.n	8010d5c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8010d5a:	bf00      	nop
  }
}
 8010d5c:	bf00      	nop
 8010d5e:	3728      	adds	r7, #40	; 0x28
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	1ff80000 	.word	0x1ff80000

08010d68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b086      	sub	sp, #24
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010d94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f003 0302 	and.w	r3, r3, #2
 8010d9c:	2b02      	cmp	r3, #2
 8010d9e:	d113      	bne.n	8010dc8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f003 0301 	and.w	r3, r3, #1
 8010da6:	2b01      	cmp	r3, #1
 8010da8:	d10a      	bne.n	8010dc0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	699a      	ldr	r2, [r3, #24]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8010db8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f009 fe92 	bl	801aae4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	f043 0302 	orr.w	r3, r3, #2
 8010dc6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f003 0308 	and.w	r3, r3, #8
 8010dce:	2b08      	cmp	r3, #8
 8010dd0:	d147      	bne.n	8010e62 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	f043 0308 	orr.w	r3, r3, #8
 8010dd8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	f003 0304 	and.w	r3, r3, #4
 8010de0:	2b04      	cmp	r3, #4
 8010de2:	d129      	bne.n	8010e38 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	699b      	ldr	r3, [r3, #24]
 8010de8:	2b02      	cmp	r3, #2
 8010dea:	d113      	bne.n	8010e14 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8010df2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010df6:	d106      	bne.n	8010e06 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2102      	movs	r1, #2
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f002 fa74 	bl	80132ec <USB_InitFSLSPClkSel>
 8010e04:	e011      	b.n	8010e2a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2101      	movs	r1, #1
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f002 fa6d 	bl	80132ec <USB_InitFSLSPClkSel>
 8010e12:	e00a      	b.n	8010e2a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	68db      	ldr	r3, [r3, #12]
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d106      	bne.n	8010e2a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e22:	461a      	mov	r2, r3
 8010e24:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010e28:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f009 fe88 	bl	801ab40 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f009 fe57 	bl	801aae4 <HAL_HCD_Connect_Callback>
 8010e36:	e014      	b.n	8010e62 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f009 fe8f 	bl	801ab5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	693a      	ldr	r2, [r7, #16]
 8010e48:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010e4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010e50:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	699a      	ldr	r2, [r3, #24]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8010e60:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	f003 0320 	and.w	r3, r3, #32
 8010e68:	2b20      	cmp	r3, #32
 8010e6a:	d103      	bne.n	8010e74 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	f043 0320 	orr.w	r3, r3, #32
 8010e72:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	6013      	str	r3, [r2, #0]
}
 8010e80:	bf00      	nop
 8010e82:	3718      	adds	r7, #24
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010e8c:	4b05      	ldr	r3, [pc, #20]	; (8010ea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4a04      	ldr	r2, [pc, #16]	; (8010ea4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8010e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e96:	6013      	str	r3, [r2, #0]
}
 8010e98:	bf00      	nop
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	40007000 	.word	0x40007000

08010ea8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8010eac:	4b04      	ldr	r3, [pc, #16]	; (8010ec0 <HAL_PWREx_GetVoltageRange+0x18>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop
 8010ec0:	40007000 	.word	0x40007000

08010ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b085      	sub	sp, #20
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ed2:	d130      	bne.n	8010f36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8010ed4:	4b23      	ldr	r3, [pc, #140]	; (8010f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ee0:	d038      	beq.n	8010f54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010ee2:	4b20      	ldr	r3, [pc, #128]	; (8010f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010eea:	4a1e      	ldr	r2, [pc, #120]	; (8010f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010ef0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8010ef2:	4b1d      	ldr	r3, [pc, #116]	; (8010f68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	2232      	movs	r2, #50	; 0x32
 8010ef8:	fb02 f303 	mul.w	r3, r2, r3
 8010efc:	4a1b      	ldr	r2, [pc, #108]	; (8010f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8010efe:	fba2 2303 	umull	r2, r3, r2, r3
 8010f02:	0c9b      	lsrs	r3, r3, #18
 8010f04:	3301      	adds	r3, #1
 8010f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010f08:	e002      	b.n	8010f10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	3b01      	subs	r3, #1
 8010f0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010f10:	4b14      	ldr	r3, [pc, #80]	; (8010f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010f12:	695b      	ldr	r3, [r3, #20]
 8010f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f1c:	d102      	bne.n	8010f24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1f2      	bne.n	8010f0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010f24:	4b0f      	ldr	r3, [pc, #60]	; (8010f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010f26:	695b      	ldr	r3, [r3, #20]
 8010f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f30:	d110      	bne.n	8010f54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8010f32:	2303      	movs	r3, #3
 8010f34:	e00f      	b.n	8010f56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8010f36:	4b0b      	ldr	r3, [pc, #44]	; (8010f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f42:	d007      	beq.n	8010f54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8010f44:	4b07      	ldr	r3, [pc, #28]	; (8010f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010f4c:	4a05      	ldr	r2, [pc, #20]	; (8010f64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010f52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8010f54:	2300      	movs	r3, #0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3714      	adds	r7, #20
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop
 8010f64:	40007000 	.word	0x40007000
 8010f68:	20000054 	.word	0x20000054
 8010f6c:	431bde83 	.word	0x431bde83

08010f70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8010f70:	b480      	push	{r7}
 8010f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8010f74:	4b05      	ldr	r3, [pc, #20]	; (8010f8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	4a04      	ldr	r2, [pc, #16]	; (8010f8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8010f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010f7e:	6053      	str	r3, [r2, #4]
}
 8010f80:	bf00      	nop
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop
 8010f8c:	40007000 	.word	0x40007000

08010f90 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8010f90:	b480      	push	{r7}
 8010f92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8010f94:	4b05      	ldr	r3, [pc, #20]	; (8010fac <HAL_PWREx_EnableVddIO2+0x1c>)
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	4a04      	ldr	r2, [pc, #16]	; (8010fac <HAL_PWREx_EnableVddIO2+0x1c>)
 8010f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010f9e:	6053      	str	r3, [r2, #4]
}
 8010fa0:	bf00      	nop
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop
 8010fac:	40007000 	.word	0x40007000

08010fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b088      	sub	sp, #32
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d101      	bne.n	8010fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e3db      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010fc2:	4ba4      	ldr	r3, [pc, #656]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	f003 030c 	and.w	r3, r3, #12
 8010fca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010fcc:	4ba1      	ldr	r3, [pc, #644]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8010fce:	68db      	ldr	r3, [r3, #12]
 8010fd0:	f003 0303 	and.w	r3, r3, #3
 8010fd4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	f003 0310 	and.w	r3, r3, #16
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f000 80e1 	beq.w	80111a6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010fe4:	69bb      	ldr	r3, [r7, #24]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d007      	beq.n	8010ffa <HAL_RCC_OscConfig+0x4a>
 8010fea:	69bb      	ldr	r3, [r7, #24]
 8010fec:	2b0c      	cmp	r3, #12
 8010fee:	f040 8088 	bne.w	8011102 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	f040 8084 	bne.w	8011102 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010ffa:	4b96      	ldr	r3, [pc, #600]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f003 0302 	and.w	r3, r3, #2
 8011002:	2b00      	cmp	r3, #0
 8011004:	d005      	beq.n	8011012 <HAL_RCC_OscConfig+0x62>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	699b      	ldr	r3, [r3, #24]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d101      	bne.n	8011012 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 801100e:	2301      	movs	r3, #1
 8011010:	e3b3      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6a1a      	ldr	r2, [r3, #32]
 8011016:	4b8f      	ldr	r3, [pc, #572]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f003 0308 	and.w	r3, r3, #8
 801101e:	2b00      	cmp	r3, #0
 8011020:	d004      	beq.n	801102c <HAL_RCC_OscConfig+0x7c>
 8011022:	4b8c      	ldr	r3, [pc, #560]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801102a:	e005      	b.n	8011038 <HAL_RCC_OscConfig+0x88>
 801102c:	4b89      	ldr	r3, [pc, #548]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801102e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011032:	091b      	lsrs	r3, r3, #4
 8011034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011038:	4293      	cmp	r3, r2
 801103a:	d223      	bcs.n	8011084 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6a1b      	ldr	r3, [r3, #32]
 8011040:	4618      	mov	r0, r3
 8011042:	f000 fd47 	bl	8011ad4 <RCC_SetFlashLatencyFromMSIRange>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	d001      	beq.n	8011050 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 801104c:	2301      	movs	r3, #1
 801104e:	e394      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011050:	4b80      	ldr	r3, [pc, #512]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4a7f      	ldr	r2, [pc, #508]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011056:	f043 0308 	orr.w	r3, r3, #8
 801105a:	6013      	str	r3, [r2, #0]
 801105c:	4b7d      	ldr	r3, [pc, #500]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6a1b      	ldr	r3, [r3, #32]
 8011068:	497a      	ldr	r1, [pc, #488]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801106a:	4313      	orrs	r3, r2
 801106c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801106e:	4b79      	ldr	r3, [pc, #484]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	69db      	ldr	r3, [r3, #28]
 801107a:	021b      	lsls	r3, r3, #8
 801107c:	4975      	ldr	r1, [pc, #468]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801107e:	4313      	orrs	r3, r2
 8011080:	604b      	str	r3, [r1, #4]
 8011082:	e022      	b.n	80110ca <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011084:	4b73      	ldr	r3, [pc, #460]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4a72      	ldr	r2, [pc, #456]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801108a:	f043 0308 	orr.w	r3, r3, #8
 801108e:	6013      	str	r3, [r2, #0]
 8011090:	4b70      	ldr	r3, [pc, #448]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6a1b      	ldr	r3, [r3, #32]
 801109c:	496d      	ldr	r1, [pc, #436]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801109e:	4313      	orrs	r3, r2
 80110a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80110a2:	4b6c      	ldr	r3, [pc, #432]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	69db      	ldr	r3, [r3, #28]
 80110ae:	021b      	lsls	r3, r3, #8
 80110b0:	4968      	ldr	r1, [pc, #416]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 80110b2:	4313      	orrs	r3, r2
 80110b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6a1b      	ldr	r3, [r3, #32]
 80110ba:	4618      	mov	r0, r3
 80110bc:	f000 fd0a 	bl	8011ad4 <RCC_SetFlashLatencyFromMSIRange>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d001      	beq.n	80110ca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80110c6:	2301      	movs	r3, #1
 80110c8:	e357      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80110ca:	f000 fc41 	bl	8011950 <HAL_RCC_GetSysClockFreq>
 80110ce:	4601      	mov	r1, r0
 80110d0:	4b60      	ldr	r3, [pc, #384]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 80110d2:	689b      	ldr	r3, [r3, #8]
 80110d4:	091b      	lsrs	r3, r3, #4
 80110d6:	f003 030f 	and.w	r3, r3, #15
 80110da:	4a5f      	ldr	r2, [pc, #380]	; (8011258 <HAL_RCC_OscConfig+0x2a8>)
 80110dc:	5cd3      	ldrb	r3, [r2, r3]
 80110de:	f003 031f 	and.w	r3, r3, #31
 80110e2:	fa21 f303 	lsr.w	r3, r1, r3
 80110e6:	4a5d      	ldr	r2, [pc, #372]	; (801125c <HAL_RCC_OscConfig+0x2ac>)
 80110e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80110ea:	4b5d      	ldr	r3, [pc, #372]	; (8011260 <HAL_RCC_OscConfig+0x2b0>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fd ff70 	bl	800efd4 <HAL_InitTick>
 80110f4:	4603      	mov	r3, r0
 80110f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80110f8:	7bfb      	ldrb	r3, [r7, #15]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d052      	beq.n	80111a4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80110fe:	7bfb      	ldrb	r3, [r7, #15]
 8011100:	e33b      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	699b      	ldr	r3, [r3, #24]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d032      	beq.n	8011170 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801110a:	4b52      	ldr	r3, [pc, #328]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	4a51      	ldr	r2, [pc, #324]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011110:	f043 0301 	orr.w	r3, r3, #1
 8011114:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011116:	f7fd ffa9 	bl	800f06c <HAL_GetTick>
 801111a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801111c:	e008      	b.n	8011130 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801111e:	f7fd ffa5 	bl	800f06c <HAL_GetTick>
 8011122:	4602      	mov	r2, r0
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	1ad3      	subs	r3, r2, r3
 8011128:	2b02      	cmp	r3, #2
 801112a:	d901      	bls.n	8011130 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 801112c:	2303      	movs	r3, #3
 801112e:	e324      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011130:	4b48      	ldr	r3, [pc, #288]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f003 0302 	and.w	r3, r3, #2
 8011138:	2b00      	cmp	r3, #0
 801113a:	d0f0      	beq.n	801111e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801113c:	4b45      	ldr	r3, [pc, #276]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4a44      	ldr	r2, [pc, #272]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011142:	f043 0308 	orr.w	r3, r3, #8
 8011146:	6013      	str	r3, [r2, #0]
 8011148:	4b42      	ldr	r3, [pc, #264]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6a1b      	ldr	r3, [r3, #32]
 8011154:	493f      	ldr	r1, [pc, #252]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011156:	4313      	orrs	r3, r2
 8011158:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801115a:	4b3e      	ldr	r3, [pc, #248]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	69db      	ldr	r3, [r3, #28]
 8011166:	021b      	lsls	r3, r3, #8
 8011168:	493a      	ldr	r1, [pc, #232]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801116a:	4313      	orrs	r3, r2
 801116c:	604b      	str	r3, [r1, #4]
 801116e:	e01a      	b.n	80111a6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8011170:	4b38      	ldr	r3, [pc, #224]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4a37      	ldr	r2, [pc, #220]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011176:	f023 0301 	bic.w	r3, r3, #1
 801117a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801117c:	f7fd ff76 	bl	800f06c <HAL_GetTick>
 8011180:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8011182:	e008      	b.n	8011196 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011184:	f7fd ff72 	bl	800f06c <HAL_GetTick>
 8011188:	4602      	mov	r2, r0
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	1ad3      	subs	r3, r2, r3
 801118e:	2b02      	cmp	r3, #2
 8011190:	d901      	bls.n	8011196 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8011192:	2303      	movs	r3, #3
 8011194:	e2f1      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8011196:	4b2f      	ldr	r3, [pc, #188]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f003 0302 	and.w	r3, r3, #2
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1f0      	bne.n	8011184 <HAL_RCC_OscConfig+0x1d4>
 80111a2:	e000      	b.n	80111a6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80111a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f003 0301 	and.w	r3, r3, #1
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d074      	beq.n	801129c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	2b08      	cmp	r3, #8
 80111b6:	d005      	beq.n	80111c4 <HAL_RCC_OscConfig+0x214>
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	2b0c      	cmp	r3, #12
 80111bc:	d10e      	bne.n	80111dc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	2b03      	cmp	r3, #3
 80111c2:	d10b      	bne.n	80111dc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80111c4:	4b23      	ldr	r3, [pc, #140]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d064      	beq.n	801129a <HAL_RCC_OscConfig+0x2ea>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d160      	bne.n	801129a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80111d8:	2301      	movs	r3, #1
 80111da:	e2ce      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111e4:	d106      	bne.n	80111f4 <HAL_RCC_OscConfig+0x244>
 80111e6:	4b1b      	ldr	r3, [pc, #108]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4a1a      	ldr	r2, [pc, #104]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 80111ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80111f0:	6013      	str	r3, [r2, #0]
 80111f2:	e01d      	b.n	8011230 <HAL_RCC_OscConfig+0x280>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80111fc:	d10c      	bne.n	8011218 <HAL_RCC_OscConfig+0x268>
 80111fe:	4b15      	ldr	r3, [pc, #84]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4a14      	ldr	r2, [pc, #80]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011208:	6013      	str	r3, [r2, #0]
 801120a:	4b12      	ldr	r3, [pc, #72]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	4a11      	ldr	r2, [pc, #68]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011214:	6013      	str	r3, [r2, #0]
 8011216:	e00b      	b.n	8011230 <HAL_RCC_OscConfig+0x280>
 8011218:	4b0e      	ldr	r3, [pc, #56]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4a0d      	ldr	r2, [pc, #52]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011222:	6013      	str	r3, [r2, #0]
 8011224:	4b0b      	ldr	r3, [pc, #44]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	4a0a      	ldr	r2, [pc, #40]	; (8011254 <HAL_RCC_OscConfig+0x2a4>)
 801122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801122e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d01c      	beq.n	8011272 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011238:	f7fd ff18 	bl	800f06c <HAL_GetTick>
 801123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801123e:	e011      	b.n	8011264 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011240:	f7fd ff14 	bl	800f06c <HAL_GetTick>
 8011244:	4602      	mov	r2, r0
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	1ad3      	subs	r3, r2, r3
 801124a:	2b64      	cmp	r3, #100	; 0x64
 801124c:	d90a      	bls.n	8011264 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 801124e:	2303      	movs	r3, #3
 8011250:	e293      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
 8011252:	bf00      	nop
 8011254:	40021000 	.word	0x40021000
 8011258:	0801d7dc 	.word	0x0801d7dc
 801125c:	20000054 	.word	0x20000054
 8011260:	20000028 	.word	0x20000028
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011264:	4bae      	ldr	r3, [pc, #696]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801126c:	2b00      	cmp	r3, #0
 801126e:	d0e7      	beq.n	8011240 <HAL_RCC_OscConfig+0x290>
 8011270:	e014      	b.n	801129c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011272:	f7fd fefb 	bl	800f06c <HAL_GetTick>
 8011276:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011278:	e008      	b.n	801128c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801127a:	f7fd fef7 	bl	800f06c <HAL_GetTick>
 801127e:	4602      	mov	r2, r0
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	1ad3      	subs	r3, r2, r3
 8011284:	2b64      	cmp	r3, #100	; 0x64
 8011286:	d901      	bls.n	801128c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8011288:	2303      	movs	r3, #3
 801128a:	e276      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801128c:	4ba4      	ldr	r3, [pc, #656]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011294:	2b00      	cmp	r3, #0
 8011296:	d1f0      	bne.n	801127a <HAL_RCC_OscConfig+0x2ca>
 8011298:	e000      	b.n	801129c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801129a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f003 0302 	and.w	r3, r3, #2
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d060      	beq.n	801136a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	2b04      	cmp	r3, #4
 80112ac:	d005      	beq.n	80112ba <HAL_RCC_OscConfig+0x30a>
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	2b0c      	cmp	r3, #12
 80112b2:	d119      	bne.n	80112e8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d116      	bne.n	80112e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80112ba:	4b99      	ldr	r3, [pc, #612]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d005      	beq.n	80112d2 <HAL_RCC_OscConfig+0x322>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d101      	bne.n	80112d2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80112ce:	2301      	movs	r3, #1
 80112d0:	e253      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80112d2:	4b93      	ldr	r3, [pc, #588]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	691b      	ldr	r3, [r3, #16]
 80112de:	061b      	lsls	r3, r3, #24
 80112e0:	498f      	ldr	r1, [pc, #572]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80112e2:	4313      	orrs	r3, r2
 80112e4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80112e6:	e040      	b.n	801136a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d023      	beq.n	8011338 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80112f0:	4b8b      	ldr	r3, [pc, #556]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4a8a      	ldr	r2, [pc, #552]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80112f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80112fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112fc:	f7fd feb6 	bl	800f06c <HAL_GetTick>
 8011300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011302:	e008      	b.n	8011316 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011304:	f7fd feb2 	bl	800f06c <HAL_GetTick>
 8011308:	4602      	mov	r2, r0
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	1ad3      	subs	r3, r2, r3
 801130e:	2b02      	cmp	r3, #2
 8011310:	d901      	bls.n	8011316 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8011312:	2303      	movs	r3, #3
 8011314:	e231      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011316:	4b82      	ldr	r3, [pc, #520]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801131e:	2b00      	cmp	r3, #0
 8011320:	d0f0      	beq.n	8011304 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011322:	4b7f      	ldr	r3, [pc, #508]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	061b      	lsls	r3, r3, #24
 8011330:	497b      	ldr	r1, [pc, #492]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011332:	4313      	orrs	r3, r2
 8011334:	604b      	str	r3, [r1, #4]
 8011336:	e018      	b.n	801136a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011338:	4b79      	ldr	r3, [pc, #484]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a78      	ldr	r2, [pc, #480]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 801133e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011344:	f7fd fe92 	bl	800f06c <HAL_GetTick>
 8011348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801134a:	e008      	b.n	801135e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801134c:	f7fd fe8e 	bl	800f06c <HAL_GetTick>
 8011350:	4602      	mov	r2, r0
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	1ad3      	subs	r3, r2, r3
 8011356:	2b02      	cmp	r3, #2
 8011358:	d901      	bls.n	801135e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 801135a:	2303      	movs	r3, #3
 801135c:	e20d      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801135e:	4b70      	ldr	r3, [pc, #448]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011366:	2b00      	cmp	r3, #0
 8011368:	d1f0      	bne.n	801134c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f003 0308 	and.w	r3, r3, #8
 8011372:	2b00      	cmp	r3, #0
 8011374:	d03c      	beq.n	80113f0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	695b      	ldr	r3, [r3, #20]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d01c      	beq.n	80113b8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801137e:	4b68      	ldr	r3, [pc, #416]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011384:	4a66      	ldr	r2, [pc, #408]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011386:	f043 0301 	orr.w	r3, r3, #1
 801138a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801138e:	f7fd fe6d 	bl	800f06c <HAL_GetTick>
 8011392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011394:	e008      	b.n	80113a8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011396:	f7fd fe69 	bl	800f06c <HAL_GetTick>
 801139a:	4602      	mov	r2, r0
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	d901      	bls.n	80113a8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80113a4:	2303      	movs	r3, #3
 80113a6:	e1e8      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80113a8:	4b5d      	ldr	r3, [pc, #372]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80113aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80113ae:	f003 0302 	and.w	r3, r3, #2
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d0ef      	beq.n	8011396 <HAL_RCC_OscConfig+0x3e6>
 80113b6:	e01b      	b.n	80113f0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80113b8:	4b59      	ldr	r3, [pc, #356]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80113ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80113be:	4a58      	ldr	r2, [pc, #352]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80113c0:	f023 0301 	bic.w	r3, r3, #1
 80113c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80113c8:	f7fd fe50 	bl	800f06c <HAL_GetTick>
 80113cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80113ce:	e008      	b.n	80113e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80113d0:	f7fd fe4c 	bl	800f06c <HAL_GetTick>
 80113d4:	4602      	mov	r2, r0
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	2b02      	cmp	r3, #2
 80113dc:	d901      	bls.n	80113e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80113de:	2303      	movs	r3, #3
 80113e0:	e1cb      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80113e2:	4b4f      	ldr	r3, [pc, #316]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80113e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80113e8:	f003 0302 	and.w	r3, r3, #2
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d1ef      	bne.n	80113d0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f003 0304 	and.w	r3, r3, #4
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f000 80a5 	beq.w	8011548 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80113fe:	2300      	movs	r3, #0
 8011400:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8011402:	4b47      	ldr	r3, [pc, #284]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801140a:	2b00      	cmp	r3, #0
 801140c:	d10d      	bne.n	801142a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801140e:	4b44      	ldr	r3, [pc, #272]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011412:	4a43      	ldr	r2, [pc, #268]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011418:	6593      	str	r3, [r2, #88]	; 0x58
 801141a:	4b41      	ldr	r3, [pc, #260]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 801141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011422:	60bb      	str	r3, [r7, #8]
 8011424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011426:	2301      	movs	r3, #1
 8011428:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801142a:	4b3e      	ldr	r3, [pc, #248]	; (8011524 <HAL_RCC_OscConfig+0x574>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011432:	2b00      	cmp	r3, #0
 8011434:	d118      	bne.n	8011468 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011436:	4b3b      	ldr	r3, [pc, #236]	; (8011524 <HAL_RCC_OscConfig+0x574>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	4a3a      	ldr	r2, [pc, #232]	; (8011524 <HAL_RCC_OscConfig+0x574>)
 801143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011442:	f7fd fe13 	bl	800f06c <HAL_GetTick>
 8011446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011448:	e008      	b.n	801145c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801144a:	f7fd fe0f 	bl	800f06c <HAL_GetTick>
 801144e:	4602      	mov	r2, r0
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	1ad3      	subs	r3, r2, r3
 8011454:	2b02      	cmp	r3, #2
 8011456:	d901      	bls.n	801145c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8011458:	2303      	movs	r3, #3
 801145a:	e18e      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801145c:	4b31      	ldr	r3, [pc, #196]	; (8011524 <HAL_RCC_OscConfig+0x574>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011464:	2b00      	cmp	r3, #0
 8011466:	d0f0      	beq.n	801144a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	2b01      	cmp	r3, #1
 801146e:	d108      	bne.n	8011482 <HAL_RCC_OscConfig+0x4d2>
 8011470:	4b2b      	ldr	r3, [pc, #172]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011476:	4a2a      	ldr	r2, [pc, #168]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011478:	f043 0301 	orr.w	r3, r3, #1
 801147c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011480:	e024      	b.n	80114cc <HAL_RCC_OscConfig+0x51c>
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	2b05      	cmp	r3, #5
 8011488:	d110      	bne.n	80114ac <HAL_RCC_OscConfig+0x4fc>
 801148a:	4b25      	ldr	r3, [pc, #148]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 801148c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011490:	4a23      	ldr	r2, [pc, #140]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 8011492:	f043 0304 	orr.w	r3, r3, #4
 8011496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801149a:	4b21      	ldr	r3, [pc, #132]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 801149c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114a0:	4a1f      	ldr	r2, [pc, #124]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80114a2:	f043 0301 	orr.w	r3, r3, #1
 80114a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80114aa:	e00f      	b.n	80114cc <HAL_RCC_OscConfig+0x51c>
 80114ac:	4b1c      	ldr	r3, [pc, #112]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80114ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114b2:	4a1b      	ldr	r2, [pc, #108]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80114b4:	f023 0301 	bic.w	r3, r3, #1
 80114b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80114bc:	4b18      	ldr	r3, [pc, #96]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80114be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114c2:	4a17      	ldr	r2, [pc, #92]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80114c4:	f023 0304 	bic.w	r3, r3, #4
 80114c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	689b      	ldr	r3, [r3, #8]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d016      	beq.n	8011502 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80114d4:	f7fd fdca 	bl	800f06c <HAL_GetTick>
 80114d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80114da:	e00a      	b.n	80114f2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80114dc:	f7fd fdc6 	bl	800f06c <HAL_GetTick>
 80114e0:	4602      	mov	r2, r0
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	1ad3      	subs	r3, r2, r3
 80114e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d901      	bls.n	80114f2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80114ee:	2303      	movs	r3, #3
 80114f0:	e143      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80114f2:	4b0b      	ldr	r3, [pc, #44]	; (8011520 <HAL_RCC_OscConfig+0x570>)
 80114f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114f8:	f003 0302 	and.w	r3, r3, #2
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d0ed      	beq.n	80114dc <HAL_RCC_OscConfig+0x52c>
 8011500:	e019      	b.n	8011536 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011502:	f7fd fdb3 	bl	800f06c <HAL_GetTick>
 8011506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011508:	e00e      	b.n	8011528 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801150a:	f7fd fdaf 	bl	800f06c <HAL_GetTick>
 801150e:	4602      	mov	r2, r0
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	f241 3288 	movw	r2, #5000	; 0x1388
 8011518:	4293      	cmp	r3, r2
 801151a:	d905      	bls.n	8011528 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 801151c:	2303      	movs	r3, #3
 801151e:	e12c      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
 8011520:	40021000 	.word	0x40021000
 8011524:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8011528:	4b96      	ldr	r3, [pc, #600]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 801152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801152e:	f003 0302 	and.w	r3, r3, #2
 8011532:	2b00      	cmp	r3, #0
 8011534:	d1e9      	bne.n	801150a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011536:	7ffb      	ldrb	r3, [r7, #31]
 8011538:	2b01      	cmp	r3, #1
 801153a:	d105      	bne.n	8011548 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801153c:	4b91      	ldr	r3, [pc, #580]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 801153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011540:	4a90      	ldr	r2, [pc, #576]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011546:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f003 0320 	and.w	r3, r3, #32
 8011550:	2b00      	cmp	r3, #0
 8011552:	d03c      	beq.n	80115ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011558:	2b00      	cmp	r3, #0
 801155a:	d01c      	beq.n	8011596 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801155c:	4b89      	ldr	r3, [pc, #548]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 801155e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011562:	4a88      	ldr	r2, [pc, #544]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011564:	f043 0301 	orr.w	r3, r3, #1
 8011568:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801156c:	f7fd fd7e 	bl	800f06c <HAL_GetTick>
 8011570:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8011572:	e008      	b.n	8011586 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011574:	f7fd fd7a 	bl	800f06c <HAL_GetTick>
 8011578:	4602      	mov	r2, r0
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	1ad3      	subs	r3, r2, r3
 801157e:	2b02      	cmp	r3, #2
 8011580:	d901      	bls.n	8011586 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8011582:	2303      	movs	r3, #3
 8011584:	e0f9      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8011586:	4b7f      	ldr	r3, [pc, #508]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801158c:	f003 0302 	and.w	r3, r3, #2
 8011590:	2b00      	cmp	r3, #0
 8011592:	d0ef      	beq.n	8011574 <HAL_RCC_OscConfig+0x5c4>
 8011594:	e01b      	b.n	80115ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011596:	4b7b      	ldr	r3, [pc, #492]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801159c:	4a79      	ldr	r2, [pc, #484]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 801159e:	f023 0301 	bic.w	r3, r3, #1
 80115a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80115a6:	f7fd fd61 	bl	800f06c <HAL_GetTick>
 80115aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80115ac:	e008      	b.n	80115c0 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80115ae:	f7fd fd5d 	bl	800f06c <HAL_GetTick>
 80115b2:	4602      	mov	r2, r0
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	1ad3      	subs	r3, r2, r3
 80115b8:	2b02      	cmp	r3, #2
 80115ba:	d901      	bls.n	80115c0 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80115bc:	2303      	movs	r3, #3
 80115be:	e0dc      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80115c0:	4b70      	ldr	r3, [pc, #448]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80115c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80115c6:	f003 0302 	and.w	r3, r3, #2
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d1ef      	bne.n	80115ae <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	f000 80d0 	beq.w	8011778 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	2b0c      	cmp	r3, #12
 80115dc:	f000 808d 	beq.w	80116fa <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115e4:	2b02      	cmp	r3, #2
 80115e6:	d15a      	bne.n	801169e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80115e8:	4b66      	ldr	r3, [pc, #408]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	4a65      	ldr	r2, [pc, #404]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80115ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80115f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80115f4:	f7fd fd3a 	bl	800f06c <HAL_GetTick>
 80115f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80115fa:	e008      	b.n	801160e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80115fc:	f7fd fd36 	bl	800f06c <HAL_GetTick>
 8011600:	4602      	mov	r2, r0
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	1ad3      	subs	r3, r2, r3
 8011606:	2b02      	cmp	r3, #2
 8011608:	d901      	bls.n	801160e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 801160a:	2303      	movs	r3, #3
 801160c:	e0b5      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801160e:	4b5d      	ldr	r3, [pc, #372]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011616:	2b00      	cmp	r3, #0
 8011618:	d1f0      	bne.n	80115fc <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801161a:	4b5a      	ldr	r3, [pc, #360]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 801161c:	68da      	ldr	r2, [r3, #12]
 801161e:	4b5a      	ldr	r3, [pc, #360]	; (8011788 <HAL_RCC_OscConfig+0x7d8>)
 8011620:	4013      	ands	r3, r2
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801162a:	3a01      	subs	r2, #1
 801162c:	0112      	lsls	r2, r2, #4
 801162e:	4311      	orrs	r1, r2
 8011630:	687a      	ldr	r2, [r7, #4]
 8011632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011634:	0212      	lsls	r2, r2, #8
 8011636:	4311      	orrs	r1, r2
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801163c:	0852      	lsrs	r2, r2, #1
 801163e:	3a01      	subs	r2, #1
 8011640:	0552      	lsls	r2, r2, #21
 8011642:	4311      	orrs	r1, r2
 8011644:	687a      	ldr	r2, [r7, #4]
 8011646:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011648:	0852      	lsrs	r2, r2, #1
 801164a:	3a01      	subs	r2, #1
 801164c:	0652      	lsls	r2, r2, #25
 801164e:	4311      	orrs	r1, r2
 8011650:	687a      	ldr	r2, [r7, #4]
 8011652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011654:	06d2      	lsls	r2, r2, #27
 8011656:	430a      	orrs	r2, r1
 8011658:	494a      	ldr	r1, [pc, #296]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 801165a:	4313      	orrs	r3, r2
 801165c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801165e:	4b49      	ldr	r3, [pc, #292]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	4a48      	ldr	r2, [pc, #288]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011668:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801166a:	4b46      	ldr	r3, [pc, #280]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	4a45      	ldr	r2, [pc, #276]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011674:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011676:	f7fd fcf9 	bl	800f06c <HAL_GetTick>
 801167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801167c:	e008      	b.n	8011690 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801167e:	f7fd fcf5 	bl	800f06c <HAL_GetTick>
 8011682:	4602      	mov	r2, r0
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	1ad3      	subs	r3, r2, r3
 8011688:	2b02      	cmp	r3, #2
 801168a:	d901      	bls.n	8011690 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 801168c:	2303      	movs	r3, #3
 801168e:	e074      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011690:	4b3c      	ldr	r3, [pc, #240]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011698:	2b00      	cmp	r3, #0
 801169a:	d0f0      	beq.n	801167e <HAL_RCC_OscConfig+0x6ce>
 801169c:	e06c      	b.n	8011778 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801169e:	4b39      	ldr	r3, [pc, #228]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	4a38      	ldr	r2, [pc, #224]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80116a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80116a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80116aa:	4b36      	ldr	r3, [pc, #216]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d105      	bne.n	80116c2 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80116b6:	4b33      	ldr	r3, [pc, #204]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80116b8:	68db      	ldr	r3, [r3, #12]
 80116ba:	4a32      	ldr	r2, [pc, #200]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80116bc:	f023 0303 	bic.w	r3, r3, #3
 80116c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80116c2:	4b30      	ldr	r3, [pc, #192]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	4a2f      	ldr	r2, [pc, #188]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80116c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80116cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80116d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116d2:	f7fd fccb 	bl	800f06c <HAL_GetTick>
 80116d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80116d8:	e008      	b.n	80116ec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80116da:	f7fd fcc7 	bl	800f06c <HAL_GetTick>
 80116de:	4602      	mov	r2, r0
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	2b02      	cmp	r3, #2
 80116e6:	d901      	bls.n	80116ec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80116e8:	2303      	movs	r3, #3
 80116ea:	e046      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80116ec:	4b25      	ldr	r3, [pc, #148]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d1f0      	bne.n	80116da <HAL_RCC_OscConfig+0x72a>
 80116f8:	e03e      	b.n	8011778 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116fe:	2b01      	cmp	r3, #1
 8011700:	d101      	bne.n	8011706 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8011702:	2301      	movs	r3, #1
 8011704:	e039      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8011706:	4b1f      	ldr	r3, [pc, #124]	; (8011784 <HAL_RCC_OscConfig+0x7d4>)
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	f003 0203 	and.w	r2, r3, #3
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011716:	429a      	cmp	r2, r3
 8011718:	d12c      	bne.n	8011774 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011724:	3b01      	subs	r3, #1
 8011726:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8011728:	429a      	cmp	r2, r3
 801172a:	d123      	bne.n	8011774 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011736:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8011738:	429a      	cmp	r2, r3
 801173a:	d11b      	bne.n	8011774 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011746:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011748:	429a      	cmp	r2, r3
 801174a:	d113      	bne.n	8011774 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011756:	085b      	lsrs	r3, r3, #1
 8011758:	3b01      	subs	r3, #1
 801175a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801175c:	429a      	cmp	r2, r3
 801175e:	d109      	bne.n	8011774 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801176a:	085b      	lsrs	r3, r3, #1
 801176c:	3b01      	subs	r3, #1
 801176e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011770:	429a      	cmp	r2, r3
 8011772:	d001      	beq.n	8011778 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8011774:	2301      	movs	r3, #1
 8011776:	e000      	b.n	801177a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8011778:	2300      	movs	r3, #0
}
 801177a:	4618      	mov	r0, r3
 801177c:	3720      	adds	r7, #32
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	40021000 	.word	0x40021000
 8011788:	019d808c 	.word	0x019d808c

0801178c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d101      	bne.n	80117a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801179c:	2301      	movs	r3, #1
 801179e:	e0c8      	b.n	8011932 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80117a0:	4b66      	ldr	r3, [pc, #408]	; (801193c <HAL_RCC_ClockConfig+0x1b0>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f003 0307 	and.w	r3, r3, #7
 80117a8:	683a      	ldr	r2, [r7, #0]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d910      	bls.n	80117d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80117ae:	4b63      	ldr	r3, [pc, #396]	; (801193c <HAL_RCC_ClockConfig+0x1b0>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f023 0207 	bic.w	r2, r3, #7
 80117b6:	4961      	ldr	r1, [pc, #388]	; (801193c <HAL_RCC_ClockConfig+0x1b0>)
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	4313      	orrs	r3, r2
 80117bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80117be:	4b5f      	ldr	r3, [pc, #380]	; (801193c <HAL_RCC_ClockConfig+0x1b0>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	f003 0307 	and.w	r3, r3, #7
 80117c6:	683a      	ldr	r2, [r7, #0]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d001      	beq.n	80117d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80117cc:	2301      	movs	r3, #1
 80117ce:	e0b0      	b.n	8011932 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f003 0301 	and.w	r3, r3, #1
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d04c      	beq.n	8011876 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	685b      	ldr	r3, [r3, #4]
 80117e0:	2b03      	cmp	r3, #3
 80117e2:	d107      	bne.n	80117f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80117e4:	4b56      	ldr	r3, [pc, #344]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d121      	bne.n	8011834 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80117f0:	2301      	movs	r3, #1
 80117f2:	e09e      	b.n	8011932 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	2b02      	cmp	r3, #2
 80117fa:	d107      	bne.n	801180c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80117fc:	4b50      	ldr	r3, [pc, #320]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011804:	2b00      	cmp	r3, #0
 8011806:	d115      	bne.n	8011834 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8011808:	2301      	movs	r3, #1
 801180a:	e092      	b.n	8011932 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d107      	bne.n	8011824 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011814:	4b4a      	ldr	r3, [pc, #296]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f003 0302 	and.w	r3, r3, #2
 801181c:	2b00      	cmp	r3, #0
 801181e:	d109      	bne.n	8011834 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8011820:	2301      	movs	r3, #1
 8011822:	e086      	b.n	8011932 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011824:	4b46      	ldr	r3, [pc, #280]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801182c:	2b00      	cmp	r3, #0
 801182e:	d101      	bne.n	8011834 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8011830:	2301      	movs	r3, #1
 8011832:	e07e      	b.n	8011932 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011834:	4b42      	ldr	r3, [pc, #264]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 8011836:	689b      	ldr	r3, [r3, #8]
 8011838:	f023 0203 	bic.w	r2, r3, #3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	493f      	ldr	r1, [pc, #252]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 8011842:	4313      	orrs	r3, r2
 8011844:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011846:	f7fd fc11 	bl	800f06c <HAL_GetTick>
 801184a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801184c:	e00a      	b.n	8011864 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801184e:	f7fd fc0d 	bl	800f06c <HAL_GetTick>
 8011852:	4602      	mov	r2, r0
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	1ad3      	subs	r3, r2, r3
 8011858:	f241 3288 	movw	r2, #5000	; 0x1388
 801185c:	4293      	cmp	r3, r2
 801185e:	d901      	bls.n	8011864 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8011860:	2303      	movs	r3, #3
 8011862:	e066      	b.n	8011932 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011864:	4b36      	ldr	r3, [pc, #216]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 8011866:	689b      	ldr	r3, [r3, #8]
 8011868:	f003 020c 	and.w	r2, r3, #12
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	429a      	cmp	r2, r3
 8011874:	d1eb      	bne.n	801184e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	f003 0302 	and.w	r3, r3, #2
 801187e:	2b00      	cmp	r3, #0
 8011880:	d008      	beq.n	8011894 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011882:	4b2f      	ldr	r3, [pc, #188]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 8011884:	689b      	ldr	r3, [r3, #8]
 8011886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	689b      	ldr	r3, [r3, #8]
 801188e:	492c      	ldr	r1, [pc, #176]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 8011890:	4313      	orrs	r3, r2
 8011892:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011894:	4b29      	ldr	r3, [pc, #164]	; (801193c <HAL_RCC_ClockConfig+0x1b0>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	f003 0307 	and.w	r3, r3, #7
 801189c:	683a      	ldr	r2, [r7, #0]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d210      	bcs.n	80118c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80118a2:	4b26      	ldr	r3, [pc, #152]	; (801193c <HAL_RCC_ClockConfig+0x1b0>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	f023 0207 	bic.w	r2, r3, #7
 80118aa:	4924      	ldr	r1, [pc, #144]	; (801193c <HAL_RCC_ClockConfig+0x1b0>)
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	4313      	orrs	r3, r2
 80118b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80118b2:	4b22      	ldr	r3, [pc, #136]	; (801193c <HAL_RCC_ClockConfig+0x1b0>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	f003 0307 	and.w	r3, r3, #7
 80118ba:	683a      	ldr	r2, [r7, #0]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d001      	beq.n	80118c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80118c0:	2301      	movs	r3, #1
 80118c2:	e036      	b.n	8011932 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f003 0304 	and.w	r3, r3, #4
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d008      	beq.n	80118e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80118d0:	4b1b      	ldr	r3, [pc, #108]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 80118d2:	689b      	ldr	r3, [r3, #8]
 80118d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	4918      	ldr	r1, [pc, #96]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 80118de:	4313      	orrs	r3, r2
 80118e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f003 0308 	and.w	r3, r3, #8
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d009      	beq.n	8011902 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80118ee:	4b14      	ldr	r3, [pc, #80]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 80118f0:	689b      	ldr	r3, [r3, #8]
 80118f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	691b      	ldr	r3, [r3, #16]
 80118fa:	00db      	lsls	r3, r3, #3
 80118fc:	4910      	ldr	r1, [pc, #64]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 80118fe:	4313      	orrs	r3, r2
 8011900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8011902:	f000 f825 	bl	8011950 <HAL_RCC_GetSysClockFreq>
 8011906:	4601      	mov	r1, r0
 8011908:	4b0d      	ldr	r3, [pc, #52]	; (8011940 <HAL_RCC_ClockConfig+0x1b4>)
 801190a:	689b      	ldr	r3, [r3, #8]
 801190c:	091b      	lsrs	r3, r3, #4
 801190e:	f003 030f 	and.w	r3, r3, #15
 8011912:	4a0c      	ldr	r2, [pc, #48]	; (8011944 <HAL_RCC_ClockConfig+0x1b8>)
 8011914:	5cd3      	ldrb	r3, [r2, r3]
 8011916:	f003 031f 	and.w	r3, r3, #31
 801191a:	fa21 f303 	lsr.w	r3, r1, r3
 801191e:	4a0a      	ldr	r2, [pc, #40]	; (8011948 <HAL_RCC_ClockConfig+0x1bc>)
 8011920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011922:	4b0a      	ldr	r3, [pc, #40]	; (801194c <HAL_RCC_ClockConfig+0x1c0>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4618      	mov	r0, r3
 8011928:	f7fd fb54 	bl	800efd4 <HAL_InitTick>
 801192c:	4603      	mov	r3, r0
 801192e:	72fb      	strb	r3, [r7, #11]

  return status;
 8011930:	7afb      	ldrb	r3, [r7, #11]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	40022000 	.word	0x40022000
 8011940:	40021000 	.word	0x40021000
 8011944:	0801d7dc 	.word	0x0801d7dc
 8011948:	20000054 	.word	0x20000054
 801194c:	20000028 	.word	0x20000028

08011950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011950:	b480      	push	{r7}
 8011952:	b089      	sub	sp, #36	; 0x24
 8011954:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8011956:	2300      	movs	r3, #0
 8011958:	61fb      	str	r3, [r7, #28]
 801195a:	2300      	movs	r3, #0
 801195c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801195e:	4b3d      	ldr	r3, [pc, #244]	; (8011a54 <HAL_RCC_GetSysClockFreq+0x104>)
 8011960:	689b      	ldr	r3, [r3, #8]
 8011962:	f003 030c 	and.w	r3, r3, #12
 8011966:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011968:	4b3a      	ldr	r3, [pc, #232]	; (8011a54 <HAL_RCC_GetSysClockFreq+0x104>)
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	f003 0303 	and.w	r3, r3, #3
 8011970:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d005      	beq.n	8011984 <HAL_RCC_GetSysClockFreq+0x34>
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	2b0c      	cmp	r3, #12
 801197c:	d121      	bne.n	80119c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2b01      	cmp	r3, #1
 8011982:	d11e      	bne.n	80119c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8011984:	4b33      	ldr	r3, [pc, #204]	; (8011a54 <HAL_RCC_GetSysClockFreq+0x104>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	f003 0308 	and.w	r3, r3, #8
 801198c:	2b00      	cmp	r3, #0
 801198e:	d107      	bne.n	80119a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011990:	4b30      	ldr	r3, [pc, #192]	; (8011a54 <HAL_RCC_GetSysClockFreq+0x104>)
 8011992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011996:	0a1b      	lsrs	r3, r3, #8
 8011998:	f003 030f 	and.w	r3, r3, #15
 801199c:	61fb      	str	r3, [r7, #28]
 801199e:	e005      	b.n	80119ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80119a0:	4b2c      	ldr	r3, [pc, #176]	; (8011a54 <HAL_RCC_GetSysClockFreq+0x104>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	091b      	lsrs	r3, r3, #4
 80119a6:	f003 030f 	and.w	r3, r3, #15
 80119aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80119ac:	4a2a      	ldr	r2, [pc, #168]	; (8011a58 <HAL_RCC_GetSysClockFreq+0x108>)
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d10d      	bne.n	80119d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80119c0:	e00a      	b.n	80119d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	2b04      	cmp	r3, #4
 80119c6:	d102      	bne.n	80119ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80119c8:	4b24      	ldr	r3, [pc, #144]	; (8011a5c <HAL_RCC_GetSysClockFreq+0x10c>)
 80119ca:	61bb      	str	r3, [r7, #24]
 80119cc:	e004      	b.n	80119d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	2b08      	cmp	r3, #8
 80119d2:	d101      	bne.n	80119d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80119d4:	4b22      	ldr	r3, [pc, #136]	; (8011a60 <HAL_RCC_GetSysClockFreq+0x110>)
 80119d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	2b0c      	cmp	r3, #12
 80119dc:	d133      	bne.n	8011a46 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80119de:	4b1d      	ldr	r3, [pc, #116]	; (8011a54 <HAL_RCC_GetSysClockFreq+0x104>)
 80119e0:	68db      	ldr	r3, [r3, #12]
 80119e2:	f003 0303 	and.w	r3, r3, #3
 80119e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d002      	beq.n	80119f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80119ee:	2b03      	cmp	r3, #3
 80119f0:	d003      	beq.n	80119fa <HAL_RCC_GetSysClockFreq+0xaa>
 80119f2:	e005      	b.n	8011a00 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80119f4:	4b19      	ldr	r3, [pc, #100]	; (8011a5c <HAL_RCC_GetSysClockFreq+0x10c>)
 80119f6:	617b      	str	r3, [r7, #20]
      break;
 80119f8:	e005      	b.n	8011a06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80119fa:	4b19      	ldr	r3, [pc, #100]	; (8011a60 <HAL_RCC_GetSysClockFreq+0x110>)
 80119fc:	617b      	str	r3, [r7, #20]
      break;
 80119fe:	e002      	b.n	8011a06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	617b      	str	r3, [r7, #20]
      break;
 8011a04:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011a06:	4b13      	ldr	r3, [pc, #76]	; (8011a54 <HAL_RCC_GetSysClockFreq+0x104>)
 8011a08:	68db      	ldr	r3, [r3, #12]
 8011a0a:	091b      	lsrs	r3, r3, #4
 8011a0c:	f003 0307 	and.w	r3, r3, #7
 8011a10:	3301      	adds	r3, #1
 8011a12:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8011a14:	4b0f      	ldr	r3, [pc, #60]	; (8011a54 <HAL_RCC_GetSysClockFreq+0x104>)
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	0a1b      	lsrs	r3, r3, #8
 8011a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a1e:	697a      	ldr	r2, [r7, #20]
 8011a20:	fb02 f203 	mul.w	r2, r2, r3
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a2a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8011a2c:	4b09      	ldr	r3, [pc, #36]	; (8011a54 <HAL_RCC_GetSysClockFreq+0x104>)
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	0e5b      	lsrs	r3, r3, #25
 8011a32:	f003 0303 	and.w	r3, r3, #3
 8011a36:	3301      	adds	r3, #1
 8011a38:	005b      	lsls	r3, r3, #1
 8011a3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8011a3c:	697a      	ldr	r2, [r7, #20]
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a44:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8011a46:	69bb      	ldr	r3, [r7, #24]
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3724      	adds	r7, #36	; 0x24
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a52:	4770      	bx	lr
 8011a54:	40021000 	.word	0x40021000
 8011a58:	0801d7f4 	.word	0x0801d7f4
 8011a5c:	00f42400 	.word	0x00f42400
 8011a60:	007a1200 	.word	0x007a1200

08011a64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011a64:	b480      	push	{r7}
 8011a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011a68:	4b03      	ldr	r3, [pc, #12]	; (8011a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop
 8011a78:	20000054 	.word	0x20000054

08011a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8011a80:	f7ff fff0 	bl	8011a64 <HAL_RCC_GetHCLKFreq>
 8011a84:	4601      	mov	r1, r0
 8011a86:	4b06      	ldr	r3, [pc, #24]	; (8011aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011a88:	689b      	ldr	r3, [r3, #8]
 8011a8a:	0a1b      	lsrs	r3, r3, #8
 8011a8c:	f003 0307 	and.w	r3, r3, #7
 8011a90:	4a04      	ldr	r2, [pc, #16]	; (8011aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011a92:	5cd3      	ldrb	r3, [r2, r3]
 8011a94:	f003 031f 	and.w	r3, r3, #31
 8011a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	40021000 	.word	0x40021000
 8011aa4:	0801d7ec 	.word	0x0801d7ec

08011aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8011aac:	f7ff ffda 	bl	8011a64 <HAL_RCC_GetHCLKFreq>
 8011ab0:	4601      	mov	r1, r0
 8011ab2:	4b06      	ldr	r3, [pc, #24]	; (8011acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8011ab4:	689b      	ldr	r3, [r3, #8]
 8011ab6:	0adb      	lsrs	r3, r3, #11
 8011ab8:	f003 0307 	and.w	r3, r3, #7
 8011abc:	4a04      	ldr	r2, [pc, #16]	; (8011ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011abe:	5cd3      	ldrb	r3, [r2, r3]
 8011ac0:	f003 031f 	and.w	r3, r3, #31
 8011ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	40021000 	.word	0x40021000
 8011ad0:	0801d7ec 	.word	0x0801d7ec

08011ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b086      	sub	sp, #24
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8011adc:	2300      	movs	r3, #0
 8011ade:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8011ae0:	4b2a      	ldr	r3, [pc, #168]	; (8011b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d003      	beq.n	8011af4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8011aec:	f7ff f9dc 	bl	8010ea8 <HAL_PWREx_GetVoltageRange>
 8011af0:	6178      	str	r0, [r7, #20]
 8011af2:	e014      	b.n	8011b1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8011af4:	4b25      	ldr	r3, [pc, #148]	; (8011b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011af8:	4a24      	ldr	r2, [pc, #144]	; (8011b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011afe:	6593      	str	r3, [r2, #88]	; 0x58
 8011b00:	4b22      	ldr	r3, [pc, #136]	; (8011b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b08:	60fb      	str	r3, [r7, #12]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8011b0c:	f7ff f9cc 	bl	8010ea8 <HAL_PWREx_GetVoltageRange>
 8011b10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8011b12:	4b1e      	ldr	r3, [pc, #120]	; (8011b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b16:	4a1d      	ldr	r2, [pc, #116]	; (8011b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011b1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b24:	d10b      	bne.n	8011b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2b80      	cmp	r3, #128	; 0x80
 8011b2a:	d919      	bls.n	8011b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2ba0      	cmp	r3, #160	; 0xa0
 8011b30:	d902      	bls.n	8011b38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8011b32:	2302      	movs	r3, #2
 8011b34:	613b      	str	r3, [r7, #16]
 8011b36:	e013      	b.n	8011b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8011b38:	2301      	movs	r3, #1
 8011b3a:	613b      	str	r3, [r7, #16]
 8011b3c:	e010      	b.n	8011b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2b80      	cmp	r3, #128	; 0x80
 8011b42:	d902      	bls.n	8011b4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8011b44:	2303      	movs	r3, #3
 8011b46:	613b      	str	r3, [r7, #16]
 8011b48:	e00a      	b.n	8011b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b80      	cmp	r3, #128	; 0x80
 8011b4e:	d102      	bne.n	8011b56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8011b50:	2302      	movs	r3, #2
 8011b52:	613b      	str	r3, [r7, #16]
 8011b54:	e004      	b.n	8011b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2b70      	cmp	r3, #112	; 0x70
 8011b5a:	d101      	bne.n	8011b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8011b60:	4b0b      	ldr	r3, [pc, #44]	; (8011b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f023 0207 	bic.w	r2, r3, #7
 8011b68:	4909      	ldr	r1, [pc, #36]	; (8011b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	4313      	orrs	r3, r2
 8011b6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8011b70:	4b07      	ldr	r3, [pc, #28]	; (8011b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	f003 0307 	and.w	r3, r3, #7
 8011b78:	693a      	ldr	r2, [r7, #16]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d001      	beq.n	8011b82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	e000      	b.n	8011b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8011b82:	2300      	movs	r3, #0
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3718      	adds	r7, #24
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	40021000 	.word	0x40021000
 8011b90:	40022000 	.word	0x40022000

08011b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b086      	sub	sp, #24
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d03f      	beq.n	8011c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011bb8:	d01c      	beq.n	8011bf4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8011bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011bbe:	d802      	bhi.n	8011bc6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d00e      	beq.n	8011be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8011bc4:	e01f      	b.n	8011c06 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8011bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011bca:	d003      	beq.n	8011bd4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8011bcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011bd0:	d01c      	beq.n	8011c0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8011bd2:	e018      	b.n	8011c06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011bd4:	4b85      	ldr	r3, [pc, #532]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	4a84      	ldr	r2, [pc, #528]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011bde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011be0:	e015      	b.n	8011c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	3304      	adds	r3, #4
 8011be6:	2100      	movs	r1, #0
 8011be8:	4618      	mov	r0, r3
 8011bea:	f000 fadb 	bl	80121a4 <RCCEx_PLLSAI1_Config>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011bf2:	e00c      	b.n	8011c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	3320      	adds	r3, #32
 8011bf8:	2100      	movs	r1, #0
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f000 fbc2 	bl	8012384 <RCCEx_PLLSAI2_Config>
 8011c00:	4603      	mov	r3, r0
 8011c02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011c04:	e003      	b.n	8011c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011c06:	2301      	movs	r3, #1
 8011c08:	74fb      	strb	r3, [r7, #19]
      break;
 8011c0a:	e000      	b.n	8011c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8011c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c0e:	7cfb      	ldrb	r3, [r7, #19]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d10b      	bne.n	8011c2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011c14:	4b75      	ldr	r3, [pc, #468]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c22:	4972      	ldr	r1, [pc, #456]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011c24:	4313      	orrs	r3, r2
 8011c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8011c2a:	e001      	b.n	8011c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c2c:	7cfb      	ldrb	r3, [r7, #19]
 8011c2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d03f      	beq.n	8011cbc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011c44:	d01c      	beq.n	8011c80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8011c46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011c4a:	d802      	bhi.n	8011c52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d00e      	beq.n	8011c6e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8011c50:	e01f      	b.n	8011c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8011c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011c56:	d003      	beq.n	8011c60 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8011c58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011c5c:	d01c      	beq.n	8011c98 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8011c5e:	e018      	b.n	8011c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011c60:	4b62      	ldr	r3, [pc, #392]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	4a61      	ldr	r2, [pc, #388]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011c6c:	e015      	b.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	3304      	adds	r3, #4
 8011c72:	2100      	movs	r1, #0
 8011c74:	4618      	mov	r0, r3
 8011c76:	f000 fa95 	bl	80121a4 <RCCEx_PLLSAI1_Config>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011c7e:	e00c      	b.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	3320      	adds	r3, #32
 8011c84:	2100      	movs	r1, #0
 8011c86:	4618      	mov	r0, r3
 8011c88:	f000 fb7c 	bl	8012384 <RCCEx_PLLSAI2_Config>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011c90:	e003      	b.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011c92:	2301      	movs	r3, #1
 8011c94:	74fb      	strb	r3, [r7, #19]
      break;
 8011c96:	e000      	b.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8011c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c9a:	7cfb      	ldrb	r3, [r7, #19]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d10b      	bne.n	8011cb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8011ca0:	4b52      	ldr	r3, [pc, #328]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ca6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cae:	494f      	ldr	r1, [pc, #316]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8011cb6:	e001      	b.n	8011cbc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011cb8:	7cfb      	ldrb	r3, [r7, #19]
 8011cba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	f000 80a0 	beq.w	8011e0a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8011cce:	4b47      	ldr	r3, [pc, #284]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d101      	bne.n	8011cde <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8011cda:	2301      	movs	r3, #1
 8011cdc:	e000      	b.n	8011ce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8011cde:	2300      	movs	r3, #0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d00d      	beq.n	8011d00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011ce4:	4b41      	ldr	r3, [pc, #260]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ce8:	4a40      	ldr	r2, [pc, #256]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cee:	6593      	str	r3, [r2, #88]	; 0x58
 8011cf0:	4b3e      	ldr	r3, [pc, #248]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011cf8:	60bb      	str	r3, [r7, #8]
 8011cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011d00:	4b3b      	ldr	r3, [pc, #236]	; (8011df0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4a3a      	ldr	r2, [pc, #232]	; (8011df0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8011d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011d0c:	f7fd f9ae 	bl	800f06c <HAL_GetTick>
 8011d10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011d12:	e009      	b.n	8011d28 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011d14:	f7fd f9aa 	bl	800f06c <HAL_GetTick>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	1ad3      	subs	r3, r2, r3
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d902      	bls.n	8011d28 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8011d22:	2303      	movs	r3, #3
 8011d24:	74fb      	strb	r3, [r7, #19]
        break;
 8011d26:	e005      	b.n	8011d34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011d28:	4b31      	ldr	r3, [pc, #196]	; (8011df0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d0ef      	beq.n	8011d14 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8011d34:	7cfb      	ldrb	r3, [r7, #19]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d15c      	bne.n	8011df4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8011d3a:	4b2c      	ldr	r3, [pc, #176]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011d44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d01f      	beq.n	8011d8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d52:	697a      	ldr	r2, [r7, #20]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d019      	beq.n	8011d8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011d58:	4b24      	ldr	r3, [pc, #144]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011d64:	4b21      	ldr	r3, [pc, #132]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d6a:	4a20      	ldr	r2, [pc, #128]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011d74:	4b1d      	ldr	r3, [pc, #116]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d7a:	4a1c      	ldr	r2, [pc, #112]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8011d84:	4a19      	ldr	r2, [pc, #100]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	f003 0301 	and.w	r3, r3, #1
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d016      	beq.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011d96:	f7fd f969 	bl	800f06c <HAL_GetTick>
 8011d9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011d9c:	e00b      	b.n	8011db6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011d9e:	f7fd f965 	bl	800f06c <HAL_GetTick>
 8011da2:	4602      	mov	r2, r0
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	1ad3      	subs	r3, r2, r3
 8011da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dac:	4293      	cmp	r3, r2
 8011dae:	d902      	bls.n	8011db6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8011db0:	2303      	movs	r3, #3
 8011db2:	74fb      	strb	r3, [r7, #19]
            break;
 8011db4:	e006      	b.n	8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011db6:	4b0d      	ldr	r3, [pc, #52]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011dbc:	f003 0302 	and.w	r3, r3, #2
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d0ec      	beq.n	8011d9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8011dc4:	7cfb      	ldrb	r3, [r7, #19]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d10c      	bne.n	8011de4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011dca:	4b08      	ldr	r3, [pc, #32]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011dda:	4904      	ldr	r1, [pc, #16]	; (8011dec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8011ddc:	4313      	orrs	r3, r2
 8011dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8011de2:	e009      	b.n	8011df8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011de4:	7cfb      	ldrb	r3, [r7, #19]
 8011de6:	74bb      	strb	r3, [r7, #18]
 8011de8:	e006      	b.n	8011df8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8011dea:	bf00      	nop
 8011dec:	40021000 	.word	0x40021000
 8011df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011df4:	7cfb      	ldrb	r3, [r7, #19]
 8011df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011df8:	7c7b      	ldrb	r3, [r7, #17]
 8011dfa:	2b01      	cmp	r3, #1
 8011dfc:	d105      	bne.n	8011e0a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011dfe:	4ba6      	ldr	r3, [pc, #664]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e02:	4aa5      	ldr	r2, [pc, #660]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f003 0301 	and.w	r3, r3, #1
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d00a      	beq.n	8011e2c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011e16:	4ba0      	ldr	r3, [pc, #640]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e1c:	f023 0203 	bic.w	r2, r3, #3
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e24:	499c      	ldr	r1, [pc, #624]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e26:	4313      	orrs	r3, r2
 8011e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f003 0302 	and.w	r3, r3, #2
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d00a      	beq.n	8011e4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011e38:	4b97      	ldr	r3, [pc, #604]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e3e:	f023 020c 	bic.w	r2, r3, #12
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e46:	4994      	ldr	r1, [pc, #592]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f003 0304 	and.w	r3, r3, #4
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d00a      	beq.n	8011e70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011e5a:	4b8f      	ldr	r3, [pc, #572]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e68:	498b      	ldr	r1, [pc, #556]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e6a:	4313      	orrs	r3, r2
 8011e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f003 0308 	and.w	r3, r3, #8
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00a      	beq.n	8011e92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011e7c:	4b86      	ldr	r3, [pc, #536]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e8a:	4983      	ldr	r1, [pc, #524]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011e8c:	4313      	orrs	r3, r2
 8011e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	f003 0310 	and.w	r3, r3, #16
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00a      	beq.n	8011eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011e9e:	4b7e      	ldr	r3, [pc, #504]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011eac:	497a      	ldr	r1, [pc, #488]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011eae:	4313      	orrs	r3, r2
 8011eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f003 0320 	and.w	r3, r3, #32
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d00a      	beq.n	8011ed6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011ec0:	4b75      	ldr	r3, [pc, #468]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ece:	4972      	ldr	r1, [pc, #456]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011ed0:	4313      	orrs	r3, r2
 8011ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d00a      	beq.n	8011ef8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011ee2:	4b6d      	ldr	r3, [pc, #436]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011ef0:	4969      	ldr	r1, [pc, #420]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011ef2:	4313      	orrs	r3, r2
 8011ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d00a      	beq.n	8011f1a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011f04:	4b64      	ldr	r3, [pc, #400]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f12:	4961      	ldr	r1, [pc, #388]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f14:	4313      	orrs	r3, r2
 8011f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d00a      	beq.n	8011f3c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011f26:	4b5c      	ldr	r3, [pc, #368]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f34:	4958      	ldr	r1, [pc, #352]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f36:	4313      	orrs	r3, r2
 8011f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d00a      	beq.n	8011f5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011f48:	4b53      	ldr	r3, [pc, #332]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f56:	4950      	ldr	r1, [pc, #320]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f58:	4313      	orrs	r3, r2
 8011f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d00a      	beq.n	8011f80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011f6a:	4b4b      	ldr	r3, [pc, #300]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f78:	4947      	ldr	r1, [pc, #284]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d00a      	beq.n	8011fa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011f8c:	4b42      	ldr	r3, [pc, #264]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011f92:	f023 0203 	bic.w	r2, r3, #3
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f9a:	493f      	ldr	r1, [pc, #252]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d028      	beq.n	8012000 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011fae:	4b3a      	ldr	r3, [pc, #232]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fbc:	4936      	ldr	r1, [pc, #216]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011fbe:	4313      	orrs	r3, r2
 8011fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011fcc:	d106      	bne.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011fce:	4b32      	ldr	r3, [pc, #200]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011fd0:	68db      	ldr	r3, [r3, #12]
 8011fd2:	4a31      	ldr	r2, [pc, #196]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8011fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011fd8:	60d3      	str	r3, [r2, #12]
 8011fda:	e011      	b.n	8012000 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011fe4:	d10c      	bne.n	8012000 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	3304      	adds	r3, #4
 8011fea:	2101      	movs	r1, #1
 8011fec:	4618      	mov	r0, r3
 8011fee:	f000 f8d9 	bl	80121a4 <RCCEx_PLLSAI1_Config>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8011ff6:	7cfb      	ldrb	r3, [r7, #19]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d001      	beq.n	8012000 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8011ffc:	7cfb      	ldrb	r3, [r7, #19]
 8011ffe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012008:	2b00      	cmp	r3, #0
 801200a:	d028      	beq.n	801205e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801200c:	4b22      	ldr	r3, [pc, #136]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801201a:	491f      	ldr	r1, [pc, #124]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801201c:	4313      	orrs	r3, r2
 801201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801202a:	d106      	bne.n	801203a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801202c:	4b1a      	ldr	r3, [pc, #104]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	4a19      	ldr	r2, [pc, #100]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8012032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012036:	60d3      	str	r3, [r2, #12]
 8012038:	e011      	b.n	801205e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801203e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012042:	d10c      	bne.n	801205e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	3304      	adds	r3, #4
 8012048:	2101      	movs	r1, #1
 801204a:	4618      	mov	r0, r3
 801204c:	f000 f8aa 	bl	80121a4 <RCCEx_PLLSAI1_Config>
 8012050:	4603      	mov	r3, r0
 8012052:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8012054:	7cfb      	ldrb	r3, [r7, #19]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d001      	beq.n	801205e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 801205a:	7cfb      	ldrb	r3, [r7, #19]
 801205c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012066:	2b00      	cmp	r3, #0
 8012068:	d02a      	beq.n	80120c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801206a:	4b0b      	ldr	r3, [pc, #44]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012070:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012078:	4907      	ldr	r1, [pc, #28]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801207a:	4313      	orrs	r3, r2
 801207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012088:	d108      	bne.n	801209c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801208a:	4b03      	ldr	r3, [pc, #12]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	4a02      	ldr	r2, [pc, #8]	; (8012098 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8012090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012094:	60d3      	str	r3, [r2, #12]
 8012096:	e013      	b.n	80120c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8012098:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80120a4:	d10c      	bne.n	80120c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	3304      	adds	r3, #4
 80120aa:	2101      	movs	r1, #1
 80120ac:	4618      	mov	r0, r3
 80120ae:	f000 f879 	bl	80121a4 <RCCEx_PLLSAI1_Config>
 80120b2:	4603      	mov	r3, r0
 80120b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80120b6:	7cfb      	ldrb	r3, [r7, #19]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d001      	beq.n	80120c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 80120bc:	7cfb      	ldrb	r3, [r7, #19]
 80120be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d02f      	beq.n	801212c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80120cc:	4b2c      	ldr	r3, [pc, #176]	; (8012180 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80120ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120da:	4929      	ldr	r1, [pc, #164]	; (8012180 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80120dc:	4313      	orrs	r3, r2
 80120de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80120ea:	d10d      	bne.n	8012108 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	3304      	adds	r3, #4
 80120f0:	2102      	movs	r1, #2
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 f856 	bl	80121a4 <RCCEx_PLLSAI1_Config>
 80120f8:	4603      	mov	r3, r0
 80120fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80120fc:	7cfb      	ldrb	r3, [r7, #19]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d014      	beq.n	801212c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8012102:	7cfb      	ldrb	r3, [r7, #19]
 8012104:	74bb      	strb	r3, [r7, #18]
 8012106:	e011      	b.n	801212c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801210c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012110:	d10c      	bne.n	801212c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	3320      	adds	r3, #32
 8012116:	2102      	movs	r1, #2
 8012118:	4618      	mov	r0, r3
 801211a:	f000 f933 	bl	8012384 <RCCEx_PLLSAI2_Config>
 801211e:	4603      	mov	r3, r0
 8012120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8012122:	7cfb      	ldrb	r3, [r7, #19]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d001      	beq.n	801212c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8012128:	7cfb      	ldrb	r3, [r7, #19]
 801212a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012134:	2b00      	cmp	r3, #0
 8012136:	d00b      	beq.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012138:	4b11      	ldr	r3, [pc, #68]	; (8012180 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801213e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012148:	490d      	ldr	r1, [pc, #52]	; (8012180 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801214a:	4313      	orrs	r3, r2
 801214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00b      	beq.n	8012174 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801215c:	4b08      	ldr	r3, [pc, #32]	; (8012180 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012162:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801216c:	4904      	ldr	r1, [pc, #16]	; (8012180 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801216e:	4313      	orrs	r3, r2
 8012170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8012174:	7cbb      	ldrb	r3, [r7, #18]
}
 8012176:	4618      	mov	r0, r3
 8012178:	3718      	adds	r7, #24
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}
 801217e:	bf00      	nop
 8012180:	40021000 	.word	0x40021000

08012184 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8012184:	b480      	push	{r7}
 8012186:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8012188:	4b05      	ldr	r3, [pc, #20]	; (80121a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	4a04      	ldr	r2, [pc, #16]	; (80121a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 801218e:	f043 0304 	orr.w	r3, r3, #4
 8012192:	6013      	str	r3, [r2, #0]
}
 8012194:	bf00      	nop
 8012196:	46bd      	mov	sp, r7
 8012198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219c:	4770      	bx	lr
 801219e:	bf00      	nop
 80121a0:	40021000 	.word	0x40021000

080121a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80121ae:	2300      	movs	r3, #0
 80121b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80121b2:	4b73      	ldr	r3, [pc, #460]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	f003 0303 	and.w	r3, r3, #3
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d018      	beq.n	80121f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80121be:	4b70      	ldr	r3, [pc, #448]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 80121c0:	68db      	ldr	r3, [r3, #12]
 80121c2:	f003 0203 	and.w	r2, r3, #3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d10d      	bne.n	80121ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
       ||
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d009      	beq.n	80121ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80121d6:	4b6a      	ldr	r3, [pc, #424]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	091b      	lsrs	r3, r3, #4
 80121dc:	f003 0307 	and.w	r3, r3, #7
 80121e0:	1c5a      	adds	r2, r3, #1
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	685b      	ldr	r3, [r3, #4]
       ||
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d044      	beq.n	8012274 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80121ea:	2301      	movs	r3, #1
 80121ec:	73fb      	strb	r3, [r7, #15]
 80121ee:	e041      	b.n	8012274 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b02      	cmp	r3, #2
 80121f6:	d00c      	beq.n	8012212 <RCCEx_PLLSAI1_Config+0x6e>
 80121f8:	2b03      	cmp	r3, #3
 80121fa:	d013      	beq.n	8012224 <RCCEx_PLLSAI1_Config+0x80>
 80121fc:	2b01      	cmp	r3, #1
 80121fe:	d120      	bne.n	8012242 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012200:	4b5f      	ldr	r3, [pc, #380]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f003 0302 	and.w	r3, r3, #2
 8012208:	2b00      	cmp	r3, #0
 801220a:	d11d      	bne.n	8012248 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 801220c:	2301      	movs	r3, #1
 801220e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012210:	e01a      	b.n	8012248 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012212:	4b5b      	ldr	r3, [pc, #364]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801221a:	2b00      	cmp	r3, #0
 801221c:	d116      	bne.n	801224c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 801221e:	2301      	movs	r3, #1
 8012220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012222:	e013      	b.n	801224c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012224:	4b56      	ldr	r3, [pc, #344]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10f      	bne.n	8012250 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012230:	4b53      	ldr	r3, [pc, #332]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012238:	2b00      	cmp	r3, #0
 801223a:	d109      	bne.n	8012250 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 801223c:	2301      	movs	r3, #1
 801223e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012240:	e006      	b.n	8012250 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8012242:	2301      	movs	r3, #1
 8012244:	73fb      	strb	r3, [r7, #15]
      break;
 8012246:	e004      	b.n	8012252 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8012248:	bf00      	nop
 801224a:	e002      	b.n	8012252 <RCCEx_PLLSAI1_Config+0xae>
      break;
 801224c:	bf00      	nop
 801224e:	e000      	b.n	8012252 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8012250:	bf00      	nop
    }

    if(status == HAL_OK)
 8012252:	7bfb      	ldrb	r3, [r7, #15]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d10d      	bne.n	8012274 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012258:	4b49      	ldr	r3, [pc, #292]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6819      	ldr	r1, [r3, #0]
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	3b01      	subs	r3, #1
 801226a:	011b      	lsls	r3, r3, #4
 801226c:	430b      	orrs	r3, r1
 801226e:	4944      	ldr	r1, [pc, #272]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012270:	4313      	orrs	r3, r2
 8012272:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012274:	7bfb      	ldrb	r3, [r7, #15]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d17c      	bne.n	8012374 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801227a:	4b41      	ldr	r3, [pc, #260]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	4a40      	ldr	r2, [pc, #256]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012280:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012286:	f7fc fef1 	bl	800f06c <HAL_GetTick>
 801228a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801228c:	e009      	b.n	80122a2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801228e:	f7fc feed 	bl	800f06c <HAL_GetTick>
 8012292:	4602      	mov	r2, r0
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	1ad3      	subs	r3, r2, r3
 8012298:	2b02      	cmp	r3, #2
 801229a:	d902      	bls.n	80122a2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 801229c:	2303      	movs	r3, #3
 801229e:	73fb      	strb	r3, [r7, #15]
        break;
 80122a0:	e005      	b.n	80122ae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80122a2:	4b37      	ldr	r3, [pc, #220]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d1ef      	bne.n	801228e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80122ae:	7bfb      	ldrb	r3, [r7, #15]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d15f      	bne.n	8012374 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d110      	bne.n	80122dc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80122ba:	4b31      	ldr	r3, [pc, #196]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 80122bc:	691b      	ldr	r3, [r3, #16]
 80122be:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80122c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80122c6:	687a      	ldr	r2, [r7, #4]
 80122c8:	6892      	ldr	r2, [r2, #8]
 80122ca:	0211      	lsls	r1, r2, #8
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	68d2      	ldr	r2, [r2, #12]
 80122d0:	06d2      	lsls	r2, r2, #27
 80122d2:	430a      	orrs	r2, r1
 80122d4:	492a      	ldr	r1, [pc, #168]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 80122d6:	4313      	orrs	r3, r2
 80122d8:	610b      	str	r3, [r1, #16]
 80122da:	e027      	b.n	801232c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d112      	bne.n	8012308 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80122e2:	4b27      	ldr	r3, [pc, #156]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 80122e4:	691b      	ldr	r3, [r3, #16]
 80122e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80122ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	6892      	ldr	r2, [r2, #8]
 80122f2:	0211      	lsls	r1, r2, #8
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	6912      	ldr	r2, [r2, #16]
 80122f8:	0852      	lsrs	r2, r2, #1
 80122fa:	3a01      	subs	r2, #1
 80122fc:	0552      	lsls	r2, r2, #21
 80122fe:	430a      	orrs	r2, r1
 8012300:	491f      	ldr	r1, [pc, #124]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012302:	4313      	orrs	r3, r2
 8012304:	610b      	str	r3, [r1, #16]
 8012306:	e011      	b.n	801232c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012308:	4b1d      	ldr	r3, [pc, #116]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 801230a:	691b      	ldr	r3, [r3, #16]
 801230c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8012310:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8012314:	687a      	ldr	r2, [r7, #4]
 8012316:	6892      	ldr	r2, [r2, #8]
 8012318:	0211      	lsls	r1, r2, #8
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	6952      	ldr	r2, [r2, #20]
 801231e:	0852      	lsrs	r2, r2, #1
 8012320:	3a01      	subs	r2, #1
 8012322:	0652      	lsls	r2, r2, #25
 8012324:	430a      	orrs	r2, r1
 8012326:	4916      	ldr	r1, [pc, #88]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012328:	4313      	orrs	r3, r2
 801232a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801232c:	4b14      	ldr	r3, [pc, #80]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	4a13      	ldr	r2, [pc, #76]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012336:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012338:	f7fc fe98 	bl	800f06c <HAL_GetTick>
 801233c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801233e:	e009      	b.n	8012354 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012340:	f7fc fe94 	bl	800f06c <HAL_GetTick>
 8012344:	4602      	mov	r2, r0
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	2b02      	cmp	r3, #2
 801234c:	d902      	bls.n	8012354 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 801234e:	2303      	movs	r3, #3
 8012350:	73fb      	strb	r3, [r7, #15]
          break;
 8012352:	e005      	b.n	8012360 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012354:	4b0a      	ldr	r3, [pc, #40]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801235c:	2b00      	cmp	r3, #0
 801235e:	d0ef      	beq.n	8012340 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8012360:	7bfb      	ldrb	r3, [r7, #15]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d106      	bne.n	8012374 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8012366:	4b06      	ldr	r3, [pc, #24]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012368:	691a      	ldr	r2, [r3, #16]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	699b      	ldr	r3, [r3, #24]
 801236e:	4904      	ldr	r1, [pc, #16]	; (8012380 <RCCEx_PLLSAI1_Config+0x1dc>)
 8012370:	4313      	orrs	r3, r2
 8012372:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8012374:	7bfb      	ldrb	r3, [r7, #15]
}
 8012376:	4618      	mov	r0, r3
 8012378:	3710      	adds	r7, #16
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}
 801237e:	bf00      	nop
 8012380:	40021000 	.word	0x40021000

08012384 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801238e:	2300      	movs	r3, #0
 8012390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8012392:	4b68      	ldr	r3, [pc, #416]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 8012394:	68db      	ldr	r3, [r3, #12]
 8012396:	f003 0303 	and.w	r3, r3, #3
 801239a:	2b00      	cmp	r3, #0
 801239c:	d018      	beq.n	80123d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801239e:	4b65      	ldr	r3, [pc, #404]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	f003 0203 	and.w	r2, r3, #3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d10d      	bne.n	80123ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
       ||
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d009      	beq.n	80123ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80123b6:	4b5f      	ldr	r3, [pc, #380]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 80123b8:	68db      	ldr	r3, [r3, #12]
 80123ba:	091b      	lsrs	r3, r3, #4
 80123bc:	f003 0307 	and.w	r3, r3, #7
 80123c0:	1c5a      	adds	r2, r3, #1
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	685b      	ldr	r3, [r3, #4]
       ||
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d044      	beq.n	8012454 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80123ca:	2301      	movs	r3, #1
 80123cc:	73fb      	strb	r3, [r7, #15]
 80123ce:	e041      	b.n	8012454 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b02      	cmp	r3, #2
 80123d6:	d00c      	beq.n	80123f2 <RCCEx_PLLSAI2_Config+0x6e>
 80123d8:	2b03      	cmp	r3, #3
 80123da:	d013      	beq.n	8012404 <RCCEx_PLLSAI2_Config+0x80>
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d120      	bne.n	8012422 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80123e0:	4b54      	ldr	r3, [pc, #336]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f003 0302 	and.w	r3, r3, #2
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d11d      	bne.n	8012428 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80123ec:	2301      	movs	r3, #1
 80123ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80123f0:	e01a      	b.n	8012428 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80123f2:	4b50      	ldr	r3, [pc, #320]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d116      	bne.n	801242c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80123fe:	2301      	movs	r3, #1
 8012400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012402:	e013      	b.n	801242c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012404:	4b4b      	ldr	r3, [pc, #300]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801240c:	2b00      	cmp	r3, #0
 801240e:	d10f      	bne.n	8012430 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012410:	4b48      	ldr	r3, [pc, #288]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012418:	2b00      	cmp	r3, #0
 801241a:	d109      	bne.n	8012430 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 801241c:	2301      	movs	r3, #1
 801241e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012420:	e006      	b.n	8012430 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8012422:	2301      	movs	r3, #1
 8012424:	73fb      	strb	r3, [r7, #15]
      break;
 8012426:	e004      	b.n	8012432 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8012428:	bf00      	nop
 801242a:	e002      	b.n	8012432 <RCCEx_PLLSAI2_Config+0xae>
      break;
 801242c:	bf00      	nop
 801242e:	e000      	b.n	8012432 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8012430:	bf00      	nop
    }

    if(status == HAL_OK)
 8012432:	7bfb      	ldrb	r3, [r7, #15]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10d      	bne.n	8012454 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012438:	4b3e      	ldr	r3, [pc, #248]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6819      	ldr	r1, [r3, #0]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	3b01      	subs	r3, #1
 801244a:	011b      	lsls	r3, r3, #4
 801244c:	430b      	orrs	r3, r1
 801244e:	4939      	ldr	r1, [pc, #228]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 8012450:	4313      	orrs	r3, r2
 8012452:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012454:	7bfb      	ldrb	r3, [r7, #15]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d166      	bne.n	8012528 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801245a:	4b36      	ldr	r3, [pc, #216]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	4a35      	ldr	r2, [pc, #212]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 8012460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012466:	f7fc fe01 	bl	800f06c <HAL_GetTick>
 801246a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801246c:	e009      	b.n	8012482 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801246e:	f7fc fdfd 	bl	800f06c <HAL_GetTick>
 8012472:	4602      	mov	r2, r0
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	1ad3      	subs	r3, r2, r3
 8012478:	2b02      	cmp	r3, #2
 801247a:	d902      	bls.n	8012482 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 801247c:	2303      	movs	r3, #3
 801247e:	73fb      	strb	r3, [r7, #15]
        break;
 8012480:	e005      	b.n	801248e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012482:	4b2c      	ldr	r3, [pc, #176]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801248a:	2b00      	cmp	r3, #0
 801248c:	d1ef      	bne.n	801246e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 801248e:	7bfb      	ldrb	r3, [r7, #15]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d149      	bne.n	8012528 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d110      	bne.n	80124bc <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801249a:	4b26      	ldr	r3, [pc, #152]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 801249c:	695b      	ldr	r3, [r3, #20]
 801249e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80124a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80124a6:	687a      	ldr	r2, [r7, #4]
 80124a8:	6892      	ldr	r2, [r2, #8]
 80124aa:	0211      	lsls	r1, r2, #8
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	68d2      	ldr	r2, [r2, #12]
 80124b0:	06d2      	lsls	r2, r2, #27
 80124b2:	430a      	orrs	r2, r1
 80124b4:	491f      	ldr	r1, [pc, #124]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 80124b6:	4313      	orrs	r3, r2
 80124b8:	614b      	str	r3, [r1, #20]
 80124ba:	e011      	b.n	80124e0 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80124bc:	4b1d      	ldr	r3, [pc, #116]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 80124be:	695b      	ldr	r3, [r3, #20]
 80124c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80124c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80124c8:	687a      	ldr	r2, [r7, #4]
 80124ca:	6892      	ldr	r2, [r2, #8]
 80124cc:	0211      	lsls	r1, r2, #8
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	6912      	ldr	r2, [r2, #16]
 80124d2:	0852      	lsrs	r2, r2, #1
 80124d4:	3a01      	subs	r2, #1
 80124d6:	0652      	lsls	r2, r2, #25
 80124d8:	430a      	orrs	r2, r1
 80124da:	4916      	ldr	r1, [pc, #88]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 80124dc:	4313      	orrs	r3, r2
 80124de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80124e0:	4b14      	ldr	r3, [pc, #80]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4a13      	ldr	r2, [pc, #76]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 80124e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80124ec:	f7fc fdbe 	bl	800f06c <HAL_GetTick>
 80124f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80124f2:	e009      	b.n	8012508 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80124f4:	f7fc fdba 	bl	800f06c <HAL_GetTick>
 80124f8:	4602      	mov	r2, r0
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	1ad3      	subs	r3, r2, r3
 80124fe:	2b02      	cmp	r3, #2
 8012500:	d902      	bls.n	8012508 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8012502:	2303      	movs	r3, #3
 8012504:	73fb      	strb	r3, [r7, #15]
          break;
 8012506:	e005      	b.n	8012514 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012508:	4b0a      	ldr	r3, [pc, #40]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012510:	2b00      	cmp	r3, #0
 8012512:	d0ef      	beq.n	80124f4 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8012514:	7bfb      	ldrb	r3, [r7, #15]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801251a:	4b06      	ldr	r3, [pc, #24]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 801251c:	695a      	ldr	r2, [r3, #20]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	695b      	ldr	r3, [r3, #20]
 8012522:	4904      	ldr	r1, [pc, #16]	; (8012534 <RCCEx_PLLSAI2_Config+0x1b0>)
 8012524:	4313      	orrs	r3, r2
 8012526:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8012528:	7bfb      	ldrb	r3, [r7, #15]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	40021000 	.word	0x40021000

08012538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d101      	bne.n	801254a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012546:	2301      	movs	r3, #1
 8012548:	e040      	b.n	80125cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801254e:	2b00      	cmp	r3, #0
 8012550:	d106      	bne.n	8012560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2200      	movs	r2, #0
 8012556:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f007 fee6 	bl	801a32c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2224      	movs	r2, #36	; 0x24
 8012564:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f022 0201 	bic.w	r2, r2, #1
 8012574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f000 f82c 	bl	80125d4 <UART_SetConfig>
 801257c:	4603      	mov	r3, r0
 801257e:	2b01      	cmp	r3, #1
 8012580:	d101      	bne.n	8012586 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8012582:	2301      	movs	r3, #1
 8012584:	e022      	b.n	80125cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258a:	2b00      	cmp	r3, #0
 801258c:	d002      	beq.n	8012594 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 fb68 	bl	8012c64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	685a      	ldr	r2, [r3, #4]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80125a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	689a      	ldr	r2, [r3, #8]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80125b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	681a      	ldr	r2, [r3, #0]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f042 0201 	orr.w	r2, r2, #1
 80125c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 fbef 	bl	8012da8 <UART_CheckIdleState>
 80125ca:	4603      	mov	r3, r0
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80125d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80125d8:	b088      	sub	sp, #32
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80125de:	2300      	movs	r3, #0
 80125e0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80125e2:	2300      	movs	r3, #0
 80125e4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80125e6:	2300      	movs	r3, #0
 80125e8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	689a      	ldr	r2, [r3, #8]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	691b      	ldr	r3, [r3, #16]
 80125f2:	431a      	orrs	r2, r3
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	695b      	ldr	r3, [r3, #20]
 80125f8:	431a      	orrs	r2, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	69db      	ldr	r3, [r3, #28]
 80125fe:	4313      	orrs	r3, r2
 8012600:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	681a      	ldr	r2, [r3, #0]
 8012608:	4bac      	ldr	r3, [pc, #688]	; (80128bc <UART_SetConfig+0x2e8>)
 801260a:	4013      	ands	r3, r2
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	6812      	ldr	r2, [r2, #0]
 8012610:	69f9      	ldr	r1, [r7, #28]
 8012612:	430b      	orrs	r3, r1
 8012614:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	68da      	ldr	r2, [r3, #12]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	430a      	orrs	r2, r1
 801262a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	699b      	ldr	r3, [r3, #24]
 8012630:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	4aa2      	ldr	r2, [pc, #648]	; (80128c0 <UART_SetConfig+0x2ec>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d004      	beq.n	8012646 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6a1b      	ldr	r3, [r3, #32]
 8012640:	69fa      	ldr	r2, [r7, #28]
 8012642:	4313      	orrs	r3, r2
 8012644:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	689b      	ldr	r3, [r3, #8]
 801264c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	69fa      	ldr	r2, [r7, #28]
 8012656:	430a      	orrs	r2, r1
 8012658:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	4a99      	ldr	r2, [pc, #612]	; (80128c4 <UART_SetConfig+0x2f0>)
 8012660:	4293      	cmp	r3, r2
 8012662:	d121      	bne.n	80126a8 <UART_SetConfig+0xd4>
 8012664:	4b98      	ldr	r3, [pc, #608]	; (80128c8 <UART_SetConfig+0x2f4>)
 8012666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801266a:	f003 0303 	and.w	r3, r3, #3
 801266e:	2b03      	cmp	r3, #3
 8012670:	d816      	bhi.n	80126a0 <UART_SetConfig+0xcc>
 8012672:	a201      	add	r2, pc, #4	; (adr r2, 8012678 <UART_SetConfig+0xa4>)
 8012674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012678:	08012689 	.word	0x08012689
 801267c:	08012695 	.word	0x08012695
 8012680:	0801268f 	.word	0x0801268f
 8012684:	0801269b 	.word	0x0801269b
 8012688:	2301      	movs	r3, #1
 801268a:	76fb      	strb	r3, [r7, #27]
 801268c:	e0e8      	b.n	8012860 <UART_SetConfig+0x28c>
 801268e:	2302      	movs	r3, #2
 8012690:	76fb      	strb	r3, [r7, #27]
 8012692:	e0e5      	b.n	8012860 <UART_SetConfig+0x28c>
 8012694:	2304      	movs	r3, #4
 8012696:	76fb      	strb	r3, [r7, #27]
 8012698:	e0e2      	b.n	8012860 <UART_SetConfig+0x28c>
 801269a:	2308      	movs	r3, #8
 801269c:	76fb      	strb	r3, [r7, #27]
 801269e:	e0df      	b.n	8012860 <UART_SetConfig+0x28c>
 80126a0:	2310      	movs	r3, #16
 80126a2:	76fb      	strb	r3, [r7, #27]
 80126a4:	bf00      	nop
 80126a6:	e0db      	b.n	8012860 <UART_SetConfig+0x28c>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	4a87      	ldr	r2, [pc, #540]	; (80128cc <UART_SetConfig+0x2f8>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d134      	bne.n	801271c <UART_SetConfig+0x148>
 80126b2:	4b85      	ldr	r3, [pc, #532]	; (80128c8 <UART_SetConfig+0x2f4>)
 80126b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126b8:	f003 030c 	and.w	r3, r3, #12
 80126bc:	2b0c      	cmp	r3, #12
 80126be:	d829      	bhi.n	8012714 <UART_SetConfig+0x140>
 80126c0:	a201      	add	r2, pc, #4	; (adr r2, 80126c8 <UART_SetConfig+0xf4>)
 80126c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126c6:	bf00      	nop
 80126c8:	080126fd 	.word	0x080126fd
 80126cc:	08012715 	.word	0x08012715
 80126d0:	08012715 	.word	0x08012715
 80126d4:	08012715 	.word	0x08012715
 80126d8:	08012709 	.word	0x08012709
 80126dc:	08012715 	.word	0x08012715
 80126e0:	08012715 	.word	0x08012715
 80126e4:	08012715 	.word	0x08012715
 80126e8:	08012703 	.word	0x08012703
 80126ec:	08012715 	.word	0x08012715
 80126f0:	08012715 	.word	0x08012715
 80126f4:	08012715 	.word	0x08012715
 80126f8:	0801270f 	.word	0x0801270f
 80126fc:	2300      	movs	r3, #0
 80126fe:	76fb      	strb	r3, [r7, #27]
 8012700:	e0ae      	b.n	8012860 <UART_SetConfig+0x28c>
 8012702:	2302      	movs	r3, #2
 8012704:	76fb      	strb	r3, [r7, #27]
 8012706:	e0ab      	b.n	8012860 <UART_SetConfig+0x28c>
 8012708:	2304      	movs	r3, #4
 801270a:	76fb      	strb	r3, [r7, #27]
 801270c:	e0a8      	b.n	8012860 <UART_SetConfig+0x28c>
 801270e:	2308      	movs	r3, #8
 8012710:	76fb      	strb	r3, [r7, #27]
 8012712:	e0a5      	b.n	8012860 <UART_SetConfig+0x28c>
 8012714:	2310      	movs	r3, #16
 8012716:	76fb      	strb	r3, [r7, #27]
 8012718:	bf00      	nop
 801271a:	e0a1      	b.n	8012860 <UART_SetConfig+0x28c>
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	4a6b      	ldr	r2, [pc, #428]	; (80128d0 <UART_SetConfig+0x2fc>)
 8012722:	4293      	cmp	r3, r2
 8012724:	d120      	bne.n	8012768 <UART_SetConfig+0x194>
 8012726:	4b68      	ldr	r3, [pc, #416]	; (80128c8 <UART_SetConfig+0x2f4>)
 8012728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801272c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012730:	2b10      	cmp	r3, #16
 8012732:	d00f      	beq.n	8012754 <UART_SetConfig+0x180>
 8012734:	2b10      	cmp	r3, #16
 8012736:	d802      	bhi.n	801273e <UART_SetConfig+0x16a>
 8012738:	2b00      	cmp	r3, #0
 801273a:	d005      	beq.n	8012748 <UART_SetConfig+0x174>
 801273c:	e010      	b.n	8012760 <UART_SetConfig+0x18c>
 801273e:	2b20      	cmp	r3, #32
 8012740:	d005      	beq.n	801274e <UART_SetConfig+0x17a>
 8012742:	2b30      	cmp	r3, #48	; 0x30
 8012744:	d009      	beq.n	801275a <UART_SetConfig+0x186>
 8012746:	e00b      	b.n	8012760 <UART_SetConfig+0x18c>
 8012748:	2300      	movs	r3, #0
 801274a:	76fb      	strb	r3, [r7, #27]
 801274c:	e088      	b.n	8012860 <UART_SetConfig+0x28c>
 801274e:	2302      	movs	r3, #2
 8012750:	76fb      	strb	r3, [r7, #27]
 8012752:	e085      	b.n	8012860 <UART_SetConfig+0x28c>
 8012754:	2304      	movs	r3, #4
 8012756:	76fb      	strb	r3, [r7, #27]
 8012758:	e082      	b.n	8012860 <UART_SetConfig+0x28c>
 801275a:	2308      	movs	r3, #8
 801275c:	76fb      	strb	r3, [r7, #27]
 801275e:	e07f      	b.n	8012860 <UART_SetConfig+0x28c>
 8012760:	2310      	movs	r3, #16
 8012762:	76fb      	strb	r3, [r7, #27]
 8012764:	bf00      	nop
 8012766:	e07b      	b.n	8012860 <UART_SetConfig+0x28c>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4a59      	ldr	r2, [pc, #356]	; (80128d4 <UART_SetConfig+0x300>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d120      	bne.n	80127b4 <UART_SetConfig+0x1e0>
 8012772:	4b55      	ldr	r3, [pc, #340]	; (80128c8 <UART_SetConfig+0x2f4>)
 8012774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012778:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801277c:	2b40      	cmp	r3, #64	; 0x40
 801277e:	d00f      	beq.n	80127a0 <UART_SetConfig+0x1cc>
 8012780:	2b40      	cmp	r3, #64	; 0x40
 8012782:	d802      	bhi.n	801278a <UART_SetConfig+0x1b6>
 8012784:	2b00      	cmp	r3, #0
 8012786:	d005      	beq.n	8012794 <UART_SetConfig+0x1c0>
 8012788:	e010      	b.n	80127ac <UART_SetConfig+0x1d8>
 801278a:	2b80      	cmp	r3, #128	; 0x80
 801278c:	d005      	beq.n	801279a <UART_SetConfig+0x1c6>
 801278e:	2bc0      	cmp	r3, #192	; 0xc0
 8012790:	d009      	beq.n	80127a6 <UART_SetConfig+0x1d2>
 8012792:	e00b      	b.n	80127ac <UART_SetConfig+0x1d8>
 8012794:	2300      	movs	r3, #0
 8012796:	76fb      	strb	r3, [r7, #27]
 8012798:	e062      	b.n	8012860 <UART_SetConfig+0x28c>
 801279a:	2302      	movs	r3, #2
 801279c:	76fb      	strb	r3, [r7, #27]
 801279e:	e05f      	b.n	8012860 <UART_SetConfig+0x28c>
 80127a0:	2304      	movs	r3, #4
 80127a2:	76fb      	strb	r3, [r7, #27]
 80127a4:	e05c      	b.n	8012860 <UART_SetConfig+0x28c>
 80127a6:	2308      	movs	r3, #8
 80127a8:	76fb      	strb	r3, [r7, #27]
 80127aa:	e059      	b.n	8012860 <UART_SetConfig+0x28c>
 80127ac:	2310      	movs	r3, #16
 80127ae:	76fb      	strb	r3, [r7, #27]
 80127b0:	bf00      	nop
 80127b2:	e055      	b.n	8012860 <UART_SetConfig+0x28c>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4a47      	ldr	r2, [pc, #284]	; (80128d8 <UART_SetConfig+0x304>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d124      	bne.n	8012808 <UART_SetConfig+0x234>
 80127be:	4b42      	ldr	r3, [pc, #264]	; (80128c8 <UART_SetConfig+0x2f4>)
 80127c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80127c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80127c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127cc:	d012      	beq.n	80127f4 <UART_SetConfig+0x220>
 80127ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127d2:	d802      	bhi.n	80127da <UART_SetConfig+0x206>
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d007      	beq.n	80127e8 <UART_SetConfig+0x214>
 80127d8:	e012      	b.n	8012800 <UART_SetConfig+0x22c>
 80127da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127de:	d006      	beq.n	80127ee <UART_SetConfig+0x21a>
 80127e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80127e4:	d009      	beq.n	80127fa <UART_SetConfig+0x226>
 80127e6:	e00b      	b.n	8012800 <UART_SetConfig+0x22c>
 80127e8:	2300      	movs	r3, #0
 80127ea:	76fb      	strb	r3, [r7, #27]
 80127ec:	e038      	b.n	8012860 <UART_SetConfig+0x28c>
 80127ee:	2302      	movs	r3, #2
 80127f0:	76fb      	strb	r3, [r7, #27]
 80127f2:	e035      	b.n	8012860 <UART_SetConfig+0x28c>
 80127f4:	2304      	movs	r3, #4
 80127f6:	76fb      	strb	r3, [r7, #27]
 80127f8:	e032      	b.n	8012860 <UART_SetConfig+0x28c>
 80127fa:	2308      	movs	r3, #8
 80127fc:	76fb      	strb	r3, [r7, #27]
 80127fe:	e02f      	b.n	8012860 <UART_SetConfig+0x28c>
 8012800:	2310      	movs	r3, #16
 8012802:	76fb      	strb	r3, [r7, #27]
 8012804:	bf00      	nop
 8012806:	e02b      	b.n	8012860 <UART_SetConfig+0x28c>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	4a2c      	ldr	r2, [pc, #176]	; (80128c0 <UART_SetConfig+0x2ec>)
 801280e:	4293      	cmp	r3, r2
 8012810:	d124      	bne.n	801285c <UART_SetConfig+0x288>
 8012812:	4b2d      	ldr	r3, [pc, #180]	; (80128c8 <UART_SetConfig+0x2f4>)
 8012814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012818:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801281c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012820:	d012      	beq.n	8012848 <UART_SetConfig+0x274>
 8012822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012826:	d802      	bhi.n	801282e <UART_SetConfig+0x25a>
 8012828:	2b00      	cmp	r3, #0
 801282a:	d007      	beq.n	801283c <UART_SetConfig+0x268>
 801282c:	e012      	b.n	8012854 <UART_SetConfig+0x280>
 801282e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012832:	d006      	beq.n	8012842 <UART_SetConfig+0x26e>
 8012834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012838:	d009      	beq.n	801284e <UART_SetConfig+0x27a>
 801283a:	e00b      	b.n	8012854 <UART_SetConfig+0x280>
 801283c:	2300      	movs	r3, #0
 801283e:	76fb      	strb	r3, [r7, #27]
 8012840:	e00e      	b.n	8012860 <UART_SetConfig+0x28c>
 8012842:	2302      	movs	r3, #2
 8012844:	76fb      	strb	r3, [r7, #27]
 8012846:	e00b      	b.n	8012860 <UART_SetConfig+0x28c>
 8012848:	2304      	movs	r3, #4
 801284a:	76fb      	strb	r3, [r7, #27]
 801284c:	e008      	b.n	8012860 <UART_SetConfig+0x28c>
 801284e:	2308      	movs	r3, #8
 8012850:	76fb      	strb	r3, [r7, #27]
 8012852:	e005      	b.n	8012860 <UART_SetConfig+0x28c>
 8012854:	2310      	movs	r3, #16
 8012856:	76fb      	strb	r3, [r7, #27]
 8012858:	bf00      	nop
 801285a:	e001      	b.n	8012860 <UART_SetConfig+0x28c>
 801285c:	2310      	movs	r3, #16
 801285e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4a16      	ldr	r2, [pc, #88]	; (80128c0 <UART_SetConfig+0x2ec>)
 8012866:	4293      	cmp	r3, r2
 8012868:	f040 80fa 	bne.w	8012a60 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801286c:	7efb      	ldrb	r3, [r7, #27]
 801286e:	2b08      	cmp	r3, #8
 8012870:	d836      	bhi.n	80128e0 <UART_SetConfig+0x30c>
 8012872:	a201      	add	r2, pc, #4	; (adr r2, 8012878 <UART_SetConfig+0x2a4>)
 8012874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012878:	0801289d 	.word	0x0801289d
 801287c:	080128e1 	.word	0x080128e1
 8012880:	080128a5 	.word	0x080128a5
 8012884:	080128e1 	.word	0x080128e1
 8012888:	080128ab 	.word	0x080128ab
 801288c:	080128e1 	.word	0x080128e1
 8012890:	080128e1 	.word	0x080128e1
 8012894:	080128e1 	.word	0x080128e1
 8012898:	080128b3 	.word	0x080128b3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 801289c:	f7ff f8ee 	bl	8011a7c <HAL_RCC_GetPCLK1Freq>
 80128a0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80128a2:	e020      	b.n	80128e6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80128a4:	4b0d      	ldr	r3, [pc, #52]	; (80128dc <UART_SetConfig+0x308>)
 80128a6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80128a8:	e01d      	b.n	80128e6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80128aa:	f7ff f851 	bl	8011950 <HAL_RCC_GetSysClockFreq>
 80128ae:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80128b0:	e019      	b.n	80128e6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80128b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80128b6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80128b8:	e015      	b.n	80128e6 <UART_SetConfig+0x312>
 80128ba:	bf00      	nop
 80128bc:	efff69f3 	.word	0xefff69f3
 80128c0:	40008000 	.word	0x40008000
 80128c4:	40013800 	.word	0x40013800
 80128c8:	40021000 	.word	0x40021000
 80128cc:	40004400 	.word	0x40004400
 80128d0:	40004800 	.word	0x40004800
 80128d4:	40004c00 	.word	0x40004c00
 80128d8:	40005000 	.word	0x40005000
 80128dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80128e0:	2301      	movs	r3, #1
 80128e2:	74fb      	strb	r3, [r7, #19]
        break;
 80128e4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 81ac 	beq.w	8012c46 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	685a      	ldr	r2, [r3, #4]
 80128f2:	4613      	mov	r3, r2
 80128f4:	005b      	lsls	r3, r3, #1
 80128f6:	4413      	add	r3, r2
 80128f8:	68fa      	ldr	r2, [r7, #12]
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d305      	bcc.n	801290a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012904:	68fa      	ldr	r2, [r7, #12]
 8012906:	429a      	cmp	r2, r3
 8012908:	d902      	bls.n	8012910 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 801290a:	2301      	movs	r3, #1
 801290c:	74fb      	strb	r3, [r7, #19]
 801290e:	e19a      	b.n	8012c46 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8012910:	7efb      	ldrb	r3, [r7, #27]
 8012912:	2b08      	cmp	r3, #8
 8012914:	f200 8091 	bhi.w	8012a3a <UART_SetConfig+0x466>
 8012918:	a201      	add	r2, pc, #4	; (adr r2, 8012920 <UART_SetConfig+0x34c>)
 801291a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801291e:	bf00      	nop
 8012920:	08012945 	.word	0x08012945
 8012924:	08012a3b 	.word	0x08012a3b
 8012928:	08012991 	.word	0x08012991
 801292c:	08012a3b 	.word	0x08012a3b
 8012930:	080129c5 	.word	0x080129c5
 8012934:	08012a3b 	.word	0x08012a3b
 8012938:	08012a3b 	.word	0x08012a3b
 801293c:	08012a3b 	.word	0x08012a3b
 8012940:	08012a11 	.word	0x08012a11
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012944:	f7ff f89a 	bl	8011a7c <HAL_RCC_GetPCLK1Freq>
 8012948:	4603      	mov	r3, r0
 801294a:	4619      	mov	r1, r3
 801294c:	f04f 0200 	mov.w	r2, #0
 8012950:	f04f 0300 	mov.w	r3, #0
 8012954:	f04f 0400 	mov.w	r4, #0
 8012958:	0214      	lsls	r4, r2, #8
 801295a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 801295e:	020b      	lsls	r3, r1, #8
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	6852      	ldr	r2, [r2, #4]
 8012964:	0852      	lsrs	r2, r2, #1
 8012966:	4611      	mov	r1, r2
 8012968:	f04f 0200 	mov.w	r2, #0
 801296c:	eb13 0b01 	adds.w	fp, r3, r1
 8012970:	eb44 0c02 	adc.w	ip, r4, r2
 8012974:	4658      	mov	r0, fp
 8012976:	4661      	mov	r1, ip
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	f04f 0400 	mov.w	r4, #0
 8012980:	461a      	mov	r2, r3
 8012982:	4623      	mov	r3, r4
 8012984:	f7ed fc8c 	bl	80002a0 <__aeabi_uldivmod>
 8012988:	4603      	mov	r3, r0
 801298a:	460c      	mov	r4, r1
 801298c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 801298e:	e057      	b.n	8012a40 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	085b      	lsrs	r3, r3, #1
 8012996:	f04f 0400 	mov.w	r4, #0
 801299a:	49b1      	ldr	r1, [pc, #708]	; (8012c60 <UART_SetConfig+0x68c>)
 801299c:	f04f 0200 	mov.w	r2, #0
 80129a0:	eb13 0b01 	adds.w	fp, r3, r1
 80129a4:	eb44 0c02 	adc.w	ip, r4, r2
 80129a8:	4658      	mov	r0, fp
 80129aa:	4661      	mov	r1, ip
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	f04f 0400 	mov.w	r4, #0
 80129b4:	461a      	mov	r2, r3
 80129b6:	4623      	mov	r3, r4
 80129b8:	f7ed fc72 	bl	80002a0 <__aeabi_uldivmod>
 80129bc:	4603      	mov	r3, r0
 80129be:	460c      	mov	r4, r1
 80129c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80129c2:	e03d      	b.n	8012a40 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80129c4:	f7fe ffc4 	bl	8011950 <HAL_RCC_GetSysClockFreq>
 80129c8:	4603      	mov	r3, r0
 80129ca:	4619      	mov	r1, r3
 80129cc:	f04f 0200 	mov.w	r2, #0
 80129d0:	f04f 0300 	mov.w	r3, #0
 80129d4:	f04f 0400 	mov.w	r4, #0
 80129d8:	0214      	lsls	r4, r2, #8
 80129da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80129de:	020b      	lsls	r3, r1, #8
 80129e0:	687a      	ldr	r2, [r7, #4]
 80129e2:	6852      	ldr	r2, [r2, #4]
 80129e4:	0852      	lsrs	r2, r2, #1
 80129e6:	4611      	mov	r1, r2
 80129e8:	f04f 0200 	mov.w	r2, #0
 80129ec:	eb13 0b01 	adds.w	fp, r3, r1
 80129f0:	eb44 0c02 	adc.w	ip, r4, r2
 80129f4:	4658      	mov	r0, fp
 80129f6:	4661      	mov	r1, ip
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	f04f 0400 	mov.w	r4, #0
 8012a00:	461a      	mov	r2, r3
 8012a02:	4623      	mov	r3, r4
 8012a04:	f7ed fc4c 	bl	80002a0 <__aeabi_uldivmod>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	460c      	mov	r4, r1
 8012a0c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8012a0e:	e017      	b.n	8012a40 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	085b      	lsrs	r3, r3, #1
 8012a16:	f04f 0400 	mov.w	r4, #0
 8012a1a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8012a1e:	f144 0100 	adc.w	r1, r4, #0
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	f04f 0400 	mov.w	r4, #0
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	4623      	mov	r3, r4
 8012a2e:	f7ed fc37 	bl	80002a0 <__aeabi_uldivmod>
 8012a32:	4603      	mov	r3, r0
 8012a34:	460c      	mov	r4, r1
 8012a36:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8012a38:	e002      	b.n	8012a40 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	74fb      	strb	r3, [r7, #19]
            break;
 8012a3e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012a46:	d308      	bcc.n	8012a5a <UART_SetConfig+0x486>
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012a4e:	d204      	bcs.n	8012a5a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	697a      	ldr	r2, [r7, #20]
 8012a56:	60da      	str	r2, [r3, #12]
 8012a58:	e0f5      	b.n	8012c46 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	74fb      	strb	r3, [r7, #19]
 8012a5e:	e0f2      	b.n	8012c46 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	69db      	ldr	r3, [r3, #28]
 8012a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a68:	d17f      	bne.n	8012b6a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8012a6a:	7efb      	ldrb	r3, [r7, #27]
 8012a6c:	2b08      	cmp	r3, #8
 8012a6e:	d85c      	bhi.n	8012b2a <UART_SetConfig+0x556>
 8012a70:	a201      	add	r2, pc, #4	; (adr r2, 8012a78 <UART_SetConfig+0x4a4>)
 8012a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a76:	bf00      	nop
 8012a78:	08012a9d 	.word	0x08012a9d
 8012a7c:	08012abb 	.word	0x08012abb
 8012a80:	08012ad9 	.word	0x08012ad9
 8012a84:	08012b2b 	.word	0x08012b2b
 8012a88:	08012af5 	.word	0x08012af5
 8012a8c:	08012b2b 	.word	0x08012b2b
 8012a90:	08012b2b 	.word	0x08012b2b
 8012a94:	08012b2b 	.word	0x08012b2b
 8012a98:	08012b13 	.word	0x08012b13
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012a9c:	f7fe ffee 	bl	8011a7c <HAL_RCC_GetPCLK1Freq>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	005a      	lsls	r2, r3, #1
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	085b      	lsrs	r3, r3, #1
 8012aaa:	441a      	add	r2, r3
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012ab8:	e03a      	b.n	8012b30 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8012aba:	f7fe fff5 	bl	8011aa8 <HAL_RCC_GetPCLK2Freq>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	005a      	lsls	r2, r3, #1
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	085b      	lsrs	r3, r3, #1
 8012ac8:	441a      	add	r2, r3
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012ad6:	e02b      	b.n	8012b30 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	085b      	lsrs	r3, r3, #1
 8012ade:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8012ae2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8012ae6:	687a      	ldr	r2, [r7, #4]
 8012ae8:	6852      	ldr	r2, [r2, #4]
 8012aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012af2:	e01d      	b.n	8012b30 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012af4:	f7fe ff2c 	bl	8011950 <HAL_RCC_GetSysClockFreq>
 8012af8:	4603      	mov	r3, r0
 8012afa:	005a      	lsls	r2, r3, #1
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	085b      	lsrs	r3, r3, #1
 8012b02:	441a      	add	r2, r3
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012b10:	e00e      	b.n	8012b30 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	085b      	lsrs	r3, r3, #1
 8012b18:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012b28:	e002      	b.n	8012b30 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	74fb      	strb	r3, [r7, #19]
        break;
 8012b2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	2b0f      	cmp	r3, #15
 8012b34:	d916      	bls.n	8012b64 <UART_SetConfig+0x590>
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b3c:	d212      	bcs.n	8012b64 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	f023 030f 	bic.w	r3, r3, #15
 8012b46:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	085b      	lsrs	r3, r3, #1
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	f003 0307 	and.w	r3, r3, #7
 8012b52:	b29a      	uxth	r2, r3
 8012b54:	897b      	ldrh	r3, [r7, #10]
 8012b56:	4313      	orrs	r3, r2
 8012b58:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	897a      	ldrh	r2, [r7, #10]
 8012b60:	60da      	str	r2, [r3, #12]
 8012b62:	e070      	b.n	8012c46 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8012b64:	2301      	movs	r3, #1
 8012b66:	74fb      	strb	r3, [r7, #19]
 8012b68:	e06d      	b.n	8012c46 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8012b6a:	7efb      	ldrb	r3, [r7, #27]
 8012b6c:	2b08      	cmp	r3, #8
 8012b6e:	d859      	bhi.n	8012c24 <UART_SetConfig+0x650>
 8012b70:	a201      	add	r2, pc, #4	; (adr r2, 8012b78 <UART_SetConfig+0x5a4>)
 8012b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b76:	bf00      	nop
 8012b78:	08012b9d 	.word	0x08012b9d
 8012b7c:	08012bb9 	.word	0x08012bb9
 8012b80:	08012bd5 	.word	0x08012bd5
 8012b84:	08012c25 	.word	0x08012c25
 8012b88:	08012bf1 	.word	0x08012bf1
 8012b8c:	08012c25 	.word	0x08012c25
 8012b90:	08012c25 	.word	0x08012c25
 8012b94:	08012c25 	.word	0x08012c25
 8012b98:	08012c0d 	.word	0x08012c0d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012b9c:	f7fe ff6e 	bl	8011a7c <HAL_RCC_GetPCLK1Freq>
 8012ba0:	4602      	mov	r2, r0
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	085b      	lsrs	r3, r3, #1
 8012ba8:	441a      	add	r2, r3
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012bb6:	e038      	b.n	8012c2a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8012bb8:	f7fe ff76 	bl	8011aa8 <HAL_RCC_GetPCLK2Freq>
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	085b      	lsrs	r3, r3, #1
 8012bc4:	441a      	add	r2, r3
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012bd2:	e02a      	b.n	8012c2a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	085b      	lsrs	r3, r3, #1
 8012bda:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8012bde:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8012be2:	687a      	ldr	r2, [r7, #4]
 8012be4:	6852      	ldr	r2, [r2, #4]
 8012be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012bee:	e01c      	b.n	8012c2a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012bf0:	f7fe feae 	bl	8011950 <HAL_RCC_GetSysClockFreq>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	085b      	lsrs	r3, r3, #1
 8012bfc:	441a      	add	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012c0a:	e00e      	b.n	8012c2a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	685b      	ldr	r3, [r3, #4]
 8012c10:	085b      	lsrs	r3, r3, #1
 8012c12:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8012c22:	e002      	b.n	8012c2a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8012c24:	2301      	movs	r3, #1
 8012c26:	74fb      	strb	r3, [r7, #19]
        break;
 8012c28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	2b0f      	cmp	r3, #15
 8012c2e:	d908      	bls.n	8012c42 <UART_SetConfig+0x66e>
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c36:	d204      	bcs.n	8012c42 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	697a      	ldr	r2, [r7, #20]
 8012c3e:	60da      	str	r2, [r3, #12]
 8012c40:	e001      	b.n	8012c46 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8012c42:	2301      	movs	r3, #1
 8012c44:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8012c52:	7cfb      	ldrb	r3, [r7, #19]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3720      	adds	r7, #32
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8012c5e:	bf00      	nop
 8012c60:	f4240000 	.word	0xf4240000

08012c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012c64:	b480      	push	{r7}
 8012c66:	b083      	sub	sp, #12
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c70:	f003 0301 	and.w	r3, r3, #1
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00a      	beq.n	8012c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	430a      	orrs	r2, r1
 8012c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c92:	f003 0302 	and.w	r3, r3, #2
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d00a      	beq.n	8012cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	685b      	ldr	r3, [r3, #4]
 8012ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	430a      	orrs	r2, r1
 8012cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cb4:	f003 0304 	and.w	r3, r3, #4
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d00a      	beq.n	8012cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	430a      	orrs	r2, r1
 8012cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd6:	f003 0308 	and.w	r3, r3, #8
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d00a      	beq.n	8012cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	430a      	orrs	r2, r1
 8012cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cf8:	f003 0310 	and.w	r3, r3, #16
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d00a      	beq.n	8012d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	689b      	ldr	r3, [r3, #8]
 8012d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	430a      	orrs	r2, r1
 8012d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d1a:	f003 0320 	and.w	r3, r3, #32
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d00a      	beq.n	8012d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	689b      	ldr	r3, [r3, #8]
 8012d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	430a      	orrs	r2, r1
 8012d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d01a      	beq.n	8012d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	430a      	orrs	r2, r1
 8012d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012d62:	d10a      	bne.n	8012d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	430a      	orrs	r2, r1
 8012d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d00a      	beq.n	8012d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	685b      	ldr	r3, [r3, #4]
 8012d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	430a      	orrs	r2, r1
 8012d9a:	605a      	str	r2, [r3, #4]
  }
}
 8012d9c:	bf00      	nop
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr

08012da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b086      	sub	sp, #24
 8012dac:	af02      	add	r7, sp, #8
 8012dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2200      	movs	r2, #0
 8012db4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8012db6:	f7fc f959 	bl	800f06c <HAL_GetTick>
 8012dba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f003 0308 	and.w	r3, r3, #8
 8012dc6:	2b08      	cmp	r3, #8
 8012dc8:	d10e      	bne.n	8012de8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012dca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012dce:	9300      	str	r3, [sp, #0]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 f82a 	bl	8012e32 <UART_WaitOnFlagUntilTimeout>
 8012dde:	4603      	mov	r3, r0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d001      	beq.n	8012de8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012de4:	2303      	movs	r3, #3
 8012de6:	e020      	b.n	8012e2a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f003 0304 	and.w	r3, r3, #4
 8012df2:	2b04      	cmp	r3, #4
 8012df4:	d10e      	bne.n	8012e14 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012df6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012dfa:	9300      	str	r3, [sp, #0]
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f000 f814 	bl	8012e32 <UART_WaitOnFlagUntilTimeout>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d001      	beq.n	8012e14 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012e10:	2303      	movs	r3, #3
 8012e12:	e00a      	b.n	8012e2a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2220      	movs	r2, #32
 8012e18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2220      	movs	r2, #32
 8012e1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2200      	movs	r2, #0
 8012e24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8012e28:	2300      	movs	r3, #0
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3710      	adds	r7, #16
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}

08012e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b084      	sub	sp, #16
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	60f8      	str	r0, [r7, #12]
 8012e3a:	60b9      	str	r1, [r7, #8]
 8012e3c:	603b      	str	r3, [r7, #0]
 8012e3e:	4613      	mov	r3, r2
 8012e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012e42:	e02a      	b.n	8012e9a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012e44:	69bb      	ldr	r3, [r7, #24]
 8012e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012e4a:	d026      	beq.n	8012e9a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012e4c:	f7fc f90e 	bl	800f06c <HAL_GetTick>
 8012e50:	4602      	mov	r2, r0
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	69ba      	ldr	r2, [r7, #24]
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	d302      	bcc.n	8012e62 <UART_WaitOnFlagUntilTimeout+0x30>
 8012e5c:	69bb      	ldr	r3, [r7, #24]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d11b      	bne.n	8012e9a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012e70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	689a      	ldr	r2, [r3, #8]
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f022 0201 	bic.w	r2, r2, #1
 8012e80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	2220      	movs	r2, #32
 8012e86:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2220      	movs	r2, #32
 8012e8c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2200      	movs	r2, #0
 8012e92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8012e96:	2303      	movs	r3, #3
 8012e98:	e00f      	b.n	8012eba <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	69da      	ldr	r2, [r3, #28]
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	4013      	ands	r3, r2
 8012ea4:	68ba      	ldr	r2, [r7, #8]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	bf0c      	ite	eq
 8012eaa:	2301      	moveq	r3, #1
 8012eac:	2300      	movne	r3, #0
 8012eae:	b2db      	uxtb	r3, r3
 8012eb0:	461a      	mov	r2, r3
 8012eb2:	79fb      	ldrb	r3, [r7, #7]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d0c5      	beq.n	8012e44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012eb8:	2300      	movs	r3, #0
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3710      	adds	r7, #16
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012ec2:	b084      	sub	sp, #16
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	f107 001c 	add.w	r0, r7, #28
 8012ed0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed6:	2b01      	cmp	r3, #1
 8012ed8:	d122      	bne.n	8012f20 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ede:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8012eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ef2:	687a      	ldr	r2, [r7, #4]
 8012ef4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	68db      	ldr	r3, [r3, #12]
 8012efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d105      	bne.n	8012f14 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	68db      	ldr	r3, [r3, #12]
 8012f0c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f000 f937 	bl	8013188 <USB_CoreReset>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	73fb      	strb	r3, [r7, #15]
 8012f1e:	e01a      	b.n	8012f56 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f000 f92b 	bl	8013188 <USB_CoreReset>
 8012f32:	4603      	mov	r3, r0
 8012f34:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d106      	bne.n	8012f4a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	639a      	str	r2, [r3, #56]	; 0x38
 8012f48:	e005      	b.n	8012f56 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8012f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012f62:	b004      	add	sp, #16
 8012f64:	4770      	bx	lr

08012f66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f66:	b480      	push	{r7}
 8012f68:	b083      	sub	sp, #12
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	f043 0201 	orr.w	r2, r3, #1
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012f7a:	2300      	movs	r3, #0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f88:	b480      	push	{r7}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	689b      	ldr	r3, [r3, #8]
 8012f94:	f023 0201 	bic.w	r2, r3, #1
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012f9c:	2300      	movs	r3, #0
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	370c      	adds	r7, #12
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa8:	4770      	bx	lr

08012faa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b082      	sub	sp, #8
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
 8012fb2:	460b      	mov	r3, r1
 8012fb4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	68db      	ldr	r3, [r3, #12]
 8012fba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012fc2:	78fb      	ldrb	r3, [r7, #3]
 8012fc4:	2b01      	cmp	r3, #1
 8012fc6:	d106      	bne.n	8012fd6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	60da      	str	r2, [r3, #12]
 8012fd4:	e00b      	b.n	8012fee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8012fd6:	78fb      	ldrb	r3, [r7, #3]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d106      	bne.n	8012fea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	60da      	str	r2, [r3, #12]
 8012fe8:	e001      	b.n	8012fee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8012fea:	2301      	movs	r3, #1
 8012fec:	e003      	b.n	8012ff6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8012fee:	2032      	movs	r0, #50	; 0x32
 8012ff0:	f7fc f848 	bl	800f084 <HAL_Delay>

  return HAL_OK;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
	...

08013000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013000:	b480      	push	{r7}
 8013002:	b085      	sub	sp, #20
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801300a:	2300      	movs	r3, #0
 801300c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	019b      	lsls	r3, r3, #6
 8013012:	f043 0220 	orr.w	r2, r3, #32
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	3301      	adds	r3, #1
 801301e:	60fb      	str	r3, [r7, #12]
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	4a09      	ldr	r2, [pc, #36]	; (8013048 <USB_FlushTxFifo+0x48>)
 8013024:	4293      	cmp	r3, r2
 8013026:	d901      	bls.n	801302c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8013028:	2303      	movs	r3, #3
 801302a:	e006      	b.n	801303a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	691b      	ldr	r3, [r3, #16]
 8013030:	f003 0320 	and.w	r3, r3, #32
 8013034:	2b20      	cmp	r3, #32
 8013036:	d0f0      	beq.n	801301a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8013038:	2300      	movs	r3, #0
}
 801303a:	4618      	mov	r0, r3
 801303c:	3714      	adds	r7, #20
 801303e:	46bd      	mov	sp, r7
 8013040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	00030d40 	.word	0x00030d40

0801304c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801304c:	b480      	push	{r7}
 801304e:	b085      	sub	sp, #20
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8013054:	2300      	movs	r3, #0
 8013056:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2210      	movs	r2, #16
 801305c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	3301      	adds	r3, #1
 8013062:	60fb      	str	r3, [r7, #12]
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	4a09      	ldr	r2, [pc, #36]	; (801308c <USB_FlushRxFifo+0x40>)
 8013068:	4293      	cmp	r3, r2
 801306a:	d901      	bls.n	8013070 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801306c:	2303      	movs	r3, #3
 801306e:	e006      	b.n	801307e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	691b      	ldr	r3, [r3, #16]
 8013074:	f003 0310 	and.w	r3, r3, #16
 8013078:	2b10      	cmp	r3, #16
 801307a:	d0f0      	beq.n	801305e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801307c:	2300      	movs	r3, #0
}
 801307e:	4618      	mov	r0, r3
 8013080:	3714      	adds	r7, #20
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr
 801308a:	bf00      	nop
 801308c:	00030d40 	.word	0x00030d40

08013090 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8013090:	b480      	push	{r7}
 8013092:	b089      	sub	sp, #36	; 0x24
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	4611      	mov	r1, r2
 801309c:	461a      	mov	r2, r3
 801309e:	460b      	mov	r3, r1
 80130a0:	71fb      	strb	r3, [r7, #7]
 80130a2:	4613      	mov	r3, r2
 80130a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80130ae:	88bb      	ldrh	r3, [r7, #4]
 80130b0:	3303      	adds	r3, #3
 80130b2:	089b      	lsrs	r3, r3, #2
 80130b4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80130b6:	2300      	movs	r3, #0
 80130b8:	61bb      	str	r3, [r7, #24]
 80130ba:	e00f      	b.n	80130dc <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80130bc:	79fb      	ldrb	r3, [r7, #7]
 80130be:	031a      	lsls	r2, r3, #12
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	4413      	add	r3, r2
 80130c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80130c8:	461a      	mov	r2, r3
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	6013      	str	r3, [r2, #0]
    pSrc++;
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	3304      	adds	r3, #4
 80130d4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80130d6:	69bb      	ldr	r3, [r7, #24]
 80130d8:	3301      	adds	r3, #1
 80130da:	61bb      	str	r3, [r7, #24]
 80130dc:	69ba      	ldr	r2, [r7, #24]
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d3eb      	bcc.n	80130bc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80130e4:	2300      	movs	r3, #0
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3724      	adds	r7, #36	; 0x24
 80130ea:	46bd      	mov	sp, r7
 80130ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f0:	4770      	bx	lr

080130f2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80130f2:	b480      	push	{r7}
 80130f4:	b089      	sub	sp, #36	; 0x24
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	60f8      	str	r0, [r7, #12]
 80130fa:	60b9      	str	r1, [r7, #8]
 80130fc:	4613      	mov	r3, r2
 80130fe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8013108:	88fb      	ldrh	r3, [r7, #6]
 801310a:	3303      	adds	r3, #3
 801310c:	089b      	lsrs	r3, r3, #2
 801310e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8013110:	2300      	movs	r3, #0
 8013112:	61bb      	str	r3, [r7, #24]
 8013114:	e00b      	b.n	801312e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801311c:	681a      	ldr	r2, [r3, #0]
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	601a      	str	r2, [r3, #0]
    pDest++;
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	3304      	adds	r3, #4
 8013126:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8013128:	69bb      	ldr	r3, [r7, #24]
 801312a:	3301      	adds	r3, #1
 801312c:	61bb      	str	r3, [r7, #24]
 801312e:	69ba      	ldr	r2, [r7, #24]
 8013130:	693b      	ldr	r3, [r7, #16]
 8013132:	429a      	cmp	r2, r3
 8013134:	d3ef      	bcc.n	8013116 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8013136:	69fb      	ldr	r3, [r7, #28]
}
 8013138:	4618      	mov	r0, r3
 801313a:	3724      	adds	r7, #36	; 0x24
 801313c:	46bd      	mov	sp, r7
 801313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013142:	4770      	bx	lr

08013144 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013144:	b480      	push	{r7}
 8013146:	b085      	sub	sp, #20
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	695b      	ldr	r3, [r3, #20]
 8013150:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	699b      	ldr	r3, [r3, #24]
 8013156:	68fa      	ldr	r2, [r7, #12]
 8013158:	4013      	ands	r3, r2
 801315a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801315c:	68fb      	ldr	r3, [r7, #12]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3714      	adds	r7, #20
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr

0801316a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801316a:	b480      	push	{r7}
 801316c:	b083      	sub	sp, #12
 801316e:	af00      	add	r7, sp, #0
 8013170:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	695b      	ldr	r3, [r3, #20]
 8013176:	f003 0301 	and.w	r3, r3, #1
}
 801317a:	4618      	mov	r0, r3
 801317c:	370c      	adds	r7, #12
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr
	...

08013188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013188:	b480      	push	{r7}
 801318a:	b085      	sub	sp, #20
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8013190:	2300      	movs	r3, #0
 8013192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	3301      	adds	r3, #1
 8013198:	60fb      	str	r3, [r7, #12]
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	4a13      	ldr	r2, [pc, #76]	; (80131ec <USB_CoreReset+0x64>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	d901      	bls.n	80131a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80131a2:	2303      	movs	r3, #3
 80131a4:	e01b      	b.n	80131de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	691b      	ldr	r3, [r3, #16]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	daf2      	bge.n	8013194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80131ae:	2300      	movs	r3, #0
 80131b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	691b      	ldr	r3, [r3, #16]
 80131b6:	f043 0201 	orr.w	r2, r3, #1
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	3301      	adds	r3, #1
 80131c2:	60fb      	str	r3, [r7, #12]
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	4a09      	ldr	r2, [pc, #36]	; (80131ec <USB_CoreReset+0x64>)
 80131c8:	4293      	cmp	r3, r2
 80131ca:	d901      	bls.n	80131d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80131cc:	2303      	movs	r3, #3
 80131ce:	e006      	b.n	80131de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	691b      	ldr	r3, [r3, #16]
 80131d4:	f003 0301 	and.w	r3, r3, #1
 80131d8:	2b01      	cmp	r3, #1
 80131da:	d0f0      	beq.n	80131be <USB_CoreReset+0x36>

  return HAL_OK;
 80131dc:	2300      	movs	r3, #0
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3714      	adds	r7, #20
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	00030d40 	.word	0x00030d40

080131f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80131f0:	b084      	sub	sp, #16
 80131f2:	b580      	push	{r7, lr}
 80131f4:	b084      	sub	sp, #16
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	6078      	str	r0, [r7, #4]
 80131fa:	f107 001c 	add.w	r0, r7, #28
 80131fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801320c:	461a      	mov	r2, r3
 801320e:	2300      	movs	r3, #0
 8013210:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013216:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013222:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	68ba      	ldr	r2, [r7, #8]
 8013234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013238:	f023 0304 	bic.w	r3, r3, #4
 801323c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 801323e:	2110      	movs	r1, #16
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f7ff fedd 	bl	8013000 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7ff ff00 	bl	801304c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801324c:	2300      	movs	r3, #0
 801324e:	60fb      	str	r3, [r7, #12]
 8013250:	e015      	b.n	801327e <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	015a      	lsls	r2, r3, #5
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	4413      	add	r3, r2
 801325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801325e:	461a      	mov	r2, r3
 8013260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013264:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	015a      	lsls	r2, r3, #5
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	4413      	add	r3, r2
 801326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013272:	461a      	mov	r2, r3
 8013274:	2300      	movs	r3, #0
 8013276:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	3301      	adds	r3, #1
 801327c:	60fb      	str	r3, [r7, #12]
 801327e:	6a3b      	ldr	r3, [r7, #32]
 8013280:	68fa      	ldr	r2, [r7, #12]
 8013282:	429a      	cmp	r2, r3
 8013284:	d3e5      	bcc.n	8013252 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8013286:	2101      	movs	r1, #1
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f000 f893 	bl	80133b4 <USB_DriveVbus>

  HAL_Delay(200U);
 801328e:	20c8      	movs	r0, #200	; 0xc8
 8013290:	f7fb fef8 	bl	800f084 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2200      	movs	r2, #0
 8013298:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132a0:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2280      	movs	r2, #128	; 0x80
 80132a6:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	4a0d      	ldr	r2, [pc, #52]	; (80132e0 <USB_HostInit+0xf0>)
 80132ac:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	4a0c      	ldr	r2, [pc, #48]	; (80132e4 <USB_HostInit+0xf4>)
 80132b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	699b      	ldr	r3, [r3, #24]
 80132ba:	f043 0210 	orr.w	r2, r3, #16
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	699a      	ldr	r2, [r3, #24]
 80132c6:	4b08      	ldr	r3, [pc, #32]	; (80132e8 <USB_HostInit+0xf8>)
 80132c8:	4313      	orrs	r3, r2
 80132ca:	687a      	ldr	r2, [r7, #4]
 80132cc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80132ce:	2300      	movs	r3, #0
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3710      	adds	r7, #16
 80132d4:	46bd      	mov	sp, r7
 80132d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80132da:	b004      	add	sp, #16
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	00600080 	.word	0x00600080
 80132e4:	004000e0 	.word	0x004000e0
 80132e8:	a3200008 	.word	0xa3200008

080132ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80132ec:	b480      	push	{r7}
 80132ee:	b085      	sub	sp, #20
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	460b      	mov	r3, r1
 80132f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	68fa      	ldr	r2, [r7, #12]
 8013306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801330a:	f023 0303 	bic.w	r3, r3, #3
 801330e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	78fb      	ldrb	r3, [r7, #3]
 801331a:	f003 0303 	and.w	r3, r3, #3
 801331e:	68f9      	ldr	r1, [r7, #12]
 8013320:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013324:	4313      	orrs	r3, r2
 8013326:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8013328:	78fb      	ldrb	r3, [r7, #3]
 801332a:	2b01      	cmp	r3, #1
 801332c:	d107      	bne.n	801333e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013334:	461a      	mov	r2, r3
 8013336:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801333a:	6053      	str	r3, [r2, #4]
 801333c:	e009      	b.n	8013352 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801333e:	78fb      	ldrb	r3, [r7, #3]
 8013340:	2b02      	cmp	r3, #2
 8013342:	d106      	bne.n	8013352 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801334a:	461a      	mov	r2, r3
 801334c:	f241 7370 	movw	r3, #6000	; 0x1770
 8013350:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	3714      	adds	r7, #20
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr

08013360 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 801336c:	2300      	movs	r3, #0
 801336e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8013380:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	68fa      	ldr	r2, [r7, #12]
 8013386:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801338a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801338e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8013390:	2064      	movs	r0, #100	; 0x64
 8013392:	f7fb fe77 	bl	800f084 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	68fa      	ldr	r2, [r7, #12]
 801339a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801339e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80133a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80133a4:	200a      	movs	r0, #10
 80133a6:	f7fb fe6d 	bl	800f084 <HAL_Delay>

  return HAL_OK;
 80133aa:	2300      	movs	r3, #0
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3710      	adds	r7, #16
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80133b4:	b480      	push	{r7}
 80133b6:	b085      	sub	sp, #20
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	460b      	mov	r3, r1
 80133be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80133c4:	2300      	movs	r3, #0
 80133c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80133d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d109      	bne.n	80133f8 <USB_DriveVbus+0x44>
 80133e4:	78fb      	ldrb	r3, [r7, #3]
 80133e6:	2b01      	cmp	r3, #1
 80133e8:	d106      	bne.n	80133f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	68fa      	ldr	r2, [r7, #12]
 80133ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80133f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80133f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80133fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013402:	d109      	bne.n	8013418 <USB_DriveVbus+0x64>
 8013404:	78fb      	ldrb	r3, [r7, #3]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d106      	bne.n	8013418 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	68fa      	ldr	r2, [r7, #12]
 801340e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8013412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013416:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8013418:	2300      	movs	r3, #0
}
 801341a:	4618      	mov	r0, r3
 801341c:	3714      	adds	r7, #20
 801341e:	46bd      	mov	sp, r7
 8013420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013424:	4770      	bx	lr

08013426 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013426:	b480      	push	{r7}
 8013428:	b085      	sub	sp, #20
 801342a:	af00      	add	r7, sp, #0
 801342c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8013432:	2300      	movs	r3, #0
 8013434:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	0c5b      	lsrs	r3, r3, #17
 8013444:	f003 0303 	and.w	r3, r3, #3
}
 8013448:	4618      	mov	r0, r3
 801344a:	3714      	adds	r7, #20
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr

08013454 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013466:	689b      	ldr	r3, [r3, #8]
 8013468:	b29b      	uxth	r3, r3
}
 801346a:	4618      	mov	r0, r3
 801346c:	3714      	adds	r7, #20
 801346e:	46bd      	mov	sp, r7
 8013470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013474:	4770      	bx	lr
	...

08013478 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8013478:	b480      	push	{r7}
 801347a:	b087      	sub	sp, #28
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	4608      	mov	r0, r1
 8013482:	4611      	mov	r1, r2
 8013484:	461a      	mov	r2, r3
 8013486:	4603      	mov	r3, r0
 8013488:	70fb      	strb	r3, [r7, #3]
 801348a:	460b      	mov	r3, r1
 801348c:	70bb      	strb	r3, [r7, #2]
 801348e:	4613      	mov	r3, r2
 8013490:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8013492:	2300      	movs	r3, #0
 8013494:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 801349a:	78fb      	ldrb	r3, [r7, #3]
 801349c:	015a      	lsls	r2, r3, #5
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	4413      	add	r3, r2
 80134a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134a6:	461a      	mov	r2, r3
 80134a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80134ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80134b2:	2b03      	cmp	r3, #3
 80134b4:	d867      	bhi.n	8013586 <USB_HC_Init+0x10e>
 80134b6:	a201      	add	r2, pc, #4	; (adr r2, 80134bc <USB_HC_Init+0x44>)
 80134b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134bc:	080134cd 	.word	0x080134cd
 80134c0:	08013549 	.word	0x08013549
 80134c4:	080134cd 	.word	0x080134cd
 80134c8:	0801350b 	.word	0x0801350b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80134cc:	78fb      	ldrb	r3, [r7, #3]
 80134ce:	015a      	lsls	r2, r3, #5
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	4413      	add	r3, r2
 80134d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134d8:	461a      	mov	r2, r3
 80134da:	f240 439d 	movw	r3, #1181	; 0x49d
 80134de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80134e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	da51      	bge.n	801358c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80134e8:	78fb      	ldrb	r3, [r7, #3]
 80134ea:	015a      	lsls	r2, r3, #5
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	4413      	add	r3, r2
 80134f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134f4:	68db      	ldr	r3, [r3, #12]
 80134f6:	78fa      	ldrb	r2, [r7, #3]
 80134f8:	0151      	lsls	r1, r2, #5
 80134fa:	68ba      	ldr	r2, [r7, #8]
 80134fc:	440a      	add	r2, r1
 80134fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013506:	60d3      	str	r3, [r2, #12]
      }
      break;
 8013508:	e040      	b.n	801358c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 801350a:	78fb      	ldrb	r3, [r7, #3]
 801350c:	015a      	lsls	r2, r3, #5
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	4413      	add	r3, r2
 8013512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013516:	461a      	mov	r2, r3
 8013518:	f240 639d 	movw	r3, #1693	; 0x69d
 801351c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801351e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013522:	2b00      	cmp	r3, #0
 8013524:	da34      	bge.n	8013590 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013526:	78fb      	ldrb	r3, [r7, #3]
 8013528:	015a      	lsls	r2, r3, #5
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	4413      	add	r3, r2
 801352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	78fa      	ldrb	r2, [r7, #3]
 8013536:	0151      	lsls	r1, r2, #5
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	440a      	add	r2, r1
 801353c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013544:	60d3      	str	r3, [r2, #12]
      }

      break;
 8013546:	e023      	b.n	8013590 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013548:	78fb      	ldrb	r3, [r7, #3]
 801354a:	015a      	lsls	r2, r3, #5
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	4413      	add	r3, r2
 8013550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013554:	461a      	mov	r2, r3
 8013556:	f240 2325 	movw	r3, #549	; 0x225
 801355a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801355c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013560:	2b00      	cmp	r3, #0
 8013562:	da17      	bge.n	8013594 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8013564:	78fb      	ldrb	r3, [r7, #3]
 8013566:	015a      	lsls	r2, r3, #5
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	4413      	add	r3, r2
 801356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013570:	68db      	ldr	r3, [r3, #12]
 8013572:	78fa      	ldrb	r2, [r7, #3]
 8013574:	0151      	lsls	r1, r2, #5
 8013576:	68ba      	ldr	r2, [r7, #8]
 8013578:	440a      	add	r2, r1
 801357a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801357e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8013582:	60d3      	str	r3, [r2, #12]
      }
      break;
 8013584:	e006      	b.n	8013594 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8013586:	2301      	movs	r3, #1
 8013588:	75fb      	strb	r3, [r7, #23]
      break;
 801358a:	e004      	b.n	8013596 <USB_HC_Init+0x11e>
      break;
 801358c:	bf00      	nop
 801358e:	e002      	b.n	8013596 <USB_HC_Init+0x11e>
      break;
 8013590:	bf00      	nop
 8013592:	e000      	b.n	8013596 <USB_HC_Init+0x11e>
      break;
 8013594:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801359c:	699a      	ldr	r2, [r3, #24]
 801359e:	78fb      	ldrb	r3, [r7, #3]
 80135a0:	f003 030f 	and.w	r3, r3, #15
 80135a4:	2101      	movs	r1, #1
 80135a6:	fa01 f303 	lsl.w	r3, r1, r3
 80135aa:	68b9      	ldr	r1, [r7, #8]
 80135ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80135b0:	4313      	orrs	r3, r2
 80135b2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	699b      	ldr	r3, [r3, #24]
 80135b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80135c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	da03      	bge.n	80135d0 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80135c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80135cc:	613b      	str	r3, [r7, #16]
 80135ce:	e001      	b.n	80135d4 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80135d0:	2300      	movs	r3, #0
 80135d2:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80135d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80135d8:	2b02      	cmp	r3, #2
 80135da:	d103      	bne.n	80135e4 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80135dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80135e0:	60fb      	str	r3, [r7, #12]
 80135e2:	e001      	b.n	80135e8 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80135e4:	2300      	movs	r3, #0
 80135e6:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80135e8:	787b      	ldrb	r3, [r7, #1]
 80135ea:	059b      	lsls	r3, r3, #22
 80135ec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80135f0:	78bb      	ldrb	r3, [r7, #2]
 80135f2:	02db      	lsls	r3, r3, #11
 80135f4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80135f8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80135fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80135fe:	049b      	lsls	r3, r3, #18
 8013600:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8013604:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013606:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013608:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801360c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013612:	78fb      	ldrb	r3, [r7, #3]
 8013614:	0159      	lsls	r1, r3, #5
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	440b      	add	r3, r1
 801361a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801361e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013624:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8013626:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801362a:	2b03      	cmp	r3, #3
 801362c:	d10f      	bne.n	801364e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 801362e:	78fb      	ldrb	r3, [r7, #3]
 8013630:	015a      	lsls	r2, r3, #5
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	4413      	add	r3, r2
 8013636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	78fa      	ldrb	r2, [r7, #3]
 801363e:	0151      	lsls	r1, r2, #5
 8013640:	68ba      	ldr	r2, [r7, #8]
 8013642:	440a      	add	r2, r1
 8013644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801364c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 801364e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013650:	4618      	mov	r0, r3
 8013652:	371c      	adds	r7, #28
 8013654:	46bd      	mov	sp, r7
 8013656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365a:	4770      	bx	lr

0801365c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b088      	sub	sp, #32
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	785b      	ldrb	r3, [r3, #1]
 801366e:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8013670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013674:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	691b      	ldr	r3, [r3, #16]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d018      	beq.n	80136b0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	691b      	ldr	r3, [r3, #16]
 8013682:	683a      	ldr	r2, [r7, #0]
 8013684:	8912      	ldrh	r2, [r2, #8]
 8013686:	4413      	add	r3, r2
 8013688:	3b01      	subs	r3, #1
 801368a:	683a      	ldr	r2, [r7, #0]
 801368c:	8912      	ldrh	r2, [r2, #8]
 801368e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013692:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8013694:	8bfa      	ldrh	r2, [r7, #30]
 8013696:	8a7b      	ldrh	r3, [r7, #18]
 8013698:	429a      	cmp	r2, r3
 801369a:	d90b      	bls.n	80136b4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 801369c:	8a7b      	ldrh	r3, [r7, #18]
 801369e:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80136a0:	8bfb      	ldrh	r3, [r7, #30]
 80136a2:	683a      	ldr	r2, [r7, #0]
 80136a4:	8912      	ldrh	r2, [r2, #8]
 80136a6:	fb02 f203 	mul.w	r2, r2, r3
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	611a      	str	r2, [r3, #16]
 80136ae:	e001      	b.n	80136b4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80136b0:	2301      	movs	r3, #1
 80136b2:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	78db      	ldrb	r3, [r3, #3]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d006      	beq.n	80136ca <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80136bc:	8bfb      	ldrh	r3, [r7, #30]
 80136be:	683a      	ldr	r2, [r7, #0]
 80136c0:	8912      	ldrh	r2, [r2, #8]
 80136c2:	fb02 f203 	mul.w	r2, r2, r3
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	691b      	ldr	r3, [r3, #16]
 80136ce:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80136d2:	8bfb      	ldrh	r3, [r7, #30]
 80136d4:	04d9      	lsls	r1, r3, #19
 80136d6:	4b5f      	ldr	r3, [pc, #380]	; (8013854 <USB_HC_StartXfer+0x1f8>)
 80136d8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80136da:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	7a9b      	ldrb	r3, [r3, #10]
 80136e0:	075b      	lsls	r3, r3, #29
 80136e2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80136e6:	6979      	ldr	r1, [r7, #20]
 80136e8:	0148      	lsls	r0, r1, #5
 80136ea:	69b9      	ldr	r1, [r7, #24]
 80136ec:	4401      	add	r1, r0
 80136ee:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80136f2:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80136f4:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80136f6:	69bb      	ldr	r3, [r7, #24]
 80136f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80136fc:	689b      	ldr	r3, [r3, #8]
 80136fe:	f003 0301 	and.w	r3, r3, #1
 8013702:	2b00      	cmp	r3, #0
 8013704:	bf0c      	ite	eq
 8013706:	2301      	moveq	r3, #1
 8013708:	2300      	movne	r3, #0
 801370a:	b2db      	uxtb	r3, r3
 801370c:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	015a      	lsls	r2, r3, #5
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	4413      	add	r3, r2
 8013716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	697a      	ldr	r2, [r7, #20]
 801371e:	0151      	lsls	r1, r2, #5
 8013720:	69ba      	ldr	r2, [r7, #24]
 8013722:	440a      	add	r2, r1
 8013724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013728:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801372c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	015a      	lsls	r2, r3, #5
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	4413      	add	r3, r2
 8013736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	7c7b      	ldrb	r3, [r7, #17]
 801373e:	075b      	lsls	r3, r3, #29
 8013740:	6979      	ldr	r1, [r7, #20]
 8013742:	0148      	lsls	r0, r1, #5
 8013744:	69b9      	ldr	r1, [r7, #24]
 8013746:	4401      	add	r1, r0
 8013748:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 801374c:	4313      	orrs	r3, r2
 801374e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	015a      	lsls	r2, r3, #5
 8013754:	69bb      	ldr	r3, [r7, #24]
 8013756:	4413      	add	r3, r2
 8013758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	4a3e      	ldr	r2, [pc, #248]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 8013760:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8013762:	4b3d      	ldr	r3, [pc, #244]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801376a:	4a3b      	ldr	r2, [pc, #236]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 801376c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	78db      	ldrb	r3, [r3, #3]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d006      	beq.n	8013784 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8013776:	4b38      	ldr	r3, [pc, #224]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801377e:	4a36      	ldr	r2, [pc, #216]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 8013780:	6013      	str	r3, [r2, #0]
 8013782:	e005      	b.n	8013790 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8013784:	4b34      	ldr	r3, [pc, #208]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801378c:	4a32      	ldr	r2, [pc, #200]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 801378e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8013790:	4b31      	ldr	r3, [pc, #196]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013798:	4a2f      	ldr	r2, [pc, #188]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 801379a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	015a      	lsls	r2, r3, #5
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	4413      	add	r3, r2
 80137a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137a8:	461a      	mov	r2, r3
 80137aa:	4b2b      	ldr	r3, [pc, #172]	; (8013858 <USB_HC_StartXfer+0x1fc>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	78db      	ldrb	r3, [r3, #3]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d148      	bne.n	801384a <USB_HC_StartXfer+0x1ee>
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	691b      	ldr	r3, [r3, #16]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d044      	beq.n	801384a <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	79db      	ldrb	r3, [r3, #7]
 80137c4:	2b03      	cmp	r3, #3
 80137c6:	d831      	bhi.n	801382c <USB_HC_StartXfer+0x1d0>
 80137c8:	a201      	add	r2, pc, #4	; (adr r2, 80137d0 <USB_HC_StartXfer+0x174>)
 80137ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137ce:	bf00      	nop
 80137d0:	080137e1 	.word	0x080137e1
 80137d4:	08013805 	.word	0x08013805
 80137d8:	080137e1 	.word	0x080137e1
 80137dc:	08013805 	.word	0x08013805
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	691b      	ldr	r3, [r3, #16]
 80137e4:	3303      	adds	r3, #3
 80137e6:	089b      	lsrs	r3, r3, #2
 80137e8:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80137ea:	89fa      	ldrh	r2, [r7, #14]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137f0:	b29b      	uxth	r3, r3
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d91c      	bls.n	8013830 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	699b      	ldr	r3, [r3, #24]
 80137fa:	f043 0220 	orr.w	r2, r3, #32
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	619a      	str	r2, [r3, #24]
          }
          break;
 8013802:	e015      	b.n	8013830 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	691b      	ldr	r3, [r3, #16]
 8013808:	3303      	adds	r3, #3
 801380a:	089b      	lsrs	r3, r3, #2
 801380c:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801380e:	89fa      	ldrh	r2, [r7, #14]
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013816:	691b      	ldr	r3, [r3, #16]
 8013818:	b29b      	uxth	r3, r3
 801381a:	429a      	cmp	r2, r3
 801381c:	d90a      	bls.n	8013834 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	699b      	ldr	r3, [r3, #24]
 8013822:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	619a      	str	r2, [r3, #24]
          }
          break;
 801382a:	e003      	b.n	8013834 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 801382c:	bf00      	nop
 801382e:	e002      	b.n	8013836 <USB_HC_StartXfer+0x1da>
          break;
 8013830:	bf00      	nop
 8013832:	e000      	b.n	8013836 <USB_HC_StartXfer+0x1da>
          break;
 8013834:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	68d9      	ldr	r1, [r3, #12]
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	785a      	ldrb	r2, [r3, #1]
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	691b      	ldr	r3, [r3, #16]
 8013842:	b29b      	uxth	r3, r3
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f7ff fc23 	bl	8013090 <USB_WritePacket>
    }

  return HAL_OK;
 801384a:	2300      	movs	r3, #0
}
 801384c:	4618      	mov	r0, r3
 801384e:	3720      	adds	r7, #32
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}
 8013854:	1ff80000 	.word	0x1ff80000
 8013858:	2000c338 	.word	0x2000c338

0801385c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801385c:	b480      	push	{r7}
 801385e:	b085      	sub	sp, #20
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801386e:	695b      	ldr	r3, [r3, #20]
 8013870:	b29b      	uxth	r3, r3
}
 8013872:	4618      	mov	r0, r3
 8013874:	3714      	adds	r7, #20
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr

0801387e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 801387e:	b480      	push	{r7}
 8013880:	b087      	sub	sp, #28
 8013882:	af00      	add	r7, sp, #0
 8013884:	6078      	str	r0, [r7, #4]
 8013886:	460b      	mov	r3, r1
 8013888:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 801388e:	78fb      	ldrb	r3, [r7, #3]
 8013890:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8013892:	2300      	movs	r3, #0
 8013894:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	015a      	lsls	r2, r3, #5
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	4413      	add	r3, r2
 801389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	0c9b      	lsrs	r3, r3, #18
 80138a6:	f003 0303 	and.w	r3, r3, #3
 80138aa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d002      	beq.n	80138b8 <USB_HC_Halt+0x3a>
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	2b02      	cmp	r3, #2
 80138b6:	d16c      	bne.n	8013992 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	015a      	lsls	r2, r3, #5
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	4413      	add	r3, r2
 80138c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	68fa      	ldr	r2, [r7, #12]
 80138c8:	0151      	lsls	r1, r2, #5
 80138ca:	693a      	ldr	r2, [r7, #16]
 80138cc:	440a      	add	r2, r1
 80138ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80138d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80138d6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d143      	bne.n	801396c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	015a      	lsls	r2, r3, #5
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	4413      	add	r3, r2
 80138ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	0151      	lsls	r1, r2, #5
 80138f6:	693a      	ldr	r2, [r7, #16]
 80138f8:	440a      	add	r2, r1
 80138fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80138fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013902:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	015a      	lsls	r2, r3, #5
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	4413      	add	r3, r2
 801390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	68fa      	ldr	r2, [r7, #12]
 8013914:	0151      	lsls	r1, r2, #5
 8013916:	693a      	ldr	r2, [r7, #16]
 8013918:	440a      	add	r2, r1
 801391a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801391e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013922:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	015a      	lsls	r2, r3, #5
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	4413      	add	r3, r2
 801392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	68fa      	ldr	r2, [r7, #12]
 8013934:	0151      	lsls	r1, r2, #5
 8013936:	693a      	ldr	r2, [r7, #16]
 8013938:	440a      	add	r2, r1
 801393a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801393e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013942:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	3301      	adds	r3, #1
 8013948:	617b      	str	r3, [r7, #20]
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013950:	d81d      	bhi.n	801398e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	015a      	lsls	r2, r3, #5
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	4413      	add	r3, r2
 801395a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013968:	d0ec      	beq.n	8013944 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801396a:	e080      	b.n	8013a6e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	015a      	lsls	r2, r3, #5
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	4413      	add	r3, r2
 8013974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	68fa      	ldr	r2, [r7, #12]
 801397c:	0151      	lsls	r1, r2, #5
 801397e:	693a      	ldr	r2, [r7, #16]
 8013980:	440a      	add	r2, r1
 8013982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801398a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801398c:	e06f      	b.n	8013a6e <USB_HC_Halt+0x1f0>
          break;
 801398e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8013990:	e06d      	b.n	8013a6e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	015a      	lsls	r2, r3, #5
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	4413      	add	r3, r2
 801399a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	68fa      	ldr	r2, [r7, #12]
 80139a2:	0151      	lsls	r1, r2, #5
 80139a4:	693a      	ldr	r2, [r7, #16]
 80139a6:	440a      	add	r2, r1
 80139a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80139ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139b0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80139b8:	691b      	ldr	r3, [r3, #16]
 80139ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d143      	bne.n	8013a4a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	015a      	lsls	r2, r3, #5
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	4413      	add	r3, r2
 80139ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	68fa      	ldr	r2, [r7, #12]
 80139d2:	0151      	lsls	r1, r2, #5
 80139d4:	693a      	ldr	r2, [r7, #16]
 80139d6:	440a      	add	r2, r1
 80139d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80139dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80139e0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	015a      	lsls	r2, r3, #5
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	4413      	add	r3, r2
 80139ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	68fa      	ldr	r2, [r7, #12]
 80139f2:	0151      	lsls	r1, r2, #5
 80139f4:	693a      	ldr	r2, [r7, #16]
 80139f6:	440a      	add	r2, r1
 80139f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80139fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013a00:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	015a      	lsls	r2, r3, #5
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	4413      	add	r3, r2
 8013a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	68fa      	ldr	r2, [r7, #12]
 8013a12:	0151      	lsls	r1, r2, #5
 8013a14:	693a      	ldr	r2, [r7, #16]
 8013a16:	440a      	add	r2, r1
 8013a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013a20:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	3301      	adds	r3, #1
 8013a26:	617b      	str	r3, [r7, #20]
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013a2e:	d81d      	bhi.n	8013a6c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	015a      	lsls	r2, r3, #5
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	4413      	add	r3, r2
 8013a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a46:	d0ec      	beq.n	8013a22 <USB_HC_Halt+0x1a4>
 8013a48:	e011      	b.n	8013a6e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	015a      	lsls	r2, r3, #5
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	4413      	add	r3, r2
 8013a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	68fa      	ldr	r2, [r7, #12]
 8013a5a:	0151      	lsls	r1, r2, #5
 8013a5c:	693a      	ldr	r2, [r7, #16]
 8013a5e:	440a      	add	r2, r1
 8013a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013a68:	6013      	str	r3, [r2, #0]
 8013a6a:	e000      	b.n	8013a6e <USB_HC_Halt+0x1f0>
          break;
 8013a6c:	bf00      	nop
    }
  }

  return HAL_OK;
 8013a6e:	2300      	movs	r3, #0
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	371c      	adds	r7, #28
 8013a74:	46bd      	mov	sp, r7
 8013a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7a:	4770      	bx	lr

08013a7c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b086      	sub	sp, #24
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8013a88:	2300      	movs	r3, #0
 8013a8a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f7ff fa7b 	bl	8012f88 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8013a92:	2110      	movs	r1, #16
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7ff fab3 	bl	8013000 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f7ff fad6 	bl	801304c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	613b      	str	r3, [r7, #16]
 8013aa4:	e01f      	b.n	8013ae6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	015a      	lsls	r2, r3, #5
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	4413      	add	r3, r2
 8013aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013abc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ac4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013acc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	015a      	lsls	r2, r3, #5
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013ada:	461a      	mov	r2, r3
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	613b      	str	r3, [r7, #16]
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	2b0f      	cmp	r3, #15
 8013aea:	d9dc      	bls.n	8013aa6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8013aec:	2300      	movs	r3, #0
 8013aee:	613b      	str	r3, [r7, #16]
 8013af0:	e034      	b.n	8013b5c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	015a      	lsls	r2, r3, #5
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	4413      	add	r3, r2
 8013afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b08:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013b10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013b18:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	015a      	lsls	r2, r3, #5
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	4413      	add	r3, r2
 8013b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b26:	461a      	mov	r2, r3
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	3301      	adds	r3, #1
 8013b30:	617b      	str	r3, [r7, #20]
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013b38:	d80c      	bhi.n	8013b54 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	015a      	lsls	r2, r3, #5
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	4413      	add	r3, r2
 8013b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b50:	d0ec      	beq.n	8013b2c <USB_StopHost+0xb0>
 8013b52:	e000      	b.n	8013b56 <USB_StopHost+0xda>
        break;
 8013b54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	3301      	adds	r3, #1
 8013b5a:	613b      	str	r3, [r7, #16]
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	2b0f      	cmp	r3, #15
 8013b60:	d9c7      	bls.n	8013af2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013b68:	461a      	mov	r2, r3
 8013b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b76:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ff f9f4 	bl	8012f66 <USB_EnableGlobalInt>

  return HAL_OK;
 8013b7e:	2300      	movs	r3, #0
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3718      	adds	r7, #24
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8013b88:	b590      	push	{r4, r7, lr}
 8013b8a:	b08b      	sub	sp, #44	; 0x2c
 8013b8c:	af04      	add	r7, sp, #16
 8013b8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8013b90:	2302      	movs	r3, #2
 8013b92:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef out_status, in_status ;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8013b94:	2300      	movs	r3, #0
 8013b96:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	2101      	movs	r1, #1
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f001 ffec 	bl	8015b80 <USBH_FindInterface>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	747b      	strb	r3, [r7, #17]

  if(interface == 0xFFU) /* Not Valid Interface */
 8013bac:	7c7b      	ldrb	r3, [r7, #17]
 8013bae:	2bff      	cmp	r3, #255	; 0xff
 8013bb0:	d102      	bne.n	8013bb8 <USBH_AUDIO_InterfaceInit+0x30>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;
 8013bb2:	2302      	movs	r3, #2
 8013bb4:	75fb      	strb	r3, [r7, #23]
 8013bb6:	e1a0      	b.n	8013efa <USBH_AUDIO_InterfaceInit+0x372>
  }
  else
  {


    phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc (sizeof(AUDIO_HandleTypeDef));
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	f8d3 4448 	ldr.w	r4, [r3, #1096]	; 0x448
 8013bbe:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8013bc2:	f007 fa8b 	bl	801b0dc <malloc>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	61e3      	str	r3, [r4, #28]
    AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013bd0:	69db      	ldr	r3, [r3, #28]
 8013bd2:	60fb      	str	r3, [r7, #12]
    USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8013bd4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8013bd8:	2100      	movs	r1, #0
 8013bda:	68f8      	ldr	r0, [r7, #12]
 8013bdc:	f007 fac4 	bl	801b168 <memset>


    /* 1st Step:  Find Audio Interfaces */
    out_status = USBH_AUDIO_FindAudioStreamingIN (phost);
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f000 fc4c 	bl	801447e <USBH_AUDIO_FindAudioStreamingIN>
 8013be6:	4603      	mov	r3, r0
 8013be8:	72fb      	strb	r3, [r7, #11]

    in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f000 fd06 	bl	80145fc <USBH_AUDIO_FindAudioStreamingOUT>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	72bb      	strb	r3, [r7, #10]

    if((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8013bf4:	7afb      	ldrb	r3, [r7, #11]
 8013bf6:	2b02      	cmp	r3, #2
 8013bf8:	d103      	bne.n	8013c02 <USBH_AUDIO_InterfaceInit+0x7a>
 8013bfa:	7abb      	ldrb	r3, [r7, #10]
 8013bfc:	2b02      	cmp	r3, #2
 8013bfe:	f000 817c 	beq.w	8013efa <USBH_AUDIO_InterfaceInit+0x372>
      USBH_DbgLog ("%s class configuration not supported.", phost->pActiveClass->Name);
    }
    else
    {
      /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior*/
      for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8013c02:	2300      	movs	r3, #0
 8013c04:	75bb      	strb	r3, [r7, #22]
 8013c06:	e0c6      	b.n	8013d96 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        if( AUDIO_Handle->stream_out[index].valid == 1U)
 8013c08:	7dba      	ldrb	r2, [r7, #22]
 8013c0a:	68f9      	ldr	r1, [r7, #12]
 8013c0c:	4613      	mov	r3, r2
 8013c0e:	009b      	lsls	r3, r3, #2
 8013c10:	4413      	add	r3, r2
 8013c12:	005b      	lsls	r3, r3, #1
 8013c14:	440b      	add	r3, r1
 8013c16:	333e      	adds	r3, #62	; 0x3e
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d156      	bne.n	8013ccc <USBH_AUDIO_InterfaceInit+0x144>
        {
          if(ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8013c1e:	7dba      	ldrb	r2, [r7, #22]
 8013c20:	68f9      	ldr	r1, [r7, #12]
 8013c22:	4613      	mov	r3, r2
 8013c24:	009b      	lsls	r3, r3, #2
 8013c26:	4413      	add	r3, r2
 8013c28:	005b      	lsls	r3, r3, #1
 8013c2a:	440b      	add	r3, r1
 8013c2c:	333a      	adds	r3, #58	; 0x3a
 8013c2e:	881b      	ldrh	r3, [r3, #0]
 8013c30:	8aba      	ldrh	r2, [r7, #20]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d24a      	bcs.n	8013ccc <USBH_AUDIO_InterfaceInit+0x144>
          {
            ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8013c36:	7dba      	ldrb	r2, [r7, #22]
 8013c38:	68f9      	ldr	r1, [r7, #12]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	009b      	lsls	r3, r3, #2
 8013c3e:	4413      	add	r3, r2
 8013c40:	005b      	lsls	r3, r3, #1
 8013c42:	440b      	add	r3, r1
 8013c44:	333a      	adds	r3, #58	; 0x3a
 8013c46:	881b      	ldrh	r3, [r3, #0]
 8013c48:	82bb      	strh	r3, [r7, #20]
            AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8013c4a:	7dba      	ldrb	r2, [r7, #22]
 8013c4c:	68f9      	ldr	r1, [r7, #12]
 8013c4e:	4613      	mov	r3, r2
 8013c50:	009b      	lsls	r3, r3, #2
 8013c52:	4413      	add	r3, r2
 8013c54:	005b      	lsls	r3, r3, #1
 8013c56:	440b      	add	r3, r1
 8013c58:	333d      	adds	r3, #61	; 0x3d
 8013c5a:	781a      	ldrb	r2, [r3, #0]
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
            AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8013c62:	7dba      	ldrb	r2, [r7, #22]
 8013c64:	68f9      	ldr	r1, [r7, #12]
 8013c66:	4613      	mov	r3, r2
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	4413      	add	r3, r2
 8013c6c:	005b      	lsls	r3, r3, #1
 8013c6e:	440b      	add	r3, r1
 8013c70:	333c      	adds	r3, #60	; 0x3c
 8013c72:	781a      	ldrb	r2, [r3, #0]
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
            AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8013c7a:	7dba      	ldrb	r2, [r7, #22]
 8013c7c:	68f9      	ldr	r1, [r7, #12]
 8013c7e:	4613      	mov	r3, r2
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4413      	add	r3, r2
 8013c84:	005b      	lsls	r3, r3, #1
 8013c86:	440b      	add	r3, r1
 8013c88:	3338      	adds	r3, #56	; 0x38
 8013c8a:	781a      	ldrb	r2, [r3, #0]
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
            AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8013c92:	7dba      	ldrb	r2, [r7, #22]
 8013c94:	68f9      	ldr	r1, [r7, #12]
 8013c96:	4613      	mov	r3, r2
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	4413      	add	r3, r2
 8013c9c:	005b      	lsls	r3, r3, #1
 8013c9e:	440b      	add	r3, r1
 8013ca0:	333a      	adds	r3, #58	; 0x3a
 8013ca2:	881a      	ldrh	r2, [r3, #0]
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
            AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8013caa:	7dba      	ldrb	r2, [r7, #22]
 8013cac:	68f9      	ldr	r1, [r7, #12]
 8013cae:	4613      	mov	r3, r2
 8013cb0:	009b      	lsls	r3, r3, #2
 8013cb2:	4413      	add	r3, r2
 8013cb4:	005b      	lsls	r3, r3, #1
 8013cb6:	440b      	add	r3, r1
 8013cb8:	3340      	adds	r3, #64	; 0x40
 8013cba:	881b      	ldrh	r3, [r3, #0]
 8013cbc:	b2da      	uxtb	r2, r3
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            AUDIO_Handle->headphone.supported = 1U;
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	2201      	movs	r2, #1
 8013cc8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
          }
        }

        if( AUDIO_Handle->stream_in[index].valid == 1U)
 8013ccc:	7dba      	ldrb	r2, [r7, #22]
 8013cce:	68f9      	ldr	r1, [r7, #12]
 8013cd0:	4613      	mov	r3, r2
 8013cd2:	009b      	lsls	r3, r3, #2
 8013cd4:	4413      	add	r3, r2
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	440b      	add	r3, r1
 8013cda:	330c      	adds	r3, #12
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d156      	bne.n	8013d90 <USBH_AUDIO_InterfaceInit+0x208>
        {
          if(ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8013ce2:	7dba      	ldrb	r2, [r7, #22]
 8013ce4:	68f9      	ldr	r1, [r7, #12]
 8013ce6:	4613      	mov	r3, r2
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	4413      	add	r3, r2
 8013cec:	005b      	lsls	r3, r3, #1
 8013cee:	440b      	add	r3, r1
 8013cf0:	3308      	adds	r3, #8
 8013cf2:	881b      	ldrh	r3, [r3, #0]
 8013cf4:	8a7a      	ldrh	r2, [r7, #18]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d24a      	bcs.n	8013d90 <USBH_AUDIO_InterfaceInit+0x208>
          {
            ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8013cfa:	7dba      	ldrb	r2, [r7, #22]
 8013cfc:	68f9      	ldr	r1, [r7, #12]
 8013cfe:	4613      	mov	r3, r2
 8013d00:	009b      	lsls	r3, r3, #2
 8013d02:	4413      	add	r3, r2
 8013d04:	005b      	lsls	r3, r3, #1
 8013d06:	440b      	add	r3, r1
 8013d08:	3308      	adds	r3, #8
 8013d0a:	881b      	ldrh	r3, [r3, #0]
 8013d0c:	827b      	strh	r3, [r7, #18]
            AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8013d0e:	7dba      	ldrb	r2, [r7, #22]
 8013d10:	68f9      	ldr	r1, [r7, #12]
 8013d12:	4613      	mov	r3, r2
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	4413      	add	r3, r2
 8013d18:	005b      	lsls	r3, r3, #1
 8013d1a:	440b      	add	r3, r1
 8013d1c:	330b      	adds	r3, #11
 8013d1e:	781a      	ldrb	r2, [r3, #0]
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
            AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8013d26:	7dba      	ldrb	r2, [r7, #22]
 8013d28:	68f9      	ldr	r1, [r7, #12]
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	009b      	lsls	r3, r3, #2
 8013d2e:	4413      	add	r3, r2
 8013d30:	005b      	lsls	r3, r3, #1
 8013d32:	440b      	add	r3, r1
 8013d34:	330a      	adds	r3, #10
 8013d36:	781a      	ldrb	r2, [r3, #0]
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
            AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8013d3e:	7dba      	ldrb	r2, [r7, #22]
 8013d40:	68f9      	ldr	r1, [r7, #12]
 8013d42:	4613      	mov	r3, r2
 8013d44:	009b      	lsls	r3, r3, #2
 8013d46:	4413      	add	r3, r2
 8013d48:	005b      	lsls	r3, r3, #1
 8013d4a:	440b      	add	r3, r1
 8013d4c:	3306      	adds	r3, #6
 8013d4e:	781a      	ldrb	r2, [r3, #0]
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
            AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8013d56:	7dba      	ldrb	r2, [r7, #22]
 8013d58:	68f9      	ldr	r1, [r7, #12]
 8013d5a:	4613      	mov	r3, r2
 8013d5c:	009b      	lsls	r3, r3, #2
 8013d5e:	4413      	add	r3, r2
 8013d60:	005b      	lsls	r3, r3, #1
 8013d62:	440b      	add	r3, r1
 8013d64:	3308      	adds	r3, #8
 8013d66:	881a      	ldrh	r2, [r3, #0]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
            AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8013d6e:	7dba      	ldrb	r2, [r7, #22]
 8013d70:	68f9      	ldr	r1, [r7, #12]
 8013d72:	4613      	mov	r3, r2
 8013d74:	009b      	lsls	r3, r3, #2
 8013d76:	4413      	add	r3, r2
 8013d78:	005b      	lsls	r3, r3, #1
 8013d7a:	440b      	add	r3, r1
 8013d7c:	3340      	adds	r3, #64	; 0x40
 8013d7e:	881b      	ldrh	r3, [r3, #0]
 8013d80:	b2da      	uxtb	r2, r3
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
            AUDIO_Handle->microphone.supported = 1U;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2201      	movs	r2, #1
 8013d8c:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
      for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8013d90:	7dbb      	ldrb	r3, [r7, #22]
 8013d92:	3301      	adds	r3, #1
 8013d94:	75bb      	strb	r3, [r7, #22]
 8013d96:	7dbb      	ldrb	r3, [r7, #22]
 8013d98:	2b04      	cmp	r3, #4
 8013d9a:	f67f af35 	bls.w	8013c08 <USBH_AUDIO_InterfaceInit+0x80>
          }
        }
      }

      if(USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f000 fceb 	bl	801477a <USBH_AUDIO_FindHIDControl>
 8013da4:	4603      	mov	r3, r0
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d103      	bne.n	8013db2 <USBH_AUDIO_InterfaceInit+0x22a>
      {
        AUDIO_Handle->control.supported = 1U;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2201      	movs	r2, #1
 8013dae:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
      }

      /* 3rd Step:  Find and Parse Audio interfaces */
      USBH_AUDIO_ParseCSDescriptors (phost);
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f000 fd60 	bl	8014878 <USBH_AUDIO_ParseCSDescriptors>


      /* 4th Step:  Open the Audio streaming pipes*/
      if(AUDIO_Handle->headphone.supported == 1U)
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8013dbe:	2b01      	cmp	r3, #1
 8013dc0:	d12e      	bne.n	8013e20 <USBH_AUDIO_InterfaceInit+0x298>
      {
        USBH_AUDIO_BuildHeadphonePath (phost);
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f000 ff98 	bl	8014cf8 <USBH_AUDIO_BuildHeadphonePath>

        AUDIO_Handle->headphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8013dce:	4619      	mov	r1, r3
 8013dd0:	6878      	ldr	r0, [r7, #4]
 8013dd2:	f003 f9e9 	bl	80171a8 <USBH_AllocPipe>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	461a      	mov	r2, r3
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013df8:	68fa      	ldr	r2, [r7, #12]
 8013dfa:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8013dfe:	9202      	str	r2, [sp, #8]
 8013e00:	2201      	movs	r2, #1
 8013e02:	9201      	str	r2, [sp, #4]
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	4623      	mov	r3, r4
 8013e08:	4602      	mov	r2, r0
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f003 f99d 	bl	801714a <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

        USBH_LL_SetToggle (phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8013e16:	2200      	movs	r2, #0
 8013e18:	4619      	mov	r1, r3
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f007 f807 	bl	801ae2e <USBH_LL_SetToggle>

      }

      if(AUDIO_Handle->microphone.supported == 1U)
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d12e      	bne.n	8013e88 <USBH_AUDIO_InterfaceInit+0x300>
      {
        USBH_AUDIO_BuildMicrophonePath (phost);
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f000 fedc 	bl	8014be8 <USBH_AUDIO_BuildMicrophonePath>
        AUDIO_Handle->microphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8013e36:	4619      	mov	r1, r3
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f003 f9b5 	bl	80171a8 <USBH_AllocPipe>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	461a      	mov	r2, r3
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013e60:	68fa      	ldr	r2, [r7, #12]
 8013e62:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8013e66:	9202      	str	r2, [sp, #8]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	9201      	str	r2, [sp, #4]
 8013e6c:	9300      	str	r3, [sp, #0]
 8013e6e:	4623      	mov	r3, r4
 8013e70:	4602      	mov	r2, r0
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f003 f969 	bl	801714a <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

        USBH_LL_SetToggle (phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8013e7e:	2200      	movs	r2, #0
 8013e80:	4619      	mov	r1, r3
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f006 ffd3 	bl	801ae2e <USBH_LL_SetToggle>
      }

      if(AUDIO_Handle->control.supported == 1U)
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	d12b      	bne.n	8013eea <USBH_AUDIO_InterfaceInit+0x362>
      {
        AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8013e98:	4619      	mov	r1, r3
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	f003 f984 	bl	80171a8 <USBH_AllocPipe>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	461a      	mov	r2, r3
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013ec2:	68fa      	ldr	r2, [r7, #12]
 8013ec4:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8013ec8:	9202      	str	r2, [sp, #8]
 8013eca:	2203      	movs	r2, #3
 8013ecc:	9201      	str	r2, [sp, #4]
 8013ece:	9300      	str	r3, [sp, #0]
 8013ed0:	4623      	mov	r3, r4
 8013ed2:	4602      	mov	r2, r0
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f003 f938 	bl	801714a <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

        USBH_LL_SetToggle (phost,  AUDIO_Handle->control.Pipe, 0U);
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f006 ffa2 	bl	801ae2e <USBH_LL_SetToggle>

      }

      AUDIO_Handle->req_state     = AUDIO_REQ_INIT;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2201      	movs	r2, #1
 8013eee:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	70da      	strb	r2, [r3, #3]

      status = USBH_OK;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8013efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	371c      	adds	r7, #28
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd90      	pop	{r4, r7, pc}

08013f04 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013f12:	69db      	ldr	r3, [r3, #28]
 8013f14:	60fb      	str	r3, [r7, #12]

  if(AUDIO_Handle->microphone.Pipe != 0x00U)
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d011      	beq.n	8013f44 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe  (phost, AUDIO_Handle->microphone.Pipe);
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8013f26:	4619      	mov	r1, r3
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f003 f92d 	bl	8017188 <USBH_ClosePipe>
    USBH_FreePipe  (phost, AUDIO_Handle->microphone.Pipe);
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8013f34:	4619      	mov	r1, r3
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f003 f955 	bl	80171e6 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if( AUDIO_Handle->headphone.Pipe != 0x00U)
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d011      	beq.n	8013f72 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8013f54:	4619      	mov	r1, r3
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f003 f916 	bl	8017188 <USBH_ClosePipe>
    USBH_FreePipe  (phost,  AUDIO_Handle->headphone.Pipe);
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8013f62:	4619      	mov	r1, r3
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f003 f93e 	bl	80171e6 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if( AUDIO_Handle->control.Pipe != 0x00U)
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d011      	beq.n	8013fa0 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8013f82:	4619      	mov	r1, r3
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f003 f8ff 	bl	8017188 <USBH_ClosePipe>
    USBH_FreePipe  (phost,  AUDIO_Handle->control.Pipe);
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8013f90:	4619      	mov	r1, r3
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f003 f927 	bl	80171e6 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if(phost->pActiveClass->pData)
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013fa6:	69db      	ldr	r3, [r3, #28]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d00b      	beq.n	8013fc4 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free (phost->pActiveClass->pData);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013fb2:	69db      	ldr	r3, [r3, #28]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f007 f899 	bl	801b0ec <free>
    phost->pActiveClass->pData = 0U;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 8013fc4:	2300      	movs	r3, #0
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
	...

08013fd0 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b086      	sub	sp, #24
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013fde:	69db      	ldr	r3, [r3, #28]
 8013fe0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	3b01      	subs	r3, #1
 8013ff0:	2b06      	cmp	r3, #6
 8013ff2:	f200 80ed 	bhi.w	80141d0 <USBH_AUDIO_ClassRequest+0x200>
 8013ff6:	a201      	add	r2, pc, #4	; (adr r2, 8013ffc <USBH_AUDIO_ClassRequest+0x2c>)
 8013ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ffc:	08014019 	.word	0x08014019
 8014000:	0801419d 	.word	0x0801419d
 8014004:	08014019 	.word	0x08014019
 8014008:	0801406b 	.word	0x0801406b
 801400c:	080140f5 	.word	0x080140f5
 8014010:	08014149 	.word	0x08014149
 8014014:	080140e1 	.word	0x080140e1
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if(AUDIO_Handle->microphone.supported == 1U)
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 801401e:	2b01      	cmp	r3, #1
 8014020:	d111      	bne.n	8014046 <USBH_AUDIO_ClassRequest+0x76>
    {
      req_status = USBH_SetInterface(phost,
 8014022:	693b      	ldr	r3, [r7, #16]
 8014024:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8014028:	2200      	movs	r2, #0
 801402a:	4619      	mov	r1, r3
 801402c:	6878      	ldr	r0, [r7, #4]
 801402e:	f002 fb57 	bl	80166e0 <USBH_SetInterface>
 8014032:	4603      	mov	r3, r0
 8014034:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if(req_status == USBH_OK)
 8014036:	7bfb      	ldrb	r3, [r7, #15]
 8014038:	2b00      	cmp	r3, #0
 801403a:	f040 80cb 	bne.w	80141d4 <USBH_AUDIO_ClassRequest+0x204>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	2204      	movs	r2, #4
 8014042:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8014044:	e0c6      	b.n	80141d4 <USBH_AUDIO_ClassRequest+0x204>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	2204      	movs	r2, #4
 801404a:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2202      	movs	r2, #2
 8014050:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014060:	2200      	movs	r2, #0
 8014062:	4619      	mov	r1, r3
 8014064:	f003 fae2 	bl	801762c <osMessagePut>
    break;
 8014068:	e0b4      	b.n	80141d4 <USBH_AUDIO_ClassRequest+0x204>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if(AUDIO_Handle->headphone.supported == 1U)
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8014070:	2b01      	cmp	r3, #1
 8014072:	d120      	bne.n	80140b6 <USBH_AUDIO_ClassRequest+0xe6>
    {
      req_status = USBH_SetInterface(phost,
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 801407a:	2200      	movs	r2, #0
 801407c:	4619      	mov	r1, r3
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f002 fb2e 	bl	80166e0 <USBH_SetInterface>
 8014084:	4603      	mov	r3, r0
 8014086:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if(req_status == USBH_OK)
 8014088:	7bfb      	ldrb	r3, [r7, #15]
 801408a:	2b00      	cmp	r3, #0
 801408c:	f040 80a4 	bne.w	80141d8 <USBH_AUDIO_ClassRequest+0x208>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	2207      	movs	r2, #7
 8014094:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	2206      	movs	r2, #6
 801409a:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80140ae:	693b      	ldr	r3, [r7, #16]
 80140b0:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80140b4:	e090      	b.n	80141d8 <USBH_AUDIO_ClassRequest+0x208>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	2207      	movs	r2, #7
 80140ba:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	2206      	movs	r2, #6
 80140c0:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2202      	movs	r2, #2
 80140c6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80140d6:	2200      	movs	r2, #0
 80140d8:	4619      	mov	r1, r3
 80140da:	f003 faa7 	bl	801762c <osMessagePut>
    break;
 80140de:	e07b      	b.n	80141d8 <USBH_AUDIO_ClassRequest+0x208>

  case AUDIO_REQ_CS_REQUESTS:
    if(USBH_AUDIO_HandleCSRequest (phost) == USBH_OK)
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 f955 	bl	8014390 <USBH_AUDIO_HandleCSRequest>
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d177      	bne.n	80141dc <USBH_AUDIO_ClassRequest+0x20c>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 80140ec:	693b      	ldr	r3, [r7, #16]
 80140ee:	2205      	movs	r2, #5
 80140f0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80140f2:	e073      	b.n	80141dc <USBH_AUDIO_ClassRequest+0x20c>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if(AUDIO_Handle->microphone.supported == 1U)
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	d112      	bne.n	8014124 <USBH_AUDIO_ClassRequest+0x154>
    {
      req_status = USBH_SetInterface(phost,
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 801410a:	461a      	mov	r2, r3
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f002 fae7 	bl	80166e0 <USBH_SetInterface>
 8014112:	4603      	mov	r3, r0
 8014114:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if(req_status == USBH_OK)
 8014116:	7bfb      	ldrb	r3, [r7, #15]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d161      	bne.n	80141e0 <USBH_AUDIO_ClassRequest+0x210>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	2206      	movs	r2, #6
 8014120:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8014122:	e05d      	b.n	80141e0 <USBH_AUDIO_ClassRequest+0x210>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8014124:	693b      	ldr	r3, [r7, #16]
 8014126:	2206      	movs	r2, #6
 8014128:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2202      	movs	r2, #2
 801412e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801413e:	2200      	movs	r2, #0
 8014140:	4619      	mov	r1, r3
 8014142:	f003 fa73 	bl	801762c <osMessagePut>
    break;
 8014146:	e04b      	b.n	80141e0 <USBH_AUDIO_ClassRequest+0x210>
  case AUDIO_REQ_SET_OUT_INTERFACE:
   if(AUDIO_Handle->headphone.supported == 1U)
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 801414e:	2b01      	cmp	r3, #1
 8014150:	d112      	bne.n	8014178 <USBH_AUDIO_ClassRequest+0x1a8>
    {
      req_status = USBH_SetInterface(phost,
 8014152:	693b      	ldr	r3, [r7, #16]
 8014154:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 8014158:	693b      	ldr	r3, [r7, #16]
 801415a:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 801415e:	461a      	mov	r2, r3
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f002 fabd 	bl	80166e0 <USBH_SetInterface>
 8014166:	4603      	mov	r3, r0
 8014168:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if(req_status == USBH_OK)
 801416a:	7bfb      	ldrb	r3, [r7, #15]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d139      	bne.n	80141e4 <USBH_AUDIO_ClassRequest+0x214>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	2202      	movs	r2, #2
 8014174:	701a      	strb	r2, [r3, #0]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
   }
   break;
 8014176:	e035      	b.n	80141e4 <USBH_AUDIO_ClassRequest+0x214>
     AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	2202      	movs	r2, #2
 801417c:	701a      	strb	r2, [r3, #0]
     phost->os_msg = (uint32_t)USBH_URB_EVENT;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2202      	movs	r2, #2
 8014182:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014192:	2200      	movs	r2, #0
 8014194:	4619      	mov	r1, r3
 8014196:	f003 fa49 	bl	801762c <osMessagePut>
   break;
 801419a:	e023      	b.n	80141e4 <USBH_AUDIO_ClassRequest+0x214>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	2201      	movs	r2, #1
 80141a0:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80141a8:	2102      	movs	r1, #2
 80141aa:	6878      	ldr	r0, [r7, #4]
 80141ac:	4798      	blx	r3
    status  = USBH_OK;
 80141ae:	2300      	movs	r3, #0
 80141b0:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2204      	movs	r2, #4
 80141b6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80141c6:	2200      	movs	r2, #0
 80141c8:	4619      	mov	r1, r3
 80141ca:	f003 fa2f 	bl	801762c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80141ce:	e00a      	b.n	80141e6 <USBH_AUDIO_ClassRequest+0x216>

  default:
    break;
 80141d0:	bf00      	nop
 80141d2:	e008      	b.n	80141e6 <USBH_AUDIO_ClassRequest+0x216>
    break;
 80141d4:	bf00      	nop
 80141d6:	e006      	b.n	80141e6 <USBH_AUDIO_ClassRequest+0x216>
    break;
 80141d8:	bf00      	nop
 80141da:	e004      	b.n	80141e6 <USBH_AUDIO_ClassRequest+0x216>
    break;
 80141dc:	bf00      	nop
 80141de:	e002      	b.n	80141e6 <USBH_AUDIO_ClassRequest+0x216>
    break;
 80141e0:	bf00      	nop
 80141e2:	e000      	b.n	80141e6 <USBH_AUDIO_ClassRequest+0x216>
   break;
 80141e4:	bf00      	nop
  }
  return status;
 80141e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3718      	adds	r7, #24
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <USBH_AUDIO_CSRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b088      	sub	sp, #32
 80141f4:	af02      	add	r7, sp, #8
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	460b      	mov	r3, r1
 80141fa:	70fb      	strb	r3, [r7, #3]
 80141fc:	4613      	mov	r3, r2
 80141fe:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014206:	69db      	ldr	r3, [r3, #28]
 8014208:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 801420a:	2301      	movs	r3, #1
 801420c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 801420e:	2301      	movs	r3, #1
 8014210:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	785b      	ldrb	r3, [r3, #1]
 8014216:	3b04      	subs	r3, #4
 8014218:	2b04      	cmp	r3, #4
 801421a:	f200 80aa 	bhi.w	8014372 <USBH_AUDIO_CSRequest+0x182>
 801421e:	a201      	add	r2, pc, #4	; (adr r2, 8014224 <USBH_AUDIO_CSRequest+0x34>)
 8014220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014224:	08014281 	.word	0x08014281
 8014228:	080142c7 	.word	0x080142c7
 801422c:	08014239 	.word	0x08014239
 8014230:	08014327 	.word	0x08014327
 8014234:	0801436d 	.word	0x0801436d
  {
  case AUDIO_REQ_GET_VOLUME:
    req_status = USBH_AC_GetCur(phost,
 8014238:	78fa      	ldrb	r2, [r7, #3]
 801423a:	2302      	movs	r3, #2
 801423c:	9301      	str	r3, [sp, #4]
 801423e:	78bb      	ldrb	r3, [r7, #2]
 8014240:	9300      	str	r3, [sp, #0]
 8014242:	2302      	movs	r3, #2
 8014244:	2106      	movs	r1, #6
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f000 fe88 	bl	8014f5c <USBH_AC_GetCur>
 801424c:	4603      	mov	r3, r0
 801424e:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);               /* length   */
    if(req_status != USBH_BUSY)
 8014250:	7bfb      	ldrb	r3, [r7, #15]
 8014252:	2b01      	cmp	r3, #1
 8014254:	f000 808f 	beq.w	8014376 <USBH_AUDIO_CSRequest+0x186>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	2204      	movs	r2, #4
 801425c:	705a      	strb	r2, [r3, #1]
      VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801426a:	3302      	adds	r3, #2
 801426c:	881b      	ldrh	r3, [r3, #0]
 801426e:	021b      	lsls	r3, r3, #8
 8014270:	b29b      	uxth	r3, r3
 8014272:	4313      	orrs	r3, r2
 8014274:	817b      	strh	r3, [r7, #10]
      AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8014276:	897a      	ldrh	r2, [r7, #10]
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    }
    break;
 801427e:	e07a      	b.n	8014376 <USBH_AUDIO_CSRequest+0x186>

  case AUDIO_REQ_GET_MIN_VOLUME:
    req_status = USBH_AC_GetMin(phost,
 8014280:	78fa      	ldrb	r2, [r7, #3]
 8014282:	2302      	movs	r3, #2
 8014284:	9301      	str	r3, [sp, #4]
 8014286:	78bb      	ldrb	r3, [r7, #2]
 8014288:	9300      	str	r3, [sp, #0]
 801428a:	2302      	movs	r3, #2
 801428c:	2106      	movs	r1, #6
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f001 f820 	bl	80152d4 <USBH_AC_GetMin>
 8014294:	4603      	mov	r3, r0
 8014296:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);               /* length   */
    if(req_status != USBH_BUSY)
 8014298:	7bfb      	ldrb	r3, [r7, #15]
 801429a:	2b01      	cmp	r3, #1
 801429c:	d06d      	beq.n	801437a <USBH_AUDIO_CSRequest+0x18a>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 801429e:	693b      	ldr	r3, [r7, #16]
 80142a0:	2205      	movs	r2, #5
 80142a2:	705a      	strb	r2, [r3, #1]
      VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80142aa:	693b      	ldr	r3, [r7, #16]
 80142ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80142b0:	3302      	adds	r3, #2
 80142b2:	881b      	ldrh	r3, [r3, #0]
 80142b4:	021b      	lsls	r3, r3, #8
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	4313      	orrs	r3, r2
 80142ba:	817b      	strh	r3, [r7, #10]
      AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 80142bc:	897a      	ldrh	r2, [r7, #10]
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    }
    break;
 80142c4:	e059      	b.n	801437a <USBH_AUDIO_CSRequest+0x18a>

  case AUDIO_REQ_GET_MAX_VOLUME:
    req_status = USBH_AC_GetMax(phost,
 80142c6:	78fa      	ldrb	r2, [r7, #3]
 80142c8:	2302      	movs	r3, #2
 80142ca:	9301      	str	r3, [sp, #4]
 80142cc:	78bb      	ldrb	r3, [r7, #2]
 80142ce:	9300      	str	r3, [sp, #0]
 80142d0:	2302      	movs	r3, #2
 80142d2:	2106      	movs	r1, #6
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f000 fed5 	bl	8015084 <USBH_AC_GetMax>
 80142da:	4603      	mov	r3, r0
 80142dc:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);               /* length   */
    if(req_status != USBH_BUSY)
 80142de:	7bfb      	ldrb	r3, [r7, #15]
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	d04c      	beq.n	801437e <USBH_AUDIO_CSRequest+0x18e>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 80142e4:	693b      	ldr	r3, [r7, #16]
 80142e6:	2207      	movs	r2, #7
 80142e8:	705a      	strb	r2, [r3, #1]
      VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80142f6:	3302      	adds	r3, #2
 80142f8:	881b      	ldrh	r3, [r3, #0]
 80142fa:	021b      	lsls	r3, r3, #8
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	4313      	orrs	r3, r2
 8014300:	817b      	strh	r3, [r7, #10]
      AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8014302:	897a      	ldrh	r2, [r7, #10]
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

      if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8014310:	693b      	ldr	r3, [r7, #16]
 8014312:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8014316:	429a      	cmp	r2, r3
 8014318:	d231      	bcs.n	801437e <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8014320:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
      }
    }
    break;
 8014324:	e02b      	b.n	801437e <USBH_AUDIO_CSRequest+0x18e>

  case AUDIO_REQ_GET_RESOLUTION:
    req_status = USBH_AC_GetRes(phost,
 8014326:	78fa      	ldrb	r2, [r7, #3]
 8014328:	2302      	movs	r3, #2
 801432a:	9301      	str	r3, [sp, #4]
 801432c:	78bb      	ldrb	r3, [r7, #2]
 801432e:	9300      	str	r3, [sp, #0]
 8014330:	2302      	movs	r3, #2
 8014332:	2106      	movs	r1, #6
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f000 ff39 	bl	80151ac <USBH_AC_GetRes>
 801433a:	4603      	mov	r3, r0
 801433c:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);                /* length   */
    if(req_status != USBH_BUSY)
 801433e:	7bfb      	ldrb	r3, [r7, #15]
 8014340:	2b01      	cmp	r3, #1
 8014342:	d01e      	beq.n	8014382 <USBH_AUDIO_CSRequest+0x192>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	2208      	movs	r2, #8
 8014348:	705a      	strb	r2, [r3, #1]
      ResolutionCtl =LE16(&AUDIO_Handle->mem[0]);
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8014356:	3302      	adds	r3, #2
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	021b      	lsls	r3, r3, #8
 801435c:	b29b      	uxth	r3, r3
 801435e:	4313      	orrs	r3, r2
 8014360:	81bb      	strh	r3, [r7, #12]
      AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8014362:	89ba      	ldrh	r2, [r7, #12]
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    }
    break;
 801436a:	e00a      	b.n	8014382 <USBH_AUDIO_CSRequest+0x192>


  case AUDIO_REQ_CS_IDLE:
    status = USBH_OK;
 801436c:	2300      	movs	r3, #0
 801436e:	75fb      	strb	r3, [r7, #23]
    break;
 8014370:	e008      	b.n	8014384 <USBH_AUDIO_CSRequest+0x194>

  default:
    break;
 8014372:	bf00      	nop
 8014374:	e006      	b.n	8014384 <USBH_AUDIO_CSRequest+0x194>
    break;
 8014376:	bf00      	nop
 8014378:	e004      	b.n	8014384 <USBH_AUDIO_CSRequest+0x194>
    break;
 801437a:	bf00      	nop
 801437c:	e002      	b.n	8014384 <USBH_AUDIO_CSRequest+0x194>
    break;
 801437e:	bf00      	nop
 8014380:	e000      	b.n	8014384 <USBH_AUDIO_CSRequest+0x194>
    break;
 8014382:	bf00      	nop
  }
  return status;
 8014384:	7dfb      	ldrb	r3, [r7, #23]
}
 8014386:	4618      	mov	r0, r3
 8014388:	3718      	adds	r7, #24
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop

08014390 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b084      	sub	sp, #16
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8014398:	2301      	movs	r3, #1
 801439a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 801439c:	2301      	movs	r3, #1
 801439e:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80143a6:	69db      	ldr	r3, [r3, #28]
 80143a8:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80143b6:	461a      	mov	r2, r3
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f7ff ff19 	bl	80141f0 <USBH_AUDIO_CSRequest>
 80143be:	4603      	mov	r3, r0
 80143c0:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if(cs_status != USBH_BUSY)
 80143c2:	7bbb      	ldrb	r3, [r7, #14]
 80143c4:	2b01      	cmp	r3, #1
 80143c6:	d02a      	beq.n	801441e <USBH_AUDIO_HandleCSRequest+0x8e>
  {

    if(AUDIO_Handle->temp_channels == 1U)
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	d10c      	bne.n	80143ec <USBH_AUDIO_HandleCSRequest+0x5c>
    {
        AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80143d8:	68bb      	ldr	r3, [r7, #8]
 80143da:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = 0U;
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	2200      	movs	r2, #0
 80143e2:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        status = USBH_OK;
 80143e6:	2300      	movs	r3, #0
 80143e8:	73fb      	strb	r3, [r7, #15]
 80143ea:	e007      	b.n	80143fc <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80143f2:	3b01      	subs	r3, #1
 80143f4:	b2da      	uxtb	r2, r3
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	2206      	movs	r2, #6
 8014400:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	2202      	movs	r2, #2
 8014406:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014416:	2200      	movs	r2, #0
 8014418:	4619      	mov	r1, r3
 801441a:	f003 f907 	bl	801762c <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 801441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014420:	4618      	mov	r0, r3
 8014422:	3710      	adds	r7, #16
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}

08014428 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process (USBH_HandleTypeDef *phost)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8014430:	2301      	movs	r3, #1
 8014432:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801443a:	69db      	ldr	r3, [r3, #28]
 801443c:	60bb      	str	r3, [r7, #8]

  if(AUDIO_Handle->headphone.supported == 1U)
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8014444:	2b01      	cmp	r3, #1
 8014446:	d102      	bne.n	801444e <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream (phost);
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f001 f8c1 	bl	80155d0 <USBH_AUDIO_OutputStream>
  }

  if(AUDIO_Handle->microphone.supported == 1U)
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8014454:	2b01      	cmp	r3, #1
 8014456:	d102      	bne.n	801445e <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream (phost);
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f000 fff7 	bl	801544c <USBH_AUDIO_InputStream>
  }

  return status;
 801445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014460:	4618      	mov	r0, r3
 8014462:	3710      	adds	r7, #16
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess (USBH_HandleTypeDef *phost)
{
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8014470:	2300      	movs	r3, #0
}
 8014472:	4618      	mov	r0, r3
 8014474:	370c      	adds	r7, #12
 8014476:	46bd      	mov	sp, r7
 8014478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447c:	4770      	bx	lr

0801447e <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 801447e:	b480      	push	{r7}
 8014480:	b085      	sub	sp, #20
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8014486:	2302      	movs	r3, #2
 8014488:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014490:	69db      	ldr	r3, [r3, #28]
 8014492:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8014494:	2300      	movs	r3, #0
 8014496:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8014498:	2300      	movs	r3, #0
 801449a:	73fb      	strb	r3, [r7, #15]
 801449c:	e09e      	b.n	80145dc <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 801449e:	7bfb      	ldrb	r3, [r7, #15]
 80144a0:	687a      	ldr	r2, [r7, #4]
 80144a2:	211a      	movs	r1, #26
 80144a4:	fb01 f303 	mul.w	r3, r1, r3
 80144a8:	4413      	add	r3, r2
 80144aa:	f203 3343 	addw	r3, r3, #835	; 0x343
 80144ae:	781b      	ldrb	r3, [r3, #0]
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	f040 8090 	bne.w	80145d6 <USBH_AUDIO_FindAudioStreamingIN+0x158>
       (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80144b6:	7bfb      	ldrb	r3, [r7, #15]
 80144b8:	687a      	ldr	r2, [r7, #4]
 80144ba:	211a      	movs	r1, #26
 80144bc:	fb01 f303 	mul.w	r3, r1, r3
 80144c0:	4413      	add	r3, r2
 80144c2:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80144c6:	781b      	ldrb	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 80144c8:	2b02      	cmp	r3, #2
 80144ca:	f040 8084 	bne.w	80145d6 <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 80144ce:	7bfb      	ldrb	r3, [r7, #15]
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	211a      	movs	r1, #26
 80144d4:	fb01 f303 	mul.w	r3, r1, r3
 80144d8:	4413      	add	r3, r2
 80144da:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	b25b      	sxtb	r3, r3
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	da77      	bge.n	80145d6 <USBH_AUDIO_FindAudioStreamingIN+0x158>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80144e6:	7bfb      	ldrb	r3, [r7, #15]
 80144e8:	687a      	ldr	r2, [r7, #4]
 80144ea:	211a      	movs	r1, #26
 80144ec:	fb01 f303 	mul.w	r3, r1, r3
 80144f0:	4413      	add	r3, r2
 80144f2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80144f6:	881b      	ldrh	r3, [r3, #0]
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d06c      	beq.n	80145d6 <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80144fc:	7bfb      	ldrb	r3, [r7, #15]
 80144fe:	7bba      	ldrb	r2, [r7, #14]
 8014500:	6879      	ldr	r1, [r7, #4]
 8014502:	201a      	movs	r0, #26
 8014504:	fb00 f303 	mul.w	r3, r0, r3
 8014508:	440b      	add	r3, r1
 801450a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 801450e:	7818      	ldrb	r0, [r3, #0]
 8014510:	68b9      	ldr	r1, [r7, #8]
 8014512:	4613      	mov	r3, r2
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	4413      	add	r3, r2
 8014518:	005b      	lsls	r3, r3, #1
 801451a:	440b      	add	r3, r1
 801451c:	3306      	adds	r3, #6
 801451e:	4602      	mov	r2, r0
 8014520:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014522:	7bfb      	ldrb	r3, [r7, #15]
 8014524:	7bba      	ldrb	r2, [r7, #14]
 8014526:	6879      	ldr	r1, [r7, #4]
 8014528:	201a      	movs	r0, #26
 801452a:	fb00 f303 	mul.w	r3, r0, r3
 801452e:	440b      	add	r3, r1
 8014530:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8014534:	8818      	ldrh	r0, [r3, #0]
 8014536:	68b9      	ldr	r1, [r7, #8]
 8014538:	4613      	mov	r3, r2
 801453a:	009b      	lsls	r3, r3, #2
 801453c:	4413      	add	r3, r2
 801453e:	005b      	lsls	r3, r3, #1
 8014540:	440b      	add	r3, r1
 8014542:	3308      	adds	r3, #8
 8014544:	4602      	mov	r2, r0
 8014546:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8014548:	7bfb      	ldrb	r3, [r7, #15]
 801454a:	7bba      	ldrb	r2, [r7, #14]
 801454c:	6879      	ldr	r1, [r7, #4]
 801454e:	201a      	movs	r0, #26
 8014550:	fb00 f303 	mul.w	r3, r0, r3
 8014554:	440b      	add	r3, r1
 8014556:	f503 7350 	add.w	r3, r3, #832	; 0x340
 801455a:	7818      	ldrb	r0, [r3, #0]
 801455c:	68b9      	ldr	r1, [r7, #8]
 801455e:	4613      	mov	r3, r2
 8014560:	009b      	lsls	r3, r3, #2
 8014562:	4413      	add	r3, r2
 8014564:	005b      	lsls	r3, r3, #1
 8014566:	440b      	add	r3, r1
 8014568:	330b      	adds	r3, #11
 801456a:	4602      	mov	r2, r0
 801456c:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 801456e:	7bfb      	ldrb	r3, [r7, #15]
 8014570:	7bba      	ldrb	r2, [r7, #14]
 8014572:	6879      	ldr	r1, [r7, #4]
 8014574:	201a      	movs	r0, #26
 8014576:	fb00 f303 	mul.w	r3, r0, r3
 801457a:	440b      	add	r3, r1
 801457c:	f203 3341 	addw	r3, r3, #833	; 0x341
 8014580:	7818      	ldrb	r0, [r3, #0]
 8014582:	68b9      	ldr	r1, [r7, #8]
 8014584:	4613      	mov	r3, r2
 8014586:	009b      	lsls	r3, r3, #2
 8014588:	4413      	add	r3, r2
 801458a:	005b      	lsls	r3, r3, #1
 801458c:	440b      	add	r3, r1
 801458e:	330a      	adds	r3, #10
 8014590:	4602      	mov	r2, r0
 8014592:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8014594:	7bfb      	ldrb	r3, [r7, #15]
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	211a      	movs	r1, #26
 801459a:	fb01 f303 	mul.w	r3, r1, r3
 801459e:	4413      	add	r3, r2
 80145a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	7bba      	ldrb	r2, [r7, #14]
 80145a8:	b298      	uxth	r0, r3
 80145aa:	68b9      	ldr	r1, [r7, #8]
 80145ac:	4613      	mov	r3, r2
 80145ae:	009b      	lsls	r3, r3, #2
 80145b0:	4413      	add	r3, r2
 80145b2:	005b      	lsls	r3, r3, #1
 80145b4:	440b      	add	r3, r1
 80145b6:	330e      	adds	r3, #14
 80145b8:	4602      	mov	r2, r0
 80145ba:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 80145bc:	7bba      	ldrb	r2, [r7, #14]
 80145be:	68b9      	ldr	r1, [r7, #8]
 80145c0:	4613      	mov	r3, r2
 80145c2:	009b      	lsls	r3, r3, #2
 80145c4:	4413      	add	r3, r2
 80145c6:	005b      	lsls	r3, r3, #1
 80145c8:	440b      	add	r3, r1
 80145ca:	330c      	adds	r3, #12
 80145cc:	2201      	movs	r2, #1
 80145ce:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80145d0:	7bbb      	ldrb	r3, [r7, #14]
 80145d2:	3301      	adds	r3, #1
 80145d4:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80145d6:	7bfb      	ldrb	r3, [r7, #15]
 80145d8:	3301      	adds	r3, #1
 80145da:	73fb      	strb	r3, [r7, #15]
 80145dc:	7bfb      	ldrb	r3, [r7, #15]
 80145de:	2b09      	cmp	r3, #9
 80145e0:	f67f af5d 	bls.w	801449e <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if(alt_settings > 0U)
 80145e4:	7bbb      	ldrb	r3, [r7, #14]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d001      	beq.n	80145ee <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
     status = USBH_OK;
 80145ea:	2300      	movs	r3, #0
 80145ec:	737b      	strb	r3, [r7, #13]
  }

  return status;
 80145ee:	7b7b      	ldrb	r3, [r7, #13]
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3714      	adds	r7, #20
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr

080145fc <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 80145fc:	b480      	push	{r7}
 80145fe:	b085      	sub	sp, #20
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8014604:	2302      	movs	r3, #2
 8014606:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801460e:	69db      	ldr	r3, [r3, #28]
 8014610:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8014612:	2300      	movs	r3, #0
 8014614:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8014616:	2300      	movs	r3, #0
 8014618:	73fb      	strb	r3, [r7, #15]
 801461a:	e09e      	b.n	801475a <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 801461c:	7bfb      	ldrb	r3, [r7, #15]
 801461e:	687a      	ldr	r2, [r7, #4]
 8014620:	211a      	movs	r1, #26
 8014622:	fb01 f303 	mul.w	r3, r1, r3
 8014626:	4413      	add	r3, r2
 8014628:	f203 3343 	addw	r3, r3, #835	; 0x343
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	2b01      	cmp	r3, #1
 8014630:	f040 8090 	bne.w	8014754 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
       (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8014634:	7bfb      	ldrb	r3, [r7, #15]
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	211a      	movs	r1, #26
 801463a:	fb01 f303 	mul.w	r3, r1, r3
 801463e:	4413      	add	r3, r2
 8014640:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8014644:	781b      	ldrb	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 8014646:	2b02      	cmp	r3, #2
 8014648:	f040 8084 	bne.w	8014754 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if(((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 801464c:	7bfb      	ldrb	r3, [r7, #15]
 801464e:	687a      	ldr	r2, [r7, #4]
 8014650:	211a      	movs	r1, #26
 8014652:	fb01 f303 	mul.w	r3, r1, r3
 8014656:	4413      	add	r3, r2
 8014658:	f203 334a 	addw	r3, r3, #842	; 0x34a
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	b25b      	sxtb	r3, r3
 8014660:	2b00      	cmp	r3, #0
 8014662:	db77      	blt.n	8014754 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8014664:	7bfb      	ldrb	r3, [r7, #15]
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	211a      	movs	r1, #26
 801466a:	fb01 f303 	mul.w	r3, r1, r3
 801466e:	4413      	add	r3, r2
 8014670:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8014674:	881b      	ldrh	r3, [r3, #0]
      if(((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8014676:	2b00      	cmp	r3, #0
 8014678:	d06c      	beq.n	8014754 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801467a:	7bfb      	ldrb	r3, [r7, #15]
 801467c:	7bba      	ldrb	r2, [r7, #14]
 801467e:	6879      	ldr	r1, [r7, #4]
 8014680:	201a      	movs	r0, #26
 8014682:	fb00 f303 	mul.w	r3, r0, r3
 8014686:	440b      	add	r3, r1
 8014688:	f203 334a 	addw	r3, r3, #842	; 0x34a
 801468c:	7818      	ldrb	r0, [r3, #0]
 801468e:	68b9      	ldr	r1, [r7, #8]
 8014690:	4613      	mov	r3, r2
 8014692:	009b      	lsls	r3, r3, #2
 8014694:	4413      	add	r3, r2
 8014696:	005b      	lsls	r3, r3, #1
 8014698:	440b      	add	r3, r1
 801469a:	3338      	adds	r3, #56	; 0x38
 801469c:	4602      	mov	r2, r0
 801469e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80146a0:	7bfb      	ldrb	r3, [r7, #15]
 80146a2:	7bba      	ldrb	r2, [r7, #14]
 80146a4:	6879      	ldr	r1, [r7, #4]
 80146a6:	201a      	movs	r0, #26
 80146a8:	fb00 f303 	mul.w	r3, r0, r3
 80146ac:	440b      	add	r3, r1
 80146ae:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80146b2:	8818      	ldrh	r0, [r3, #0]
 80146b4:	68b9      	ldr	r1, [r7, #8]
 80146b6:	4613      	mov	r3, r2
 80146b8:	009b      	lsls	r3, r3, #2
 80146ba:	4413      	add	r3, r2
 80146bc:	005b      	lsls	r3, r3, #1
 80146be:	440b      	add	r3, r1
 80146c0:	333a      	adds	r3, #58	; 0x3a
 80146c2:	4602      	mov	r2, r0
 80146c4:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80146c6:	7bfb      	ldrb	r3, [r7, #15]
 80146c8:	7bba      	ldrb	r2, [r7, #14]
 80146ca:	6879      	ldr	r1, [r7, #4]
 80146cc:	201a      	movs	r0, #26
 80146ce:	fb00 f303 	mul.w	r3, r0, r3
 80146d2:	440b      	add	r3, r1
 80146d4:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80146d8:	7818      	ldrb	r0, [r3, #0]
 80146da:	68b9      	ldr	r1, [r7, #8]
 80146dc:	4613      	mov	r3, r2
 80146de:	009b      	lsls	r3, r3, #2
 80146e0:	4413      	add	r3, r2
 80146e2:	005b      	lsls	r3, r3, #1
 80146e4:	440b      	add	r3, r1
 80146e6:	333d      	adds	r3, #61	; 0x3d
 80146e8:	4602      	mov	r2, r0
 80146ea:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 80146ec:	7bfb      	ldrb	r3, [r7, #15]
 80146ee:	7bba      	ldrb	r2, [r7, #14]
 80146f0:	6879      	ldr	r1, [r7, #4]
 80146f2:	201a      	movs	r0, #26
 80146f4:	fb00 f303 	mul.w	r3, r0, r3
 80146f8:	440b      	add	r3, r1
 80146fa:	f203 3341 	addw	r3, r3, #833	; 0x341
 80146fe:	7818      	ldrb	r0, [r3, #0]
 8014700:	68b9      	ldr	r1, [r7, #8]
 8014702:	4613      	mov	r3, r2
 8014704:	009b      	lsls	r3, r3, #2
 8014706:	4413      	add	r3, r2
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	440b      	add	r3, r1
 801470c:	333c      	adds	r3, #60	; 0x3c
 801470e:	4602      	mov	r2, r0
 8014710:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8014712:	7bfb      	ldrb	r3, [r7, #15]
 8014714:	687a      	ldr	r2, [r7, #4]
 8014716:	211a      	movs	r1, #26
 8014718:	fb01 f303 	mul.w	r3, r1, r3
 801471c:	4413      	add	r3, r2
 801471e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	7bba      	ldrb	r2, [r7, #14]
 8014726:	b298      	uxth	r0, r3
 8014728:	68b9      	ldr	r1, [r7, #8]
 801472a:	4613      	mov	r3, r2
 801472c:	009b      	lsls	r3, r3, #2
 801472e:	4413      	add	r3, r2
 8014730:	005b      	lsls	r3, r3, #1
 8014732:	440b      	add	r3, r1
 8014734:	3340      	adds	r3, #64	; 0x40
 8014736:	4602      	mov	r2, r0
 8014738:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 801473a:	7bba      	ldrb	r2, [r7, #14]
 801473c:	68b9      	ldr	r1, [r7, #8]
 801473e:	4613      	mov	r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	4413      	add	r3, r2
 8014744:	005b      	lsls	r3, r3, #1
 8014746:	440b      	add	r3, r1
 8014748:	333e      	adds	r3, #62	; 0x3e
 801474a:	2201      	movs	r2, #1
 801474c:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 801474e:	7bbb      	ldrb	r3, [r7, #14]
 8014750:	3301      	adds	r3, #1
 8014752:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8014754:	7bfb      	ldrb	r3, [r7, #15]
 8014756:	3301      	adds	r3, #1
 8014758:	73fb      	strb	r3, [r7, #15]
 801475a:	7bfb      	ldrb	r3, [r7, #15]
 801475c:	2b09      	cmp	r3, #9
 801475e:	f67f af5d 	bls.w	801461c <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if(alt_settings > 0U)
 8014762:	7bbb      	ldrb	r3, [r7, #14]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d001      	beq.n	801476c <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
     status = USBH_OK;
 8014768:	2300      	movs	r3, #0
 801476a:	737b      	strb	r3, [r7, #13]
  }

  return status;
 801476c:	7b7b      	ldrb	r3, [r7, #13]
}
 801476e:	4618      	mov	r0, r3
 8014770:	3714      	adds	r7, #20
 8014772:	46bd      	mov	sp, r7
 8014774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014778:	4770      	bx	lr

0801477a <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 801477a:	b580      	push	{r7, lr}
 801477c:	b084      	sub	sp, #16
 801477e:	af00      	add	r7, sp, #0
 8014780:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8014782:	2302      	movs	r3, #2
 8014784:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801478c:	69db      	ldr	r3, [r3, #28]
 801478e:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8014790:	23ff      	movs	r3, #255	; 0xff
 8014792:	2201      	movs	r2, #1
 8014794:	2101      	movs	r1, #1
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f001 f9f2 	bl	8015b80 <USBH_FindInterface>
 801479c:	4603      	mov	r3, r0
 801479e:	73fb      	strb	r3, [r7, #15]
  if(interface == 0xFFU)
 80147a0:	7bfb      	ldrb	r3, [r7, #15]
 80147a2:	2bff      	cmp	r3, #255	; 0xff
 80147a4:	d101      	bne.n	80147aa <USBH_AUDIO_FindHIDControl+0x30>
  {
    return USBH_FAIL;
 80147a6:	2302      	movs	r3, #2
 80147a8:	e062      	b.n	8014870 <USBH_AUDIO_FindHIDControl+0xf6>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80147aa:	2300      	movs	r3, #0
 80147ac:	73fb      	strb	r3, [r7, #15]
 80147ae:	e05b      	b.n	8014868 <USBH_AUDIO_FindHIDControl+0xee>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80147b0:	7bfb      	ldrb	r3, [r7, #15]
 80147b2:	687a      	ldr	r2, [r7, #4]
 80147b4:	211a      	movs	r1, #26
 80147b6:	fb01 f303 	mul.w	r3, r1, r3
 80147ba:	4413      	add	r3, r2
 80147bc:	f203 3343 	addw	r3, r3, #835	; 0x343
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	2b03      	cmp	r3, #3
 80147c4:	d14d      	bne.n	8014862 <USBH_AUDIO_FindHIDControl+0xe8>
       (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80147c6:	7bfb      	ldrb	r3, [r7, #15]
 80147c8:	687a      	ldr	r2, [r7, #4]
 80147ca:	211a      	movs	r1, #26
 80147cc:	fb01 f303 	mul.w	r3, r1, r3
 80147d0:	4413      	add	r3, r2
 80147d2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80147d6:	881b      	ldrh	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d042      	beq.n	8014862 <USBH_AUDIO_FindHIDControl+0xe8>
    {
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 80147dc:	7bfb      	ldrb	r3, [r7, #15]
 80147de:	687a      	ldr	r2, [r7, #4]
 80147e0:	211a      	movs	r1, #26
 80147e2:	fb01 f303 	mul.w	r3, r1, r3
 80147e6:	4413      	add	r3, r2
 80147e8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	b25b      	sxtb	r3, r3
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	da36      	bge.n	8014862 <USBH_AUDIO_FindHIDControl+0xe8>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80147f4:	7bfb      	ldrb	r3, [r7, #15]
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	211a      	movs	r1, #26
 80147fa:	fb01 f303 	mul.w	r3, r1, r3
 80147fe:	4413      	add	r3, r2
 8014800:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8014804:	781a      	ldrb	r2, [r3, #0]
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801480c:	7bfb      	ldrb	r3, [r7, #15]
 801480e:	687a      	ldr	r2, [r7, #4]
 8014810:	211a      	movs	r1, #26
 8014812:	fb01 f303 	mul.w	r3, r1, r3
 8014816:	4413      	add	r3, r2
 8014818:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 801481c:	881a      	ldrh	r2, [r3, #0]
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8014824:	7bfb      	ldrb	r3, [r7, #15]
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	211a      	movs	r1, #26
 801482a:	fb01 f303 	mul.w	r3, r1, r3
 801482e:	4413      	add	r3, r2
 8014830:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8014834:	781a      	ldrb	r2, [r3, #0]
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 801483c:	7bfb      	ldrb	r3, [r7, #15]
 801483e:	687a      	ldr	r2, [r7, #4]
 8014840:	211a      	movs	r1, #26
 8014842:	fb01 f303 	mul.w	r3, r1, r3
 8014846:	4413      	add	r3, r2
 8014848:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801484c:	781a      	ldrb	r2, [r3, #0]
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2201      	movs	r2, #1
 8014858:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 801485c:	2300      	movs	r3, #0
 801485e:	73bb      	strb	r3, [r7, #14]
        break;
 8014860:	e005      	b.n	801486e <USBH_AUDIO_FindHIDControl+0xf4>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8014862:	7bfb      	ldrb	r3, [r7, #15]
 8014864:	3301      	adds	r3, #1
 8014866:	73fb      	strb	r3, [r7, #15]
 8014868:	7bfb      	ldrb	r3, [r7, #15]
 801486a:	2b09      	cmp	r3, #9
 801486c:	d9a0      	bls.n	80147b0 <USBH_AUDIO_FindHIDControl+0x36>
      }
    }
  }

  return status;
 801486e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014870:	4618      	mov	r0, r3
 8014872:	3710      	adds	r7, #16
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b086      	sub	sp, #24
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8014880:	2300      	movs	r3, #0
 8014882:	74fb      	strb	r3, [r7, #19]
  uint8_t                       itf_number = 0U;
 8014884:	2300      	movs	r3, #0
 8014886:	74bb      	strb	r3, [r7, #18]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801488e:	69db      	ldr	r3, [r3, #28]
 8014890:	60fb      	str	r3, [r7, #12]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	331c      	adds	r3, #28
 8014896:	617b      	str	r3, [r7, #20]
  ptr = USB_LEN_CFG_DESC;
 8014898:	2309      	movs	r3, #9
 801489a:	813b      	strh	r3, [r7, #8]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	2200      	movs	r2, #0
 80148a0:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	2200      	movs	r2, #0
 80148a8:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2200      	movs	r2, #0
 80148b0:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while(ptr < phost->device.CfgDesc.wTotalLength)
 80148bc:	e034      	b.n	8014928 <USBH_AUDIO_ParseCSDescriptors+0xb0>
  {
    pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80148be:	f107 0308 	add.w	r3, r7, #8
 80148c2:	4619      	mov	r1, r3
 80148c4:	6978      	ldr	r0, [r7, #20]
 80148c6:	f002 f8f7 	bl	8016ab8 <USBH_GetNextDesc>
 80148ca:	6178      	str	r0, [r7, #20]

    switch (pdesc->bDescriptorType)
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	785b      	ldrb	r3, [r3, #1]
 80148d0:	2b04      	cmp	r3, #4
 80148d2:	d002      	beq.n	80148da <USBH_AUDIO_ParseCSDescriptors+0x62>
 80148d4:	2b24      	cmp	r3, #36	; 0x24
 80148d6:	d00f      	beq.n	80148f8 <USBH_AUDIO_ParseCSDescriptors+0x80>
 80148d8:	e025      	b.n	8014926 <USBH_AUDIO_ParseCSDescriptors+0xae>
    {

    case USB_DESC_TYPE_INTERFACE:
      itf_number = *((uint8_t *)(void *)pdesc + 2U);
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	789b      	ldrb	r3, [r3, #2]
 80148de:	74bb      	strb	r3, [r7, #18]
      alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 80148e0:	697b      	ldr	r3, [r7, #20]
 80148e2:	78db      	ldrb	r3, [r3, #3]
 80148e4:	72fb      	strb	r3, [r7, #11]
      itf_index = USBH_FindInterfaceIndex (phost, itf_number, alt_setting);
 80148e6:	7afa      	ldrb	r2, [r7, #11]
 80148e8:	7cbb      	ldrb	r3, [r7, #18]
 80148ea:	4619      	mov	r1, r3
 80148ec:	6878      	ldr	r0, [r7, #4]
 80148ee:	f001 f98d 	bl	8015c0c <USBH_FindInterfaceIndex>
 80148f2:	4603      	mov	r3, r0
 80148f4:	74fb      	strb	r3, [r7, #19]
      break;
 80148f6:	e017      	b.n	8014928 <USBH_AUDIO_ParseCSDescriptors+0xb0>

    case USB_DESC_TYPE_CS_INTERFACE:
      if(itf_number <= phost->device.CfgDesc.bNumInterfaces)
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80148fe:	7cba      	ldrb	r2, [r7, #18]
 8014900:	429a      	cmp	r2, r3
 8014902:	d811      	bhi.n	8014928 <USBH_AUDIO_ParseCSDescriptors+0xb0>
      {

        ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 801490a:	7cfb      	ldrb	r3, [r7, #19]
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	211a      	movs	r1, #26
 8014910:	fb01 f303 	mul.w	r3, r1, r3
 8014914:	4413      	add	r3, r2
 8014916:	f503 7351 	add.w	r3, r3, #836	; 0x344
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	697a      	ldr	r2, [r7, #20]
 801491e:	4619      	mov	r1, r3
 8014920:	f000 f80e 	bl	8014940 <ParseCSDescriptors>
                           phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                           (uint8_t *)(void *)pdesc);
      }
      break;
 8014924:	e000      	b.n	8014928 <USBH_AUDIO_ParseCSDescriptors+0xb0>

    default:
      break;
 8014926:	bf00      	nop
  while(ptr < phost->device.CfgDesc.wTotalLength)
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8b3 2336 	ldrh.w	r2, [r3, #822]	; 0x336
 801492e:	893b      	ldrh	r3, [r7, #8]
 8014930:	429a      	cmp	r2, r3
 8014932:	d8c4      	bhi.n	80148be <USBH_AUDIO_ParseCSDescriptors+0x46>
    }
  }
  return USBH_OK;
 8014934:	2300      	movs	r3, #0
}
 8014936:	4618      	mov	r0, r3
 8014938:	3718      	adds	r7, #24
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
	...

08014940 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                      uint8_t ac_subclass,
                                      uint8_t *pdesc)
{
 8014940:	b480      	push	{r7}
 8014942:	b085      	sub	sp, #20
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	460b      	mov	r3, r1
 801494a:	607a      	str	r2, [r7, #4]
 801494c:	72fb      	strb	r3, [r7, #11]
  if(ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 801494e:	7afb      	ldrb	r3, [r7, #11]
 8014950:	2b01      	cmp	r3, #1
 8014952:	d163      	bne.n	8014a1c <ParseCSDescriptors+0xdc>
  {
    switch(pdesc[2])
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	3302      	adds	r3, #2
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	3b01      	subs	r3, #1
 801495c:	2b05      	cmp	r3, #5
 801495e:	f200 8081 	bhi.w	8014a64 <ParseCSDescriptors+0x124>
 8014962:	a201      	add	r2, pc, #4	; (adr r2, 8014968 <ParseCSDescriptors+0x28>)
 8014964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014968:	08014981 	.word	0x08014981
 801496c:	08014989 	.word	0x08014989
 8014970:	080149a5 	.word	0x080149a5
 8014974:	080149ff 	.word	0x080149ff
 8014978:	080149e1 	.word	0x080149e1
 801497c:	080149c3 	.word	0x080149c3
    {
    case UAC_HEADER:
      class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	687a      	ldr	r2, [r7, #4]
 8014984:	601a      	str	r2, [r3, #0]
      break;
 8014986:	e070      	b.n	8014a6a <ParseCSDescriptors+0x12a>

    case UAC_INPUT_TERMINAL:
      class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef*)(void *)pdesc;
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801498e:	1c5a      	adds	r2, r3, #1
 8014990:	b291      	uxth	r1, r2
 8014992:	68fa      	ldr	r2, [r7, #12]
 8014994:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8014998:	68fa      	ldr	r2, [r7, #12]
 801499a:	009b      	lsls	r3, r3, #2
 801499c:	4413      	add	r3, r2
 801499e:	687a      	ldr	r2, [r7, #4]
 80149a0:	605a      	str	r2, [r3, #4]
      break;
 80149a2:	e062      	b.n	8014a6a <ParseCSDescriptors+0x12a>

    case UAC_OUTPUT_TERMINAL:
      class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef*)(void *)pdesc;
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80149aa:	1c5a      	adds	r2, r3, #1
 80149ac:	b291      	uxth	r1, r2
 80149ae:	68fa      	ldr	r2, [r7, #12]
 80149b0:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80149b4:	68fa      	ldr	r2, [r7, #12]
 80149b6:	3304      	adds	r3, #4
 80149b8:	009b      	lsls	r3, r3, #2
 80149ba:	4413      	add	r3, r2
 80149bc:	687a      	ldr	r2, [r7, #4]
 80149be:	605a      	str	r2, [r3, #4]
      break;
 80149c0:	e053      	b.n	8014a6a <ParseCSDescriptors+0x12a>

    case UAC_FEATURE_UNIT:
      class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef*)(void *)pdesc;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80149c8:	1c5a      	adds	r2, r3, #1
 80149ca:	b291      	uxth	r1, r2
 80149cc:	68fa      	ldr	r2, [r7, #12]
 80149ce:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 80149d2:	68fa      	ldr	r2, [r7, #12]
 80149d4:	3308      	adds	r3, #8
 80149d6:	009b      	lsls	r3, r3, #2
 80149d8:	4413      	add	r3, r2
 80149da:	687a      	ldr	r2, [r7, #4]
 80149dc:	605a      	str	r2, [r3, #4]
      break;
 80149de:	e044      	b.n	8014a6a <ParseCSDescriptors+0x12a>

    case UAC_SELECTOR_UNIT:
      class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef*)(void *)pdesc;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80149e6:	1c5a      	adds	r2, r3, #1
 80149e8:	b291      	uxth	r1, r2
 80149ea:	68fa      	ldr	r2, [r7, #12]
 80149ec:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80149f0:	68fa      	ldr	r2, [r7, #12]
 80149f2:	3310      	adds	r3, #16
 80149f4:	009b      	lsls	r3, r3, #2
 80149f6:	4413      	add	r3, r2
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	605a      	str	r2, [r3, #4]
      break;
 80149fc:	e035      	b.n	8014a6a <ParseCSDescriptors+0x12a>

    case UAC_MIXER_UNIT:
      class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef*)(void *)pdesc;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8014a04:	1c5a      	adds	r2, r3, #1
 8014a06:	b291      	uxth	r1, r2
 8014a08:	68fa      	ldr	r2, [r7, #12]
 8014a0a:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 8014a0e:	68fa      	ldr	r2, [r7, #12]
 8014a10:	330c      	adds	r3, #12
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	4413      	add	r3, r2
 8014a16:	687a      	ldr	r2, [r7, #4]
 8014a18:	605a      	str	r2, [r3, #4]
      break;
 8014a1a:	e026      	b.n	8014a6a <ParseCSDescriptors+0x12a>
      break;
    }
  }
  else
  {
    if(ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8014a1c:	7afb      	ldrb	r3, [r7, #11]
 8014a1e:	2b02      	cmp	r3, #2
 8014a20:	d122      	bne.n	8014a68 <ParseCSDescriptors+0x128>
    {
      switch(pdesc[2])
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	3302      	adds	r3, #2
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	2b01      	cmp	r3, #1
 8014a2a:	d002      	beq.n	8014a32 <ParseCSDescriptors+0xf2>
 8014a2c:	2b02      	cmp	r3, #2
 8014a2e:	d00a      	beq.n	8014a46 <ParseCSDescriptors+0x106>
        break;
      case UAC_FORMAT_TYPE:
        class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef*)(void *)pdesc;
        break;
      default:
        break;
 8014a30:	e01b      	b.n	8014a6a <ParseCSDescriptors+0x12a>
        class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef*)(void *)pdesc;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	330a      	adds	r3, #10
 8014a3c:	00db      	lsls	r3, r3, #3
 8014a3e:	4413      	add	r3, r2
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	605a      	str	r2, [r3, #4]
        break;
 8014a44:	e011      	b.n	8014a6a <ParseCSDescriptors+0x12a>
        class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef*)(void *)pdesc;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8014a4c:	1c5a      	adds	r2, r3, #1
 8014a4e:	b291      	uxth	r1, r2
 8014a50:	68fa      	ldr	r2, [r7, #12]
 8014a52:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8014a56:	68fa      	ldr	r2, [r7, #12]
 8014a58:	330a      	adds	r3, #10
 8014a5a:	00db      	lsls	r3, r3, #3
 8014a5c:	4413      	add	r3, r2
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	609a      	str	r2, [r3, #8]
        break;
 8014a62:	e002      	b.n	8014a6a <ParseCSDescriptors+0x12a>
      break;
 8014a64:	bf00      	nop
 8014a66:	e000      	b.n	8014a6a <ParseCSDescriptors+0x12a>
      }
    }
 8014a68:	bf00      	nop
  }

  return USBH_OK;
 8014a6a:	2300      	movs	r3, #0
}
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	3714      	adds	r7, #20
 8014a70:	46bd      	mov	sp, r7
 8014a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a76:	4770      	bx	lr

08014a78 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b085      	sub	sp, #20
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	460b      	mov	r3, r1
 8014a82:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014a8a:	69db      	ldr	r3, [r3, #28]
 8014a8c:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8014a8e:	2300      	movs	r3, #0
 8014a90:	73fb      	strb	r3, [r7, #15]
 8014a92:	e01b      	b.n	8014acc <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if(AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8014a94:	7bfb      	ldrb	r3, [r7, #15]
 8014a96:	68ba      	ldr	r2, [r7, #8]
 8014a98:	3322      	adds	r3, #34	; 0x22
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	689b      	ldr	r3, [r3, #8]
 8014aa0:	791b      	ldrb	r3, [r3, #4]
 8014aa2:	78fa      	ldrb	r2, [r7, #3]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d10e      	bne.n	8014ac6 <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8014aa8:	7bfb      	ldrb	r3, [r7, #15]
 8014aaa:	68ba      	ldr	r2, [r7, #8]
 8014aac:	3322      	adds	r3, #34	; 0x22
 8014aae:	009b      	lsls	r3, r3, #2
 8014ab0:	4413      	add	r3, r2
 8014ab2:	689b      	ldr	r3, [r3, #8]
 8014ab4:	78db      	ldrb	r3, [r3, #3]
 8014ab6:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8014ab8:	78fb      	ldrb	r3, [r7, #3]
 8014aba:	041a      	lsls	r2, r3, #16
 8014abc:	7bfb      	ldrb	r3, [r7, #15]
 8014abe:	4313      	orrs	r3, r2
 8014ac0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8014ac4:	e089      	b.n	8014bda <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8014ac6:	7bfb      	ldrb	r3, [r7, #15]
 8014ac8:	3301      	adds	r3, #1
 8014aca:	73fb      	strb	r3, [r7, #15]
 8014acc:	7bfb      	ldrb	r3, [r7, #15]
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	d3dc      	bcc.n	8014a94 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8014ada:	2300      	movs	r3, #0
 8014adc:	73fb      	strb	r3, [r7, #15]
 8014ade:	e026      	b.n	8014b2e <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID)||
 8014ae0:	7bfb      	ldrb	r3, [r7, #15]
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	3326      	adds	r3, #38	; 0x26
 8014ae6:	009b      	lsls	r3, r3, #2
 8014ae8:	4413      	add	r3, r2
 8014aea:	689b      	ldr	r3, [r3, #8]
 8014aec:	795b      	ldrb	r3, [r3, #5]
 8014aee:	78fa      	ldrb	r2, [r7, #3]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	d009      	beq.n	8014b08 <USBH_AUDIO_FindLinkedUnit+0x90>
       (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8014af4:	7bfb      	ldrb	r3, [r7, #15]
 8014af6:	68ba      	ldr	r2, [r7, #8]
 8014af8:	3326      	adds	r3, #38	; 0x26
 8014afa:	009b      	lsls	r3, r3, #2
 8014afc:	4413      	add	r3, r2
 8014afe:	689b      	ldr	r3, [r3, #8]
 8014b00:	799b      	ldrb	r3, [r3, #6]
    if((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID)||
 8014b02:	78fa      	ldrb	r2, [r7, #3]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d10f      	bne.n	8014b28 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8014b08:	7bfb      	ldrb	r3, [r7, #15]
 8014b0a:	68ba      	ldr	r2, [r7, #8]
 8014b0c:	3326      	adds	r3, #38	; 0x26
 8014b0e:	009b      	lsls	r3, r3, #2
 8014b10:	4413      	add	r3, r2
 8014b12:	689b      	ldr	r3, [r3, #8]
 8014b14:	78db      	ldrb	r3, [r3, #3]
 8014b16:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8014b18:	78fb      	ldrb	r3, [r7, #3]
 8014b1a:	041b      	lsls	r3, r3, #16
 8014b1c:	461a      	mov	r2, r3
 8014b1e:	7bfb      	ldrb	r3, [r7, #15]
 8014b20:	4313      	orrs	r3, r2
 8014b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014b26:	e058      	b.n	8014bda <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8014b28:	7bfb      	ldrb	r3, [r7, #15]
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	73fb      	strb	r3, [r7, #15]
 8014b2e:	7bfb      	ldrb	r3, [r7, #15]
 8014b30:	b29a      	uxth	r2, r3
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d3d1      	bcc.n	8014ae0 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	73fb      	strb	r3, [r7, #15]
 8014b40:	e01c      	b.n	8014b7c <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if(AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8014b42:	7bfb      	ldrb	r3, [r7, #15]
 8014b44:	68ba      	ldr	r2, [r7, #8]
 8014b46:	332a      	adds	r3, #42	; 0x2a
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	4413      	add	r3, r2
 8014b4c:	689b      	ldr	r3, [r3, #8]
 8014b4e:	795b      	ldrb	r3, [r3, #5]
 8014b50:	78fa      	ldrb	r2, [r7, #3]
 8014b52:	429a      	cmp	r2, r3
 8014b54:	d10f      	bne.n	8014b76 <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8014b56:	7bfb      	ldrb	r3, [r7, #15]
 8014b58:	68ba      	ldr	r2, [r7, #8]
 8014b5a:	332a      	adds	r3, #42	; 0x2a
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	4413      	add	r3, r2
 8014b60:	689b      	ldr	r3, [r3, #8]
 8014b62:	78db      	ldrb	r3, [r3, #3]
 8014b64:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8014b66:	78fb      	ldrb	r3, [r7, #3]
 8014b68:	041b      	lsls	r3, r3, #16
 8014b6a:	461a      	mov	r2, r3
 8014b6c:	7bfb      	ldrb	r3, [r7, #15]
 8014b6e:	4313      	orrs	r3, r2
 8014b70:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8014b74:	e031      	b.n	8014bda <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8014b76:	7bfb      	ldrb	r3, [r7, #15]
 8014b78:	3301      	adds	r3, #1
 8014b7a:	73fb      	strb	r3, [r7, #15]
 8014b7c:	7bfb      	ldrb	r3, [r7, #15]
 8014b7e:	b29a      	uxth	r2, r3
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d3db      	bcc.n	8014b42 <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	73fb      	strb	r3, [r7, #15]
 8014b8e:	e01c      	b.n	8014bca <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8014b90:	7bfb      	ldrb	r3, [r7, #15]
 8014b92:	68ba      	ldr	r2, [r7, #8]
 8014b94:	331e      	adds	r3, #30
 8014b96:	009b      	lsls	r3, r3, #2
 8014b98:	4413      	add	r3, r2
 8014b9a:	689b      	ldr	r3, [r3, #8]
 8014b9c:	79db      	ldrb	r3, [r3, #7]
 8014b9e:	78fa      	ldrb	r2, [r7, #3]
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	d10f      	bne.n	8014bc4 <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8014ba4:	7bfb      	ldrb	r3, [r7, #15]
 8014ba6:	68ba      	ldr	r2, [r7, #8]
 8014ba8:	331e      	adds	r3, #30
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	4413      	add	r3, r2
 8014bae:	689b      	ldr	r3, [r3, #8]
 8014bb0:	78db      	ldrb	r3, [r3, #3]
 8014bb2:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8014bb4:	78fb      	ldrb	r3, [r7, #3]
 8014bb6:	041b      	lsls	r3, r3, #16
 8014bb8:	461a      	mov	r2, r3
 8014bba:	7bfb      	ldrb	r3, [r7, #15]
 8014bbc:	4313      	orrs	r3, r2
 8014bbe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8014bc2:	e00a      	b.n	8014bda <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8014bc4:	7bfb      	ldrb	r3, [r7, #15]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	73fb      	strb	r3, [r7, #15]
 8014bca:	7bfb      	ldrb	r3, [r7, #15]
 8014bcc:	b29a      	uxth	r2, r3
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d3db      	bcc.n	8014b90 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8014bd8:	2300      	movs	r3, #0
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	3714      	adds	r7, #20
 8014bde:	46bd      	mov	sp, r7
 8014be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be4:	4770      	bx	lr
	...

08014be8 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b086      	sub	sp, #24
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014bfe:	69db      	ldr	r3, [r3, #28]
 8014c00:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8014c02:	2300      	movs	r3, #0
 8014c04:	75bb      	strb	r3, [r7, #22]
 8014c06:	e02c      	b.n	8014c62 <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8014c08:	7dbb      	ldrb	r3, [r7, #22]
 8014c0a:	693a      	ldr	r2, [r7, #16]
 8014c0c:	331a      	adds	r3, #26
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	4413      	add	r3, r2
 8014c12:	689b      	ldr	r3, [r3, #8]
 8014c14:	791b      	ldrb	r3, [r3, #4]
 8014c16:	4619      	mov	r1, r3
 8014c18:	7dbb      	ldrb	r3, [r7, #22]
 8014c1a:	693a      	ldr	r2, [r7, #16]
 8014c1c:	331a      	adds	r3, #26
 8014c1e:	009b      	lsls	r3, r3, #2
 8014c20:	4413      	add	r3, r2
 8014c22:	689b      	ldr	r3, [r3, #8]
 8014c24:	795b      	ldrb	r3, [r3, #5]
 8014c26:	b29b      	uxth	r3, r3
 8014c28:	021b      	lsls	r3, r3, #8
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	430b      	orrs	r3, r1
 8014c2e:	f240 2201 	movw	r2, #513	; 0x201
 8014c32:	4293      	cmp	r3, r2
 8014c34:	d112      	bne.n	8014c5c <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8014c36:	7dbb      	ldrb	r3, [r7, #22]
 8014c38:	693a      	ldr	r2, [r7, #16]
 8014c3a:	331a      	adds	r3, #26
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	4413      	add	r3, r2
 8014c40:	689b      	ldr	r3, [r3, #8]
 8014c42:	78db      	ldrb	r3, [r3, #3]
 8014c44:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8014c46:	7dbb      	ldrb	r3, [r7, #22]
 8014c48:	693a      	ldr	r2, [r7, #16]
 8014c4a:	331a      	adds	r3, #26
 8014c4c:	009b      	lsls	r3, r3, #2
 8014c4e:	4413      	add	r3, r2
 8014c50:	689b      	ldr	r3, [r3, #8]
 8014c52:	79da      	ldrb	r2, [r3, #7]
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8014c5a:	e009      	b.n	8014c70 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8014c5c:	7dbb      	ldrb	r3, [r7, #22]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	75bb      	strb	r3, [r7, #22]
 8014c62:	7dbb      	ldrb	r3, [r7, #22]
 8014c64:	b29a      	uxth	r2, r3
 8014c66:	693b      	ldr	r3, [r7, #16]
 8014c68:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d3cb      	bcc.n	8014c08 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8014c70:	7dfb      	ldrb	r3, [r7, #23]
 8014c72:	4619      	mov	r1, r3
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f7ff feff 	bl	8014a78 <USBH_AUDIO_FindLinkedUnit>
 8014c7a:	60f8      	str	r0, [r7, #12]

    if (!value)
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d101      	bne.n	8014c86 <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 8014c82:	2302      	movs	r3, #2
 8014c84:	e034      	b.n	8014cf0 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	0a1b      	lsrs	r3, r3, #8
 8014c8e:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	0c1b      	lsrs	r3, r3, #16
 8014c94:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8014c96:	7abb      	ldrb	r3, [r7, #10]
 8014c98:	3b03      	subs	r3, #3
 8014c9a:	2b03      	cmp	r3, #3
 8014c9c:	d81e      	bhi.n	8014cdc <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8014c9e:	a201      	add	r2, pc, #4	; (adr r2, 8014ca4 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8014ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ca4:	08014cd3 	.word	0x08014cd3
 8014ca8:	08014cbf 	.word	0x08014cbf
 8014cac:	08014cc9 	.word	0x08014cc9
 8014cb0:	08014cb5 	.word	0x08014cb5
    {
    case UAC_FEATURE_UNIT:
      AUDIO_Handle->microphone.asociated_feature = Index;
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	7afa      	ldrb	r2, [r7, #11]
 8014cb8:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
      break;
 8014cbc:	e011      	b.n	8014ce2 <USBH_AUDIO_BuildMicrophonePath+0xfa>

    case UAC_MIXER_UNIT:
      AUDIO_Handle->microphone.asociated_mixer = Index;
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	7afa      	ldrb	r2, [r7, #11]
 8014cc2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      break;
 8014cc6:	e00c      	b.n	8014ce2 <USBH_AUDIO_BuildMicrophonePath+0xfa>

    case UAC_SELECTOR_UNIT:
      AUDIO_Handle->microphone.asociated_selector = Index;
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	7afa      	ldrb	r2, [r7, #11]
 8014ccc:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
      break;
 8014cd0:	e007      	b.n	8014ce2 <USBH_AUDIO_BuildMicrophonePath+0xfa>

    case UAC_OUTPUT_TERMINAL:
      AUDIO_Handle->microphone.asociated_terminal = Index;
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	7afa      	ldrb	r2, [r7, #11]
 8014cd6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
      break;
 8014cda:	e002      	b.n	8014ce2 <USBH_AUDIO_BuildMicrophonePath+0xfa>

    default:
      ret = USBH_FAIL;
 8014cdc:	2302      	movs	r3, #2
 8014cde:	757b      	strb	r3, [r7, #21]
      break;
 8014ce0:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8014ce2:	7abb      	ldrb	r3, [r7, #10]
 8014ce4:	2b03      	cmp	r3, #3
 8014ce6:	d002      	beq.n	8014cee <USBH_AUDIO_BuildMicrophonePath+0x106>
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d1c0      	bne.n	8014c70 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 8014cee:	7d7b      	ldrb	r3, [r7, #21]
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3718      	adds	r7, #24
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}

08014cf8 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b086      	sub	sp, #24
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8014d00:	2300      	movs	r3, #0
 8014d02:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8014d04:	2300      	movs	r3, #0
 8014d06:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014d0e:	69db      	ldr	r3, [r3, #28]
 8014d10:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8014d12:	2300      	movs	r3, #0
 8014d14:	757b      	strb	r3, [r7, #21]
 8014d16:	e02c      	b.n	8014d72 <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 8014d18:	7d7b      	ldrb	r3, [r7, #21]
 8014d1a:	693a      	ldr	r2, [r7, #16]
 8014d1c:	331a      	adds	r3, #26
 8014d1e:	009b      	lsls	r3, r3, #2
 8014d20:	4413      	add	r3, r2
 8014d22:	689b      	ldr	r3, [r3, #8]
 8014d24:	791b      	ldrb	r3, [r3, #4]
 8014d26:	4619      	mov	r1, r3
 8014d28:	7d7b      	ldrb	r3, [r7, #21]
 8014d2a:	693a      	ldr	r2, [r7, #16]
 8014d2c:	331a      	adds	r3, #26
 8014d2e:	009b      	lsls	r3, r3, #2
 8014d30:	4413      	add	r3, r2
 8014d32:	689b      	ldr	r3, [r3, #8]
 8014d34:	795b      	ldrb	r3, [r3, #5]
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	021b      	lsls	r3, r3, #8
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	430b      	orrs	r3, r1
 8014d3e:	f240 1201 	movw	r2, #257	; 0x101
 8014d42:	4293      	cmp	r3, r2
 8014d44:	d112      	bne.n	8014d6c <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8014d46:	7d7b      	ldrb	r3, [r7, #21]
 8014d48:	693a      	ldr	r2, [r7, #16]
 8014d4a:	331a      	adds	r3, #26
 8014d4c:	009b      	lsls	r3, r3, #2
 8014d4e:	4413      	add	r3, r2
 8014d50:	689b      	ldr	r3, [r3, #8]
 8014d52:	78db      	ldrb	r3, [r3, #3]
 8014d54:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8014d56:	7d7b      	ldrb	r3, [r7, #21]
 8014d58:	693a      	ldr	r2, [r7, #16]
 8014d5a:	331a      	adds	r3, #26
 8014d5c:	009b      	lsls	r3, r3, #2
 8014d5e:	4413      	add	r3, r2
 8014d60:	689b      	ldr	r3, [r3, #8]
 8014d62:	79da      	ldrb	r2, [r3, #7]
 8014d64:	693b      	ldr	r3, [r7, #16]
 8014d66:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8014d6a:	e009      	b.n	8014d80 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8014d6c:	7d7b      	ldrb	r3, [r7, #21]
 8014d6e:	3301      	adds	r3, #1
 8014d70:	757b      	strb	r3, [r7, #21]
 8014d72:	7d7b      	ldrb	r3, [r7, #21]
 8014d74:	b29a      	uxth	r2, r3
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d3cb      	bcc.n	8014d18 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for(Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8014d80:	2300      	movs	r3, #0
 8014d82:	75bb      	strb	r3, [r7, #22]
 8014d84:	e011      	b.n	8014daa <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if(AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8014d86:	7dbb      	ldrb	r3, [r7, #22]
 8014d88:	693a      	ldr	r2, [r7, #16]
 8014d8a:	3317      	adds	r3, #23
 8014d8c:	00db      	lsls	r3, r3, #3
 8014d8e:	4413      	add	r3, r2
 8014d90:	689b      	ldr	r3, [r3, #8]
 8014d92:	78db      	ldrb	r3, [r3, #3]
 8014d94:	7dfa      	ldrb	r2, [r7, #23]
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d104      	bne.n	8014da4 <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8014d9a:	693b      	ldr	r3, [r7, #16]
 8014d9c:	7dba      	ldrb	r2, [r7, #22]
 8014d9e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 8014da2:	e009      	b.n	8014db8 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8014da4:	7dbb      	ldrb	r3, [r7, #22]
 8014da6:	3301      	adds	r3, #1
 8014da8:	75bb      	strb	r3, [r7, #22]
 8014daa:	7dbb      	ldrb	r3, [r7, #22]
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d3e6      	bcc.n	8014d86 <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8014db8:	7dfb      	ldrb	r3, [r7, #23]
 8014dba:	4619      	mov	r1, r3
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f7ff fe5b 	bl	8014a78 <USBH_AUDIO_FindLinkedUnit>
 8014dc2:	60f8      	str	r0, [r7, #12]

    if (!value)
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d101      	bne.n	8014dce <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8014dca:	2302      	movs	r3, #2
 8014dcc:	e04d      	b.n	8014e6a <USBH_AUDIO_BuildHeadphonePath+0x172>
    }

    Index = (uint8_t)(value & 0xFFU);
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	0a1b      	lsrs	r3, r3, #8
 8014dd6:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	0c1b      	lsrs	r3, r3, #16
 8014ddc:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8014dde:	7afb      	ldrb	r3, [r7, #11]
 8014de0:	3b03      	subs	r3, #3
 8014de2:	2b03      	cmp	r3, #3
 8014de4:	d836      	bhi.n	8014e54 <USBH_AUDIO_BuildHeadphonePath+0x15c>
 8014de6:	a201      	add	r2, pc, #4	; (adr r2, 8014dec <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8014de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dec:	08014e1b 	.word	0x08014e1b
 8014df0:	08014e07 	.word	0x08014e07
 8014df4:	08014e11 	.word	0x08014e11
 8014df8:	08014dfd 	.word	0x08014dfd
    {
    case UAC_FEATURE_UNIT:
      AUDIO_Handle->headphone.asociated_feature = Index;
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	7dba      	ldrb	r2, [r7, #22]
 8014e00:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
      break;
 8014e04:	e02a      	b.n	8014e5c <USBH_AUDIO_BuildHeadphonePath+0x164>

    case UAC_MIXER_UNIT:
      AUDIO_Handle->headphone.asociated_mixer = Index;
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	7dba      	ldrb	r2, [r7, #22]
 8014e0a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
      break;
 8014e0e:	e025      	b.n	8014e5c <USBH_AUDIO_BuildHeadphonePath+0x164>

    case UAC_SELECTOR_UNIT:
      AUDIO_Handle->headphone.asociated_selector = Index;
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	7dba      	ldrb	r2, [r7, #22]
 8014e14:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      break;
 8014e18:	e020      	b.n	8014e5c <USBH_AUDIO_BuildHeadphonePath+0x164>

    case UAC_OUTPUT_TERMINAL:
      AUDIO_Handle->headphone.asociated_terminal = Index;
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	7dba      	ldrb	r2, [r7, #22]
 8014e1e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
      if(LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8014e22:	7dbb      	ldrb	r3, [r7, #22]
 8014e24:	693a      	ldr	r2, [r7, #16]
 8014e26:	331e      	adds	r3, #30
 8014e28:	009b      	lsls	r3, r3, #2
 8014e2a:	4413      	add	r3, r2
 8014e2c:	689b      	ldr	r3, [r3, #8]
 8014e2e:	791b      	ldrb	r3, [r3, #4]
 8014e30:	4619      	mov	r1, r3
 8014e32:	7dbb      	ldrb	r3, [r7, #22]
 8014e34:	693a      	ldr	r2, [r7, #16]
 8014e36:	331e      	adds	r3, #30
 8014e38:	009b      	lsls	r3, r3, #2
 8014e3a:	4413      	add	r3, r2
 8014e3c:	689b      	ldr	r3, [r3, #8]
 8014e3e:	795b      	ldrb	r3, [r3, #5]
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	021b      	lsls	r3, r3, #8
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	430b      	orrs	r3, r1
 8014e48:	f240 1203 	movw	r2, #259	; 0x103
 8014e4c:	4293      	cmp	r3, r2
 8014e4e:	d004      	beq.n	8014e5a <USBH_AUDIO_BuildHeadphonePath+0x162>
      {
        return  USBH_OK;
 8014e50:	2300      	movs	r3, #0
 8014e52:	e00a      	b.n	8014e6a <USBH_AUDIO_BuildHeadphonePath+0x172>
      }
      break;

    default:
      ret = USBH_FAIL;
 8014e54:	2302      	movs	r3, #2
 8014e56:	753b      	strb	r3, [r7, #20]
      break;
 8014e58:	e000      	b.n	8014e5c <USBH_AUDIO_BuildHeadphonePath+0x164>
      break;
 8014e5a:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8014e5c:	7afb      	ldrb	r3, [r7, #11]
 8014e5e:	2b03      	cmp	r3, #3
 8014e60:	d002      	beq.n	8014e68 <USBH_AUDIO_BuildHeadphonePath+0x170>
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d1a7      	bne.n	8014db8 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 8014e68:	7d3b      	ldrb	r3, [r7, #20]
}
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	3718      	adds	r7, #24
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}
 8014e72:	bf00      	nop

08014e74 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b086      	sub	sp, #24
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	4608      	mov	r0, r1
 8014e7e:	4611      	mov	r1, r2
 8014e80:	461a      	mov	r2, r3
 8014e82:	4603      	mov	r3, r0
 8014e84:	70fb      	strb	r3, [r7, #3]
 8014e86:	460b      	mov	r3, r1
 8014e88:	70bb      	strb	r3, [r7, #2]
 8014e8a:	4613      	mov	r3, r2
 8014e8c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue,wIndex,wLength;
  uint8_t UnitID,InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014e94:	69db      	ldr	r3, [r3, #28]
 8014e96:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8014e9c:	78fb      	ldrb	r3, [r7, #3]
 8014e9e:	2b02      	cmp	r3, #2
 8014ea0:	d002      	beq.n	8014ea8 <USBH_AC_SetCur+0x34>
 8014ea2:	2b06      	cmp	r3, #6
 8014ea4:	d018      	beq.n	8014ed8 <USBH_AC_SetCur+0x64>
 8014ea6:	e035      	b.n	8014f14 <USBH_AC_SetCur+0xa0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014eac:	78db      	ldrb	r3, [r3, #3]
 8014eae:	72fb      	strb	r3, [r7, #11]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	72bb      	strb	r3, [r7, #10]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8014eb4:	7afb      	ldrb	r3, [r7, #11]
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	021b      	lsls	r3, r3, #8
 8014eba:	b29a      	uxth	r2, r3
 8014ebc:	7abb      	ldrb	r3, [r7, #10]
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	4313      	orrs	r3, r2
 8014ec2:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8014ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014ec8:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	827b      	strh	r3, [r7, #18]
    break;
 8014ed6:	e020      	b.n	8014f1a <USBH_AC_SetCur+0xa6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8014ed8:	78bb      	ldrb	r3, [r7, #2]
 8014eda:	68fa      	ldr	r2, [r7, #12]
 8014edc:	3322      	adds	r3, #34	; 0x22
 8014ede:	009b      	lsls	r3, r3, #2
 8014ee0:	4413      	add	r3, r2
 8014ee2:	689b      	ldr	r3, [r3, #8]
 8014ee4:	78db      	ldrb	r3, [r3, #3]
 8014ee6:	72fb      	strb	r3, [r7, #11]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8014ee8:	2300      	movs	r3, #0
 8014eea:	72bb      	strb	r3, [r7, #10]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8014eec:	7afb      	ldrb	r3, [r7, #11]
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	021b      	lsls	r3, r3, #8
 8014ef2:	b29a      	uxth	r2, r3
 8014ef4:	7abb      	ldrb	r3, [r7, #10]
 8014ef6:	b29b      	uxth	r3, r3
 8014ef8:	4313      	orrs	r3, r2
 8014efa:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8014efc:	787b      	ldrb	r3, [r7, #1]
 8014efe:	b29b      	uxth	r3, r3
 8014f00:	021b      	lsls	r3, r3, #8
 8014f02:	b29a      	uxth	r2, r3
 8014f04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	4313      	orrs	r3, r2
 8014f0c:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 8014f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f10:	827b      	strh	r3, [r7, #18]
    break;
 8014f12:	e002      	b.n	8014f1a <USBH_AC_SetCur+0xa6>

  default:
    ret = USBH_FAIL;
 8014f14:	2302      	movs	r3, #2
 8014f16:	747b      	strb	r3, [r7, #17]
    break;
 8014f18:	bf00      	nop
  }

  if (ret != USBH_OK)
 8014f1a:	7c7b      	ldrb	r3, [r7, #17]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d001      	beq.n	8014f24 <USBH_AC_SetCur+0xb0>
  {
    return ret;
 8014f20:	7c7b      	ldrb	r3, [r7, #17]
 8014f22:	e017      	b.n	8014f54 <USBH_AC_SetCur+0xe0>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	2221      	movs	r2, #33	; 0x21
 8014f28:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	2201      	movs	r2, #1
 8014f2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	8afa      	ldrh	r2, [r7, #22]
 8014f34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	8aba      	ldrh	r2, [r7, #20]
 8014f3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	8a7a      	ldrh	r2, [r7, #18]
 8014f40:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8014f48:	8a7a      	ldrh	r2, [r7, #18]
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f001 fdce 	bl	8016aee <USBH_CtlReq>
 8014f52:	4603      	mov	r3, r0
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3718      	adds	r7, #24
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}

08014f5c <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b086      	sub	sp, #24
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
 8014f64:	4608      	mov	r0, r1
 8014f66:	4611      	mov	r1, r2
 8014f68:	461a      	mov	r2, r3
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	70fb      	strb	r3, [r7, #3]
 8014f6e:	460b      	mov	r3, r1
 8014f70:	70bb      	strb	r3, [r7, #2]
 8014f72:	4613      	mov	r3, r2
 8014f74:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8014f76:	2300      	movs	r3, #0
 8014f78:	82fb      	strh	r3, [r7, #22]
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	82bb      	strh	r3, [r7, #20]
 8014f7e:	2300      	movs	r3, #0
 8014f80:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8014f82:	2300      	movs	r3, #0
 8014f84:	743b      	strb	r3, [r7, #16]
 8014f86:	2300      	movs	r3, #0
 8014f88:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8014f90:	69db      	ldr	r3, [r3, #28]
 8014f92:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8014f94:	2300      	movs	r3, #0
 8014f96:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8014f98:	78fb      	ldrb	r3, [r7, #3]
 8014f9a:	2b03      	cmp	r3, #3
 8014f9c:	d039      	beq.n	8015012 <USBH_AC_GetCur+0xb6>
 8014f9e:	2b06      	cmp	r3, #6
 8014fa0:	d019      	beq.n	8014fd6 <USBH_AC_GetCur+0x7a>
 8014fa2:	2b02      	cmp	r3, #2
 8014fa4:	d14a      	bne.n	801503c <USBH_AC_GetCur+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014faa:	78db      	ldrb	r3, [r3, #3]
 8014fac:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8014fae:	2300      	movs	r3, #0
 8014fb0:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8014fb2:	7c3b      	ldrb	r3, [r7, #16]
 8014fb4:	b29b      	uxth	r3, r3
 8014fb6:	021b      	lsls	r3, r3, #8
 8014fb8:	b29a      	uxth	r2, r3
 8014fba:	7bfb      	ldrb	r3, [r7, #15]
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	4313      	orrs	r3, r2
 8014fc0:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8014fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014fc6:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	827b      	strh	r3, [r7, #18]
    break;
 8014fd4:	e035      	b.n	8015042 <USBH_AC_GetCur+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8014fd6:	78bb      	ldrb	r3, [r7, #2]
 8014fd8:	68ba      	ldr	r2, [r7, #8]
 8014fda:	3322      	adds	r3, #34	; 0x22
 8014fdc:	009b      	lsls	r3, r3, #2
 8014fde:	4413      	add	r3, r2
 8014fe0:	689b      	ldr	r3, [r3, #8]
 8014fe2:	78db      	ldrb	r3, [r3, #3]
 8014fe4:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8014fea:	7c3b      	ldrb	r3, [r7, #16]
 8014fec:	b29b      	uxth	r3, r3
 8014fee:	021b      	lsls	r3, r3, #8
 8014ff0:	b29a      	uxth	r2, r3
 8014ff2:	7bfb      	ldrb	r3, [r7, #15]
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	4313      	orrs	r3, r2
 8014ff8:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8014ffa:	787b      	ldrb	r3, [r7, #1]
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	021b      	lsls	r3, r3, #8
 8015000:	b29a      	uxth	r2, r3
 8015002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015006:	b29b      	uxth	r3, r3
 8015008:	4313      	orrs	r3, r2
 801500a:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 801500c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801500e:	827b      	strh	r3, [r7, #18]
    break;
 8015010:	e017      	b.n	8015042 <USBH_AC_GetCur+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015018:	78db      	ldrb	r3, [r3, #3]
 801501a:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801501c:	2300      	movs	r3, #0
 801501e:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8015020:	7c3b      	ldrb	r3, [r7, #16]
 8015022:	b29b      	uxth	r3, r3
 8015024:	021b      	lsls	r3, r3, #8
 8015026:	b29a      	uxth	r2, r3
 8015028:	7bfb      	ldrb	r3, [r7, #15]
 801502a:	b29b      	uxth	r3, r3
 801502c:	4313      	orrs	r3, r2
 801502e:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8015030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015034:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 8015036:	2301      	movs	r3, #1
 8015038:	827b      	strh	r3, [r7, #18]
    break;
 801503a:	e002      	b.n	8015042 <USBH_AC_GetCur+0xe6>

  default:
    ret = USBH_FAIL;
 801503c:	2302      	movs	r3, #2
 801503e:	747b      	strb	r3, [r7, #17]
    break;
 8015040:	bf00      	nop
  }

  if (ret != USBH_OK)
 8015042:	7c7b      	ldrb	r3, [r7, #17]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d001      	beq.n	801504c <USBH_AC_GetCur+0xf0>
  {
    return ret;
 8015048:	7c7b      	ldrb	r3, [r7, #17]
 801504a:	e017      	b.n	801507c <USBH_AC_GetCur+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	22a1      	movs	r2, #161	; 0xa1
 8015050:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2281      	movs	r2, #129	; 0x81
 8015056:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	8afa      	ldrh	r2, [r7, #22]
 801505c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	8aba      	ldrh	r2, [r7, #20]
 8015062:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	8a7a      	ldrh	r2, [r7, #18]
 8015068:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem) , wLength ));
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8015070:	8a7a      	ldrh	r2, [r7, #18]
 8015072:	4619      	mov	r1, r3
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f001 fd3a 	bl	8016aee <USBH_CtlReq>
 801507a:	4603      	mov	r3, r0
}
 801507c:	4618      	mov	r0, r3
 801507e:	3718      	adds	r7, #24
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}

08015084 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b086      	sub	sp, #24
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	4608      	mov	r0, r1
 801508e:	4611      	mov	r1, r2
 8015090:	461a      	mov	r2, r3
 8015092:	4603      	mov	r3, r0
 8015094:	70fb      	strb	r3, [r7, #3]
 8015096:	460b      	mov	r3, r1
 8015098:	70bb      	strb	r3, [r7, #2]
 801509a:	4613      	mov	r3, r2
 801509c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 801509e:	2300      	movs	r3, #0
 80150a0:	82fb      	strh	r3, [r7, #22]
 80150a2:	2300      	movs	r3, #0
 80150a4:	82bb      	strh	r3, [r7, #20]
 80150a6:	2300      	movs	r3, #0
 80150a8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80150aa:	2300      	movs	r3, #0
 80150ac:	743b      	strb	r3, [r7, #16]
 80150ae:	2300      	movs	r3, #0
 80150b0:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80150b8:	69db      	ldr	r3, [r3, #28]
 80150ba:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80150bc:	2300      	movs	r3, #0
 80150be:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 80150c0:	78fb      	ldrb	r3, [r7, #3]
 80150c2:	2b03      	cmp	r3, #3
 80150c4:	d039      	beq.n	801513a <USBH_AC_GetMax+0xb6>
 80150c6:	2b06      	cmp	r3, #6
 80150c8:	d019      	beq.n	80150fe <USBH_AC_GetMax+0x7a>
 80150ca:	2b02      	cmp	r3, #2
 80150cc:	d14a      	bne.n	8015164 <USBH_AC_GetMax+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150d2:	78db      	ldrb	r3, [r3, #3]
 80150d4:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 80150d6:	2300      	movs	r3, #0
 80150d8:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80150da:	7c3b      	ldrb	r3, [r7, #16]
 80150dc:	b29b      	uxth	r3, r3
 80150de:	021b      	lsls	r3, r3, #8
 80150e0:	b29a      	uxth	r2, r3
 80150e2:	7bfb      	ldrb	r3, [r7, #15]
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	4313      	orrs	r3, r2
 80150e8:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 80150ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80150ee:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	2200      	movs	r2, #0
 80150f4:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 80150f8:	2301      	movs	r3, #1
 80150fa:	827b      	strh	r3, [r7, #18]
    break;
 80150fc:	e035      	b.n	801516a <USBH_AC_GetMax+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80150fe:	78bb      	ldrb	r3, [r7, #2]
 8015100:	68ba      	ldr	r2, [r7, #8]
 8015102:	3322      	adds	r3, #34	; 0x22
 8015104:	009b      	lsls	r3, r3, #2
 8015106:	4413      	add	r3, r2
 8015108:	689b      	ldr	r3, [r3, #8]
 801510a:	78db      	ldrb	r3, [r3, #3]
 801510c:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801510e:	2300      	movs	r3, #0
 8015110:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8015112:	7c3b      	ldrb	r3, [r7, #16]
 8015114:	b29b      	uxth	r3, r3
 8015116:	021b      	lsls	r3, r3, #8
 8015118:	b29a      	uxth	r2, r3
 801511a:	7bfb      	ldrb	r3, [r7, #15]
 801511c:	b29b      	uxth	r3, r3
 801511e:	4313      	orrs	r3, r2
 8015120:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8015122:	787b      	ldrb	r3, [r7, #1]
 8015124:	b29b      	uxth	r3, r3
 8015126:	021b      	lsls	r3, r3, #8
 8015128:	b29a      	uxth	r2, r3
 801512a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801512e:	b29b      	uxth	r3, r3
 8015130:	4313      	orrs	r3, r2
 8015132:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 8015134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015136:	827b      	strh	r3, [r7, #18]
    break;
 8015138:	e017      	b.n	801516a <USBH_AC_GetMax+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015140:	78db      	ldrb	r3, [r3, #3]
 8015142:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8015144:	2300      	movs	r3, #0
 8015146:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8015148:	7c3b      	ldrb	r3, [r7, #16]
 801514a:	b29b      	uxth	r3, r3
 801514c:	021b      	lsls	r3, r3, #8
 801514e:	b29a      	uxth	r2, r3
 8015150:	7bfb      	ldrb	r3, [r7, #15]
 8015152:	b29b      	uxth	r3, r3
 8015154:	4313      	orrs	r3, r2
 8015156:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8015158:	f44f 7380 	mov.w	r3, #256	; 0x100
 801515c:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 801515e:	2301      	movs	r3, #1
 8015160:	827b      	strh	r3, [r7, #18]
    break;
 8015162:	e002      	b.n	801516a <USBH_AC_GetMax+0xe6>

  default:
    ret = USBH_FAIL;
 8015164:	2302      	movs	r3, #2
 8015166:	747b      	strb	r3, [r7, #17]
    break;
 8015168:	bf00      	nop
  }

  if (ret != USBH_OK)
 801516a:	7c7b      	ldrb	r3, [r7, #17]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d001      	beq.n	8015174 <USBH_AC_GetMax+0xf0>
  {
    return ret;
 8015170:	7c7b      	ldrb	r3, [r7, #17]
 8015172:	e017      	b.n	80151a4 <USBH_AC_GetMax+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	22a1      	movs	r2, #161	; 0xa1
 8015178:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	2283      	movs	r2, #131	; 0x83
 801517e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	8afa      	ldrh	r2, [r7, #22]
 8015184:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	8aba      	ldrh	r2, [r7, #20]
 801518a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	8a7a      	ldrh	r2, [r7, #18]
 8015190:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8015192:	68bb      	ldr	r3, [r7, #8]
 8015194:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8015198:	8a7a      	ldrh	r2, [r7, #18]
 801519a:	4619      	mov	r1, r3
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f001 fca6 	bl	8016aee <USBH_CtlReq>
 80151a2:	4603      	mov	r3, r0

}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3718      	adds	r7, #24
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}

080151ac <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b086      	sub	sp, #24
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	4608      	mov	r0, r1
 80151b6:	4611      	mov	r1, r2
 80151b8:	461a      	mov	r2, r3
 80151ba:	4603      	mov	r3, r0
 80151bc:	70fb      	strb	r3, [r7, #3]
 80151be:	460b      	mov	r3, r1
 80151c0:	70bb      	strb	r3, [r7, #2]
 80151c2:	4613      	mov	r3, r2
 80151c4:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80151c6:	2300      	movs	r3, #0
 80151c8:	82fb      	strh	r3, [r7, #22]
 80151ca:	2300      	movs	r3, #0
 80151cc:	82bb      	strh	r3, [r7, #20]
 80151ce:	2300      	movs	r3, #0
 80151d0:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80151d2:	2300      	movs	r3, #0
 80151d4:	743b      	strb	r3, [r7, #16]
 80151d6:	2300      	movs	r3, #0
 80151d8:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80151e0:	69db      	ldr	r3, [r3, #28]
 80151e2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80151e4:	2300      	movs	r3, #0
 80151e6:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 80151e8:	78fb      	ldrb	r3, [r7, #3]
 80151ea:	2b03      	cmp	r3, #3
 80151ec:	d039      	beq.n	8015262 <USBH_AC_GetRes+0xb6>
 80151ee:	2b06      	cmp	r3, #6
 80151f0:	d019      	beq.n	8015226 <USBH_AC_GetRes+0x7a>
 80151f2:	2b02      	cmp	r3, #2
 80151f4:	d14a      	bne.n	801528c <USBH_AC_GetRes+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80151f6:	68bb      	ldr	r3, [r7, #8]
 80151f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151fa:	78db      	ldrb	r3, [r3, #3]
 80151fc:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 80151fe:	2300      	movs	r3, #0
 8015200:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8015202:	7c3b      	ldrb	r3, [r7, #16]
 8015204:	b29b      	uxth	r3, r3
 8015206:	021b      	lsls	r3, r3, #8
 8015208:	b29a      	uxth	r2, r3
 801520a:	7bfb      	ldrb	r3, [r7, #15]
 801520c:	b29b      	uxth	r3, r3
 801520e:	4313      	orrs	r3, r2
 8015210:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8015212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015216:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	2200      	movs	r2, #0
 801521c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8015220:	2301      	movs	r3, #1
 8015222:	827b      	strh	r3, [r7, #18]
    break;
 8015224:	e035      	b.n	8015292 <USBH_AC_GetRes+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8015226:	78bb      	ldrb	r3, [r7, #2]
 8015228:	68ba      	ldr	r2, [r7, #8]
 801522a:	3322      	adds	r3, #34	; 0x22
 801522c:	009b      	lsls	r3, r3, #2
 801522e:	4413      	add	r3, r2
 8015230:	689b      	ldr	r3, [r3, #8]
 8015232:	78db      	ldrb	r3, [r3, #3]
 8015234:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8015236:	2300      	movs	r3, #0
 8015238:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 801523a:	7c3b      	ldrb	r3, [r7, #16]
 801523c:	b29b      	uxth	r3, r3
 801523e:	021b      	lsls	r3, r3, #8
 8015240:	b29a      	uxth	r2, r3
 8015242:	7bfb      	ldrb	r3, [r7, #15]
 8015244:	b29b      	uxth	r3, r3
 8015246:	4313      	orrs	r3, r2
 8015248:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 801524a:	787b      	ldrb	r3, [r7, #1]
 801524c:	b29b      	uxth	r3, r3
 801524e:	021b      	lsls	r3, r3, #8
 8015250:	b29a      	uxth	r2, r3
 8015252:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015256:	b29b      	uxth	r3, r3
 8015258:	4313      	orrs	r3, r2
 801525a:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 801525c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801525e:	827b      	strh	r3, [r7, #18]
    break;
 8015260:	e017      	b.n	8015292 <USBH_AC_GetRes+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015268:	78db      	ldrb	r3, [r3, #3]
 801526a:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801526c:	2300      	movs	r3, #0
 801526e:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8015270:	7c3b      	ldrb	r3, [r7, #16]
 8015272:	b29b      	uxth	r3, r3
 8015274:	021b      	lsls	r3, r3, #8
 8015276:	b29a      	uxth	r2, r3
 8015278:	7bfb      	ldrb	r3, [r7, #15]
 801527a:	b29b      	uxth	r3, r3
 801527c:	4313      	orrs	r3, r2
 801527e:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8015280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015284:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 8015286:	2301      	movs	r3, #1
 8015288:	827b      	strh	r3, [r7, #18]
    break;
 801528a:	e002      	b.n	8015292 <USBH_AC_GetRes+0xe6>

  default:
    ret = USBH_FAIL;
 801528c:	2302      	movs	r3, #2
 801528e:	747b      	strb	r3, [r7, #17]
    break;
 8015290:	bf00      	nop
  }

  if (ret != USBH_OK)
 8015292:	7c7b      	ldrb	r3, [r7, #17]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d001      	beq.n	801529c <USBH_AC_GetRes+0xf0>
  {
    return ret;
 8015298:	7c7b      	ldrb	r3, [r7, #17]
 801529a:	e017      	b.n	80152cc <USBH_AC_GetRes+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	22a1      	movs	r2, #161	; 0xa1
 80152a0:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2284      	movs	r2, #132	; 0x84
 80152a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	8afa      	ldrh	r2, [r7, #22]
 80152ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	8aba      	ldrh	r2, [r7, #20]
 80152b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	8a7a      	ldrh	r2, [r7, #18]
 80152b8:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80152c0:	8a7a      	ldrh	r2, [r7, #18]
 80152c2:	4619      	mov	r1, r3
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f001 fc12 	bl	8016aee <USBH_CtlReq>
 80152ca:	4603      	mov	r3, r0

}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3718      	adds	r7, #24
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b086      	sub	sp, #24
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	4608      	mov	r0, r1
 80152de:	4611      	mov	r1, r2
 80152e0:	461a      	mov	r2, r3
 80152e2:	4603      	mov	r3, r0
 80152e4:	70fb      	strb	r3, [r7, #3]
 80152e6:	460b      	mov	r3, r1
 80152e8:	70bb      	strb	r3, [r7, #2]
 80152ea:	4613      	mov	r3, r2
 80152ec:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80152ee:	2300      	movs	r3, #0
 80152f0:	82fb      	strh	r3, [r7, #22]
 80152f2:	2300      	movs	r3, #0
 80152f4:	82bb      	strh	r3, [r7, #20]
 80152f6:	2300      	movs	r3, #0
 80152f8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80152fa:	2300      	movs	r3, #0
 80152fc:	743b      	strb	r3, [r7, #16]
 80152fe:	2300      	movs	r3, #0
 8015300:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8015308:	69db      	ldr	r3, [r3, #28]
 801530a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 801530c:	2300      	movs	r3, #0
 801530e:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8015310:	78fb      	ldrb	r3, [r7, #3]
 8015312:	2b03      	cmp	r3, #3
 8015314:	d039      	beq.n	801538a <USBH_AC_GetMin+0xb6>
 8015316:	2b06      	cmp	r3, #6
 8015318:	d019      	beq.n	801534e <USBH_AC_GetMin+0x7a>
 801531a:	2b02      	cmp	r3, #2
 801531c:	d14a      	bne.n	80153b4 <USBH_AC_GetMin+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015322:	78db      	ldrb	r3, [r3, #3]
 8015324:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8015326:	2300      	movs	r3, #0
 8015328:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 801532a:	7c3b      	ldrb	r3, [r7, #16]
 801532c:	b29b      	uxth	r3, r3
 801532e:	021b      	lsls	r3, r3, #8
 8015330:	b29a      	uxth	r2, r3
 8015332:	7bfb      	ldrb	r3, [r7, #15]
 8015334:	b29b      	uxth	r3, r3
 8015336:	4313      	orrs	r3, r2
 8015338:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 801533a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801533e:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	2200      	movs	r2, #0
 8015344:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8015348:	2301      	movs	r3, #1
 801534a:	827b      	strh	r3, [r7, #18]
    break;
 801534c:	e035      	b.n	80153ba <USBH_AC_GetMin+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 801534e:	78bb      	ldrb	r3, [r7, #2]
 8015350:	68ba      	ldr	r2, [r7, #8]
 8015352:	3322      	adds	r3, #34	; 0x22
 8015354:	009b      	lsls	r3, r3, #2
 8015356:	4413      	add	r3, r2
 8015358:	689b      	ldr	r3, [r3, #8]
 801535a:	78db      	ldrb	r3, [r3, #3]
 801535c:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801535e:	2300      	movs	r3, #0
 8015360:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8015362:	7c3b      	ldrb	r3, [r7, #16]
 8015364:	b29b      	uxth	r3, r3
 8015366:	021b      	lsls	r3, r3, #8
 8015368:	b29a      	uxth	r2, r3
 801536a:	7bfb      	ldrb	r3, [r7, #15]
 801536c:	b29b      	uxth	r3, r3
 801536e:	4313      	orrs	r3, r2
 8015370:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8015372:	787b      	ldrb	r3, [r7, #1]
 8015374:	b29b      	uxth	r3, r3
 8015376:	021b      	lsls	r3, r3, #8
 8015378:	b29a      	uxth	r2, r3
 801537a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801537e:	b29b      	uxth	r3, r3
 8015380:	4313      	orrs	r3, r2
 8015382:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 8015384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015386:	827b      	strh	r3, [r7, #18]
    break;
 8015388:	e017      	b.n	80153ba <USBH_AC_GetMin+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015390:	78db      	ldrb	r3, [r3, #3]
 8015392:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8015394:	2300      	movs	r3, #0
 8015396:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8015398:	7c3b      	ldrb	r3, [r7, #16]
 801539a:	b29b      	uxth	r3, r3
 801539c:	021b      	lsls	r3, r3, #8
 801539e:	b29a      	uxth	r2, r3
 80153a0:	7bfb      	ldrb	r3, [r7, #15]
 80153a2:	b29b      	uxth	r3, r3
 80153a4:	4313      	orrs	r3, r2
 80153a6:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 80153a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80153ac:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 80153ae:	2301      	movs	r3, #1
 80153b0:	827b      	strh	r3, [r7, #18]
    break;
 80153b2:	e002      	b.n	80153ba <USBH_AC_GetMin+0xe6>

  default:
    ret = USBH_FAIL;
 80153b4:	2302      	movs	r3, #2
 80153b6:	747b      	strb	r3, [r7, #17]
    break;
 80153b8:	bf00      	nop
  }

  if (ret != USBH_OK)
 80153ba:	7c7b      	ldrb	r3, [r7, #17]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d001      	beq.n	80153c4 <USBH_AC_GetMin+0xf0>
  {
    return ret;
 80153c0:	7c7b      	ldrb	r3, [r7, #17]
 80153c2:	e017      	b.n	80153f4 <USBH_AC_GetMin+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	22a1      	movs	r2, #161	; 0xa1
 80153c8:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2282      	movs	r2, #130	; 0x82
 80153ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	8afa      	ldrh	r2, [r7, #22]
 80153d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	8aba      	ldrh	r2, [r7, #20]
 80153da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	8a7a      	ldrh	r2, [r7, #18]
 80153e0:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80153e8:	8a7a      	ldrh	r2, [r7, #18]
 80153ea:	4619      	mov	r1, r3
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f001 fb7e 	bl	8016aee <USBH_CtlReq>
 80153f2:	4603      	mov	r3, r0

}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3718      	adds	r7, #24
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}

080153fc <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                               uint8_t  Ep,
                                               uint8_t *buff)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b086      	sub	sp, #24
 8015400:	af00      	add	r7, sp, #0
 8015402:	60f8      	str	r0, [r7, #12]
 8015404:	460b      	mov	r3, r1
 8015406:	607a      	str	r2, [r7, #4]
 8015408:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 801540a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801540e:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8015410:	7afb      	ldrb	r3, [r7, #11]
 8015412:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8015414:	2303      	movs	r3, #3
 8015416:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2222      	movs	r2, #34	; 0x22
 801541c:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2201      	movs	r2, #1
 8015422:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	8afa      	ldrh	r2, [r7, #22]
 8015428:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	8aba      	ldrh	r2, [r7, #20]
 801542e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	8a7a      	ldrh	r2, [r7, #18]
 8015434:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8015436:	8a7b      	ldrh	r3, [r7, #18]
 8015438:	461a      	mov	r2, r3
 801543a:	6879      	ldr	r1, [r7, #4]
 801543c:	68f8      	ldr	r0, [r7, #12]
 801543e:	f001 fb56 	bl	8016aee <USBH_CtlReq>
 8015442:	4603      	mov	r3, r0

}
 8015444:	4618      	mov	r0, r3
 8015446:	3718      	adds	r7, #24
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream (USBH_HandleTypeDef *phost)
{
 801544c:	b480      	push	{r7}
 801544e:	b085      	sub	sp, #20
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8015454:	2301      	movs	r3, #1
 8015456:	73fb      	strb	r3, [r7, #15]

  return status;
 8015458:	7bfb      	ldrb	r3, [r7, #15]
}
 801545a:	4618      	mov	r0, r3
 801545c:	3714      	adds	r7, #20
 801545e:	46bd      	mov	sp, r7
 8015460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015464:	4770      	bx	lr
	...

08015468 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control (USBH_HandleTypeDef *phost)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b086      	sub	sp, #24
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8015470:	2301      	movs	r3, #1
 8015472:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801547a:	69db      	ldr	r3, [r3, #28]
 801547c:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 801547e:	2300      	movs	r3, #0
 8015480:	81fb      	strh	r3, [r7, #14]

  switch(AUDIO_Handle->control_state)
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	78db      	ldrb	r3, [r3, #3]
 8015486:	3b01      	subs	r3, #1
 8015488:	2b04      	cmp	r3, #4
 801548a:	f200 8090 	bhi.w	80155ae <USBH_AUDIO_Control+0x146>
 801548e:	a201      	add	r2, pc, #4	; (adr r2, 8015494 <USBH_AUDIO_Control+0x2c>)
 8015490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015494:	080154a9 	.word	0x080154a9
 8015498:	080154fd 	.word	0x080154fd
 801549c:	080155af 	.word	0x080155af
 80154a0:	0801557b 	.word	0x0801557b
 80154a4:	08015595 	.word	0x08015595
  {
  case AUDIO_CONTROL_INIT:
    if((phost->Timer & 1U) == 0U)
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80154ae:	f003 0301 	and.w	r3, r3, #1
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d17d      	bne.n	80155b2 <USBH_AUDIO_Control+0x14a>
    {
      AUDIO_Handle->control.timer = phost->Timer;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
      USBH_InterruptReceiveData(phost,
                                (uint8_t *)(void *)(AUDIO_Handle->mem),
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                (uint8_t)AUDIO_Handle->control.EpSize,
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
      USBH_InterruptReceiveData(phost,
 80154ce:	b2da      	uxtb	r2, r3
 80154d0:	693b      	ldr	r3, [r7, #16]
 80154d2:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	f001 fdfd 	bl	80170d6 <USBH_InterruptReceiveData>
                                AUDIO_Handle->control.Pipe);

      AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80154dc:	693b      	ldr	r3, [r7, #16]
 80154de:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80154e2:	693b      	ldr	r3, [r7, #16]
 80154e4:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80154e8:	693b      	ldr	r3, [r7, #16]
 80154ea:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80154ee:	693b      	ldr	r3, [r7, #16]
 80154f0:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

      AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	2202      	movs	r2, #2
 80154f8:	70da      	strb	r2, [r3, #3]
    }
    break;
 80154fa:	e05a      	b.n	80155b2 <USBH_AUDIO_Control+0x14a>

  case AUDIO_CONTROL_CHANGE:
    if(USBH_LL_GetURBState(phost , AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8015502:	4619      	mov	r1, r3
 8015504:	6878      	ldr	r0, [r7, #4]
 8015506:	f005 fc68 	bl	801adda <USBH_LL_GetURBState>
 801550a:	4603      	mov	r3, r0
 801550c:	2b01      	cmp	r3, #1
 801550e:	d114      	bne.n	801553a <USBH_AUDIO_Control+0xd2>
    {
      attribute = LE16(&AUDIO_Handle->mem[0]);
 8015510:	693b      	ldr	r3, [r7, #16]
 8015512:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801551c:	3302      	adds	r3, #2
 801551e:	881b      	ldrh	r3, [r3, #0]
 8015520:	021b      	lsls	r3, r3, #8
 8015522:	b29b      	uxth	r3, r3
 8015524:	4313      	orrs	r3, r2
 8015526:	81fb      	strh	r3, [r7, #14]
      if(USBH_AUDIO_SetControlAttribute (phost, (uint8_t)attribute) == USBH_BUSY)
 8015528:	89fb      	ldrh	r3, [r7, #14]
 801552a:	b2db      	uxtb	r3, r3
 801552c:	4619      	mov	r1, r3
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f000 f9a5 	bl	801587e <USBH_AUDIO_SetControlAttribute>
 8015534:	4603      	mov	r3, r0
 8015536:	2b01      	cmp	r3, #1
 8015538:	d03d      	beq.n	80155b6 <USBH_AUDIO_Control+0x14e>
      {
        break;
      }
    }

    if(( phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8015540:	693b      	ldr	r3, [r7, #16]
 8015542:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8015546:	1ad3      	subs	r3, r2, r3
 8015548:	693a      	ldr	r2, [r7, #16]
 801554a:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 801554e:	4293      	cmp	r3, r2
 8015550:	d333      	bcc.n	80155ba <USBH_AUDIO_Control+0x152>
    {
      AUDIO_Handle->control.timer = phost->Timer;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

      USBH_InterruptReceiveData(phost,
                                (uint8_t *)(void *)(AUDIO_Handle->mem),
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                (uint8_t)AUDIO_Handle->control.EpSize,
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
      USBH_InterruptReceiveData(phost,
 801556a:	b2da      	uxtb	r2, r3
 801556c:	693b      	ldr	r3, [r7, #16]
 801556e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f001 fdaf 	bl	80170d6 <USBH_InterruptReceiveData>
                                AUDIO_Handle->control.Pipe);

    }
    break;
 8015578:	e01f      	b.n	80155ba <USBH_AUDIO_Control+0x152>

  case AUDIO_CONTROL_VOLUME_UP:
       if( USBH_AUDIO_SetControlAttribute (phost, 1U) == USBH_OK)
 801557a:	2101      	movs	r1, #1
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f000 f97e 	bl	801587e <USBH_AUDIO_SetControlAttribute>
 8015582:	4603      	mov	r3, r0
 8015584:	2b00      	cmp	r3, #0
 8015586:	d11a      	bne.n	80155be <USBH_AUDIO_Control+0x156>
       {
         AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	2201      	movs	r2, #1
 801558c:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 801558e:	2300      	movs	r3, #0
 8015590:	75fb      	strb	r3, [r7, #23]
       }
       break;
 8015592:	e014      	b.n	80155be <USBH_AUDIO_Control+0x156>

  case AUDIO_CONTROL_VOLUME_DOWN:
       if( USBH_AUDIO_SetControlAttribute (phost, 2U) == USBH_OK)
 8015594:	2102      	movs	r1, #2
 8015596:	6878      	ldr	r0, [r7, #4]
 8015598:	f000 f971 	bl	801587e <USBH_AUDIO_SetControlAttribute>
 801559c:	4603      	mov	r3, r0
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d10f      	bne.n	80155c2 <USBH_AUDIO_Control+0x15a>
       {
         AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	2201      	movs	r2, #1
 80155a6:	70da      	strb	r2, [r3, #3]
         status = USBH_OK;
 80155a8:	2300      	movs	r3, #0
 80155aa:	75fb      	strb	r3, [r7, #23]
       }
       break;
 80155ac:	e009      	b.n	80155c2 <USBH_AUDIO_Control+0x15a>

  case AUDIO_CONTROL_IDLE:
  default:
    break;
 80155ae:	bf00      	nop
 80155b0:	e008      	b.n	80155c4 <USBH_AUDIO_Control+0x15c>
    break;
 80155b2:	bf00      	nop
 80155b4:	e006      	b.n	80155c4 <USBH_AUDIO_Control+0x15c>
        break;
 80155b6:	bf00      	nop
 80155b8:	e004      	b.n	80155c4 <USBH_AUDIO_Control+0x15c>
    break;
 80155ba:	bf00      	nop
 80155bc:	e002      	b.n	80155c4 <USBH_AUDIO_Control+0x15c>
       break;
 80155be:	bf00      	nop
 80155c0:	e000      	b.n	80155c4 <USBH_AUDIO_Control+0x15c>
       break;
 80155c2:	bf00      	nop
  }

  return status;
 80155c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3718      	adds	r7, #24
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop

080155d0 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream (USBH_HandleTypeDef *phost)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b086      	sub	sp, #24
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80155d8:	2301      	movs	r3, #1
 80155da:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80155e2:	69db      	ldr	r3, [r3, #28]
 80155e4:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch(AUDIO_Handle->play_state)
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	789b      	ldrb	r3, [r3, #2]
 80155ea:	3b01      	subs	r3, #1
 80155ec:	2b04      	cmp	r3, #4
 80155ee:	d878      	bhi.n	80156e2 <USBH_AUDIO_OutputStream+0x112>
 80155f0:	a201      	add	r2, pc, #4	; (adr r2, 80155f8 <USBH_AUDIO_OutputStream+0x28>)
 80155f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155f6:	bf00      	nop
 80155f8:	0801560d 	.word	0x0801560d
 80155fc:	08015685 	.word	0x08015685
 8015600:	0801564f 	.word	0x0801564f
 8015604:	080156d7 	.word	0x080156d7
 8015608:	080156b5 	.word	0x080156b5
  {
  case AUDIO_PLAYBACK_INIT:

    if( AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8015612:	693a      	ldr	r2, [r7, #16]
 8015614:	3317      	adds	r3, #23
 8015616:	00db      	lsls	r3, r3, #3
 8015618:	4413      	add	r3, r2
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	79db      	ldrb	r3, [r3, #7]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d103      	bne.n	801562a <USBH_AUDIO_OutputStream+0x5a>
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	2203      	movs	r2, #3
 8015626:	709a      	strb	r2, [r3, #2]
 8015628:	e002      	b.n	8015630 <USBH_AUDIO_OutputStream+0x60>
    }
    else
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 801562a:	693b      	ldr	r3, [r7, #16]
 801562c:	2202      	movs	r2, #2
 801562e:	709a      	strb	r2, [r3, #2]
    }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2202      	movs	r2, #2
 8015634:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015644:	2200      	movs	r2, #0
 8015646:	4619      	mov	r1, r3
 8015648:	f001 fff0 	bl	801762c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 801564c:	e04e      	b.n	80156ec <USBH_AUDIO_OutputStream+0x11c>

  case AUDIO_PLAYBACK_SET_EP_FREQ:

    buff = (uint8_t*)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 801564e:	693b      	ldr	r3, [r7, #16]
 8015650:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8015654:	693a      	ldr	r2, [r7, #16]
 8015656:	3317      	adds	r3, #23
 8015658:	00db      	lsls	r3, r3, #3
 801565a:	4413      	add	r3, r2
 801565c:	68db      	ldr	r3, [r3, #12]
 801565e:	3308      	adds	r3, #8
 8015660:	60fb      	str	r3, [r7, #12]

    status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8015662:	693b      	ldr	r3, [r7, #16]
 8015664:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8015668:	68fa      	ldr	r2, [r7, #12]
 801566a:	4619      	mov	r1, r3
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	f7ff fec5 	bl	80153fc <USBH_AUDIO_SetEndpointControls>
 8015672:	4603      	mov	r3, r0
 8015674:	75fb      	strb	r3, [r7, #23]
    if(status == USBH_OK)
 8015676:	7dfb      	ldrb	r3, [r7, #23]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d134      	bne.n	80156e6 <USBH_AUDIO_OutputStream+0x116>
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 801567c:	693b      	ldr	r3, [r7, #16]
 801567e:	2205      	movs	r2, #5
 8015680:	709a      	strb	r2, [r3, #2]
    }
    break;
 8015682:	e030      	b.n	80156e6 <USBH_AUDIO_OutputStream+0x116>

  case AUDIO_PLAYBACK_SET_EP:
    buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801568a:	60fb      	str	r3, [r7, #12]
    status = USBH_AUDIO_SetEndpointControls(phost,AUDIO_Handle->headphone.Ep, buff);
 801568c:	693b      	ldr	r3, [r7, #16]
 801568e:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8015692:	68fa      	ldr	r2, [r7, #12]
 8015694:	4619      	mov	r1, r3
 8015696:	6878      	ldr	r0, [r7, #4]
 8015698:	f7ff feb0 	bl	80153fc <USBH_AUDIO_SetEndpointControls>
 801569c:	4603      	mov	r3, r0
 801569e:	75fb      	strb	r3, [r7, #23]
    if(status == USBH_OK)
 80156a0:	7dfb      	ldrb	r3, [r7, #23]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d121      	bne.n	80156ea <USBH_AUDIO_OutputStream+0x11a>
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	2205      	movs	r2, #5
 80156aa:	709a      	strb	r2, [r3, #2]
      USBH_AUDIO_FrequencySet(phost);
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	f000 f98b 	bl	80159c8 <USBH_AUDIO_FrequencySet>
    }
    break;
 80156b2:	e01a      	b.n	80156ea <USBH_AUDIO_OutputStream+0x11a>

  case AUDIO_PLAYBACK_IDLE:
    status = USBH_OK;
 80156b4:	2300      	movs	r3, #0
 80156b6:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2204      	movs	r2, #4
 80156bc:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80156cc:	2200      	movs	r2, #0
 80156ce:	4619      	mov	r1, r3
 80156d0:	f001 ffac 	bl	801762c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80156d4:	e00a      	b.n	80156ec <USBH_AUDIO_OutputStream+0x11c>

  case AUDIO_PLAYBACK_PLAY:
    USBH_AUDIO_Transmit(phost);
 80156d6:	6878      	ldr	r0, [r7, #4]
 80156d8:	f000 f80e 	bl	80156f8 <USBH_AUDIO_Transmit>
    status = USBH_OK;
 80156dc:	2300      	movs	r3, #0
 80156de:	75fb      	strb	r3, [r7, #23]
    break;
 80156e0:	e004      	b.n	80156ec <USBH_AUDIO_OutputStream+0x11c>

  default:
    break;
 80156e2:	bf00      	nop
 80156e4:	e002      	b.n	80156ec <USBH_AUDIO_OutputStream+0x11c>
    break;
 80156e6:	bf00      	nop
 80156e8:	e000      	b.n	80156ec <USBH_AUDIO_OutputStream+0x11c>
    break;
 80156ea:	bf00      	nop
  }

  return status;
 80156ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3718      	adds	r7, #24
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}
 80156f6:	bf00      	nop

080156f8 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit (USBH_HandleTypeDef *phost)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8015700:	2301      	movs	r3, #1
 8015702:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801570a:	69db      	ldr	r3, [r3, #28]
 801570c:	60bb      	str	r3, [r7, #8]

  switch(AUDIO_Handle->processing_state)
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	791b      	ldrb	r3, [r3, #4]
 8015712:	2b01      	cmp	r3, #1
 8015714:	d002      	beq.n	801571c <USBH_AUDIO_Transmit+0x24>
 8015716:	2b02      	cmp	r3, #2
 8015718:	d044      	beq.n	80157a4 <USBH_AUDIO_Transmit+0xac>
 801571a:	e0a7      	b.n	801586c <USBH_AUDIO_Transmit+0x174>
  {
  case AUDIO_DATA_START_OUT:
    /* Sync with start of Even Frame */
    if((phost->Timer & 1U) == 0U)
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8015722:	f003 0301 	and.w	r3, r3, #1
 8015726:	2b00      	cmp	r3, #0
 8015728:	d12a      	bne.n	8015780 <USBH_AUDIO_Transmit+0x88>
    {
      AUDIO_Handle->headphone.timer = phost->Timer;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	2202      	movs	r2, #2
 801573a:	711a      	strb	r2, [r3, #4]
      USBH_IsocSendData(phost,
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                        AUDIO_Handle->headphone.buf,
                        (uint32_t)AUDIO_Handle->headphone.frame_length,
 8015742:	68bb      	ldr	r3, [r7, #8]
 8015744:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
      USBH_IsocSendData(phost,
 8015748:	461a      	mov	r2, r3
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8015750:	6878      	ldr	r0, [r7, #4]
 8015752:	f001 fcdf 	bl	8017114 <USBH_IsocSendData>
                        AUDIO_Handle->headphone.Pipe);

      AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 801575c:	461a      	mov	r2, r3
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 801576a:	461a      	mov	r2, r3
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
      AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 801577e:	e079      	b.n	8015874 <USBH_AUDIO_Transmit+0x17c>
      osDelay(1);
 8015780:	2001      	movs	r0, #1
 8015782:	f001 fde6 	bl	8017352 <osDelay>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2204      	movs	r2, #4
 801578a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801579a:	2200      	movs	r2, #0
 801579c:	4619      	mov	r1, r3
 801579e:	f001 ff45 	bl	801762c <osMessagePut>
    break;
 80157a2:	e067      	b.n	8015874 <USBH_AUDIO_Transmit+0x17c>

  case AUDIO_DATA_OUT:
    if((USBH_LL_GetURBState(phost , AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE)&&
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80157aa:	4619      	mov	r1, r3
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f005 fb14 	bl	801adda <USBH_LL_GetURBState>
 80157b2:	4603      	mov	r3, r0
 80157b4:	2b01      	cmp	r3, #1
 80157b6:	d15c      	bne.n	8015872 <USBH_AUDIO_Transmit+0x17a>
       (( phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80157c4:	1ad3      	subs	r3, r2, r3
 80157c6:	68ba      	ldr	r2, [r7, #8]
 80157c8:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
    if((USBH_LL_GetURBState(phost , AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE)&&
 80157cc:	4293      	cmp	r3, r2
 80157ce:	d350      	bcc.n	8015872 <USBH_AUDIO_Transmit+0x17a>
    {
      AUDIO_Handle->headphone.timer = phost->Timer;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 80157d6:	68bb      	ldr	r3, [r7, #8]
 80157d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

      if(AUDIO_Handle->control.supported == 1U)
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80157e2:	2b01      	cmp	r3, #1
 80157e4:	d102      	bne.n	80157ec <USBH_AUDIO_Transmit+0xf4>
      {
        USBH_AUDIO_Control (phost);
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	f7ff fe3e 	bl	8015468 <USBH_AUDIO_Control>
      }

      if(AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d82b      	bhi.n	8015854 <USBH_AUDIO_Transmit+0x15c>
      {
        USBH_IsocSendData(phost,
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                          AUDIO_Handle->headphone.cbuf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8015808:	461a      	mov	r2, r3
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	f001 fc7f 	bl	8017114 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801581c:	68ba      	ldr	r2, [r7, #8]
 801581e:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8015822:	441a      	add	r2, r3
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8015830:	68ba      	ldr	r2, [r7, #8]
 8015832:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8015836:	441a      	add	r2, r3
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8015844:	68ba      	ldr	r2, [r7, #8]
 8015846:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 801584a:	441a      	add	r2, r3
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
        USBH_AUDIO_BufferEmptyCallback(phost);
      }
    }
    break;
 8015852:	e00e      	b.n	8015872 <USBH_AUDIO_Transmit+0x17a>
        AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801585a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	2205      	movs	r2, #5
 8015862:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_BufferEmptyCallback(phost);
 8015864:	6878      	ldr	r0, [r7, #4]
 8015866:	f000 f8b9 	bl	80159dc <USBH_AUDIO_BufferEmptyCallback>
    break;
 801586a:	e002      	b.n	8015872 <USBH_AUDIO_Transmit+0x17a>

  default:
    status = USBH_FAIL;
 801586c:	2302      	movs	r3, #2
 801586e:	73fb      	strb	r3, [r7, #15]
    break;
 8015870:	e000      	b.n	8015874 <USBH_AUDIO_Transmit+0x17c>
    break;
 8015872:	bf00      	nop
  }
  return status;
 8015874:	7bfb      	ldrb	r3, [r7, #15]
}
 8015876:	4618      	mov	r0, r3
 8015878:	3710      	adds	r7, #16
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}

0801587e <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute (USBH_HandleTypeDef *phost, uint8_t attrib)
{
 801587e:	b580      	push	{r7, lr}
 8015880:	b084      	sub	sp, #16
 8015882:	af00      	add	r7, sp, #0
 8015884:	6078      	str	r0, [r7, #4]
 8015886:	460b      	mov	r3, r1
 8015888:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 801588a:	2301      	movs	r3, #1
 801588c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8015894:	69db      	ldr	r3, [r3, #28]
 8015896:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8015898:	78fb      	ldrb	r3, [r7, #3]
 801589a:	2b01      	cmp	r3, #1
 801589c:	d002      	beq.n	80158a4 <USBH_AUDIO_SetControlAttribute+0x26>
 801589e:	2b02      	cmp	r3, #2
 80158a0:	d00b      	beq.n	80158ba <USBH_AUDIO_SetControlAttribute+0x3c>
 80158a2:	e015      	b.n	80158d0 <USBH_AUDIO_SetControlAttribute+0x52>
  {
  case 0x01:
    AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80158b0:	441a      	add	r2, r3
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    break;
 80158b8:	e00d      	b.n	80158d6 <USBH_AUDIO_SetControlAttribute+0x58>

  case 0x02:
    AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80158c6:	1ad2      	subs	r2, r2, r3
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    break;
 80158ce:	e002      	b.n	80158d6 <USBH_AUDIO_SetControlAttribute+0x58>

  default :
    status = USBH_FAIL;
 80158d0:	2302      	movs	r3, #2
 80158d2:	73fb      	strb	r3, [r7, #15]
    break;
 80158d4:	bf00      	nop
  }

  if(AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d905      	bls.n	80158f2 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume =AUDIO_Handle->headphone.attribute.volumeMax;
 80158e6:	68bb      	ldr	r3, [r7, #8]
 80158e8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80158ec:	68bb      	ldr	r3, [r7, #8]
 80158ee:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if(AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80158fe:	429a      	cmp	r2, r3
 8015900:	d205      	bcs.n	801590e <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume =AUDIO_Handle->headphone.attribute.volumeMin;
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if(AUDIO_SetVolume (phost,
 801590e:	68bb      	ldr	r3, [r7, #8]
 8015910:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if(AUDIO_SetVolume (phost,
 8015920:	b29b      	uxth	r3, r3
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f000 f827 	bl	8015976 <AUDIO_SetVolume>
 8015928:	4603      	mov	r3, r0
 801592a:	2b01      	cmp	r3, #1
 801592c:	d01e      	beq.n	801596c <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if(AUDIO_Handle->temp_channels == 1U)
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8015934:	2b01      	cmp	r3, #1
 8015936:	d10e      	bne.n	8015956 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 801593e:	68bb      	ldr	r3, [r7, #8]
 8015940:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8015950:	2300      	movs	r3, #0
 8015952:	73fb      	strb	r3, [r7, #15]
 8015954:	e007      	b.n	8015966 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 801595c:	3b01      	subs	r3, #1
 801595e:	b2da      	uxtb	r2, r3
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	2206      	movs	r2, #6
 801596a:	705a      	strb	r2, [r3, #1]
  }


  return status;
 801596c:	7bfb      	ldrb	r3, [r7, #15]
}
 801596e:	4618      	mov	r0, r3
 8015970:	3710      	adds	r7, #16
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}

08015976 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume (USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8015976:	b580      	push	{r7, lr}
 8015978:	b086      	sub	sp, #24
 801597a:	af02      	add	r7, sp, #8
 801597c:	6078      	str	r0, [r7, #4]
 801597e:	4608      	mov	r0, r1
 8015980:	4611      	mov	r1, r2
 8015982:	461a      	mov	r2, r3
 8015984:	4603      	mov	r3, r0
 8015986:	70fb      	strb	r3, [r7, #3]
 8015988:	460b      	mov	r3, r1
 801598a:	70bb      	strb	r3, [r7, #2]
 801598c:	4613      	mov	r3, r2
 801598e:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8015990:	2301      	movs	r3, #1
 8015992:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801599a:	69db      	ldr	r3, [r3, #28]
 801599c:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	883a      	ldrh	r2, [r7, #0]
 80159a2:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 80159a6:	78fa      	ldrb	r2, [r7, #3]
 80159a8:	2302      	movs	r3, #2
 80159aa:	9301      	str	r3, [sp, #4]
 80159ac:	78bb      	ldrb	r3, [r7, #2]
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	2302      	movs	r3, #2
 80159b2:	2106      	movs	r1, #6
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f7ff fa5d 	bl	8014e74 <USBH_AC_SetCur>
 80159ba:	4603      	mov	r3, r0
 80159bc:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80159be:	7bfb      	ldrb	r3, [r7, #15]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3710      	adds	r7, #16
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80159c8:	b480      	push	{r7}
 80159ca:	b083      	sub	sp, #12
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]

}
 80159d0:	bf00      	nop
 80159d2:	370c      	adds	r7, #12
 80159d4:	46bd      	mov	sp, r7
 80159d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159da:	4770      	bx	lr

080159dc <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80159dc:	b480      	push	{r7}
 80159de:	b083      	sub	sp, #12
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]

}
 80159e4:	bf00      	nop
 80159e6:	370c      	adds	r7, #12
 80159e8:	46bd      	mov	sp, r7
 80159ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ee:	4770      	bx	lr

080159f0 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80159f0:	b5b0      	push	{r4, r5, r7, lr}
 80159f2:	b08c      	sub	sp, #48	; 0x30
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	60f8      	str	r0, [r7, #12]
 80159f8:	60b9      	str	r1, [r7, #8]
 80159fa:	4613      	mov	r3, r2
 80159fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d101      	bne.n	8015a08 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8015a04:	2302      	movs	r3, #2
 8015a06:	e03c      	b.n	8015a82 <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	79fa      	ldrb	r2, [r7, #7]
 8015a0c:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2200      	movs	r2, #0
 8015a14:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
  phost->ClassNumber = 0U;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8015a20:	68f8      	ldr	r0, [r7, #12]
 8015a22:	f000 f837 	bl	8015a94 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8015a26:	68bb      	ldr	r3, [r7, #8]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d003      	beq.n	8015a34 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	68ba      	ldr	r2, [r7, #8]
 8015a30:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8015a34:	4a15      	ldr	r2, [pc, #84]	; (8015a8c <USBH_Init+0x9c>)
 8015a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a3e:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8015a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a46:	2100      	movs	r1, #0
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f001 fddc 	bl	8017606 <osMessageCreate>
 8015a4e:	4602      	mov	r2, r0
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8015a56:	4b0e      	ldr	r3, [pc, #56]	; (8015a90 <USBH_Init+0xa0>)
 8015a58:	f107 0414 	add.w	r4, r7, #20
 8015a5c:	461d      	mov	r5, r3
 8015a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a62:	682b      	ldr	r3, [r5, #0]
 8015a64:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8015a66:	f107 0314 	add.w	r3, r7, #20
 8015a6a:	68f9      	ldr	r1, [r7, #12]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f001 fc49 	bl	8017304 <osThreadCreate>
 8015a72:	4602      	mov	r2, r0
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8015a7a:	68f8      	ldr	r0, [r7, #12]
 8015a7c:	f005 f87c 	bl	801ab78 <USBH_LL_Init>

  return USBH_OK;
 8015a80:	2300      	movs	r3, #0
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3730      	adds	r7, #48	; 0x30
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bdb0      	pop	{r4, r5, r7, pc}
 8015a8a:	bf00      	nop
 8015a8c:	0801d400 	.word	0x0801d400
 8015a90:	0801d414 	.word	0x0801d414

08015a94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8015a94:	b480      	push	{r7}
 8015a96:	b085      	sub	sp, #20
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8015aa0:	e009      	b.n	8015ab6 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	68fa      	ldr	r2, [r7, #12]
 8015aa6:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8015aaa:	2100      	movs	r1, #0
 8015aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	60fb      	str	r3, [r7, #12]
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2b0e      	cmp	r3, #14
 8015aba:	d9f2      	bls.n	8015aa2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8015abc:	2300      	movs	r3, #0
 8015abe:	60fb      	str	r3, [r7, #12]
 8015ac0:	e009      	b.n	8015ad6 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	4413      	add	r3, r2
 8015ac8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015acc:	2200      	movs	r2, #0
 8015ace:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	60fb      	str	r3, [r7, #12]
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015adc:	d3f1      	bcc.n	8015ac2 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2201      	movs	r2, #1
 8015aee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2200      	movs	r2, #0
 8015af4:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c

  phost->Control.state = CTRL_SETUP;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	2201      	movs	r2, #1
 8015afc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	2240      	movs	r2, #64	; 0x40
 8015b02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2200      	movs	r2, #0
 8015b08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	2200      	movs	r2, #0
 8015b0e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	2201      	movs	r2, #1
 8015b16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8015b1a:	2300      	movs	r3, #0
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3714      	adds	r7, #20
 8015b20:	46bd      	mov	sp, r7
 8015b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b26:	4770      	bx	lr

08015b28 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8015b28:	b480      	push	{r7}
 8015b2a:	b085      	sub	sp, #20
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8015b32:	2300      	movs	r3, #0
 8015b34:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d018      	beq.n	8015b6e <USBH_RegisterClass+0x46>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d110      	bne.n	8015b68 <USBH_RegisterClass+0x40>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015b4c:	1c59      	adds	r1, r3, #1
 8015b4e:	687a      	ldr	r2, [r7, #4]
 8015b50:	f8c2 144c 	str.w	r1, [r2, #1100]	; 0x44c
 8015b54:	687a      	ldr	r2, [r7, #4]
 8015b56:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	4413      	add	r3, r2
 8015b5e:	683a      	ldr	r2, [r7, #0]
 8015b60:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8015b62:	2300      	movs	r3, #0
 8015b64:	73fb      	strb	r3, [r7, #15]
 8015b66:	e004      	b.n	8015b72 <USBH_RegisterClass+0x4a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8015b68:	2302      	movs	r3, #2
 8015b6a:	73fb      	strb	r3, [r7, #15]
 8015b6c:	e001      	b.n	8015b72 <USBH_RegisterClass+0x4a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015b6e:	2302      	movs	r3, #2
 8015b70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3714      	adds	r7, #20
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7e:	4770      	bx	lr

08015b80 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8015b80:	b480      	push	{r7}
 8015b82:	b087      	sub	sp, #28
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
 8015b88:	4608      	mov	r0, r1
 8015b8a:	4611      	mov	r1, r2
 8015b8c:	461a      	mov	r2, r3
 8015b8e:	4603      	mov	r3, r0
 8015b90:	70fb      	strb	r3, [r7, #3]
 8015b92:	460b      	mov	r3, r1
 8015b94:	70bb      	strb	r3, [r7, #2]
 8015b96:	4613      	mov	r3, r2
 8015b98:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8015ba8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015baa:	e025      	b.n	8015bf8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015bac:	7dfb      	ldrb	r3, [r7, #23]
 8015bae:	221a      	movs	r2, #26
 8015bb0:	fb02 f303 	mul.w	r3, r2, r3
 8015bb4:	3308      	adds	r3, #8
 8015bb6:	68fa      	ldr	r2, [r7, #12]
 8015bb8:	4413      	add	r3, r2
 8015bba:	3302      	adds	r3, #2
 8015bbc:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	795b      	ldrb	r3, [r3, #5]
 8015bc2:	78fa      	ldrb	r2, [r7, #3]
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d002      	beq.n	8015bce <USBH_FindInterface+0x4e>
 8015bc8:	78fb      	ldrb	r3, [r7, #3]
 8015bca:	2bff      	cmp	r3, #255	; 0xff
 8015bcc:	d111      	bne.n	8015bf2 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8015bce:	693b      	ldr	r3, [r7, #16]
 8015bd0:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8015bd2:	78ba      	ldrb	r2, [r7, #2]
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	d002      	beq.n	8015bde <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8015bd8:	78bb      	ldrb	r3, [r7, #2]
 8015bda:	2bff      	cmp	r3, #255	; 0xff
 8015bdc:	d109      	bne.n	8015bf2 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8015be2:	787a      	ldrb	r2, [r7, #1]
 8015be4:	429a      	cmp	r2, r3
 8015be6:	d002      	beq.n	8015bee <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015be8:	787b      	ldrb	r3, [r7, #1]
 8015bea:	2bff      	cmp	r3, #255	; 0xff
 8015bec:	d101      	bne.n	8015bf2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8015bee:	7dfb      	ldrb	r3, [r7, #23]
 8015bf0:	e006      	b.n	8015c00 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8015bf2:	7dfb      	ldrb	r3, [r7, #23]
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015bf8:	7dfb      	ldrb	r3, [r7, #23]
 8015bfa:	2b09      	cmp	r3, #9
 8015bfc:	d9d6      	bls.n	8015bac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8015bfe:	23ff      	movs	r3, #255	; 0xff
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	371c      	adds	r7, #28
 8015c04:	46bd      	mov	sp, r7
 8015c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0a:	4770      	bx	lr

08015c0c <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8015c0c:	b480      	push	{r7}
 8015c0e:	b087      	sub	sp, #28
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	460b      	mov	r3, r1
 8015c16:	70fb      	strb	r3, [r7, #3]
 8015c18:	4613      	mov	r3, r2
 8015c1a:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8015c20:	2300      	movs	r3, #0
 8015c22:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8015c2a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015c2c:	e017      	b.n	8015c5e <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015c2e:	7dfb      	ldrb	r3, [r7, #23]
 8015c30:	221a      	movs	r2, #26
 8015c32:	fb02 f303 	mul.w	r3, r2, r3
 8015c36:	3308      	adds	r3, #8
 8015c38:	68fa      	ldr	r2, [r7, #12]
 8015c3a:	4413      	add	r3, r2
 8015c3c:	3302      	adds	r3, #2
 8015c3e:	613b      	str	r3, [r7, #16]
    if((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	789b      	ldrb	r3, [r3, #2]
 8015c44:	78fa      	ldrb	r2, [r7, #3]
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d106      	bne.n	8015c58 <USBH_FindInterfaceIndex+0x4c>
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	78db      	ldrb	r3, [r3, #3]
 8015c4e:	78ba      	ldrb	r2, [r7, #2]
 8015c50:	429a      	cmp	r2, r3
 8015c52:	d101      	bne.n	8015c58 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 8015c54:	7dfb      	ldrb	r3, [r7, #23]
 8015c56:	e006      	b.n	8015c66 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 8015c58:	7dfb      	ldrb	r3, [r7, #23]
 8015c5a:	3301      	adds	r3, #1
 8015c5c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015c5e:	7dfb      	ldrb	r3, [r7, #23]
 8015c60:	2b09      	cmp	r3, #9
 8015c62:	d9e4      	bls.n	8015c2e <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 8015c64:	23ff      	movs	r3, #255	; 0xff
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	371c      	adds	r7, #28
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c70:	4770      	bx	lr

08015c72 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8015c72:	b580      	push	{r7, lr}
 8015c74:	b082      	sub	sp, #8
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f004 ffb8 	bl	801abf0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8015c80:	2101      	movs	r1, #1
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f005 f8bc 	bl	801ae00 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8015c88:	2300      	movs	r3, #0
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3708      	adds	r7, #8
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}
	...

08015c94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b088      	sub	sp, #32
 8015c98:	af04      	add	r7, sp, #16
 8015c9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015c9c:	2302      	movs	r3, #2
 8015c9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f000 fb80 	bl	80163aa <USBH_IsPortEnabled>
 8015caa:	4603      	mov	r3, r0
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d10c      	bne.n	8015cca <USBH_Process+0x36>
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	781b      	ldrb	r3, [r3, #0]
 8015cb4:	b2db      	uxtb	r3, r3
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d007      	beq.n	8015cca <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	2b03      	cmp	r3, #3
 8015cc2:	d002      	beq.n	8015cca <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2203      	movs	r2, #3
 8015cc8:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	781b      	ldrb	r3, [r3, #0]
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	2b0b      	cmp	r3, #11
 8015cd2:	f200 81ad 	bhi.w	8016030 <USBH_Process+0x39c>
 8015cd6:	a201      	add	r2, pc, #4	; (adr r2, 8015cdc <USBH_Process+0x48>)
 8015cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cdc:	08015d0d 	.word	0x08015d0d
 8015ce0:	08015d4b 	.word	0x08015d4b
 8015ce4:	08015d5f 	.word	0x08015d5f
 8015ce8:	0801600b 	.word	0x0801600b
 8015cec:	08016031 	.word	0x08016031
 8015cf0:	08015e09 	.word	0x08015e09
 8015cf4:	08015fa5 	.word	0x08015fa5
 8015cf8:	08015e39 	.word	0x08015e39
 8015cfc:	08015e75 	.word	0x08015e75
 8015d00:	08015eaf 	.word	0x08015eaf
 8015d04:	08015ef7 	.word	0x08015ef7
 8015d08:	08015ff3 	.word	0x08015ff3
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015d12:	b2db      	uxtb	r3, r3
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	f000 818d 	beq.w	8016034 <USBH_Process+0x3a0>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2201      	movs	r2, #1
 8015d1e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8015d20:	20c8      	movs	r0, #200	; 0xc8
 8015d22:	f005 f8b7 	bl	801ae94 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f004 ffbd 	bl	801aca6 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2201      	movs	r2, #1
 8015d30:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015d40:	2200      	movs	r2, #0
 8015d42:	4619      	mov	r1, r3
 8015d44:	f001 fc72 	bl	801762c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8015d48:	e174      	b.n	8016034 <USBH_Process+0x3a0>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015d50:	2b01      	cmp	r3, #1
 8015d52:	f040 8171 	bne.w	8016038 <USBH_Process+0x3a4>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2202      	movs	r2, #2
 8015d5a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8015d5c:	e16c      	b.n	8016038 <USBH_Process+0x3a4>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8015d5e:	2064      	movs	r0, #100	; 0x64
 8015d60:	f005 f898 	bl	801ae94 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f004 ff79 	bl	801ac5c <USBH_LL_GetSpeed>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	461a      	mov	r2, r3
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2205      	movs	r2, #5
 8015d78:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8015d7a:	2100      	movs	r1, #0
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f001 fa13 	bl	80171a8 <USBH_AllocPipe>
 8015d82:	4603      	mov	r3, r0
 8015d84:	461a      	mov	r2, r3
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8015d8a:	2180      	movs	r1, #128	; 0x80
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f001 fa0b 	bl	80171a8 <USBH_AllocPipe>
 8015d92:	4603      	mov	r3, r0
 8015d94:	461a      	mov	r2, r3
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	7919      	ldrb	r1, [r3, #4]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8015daa:	687a      	ldr	r2, [r7, #4]
 8015dac:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8015dae:	b292      	uxth	r2, r2
 8015db0:	9202      	str	r2, [sp, #8]
 8015db2:	2200      	movs	r2, #0
 8015db4:	9201      	str	r2, [sp, #4]
 8015db6:	9300      	str	r3, [sp, #0]
 8015db8:	4603      	mov	r3, r0
 8015dba:	2280      	movs	r2, #128	; 0x80
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f001 f9c4 	bl	801714a <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	7959      	ldrb	r1, [r3, #5]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8015dd2:	687a      	ldr	r2, [r7, #4]
 8015dd4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8015dd6:	b292      	uxth	r2, r2
 8015dd8:	9202      	str	r2, [sp, #8]
 8015dda:	2200      	movs	r2, #0
 8015ddc:	9201      	str	r2, [sp, #4]
 8015dde:	9300      	str	r3, [sp, #0]
 8015de0:	4603      	mov	r3, r0
 8015de2:	2200      	movs	r2, #0
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f001 f9b0 	bl	801714a <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2201      	movs	r2, #1
 8015dee:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015dfe:	2200      	movs	r2, #0
 8015e00:	4619      	mov	r1, r3
 8015e02:	f001 fc13 	bl	801762c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8015e06:	e122      	b.n	801604e <USBH_Process+0x3ba>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f000 f925 	bl	8016058 <USBH_HandleEnum>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	f040 8113 	bne.w	801603c <USBH_Process+0x3a8>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	2200      	movs	r2, #0
 8015e1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8015e24:	2b01      	cmp	r3, #1
 8015e26:	d103      	bne.n	8015e30 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2208      	movs	r2, #8
 8015e2c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8015e2e:	e105      	b.n	801603c <USBH_Process+0x3a8>
        phost->gState  = HOST_INPUT;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2207      	movs	r2, #7
 8015e34:	701a      	strb	r2, [r3, #0]
    break;
 8015e36:	e101      	b.n	801603c <USBH_Process+0x3a8>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	f000 80fe 	beq.w	8016040 <USBH_Process+0x3ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015e4a:	2101      	movs	r1, #1
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2208      	movs	r2, #8
 8015e54:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	2205      	movs	r2, #5
 8015e5a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	f001 fbdd 	bl	801762c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8015e72:	e0e5      	b.n	8016040 <USBH_Process+0x3ac>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8015e7a:	b29b      	uxth	r3, r3
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f000 fc0b 	bl	801669a <USBH_SetCfg>
 8015e84:	4603      	mov	r3, r0
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d102      	bne.n	8015e90 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2209      	movs	r2, #9
 8015e8e:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2201      	movs	r2, #1
 8015e94:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	f001 fbc0 	bl	801762c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8015eac:	e0cf      	b.n	801604e <USBH_Process+0x3ba>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8015eb4:	f003 0320 	and.w	r3, r3, #32
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d00a      	beq.n	8015ed2 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8015ebc:	2101      	movs	r1, #1
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	f000 fc35 	bl	801672e <USBH_SetFeature>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d106      	bne.n	8015ed8 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	220a      	movs	r2, #10
 8015ece:	701a      	strb	r2, [r3, #0]
 8015ed0:	e002      	b.n	8015ed8 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	220a      	movs	r2, #10
 8015ed6:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2201      	movs	r2, #1
 8015edc:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015eec:	2200      	movs	r2, #0
 8015eee:	4619      	mov	r1, r3
 8015ef0:	f001 fb9c 	bl	801762c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8015ef4:	e0ab      	b.n	801604e <USBH_Process+0x3ba>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d042      	beq.n	8015f86 <USBH_Process+0x2f2>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2200      	movs	r2, #0
 8015f04:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015f08:	2300      	movs	r3, #0
 8015f0a:	73fb      	strb	r3, [r7, #15]
 8015f0c:	e019      	b.n	8015f42 <USBH_Process+0x2ae>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8015f0e:	7bfb      	ldrb	r3, [r7, #15]
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8015f16:	009b      	lsls	r3, r3, #2
 8015f18:	4413      	add	r3, r2
 8015f1a:	685b      	ldr	r3, [r3, #4]
 8015f1c:	791a      	ldrb	r2, [r3, #4]
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d109      	bne.n	8015f3c <USBH_Process+0x2a8>
        {
          phost->pActiveClass = phost->pClass[idx];
 8015f28:	7bfb      	ldrb	r3, [r7, #15]
 8015f2a:	687a      	ldr	r2, [r7, #4]
 8015f2c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8015f30:	009b      	lsls	r3, r3, #2
 8015f32:	4413      	add	r3, r2
 8015f34:	685a      	ldr	r2, [r3, #4]
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015f3c:	7bfb      	ldrb	r3, [r7, #15]
 8015f3e:	3301      	adds	r3, #1
 8015f40:	73fb      	strb	r3, [r7, #15]
 8015f42:	7bfb      	ldrb	r3, [r7, #15]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d0e2      	beq.n	8015f0e <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d016      	beq.n	8015f80 <USBH_Process+0x2ec>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8015f58:	689b      	ldr	r3, [r3, #8]
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	4798      	blx	r3
 8015f5e:	4603      	mov	r3, r0
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d109      	bne.n	8015f78 <USBH_Process+0x2e4>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2206      	movs	r2, #6
 8015f68:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015f70:	2103      	movs	r1, #3
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	4798      	blx	r3
 8015f76:	e006      	b.n	8015f86 <USBH_Process+0x2f2>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	220d      	movs	r2, #13
 8015f7c:	701a      	strb	r2, [r3, #0]
 8015f7e:	e002      	b.n	8015f86 <USBH_Process+0x2f2>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	220d      	movs	r2, #13
 8015f84:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2205      	movs	r2, #5
 8015f8a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	4619      	mov	r1, r3
 8015f9e:	f001 fb45 	bl	801762c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8015fa2:	e054      	b.n	801604e <USBH_Process+0x3ba>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d00f      	beq.n	8015fce <USBH_Process+0x33a>
    {
      status = phost->pActiveClass->Requests(phost);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8015fb4:	691b      	ldr	r3, [r3, #16]
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	4798      	blx	r3
 8015fba:	4603      	mov	r3, r0
 8015fbc:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8015fbe:	7bbb      	ldrb	r3, [r7, #14]
 8015fc0:	b2db      	uxtb	r3, r3
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d13e      	bne.n	8016044 <USBH_Process+0x3b0>
      {
        phost->gState  = HOST_CLASS;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	220b      	movs	r2, #11
 8015fca:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8015fcc:	e03a      	b.n	8016044 <USBH_Process+0x3b0>
      phost->gState  = HOST_ABORT_STATE;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	220d      	movs	r2, #13
 8015fd2:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	2205      	movs	r2, #5
 8015fd8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015fe8:	2200      	movs	r2, #0
 8015fea:	4619      	mov	r1, r3
 8015fec:	f001 fb1e 	bl	801762c <osMessagePut>
    break;
 8015ff0:	e028      	b.n	8016044 <USBH_Process+0x3b0>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d025      	beq.n	8016048 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->BgndProcess(phost);
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8016002:	695b      	ldr	r3, [r3, #20]
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	4798      	blx	r3
    }
    break;
 8016008:	e01e      	b.n	8016048 <USBH_Process+0x3b4>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7ff fd42 	bl	8015a94 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8016016:	2b00      	cmp	r3, #0
 8016018:	d018      	beq.n	801604c <USBH_Process+0x3b8>
    {
      phost->pActiveClass->DeInit(phost);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8016020:	68db      	ldr	r3, [r3, #12]
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2200      	movs	r2, #0
 801602a:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
    }
    break;
 801602e:	e00d      	b.n	801604c <USBH_Process+0x3b8>

  case HOST_ABORT_STATE:
  default :
    break;
 8016030:	bf00      	nop
 8016032:	e00c      	b.n	801604e <USBH_Process+0x3ba>
    break;
 8016034:	bf00      	nop
 8016036:	e00a      	b.n	801604e <USBH_Process+0x3ba>
    break;
 8016038:	bf00      	nop
 801603a:	e008      	b.n	801604e <USBH_Process+0x3ba>
    break;
 801603c:	bf00      	nop
 801603e:	e006      	b.n	801604e <USBH_Process+0x3ba>
    break;
 8016040:	bf00      	nop
 8016042:	e004      	b.n	801604e <USBH_Process+0x3ba>
    break;
 8016044:	bf00      	nop
 8016046:	e002      	b.n	801604e <USBH_Process+0x3ba>
    break;
 8016048:	bf00      	nop
 801604a:	e000      	b.n	801604e <USBH_Process+0x3ba>
    break;
 801604c:	bf00      	nop
  }
 return USBH_OK;
 801604e:	2300      	movs	r3, #0
}
 8016050:	4618      	mov	r0, r3
 8016052:	3710      	adds	r7, #16
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b088      	sub	sp, #32
 801605c:	af04      	add	r7, sp, #16
 801605e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8016060:	2301      	movs	r3, #1
 8016062:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	785b      	ldrb	r3, [r3, #1]
 8016068:	2b07      	cmp	r3, #7
 801606a:	f200 8132 	bhi.w	80162d2 <USBH_HandleEnum+0x27a>
 801606e:	a201      	add	r2, pc, #4	; (adr r2, 8016074 <USBH_HandleEnum+0x1c>)
 8016070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016074:	08016095 	.word	0x08016095
 8016078:	08016107 	.word	0x08016107
 801607c:	0801611f 	.word	0x0801611f
 8016080:	08016195 	.word	0x08016195
 8016084:	080161ad 	.word	0x080161ad
 8016088:	080161cb 	.word	0x080161cb
 801608c:	08016237 	.word	0x08016237
 8016090:	08016287 	.word	0x08016287
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8016094:	2108      	movs	r1, #8
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f000 fa2f 	bl	80164fa <USBH_Get_DevDesc>
 801609c:	4603      	mov	r3, r0
 801609e:	2b00      	cmp	r3, #0
 80160a0:	f040 8119 	bne.w	80162d6 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2201      	movs	r2, #1
 80160b2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	7919      	ldrb	r1, [r3, #4]
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80160c4:	687a      	ldr	r2, [r7, #4]
 80160c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80160c8:	b292      	uxth	r2, r2
 80160ca:	9202      	str	r2, [sp, #8]
 80160cc:	2200      	movs	r2, #0
 80160ce:	9201      	str	r2, [sp, #4]
 80160d0:	9300      	str	r3, [sp, #0]
 80160d2:	4603      	mov	r3, r0
 80160d4:	2280      	movs	r2, #128	; 0x80
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f001 f837 	bl	801714a <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	7959      	ldrb	r1, [r3, #5]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80160ec:	687a      	ldr	r2, [r7, #4]
 80160ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80160f0:	b292      	uxth	r2, r2
 80160f2:	9202      	str	r2, [sp, #8]
 80160f4:	2200      	movs	r2, #0
 80160f6:	9201      	str	r2, [sp, #4]
 80160f8:	9300      	str	r3, [sp, #0]
 80160fa:	4603      	mov	r3, r0
 80160fc:	2200      	movs	r2, #0
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f001 f823 	bl	801714a <USBH_OpenPipe>

    }
    break;
 8016104:	e0e7      	b.n	80162d6 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8016106:	2112      	movs	r1, #18
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f000 f9f6 	bl	80164fa <USBH_Get_DevDesc>
 801610e:	4603      	mov	r3, r0
 8016110:	2b00      	cmp	r3, #0
 8016112:	f040 80e2 	bne.w	80162da <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	2202      	movs	r2, #2
 801611a:	705a      	strb	r2, [r3, #1]

    }
    break;
 801611c:	e0dd      	b.n	80162da <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 801611e:	2101      	movs	r1, #1
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f000 fa96 	bl	8016652 <USBH_SetAddress>
 8016126:	4603      	mov	r3, r0
 8016128:	2b00      	cmp	r3, #0
 801612a:	f040 80d8 	bne.w	80162de <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 801612e:	2002      	movs	r0, #2
 8016130:	f004 feb0 	bl	801ae94 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2201      	movs	r2, #1
 8016138:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2203      	movs	r2, #3
 8016140:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	7919      	ldrb	r1, [r3, #4]
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8016152:	687a      	ldr	r2, [r7, #4]
 8016154:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8016156:	b292      	uxth	r2, r2
 8016158:	9202      	str	r2, [sp, #8]
 801615a:	2200      	movs	r2, #0
 801615c:	9201      	str	r2, [sp, #4]
 801615e:	9300      	str	r3, [sp, #0]
 8016160:	4603      	mov	r3, r0
 8016162:	2280      	movs	r2, #128	; 0x80
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f000 fff0 	bl	801714a <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	7959      	ldrb	r1, [r3, #5]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 801617a:	687a      	ldr	r2, [r7, #4]
 801617c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 801617e:	b292      	uxth	r2, r2
 8016180:	9202      	str	r2, [sp, #8]
 8016182:	2200      	movs	r2, #0
 8016184:	9201      	str	r2, [sp, #4]
 8016186:	9300      	str	r3, [sp, #0]
 8016188:	4603      	mov	r3, r0
 801618a:	2200      	movs	r2, #0
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 ffdc 	bl	801714a <USBH_OpenPipe>
    }
    break;
 8016192:	e0a4      	b.n	80162de <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8016194:	2109      	movs	r1, #9
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f000 f9d7 	bl	801654a <USBH_Get_CfgDesc>
 801619c:	4603      	mov	r3, r0
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f040 809f 	bne.w	80162e2 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2204      	movs	r2, #4
 80161a8:	705a      	strb	r2, [r3, #1]
    }
    break;
 80161aa:	e09a      	b.n	80162e2 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80161b2:	4619      	mov	r1, r3
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f000 f9c8 	bl	801654a <USBH_Get_CfgDesc>
 80161ba:	4603      	mov	r3, r0
 80161bc:	2b00      	cmp	r3, #0
 80161be:	f040 8092 	bne.w	80162e6 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2205      	movs	r2, #5
 80161c6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80161c8:	e08d      	b.n	80162e6 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d01e      	beq.n	8016212 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80161e0:	23ff      	movs	r3, #255	; 0xff
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 f9d5 	bl	8016592 <USBH_Get_StringDesc>
 80161e8:	4603      	mov	r3, r0
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d17d      	bne.n	80162ea <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	2206      	movs	r2, #6
 80161f2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2205      	movs	r2, #5
 80161f8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016208:	2200      	movs	r2, #0
 801620a:	4619      	mov	r1, r3
 801620c:	f001 fa0e 	bl	801762c <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8016210:	e06b      	b.n	80162ea <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2206      	movs	r2, #6
 8016216:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2205      	movs	r2, #5
 801621c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801622c:	2200      	movs	r2, #0
 801622e:	4619      	mov	r1, r3
 8016230:	f001 f9fc 	bl	801762c <osMessagePut>
    break;
 8016234:	e059      	b.n	80162ea <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 801623c:	2b00      	cmp	r3, #0
 801623e:	d010      	beq.n	8016262 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 801624c:	23ff      	movs	r3, #255	; 0xff
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f000 f99f 	bl	8016592 <USBH_Get_StringDesc>
 8016254:	4603      	mov	r3, r0
 8016256:	2b00      	cmp	r3, #0
 8016258:	d149      	bne.n	80162ee <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2207      	movs	r2, #7
 801625e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8016260:	e045      	b.n	80162ee <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	2207      	movs	r2, #7
 8016266:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	2205      	movs	r2, #5
 801626c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801627c:	2200      	movs	r2, #0
 801627e:	4619      	mov	r1, r3
 8016280:	f001 f9d4 	bl	801762c <osMessagePut>
    break;
 8016284:	e033      	b.n	80162ee <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 801628c:	2b00      	cmp	r3, #0
 801628e:	d00f      	beq.n	80162b0 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 801629c:	23ff      	movs	r3, #255	; 0xff
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f000 f977 	bl	8016592 <USBH_Get_StringDesc>
 80162a4:	4603      	mov	r3, r0
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d123      	bne.n	80162f2 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80162aa:	2300      	movs	r3, #0
 80162ac:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80162ae:	e020      	b.n	80162f2 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 80162b0:	2300      	movs	r3, #0
 80162b2:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2205      	movs	r2, #5
 80162b8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80162c8:	2200      	movs	r2, #0
 80162ca:	4619      	mov	r1, r3
 80162cc:	f001 f9ae 	bl	801762c <osMessagePut>
    break;
 80162d0:	e00f      	b.n	80162f2 <USBH_HandleEnum+0x29a>

  default:
    break;
 80162d2:	bf00      	nop
 80162d4:	e00e      	b.n	80162f4 <USBH_HandleEnum+0x29c>
    break;
 80162d6:	bf00      	nop
 80162d8:	e00c      	b.n	80162f4 <USBH_HandleEnum+0x29c>
    break;
 80162da:	bf00      	nop
 80162dc:	e00a      	b.n	80162f4 <USBH_HandleEnum+0x29c>
    break;
 80162de:	bf00      	nop
 80162e0:	e008      	b.n	80162f4 <USBH_HandleEnum+0x29c>
    break;
 80162e2:	bf00      	nop
 80162e4:	e006      	b.n	80162f4 <USBH_HandleEnum+0x29c>
    break;
 80162e6:	bf00      	nop
 80162e8:	e004      	b.n	80162f4 <USBH_HandleEnum+0x29c>
    break;
 80162ea:	bf00      	nop
 80162ec:	e002      	b.n	80162f4 <USBH_HandleEnum+0x29c>
    break;
 80162ee:	bf00      	nop
 80162f0:	e000      	b.n	80162f4 <USBH_HandleEnum+0x29c>
    break;
 80162f2:	bf00      	nop
  }
  return Status;
 80162f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	3710      	adds	r7, #16
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}
 80162fe:	bf00      	nop

08016300 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8016300:	b480      	push	{r7}
 8016302:	b083      	sub	sp, #12
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	683a      	ldr	r2, [r7, #0]
 801630e:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
}
 8016312:	bf00      	nop
 8016314:	370c      	adds	r7, #12
 8016316:	46bd      	mov	sp, r7
 8016318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631c:	4770      	bx	lr

0801631e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 801631e:	b580      	push	{r7, lr}
 8016320:	b082      	sub	sp, #8
 8016322:	af00      	add	r7, sp, #0
 8016324:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 801632c:	1c5a      	adds	r2, r3, #1
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
  USBH_HandleSof(phost);
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	f000 f804 	bl	8016342 <USBH_HandleSof>
}
 801633a:	bf00      	nop
 801633c:	3708      	adds	r7, #8
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}

08016342 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8016342:	b580      	push	{r7, lr}
 8016344:	b082      	sub	sp, #8
 8016346:	af00      	add	r7, sp, #0
 8016348:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	b2db      	uxtb	r3, r3
 8016350:	2b0b      	cmp	r3, #11
 8016352:	d10a      	bne.n	801636a <USBH_HandleSof+0x28>
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801635a:	2b00      	cmp	r3, #0
 801635c:	d005      	beq.n	801636a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8016364:	699b      	ldr	r3, [r3, #24]
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	4798      	blx	r3
  }
}
 801636a:	bf00      	nop
 801636c:	3708      	adds	r7, #8
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}

08016372 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8016372:	b480      	push	{r7}
 8016374:	b083      	sub	sp, #12
 8016376:	af00      	add	r7, sp, #0
 8016378:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2201      	movs	r2, #1
 801637e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8016382:	bf00      	nop
}
 8016384:	370c      	adds	r7, #12
 8016386:	46bd      	mov	sp, r7
 8016388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638c:	4770      	bx	lr

0801638e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 801638e:	b480      	push	{r7}
 8016390:	b083      	sub	sp, #12
 8016392:	af00      	add	r7, sp, #0
 8016394:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	2200      	movs	r2, #0
 801639a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 801639e:	bf00      	nop
}
 80163a0:	370c      	adds	r7, #12
 80163a2:	46bd      	mov	sp, r7
 80163a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a8:	4770      	bx	lr

080163aa <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80163aa:	b480      	push	{r7}
 80163ac:	b083      	sub	sp, #12
 80163ae:	af00      	add	r7, sp, #0
 80163b0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	370c      	adds	r7, #12
 80163bc:	46bd      	mov	sp, r7
 80163be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c2:	4770      	bx	lr

080163c4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b082      	sub	sp, #8
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	b2db      	uxtb	r3, r3
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d10f      	bne.n	80163f6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	2201      	movs	r2, #1
 80163da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d00e      	beq.n	8016406 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80163ee:	2104      	movs	r1, #4
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	4798      	blx	r3
 80163f4:	e007      	b.n	8016406 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	d102      	bne.n	8016406 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	2202      	movs	r2, #2
 8016404:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	2201      	movs	r2, #1
 801640a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801641a:	2200      	movs	r2, #0
 801641c:	4619      	mov	r1, r3
 801641e:	f001 f905 	bl	801762c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8016422:	2300      	movs	r3, #0
}
 8016424:	4618      	mov	r0, r3
 8016426:	3708      	adds	r7, #8
 8016428:	46bd      	mov	sp, r7
 801642a:	bd80      	pop	{r7, pc}

0801642c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b082      	sub	sp, #8
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	f004 fbf6 	bl	801ac26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	791b      	ldrb	r3, [r3, #4]
 801643e:	4619      	mov	r1, r3
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f000 fed0 	bl	80171e6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	795b      	ldrb	r3, [r3, #5]
 801644a:	4619      	mov	r1, r3
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f000 feca 	bl	80171e6 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	2200      	movs	r2, #0
 8016456:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8016460:	2b00      	cmp	r3, #0
 8016462:	d005      	beq.n	8016470 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801646a:	2105      	movs	r1, #5
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f004 fbbd 	bl	801abf0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2203      	movs	r2, #3
 801647a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2201      	movs	r2, #1
 8016480:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016490:	2200      	movs	r2, #0
 8016492:	4619      	mov	r1, r3
 8016494:	f001 f8ca 	bl	801762c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8016498:	2300      	movs	r3, #0
}
 801649a:	4618      	mov	r0, r3
 801649c:	3708      	adds	r7, #8
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}

080164a2 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80164a2:	b580      	push	{r7, lr}
 80164a4:	b086      	sub	sp, #24
 80164a6:	af00      	add	r7, sp, #0
 80164a8:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 80164b0:	f107 030c 	add.w	r3, r7, #12
 80164b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80164b8:	4618      	mov	r0, r3
 80164ba:	f001 f8f7 	bl	80176ac <osMessageGet>
    if(event.status == osEventMessage)
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	2b10      	cmp	r3, #16
 80164c2:	d1f2      	bne.n	80164aa <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f7ff fbe5 	bl	8015c94 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80164ca:	e7ee      	b.n	80164aa <USBH_Process_OS+0x8>

080164cc <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2201      	movs	r2, #1
 80164d8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80164e8:	2200      	movs	r2, #0
 80164ea:	4619      	mov	r1, r3
 80164ec:	f001 f89e 	bl	801762c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80164f0:	2300      	movs	r3, #0
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3708      	adds	r7, #8
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}

080164fa <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80164fa:	b580      	push	{r7, lr}
 80164fc:	b086      	sub	sp, #24
 80164fe:	af02      	add	r7, sp, #8
 8016500:	6078      	str	r0, [r7, #4]
 8016502:	460b      	mov	r3, r1
 8016504:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 801650c:	78fb      	ldrb	r3, [r7, #3]
 801650e:	b29b      	uxth	r3, r3
 8016510:	9300      	str	r3, [sp, #0]
 8016512:	4613      	mov	r3, r2
 8016514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016518:	2100      	movs	r1, #0
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f000 f864 	bl	80165e8 <USBH_GetDescriptor>
 8016520:	4603      	mov	r3, r0
 8016522:	73fb      	strb	r3, [r7, #15]
 8016524:	7bfb      	ldrb	r3, [r7, #15]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d10a      	bne.n	8016540 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016536:	78fa      	ldrb	r2, [r7, #3]
 8016538:	b292      	uxth	r2, r2
 801653a:	4619      	mov	r1, r3
 801653c:	f000 f91b 	bl	8016776 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8016540:	7bfb      	ldrb	r3, [r7, #15]
}
 8016542:	4618      	mov	r0, r3
 8016544:	3710      	adds	r7, #16
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}

0801654a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 801654a:	b580      	push	{r7, lr}
 801654c:	b086      	sub	sp, #24
 801654e:	af02      	add	r7, sp, #8
 8016550:	6078      	str	r0, [r7, #4]
 8016552:	460b      	mov	r3, r1
 8016554:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	331c      	adds	r3, #28
 801655a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 801655c:	887b      	ldrh	r3, [r7, #2]
 801655e:	9300      	str	r3, [sp, #0]
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016566:	2100      	movs	r1, #0
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f000 f83d 	bl	80165e8 <USBH_GetDescriptor>
 801656e:	4603      	mov	r3, r0
 8016570:	72fb      	strb	r3, [r7, #11]
 8016572:	7afb      	ldrb	r3, [r7, #11]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d107      	bne.n	8016588 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801657e:	887a      	ldrh	r2, [r7, #2]
 8016580:	68f9      	ldr	r1, [r7, #12]
 8016582:	4618      	mov	r0, r3
 8016584:	f000 f967 	bl	8016856 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8016588:	7afb      	ldrb	r3, [r7, #11]
}
 801658a:	4618      	mov	r0, r3
 801658c:	3710      	adds	r7, #16
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}

08016592 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8016592:	b580      	push	{r7, lr}
 8016594:	b088      	sub	sp, #32
 8016596:	af02      	add	r7, sp, #8
 8016598:	60f8      	str	r0, [r7, #12]
 801659a:	607a      	str	r2, [r7, #4]
 801659c:	461a      	mov	r2, r3
 801659e:	460b      	mov	r3, r1
 80165a0:	72fb      	strb	r3, [r7, #11]
 80165a2:	4613      	mov	r3, r2
 80165a4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80165a6:	7afb      	ldrb	r3, [r7, #11]
 80165a8:	b29b      	uxth	r3, r3
 80165aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80165ae:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80165b6:	893b      	ldrh	r3, [r7, #8]
 80165b8:	9300      	str	r3, [sp, #0]
 80165ba:	460b      	mov	r3, r1
 80165bc:	2100      	movs	r1, #0
 80165be:	68f8      	ldr	r0, [r7, #12]
 80165c0:	f000 f812 	bl	80165e8 <USBH_GetDescriptor>
 80165c4:	4603      	mov	r3, r0
 80165c6:	75fb      	strb	r3, [r7, #23]
 80165c8:	7dfb      	ldrb	r3, [r7, #23]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d107      	bne.n	80165de <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80165d4:	893a      	ldrh	r2, [r7, #8]
 80165d6:	6879      	ldr	r1, [r7, #4]
 80165d8:	4618      	mov	r0, r3
 80165da:	f000 fa3a 	bl	8016a52 <USBH_ParseStringDesc>
  }
  return status;
 80165de:	7dfb      	ldrb	r3, [r7, #23]
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3718      	adds	r7, #24
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b084      	sub	sp, #16
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	60f8      	str	r0, [r7, #12]
 80165f0:	607b      	str	r3, [r7, #4]
 80165f2:	460b      	mov	r3, r1
 80165f4:	72fb      	strb	r3, [r7, #11]
 80165f6:	4613      	mov	r3, r2
 80165f8:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	789b      	ldrb	r3, [r3, #2]
 80165fe:	2b01      	cmp	r3, #1
 8016600:	d11c      	bne.n	801663c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8016602:	7afb      	ldrb	r3, [r7, #11]
 8016604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016608:	b2da      	uxtb	r2, r3
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	2206      	movs	r2, #6
 8016612:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	893a      	ldrh	r2, [r7, #8]
 8016618:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 801661a:	893b      	ldrh	r3, [r7, #8]
 801661c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016624:	d104      	bne.n	8016630 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	f240 4209 	movw	r2, #1033	; 0x409
 801662c:	829a      	strh	r2, [r3, #20]
 801662e:	e002      	b.n	8016636 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2200      	movs	r2, #0
 8016634:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	8b3a      	ldrh	r2, [r7, #24]
 801663a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 801663c:	8b3b      	ldrh	r3, [r7, #24]
 801663e:	461a      	mov	r2, r3
 8016640:	6879      	ldr	r1, [r7, #4]
 8016642:	68f8      	ldr	r0, [r7, #12]
 8016644:	f000 fa53 	bl	8016aee <USBH_CtlReq>
 8016648:	4603      	mov	r3, r0
}
 801664a:	4618      	mov	r0, r3
 801664c:	3710      	adds	r7, #16
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}

08016652 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8016652:	b580      	push	{r7, lr}
 8016654:	b082      	sub	sp, #8
 8016656:	af00      	add	r7, sp, #0
 8016658:	6078      	str	r0, [r7, #4]
 801665a:	460b      	mov	r3, r1
 801665c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	789b      	ldrb	r3, [r3, #2]
 8016662:	2b01      	cmp	r3, #1
 8016664:	d10f      	bne.n	8016686 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2200      	movs	r2, #0
 801666a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2205      	movs	r2, #5
 8016670:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8016672:	78fb      	ldrb	r3, [r7, #3]
 8016674:	b29a      	uxth	r2, r3
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	2200      	movs	r2, #0
 801667e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2200      	movs	r2, #0
 8016684:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8016686:	2200      	movs	r2, #0
 8016688:	2100      	movs	r1, #0
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f000 fa2f 	bl	8016aee <USBH_CtlReq>
 8016690:	4603      	mov	r3, r0
}
 8016692:	4618      	mov	r0, r3
 8016694:	3708      	adds	r7, #8
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}

0801669a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801669a:	b580      	push	{r7, lr}
 801669c:	b082      	sub	sp, #8
 801669e:	af00      	add	r7, sp, #0
 80166a0:	6078      	str	r0, [r7, #4]
 80166a2:	460b      	mov	r3, r1
 80166a4:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	789b      	ldrb	r3, [r3, #2]
 80166aa:	2b01      	cmp	r3, #1
 80166ac:	d10e      	bne.n	80166cc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	2200      	movs	r2, #0
 80166b2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2209      	movs	r2, #9
 80166b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	887a      	ldrh	r2, [r7, #2]
 80166be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2200      	movs	r2, #0
 80166c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2200      	movs	r2, #0
 80166ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80166cc:	2200      	movs	r2, #0
 80166ce:	2100      	movs	r1, #0
 80166d0:	6878      	ldr	r0, [r7, #4]
 80166d2:	f000 fa0c 	bl	8016aee <USBH_CtlReq>
 80166d6:	4603      	mov	r3, r0
}
 80166d8:	4618      	mov	r0, r3
 80166da:	3708      	adds	r7, #8
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}

080166e0 <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	460b      	mov	r3, r1
 80166ea:	70fb      	strb	r3, [r7, #3]
 80166ec:	4613      	mov	r3, r2
 80166ee:	70bb      	strb	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	789b      	ldrb	r3, [r3, #2]
 80166f4:	2b01      	cmp	r3, #1
 80166f6:	d110      	bne.n	801671a <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2201      	movs	r2, #1
 80166fc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	220b      	movs	r2, #11
 8016702:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8016704:	78bb      	ldrb	r3, [r7, #2]
 8016706:	b29a      	uxth	r2, r3
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801670c:	78fb      	ldrb	r3, [r7, #3]
 801670e:	b29a      	uxth	r2, r3
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2200      	movs	r2, #0
 8016718:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 801671a:	2200      	movs	r2, #0
 801671c:	2100      	movs	r1, #0
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f000 f9e5 	bl	8016aee <USBH_CtlReq>
 8016724:	4603      	mov	r3, r0
}
 8016726:	4618      	mov	r0, r3
 8016728:	3708      	adds	r7, #8
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}

0801672e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801672e:	b580      	push	{r7, lr}
 8016730:	b082      	sub	sp, #8
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]
 8016736:	460b      	mov	r3, r1
 8016738:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	789b      	ldrb	r3, [r3, #2]
 801673e:	2b01      	cmp	r3, #1
 8016740:	d10f      	bne.n	8016762 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2200      	movs	r2, #0
 8016746:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2203      	movs	r2, #3
 801674c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801674e:	78fb      	ldrb	r3, [r7, #3]
 8016750:	b29a      	uxth	r2, r3
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2200      	movs	r2, #0
 801675a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2200      	movs	r2, #0
 8016760:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8016762:	2200      	movs	r2, #0
 8016764:	2100      	movs	r1, #0
 8016766:	6878      	ldr	r0, [r7, #4]
 8016768:	f000 f9c1 	bl	8016aee <USBH_CtlReq>
 801676c:	4603      	mov	r3, r0
}
 801676e:	4618      	mov	r0, r3
 8016770:	3708      	adds	r7, #8
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}

08016776 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8016776:	b480      	push	{r7}
 8016778:	b085      	sub	sp, #20
 801677a:	af00      	add	r7, sp, #0
 801677c:	60f8      	str	r0, [r7, #12]
 801677e:	60b9      	str	r1, [r7, #8]
 8016780:	4613      	mov	r3, r2
 8016782:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8016784:	68bb      	ldr	r3, [r7, #8]
 8016786:	781a      	ldrb	r2, [r3, #0]
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	785a      	ldrb	r2, [r3, #1]
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8016794:	68bb      	ldr	r3, [r7, #8]
 8016796:	3302      	adds	r3, #2
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	b29a      	uxth	r2, r3
 801679c:	68bb      	ldr	r3, [r7, #8]
 801679e:	3303      	adds	r3, #3
 80167a0:	781b      	ldrb	r3, [r3, #0]
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	021b      	lsls	r3, r3, #8
 80167a6:	b29b      	uxth	r3, r3
 80167a8:	4313      	orrs	r3, r2
 80167aa:	b29a      	uxth	r2, r3
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	791a      	ldrb	r2, [r3, #4]
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	795a      	ldrb	r2, [r3, #5]
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80167c0:	68bb      	ldr	r3, [r7, #8]
 80167c2:	799a      	ldrb	r2, [r3, #6]
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80167c8:	68bb      	ldr	r3, [r7, #8]
 80167ca:	79da      	ldrb	r2, [r3, #7]
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80167d0:	88fb      	ldrh	r3, [r7, #6]
 80167d2:	2b08      	cmp	r3, #8
 80167d4:	d939      	bls.n	801684a <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	3308      	adds	r3, #8
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	b29a      	uxth	r2, r3
 80167de:	68bb      	ldr	r3, [r7, #8]
 80167e0:	3309      	adds	r3, #9
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	b29b      	uxth	r3, r3
 80167e6:	021b      	lsls	r3, r3, #8
 80167e8:	b29b      	uxth	r3, r3
 80167ea:	4313      	orrs	r3, r2
 80167ec:	b29a      	uxth	r2, r3
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	330a      	adds	r3, #10
 80167f6:	781b      	ldrb	r3, [r3, #0]
 80167f8:	b29a      	uxth	r2, r3
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	330b      	adds	r3, #11
 80167fe:	781b      	ldrb	r3, [r3, #0]
 8016800:	b29b      	uxth	r3, r3
 8016802:	021b      	lsls	r3, r3, #8
 8016804:	b29b      	uxth	r3, r3
 8016806:	4313      	orrs	r3, r2
 8016808:	b29a      	uxth	r2, r3
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 801680e:	68bb      	ldr	r3, [r7, #8]
 8016810:	330c      	adds	r3, #12
 8016812:	781b      	ldrb	r3, [r3, #0]
 8016814:	b29a      	uxth	r2, r3
 8016816:	68bb      	ldr	r3, [r7, #8]
 8016818:	330d      	adds	r3, #13
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	b29b      	uxth	r3, r3
 801681e:	021b      	lsls	r3, r3, #8
 8016820:	b29b      	uxth	r3, r3
 8016822:	4313      	orrs	r3, r2
 8016824:	b29a      	uxth	r2, r3
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	7b9a      	ldrb	r2, [r3, #14]
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	7bda      	ldrb	r2, [r3, #15]
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	7c1a      	ldrb	r2, [r3, #16]
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	7c5a      	ldrb	r2, [r3, #17]
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	745a      	strb	r2, [r3, #17]
  }
}
 801684a:	bf00      	nop
 801684c:	3714      	adds	r7, #20
 801684e:	46bd      	mov	sp, r7
 8016850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016854:	4770      	bx	lr

08016856 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8016856:	b580      	push	{r7, lr}
 8016858:	b08a      	sub	sp, #40	; 0x28
 801685a:	af00      	add	r7, sp, #0
 801685c:	60f8      	str	r0, [r7, #12]
 801685e:	60b9      	str	r1, [r7, #8]
 8016860:	4613      	mov	r3, r2
 8016862:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8016868:	2300      	movs	r3, #0
 801686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 801686e:	2300      	movs	r3, #0
 8016870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8016878:	68bb      	ldr	r3, [r7, #8]
 801687a:	781a      	ldrb	r2, [r3, #0]
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	785a      	ldrb	r2, [r3, #1]
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	3302      	adds	r3, #2
 801688c:	781b      	ldrb	r3, [r3, #0]
 801688e:	b29a      	uxth	r2, r3
 8016890:	68bb      	ldr	r3, [r7, #8]
 8016892:	3303      	adds	r3, #3
 8016894:	781b      	ldrb	r3, [r3, #0]
 8016896:	b29b      	uxth	r3, r3
 8016898:	021b      	lsls	r3, r3, #8
 801689a:	b29b      	uxth	r3, r3
 801689c:	4313      	orrs	r3, r2
 801689e:	b29a      	uxth	r2, r3
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80168a4:	68bb      	ldr	r3, [r7, #8]
 80168a6:	791a      	ldrb	r2, [r3, #4]
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	795a      	ldrb	r2, [r3, #5]
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	799a      	ldrb	r2, [r3, #6]
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	79da      	ldrb	r2, [r3, #7]
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	7a1a      	ldrb	r2, [r3, #8]
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80168cc:	88fb      	ldrh	r3, [r7, #6]
 80168ce:	2b09      	cmp	r3, #9
 80168d0:	d95f      	bls.n	8016992 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80168d2:	2309      	movs	r3, #9
 80168d4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80168d6:	2300      	movs	r3, #0
 80168d8:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80168da:	e051      	b.n	8016980 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80168dc:	f107 0316 	add.w	r3, r7, #22
 80168e0:	4619      	mov	r1, r3
 80168e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168e4:	f000 f8e8 	bl	8016ab8 <USBH_GetNextDesc>
 80168e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80168ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ec:	785b      	ldrb	r3, [r3, #1]
 80168ee:	2b04      	cmp	r3, #4
 80168f0:	d146      	bne.n	8016980 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80168f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80168f6:	221a      	movs	r2, #26
 80168f8:	fb02 f303 	mul.w	r3, r2, r3
 80168fc:	3308      	adds	r3, #8
 80168fe:	68fa      	ldr	r2, [r7, #12]
 8016900:	4413      	add	r3, r2
 8016902:	3302      	adds	r3, #2
 8016904:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8016906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016908:	69f8      	ldr	r0, [r7, #28]
 801690a:	f000 f846 	bl	801699a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801690e:	2300      	movs	r3, #0
 8016910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8016914:	2300      	movs	r3, #0
 8016916:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016918:	e022      	b.n	8016960 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 801691a:	f107 0316 	add.w	r3, r7, #22
 801691e:	4619      	mov	r1, r3
 8016920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016922:	f000 f8c9 	bl	8016ab8 <USBH_GetNextDesc>
 8016926:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8016928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692a:	785b      	ldrb	r3, [r3, #1]
 801692c:	2b05      	cmp	r3, #5
 801692e:	d117      	bne.n	8016960 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016930:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016934:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016938:	3201      	adds	r2, #1
 801693a:	00d2      	lsls	r2, r2, #3
 801693c:	211a      	movs	r1, #26
 801693e:	fb01 f303 	mul.w	r3, r1, r3
 8016942:	4413      	add	r3, r2
 8016944:	3308      	adds	r3, #8
 8016946:	68fa      	ldr	r2, [r7, #12]
 8016948:	4413      	add	r3, r2
 801694a:	3304      	adds	r3, #4
 801694c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 801694e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016950:	69b8      	ldr	r0, [r7, #24]
 8016952:	f000 f851 	bl	80169f8 <USBH_ParseEPDesc>
            ep_ix++;
 8016956:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801695a:	3301      	adds	r3, #1
 801695c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016960:	69fb      	ldr	r3, [r7, #28]
 8016962:	791b      	ldrb	r3, [r3, #4]
 8016964:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016968:	429a      	cmp	r2, r3
 801696a:	d204      	bcs.n	8016976 <USBH_ParseCfgDesc+0x120>
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	885a      	ldrh	r2, [r3, #2]
 8016970:	8afb      	ldrh	r3, [r7, #22]
 8016972:	429a      	cmp	r2, r3
 8016974:	d8d1      	bhi.n	801691a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8016976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801697a:	3301      	adds	r3, #1
 801697c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016984:	2b09      	cmp	r3, #9
 8016986:	d804      	bhi.n	8016992 <USBH_ParseCfgDesc+0x13c>
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	885a      	ldrh	r2, [r3, #2]
 801698c:	8afb      	ldrh	r3, [r7, #22]
 801698e:	429a      	cmp	r2, r3
 8016990:	d8a4      	bhi.n	80168dc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8016992:	bf00      	nop
 8016994:	3728      	adds	r7, #40	; 0x28
 8016996:	46bd      	mov	sp, r7
 8016998:	bd80      	pop	{r7, pc}

0801699a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 801699a:	b480      	push	{r7}
 801699c:	b083      	sub	sp, #12
 801699e:	af00      	add	r7, sp, #0
 80169a0:	6078      	str	r0, [r7, #4]
 80169a2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80169a4:	683b      	ldr	r3, [r7, #0]
 80169a6:	781a      	ldrb	r2, [r3, #0]
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	785a      	ldrb	r2, [r3, #1]
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80169b4:	683b      	ldr	r3, [r7, #0]
 80169b6:	789a      	ldrb	r2, [r3, #2]
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	78da      	ldrb	r2, [r3, #3]
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	791a      	ldrb	r2, [r3, #4]
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80169cc:	683b      	ldr	r3, [r7, #0]
 80169ce:	795a      	ldrb	r2, [r3, #5]
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	799a      	ldrb	r2, [r3, #6]
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	79da      	ldrb	r2, [r3, #7]
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	7a1a      	ldrb	r2, [r3, #8]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	721a      	strb	r2, [r3, #8]
}
 80169ec:	bf00      	nop
 80169ee:	370c      	adds	r7, #12
 80169f0:	46bd      	mov	sp, r7
 80169f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f6:	4770      	bx	lr

080169f8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80169f8:	b480      	push	{r7}
 80169fa:	b083      	sub	sp, #12
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
 8016a00:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8016a02:	683b      	ldr	r3, [r7, #0]
 8016a04:	781a      	ldrb	r2, [r3, #0]
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	785a      	ldrb	r2, [r3, #1]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	789a      	ldrb	r2, [r3, #2]
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	78da      	ldrb	r2, [r3, #3]
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8016a22:	683b      	ldr	r3, [r7, #0]
 8016a24:	3304      	adds	r3, #4
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	b29a      	uxth	r2, r3
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	3305      	adds	r3, #5
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	b29b      	uxth	r3, r3
 8016a32:	021b      	lsls	r3, r3, #8
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	4313      	orrs	r3, r2
 8016a38:	b29a      	uxth	r2, r3
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	799a      	ldrb	r2, [r3, #6]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	719a      	strb	r2, [r3, #6]
}
 8016a46:	bf00      	nop
 8016a48:	370c      	adds	r7, #12
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a50:	4770      	bx	lr

08016a52 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8016a52:	b480      	push	{r7}
 8016a54:	b087      	sub	sp, #28
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	60f8      	str	r0, [r7, #12]
 8016a5a:	60b9      	str	r1, [r7, #8]
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	3301      	adds	r3, #1
 8016a64:	781b      	ldrb	r3, [r3, #0]
 8016a66:	2b03      	cmp	r3, #3
 8016a68:	d120      	bne.n	8016aac <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	1e9a      	subs	r2, r3, #2
 8016a70:	88fb      	ldrh	r3, [r7, #6]
 8016a72:	4293      	cmp	r3, r2
 8016a74:	bf28      	it	cs
 8016a76:	4613      	movcs	r3, r2
 8016a78:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	3302      	adds	r3, #2
 8016a7e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8016a80:	2300      	movs	r3, #0
 8016a82:	82fb      	strh	r3, [r7, #22]
 8016a84:	e00b      	b.n	8016a9e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8016a86:	8afb      	ldrh	r3, [r7, #22]
 8016a88:	68fa      	ldr	r2, [r7, #12]
 8016a8a:	4413      	add	r3, r2
 8016a8c:	781a      	ldrb	r2, [r3, #0]
 8016a8e:	68bb      	ldr	r3, [r7, #8]
 8016a90:	701a      	strb	r2, [r3, #0]
      pdest++;
 8016a92:	68bb      	ldr	r3, [r7, #8]
 8016a94:	3301      	adds	r3, #1
 8016a96:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8016a98:	8afb      	ldrh	r3, [r7, #22]
 8016a9a:	3302      	adds	r3, #2
 8016a9c:	82fb      	strh	r3, [r7, #22]
 8016a9e:	8afa      	ldrh	r2, [r7, #22]
 8016aa0:	8abb      	ldrh	r3, [r7, #20]
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d3ef      	bcc.n	8016a86 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8016aa6:	68bb      	ldr	r3, [r7, #8]
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	701a      	strb	r2, [r3, #0]
  }
}
 8016aac:	bf00      	nop
 8016aae:	371c      	adds	r7, #28
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab6:	4770      	bx	lr

08016ab8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8016ab8:	b480      	push	{r7}
 8016aba:	b085      	sub	sp, #20
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
 8016ac0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8016ac2:	683b      	ldr	r3, [r7, #0]
 8016ac4:	881a      	ldrh	r2, [r3, #0]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	781b      	ldrb	r3, [r3, #0]
 8016aca:	b29b      	uxth	r3, r3
 8016acc:	4413      	add	r3, r2
 8016ace:	b29a      	uxth	r2, r3
 8016ad0:	683b      	ldr	r3, [r7, #0]
 8016ad2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	781b      	ldrb	r3, [r3, #0]
 8016ad8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	4413      	add	r3, r2
 8016ade:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8016ae0:	68fb      	ldr	r3, [r7, #12]
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	3714      	adds	r7, #20
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr

08016aee <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8016aee:	b580      	push	{r7, lr}
 8016af0:	b086      	sub	sp, #24
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	60f8      	str	r0, [r7, #12]
 8016af6:	60b9      	str	r1, [r7, #8]
 8016af8:	4613      	mov	r3, r2
 8016afa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8016afc:	2301      	movs	r3, #1
 8016afe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	789b      	ldrb	r3, [r3, #2]
 8016b04:	2b01      	cmp	r3, #1
 8016b06:	d002      	beq.n	8016b0e <USBH_CtlReq+0x20>
 8016b08:	2b02      	cmp	r3, #2
 8016b0a:	d01d      	beq.n	8016b48 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8016b0c:	e042      	b.n	8016b94 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	68ba      	ldr	r2, [r7, #8]
 8016b12:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	88fa      	ldrh	r2, [r7, #6]
 8016b18:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	2201      	movs	r2, #1
 8016b1e:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	2202      	movs	r2, #2
 8016b24:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8016b26:	2301      	movs	r3, #1
 8016b28:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	2203      	movs	r2, #3
 8016b2e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016b3e:	2200      	movs	r2, #0
 8016b40:	4619      	mov	r1, r3
 8016b42:	f000 fd73 	bl	801762c <osMessagePut>
    break;
 8016b46:	e025      	b.n	8016b94 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 8016b48:	68f8      	ldr	r0, [r7, #12]
 8016b4a:	f000 f829 	bl	8016ba0 <USBH_HandleControl>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8016b52:	7dfb      	ldrb	r3, [r7, #23]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d108      	bne.n	8016b6a <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	2200      	movs	r2, #0
 8016b62:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8016b64:	2300      	movs	r3, #0
 8016b66:	75fb      	strb	r3, [r7, #23]
    break;
 8016b68:	e013      	b.n	8016b92 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 8016b6a:	7dfb      	ldrb	r3, [r7, #23]
 8016b6c:	2b03      	cmp	r3, #3
 8016b6e:	d108      	bne.n	8016b82 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	2201      	movs	r2, #1
 8016b74:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	2200      	movs	r2, #0
 8016b7a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8016b7c:	2303      	movs	r3, #3
 8016b7e:	75fb      	strb	r3, [r7, #23]
    break;
 8016b80:	e007      	b.n	8016b92 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 8016b82:	7dfb      	ldrb	r3, [r7, #23]
 8016b84:	2b02      	cmp	r3, #2
 8016b86:	d104      	bne.n	8016b92 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	2201      	movs	r2, #1
 8016b8c:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8016b8e:	2302      	movs	r3, #2
 8016b90:	75fb      	strb	r3, [r7, #23]
    break;
 8016b92:	bf00      	nop
  }
  return status;
 8016b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	3718      	adds	r7, #24
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd80      	pop	{r7, pc}
	...

08016ba0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b086      	sub	sp, #24
 8016ba4:	af02      	add	r7, sp, #8
 8016ba6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8016ba8:	2301      	movs	r3, #1
 8016baa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8016bac:	2300      	movs	r3, #0
 8016bae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	7e1b      	ldrb	r3, [r3, #24]
 8016bb4:	3b01      	subs	r3, #1
 8016bb6:	2b0a      	cmp	r3, #10
 8016bb8:	f200 821f 	bhi.w	8016ffa <USBH_HandleControl+0x45a>
 8016bbc:	a201      	add	r2, pc, #4	; (adr r2, 8016bc4 <USBH_HandleControl+0x24>)
 8016bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bc2:	bf00      	nop
 8016bc4:	08016bf1 	.word	0x08016bf1
 8016bc8:	08016c0b 	.word	0x08016c0b
 8016bcc:	08016cad 	.word	0x08016cad
 8016bd0:	08016cd3 	.word	0x08016cd3
 8016bd4:	08016d5f 	.word	0x08016d5f
 8016bd8:	08016d8b 	.word	0x08016d8b
 8016bdc:	08016e4d 	.word	0x08016e4d
 8016be0:	08016e6f 	.word	0x08016e6f
 8016be4:	08016f01 	.word	0x08016f01
 8016be8:	08016f29 	.word	0x08016f29
 8016bec:	08016fbb 	.word	0x08016fbb
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f103 0110 	add.w	r1, r3, #16
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	795b      	ldrb	r3, [r3, #5]
 8016bfa:	461a      	mov	r2, r3
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f000 fa0d 	bl	801701c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	2202      	movs	r2, #2
 8016c06:	761a      	strb	r2, [r3, #24]
    break;
 8016c08:	e202      	b.n	8017010 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	795b      	ldrb	r3, [r3, #5]
 8016c0e:	4619      	mov	r1, r3
 8016c10:	6878      	ldr	r0, [r7, #4]
 8016c12:	f004 f8e2 	bl	801adda <USBH_LL_GetURBState>
 8016c16:	4603      	mov	r3, r0
 8016c18:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8016c1a:	7bbb      	ldrb	r3, [r7, #14]
 8016c1c:	2b01      	cmp	r3, #1
 8016c1e:	d12c      	bne.n	8016c7a <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	7c1b      	ldrb	r3, [r3, #16]
 8016c24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016c28:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	8adb      	ldrh	r3, [r3, #22]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d00a      	beq.n	8016c48 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8016c32:	7b7b      	ldrb	r3, [r7, #13]
 8016c34:	2b80      	cmp	r3, #128	; 0x80
 8016c36:	d103      	bne.n	8016c40 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2203      	movs	r2, #3
 8016c3c:	761a      	strb	r2, [r3, #24]
 8016c3e:	e00d      	b.n	8016c5c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2205      	movs	r2, #5
 8016c44:	761a      	strb	r2, [r3, #24]
 8016c46:	e009      	b.n	8016c5c <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8016c48:	7b7b      	ldrb	r3, [r7, #13]
 8016c4a:	2b80      	cmp	r3, #128	; 0x80
 8016c4c:	d103      	bne.n	8016c56 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	2209      	movs	r2, #9
 8016c52:	761a      	strb	r2, [r3, #24]
 8016c54:	e002      	b.n	8016c5c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	2207      	movs	r2, #7
 8016c5a:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	2203      	movs	r2, #3
 8016c60:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016c70:	2200      	movs	r2, #0
 8016c72:	4619      	mov	r1, r3
 8016c74:	f000 fcda 	bl	801762c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8016c78:	e1c1      	b.n	8016ffe <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8016c7a:	7bbb      	ldrb	r3, [r7, #14]
 8016c7c:	2b04      	cmp	r3, #4
 8016c7e:	d003      	beq.n	8016c88 <USBH_HandleControl+0xe8>
 8016c80:	7bbb      	ldrb	r3, [r7, #14]
 8016c82:	2b02      	cmp	r3, #2
 8016c84:	f040 81bb 	bne.w	8016ffe <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	220b      	movs	r2, #11
 8016c8c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	2203      	movs	r2, #3
 8016c92:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	f000 fcc1 	bl	801762c <osMessagePut>
    break;
 8016caa:	e1a8      	b.n	8016ffe <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8016cb2:	b29a      	uxth	r2, r3
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	6899      	ldr	r1, [r3, #8]
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	899a      	ldrh	r2, [r3, #12]
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	791b      	ldrb	r3, [r3, #4]
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f000 f9e8 	bl	801709a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2204      	movs	r2, #4
 8016cce:	761a      	strb	r2, [r3, #24]
    break;
 8016cd0:	e19e      	b.n	8017010 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	791b      	ldrb	r3, [r3, #4]
 8016cd6:	4619      	mov	r1, r3
 8016cd8:	6878      	ldr	r0, [r7, #4]
 8016cda:	f004 f87e 	bl	801adda <USBH_LL_GetURBState>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8016ce2:	7bbb      	ldrb	r3, [r7, #14]
 8016ce4:	2b01      	cmp	r3, #1
 8016ce6:	d110      	bne.n	8016d0a <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	2209      	movs	r2, #9
 8016cec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	2203      	movs	r2, #3
 8016cf2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016d02:	2200      	movs	r2, #0
 8016d04:	4619      	mov	r1, r3
 8016d06:	f000 fc91 	bl	801762c <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8016d0a:	7bbb      	ldrb	r3, [r7, #14]
 8016d0c:	2b05      	cmp	r3, #5
 8016d0e:	d110      	bne.n	8016d32 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8016d10:	2303      	movs	r3, #3
 8016d12:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2203      	movs	r2, #3
 8016d18:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016d28:	2200      	movs	r2, #0
 8016d2a:	4619      	mov	r1, r3
 8016d2c:	f000 fc7e 	bl	801762c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8016d30:	e167      	b.n	8017002 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8016d32:	7bbb      	ldrb	r3, [r7, #14]
 8016d34:	2b04      	cmp	r3, #4
 8016d36:	f040 8164 	bne.w	8017002 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	220b      	movs	r2, #11
 8016d3e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	2203      	movs	r2, #3
 8016d44:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016d54:	2200      	movs	r2, #0
 8016d56:	4619      	mov	r1, r3
 8016d58:	f000 fc68 	bl	801762c <osMessagePut>
    break;
 8016d5c:	e151      	b.n	8017002 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	6899      	ldr	r1, [r3, #8]
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	899a      	ldrh	r2, [r3, #12]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	7958      	ldrb	r0, [r3, #5]
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	9300      	str	r3, [sp, #0]
 8016d6e:	4603      	mov	r3, r0
 8016d70:	6878      	ldr	r0, [r7, #4]
 8016d72:	f000 f96d 	bl	8017050 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8016d7c:	b29a      	uxth	r2, r3
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	2206      	movs	r2, #6
 8016d86:	761a      	strb	r2, [r3, #24]
    break;
 8016d88:	e142      	b.n	8017010 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	795b      	ldrb	r3, [r3, #5]
 8016d8e:	4619      	mov	r1, r3
 8016d90:	6878      	ldr	r0, [r7, #4]
 8016d92:	f004 f822 	bl	801adda <USBH_LL_GetURBState>
 8016d96:	4603      	mov	r3, r0
 8016d98:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8016d9a:	7bbb      	ldrb	r3, [r7, #14]
 8016d9c:	2b01      	cmp	r3, #1
 8016d9e:	d111      	bne.n	8016dc4 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	2207      	movs	r2, #7
 8016da4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2203      	movs	r2, #3
 8016daa:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016dba:	2200      	movs	r2, #0
 8016dbc:	4619      	mov	r1, r3
 8016dbe:	f000 fc35 	bl	801762c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8016dc2:	e120      	b.n	8017006 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8016dc4:	7bbb      	ldrb	r3, [r7, #14]
 8016dc6:	2b05      	cmp	r3, #5
 8016dc8:	d113      	bne.n	8016df2 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	220c      	movs	r2, #12
 8016dce:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8016dd0:	2303      	movs	r3, #3
 8016dd2:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	2203      	movs	r2, #3
 8016dd8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016de8:	2200      	movs	r2, #0
 8016dea:	4619      	mov	r1, r3
 8016dec:	f000 fc1e 	bl	801762c <osMessagePut>
    break;
 8016df0:	e109      	b.n	8017006 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8016df2:	7bbb      	ldrb	r3, [r7, #14]
 8016df4:	2b02      	cmp	r3, #2
 8016df6:	d111      	bne.n	8016e1c <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	2205      	movs	r2, #5
 8016dfc:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	2203      	movs	r2, #3
 8016e02:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016e12:	2200      	movs	r2, #0
 8016e14:	4619      	mov	r1, r3
 8016e16:	f000 fc09 	bl	801762c <osMessagePut>
    break;
 8016e1a:	e0f4      	b.n	8017006 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8016e1c:	7bbb      	ldrb	r3, [r7, #14]
 8016e1e:	2b04      	cmp	r3, #4
 8016e20:	f040 80f1 	bne.w	8017006 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	220b      	movs	r2, #11
 8016e28:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8016e2a:	2302      	movs	r3, #2
 8016e2c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	2203      	movs	r2, #3
 8016e32:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016e42:	2200      	movs	r2, #0
 8016e44:	4619      	mov	r1, r3
 8016e46:	f000 fbf1 	bl	801762c <osMessagePut>
    break;
 8016e4a:	e0dc      	b.n	8017006 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	791b      	ldrb	r3, [r3, #4]
 8016e50:	2200      	movs	r2, #0
 8016e52:	2100      	movs	r1, #0
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f000 f920 	bl	801709a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8016e60:	b29a      	uxth	r2, r3
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	2208      	movs	r2, #8
 8016e6a:	761a      	strb	r2, [r3, #24]

    break;
 8016e6c:	e0d0      	b.n	8017010 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	791b      	ldrb	r3, [r3, #4]
 8016e72:	4619      	mov	r1, r3
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f003 ffb0 	bl	801adda <USBH_LL_GetURBState>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8016e7e:	7bbb      	ldrb	r3, [r7, #14]
 8016e80:	2b01      	cmp	r3, #1
 8016e82:	d113      	bne.n	8016eac <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	220d      	movs	r2, #13
 8016e88:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2203      	movs	r2, #3
 8016e92:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	4619      	mov	r1, r3
 8016ea6:	f000 fbc1 	bl	801762c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8016eaa:	e0ae      	b.n	801700a <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8016eac:	7bbb      	ldrb	r3, [r7, #14]
 8016eae:	2b04      	cmp	r3, #4
 8016eb0:	d111      	bne.n	8016ed6 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	220b      	movs	r2, #11
 8016eb6:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	2203      	movs	r2, #3
 8016ebc:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016ecc:	2200      	movs	r2, #0
 8016ece:	4619      	mov	r1, r3
 8016ed0:	f000 fbac 	bl	801762c <osMessagePut>
    break;
 8016ed4:	e099      	b.n	801700a <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8016ed6:	7bbb      	ldrb	r3, [r7, #14]
 8016ed8:	2b05      	cmp	r3, #5
 8016eda:	f040 8096 	bne.w	801700a <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8016ede:	2303      	movs	r3, #3
 8016ee0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2203      	movs	r2, #3
 8016ee6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	4619      	mov	r1, r3
 8016efa:	f000 fb97 	bl	801762c <osMessagePut>
    break;
 8016efe:	e084      	b.n	801700a <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	795a      	ldrb	r2, [r3, #5]
 8016f04:	2301      	movs	r3, #1
 8016f06:	9300      	str	r3, [sp, #0]
 8016f08:	4613      	mov	r3, r2
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	2100      	movs	r1, #0
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f000 f89e 	bl	8017050 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8016f1a:	b29a      	uxth	r2, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	220a      	movs	r2, #10
 8016f24:	761a      	strb	r2, [r3, #24]
    break;
 8016f26:	e073      	b.n	8017010 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	795b      	ldrb	r3, [r3, #5]
 8016f2c:	4619      	mov	r1, r3
 8016f2e:	6878      	ldr	r0, [r7, #4]
 8016f30:	f003 ff53 	bl	801adda <USBH_LL_GetURBState>
 8016f34:	4603      	mov	r3, r0
 8016f36:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8016f38:	7bbb      	ldrb	r3, [r7, #14]
 8016f3a:	2b01      	cmp	r3, #1
 8016f3c:	d113      	bne.n	8016f66 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	220d      	movs	r2, #13
 8016f46:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2203      	movs	r2, #3
 8016f4c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	4619      	mov	r1, r3
 8016f60:	f000 fb64 	bl	801762c <osMessagePut>
#endif
#endif
      }

    }
    break;
 8016f64:	e053      	b.n	801700e <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8016f66:	7bbb      	ldrb	r3, [r7, #14]
 8016f68:	2b02      	cmp	r3, #2
 8016f6a:	d111      	bne.n	8016f90 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	2209      	movs	r2, #9
 8016f70:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	2203      	movs	r2, #3
 8016f76:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016f86:	2200      	movs	r2, #0
 8016f88:	4619      	mov	r1, r3
 8016f8a:	f000 fb4f 	bl	801762c <osMessagePut>
    break;
 8016f8e:	e03e      	b.n	801700e <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8016f90:	7bbb      	ldrb	r3, [r7, #14]
 8016f92:	2b04      	cmp	r3, #4
 8016f94:	d13b      	bne.n	801700e <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	220b      	movs	r2, #11
 8016f9a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2203      	movs	r2, #3
 8016fa0:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	4619      	mov	r1, r3
 8016fb4:	f000 fb3a 	bl	801762c <osMessagePut>
    break;
 8016fb8:	e029      	b.n	801700e <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	7e5b      	ldrb	r3, [r3, #25]
 8016fbe:	3301      	adds	r3, #1
 8016fc0:	b2da      	uxtb	r2, r3
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	765a      	strb	r2, [r3, #25]
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	7e5b      	ldrb	r3, [r3, #25]
 8016fca:	2b02      	cmp	r3, #2
 8016fcc:	d809      	bhi.n	8016fe2 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8016fce:	6878      	ldr	r0, [r7, #4]
 8016fd0:	f003 fe29 	bl	801ac26 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	2201      	movs	r2, #1
 8016fd8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	2201      	movs	r2, #1
 8016fde:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8016fe0:	e016      	b.n	8017010 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8016fe8:	2106      	movs	r1, #6
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8016ff4:	2302      	movs	r3, #2
 8016ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ff8:	e00a      	b.n	8017010 <USBH_HandleControl+0x470>

  default:
    break;
 8016ffa:	bf00      	nop
 8016ffc:	e008      	b.n	8017010 <USBH_HandleControl+0x470>
    break;
 8016ffe:	bf00      	nop
 8017000:	e006      	b.n	8017010 <USBH_HandleControl+0x470>
    break;
 8017002:	bf00      	nop
 8017004:	e004      	b.n	8017010 <USBH_HandleControl+0x470>
    break;
 8017006:	bf00      	nop
 8017008:	e002      	b.n	8017010 <USBH_HandleControl+0x470>
    break;
 801700a:	bf00      	nop
 801700c:	e000      	b.n	8017010 <USBH_HandleControl+0x470>
    break;
 801700e:	bf00      	nop
  }
  return status;
 8017010:	7bfb      	ldrb	r3, [r7, #15]
}
 8017012:	4618      	mov	r0, r3
 8017014:	3710      	adds	r7, #16
 8017016:	46bd      	mov	sp, r7
 8017018:	bd80      	pop	{r7, pc}
 801701a:	bf00      	nop

0801701c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b088      	sub	sp, #32
 8017020:	af04      	add	r7, sp, #16
 8017022:	60f8      	str	r0, [r7, #12]
 8017024:	60b9      	str	r1, [r7, #8]
 8017026:	4613      	mov	r3, r2
 8017028:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801702a:	79f9      	ldrb	r1, [r7, #7]
 801702c:	2300      	movs	r3, #0
 801702e:	9303      	str	r3, [sp, #12]
 8017030:	2308      	movs	r3, #8
 8017032:	9302      	str	r3, [sp, #8]
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	9301      	str	r3, [sp, #4]
 8017038:	2300      	movs	r3, #0
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	2300      	movs	r3, #0
 801703e:	2200      	movs	r2, #0
 8017040:	68f8      	ldr	r0, [r7, #12]
 8017042:	f003 fe99 	bl	801ad78 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8017046:	2300      	movs	r3, #0
}
 8017048:	4618      	mov	r0, r3
 801704a:	3710      	adds	r7, #16
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}

08017050 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b088      	sub	sp, #32
 8017054:	af04      	add	r7, sp, #16
 8017056:	60f8      	str	r0, [r7, #12]
 8017058:	60b9      	str	r1, [r7, #8]
 801705a:	4611      	mov	r1, r2
 801705c:	461a      	mov	r2, r3
 801705e:	460b      	mov	r3, r1
 8017060:	80fb      	strh	r3, [r7, #6]
 8017062:	4613      	mov	r3, r2
 8017064:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801706c:	2b00      	cmp	r3, #0
 801706e:	d001      	beq.n	8017074 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8017070:	2300      	movs	r3, #0
 8017072:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8017074:	7979      	ldrb	r1, [r7, #5]
 8017076:	7e3b      	ldrb	r3, [r7, #24]
 8017078:	9303      	str	r3, [sp, #12]
 801707a:	88fb      	ldrh	r3, [r7, #6]
 801707c:	9302      	str	r3, [sp, #8]
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	9301      	str	r3, [sp, #4]
 8017082:	2301      	movs	r3, #1
 8017084:	9300      	str	r3, [sp, #0]
 8017086:	2300      	movs	r3, #0
 8017088:	2200      	movs	r2, #0
 801708a:	68f8      	ldr	r0, [r7, #12]
 801708c:	f003 fe74 	bl	801ad78 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8017090:	2300      	movs	r3, #0
}
 8017092:	4618      	mov	r0, r3
 8017094:	3710      	adds	r7, #16
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}

0801709a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 801709a:	b580      	push	{r7, lr}
 801709c:	b088      	sub	sp, #32
 801709e:	af04      	add	r7, sp, #16
 80170a0:	60f8      	str	r0, [r7, #12]
 80170a2:	60b9      	str	r1, [r7, #8]
 80170a4:	4611      	mov	r1, r2
 80170a6:	461a      	mov	r2, r3
 80170a8:	460b      	mov	r3, r1
 80170aa:	80fb      	strh	r3, [r7, #6]
 80170ac:	4613      	mov	r3, r2
 80170ae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80170b0:	7979      	ldrb	r1, [r7, #5]
 80170b2:	2300      	movs	r3, #0
 80170b4:	9303      	str	r3, [sp, #12]
 80170b6:	88fb      	ldrh	r3, [r7, #6]
 80170b8:	9302      	str	r3, [sp, #8]
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	9301      	str	r3, [sp, #4]
 80170be:	2301      	movs	r3, #1
 80170c0:	9300      	str	r3, [sp, #0]
 80170c2:	2300      	movs	r3, #0
 80170c4:	2201      	movs	r2, #1
 80170c6:	68f8      	ldr	r0, [r7, #12]
 80170c8:	f003 fe56 	bl	801ad78 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80170cc:	2300      	movs	r3, #0

}
 80170ce:	4618      	mov	r0, r3
 80170d0:	3710      	adds	r7, #16
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}

080170d6 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t length,
                                uint8_t pipe_num)
{
 80170d6:	b580      	push	{r7, lr}
 80170d8:	b088      	sub	sp, #32
 80170da:	af04      	add	r7, sp, #16
 80170dc:	60f8      	str	r0, [r7, #12]
 80170de:	60b9      	str	r1, [r7, #8]
 80170e0:	4611      	mov	r1, r2
 80170e2:	461a      	mov	r2, r3
 80170e4:	460b      	mov	r3, r1
 80170e6:	71fb      	strb	r3, [r7, #7]
 80170e8:	4613      	mov	r3, r2
 80170ea:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80170ec:	79fb      	ldrb	r3, [r7, #7]
 80170ee:	b29b      	uxth	r3, r3
 80170f0:	79b9      	ldrb	r1, [r7, #6]
 80170f2:	2200      	movs	r2, #0
 80170f4:	9203      	str	r2, [sp, #12]
 80170f6:	9302      	str	r3, [sp, #8]
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	9301      	str	r3, [sp, #4]
 80170fc:	2301      	movs	r3, #1
 80170fe:	9300      	str	r3, [sp, #0]
 8017100:	2303      	movs	r3, #3
 8017102:	2201      	movs	r2, #1
 8017104:	68f8      	ldr	r0, [r7, #12]
 8017106:	f003 fe37 	bl	801ad78 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 801710a:	2300      	movs	r3, #0
}
 801710c:	4618      	mov	r0, r3
 801710e:	3710      	adds	r7, #16
 8017110:	46bd      	mov	sp, r7
 8017112:	bd80      	pop	{r7, pc}

08017114 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint32_t length,
                                uint8_t pipe_num)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b088      	sub	sp, #32
 8017118:	af04      	add	r7, sp, #16
 801711a:	60f8      	str	r0, [r7, #12]
 801711c:	60b9      	str	r1, [r7, #8]
 801711e:	607a      	str	r2, [r7, #4]
 8017120:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	b29b      	uxth	r3, r3
 8017126:	78f9      	ldrb	r1, [r7, #3]
 8017128:	2200      	movs	r2, #0
 801712a:	9203      	str	r2, [sp, #12]
 801712c:	9302      	str	r3, [sp, #8]
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	9301      	str	r3, [sp, #4]
 8017132:	2301      	movs	r3, #1
 8017134:	9300      	str	r3, [sp, #0]
 8017136:	2301      	movs	r3, #1
 8017138:	2200      	movs	r2, #0
 801713a:	68f8      	ldr	r0, [r7, #12]
 801713c:	f003 fe1c 	bl	801ad78 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8017140:	2300      	movs	r3, #0
}
 8017142:	4618      	mov	r0, r3
 8017144:	3710      	adds	r7, #16
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}

0801714a <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 801714a:	b580      	push	{r7, lr}
 801714c:	b086      	sub	sp, #24
 801714e:	af04      	add	r7, sp, #16
 8017150:	6078      	str	r0, [r7, #4]
 8017152:	4608      	mov	r0, r1
 8017154:	4611      	mov	r1, r2
 8017156:	461a      	mov	r2, r3
 8017158:	4603      	mov	r3, r0
 801715a:	70fb      	strb	r3, [r7, #3]
 801715c:	460b      	mov	r3, r1
 801715e:	70bb      	strb	r3, [r7, #2]
 8017160:	4613      	mov	r3, r2
 8017162:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8017164:	7878      	ldrb	r0, [r7, #1]
 8017166:	78ba      	ldrb	r2, [r7, #2]
 8017168:	78f9      	ldrb	r1, [r7, #3]
 801716a:	8b3b      	ldrh	r3, [r7, #24]
 801716c:	9302      	str	r3, [sp, #8]
 801716e:	7d3b      	ldrb	r3, [r7, #20]
 8017170:	9301      	str	r3, [sp, #4]
 8017172:	7c3b      	ldrb	r3, [r7, #16]
 8017174:	9300      	str	r3, [sp, #0]
 8017176:	4603      	mov	r3, r0
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	f003 fdaf 	bl	801acdc <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 801717e:	2300      	movs	r3, #0

}
 8017180:	4618      	mov	r0, r3
 8017182:	3708      	adds	r7, #8
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}

08017188 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
 8017190:	460b      	mov	r3, r1
 8017192:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8017194:	78fb      	ldrb	r3, [r7, #3]
 8017196:	4619      	mov	r1, r3
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f003 fdce 	bl	801ad3a <USBH_LL_ClosePipe>

  return USBH_OK;
 801719e:	2300      	movs	r3, #0

}
 80171a0:	4618      	mov	r0, r3
 80171a2:	3708      	adds	r7, #8
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}

080171a8 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	460b      	mov	r3, r1
 80171b2:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 f834 	bl	8017222 <USBH_GetFreePipe>
 80171ba:	4603      	mov	r3, r0
 80171bc:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80171be:	89fb      	ldrh	r3, [r7, #14]
 80171c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171c4:	4293      	cmp	r3, r2
 80171c6:	d008      	beq.n	80171da <USBH_AllocPipe+0x32>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80171c8:	78fb      	ldrb	r3, [r7, #3]
 80171ca:	89fa      	ldrh	r2, [r7, #14]
 80171cc:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	f502 728a 	add.w	r2, r2, #276	; 0x114
 80171d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80171da:	89fb      	ldrh	r3, [r7, #14]
 80171dc:	b2db      	uxtb	r3, r3
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3710      	adds	r7, #16
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}

080171e6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80171e6:	b480      	push	{r7}
 80171e8:	b083      	sub	sp, #12
 80171ea:	af00      	add	r7, sp, #0
 80171ec:	6078      	str	r0, [r7, #4]
 80171ee:	460b      	mov	r3, r1
 80171f0:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80171f2:	78fb      	ldrb	r3, [r7, #3]
 80171f4:	2b0a      	cmp	r3, #10
 80171f6:	d80d      	bhi.n	8017214 <USBH_FreePipe+0x2e>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80171f8:	78fa      	ldrb	r2, [r7, #3]
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8017200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017204:	78fa      	ldrb	r2, [r7, #3]
 8017206:	f3c3 010e 	ubfx	r1, r3, #0, #15
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8017210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8017214:	2300      	movs	r3, #0
}
 8017216:	4618      	mov	r0, r3
 8017218:	370c      	adds	r7, #12
 801721a:	46bd      	mov	sp, r7
 801721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017220:	4770      	bx	lr

08017222 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8017222:	b480      	push	{r7}
 8017224:	b085      	sub	sp, #20
 8017226:	af00      	add	r7, sp, #0
 8017228:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801722a:	2300      	movs	r3, #0
 801722c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801722e:	2300      	movs	r3, #0
 8017230:	73fb      	strb	r3, [r7, #15]
 8017232:	e00f      	b.n	8017254 <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8017234:	7bfa      	ldrb	r2, [r7, #15]
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	f502 728a 	add.w	r2, r2, #276	; 0x114
 801723c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017244:	2b00      	cmp	r3, #0
 8017246:	d102      	bne.n	801724e <USBH_GetFreePipe+0x2c>
	{
	   return (uint16_t)idx;
 8017248:	7bfb      	ldrb	r3, [r7, #15]
 801724a:	b29b      	uxth	r3, r3
 801724c:	e007      	b.n	801725e <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801724e:	7bfb      	ldrb	r3, [r7, #15]
 8017250:	3301      	adds	r3, #1
 8017252:	73fb      	strb	r3, [r7, #15]
 8017254:	7bfb      	ldrb	r3, [r7, #15]
 8017256:	2b0a      	cmp	r3, #10
 8017258:	d9ec      	bls.n	8017234 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 801725a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801725e:	4618      	mov	r0, r3
 8017260:	3714      	adds	r7, #20
 8017262:	46bd      	mov	sp, r7
 8017264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017268:	4770      	bx	lr

0801726a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801726a:	b480      	push	{r7}
 801726c:	b085      	sub	sp, #20
 801726e:	af00      	add	r7, sp, #0
 8017270:	4603      	mov	r3, r0
 8017272:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8017274:	2300      	movs	r3, #0
 8017276:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8017278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801727c:	2b84      	cmp	r3, #132	; 0x84
 801727e:	d005      	beq.n	801728c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8017280:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	4413      	add	r3, r2
 8017288:	3303      	adds	r3, #3
 801728a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801728c:	68fb      	ldr	r3, [r7, #12]
}
 801728e:	4618      	mov	r0, r3
 8017290:	3714      	adds	r7, #20
 8017292:	46bd      	mov	sp, r7
 8017294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017298:	4770      	bx	lr

0801729a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801729a:	b480      	push	{r7}
 801729c:	b083      	sub	sp, #12
 801729e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172a0:	f3ef 8305 	mrs	r3, IPSR
 80172a4:	607b      	str	r3, [r7, #4]
  return(result);
 80172a6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	bf14      	ite	ne
 80172ac:	2301      	movne	r3, #1
 80172ae:	2300      	moveq	r3, #0
 80172b0:	b2db      	uxtb	r3, r3
}
 80172b2:	4618      	mov	r0, r3
 80172b4:	370c      	adds	r7, #12
 80172b6:	46bd      	mov	sp, r7
 80172b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172bc:	4770      	bx	lr

080172be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80172be:	b580      	push	{r7, lr}
 80172c0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80172c2:	f001 fb67 	bl	8018994 <vTaskStartScheduler>
  
  return osOK;
 80172c6:	2300      	movs	r3, #0
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	bd80      	pop	{r7, pc}

080172cc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80172d0:	f001 ff4a 	bl	8019168 <xTaskGetSchedulerState>
 80172d4:	4603      	mov	r3, r0
 80172d6:	2b01      	cmp	r3, #1
 80172d8:	d101      	bne.n	80172de <osKernelRunning+0x12>
    return 0;
 80172da:	2300      	movs	r3, #0
 80172dc:	e000      	b.n	80172e0 <osKernelRunning+0x14>
  else
    return 1;
 80172de:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	bd80      	pop	{r7, pc}

080172e4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80172e8:	f7ff ffd7 	bl	801729a <inHandlerMode>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d003      	beq.n	80172fa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80172f2:	f001 fc4f 	bl	8018b94 <xTaskGetTickCountFromISR>
 80172f6:	4603      	mov	r3, r0
 80172f8:	e002      	b.n	8017300 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80172fa:	f001 fc3b 	bl	8018b74 <xTaskGetTickCount>
 80172fe:	4603      	mov	r3, r0
  }
}
 8017300:	4618      	mov	r0, r3
 8017302:	bd80      	pop	{r7, pc}

08017304 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017306:	b087      	sub	sp, #28
 8017308:	af02      	add	r7, sp, #8
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	685c      	ldr	r4, [r3, #4]
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801731a:	b29e      	uxth	r6, r3
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8017322:	4618      	mov	r0, r3
 8017324:	f7ff ffa1 	bl	801726a <makeFreeRtosPriority>
 8017328:	4602      	mov	r2, r0
 801732a:	f107 030c 	add.w	r3, r7, #12
 801732e:	9301      	str	r3, [sp, #4]
 8017330:	9200      	str	r2, [sp, #0]
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	4632      	mov	r2, r6
 8017336:	4629      	mov	r1, r5
 8017338:	4620      	mov	r0, r4
 801733a:	f001 f9cd 	bl	80186d8 <xTaskCreate>
 801733e:	4603      	mov	r3, r0
 8017340:	2b01      	cmp	r3, #1
 8017342:	d001      	beq.n	8017348 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8017344:	2300      	movs	r3, #0
 8017346:	e000      	b.n	801734a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8017348:	68fb      	ldr	r3, [r7, #12]
}
 801734a:	4618      	mov	r0, r3
 801734c:	3714      	adds	r7, #20
 801734e:	46bd      	mov	sp, r7
 8017350:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017352 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8017352:	b580      	push	{r7, lr}
 8017354:	b084      	sub	sp, #16
 8017356:	af00      	add	r7, sp, #0
 8017358:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d001      	beq.n	8017368 <osDelay+0x16>
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	e000      	b.n	801736a <osDelay+0x18>
 8017368:	2301      	movs	r3, #1
 801736a:	4618      	mov	r0, r3
 801736c:	f001 fade 	bl	801892c <vTaskDelay>
  
  return osOK;
 8017370:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8017372:	4618      	mov	r0, r3
 8017374:	3710      	adds	r7, #16
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}

0801737a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801737a:	b580      	push	{r7, lr}
 801737c:	b082      	sub	sp, #8
 801737e:	af00      	add	r7, sp, #0
 8017380:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8017382:	2001      	movs	r0, #1
 8017384:	f000 fba8 	bl	8017ad8 <xQueueCreateMutex>
 8017388:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 801738a:	4618      	mov	r0, r3
 801738c:	3708      	adds	r7, #8
 801738e:	46bd      	mov	sp, r7
 8017390:	bd80      	pop	{r7, pc}
	...

08017394 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b084      	sub	sp, #16
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
 801739c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801739e:	2300      	movs	r3, #0
 80173a0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d101      	bne.n	80173ac <osMutexWait+0x18>
    return osErrorParameter;
 80173a8:	2380      	movs	r3, #128	; 0x80
 80173aa:	e03a      	b.n	8017422 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80173ac:	2300      	movs	r3, #0
 80173ae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80173b6:	d103      	bne.n	80173c0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80173b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80173bc:	60fb      	str	r3, [r7, #12]
 80173be:	e009      	b.n	80173d4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80173c0:	683b      	ldr	r3, [r7, #0]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d006      	beq.n	80173d4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80173c6:	683b      	ldr	r3, [r7, #0]
 80173c8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d101      	bne.n	80173d4 <osMutexWait+0x40>
      ticks = 1;
 80173d0:	2301      	movs	r3, #1
 80173d2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80173d4:	f7ff ff61 	bl	801729a <inHandlerMode>
 80173d8:	4603      	mov	r3, r0
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d017      	beq.n	801740e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80173de:	f107 0308 	add.w	r3, r7, #8
 80173e2:	461a      	mov	r2, r3
 80173e4:	2100      	movs	r1, #0
 80173e6:	6878      	ldr	r0, [r7, #4]
 80173e8:	f000 ff8a 	bl	8018300 <xQueueReceiveFromISR>
 80173ec:	4603      	mov	r3, r0
 80173ee:	2b01      	cmp	r3, #1
 80173f0:	d001      	beq.n	80173f6 <osMutexWait+0x62>
      return osErrorOS;
 80173f2:	23ff      	movs	r3, #255	; 0xff
 80173f4:	e015      	b.n	8017422 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d011      	beq.n	8017420 <osMutexWait+0x8c>
 80173fc:	4b0b      	ldr	r3, [pc, #44]	; (801742c <osMutexWait+0x98>)
 80173fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017402:	601a      	str	r2, [r3, #0]
 8017404:	f3bf 8f4f 	dsb	sy
 8017408:	f3bf 8f6f 	isb	sy
 801740c:	e008      	b.n	8017420 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801740e:	68f9      	ldr	r1, [r7, #12]
 8017410:	6878      	ldr	r0, [r7, #4]
 8017412:	f000 fe6d 	bl	80180f0 <xQueueSemaphoreTake>
 8017416:	4603      	mov	r3, r0
 8017418:	2b01      	cmp	r3, #1
 801741a:	d001      	beq.n	8017420 <osMutexWait+0x8c>
    return osErrorOS;
 801741c:	23ff      	movs	r3, #255	; 0xff
 801741e:	e000      	b.n	8017422 <osMutexWait+0x8e>
  }
  
  return osOK;
 8017420:	2300      	movs	r3, #0
}
 8017422:	4618      	mov	r0, r3
 8017424:	3710      	adds	r7, #16
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	e000ed04 	.word	0xe000ed04

08017430 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b084      	sub	sp, #16
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8017438:	2300      	movs	r3, #0
 801743a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801743c:	2300      	movs	r3, #0
 801743e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8017440:	f7ff ff2b 	bl	801729a <inHandlerMode>
 8017444:	4603      	mov	r3, r0
 8017446:	2b00      	cmp	r3, #0
 8017448:	d016      	beq.n	8017478 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801744a:	f107 0308 	add.w	r3, r7, #8
 801744e:	4619      	mov	r1, r3
 8017450:	6878      	ldr	r0, [r7, #4]
 8017452:	f000 fce7 	bl	8017e24 <xQueueGiveFromISR>
 8017456:	4603      	mov	r3, r0
 8017458:	2b01      	cmp	r3, #1
 801745a:	d001      	beq.n	8017460 <osMutexRelease+0x30>
      return osErrorOS;
 801745c:	23ff      	movs	r3, #255	; 0xff
 801745e:	e017      	b.n	8017490 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d013      	beq.n	801748e <osMutexRelease+0x5e>
 8017466:	4b0c      	ldr	r3, [pc, #48]	; (8017498 <osMutexRelease+0x68>)
 8017468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801746c:	601a      	str	r2, [r3, #0]
 801746e:	f3bf 8f4f 	dsb	sy
 8017472:	f3bf 8f6f 	isb	sy
 8017476:	e00a      	b.n	801748e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8017478:	2300      	movs	r3, #0
 801747a:	2200      	movs	r2, #0
 801747c:	2100      	movs	r1, #0
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f000 fb42 	bl	8017b08 <xQueueGenericSend>
 8017484:	4603      	mov	r3, r0
 8017486:	2b01      	cmp	r3, #1
 8017488:	d001      	beq.n	801748e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801748a:	23ff      	movs	r3, #255	; 0xff
 801748c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801748e:	68fb      	ldr	r3, [r7, #12]
}
 8017490:	4618      	mov	r0, r3
 8017492:	3710      	adds	r7, #16
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}
 8017498:	e000ed04 	.word	0xe000ed04

0801749c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801749c:	b580      	push	{r7, lr}
 801749e:	b084      	sub	sp, #16
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
 80174a4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	2b01      	cmp	r3, #1
 80174aa:	d110      	bne.n	80174ce <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80174ac:	2203      	movs	r2, #3
 80174ae:	2100      	movs	r1, #0
 80174b0:	2001      	movs	r0, #1
 80174b2:	f000 fa9f 	bl	80179f4 <xQueueGenericCreate>
 80174b6:	60f8      	str	r0, [r7, #12]
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d005      	beq.n	80174ca <osSemaphoreCreate+0x2e>
 80174be:	2300      	movs	r3, #0
 80174c0:	2200      	movs	r2, #0
 80174c2:	2100      	movs	r1, #0
 80174c4:	68f8      	ldr	r0, [r7, #12]
 80174c6:	f000 fb1f 	bl	8017b08 <xQueueGenericSend>
    return sema;
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	e000      	b.n	80174d0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80174ce:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3710      	adds	r7, #16
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b084      	sub	sp, #16
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
 80174e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80174e2:	2300      	movs	r3, #0
 80174e4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d101      	bne.n	80174f0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80174ec:	2380      	movs	r3, #128	; 0x80
 80174ee:	e03a      	b.n	8017566 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80174f0:	2300      	movs	r3, #0
 80174f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80174fa:	d103      	bne.n	8017504 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80174fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017500:	60fb      	str	r3, [r7, #12]
 8017502:	e009      	b.n	8017518 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8017504:	683b      	ldr	r3, [r7, #0]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d006      	beq.n	8017518 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d101      	bne.n	8017518 <osSemaphoreWait+0x40>
      ticks = 1;
 8017514:	2301      	movs	r3, #1
 8017516:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8017518:	f7ff febf 	bl	801729a <inHandlerMode>
 801751c:	4603      	mov	r3, r0
 801751e:	2b00      	cmp	r3, #0
 8017520:	d017      	beq.n	8017552 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8017522:	f107 0308 	add.w	r3, r7, #8
 8017526:	461a      	mov	r2, r3
 8017528:	2100      	movs	r1, #0
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f000 fee8 	bl	8018300 <xQueueReceiveFromISR>
 8017530:	4603      	mov	r3, r0
 8017532:	2b01      	cmp	r3, #1
 8017534:	d001      	beq.n	801753a <osSemaphoreWait+0x62>
      return osErrorOS;
 8017536:	23ff      	movs	r3, #255	; 0xff
 8017538:	e015      	b.n	8017566 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d011      	beq.n	8017564 <osSemaphoreWait+0x8c>
 8017540:	4b0b      	ldr	r3, [pc, #44]	; (8017570 <osSemaphoreWait+0x98>)
 8017542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017546:	601a      	str	r2, [r3, #0]
 8017548:	f3bf 8f4f 	dsb	sy
 801754c:	f3bf 8f6f 	isb	sy
 8017550:	e008      	b.n	8017564 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8017552:	68f9      	ldr	r1, [r7, #12]
 8017554:	6878      	ldr	r0, [r7, #4]
 8017556:	f000 fdcb 	bl	80180f0 <xQueueSemaphoreTake>
 801755a:	4603      	mov	r3, r0
 801755c:	2b01      	cmp	r3, #1
 801755e:	d001      	beq.n	8017564 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8017560:	23ff      	movs	r3, #255	; 0xff
 8017562:	e000      	b.n	8017566 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8017564:	2300      	movs	r3, #0
}
 8017566:	4618      	mov	r0, r3
 8017568:	3710      	adds	r7, #16
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}
 801756e:	bf00      	nop
 8017570:	e000ed04 	.word	0xe000ed04

08017574 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b084      	sub	sp, #16
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801757c:	2300      	movs	r3, #0
 801757e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8017580:	2300      	movs	r3, #0
 8017582:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8017584:	f7ff fe89 	bl	801729a <inHandlerMode>
 8017588:	4603      	mov	r3, r0
 801758a:	2b00      	cmp	r3, #0
 801758c:	d016      	beq.n	80175bc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801758e:	f107 0308 	add.w	r3, r7, #8
 8017592:	4619      	mov	r1, r3
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f000 fc45 	bl	8017e24 <xQueueGiveFromISR>
 801759a:	4603      	mov	r3, r0
 801759c:	2b01      	cmp	r3, #1
 801759e:	d001      	beq.n	80175a4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80175a0:	23ff      	movs	r3, #255	; 0xff
 80175a2:	e017      	b.n	80175d4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d013      	beq.n	80175d2 <osSemaphoreRelease+0x5e>
 80175aa:	4b0c      	ldr	r3, [pc, #48]	; (80175dc <osSemaphoreRelease+0x68>)
 80175ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175b0:	601a      	str	r2, [r3, #0]
 80175b2:	f3bf 8f4f 	dsb	sy
 80175b6:	f3bf 8f6f 	isb	sy
 80175ba:	e00a      	b.n	80175d2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80175bc:	2300      	movs	r3, #0
 80175be:	2200      	movs	r2, #0
 80175c0:	2100      	movs	r1, #0
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f000 faa0 	bl	8017b08 <xQueueGenericSend>
 80175c8:	4603      	mov	r3, r0
 80175ca:	2b01      	cmp	r3, #1
 80175cc:	d001      	beq.n	80175d2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80175ce:	23ff      	movs	r3, #255	; 0xff
 80175d0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80175d2:	68fb      	ldr	r3, [r7, #12]
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3710      	adds	r7, #16
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}
 80175dc:	e000ed04 	.word	0xe000ed04

080175e0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b082      	sub	sp, #8
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80175e8:	f7ff fe57 	bl	801729a <inHandlerMode>
 80175ec:	4603      	mov	r3, r0
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d001      	beq.n	80175f6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80175f2:	2382      	movs	r3, #130	; 0x82
 80175f4:	e003      	b.n	80175fe <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f000 feff 	bl	80183fa <vQueueDelete>

  return osOK; 
 80175fc:	2300      	movs	r3, #0
}
 80175fe:	4618      	mov	r0, r3
 8017600:	3708      	adds	r7, #8
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}

08017606 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8017606:	b580      	push	{r7, lr}
 8017608:	b082      	sub	sp, #8
 801760a:	af00      	add	r7, sp, #0
 801760c:	6078      	str	r0, [r7, #4]
 801760e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6818      	ldr	r0, [r3, #0]
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	685b      	ldr	r3, [r3, #4]
 8017618:	2200      	movs	r2, #0
 801761a:	4619      	mov	r1, r3
 801761c:	f000 f9ea 	bl	80179f4 <xQueueGenericCreate>
 8017620:	4603      	mov	r3, r0
#endif
}
 8017622:	4618      	mov	r0, r3
 8017624:	3708      	adds	r7, #8
 8017626:	46bd      	mov	sp, r7
 8017628:	bd80      	pop	{r7, pc}
	...

0801762c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b086      	sub	sp, #24
 8017630:	af00      	add	r7, sp, #0
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8017638:	2300      	movs	r3, #0
 801763a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8017640:	697b      	ldr	r3, [r7, #20]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d101      	bne.n	801764a <osMessagePut+0x1e>
    ticks = 1;
 8017646:	2301      	movs	r3, #1
 8017648:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801764a:	f7ff fe26 	bl	801729a <inHandlerMode>
 801764e:	4603      	mov	r3, r0
 8017650:	2b00      	cmp	r3, #0
 8017652:	d018      	beq.n	8017686 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8017654:	f107 0210 	add.w	r2, r7, #16
 8017658:	f107 0108 	add.w	r1, r7, #8
 801765c:	2300      	movs	r3, #0
 801765e:	68f8      	ldr	r0, [r7, #12]
 8017660:	f000 fb4c 	bl	8017cfc <xQueueGenericSendFromISR>
 8017664:	4603      	mov	r3, r0
 8017666:	2b01      	cmp	r3, #1
 8017668:	d001      	beq.n	801766e <osMessagePut+0x42>
      return osErrorOS;
 801766a:	23ff      	movs	r3, #255	; 0xff
 801766c:	e018      	b.n	80176a0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d014      	beq.n	801769e <osMessagePut+0x72>
 8017674:	4b0c      	ldr	r3, [pc, #48]	; (80176a8 <osMessagePut+0x7c>)
 8017676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801767a:	601a      	str	r2, [r3, #0]
 801767c:	f3bf 8f4f 	dsb	sy
 8017680:	f3bf 8f6f 	isb	sy
 8017684:	e00b      	b.n	801769e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8017686:	f107 0108 	add.w	r1, r7, #8
 801768a:	2300      	movs	r3, #0
 801768c:	697a      	ldr	r2, [r7, #20]
 801768e:	68f8      	ldr	r0, [r7, #12]
 8017690:	f000 fa3a 	bl	8017b08 <xQueueGenericSend>
 8017694:	4603      	mov	r3, r0
 8017696:	2b01      	cmp	r3, #1
 8017698:	d001      	beq.n	801769e <osMessagePut+0x72>
      return osErrorOS;
 801769a:	23ff      	movs	r3, #255	; 0xff
 801769c:	e000      	b.n	80176a0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801769e:	2300      	movs	r3, #0
}
 80176a0:	4618      	mov	r0, r3
 80176a2:	3718      	adds	r7, #24
 80176a4:	46bd      	mov	sp, r7
 80176a6:	bd80      	pop	{r7, pc}
 80176a8:	e000ed04 	.word	0xe000ed04

080176ac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80176ac:	b590      	push	{r4, r7, lr}
 80176ae:	b08b      	sub	sp, #44	; 0x2c
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	60f8      	str	r0, [r7, #12]
 80176b4:	60b9      	str	r1, [r7, #8]
 80176b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80176b8:	68bb      	ldr	r3, [r7, #8]
 80176ba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80176bc:	2300      	movs	r3, #0
 80176be:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80176c0:	68bb      	ldr	r3, [r7, #8]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d10a      	bne.n	80176dc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80176c6:	2380      	movs	r3, #128	; 0x80
 80176c8:	617b      	str	r3, [r7, #20]
    return event;
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	461c      	mov	r4, r3
 80176ce:	f107 0314 	add.w	r3, r7, #20
 80176d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80176d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80176da:	e054      	b.n	8017786 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80176dc:	2300      	movs	r3, #0
 80176de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80176e0:	2300      	movs	r3, #0
 80176e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176ea:	d103      	bne.n	80176f4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80176ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176f0:	627b      	str	r3, [r7, #36]	; 0x24
 80176f2:	e009      	b.n	8017708 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d006      	beq.n	8017708 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80176fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017700:	2b00      	cmp	r3, #0
 8017702:	d101      	bne.n	8017708 <osMessageGet+0x5c>
      ticks = 1;
 8017704:	2301      	movs	r3, #1
 8017706:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8017708:	f7ff fdc7 	bl	801729a <inHandlerMode>
 801770c:	4603      	mov	r3, r0
 801770e:	2b00      	cmp	r3, #0
 8017710:	d01c      	beq.n	801774c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8017712:	f107 0220 	add.w	r2, r7, #32
 8017716:	f107 0314 	add.w	r3, r7, #20
 801771a:	3304      	adds	r3, #4
 801771c:	4619      	mov	r1, r3
 801771e:	68b8      	ldr	r0, [r7, #8]
 8017720:	f000 fdee 	bl	8018300 <xQueueReceiveFromISR>
 8017724:	4603      	mov	r3, r0
 8017726:	2b01      	cmp	r3, #1
 8017728:	d102      	bne.n	8017730 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801772a:	2310      	movs	r3, #16
 801772c:	617b      	str	r3, [r7, #20]
 801772e:	e001      	b.n	8017734 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8017730:	2300      	movs	r3, #0
 8017732:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017734:	6a3b      	ldr	r3, [r7, #32]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d01d      	beq.n	8017776 <osMessageGet+0xca>
 801773a:	4b15      	ldr	r3, [pc, #84]	; (8017790 <osMessageGet+0xe4>)
 801773c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017740:	601a      	str	r2, [r3, #0]
 8017742:	f3bf 8f4f 	dsb	sy
 8017746:	f3bf 8f6f 	isb	sy
 801774a:	e014      	b.n	8017776 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801774c:	f107 0314 	add.w	r3, r7, #20
 8017750:	3304      	adds	r3, #4
 8017752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017754:	4619      	mov	r1, r3
 8017756:	68b8      	ldr	r0, [r7, #8]
 8017758:	f000 fbee 	bl	8017f38 <xQueueReceive>
 801775c:	4603      	mov	r3, r0
 801775e:	2b01      	cmp	r3, #1
 8017760:	d102      	bne.n	8017768 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8017762:	2310      	movs	r3, #16
 8017764:	617b      	str	r3, [r7, #20]
 8017766:	e006      	b.n	8017776 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8017768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801776a:	2b00      	cmp	r3, #0
 801776c:	d101      	bne.n	8017772 <osMessageGet+0xc6>
 801776e:	2300      	movs	r3, #0
 8017770:	e000      	b.n	8017774 <osMessageGet+0xc8>
 8017772:	2340      	movs	r3, #64	; 0x40
 8017774:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	461c      	mov	r4, r3
 801777a:	f107 0314 	add.w	r3, r7, #20
 801777e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8017786:	68f8      	ldr	r0, [r7, #12]
 8017788:	372c      	adds	r7, #44	; 0x2c
 801778a:	46bd      	mov	sp, r7
 801778c:	bd90      	pop	{r4, r7, pc}
 801778e:	bf00      	nop
 8017790:	e000ed04 	.word	0xe000ed04

08017794 <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 8017798:	f001 f942 	bl	8018a20 <vTaskSuspendAll>
  
  return osOK;
 801779c:	2300      	movs	r3, #0
}
 801779e:	4618      	mov	r0, r3
 80177a0:	bd80      	pop	{r7, pc}

080177a2 <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 80177a2:	b580      	push	{r7, lr}
 80177a4:	af00      	add	r7, sp, #0
  if (xTaskResumeAll() == pdTRUE)
 80177a6:	f001 f949 	bl	8018a3c <xTaskResumeAll>
 80177aa:	4603      	mov	r3, r0
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	d101      	bne.n	80177b4 <osThreadResumeAll+0x12>
    return osOK;
 80177b0:	2300      	movs	r3, #0
 80177b2:	e000      	b.n	80177b6 <osThreadResumeAll+0x14>
  else
    return osErrorOS;
 80177b4:	23ff      	movs	r3, #255	; 0xff
  
}
 80177b6:	4618      	mov	r0, r3
 80177b8:	bd80      	pop	{r7, pc}

080177ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80177ba:	b480      	push	{r7}
 80177bc:	b083      	sub	sp, #12
 80177be:	af00      	add	r7, sp, #0
 80177c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f103 0208 	add.w	r2, r3, #8
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80177d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f103 0208 	add.w	r2, r3, #8
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f103 0208 	add.w	r2, r3, #8
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	2200      	movs	r2, #0
 80177ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80177ee:	bf00      	nop
 80177f0:	370c      	adds	r7, #12
 80177f2:	46bd      	mov	sp, r7
 80177f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f8:	4770      	bx	lr

080177fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80177fa:	b480      	push	{r7}
 80177fc:	b083      	sub	sp, #12
 80177fe:	af00      	add	r7, sp, #0
 8017800:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	2200      	movs	r2, #0
 8017806:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017808:	bf00      	nop
 801780a:	370c      	adds	r7, #12
 801780c:	46bd      	mov	sp, r7
 801780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017812:	4770      	bx	lr

08017814 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017814:	b480      	push	{r7}
 8017816:	b085      	sub	sp, #20
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
 801781c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	685b      	ldr	r3, [r3, #4]
 8017822:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	68fa      	ldr	r2, [r7, #12]
 8017828:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	689a      	ldr	r2, [r3, #8]
 801782e:	683b      	ldr	r3, [r7, #0]
 8017830:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	689b      	ldr	r3, [r3, #8]
 8017836:	683a      	ldr	r2, [r7, #0]
 8017838:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	683a      	ldr	r2, [r7, #0]
 801783e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8017840:	683b      	ldr	r3, [r7, #0]
 8017842:	687a      	ldr	r2, [r7, #4]
 8017844:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	1c5a      	adds	r2, r3, #1
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	601a      	str	r2, [r3, #0]
}
 8017850:	bf00      	nop
 8017852:	3714      	adds	r7, #20
 8017854:	46bd      	mov	sp, r7
 8017856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785a:	4770      	bx	lr

0801785c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801785c:	b480      	push	{r7}
 801785e:	b085      	sub	sp, #20
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
 8017864:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017866:	683b      	ldr	r3, [r7, #0]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801786c:	68bb      	ldr	r3, [r7, #8]
 801786e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017872:	d103      	bne.n	801787c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	691b      	ldr	r3, [r3, #16]
 8017878:	60fb      	str	r3, [r7, #12]
 801787a:	e00c      	b.n	8017896 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	3308      	adds	r3, #8
 8017880:	60fb      	str	r3, [r7, #12]
 8017882:	e002      	b.n	801788a <vListInsert+0x2e>
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	685b      	ldr	r3, [r3, #4]
 8017888:	60fb      	str	r3, [r7, #12]
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	685b      	ldr	r3, [r3, #4]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	68ba      	ldr	r2, [r7, #8]
 8017892:	429a      	cmp	r2, r3
 8017894:	d2f6      	bcs.n	8017884 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	685a      	ldr	r2, [r3, #4]
 801789a:	683b      	ldr	r3, [r7, #0]
 801789c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	685b      	ldr	r3, [r3, #4]
 80178a2:	683a      	ldr	r2, [r7, #0]
 80178a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80178a6:	683b      	ldr	r3, [r7, #0]
 80178a8:	68fa      	ldr	r2, [r7, #12]
 80178aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	683a      	ldr	r2, [r7, #0]
 80178b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80178b2:	683b      	ldr	r3, [r7, #0]
 80178b4:	687a      	ldr	r2, [r7, #4]
 80178b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	1c5a      	adds	r2, r3, #1
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	601a      	str	r2, [r3, #0]
}
 80178c2:	bf00      	nop
 80178c4:	3714      	adds	r7, #20
 80178c6:	46bd      	mov	sp, r7
 80178c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178cc:	4770      	bx	lr

080178ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80178ce:	b480      	push	{r7}
 80178d0:	b085      	sub	sp, #20
 80178d2:	af00      	add	r7, sp, #0
 80178d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	691b      	ldr	r3, [r3, #16]
 80178da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	685b      	ldr	r3, [r3, #4]
 80178e0:	687a      	ldr	r2, [r7, #4]
 80178e2:	6892      	ldr	r2, [r2, #8]
 80178e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	689b      	ldr	r3, [r3, #8]
 80178ea:	687a      	ldr	r2, [r7, #4]
 80178ec:	6852      	ldr	r2, [r2, #4]
 80178ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	685b      	ldr	r3, [r3, #4]
 80178f4:	687a      	ldr	r2, [r7, #4]
 80178f6:	429a      	cmp	r2, r3
 80178f8:	d103      	bne.n	8017902 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	689a      	ldr	r2, [r3, #8]
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	2200      	movs	r2, #0
 8017906:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	1e5a      	subs	r2, r3, #1
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	681b      	ldr	r3, [r3, #0]
}
 8017916:	4618      	mov	r0, r3
 8017918:	3714      	adds	r7, #20
 801791a:	46bd      	mov	sp, r7
 801791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017920:	4770      	bx	lr
	...

08017924 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b084      	sub	sp, #16
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d109      	bne.n	801794c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801793c:	f383 8811 	msr	BASEPRI, r3
 8017940:	f3bf 8f6f 	isb	sy
 8017944:	f3bf 8f4f 	dsb	sy
 8017948:	60bb      	str	r3, [r7, #8]
 801794a:	e7fe      	b.n	801794a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801794c:	f001 ff76 	bl	801983c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	681a      	ldr	r2, [r3, #0]
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017958:	68f9      	ldr	r1, [r7, #12]
 801795a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801795c:	fb01 f303 	mul.w	r3, r1, r3
 8017960:	441a      	add	r2, r3
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	2200      	movs	r2, #0
 801796a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	681a      	ldr	r2, [r3, #0]
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	681a      	ldr	r2, [r3, #0]
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801797c:	3b01      	subs	r3, #1
 801797e:	68f9      	ldr	r1, [r7, #12]
 8017980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017982:	fb01 f303 	mul.w	r3, r1, r3
 8017986:	441a      	add	r2, r3
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	22ff      	movs	r2, #255	; 0xff
 8017990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	22ff      	movs	r2, #255	; 0xff
 8017998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801799c:	683b      	ldr	r3, [r7, #0]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d114      	bne.n	80179cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	691b      	ldr	r3, [r3, #16]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d01a      	beq.n	80179e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	3310      	adds	r3, #16
 80179ae:	4618      	mov	r0, r3
 80179b0:	f001 fa3c 	bl	8018e2c <xTaskRemoveFromEventList>
 80179b4:	4603      	mov	r3, r0
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d012      	beq.n	80179e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80179ba:	4b0d      	ldr	r3, [pc, #52]	; (80179f0 <xQueueGenericReset+0xcc>)
 80179bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179c0:	601a      	str	r2, [r3, #0]
 80179c2:	f3bf 8f4f 	dsb	sy
 80179c6:	f3bf 8f6f 	isb	sy
 80179ca:	e009      	b.n	80179e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	3310      	adds	r3, #16
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7ff fef2 	bl	80177ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	3324      	adds	r3, #36	; 0x24
 80179da:	4618      	mov	r0, r3
 80179dc:	f7ff feed 	bl	80177ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80179e0:	f001 ff5a 	bl	8019898 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80179e4:	2301      	movs	r3, #1
}
 80179e6:	4618      	mov	r0, r3
 80179e8:	3710      	adds	r7, #16
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}
 80179ee:	bf00      	nop
 80179f0:	e000ed04 	.word	0xe000ed04

080179f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b08a      	sub	sp, #40	; 0x28
 80179f8:	af02      	add	r7, sp, #8
 80179fa:	60f8      	str	r0, [r7, #12]
 80179fc:	60b9      	str	r1, [r7, #8]
 80179fe:	4613      	mov	r3, r2
 8017a00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d109      	bne.n	8017a1c <xQueueGenericCreate+0x28>
 8017a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a0c:	f383 8811 	msr	BASEPRI, r3
 8017a10:	f3bf 8f6f 	isb	sy
 8017a14:	f3bf 8f4f 	dsb	sy
 8017a18:	613b      	str	r3, [r7, #16]
 8017a1a:	e7fe      	b.n	8017a1a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d102      	bne.n	8017a28 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8017a22:	2300      	movs	r3, #0
 8017a24:	61fb      	str	r3, [r7, #28]
 8017a26:	e004      	b.n	8017a32 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	68ba      	ldr	r2, [r7, #8]
 8017a2c:	fb02 f303 	mul.w	r3, r2, r3
 8017a30:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8017a32:	69fb      	ldr	r3, [r7, #28]
 8017a34:	3348      	adds	r3, #72	; 0x48
 8017a36:	4618      	mov	r0, r3
 8017a38:	f002 f81a 	bl	8019a70 <pvPortMalloc>
 8017a3c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017a3e:	69bb      	ldr	r3, [r7, #24]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d00b      	beq.n	8017a5c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8017a44:	69bb      	ldr	r3, [r7, #24]
 8017a46:	3348      	adds	r3, #72	; 0x48
 8017a48:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017a4a:	79fa      	ldrb	r2, [r7, #7]
 8017a4c:	69bb      	ldr	r3, [r7, #24]
 8017a4e:	9300      	str	r3, [sp, #0]
 8017a50:	4613      	mov	r3, r2
 8017a52:	697a      	ldr	r2, [r7, #20]
 8017a54:	68b9      	ldr	r1, [r7, #8]
 8017a56:	68f8      	ldr	r0, [r7, #12]
 8017a58:	f000 f805 	bl	8017a66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8017a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8017a5e:	4618      	mov	r0, r3
 8017a60:	3720      	adds	r7, #32
 8017a62:	46bd      	mov	sp, r7
 8017a64:	bd80      	pop	{r7, pc}

08017a66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017a66:	b580      	push	{r7, lr}
 8017a68:	b084      	sub	sp, #16
 8017a6a:	af00      	add	r7, sp, #0
 8017a6c:	60f8      	str	r0, [r7, #12]
 8017a6e:	60b9      	str	r1, [r7, #8]
 8017a70:	607a      	str	r2, [r7, #4]
 8017a72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017a74:	68bb      	ldr	r3, [r7, #8]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d103      	bne.n	8017a82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017a7a:	69bb      	ldr	r3, [r7, #24]
 8017a7c:	69ba      	ldr	r2, [r7, #24]
 8017a7e:	601a      	str	r2, [r3, #0]
 8017a80:	e002      	b.n	8017a88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017a82:	69bb      	ldr	r3, [r7, #24]
 8017a84:	687a      	ldr	r2, [r7, #4]
 8017a86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017a88:	69bb      	ldr	r3, [r7, #24]
 8017a8a:	68fa      	ldr	r2, [r7, #12]
 8017a8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017a8e:	69bb      	ldr	r3, [r7, #24]
 8017a90:	68ba      	ldr	r2, [r7, #8]
 8017a92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017a94:	2101      	movs	r1, #1
 8017a96:	69b8      	ldr	r0, [r7, #24]
 8017a98:	f7ff ff44 	bl	8017924 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017a9c:	bf00      	nop
 8017a9e:	3710      	adds	r7, #16
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}

08017aa4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b082      	sub	sp, #8
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d00e      	beq.n	8017ad0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2200      	movs	r2, #0
 8017abc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	2100      	movs	r1, #0
 8017aca:	6878      	ldr	r0, [r7, #4]
 8017acc:	f000 f81c 	bl	8017b08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8017ad0:	bf00      	nop
 8017ad2:	3708      	adds	r7, #8
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}

08017ad8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b086      	sub	sp, #24
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	4603      	mov	r3, r0
 8017ae0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8017ae2:	2301      	movs	r3, #1
 8017ae4:	617b      	str	r3, [r7, #20]
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8017aea:	79fb      	ldrb	r3, [r7, #7]
 8017aec:	461a      	mov	r2, r3
 8017aee:	6939      	ldr	r1, [r7, #16]
 8017af0:	6978      	ldr	r0, [r7, #20]
 8017af2:	f7ff ff7f 	bl	80179f4 <xQueueGenericCreate>
 8017af6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8017af8:	68f8      	ldr	r0, [r7, #12]
 8017afa:	f7ff ffd3 	bl	8017aa4 <prvInitialiseMutex>

		return pxNewQueue;
 8017afe:	68fb      	ldr	r3, [r7, #12]
	}
 8017b00:	4618      	mov	r0, r3
 8017b02:	3718      	adds	r7, #24
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}

08017b08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b08e      	sub	sp, #56	; 0x38
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	60f8      	str	r0, [r7, #12]
 8017b10:	60b9      	str	r1, [r7, #8]
 8017b12:	607a      	str	r2, [r7, #4]
 8017b14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017b16:	2300      	movs	r3, #0
 8017b18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d109      	bne.n	8017b38 <xQueueGenericSend+0x30>
 8017b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b28:	f383 8811 	msr	BASEPRI, r3
 8017b2c:	f3bf 8f6f 	isb	sy
 8017b30:	f3bf 8f4f 	dsb	sy
 8017b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b36:	e7fe      	b.n	8017b36 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d103      	bne.n	8017b46 <xQueueGenericSend+0x3e>
 8017b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d101      	bne.n	8017b4a <xQueueGenericSend+0x42>
 8017b46:	2301      	movs	r3, #1
 8017b48:	e000      	b.n	8017b4c <xQueueGenericSend+0x44>
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d109      	bne.n	8017b64 <xQueueGenericSend+0x5c>
 8017b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b54:	f383 8811 	msr	BASEPRI, r3
 8017b58:	f3bf 8f6f 	isb	sy
 8017b5c:	f3bf 8f4f 	dsb	sy
 8017b60:	627b      	str	r3, [r7, #36]	; 0x24
 8017b62:	e7fe      	b.n	8017b62 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	2b02      	cmp	r3, #2
 8017b68:	d103      	bne.n	8017b72 <xQueueGenericSend+0x6a>
 8017b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b6e:	2b01      	cmp	r3, #1
 8017b70:	d101      	bne.n	8017b76 <xQueueGenericSend+0x6e>
 8017b72:	2301      	movs	r3, #1
 8017b74:	e000      	b.n	8017b78 <xQueueGenericSend+0x70>
 8017b76:	2300      	movs	r3, #0
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d109      	bne.n	8017b90 <xQueueGenericSend+0x88>
 8017b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b80:	f383 8811 	msr	BASEPRI, r3
 8017b84:	f3bf 8f6f 	isb	sy
 8017b88:	f3bf 8f4f 	dsb	sy
 8017b8c:	623b      	str	r3, [r7, #32]
 8017b8e:	e7fe      	b.n	8017b8e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017b90:	f001 faea 	bl	8019168 <xTaskGetSchedulerState>
 8017b94:	4603      	mov	r3, r0
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d102      	bne.n	8017ba0 <xQueueGenericSend+0x98>
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d101      	bne.n	8017ba4 <xQueueGenericSend+0x9c>
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	e000      	b.n	8017ba6 <xQueueGenericSend+0x9e>
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d109      	bne.n	8017bbe <xQueueGenericSend+0xb6>
 8017baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bae:	f383 8811 	msr	BASEPRI, r3
 8017bb2:	f3bf 8f6f 	isb	sy
 8017bb6:	f3bf 8f4f 	dsb	sy
 8017bba:	61fb      	str	r3, [r7, #28]
 8017bbc:	e7fe      	b.n	8017bbc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017bbe:	f001 fe3d 	bl	801983c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d302      	bcc.n	8017bd4 <xQueueGenericSend+0xcc>
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	2b02      	cmp	r3, #2
 8017bd2:	d129      	bne.n	8017c28 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017bd4:	683a      	ldr	r2, [r7, #0]
 8017bd6:	68b9      	ldr	r1, [r7, #8]
 8017bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bda:	f000 fc43 	bl	8018464 <prvCopyDataToQueue>
 8017bde:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d010      	beq.n	8017c0a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bea:	3324      	adds	r3, #36	; 0x24
 8017bec:	4618      	mov	r0, r3
 8017bee:	f001 f91d 	bl	8018e2c <xTaskRemoveFromEventList>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d013      	beq.n	8017c20 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017bf8:	4b3f      	ldr	r3, [pc, #252]	; (8017cf8 <xQueueGenericSend+0x1f0>)
 8017bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bfe:	601a      	str	r2, [r3, #0]
 8017c00:	f3bf 8f4f 	dsb	sy
 8017c04:	f3bf 8f6f 	isb	sy
 8017c08:	e00a      	b.n	8017c20 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d007      	beq.n	8017c20 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017c10:	4b39      	ldr	r3, [pc, #228]	; (8017cf8 <xQueueGenericSend+0x1f0>)
 8017c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c16:	601a      	str	r2, [r3, #0]
 8017c18:	f3bf 8f4f 	dsb	sy
 8017c1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017c20:	f001 fe3a 	bl	8019898 <vPortExitCritical>
				return pdPASS;
 8017c24:	2301      	movs	r3, #1
 8017c26:	e063      	b.n	8017cf0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d103      	bne.n	8017c36 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017c2e:	f001 fe33 	bl	8019898 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017c32:	2300      	movs	r3, #0
 8017c34:	e05c      	b.n	8017cf0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d106      	bne.n	8017c4a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017c3c:	f107 0314 	add.w	r3, r7, #20
 8017c40:	4618      	mov	r0, r3
 8017c42:	f001 f955 	bl	8018ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017c46:	2301      	movs	r3, #1
 8017c48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017c4a:	f001 fe25 	bl	8019898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017c4e:	f000 fee7 	bl	8018a20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017c52:	f001 fdf3 	bl	801983c <vPortEnterCritical>
 8017c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c5c:	b25b      	sxtb	r3, r3
 8017c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017c62:	d103      	bne.n	8017c6c <xQueueGenericSend+0x164>
 8017c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c66:	2200      	movs	r2, #0
 8017c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c72:	b25b      	sxtb	r3, r3
 8017c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017c78:	d103      	bne.n	8017c82 <xQueueGenericSend+0x17a>
 8017c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017c82:	f001 fe09 	bl	8019898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017c86:	1d3a      	adds	r2, r7, #4
 8017c88:	f107 0314 	add.w	r3, r7, #20
 8017c8c:	4611      	mov	r1, r2
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f001 f944 	bl	8018f1c <xTaskCheckForTimeOut>
 8017c94:	4603      	mov	r3, r0
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d124      	bne.n	8017ce4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c9c:	f000 fcda 	bl	8018654 <prvIsQueueFull>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d018      	beq.n	8017cd8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ca8:	3310      	adds	r3, #16
 8017caa:	687a      	ldr	r2, [r7, #4]
 8017cac:	4611      	mov	r1, r2
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f001 f898 	bl	8018de4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cb6:	f000 fc65 	bl	8018584 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017cba:	f000 febf 	bl	8018a3c <xTaskResumeAll>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	f47f af7c 	bne.w	8017bbe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8017cc6:	4b0c      	ldr	r3, [pc, #48]	; (8017cf8 <xQueueGenericSend+0x1f0>)
 8017cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ccc:	601a      	str	r2, [r3, #0]
 8017cce:	f3bf 8f4f 	dsb	sy
 8017cd2:	f3bf 8f6f 	isb	sy
 8017cd6:	e772      	b.n	8017bbe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cda:	f000 fc53 	bl	8018584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017cde:	f000 fead 	bl	8018a3c <xTaskResumeAll>
 8017ce2:	e76c      	b.n	8017bbe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ce6:	f000 fc4d 	bl	8018584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017cea:	f000 fea7 	bl	8018a3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017cee:	2300      	movs	r3, #0
		}
	}
}
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	3738      	adds	r7, #56	; 0x38
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}
 8017cf8:	e000ed04 	.word	0xe000ed04

08017cfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b08e      	sub	sp, #56	; 0x38
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	60f8      	str	r0, [r7, #12]
 8017d04:	60b9      	str	r1, [r7, #8]
 8017d06:	607a      	str	r2, [r7, #4]
 8017d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d109      	bne.n	8017d28 <xQueueGenericSendFromISR+0x2c>
 8017d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d18:	f383 8811 	msr	BASEPRI, r3
 8017d1c:	f3bf 8f6f 	isb	sy
 8017d20:	f3bf 8f4f 	dsb	sy
 8017d24:	627b      	str	r3, [r7, #36]	; 0x24
 8017d26:	e7fe      	b.n	8017d26 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d103      	bne.n	8017d36 <xQueueGenericSendFromISR+0x3a>
 8017d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d101      	bne.n	8017d3a <xQueueGenericSendFromISR+0x3e>
 8017d36:	2301      	movs	r3, #1
 8017d38:	e000      	b.n	8017d3c <xQueueGenericSendFromISR+0x40>
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d109      	bne.n	8017d54 <xQueueGenericSendFromISR+0x58>
 8017d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d44:	f383 8811 	msr	BASEPRI, r3
 8017d48:	f3bf 8f6f 	isb	sy
 8017d4c:	f3bf 8f4f 	dsb	sy
 8017d50:	623b      	str	r3, [r7, #32]
 8017d52:	e7fe      	b.n	8017d52 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017d54:	683b      	ldr	r3, [r7, #0]
 8017d56:	2b02      	cmp	r3, #2
 8017d58:	d103      	bne.n	8017d62 <xQueueGenericSendFromISR+0x66>
 8017d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d5e:	2b01      	cmp	r3, #1
 8017d60:	d101      	bne.n	8017d66 <xQueueGenericSendFromISR+0x6a>
 8017d62:	2301      	movs	r3, #1
 8017d64:	e000      	b.n	8017d68 <xQueueGenericSendFromISR+0x6c>
 8017d66:	2300      	movs	r3, #0
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d109      	bne.n	8017d80 <xQueueGenericSendFromISR+0x84>
 8017d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d70:	f383 8811 	msr	BASEPRI, r3
 8017d74:	f3bf 8f6f 	isb	sy
 8017d78:	f3bf 8f4f 	dsb	sy
 8017d7c:	61fb      	str	r3, [r7, #28]
 8017d7e:	e7fe      	b.n	8017d7e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017d80:	f001 fe38 	bl	80199f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017d84:	f3ef 8211 	mrs	r2, BASEPRI
 8017d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d8c:	f383 8811 	msr	BASEPRI, r3
 8017d90:	f3bf 8f6f 	isb	sy
 8017d94:	f3bf 8f4f 	dsb	sy
 8017d98:	61ba      	str	r2, [r7, #24]
 8017d9a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017d9c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017da8:	429a      	cmp	r2, r3
 8017daa:	d302      	bcc.n	8017db2 <xQueueGenericSendFromISR+0xb6>
 8017dac:	683b      	ldr	r3, [r7, #0]
 8017dae:	2b02      	cmp	r3, #2
 8017db0:	d12c      	bne.n	8017e0c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017dbc:	683a      	ldr	r2, [r7, #0]
 8017dbe:	68b9      	ldr	r1, [r7, #8]
 8017dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017dc2:	f000 fb4f 	bl	8018464 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017dc6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017dce:	d112      	bne.n	8017df6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d016      	beq.n	8017e06 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dda:	3324      	adds	r3, #36	; 0x24
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f001 f825 	bl	8018e2c <xTaskRemoveFromEventList>
 8017de2:	4603      	mov	r3, r0
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d00e      	beq.n	8017e06 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d00b      	beq.n	8017e06 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	2201      	movs	r2, #1
 8017df2:	601a      	str	r2, [r3, #0]
 8017df4:	e007      	b.n	8017e06 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017df6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017dfa:	3301      	adds	r3, #1
 8017dfc:	b2db      	uxtb	r3, r3
 8017dfe:	b25a      	sxtb	r2, r3
 8017e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017e06:	2301      	movs	r3, #1
 8017e08:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8017e0a:	e001      	b.n	8017e10 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8017e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e12:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017e14:	693b      	ldr	r3, [r7, #16]
 8017e16:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	3738      	adds	r7, #56	; 0x38
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}

08017e24 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b08e      	sub	sp, #56	; 0x38
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
 8017e2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d109      	bne.n	8017e4c <xQueueGiveFromISR+0x28>
	__asm volatile
 8017e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e3c:	f383 8811 	msr	BASEPRI, r3
 8017e40:	f3bf 8f6f 	isb	sy
 8017e44:	f3bf 8f4f 	dsb	sy
 8017e48:	623b      	str	r3, [r7, #32]
 8017e4a:	e7fe      	b.n	8017e4a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d009      	beq.n	8017e68 <xQueueGiveFromISR+0x44>
 8017e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e58:	f383 8811 	msr	BASEPRI, r3
 8017e5c:	f3bf 8f6f 	isb	sy
 8017e60:	f3bf 8f4f 	dsb	sy
 8017e64:	61fb      	str	r3, [r7, #28]
 8017e66:	e7fe      	b.n	8017e66 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8017e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d103      	bne.n	8017e78 <xQueueGiveFromISR+0x54>
 8017e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e72:	685b      	ldr	r3, [r3, #4]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d101      	bne.n	8017e7c <xQueueGiveFromISR+0x58>
 8017e78:	2301      	movs	r3, #1
 8017e7a:	e000      	b.n	8017e7e <xQueueGiveFromISR+0x5a>
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d109      	bne.n	8017e96 <xQueueGiveFromISR+0x72>
 8017e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e86:	f383 8811 	msr	BASEPRI, r3
 8017e8a:	f3bf 8f6f 	isb	sy
 8017e8e:	f3bf 8f4f 	dsb	sy
 8017e92:	61bb      	str	r3, [r7, #24]
 8017e94:	e7fe      	b.n	8017e94 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017e96:	f001 fdad 	bl	80199f4 <vPortValidateInterruptPriority>
	__asm volatile
 8017e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8017e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ea2:	f383 8811 	msr	BASEPRI, r3
 8017ea6:	f3bf 8f6f 	isb	sy
 8017eaa:	f3bf 8f4f 	dsb	sy
 8017eae:	617a      	str	r2, [r7, #20]
 8017eb0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017eb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017eba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ec2:	429a      	cmp	r2, r3
 8017ec4:	d22b      	bcs.n	8017f1e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed2:	1c5a      	adds	r2, r3, #1
 8017ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ee0:	d112      	bne.n	8017f08 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d016      	beq.n	8017f18 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eec:	3324      	adds	r3, #36	; 0x24
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f000 ff9c 	bl	8018e2c <xTaskRemoveFromEventList>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d00e      	beq.n	8017f18 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d00b      	beq.n	8017f18 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017f00:	683b      	ldr	r3, [r7, #0]
 8017f02:	2201      	movs	r2, #1
 8017f04:	601a      	str	r2, [r3, #0]
 8017f06:	e007      	b.n	8017f18 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	b2db      	uxtb	r3, r3
 8017f10:	b25a      	sxtb	r2, r3
 8017f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017f18:	2301      	movs	r3, #1
 8017f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8017f1c:	e001      	b.n	8017f22 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017f1e:	2300      	movs	r3, #0
 8017f20:	637b      	str	r3, [r7, #52]	; 0x34
 8017f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f24:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017f2e:	4618      	mov	r0, r3
 8017f30:	3738      	adds	r7, #56	; 0x38
 8017f32:	46bd      	mov	sp, r7
 8017f34:	bd80      	pop	{r7, pc}
	...

08017f38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b08c      	sub	sp, #48	; 0x30
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	60f8      	str	r0, [r7, #12]
 8017f40:	60b9      	str	r1, [r7, #8]
 8017f42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017f44:	2300      	movs	r3, #0
 8017f46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d109      	bne.n	8017f66 <xQueueReceive+0x2e>
	__asm volatile
 8017f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f56:	f383 8811 	msr	BASEPRI, r3
 8017f5a:	f3bf 8f6f 	isb	sy
 8017f5e:	f3bf 8f4f 	dsb	sy
 8017f62:	623b      	str	r3, [r7, #32]
 8017f64:	e7fe      	b.n	8017f64 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017f66:	68bb      	ldr	r3, [r7, #8]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d103      	bne.n	8017f74 <xQueueReceive+0x3c>
 8017f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d101      	bne.n	8017f78 <xQueueReceive+0x40>
 8017f74:	2301      	movs	r3, #1
 8017f76:	e000      	b.n	8017f7a <xQueueReceive+0x42>
 8017f78:	2300      	movs	r3, #0
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d109      	bne.n	8017f92 <xQueueReceive+0x5a>
 8017f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f82:	f383 8811 	msr	BASEPRI, r3
 8017f86:	f3bf 8f6f 	isb	sy
 8017f8a:	f3bf 8f4f 	dsb	sy
 8017f8e:	61fb      	str	r3, [r7, #28]
 8017f90:	e7fe      	b.n	8017f90 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017f92:	f001 f8e9 	bl	8019168 <xTaskGetSchedulerState>
 8017f96:	4603      	mov	r3, r0
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <xQueueReceive+0x6a>
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d101      	bne.n	8017fa6 <xQueueReceive+0x6e>
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	e000      	b.n	8017fa8 <xQueueReceive+0x70>
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d109      	bne.n	8017fc0 <xQueueReceive+0x88>
 8017fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fb0:	f383 8811 	msr	BASEPRI, r3
 8017fb4:	f3bf 8f6f 	isb	sy
 8017fb8:	f3bf 8f4f 	dsb	sy
 8017fbc:	61bb      	str	r3, [r7, #24]
 8017fbe:	e7fe      	b.n	8017fbe <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8017fc0:	f001 fc3c 	bl	801983c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fc8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d01f      	beq.n	8018010 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017fd0:	68b9      	ldr	r1, [r7, #8]
 8017fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fd4:	f000 fab0 	bl	8018538 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fda:	1e5a      	subs	r2, r3, #1
 8017fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fde:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe2:	691b      	ldr	r3, [r3, #16]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d00f      	beq.n	8018008 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fea:	3310      	adds	r3, #16
 8017fec:	4618      	mov	r0, r3
 8017fee:	f000 ff1d 	bl	8018e2c <xTaskRemoveFromEventList>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d007      	beq.n	8018008 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017ff8:	4b3c      	ldr	r3, [pc, #240]	; (80180ec <xQueueReceive+0x1b4>)
 8017ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ffe:	601a      	str	r2, [r3, #0]
 8018000:	f3bf 8f4f 	dsb	sy
 8018004:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018008:	f001 fc46 	bl	8019898 <vPortExitCritical>
				return pdPASS;
 801800c:	2301      	movs	r3, #1
 801800e:	e069      	b.n	80180e4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d103      	bne.n	801801e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018016:	f001 fc3f 	bl	8019898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801801a:	2300      	movs	r3, #0
 801801c:	e062      	b.n	80180e4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018020:	2b00      	cmp	r3, #0
 8018022:	d106      	bne.n	8018032 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018024:	f107 0310 	add.w	r3, r7, #16
 8018028:	4618      	mov	r0, r3
 801802a:	f000 ff61 	bl	8018ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801802e:	2301      	movs	r3, #1
 8018030:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018032:	f001 fc31 	bl	8019898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018036:	f000 fcf3 	bl	8018a20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801803a:	f001 fbff 	bl	801983c <vPortEnterCritical>
 801803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018044:	b25b      	sxtb	r3, r3
 8018046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801804a:	d103      	bne.n	8018054 <xQueueReceive+0x11c>
 801804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801804e:	2200      	movs	r2, #0
 8018050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801805a:	b25b      	sxtb	r3, r3
 801805c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018060:	d103      	bne.n	801806a <xQueueReceive+0x132>
 8018062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018064:	2200      	movs	r2, #0
 8018066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801806a:	f001 fc15 	bl	8019898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801806e:	1d3a      	adds	r2, r7, #4
 8018070:	f107 0310 	add.w	r3, r7, #16
 8018074:	4611      	mov	r1, r2
 8018076:	4618      	mov	r0, r3
 8018078:	f000 ff50 	bl	8018f1c <xTaskCheckForTimeOut>
 801807c:	4603      	mov	r3, r0
 801807e:	2b00      	cmp	r3, #0
 8018080:	d123      	bne.n	80180ca <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018084:	f000 fad0 	bl	8018628 <prvIsQueueEmpty>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d017      	beq.n	80180be <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018090:	3324      	adds	r3, #36	; 0x24
 8018092:	687a      	ldr	r2, [r7, #4]
 8018094:	4611      	mov	r1, r2
 8018096:	4618      	mov	r0, r3
 8018098:	f000 fea4 	bl	8018de4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801809c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801809e:	f000 fa71 	bl	8018584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80180a2:	f000 fccb 	bl	8018a3c <xTaskResumeAll>
 80180a6:	4603      	mov	r3, r0
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d189      	bne.n	8017fc0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80180ac:	4b0f      	ldr	r3, [pc, #60]	; (80180ec <xQueueReceive+0x1b4>)
 80180ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180b2:	601a      	str	r2, [r3, #0]
 80180b4:	f3bf 8f4f 	dsb	sy
 80180b8:	f3bf 8f6f 	isb	sy
 80180bc:	e780      	b.n	8017fc0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80180be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180c0:	f000 fa60 	bl	8018584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80180c4:	f000 fcba 	bl	8018a3c <xTaskResumeAll>
 80180c8:	e77a      	b.n	8017fc0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80180ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180cc:	f000 fa5a 	bl	8018584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80180d0:	f000 fcb4 	bl	8018a3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80180d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180d6:	f000 faa7 	bl	8018628 <prvIsQueueEmpty>
 80180da:	4603      	mov	r3, r0
 80180dc:	2b00      	cmp	r3, #0
 80180de:	f43f af6f 	beq.w	8017fc0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80180e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80180e4:	4618      	mov	r0, r3
 80180e6:	3730      	adds	r7, #48	; 0x30
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}
 80180ec:	e000ed04 	.word	0xe000ed04

080180f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b08e      	sub	sp, #56	; 0x38
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80180fa:	2300      	movs	r3, #0
 80180fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018102:	2300      	movs	r3, #0
 8018104:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018108:	2b00      	cmp	r3, #0
 801810a:	d109      	bne.n	8018120 <xQueueSemaphoreTake+0x30>
 801810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018110:	f383 8811 	msr	BASEPRI, r3
 8018114:	f3bf 8f6f 	isb	sy
 8018118:	f3bf 8f4f 	dsb	sy
 801811c:	623b      	str	r3, [r7, #32]
 801811e:	e7fe      	b.n	801811e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018124:	2b00      	cmp	r3, #0
 8018126:	d009      	beq.n	801813c <xQueueSemaphoreTake+0x4c>
 8018128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801812c:	f383 8811 	msr	BASEPRI, r3
 8018130:	f3bf 8f6f 	isb	sy
 8018134:	f3bf 8f4f 	dsb	sy
 8018138:	61fb      	str	r3, [r7, #28]
 801813a:	e7fe      	b.n	801813a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801813c:	f001 f814 	bl	8019168 <xTaskGetSchedulerState>
 8018140:	4603      	mov	r3, r0
 8018142:	2b00      	cmp	r3, #0
 8018144:	d102      	bne.n	801814c <xQueueSemaphoreTake+0x5c>
 8018146:	683b      	ldr	r3, [r7, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d101      	bne.n	8018150 <xQueueSemaphoreTake+0x60>
 801814c:	2301      	movs	r3, #1
 801814e:	e000      	b.n	8018152 <xQueueSemaphoreTake+0x62>
 8018150:	2300      	movs	r3, #0
 8018152:	2b00      	cmp	r3, #0
 8018154:	d109      	bne.n	801816a <xQueueSemaphoreTake+0x7a>
 8018156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801815a:	f383 8811 	msr	BASEPRI, r3
 801815e:	f3bf 8f6f 	isb	sy
 8018162:	f3bf 8f4f 	dsb	sy
 8018166:	61bb      	str	r3, [r7, #24]
 8018168:	e7fe      	b.n	8018168 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801816a:	f001 fb67 	bl	801983c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018172:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8018174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018176:	2b00      	cmp	r3, #0
 8018178:	d024      	beq.n	80181c4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801817c:	1e5a      	subs	r2, r3, #1
 801817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018180:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d104      	bne.n	8018194 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801818a:	f001 f9b3 	bl	80194f4 <pvTaskIncrementMutexHeldCount>
 801818e:	4602      	mov	r2, r0
 8018190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018192:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018196:	691b      	ldr	r3, [r3, #16]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d00f      	beq.n	80181bc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801819e:	3310      	adds	r3, #16
 80181a0:	4618      	mov	r0, r3
 80181a2:	f000 fe43 	bl	8018e2c <xTaskRemoveFromEventList>
 80181a6:	4603      	mov	r3, r0
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d007      	beq.n	80181bc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80181ac:	4b53      	ldr	r3, [pc, #332]	; (80182fc <xQueueSemaphoreTake+0x20c>)
 80181ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181b2:	601a      	str	r2, [r3, #0]
 80181b4:	f3bf 8f4f 	dsb	sy
 80181b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80181bc:	f001 fb6c 	bl	8019898 <vPortExitCritical>
				return pdPASS;
 80181c0:	2301      	movs	r3, #1
 80181c2:	e096      	b.n	80182f2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d110      	bne.n	80181ec <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80181ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d009      	beq.n	80181e4 <xQueueSemaphoreTake+0xf4>
 80181d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181d4:	f383 8811 	msr	BASEPRI, r3
 80181d8:	f3bf 8f6f 	isb	sy
 80181dc:	f3bf 8f4f 	dsb	sy
 80181e0:	617b      	str	r3, [r7, #20]
 80181e2:	e7fe      	b.n	80181e2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80181e4:	f001 fb58 	bl	8019898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80181e8:	2300      	movs	r3, #0
 80181ea:	e082      	b.n	80182f2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80181ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d106      	bne.n	8018200 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80181f2:	f107 030c 	add.w	r3, r7, #12
 80181f6:	4618      	mov	r0, r3
 80181f8:	f000 fe7a 	bl	8018ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80181fc:	2301      	movs	r3, #1
 80181fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018200:	f001 fb4a 	bl	8019898 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018204:	f000 fc0c 	bl	8018a20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018208:	f001 fb18 	bl	801983c <vPortEnterCritical>
 801820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018212:	b25b      	sxtb	r3, r3
 8018214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018218:	d103      	bne.n	8018222 <xQueueSemaphoreTake+0x132>
 801821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801821c:	2200      	movs	r2, #0
 801821e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018228:	b25b      	sxtb	r3, r3
 801822a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801822e:	d103      	bne.n	8018238 <xQueueSemaphoreTake+0x148>
 8018230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018232:	2200      	movs	r2, #0
 8018234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018238:	f001 fb2e 	bl	8019898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801823c:	463a      	mov	r2, r7
 801823e:	f107 030c 	add.w	r3, r7, #12
 8018242:	4611      	mov	r1, r2
 8018244:	4618      	mov	r0, r3
 8018246:	f000 fe69 	bl	8018f1c <xTaskCheckForTimeOut>
 801824a:	4603      	mov	r3, r0
 801824c:	2b00      	cmp	r3, #0
 801824e:	d132      	bne.n	80182b6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018252:	f000 f9e9 	bl	8018628 <prvIsQueueEmpty>
 8018256:	4603      	mov	r3, r0
 8018258:	2b00      	cmp	r3, #0
 801825a:	d026      	beq.n	80182aa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d109      	bne.n	8018278 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8018264:	f001 faea 	bl	801983c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8018268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	4618      	mov	r0, r3
 801826e:	f000 ff99 	bl	80191a4 <xTaskPriorityInherit>
 8018272:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8018274:	f001 fb10 	bl	8019898 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801827a:	3324      	adds	r3, #36	; 0x24
 801827c:	683a      	ldr	r2, [r7, #0]
 801827e:	4611      	mov	r1, r2
 8018280:	4618      	mov	r0, r3
 8018282:	f000 fdaf 	bl	8018de4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018288:	f000 f97c 	bl	8018584 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801828c:	f000 fbd6 	bl	8018a3c <xTaskResumeAll>
 8018290:	4603      	mov	r3, r0
 8018292:	2b00      	cmp	r3, #0
 8018294:	f47f af69 	bne.w	801816a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8018298:	4b18      	ldr	r3, [pc, #96]	; (80182fc <xQueueSemaphoreTake+0x20c>)
 801829a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801829e:	601a      	str	r2, [r3, #0]
 80182a0:	f3bf 8f4f 	dsb	sy
 80182a4:	f3bf 8f6f 	isb	sy
 80182a8:	e75f      	b.n	801816a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80182aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80182ac:	f000 f96a 	bl	8018584 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80182b0:	f000 fbc4 	bl	8018a3c <xTaskResumeAll>
 80182b4:	e759      	b.n	801816a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80182b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80182b8:	f000 f964 	bl	8018584 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80182bc:	f000 fbbe 	bl	8018a3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80182c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80182c2:	f000 f9b1 	bl	8018628 <prvIsQueueEmpty>
 80182c6:	4603      	mov	r3, r0
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	f43f af4e 	beq.w	801816a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80182ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d00d      	beq.n	80182f0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80182d4:	f001 fab2 	bl	801983c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80182d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80182da:	f000 f8ab 	bl	8018434 <prvGetDisinheritPriorityAfterTimeout>
 80182de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80182e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182e2:	685b      	ldr	r3, [r3, #4]
 80182e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80182e6:	4618      	mov	r0, r3
 80182e8:	f001 f866 	bl	80193b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80182ec:	f001 fad4 	bl	8019898 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80182f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3738      	adds	r7, #56	; 0x38
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}
 80182fa:	bf00      	nop
 80182fc:	e000ed04 	.word	0xe000ed04

08018300 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b08e      	sub	sp, #56	; 0x38
 8018304:	af00      	add	r7, sp, #0
 8018306:	60f8      	str	r0, [r7, #12]
 8018308:	60b9      	str	r1, [r7, #8]
 801830a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018312:	2b00      	cmp	r3, #0
 8018314:	d109      	bne.n	801832a <xQueueReceiveFromISR+0x2a>
 8018316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801831a:	f383 8811 	msr	BASEPRI, r3
 801831e:	f3bf 8f6f 	isb	sy
 8018322:	f3bf 8f4f 	dsb	sy
 8018326:	623b      	str	r3, [r7, #32]
 8018328:	e7fe      	b.n	8018328 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801832a:	68bb      	ldr	r3, [r7, #8]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d103      	bne.n	8018338 <xQueueReceiveFromISR+0x38>
 8018330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018334:	2b00      	cmp	r3, #0
 8018336:	d101      	bne.n	801833c <xQueueReceiveFromISR+0x3c>
 8018338:	2301      	movs	r3, #1
 801833a:	e000      	b.n	801833e <xQueueReceiveFromISR+0x3e>
 801833c:	2300      	movs	r3, #0
 801833e:	2b00      	cmp	r3, #0
 8018340:	d109      	bne.n	8018356 <xQueueReceiveFromISR+0x56>
 8018342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018346:	f383 8811 	msr	BASEPRI, r3
 801834a:	f3bf 8f6f 	isb	sy
 801834e:	f3bf 8f4f 	dsb	sy
 8018352:	61fb      	str	r3, [r7, #28]
 8018354:	e7fe      	b.n	8018354 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018356:	f001 fb4d 	bl	80199f4 <vPortValidateInterruptPriority>
	__asm volatile
 801835a:	f3ef 8211 	mrs	r2, BASEPRI
 801835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018362:	f383 8811 	msr	BASEPRI, r3
 8018366:	f3bf 8f6f 	isb	sy
 801836a:	f3bf 8f4f 	dsb	sy
 801836e:	61ba      	str	r2, [r7, #24]
 8018370:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8018372:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018374:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801837a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801837e:	2b00      	cmp	r3, #0
 8018380:	d02f      	beq.n	80183e2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801838c:	68b9      	ldr	r1, [r7, #8]
 801838e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018390:	f000 f8d2 	bl	8018538 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018396:	1e5a      	subs	r2, r3, #1
 8018398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801839a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801839c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80183a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183a4:	d112      	bne.n	80183cc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80183a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a8:	691b      	ldr	r3, [r3, #16]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d016      	beq.n	80183dc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80183ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b0:	3310      	adds	r3, #16
 80183b2:	4618      	mov	r0, r3
 80183b4:	f000 fd3a 	bl	8018e2c <xTaskRemoveFromEventList>
 80183b8:	4603      	mov	r3, r0
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d00e      	beq.n	80183dc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d00b      	beq.n	80183dc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	2201      	movs	r2, #1
 80183c8:	601a      	str	r2, [r3, #0]
 80183ca:	e007      	b.n	80183dc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80183cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183d0:	3301      	adds	r3, #1
 80183d2:	b2db      	uxtb	r3, r3
 80183d4:	b25a      	sxtb	r2, r3
 80183d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80183dc:	2301      	movs	r3, #1
 80183de:	637b      	str	r3, [r7, #52]	; 0x34
 80183e0:	e001      	b.n	80183e6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80183e2:	2300      	movs	r3, #0
 80183e4:	637b      	str	r3, [r7, #52]	; 0x34
 80183e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80183ea:	693b      	ldr	r3, [r7, #16]
 80183ec:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80183f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80183f2:	4618      	mov	r0, r3
 80183f4:	3738      	adds	r7, #56	; 0x38
 80183f6:	46bd      	mov	sp, r7
 80183f8:	bd80      	pop	{r7, pc}

080183fa <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80183fa:	b580      	push	{r7, lr}
 80183fc:	b084      	sub	sp, #16
 80183fe:	af00      	add	r7, sp, #0
 8018400:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d109      	bne.n	8018420 <vQueueDelete+0x26>
	__asm volatile
 801840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018410:	f383 8811 	msr	BASEPRI, r3
 8018414:	f3bf 8f6f 	isb	sy
 8018418:	f3bf 8f4f 	dsb	sy
 801841c:	60bb      	str	r3, [r7, #8]
 801841e:	e7fe      	b.n	801841e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8018420:	68f8      	ldr	r0, [r7, #12]
 8018422:	f000 f92f 	bl	8018684 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8018426:	68f8      	ldr	r0, [r7, #12]
 8018428:	f001 fbe4 	bl	8019bf4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801842c:	bf00      	nop
 801842e:	3710      	adds	r7, #16
 8018430:	46bd      	mov	sp, r7
 8018432:	bd80      	pop	{r7, pc}

08018434 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018434:	b480      	push	{r7}
 8018436:	b085      	sub	sp, #20
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018440:	2b00      	cmp	r3, #0
 8018442:	d006      	beq.n	8018452 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	f1c3 0307 	rsb	r3, r3, #7
 801844e:	60fb      	str	r3, [r7, #12]
 8018450:	e001      	b.n	8018456 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018452:	2300      	movs	r3, #0
 8018454:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018456:	68fb      	ldr	r3, [r7, #12]
	}
 8018458:	4618      	mov	r0, r3
 801845a:	3714      	adds	r7, #20
 801845c:	46bd      	mov	sp, r7
 801845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018462:	4770      	bx	lr

08018464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b086      	sub	sp, #24
 8018468:	af00      	add	r7, sp, #0
 801846a:	60f8      	str	r0, [r7, #12]
 801846c:	60b9      	str	r1, [r7, #8]
 801846e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018470:	2300      	movs	r3, #0
 8018472:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018478:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801847e:	2b00      	cmp	r3, #0
 8018480:	d10d      	bne.n	801849e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d14d      	bne.n	8018526 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	685b      	ldr	r3, [r3, #4]
 801848e:	4618      	mov	r0, r3
 8018490:	f000 ff0e 	bl	80192b0 <xTaskPriorityDisinherit>
 8018494:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	2200      	movs	r2, #0
 801849a:	605a      	str	r2, [r3, #4]
 801849c:	e043      	b.n	8018526 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d119      	bne.n	80184d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	6898      	ldr	r0, [r3, #8]
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184ac:	461a      	mov	r2, r3
 80184ae:	68b9      	ldr	r1, [r7, #8]
 80184b0:	f002 fe36 	bl	801b120 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	689a      	ldr	r2, [r3, #8]
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184bc:	441a      	add	r2, r3
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	689a      	ldr	r2, [r3, #8]
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	429a      	cmp	r2, r3
 80184cc:	d32b      	bcc.n	8018526 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	681a      	ldr	r2, [r3, #0]
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	609a      	str	r2, [r3, #8]
 80184d6:	e026      	b.n	8018526 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	68d8      	ldr	r0, [r3, #12]
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184e0:	461a      	mov	r2, r3
 80184e2:	68b9      	ldr	r1, [r7, #8]
 80184e4:	f002 fe1c 	bl	801b120 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	68da      	ldr	r2, [r3, #12]
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184f0:	425b      	negs	r3, r3
 80184f2:	441a      	add	r2, r3
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	68da      	ldr	r2, [r3, #12]
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	429a      	cmp	r2, r3
 8018502:	d207      	bcs.n	8018514 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	685a      	ldr	r2, [r3, #4]
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801850c:	425b      	negs	r3, r3
 801850e:	441a      	add	r2, r3
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	2b02      	cmp	r3, #2
 8018518:	d105      	bne.n	8018526 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801851a:	693b      	ldr	r3, [r7, #16]
 801851c:	2b00      	cmp	r3, #0
 801851e:	d002      	beq.n	8018526 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018520:	693b      	ldr	r3, [r7, #16]
 8018522:	3b01      	subs	r3, #1
 8018524:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018526:	693b      	ldr	r3, [r7, #16]
 8018528:	1c5a      	adds	r2, r3, #1
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801852e:	697b      	ldr	r3, [r7, #20]
}
 8018530:	4618      	mov	r0, r3
 8018532:	3718      	adds	r7, #24
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}

08018538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b082      	sub	sp, #8
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018546:	2b00      	cmp	r3, #0
 8018548:	d018      	beq.n	801857c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	68da      	ldr	r2, [r3, #12]
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018552:	441a      	add	r2, r3
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	68da      	ldr	r2, [r3, #12]
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	685b      	ldr	r3, [r3, #4]
 8018560:	429a      	cmp	r2, r3
 8018562:	d303      	bcc.n	801856c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681a      	ldr	r2, [r3, #0]
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	68d9      	ldr	r1, [r3, #12]
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018574:	461a      	mov	r2, r3
 8018576:	6838      	ldr	r0, [r7, #0]
 8018578:	f002 fdd2 	bl	801b120 <memcpy>
	}
}
 801857c:	bf00      	nop
 801857e:	3708      	adds	r7, #8
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}

08018584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b084      	sub	sp, #16
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801858c:	f001 f956 	bl	801983c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018596:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018598:	e011      	b.n	80185be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d012      	beq.n	80185c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	3324      	adds	r3, #36	; 0x24
 80185a6:	4618      	mov	r0, r3
 80185a8:	f000 fc40 	bl	8018e2c <xTaskRemoveFromEventList>
 80185ac:	4603      	mov	r3, r0
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d001      	beq.n	80185b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80185b2:	f000 fd13 	bl	8018fdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80185b6:	7bfb      	ldrb	r3, [r7, #15]
 80185b8:	3b01      	subs	r3, #1
 80185ba:	b2db      	uxtb	r3, r3
 80185bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80185be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	dce9      	bgt.n	801859a <prvUnlockQueue+0x16>
 80185c6:	e000      	b.n	80185ca <prvUnlockQueue+0x46>
					break;
 80185c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	22ff      	movs	r2, #255	; 0xff
 80185ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80185d2:	f001 f961 	bl	8019898 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80185d6:	f001 f931 	bl	801983c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80185e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80185e2:	e011      	b.n	8018608 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	691b      	ldr	r3, [r3, #16]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d012      	beq.n	8018612 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	3310      	adds	r3, #16
 80185f0:	4618      	mov	r0, r3
 80185f2:	f000 fc1b 	bl	8018e2c <xTaskRemoveFromEventList>
 80185f6:	4603      	mov	r3, r0
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d001      	beq.n	8018600 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80185fc:	f000 fcee 	bl	8018fdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018600:	7bbb      	ldrb	r3, [r7, #14]
 8018602:	3b01      	subs	r3, #1
 8018604:	b2db      	uxtb	r3, r3
 8018606:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801860c:	2b00      	cmp	r3, #0
 801860e:	dce9      	bgt.n	80185e4 <prvUnlockQueue+0x60>
 8018610:	e000      	b.n	8018614 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018612:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	22ff      	movs	r2, #255	; 0xff
 8018618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801861c:	f001 f93c 	bl	8019898 <vPortExitCritical>
}
 8018620:	bf00      	nop
 8018622:	3710      	adds	r7, #16
 8018624:	46bd      	mov	sp, r7
 8018626:	bd80      	pop	{r7, pc}

08018628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b084      	sub	sp, #16
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018630:	f001 f904 	bl	801983c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018638:	2b00      	cmp	r3, #0
 801863a:	d102      	bne.n	8018642 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801863c:	2301      	movs	r3, #1
 801863e:	60fb      	str	r3, [r7, #12]
 8018640:	e001      	b.n	8018646 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018642:	2300      	movs	r3, #0
 8018644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018646:	f001 f927 	bl	8019898 <vPortExitCritical>

	return xReturn;
 801864a:	68fb      	ldr	r3, [r7, #12]
}
 801864c:	4618      	mov	r0, r3
 801864e:	3710      	adds	r7, #16
 8018650:	46bd      	mov	sp, r7
 8018652:	bd80      	pop	{r7, pc}

08018654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018654:	b580      	push	{r7, lr}
 8018656:	b084      	sub	sp, #16
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801865c:	f001 f8ee 	bl	801983c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018668:	429a      	cmp	r2, r3
 801866a:	d102      	bne.n	8018672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801866c:	2301      	movs	r3, #1
 801866e:	60fb      	str	r3, [r7, #12]
 8018670:	e001      	b.n	8018676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018672:	2300      	movs	r3, #0
 8018674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018676:	f001 f90f 	bl	8019898 <vPortExitCritical>

	return xReturn;
 801867a:	68fb      	ldr	r3, [r7, #12]
}
 801867c:	4618      	mov	r0, r3
 801867e:	3710      	adds	r7, #16
 8018680:	46bd      	mov	sp, r7
 8018682:	bd80      	pop	{r7, pc}

08018684 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8018684:	b480      	push	{r7}
 8018686:	b085      	sub	sp, #20
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801868c:	2300      	movs	r3, #0
 801868e:	60fb      	str	r3, [r7, #12]
 8018690:	e016      	b.n	80186c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8018692:	4a10      	ldr	r2, [pc, #64]	; (80186d4 <vQueueUnregisterQueue+0x50>)
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	00db      	lsls	r3, r3, #3
 8018698:	4413      	add	r3, r2
 801869a:	685b      	ldr	r3, [r3, #4]
 801869c:	687a      	ldr	r2, [r7, #4]
 801869e:	429a      	cmp	r2, r3
 80186a0:	d10b      	bne.n	80186ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80186a2:	4a0c      	ldr	r2, [pc, #48]	; (80186d4 <vQueueUnregisterQueue+0x50>)
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	2100      	movs	r1, #0
 80186a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80186ac:	4a09      	ldr	r2, [pc, #36]	; (80186d4 <vQueueUnregisterQueue+0x50>)
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	00db      	lsls	r3, r3, #3
 80186b2:	4413      	add	r3, r2
 80186b4:	2200      	movs	r2, #0
 80186b6:	605a      	str	r2, [r3, #4]
				break;
 80186b8:	e005      	b.n	80186c6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	3301      	adds	r3, #1
 80186be:	60fb      	str	r3, [r7, #12]
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	2b07      	cmp	r3, #7
 80186c4:	d9e5      	bls.n	8018692 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80186c6:	bf00      	nop
 80186c8:	3714      	adds	r7, #20
 80186ca:	46bd      	mov	sp, r7
 80186cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d0:	4770      	bx	lr
 80186d2:	bf00      	nop
 80186d4:	2001023c 	.word	0x2001023c

080186d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b08c      	sub	sp, #48	; 0x30
 80186dc:	af04      	add	r7, sp, #16
 80186de:	60f8      	str	r0, [r7, #12]
 80186e0:	60b9      	str	r1, [r7, #8]
 80186e2:	603b      	str	r3, [r7, #0]
 80186e4:	4613      	mov	r3, r2
 80186e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186e8:	88fb      	ldrh	r3, [r7, #6]
 80186ea:	009b      	lsls	r3, r3, #2
 80186ec:	4618      	mov	r0, r3
 80186ee:	f001 f9bf 	bl	8019a70 <pvPortMalloc>
 80186f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80186f4:	697b      	ldr	r3, [r7, #20]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d00e      	beq.n	8018718 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80186fa:	2054      	movs	r0, #84	; 0x54
 80186fc:	f001 f9b8 	bl	8019a70 <pvPortMalloc>
 8018700:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018702:	69fb      	ldr	r3, [r7, #28]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d003      	beq.n	8018710 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018708:	69fb      	ldr	r3, [r7, #28]
 801870a:	697a      	ldr	r2, [r7, #20]
 801870c:	631a      	str	r2, [r3, #48]	; 0x30
 801870e:	e005      	b.n	801871c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018710:	6978      	ldr	r0, [r7, #20]
 8018712:	f001 fa6f 	bl	8019bf4 <vPortFree>
 8018716:	e001      	b.n	801871c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018718:	2300      	movs	r3, #0
 801871a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801871c:	69fb      	ldr	r3, [r7, #28]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d013      	beq.n	801874a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018722:	88fa      	ldrh	r2, [r7, #6]
 8018724:	2300      	movs	r3, #0
 8018726:	9303      	str	r3, [sp, #12]
 8018728:	69fb      	ldr	r3, [r7, #28]
 801872a:	9302      	str	r3, [sp, #8]
 801872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801872e:	9301      	str	r3, [sp, #4]
 8018730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018732:	9300      	str	r3, [sp, #0]
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	68b9      	ldr	r1, [r7, #8]
 8018738:	68f8      	ldr	r0, [r7, #12]
 801873a:	f000 f80e 	bl	801875a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801873e:	69f8      	ldr	r0, [r7, #28]
 8018740:	f000 f88a 	bl	8018858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018744:	2301      	movs	r3, #1
 8018746:	61bb      	str	r3, [r7, #24]
 8018748:	e002      	b.n	8018750 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801874a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801874e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018750:	69bb      	ldr	r3, [r7, #24]
	}
 8018752:	4618      	mov	r0, r3
 8018754:	3720      	adds	r7, #32
 8018756:	46bd      	mov	sp, r7
 8018758:	bd80      	pop	{r7, pc}

0801875a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801875a:	b580      	push	{r7, lr}
 801875c:	b088      	sub	sp, #32
 801875e:	af00      	add	r7, sp, #0
 8018760:	60f8      	str	r0, [r7, #12]
 8018762:	60b9      	str	r1, [r7, #8]
 8018764:	607a      	str	r2, [r7, #4]
 8018766:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8018768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801876a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018772:	3b01      	subs	r3, #1
 8018774:	009b      	lsls	r3, r3, #2
 8018776:	4413      	add	r3, r2
 8018778:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801877a:	69bb      	ldr	r3, [r7, #24]
 801877c:	f023 0307 	bic.w	r3, r3, #7
 8018780:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018782:	69bb      	ldr	r3, [r7, #24]
 8018784:	f003 0307 	and.w	r3, r3, #7
 8018788:	2b00      	cmp	r3, #0
 801878a:	d009      	beq.n	80187a0 <prvInitialiseNewTask+0x46>
 801878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018790:	f383 8811 	msr	BASEPRI, r3
 8018794:	f3bf 8f6f 	isb	sy
 8018798:	f3bf 8f4f 	dsb	sy
 801879c:	617b      	str	r3, [r7, #20]
 801879e:	e7fe      	b.n	801879e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80187a0:	2300      	movs	r3, #0
 80187a2:	61fb      	str	r3, [r7, #28]
 80187a4:	e012      	b.n	80187cc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80187a6:	68ba      	ldr	r2, [r7, #8]
 80187a8:	69fb      	ldr	r3, [r7, #28]
 80187aa:	4413      	add	r3, r2
 80187ac:	7819      	ldrb	r1, [r3, #0]
 80187ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187b0:	69fb      	ldr	r3, [r7, #28]
 80187b2:	4413      	add	r3, r2
 80187b4:	3334      	adds	r3, #52	; 0x34
 80187b6:	460a      	mov	r2, r1
 80187b8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80187ba:	68ba      	ldr	r2, [r7, #8]
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	4413      	add	r3, r2
 80187c0:	781b      	ldrb	r3, [r3, #0]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d006      	beq.n	80187d4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80187c6:	69fb      	ldr	r3, [r7, #28]
 80187c8:	3301      	adds	r3, #1
 80187ca:	61fb      	str	r3, [r7, #28]
 80187cc:	69fb      	ldr	r3, [r7, #28]
 80187ce:	2b0f      	cmp	r3, #15
 80187d0:	d9e9      	bls.n	80187a6 <prvInitialiseNewTask+0x4c>
 80187d2:	e000      	b.n	80187d6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80187d4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80187d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d8:	2200      	movs	r2, #0
 80187da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80187de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e0:	2b06      	cmp	r3, #6
 80187e2:	d901      	bls.n	80187e8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80187e4:	2306      	movs	r3, #6
 80187e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80187e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80187ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80187f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f6:	2200      	movs	r2, #0
 80187f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80187fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fc:	3304      	adds	r3, #4
 80187fe:	4618      	mov	r0, r3
 8018800:	f7fe fffb 	bl	80177fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018806:	3318      	adds	r3, #24
 8018808:	4618      	mov	r0, r3
 801880a:	f7fe fff6 	bl	80177fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018816:	f1c3 0207 	rsb	r2, r3, #7
 801881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801881c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018822:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018826:	2200      	movs	r2, #0
 8018828:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801882c:	2200      	movs	r2, #0
 801882e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018832:	683a      	ldr	r2, [r7, #0]
 8018834:	68f9      	ldr	r1, [r7, #12]
 8018836:	69b8      	ldr	r0, [r7, #24]
 8018838:	f000 fed6 	bl	80195e8 <pxPortInitialiseStack>
 801883c:	4602      	mov	r2, r0
 801883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018840:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8018842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018844:	2b00      	cmp	r3, #0
 8018846:	d002      	beq.n	801884e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801884c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801884e:	bf00      	nop
 8018850:	3720      	adds	r7, #32
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}
	...

08018858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018860:	f000 ffec 	bl	801983c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018864:	4b2a      	ldr	r3, [pc, #168]	; (8018910 <prvAddNewTaskToReadyList+0xb8>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	3301      	adds	r3, #1
 801886a:	4a29      	ldr	r2, [pc, #164]	; (8018910 <prvAddNewTaskToReadyList+0xb8>)
 801886c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801886e:	4b29      	ldr	r3, [pc, #164]	; (8018914 <prvAddNewTaskToReadyList+0xbc>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d109      	bne.n	801888a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018876:	4a27      	ldr	r2, [pc, #156]	; (8018914 <prvAddNewTaskToReadyList+0xbc>)
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801887c:	4b24      	ldr	r3, [pc, #144]	; (8018910 <prvAddNewTaskToReadyList+0xb8>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	2b01      	cmp	r3, #1
 8018882:	d110      	bne.n	80188a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018884:	f000 fbce 	bl	8019024 <prvInitialiseTaskLists>
 8018888:	e00d      	b.n	80188a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801888a:	4b23      	ldr	r3, [pc, #140]	; (8018918 <prvAddNewTaskToReadyList+0xc0>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d109      	bne.n	80188a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018892:	4b20      	ldr	r3, [pc, #128]	; (8018914 <prvAddNewTaskToReadyList+0xbc>)
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801889c:	429a      	cmp	r2, r3
 801889e:	d802      	bhi.n	80188a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80188a0:	4a1c      	ldr	r2, [pc, #112]	; (8018914 <prvAddNewTaskToReadyList+0xbc>)
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80188a6:	4b1d      	ldr	r3, [pc, #116]	; (801891c <prvAddNewTaskToReadyList+0xc4>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	3301      	adds	r3, #1
 80188ac:	4a1b      	ldr	r2, [pc, #108]	; (801891c <prvAddNewTaskToReadyList+0xc4>)
 80188ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188b4:	2201      	movs	r2, #1
 80188b6:	409a      	lsls	r2, r3
 80188b8:	4b19      	ldr	r3, [pc, #100]	; (8018920 <prvAddNewTaskToReadyList+0xc8>)
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	4313      	orrs	r3, r2
 80188be:	4a18      	ldr	r2, [pc, #96]	; (8018920 <prvAddNewTaskToReadyList+0xc8>)
 80188c0:	6013      	str	r3, [r2, #0]
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188c6:	4613      	mov	r3, r2
 80188c8:	009b      	lsls	r3, r3, #2
 80188ca:	4413      	add	r3, r2
 80188cc:	009b      	lsls	r3, r3, #2
 80188ce:	4a15      	ldr	r2, [pc, #84]	; (8018924 <prvAddNewTaskToReadyList+0xcc>)
 80188d0:	441a      	add	r2, r3
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	3304      	adds	r3, #4
 80188d6:	4619      	mov	r1, r3
 80188d8:	4610      	mov	r0, r2
 80188da:	f7fe ff9b 	bl	8017814 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80188de:	f000 ffdb 	bl	8019898 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80188e2:	4b0d      	ldr	r3, [pc, #52]	; (8018918 <prvAddNewTaskToReadyList+0xc0>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d00e      	beq.n	8018908 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80188ea:	4b0a      	ldr	r3, [pc, #40]	; (8018914 <prvAddNewTaskToReadyList+0xbc>)
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188f4:	429a      	cmp	r2, r3
 80188f6:	d207      	bcs.n	8018908 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80188f8:	4b0b      	ldr	r3, [pc, #44]	; (8018928 <prvAddNewTaskToReadyList+0xd0>)
 80188fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80188fe:	601a      	str	r2, [r3, #0]
 8018900:	f3bf 8f4f 	dsb	sy
 8018904:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018908:	bf00      	nop
 801890a:	3708      	adds	r7, #8
 801890c:	46bd      	mov	sp, r7
 801890e:	bd80      	pop	{r7, pc}
 8018910:	2000c43c 	.word	0x2000c43c
 8018914:	2000c33c 	.word	0x2000c33c
 8018918:	2000c448 	.word	0x2000c448
 801891c:	2000c458 	.word	0x2000c458
 8018920:	2000c444 	.word	0x2000c444
 8018924:	2000c340 	.word	0x2000c340
 8018928:	e000ed04 	.word	0xe000ed04

0801892c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801892c:	b580      	push	{r7, lr}
 801892e:	b084      	sub	sp, #16
 8018930:	af00      	add	r7, sp, #0
 8018932:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018934:	2300      	movs	r3, #0
 8018936:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d016      	beq.n	801896c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801893e:	4b13      	ldr	r3, [pc, #76]	; (801898c <vTaskDelay+0x60>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d009      	beq.n	801895a <vTaskDelay+0x2e>
 8018946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801894a:	f383 8811 	msr	BASEPRI, r3
 801894e:	f3bf 8f6f 	isb	sy
 8018952:	f3bf 8f4f 	dsb	sy
 8018956:	60bb      	str	r3, [r7, #8]
 8018958:	e7fe      	b.n	8018958 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801895a:	f000 f861 	bl	8018a20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801895e:	2100      	movs	r1, #0
 8018960:	6878      	ldr	r0, [r7, #4]
 8018962:	f000 fddb 	bl	801951c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018966:	f000 f869 	bl	8018a3c <xTaskResumeAll>
 801896a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d107      	bne.n	8018982 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8018972:	4b07      	ldr	r3, [pc, #28]	; (8018990 <vTaskDelay+0x64>)
 8018974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018978:	601a      	str	r2, [r3, #0]
 801897a:	f3bf 8f4f 	dsb	sy
 801897e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018982:	bf00      	nop
 8018984:	3710      	adds	r7, #16
 8018986:	46bd      	mov	sp, r7
 8018988:	bd80      	pop	{r7, pc}
 801898a:	bf00      	nop
 801898c:	2000c464 	.word	0x2000c464
 8018990:	e000ed04 	.word	0xe000ed04

08018994 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b086      	sub	sp, #24
 8018998:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801899a:	4b1b      	ldr	r3, [pc, #108]	; (8018a08 <vTaskStartScheduler+0x74>)
 801899c:	9301      	str	r3, [sp, #4]
 801899e:	2300      	movs	r3, #0
 80189a0:	9300      	str	r3, [sp, #0]
 80189a2:	2300      	movs	r3, #0
 80189a4:	2280      	movs	r2, #128	; 0x80
 80189a6:	4919      	ldr	r1, [pc, #100]	; (8018a0c <vTaskStartScheduler+0x78>)
 80189a8:	4819      	ldr	r0, [pc, #100]	; (8018a10 <vTaskStartScheduler+0x7c>)
 80189aa:	f7ff fe95 	bl	80186d8 <xTaskCreate>
 80189ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	2b01      	cmp	r3, #1
 80189b4:	d115      	bne.n	80189e2 <vTaskStartScheduler+0x4e>
 80189b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ba:	f383 8811 	msr	BASEPRI, r3
 80189be:	f3bf 8f6f 	isb	sy
 80189c2:	f3bf 8f4f 	dsb	sy
 80189c6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80189c8:	4b12      	ldr	r3, [pc, #72]	; (8018a14 <vTaskStartScheduler+0x80>)
 80189ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80189ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80189d0:	4b11      	ldr	r3, [pc, #68]	; (8018a18 <vTaskStartScheduler+0x84>)
 80189d2:	2201      	movs	r2, #1
 80189d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80189d6:	4b11      	ldr	r3, [pc, #68]	; (8018a1c <vTaskStartScheduler+0x88>)
 80189d8:	2200      	movs	r2, #0
 80189da:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80189dc:	f000 fe90 	bl	8019700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80189e0:	e00d      	b.n	80189fe <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80189e8:	d109      	bne.n	80189fe <vTaskStartScheduler+0x6a>
 80189ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ee:	f383 8811 	msr	BASEPRI, r3
 80189f2:	f3bf 8f6f 	isb	sy
 80189f6:	f3bf 8f4f 	dsb	sy
 80189fa:	607b      	str	r3, [r7, #4]
 80189fc:	e7fe      	b.n	80189fc <vTaskStartScheduler+0x68>
}
 80189fe:	bf00      	nop
 8018a00:	3710      	adds	r7, #16
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}
 8018a06:	bf00      	nop
 8018a08:	2000c460 	.word	0x2000c460
 8018a0c:	0801d428 	.word	0x0801d428
 8018a10:	08018ff5 	.word	0x08018ff5
 8018a14:	2000c45c 	.word	0x2000c45c
 8018a18:	2000c448 	.word	0x2000c448
 8018a1c:	2000c440 	.word	0x2000c440

08018a20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018a20:	b480      	push	{r7}
 8018a22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8018a24:	4b04      	ldr	r3, [pc, #16]	; (8018a38 <vTaskSuspendAll+0x18>)
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	3301      	adds	r3, #1
 8018a2a:	4a03      	ldr	r2, [pc, #12]	; (8018a38 <vTaskSuspendAll+0x18>)
 8018a2c:	6013      	str	r3, [r2, #0]
}
 8018a2e:	bf00      	nop
 8018a30:	46bd      	mov	sp, r7
 8018a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a36:	4770      	bx	lr
 8018a38:	2000c464 	.word	0x2000c464

08018a3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b084      	sub	sp, #16
 8018a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018a42:	2300      	movs	r3, #0
 8018a44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018a46:	2300      	movs	r3, #0
 8018a48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018a4a:	4b41      	ldr	r3, [pc, #260]	; (8018b50 <xTaskResumeAll+0x114>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d109      	bne.n	8018a66 <xTaskResumeAll+0x2a>
 8018a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a56:	f383 8811 	msr	BASEPRI, r3
 8018a5a:	f3bf 8f6f 	isb	sy
 8018a5e:	f3bf 8f4f 	dsb	sy
 8018a62:	603b      	str	r3, [r7, #0]
 8018a64:	e7fe      	b.n	8018a64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018a66:	f000 fee9 	bl	801983c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018a6a:	4b39      	ldr	r3, [pc, #228]	; (8018b50 <xTaskResumeAll+0x114>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	3b01      	subs	r3, #1
 8018a70:	4a37      	ldr	r2, [pc, #220]	; (8018b50 <xTaskResumeAll+0x114>)
 8018a72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018a74:	4b36      	ldr	r3, [pc, #216]	; (8018b50 <xTaskResumeAll+0x114>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d161      	bne.n	8018b40 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018a7c:	4b35      	ldr	r3, [pc, #212]	; (8018b54 <xTaskResumeAll+0x118>)
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d05d      	beq.n	8018b40 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018a84:	e02e      	b.n	8018ae4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8018a86:	4b34      	ldr	r3, [pc, #208]	; (8018b58 <xTaskResumeAll+0x11c>)
 8018a88:	68db      	ldr	r3, [r3, #12]
 8018a8a:	68db      	ldr	r3, [r3, #12]
 8018a8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	3318      	adds	r3, #24
 8018a92:	4618      	mov	r0, r3
 8018a94:	f7fe ff1b 	bl	80178ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	3304      	adds	r3, #4
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7fe ff16 	bl	80178ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aa6:	2201      	movs	r2, #1
 8018aa8:	409a      	lsls	r2, r3
 8018aaa:	4b2c      	ldr	r3, [pc, #176]	; (8018b5c <xTaskResumeAll+0x120>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	4313      	orrs	r3, r2
 8018ab0:	4a2a      	ldr	r2, [pc, #168]	; (8018b5c <xTaskResumeAll+0x120>)
 8018ab2:	6013      	str	r3, [r2, #0]
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ab8:	4613      	mov	r3, r2
 8018aba:	009b      	lsls	r3, r3, #2
 8018abc:	4413      	add	r3, r2
 8018abe:	009b      	lsls	r3, r3, #2
 8018ac0:	4a27      	ldr	r2, [pc, #156]	; (8018b60 <xTaskResumeAll+0x124>)
 8018ac2:	441a      	add	r2, r3
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	3304      	adds	r3, #4
 8018ac8:	4619      	mov	r1, r3
 8018aca:	4610      	mov	r0, r2
 8018acc:	f7fe fea2 	bl	8017814 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ad4:	4b23      	ldr	r3, [pc, #140]	; (8018b64 <xTaskResumeAll+0x128>)
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ada:	429a      	cmp	r2, r3
 8018adc:	d302      	bcc.n	8018ae4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8018ade:	4b22      	ldr	r3, [pc, #136]	; (8018b68 <xTaskResumeAll+0x12c>)
 8018ae0:	2201      	movs	r2, #1
 8018ae2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018ae4:	4b1c      	ldr	r3, [pc, #112]	; (8018b58 <xTaskResumeAll+0x11c>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d1cc      	bne.n	8018a86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d001      	beq.n	8018af6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018af2:	f000 fb13 	bl	801911c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8018af6:	4b1d      	ldr	r3, [pc, #116]	; (8018b6c <xTaskResumeAll+0x130>)
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d010      	beq.n	8018b24 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018b02:	f000 f859 	bl	8018bb8 <xTaskIncrementTick>
 8018b06:	4603      	mov	r3, r0
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d002      	beq.n	8018b12 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8018b0c:	4b16      	ldr	r3, [pc, #88]	; (8018b68 <xTaskResumeAll+0x12c>)
 8018b0e:	2201      	movs	r2, #1
 8018b10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	3b01      	subs	r3, #1
 8018b16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d1f1      	bne.n	8018b02 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8018b1e:	4b13      	ldr	r3, [pc, #76]	; (8018b6c <xTaskResumeAll+0x130>)
 8018b20:	2200      	movs	r2, #0
 8018b22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018b24:	4b10      	ldr	r3, [pc, #64]	; (8018b68 <xTaskResumeAll+0x12c>)
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d009      	beq.n	8018b40 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018b2c:	2301      	movs	r3, #1
 8018b2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018b30:	4b0f      	ldr	r3, [pc, #60]	; (8018b70 <xTaskResumeAll+0x134>)
 8018b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b36:	601a      	str	r2, [r3, #0]
 8018b38:	f3bf 8f4f 	dsb	sy
 8018b3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018b40:	f000 feaa 	bl	8019898 <vPortExitCritical>

	return xAlreadyYielded;
 8018b44:	68bb      	ldr	r3, [r7, #8]
}
 8018b46:	4618      	mov	r0, r3
 8018b48:	3710      	adds	r7, #16
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bd80      	pop	{r7, pc}
 8018b4e:	bf00      	nop
 8018b50:	2000c464 	.word	0x2000c464
 8018b54:	2000c43c 	.word	0x2000c43c
 8018b58:	2000c3fc 	.word	0x2000c3fc
 8018b5c:	2000c444 	.word	0x2000c444
 8018b60:	2000c340 	.word	0x2000c340
 8018b64:	2000c33c 	.word	0x2000c33c
 8018b68:	2000c450 	.word	0x2000c450
 8018b6c:	2000c44c 	.word	0x2000c44c
 8018b70:	e000ed04 	.word	0xe000ed04

08018b74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018b74:	b480      	push	{r7}
 8018b76:	b083      	sub	sp, #12
 8018b78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018b7a:	4b05      	ldr	r3, [pc, #20]	; (8018b90 <xTaskGetTickCount+0x1c>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018b80:	687b      	ldr	r3, [r7, #4]
}
 8018b82:	4618      	mov	r0, r3
 8018b84:	370c      	adds	r7, #12
 8018b86:	46bd      	mov	sp, r7
 8018b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8c:	4770      	bx	lr
 8018b8e:	bf00      	nop
 8018b90:	2000c440 	.word	0x2000c440

08018b94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018b9a:	f000 ff2b 	bl	80199f4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018ba2:	4b04      	ldr	r3, [pc, #16]	; (8018bb4 <xTaskGetTickCountFromISR+0x20>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018ba8:	683b      	ldr	r3, [r7, #0]
}
 8018baa:	4618      	mov	r0, r3
 8018bac:	3708      	adds	r7, #8
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	bd80      	pop	{r7, pc}
 8018bb2:	bf00      	nop
 8018bb4:	2000c440 	.word	0x2000c440

08018bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b086      	sub	sp, #24
 8018bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018bc2:	4b50      	ldr	r3, [pc, #320]	; (8018d04 <xTaskIncrementTick+0x14c>)
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	f040 808c 	bne.w	8018ce4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018bcc:	4b4e      	ldr	r3, [pc, #312]	; (8018d08 <xTaskIncrementTick+0x150>)
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	3301      	adds	r3, #1
 8018bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018bd4:	4a4c      	ldr	r2, [pc, #304]	; (8018d08 <xTaskIncrementTick+0x150>)
 8018bd6:	693b      	ldr	r3, [r7, #16]
 8018bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018bda:	693b      	ldr	r3, [r7, #16]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d11f      	bne.n	8018c20 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8018be0:	4b4a      	ldr	r3, [pc, #296]	; (8018d0c <xTaskIncrementTick+0x154>)
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d009      	beq.n	8018bfe <xTaskIncrementTick+0x46>
 8018bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bee:	f383 8811 	msr	BASEPRI, r3
 8018bf2:	f3bf 8f6f 	isb	sy
 8018bf6:	f3bf 8f4f 	dsb	sy
 8018bfa:	603b      	str	r3, [r7, #0]
 8018bfc:	e7fe      	b.n	8018bfc <xTaskIncrementTick+0x44>
 8018bfe:	4b43      	ldr	r3, [pc, #268]	; (8018d0c <xTaskIncrementTick+0x154>)
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	60fb      	str	r3, [r7, #12]
 8018c04:	4b42      	ldr	r3, [pc, #264]	; (8018d10 <xTaskIncrementTick+0x158>)
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	4a40      	ldr	r2, [pc, #256]	; (8018d0c <xTaskIncrementTick+0x154>)
 8018c0a:	6013      	str	r3, [r2, #0]
 8018c0c:	4a40      	ldr	r2, [pc, #256]	; (8018d10 <xTaskIncrementTick+0x158>)
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	6013      	str	r3, [r2, #0]
 8018c12:	4b40      	ldr	r3, [pc, #256]	; (8018d14 <xTaskIncrementTick+0x15c>)
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	3301      	adds	r3, #1
 8018c18:	4a3e      	ldr	r2, [pc, #248]	; (8018d14 <xTaskIncrementTick+0x15c>)
 8018c1a:	6013      	str	r3, [r2, #0]
 8018c1c:	f000 fa7e 	bl	801911c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018c20:	4b3d      	ldr	r3, [pc, #244]	; (8018d18 <xTaskIncrementTick+0x160>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	693a      	ldr	r2, [r7, #16]
 8018c26:	429a      	cmp	r2, r3
 8018c28:	d34d      	bcc.n	8018cc6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018c2a:	4b38      	ldr	r3, [pc, #224]	; (8018d0c <xTaskIncrementTick+0x154>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d101      	bne.n	8018c38 <xTaskIncrementTick+0x80>
 8018c34:	2301      	movs	r3, #1
 8018c36:	e000      	b.n	8018c3a <xTaskIncrementTick+0x82>
 8018c38:	2300      	movs	r3, #0
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d004      	beq.n	8018c48 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c3e:	4b36      	ldr	r3, [pc, #216]	; (8018d18 <xTaskIncrementTick+0x160>)
 8018c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018c44:	601a      	str	r2, [r3, #0]
					break;
 8018c46:	e03e      	b.n	8018cc6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8018c48:	4b30      	ldr	r3, [pc, #192]	; (8018d0c <xTaskIncrementTick+0x154>)
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	68db      	ldr	r3, [r3, #12]
 8018c4e:	68db      	ldr	r3, [r3, #12]
 8018c50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018c52:	68bb      	ldr	r3, [r7, #8]
 8018c54:	685b      	ldr	r3, [r3, #4]
 8018c56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018c58:	693a      	ldr	r2, [r7, #16]
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d203      	bcs.n	8018c68 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018c60:	4a2d      	ldr	r2, [pc, #180]	; (8018d18 <xTaskIncrementTick+0x160>)
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	6013      	str	r3, [r2, #0]
						break;
 8018c66:	e02e      	b.n	8018cc6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018c68:	68bb      	ldr	r3, [r7, #8]
 8018c6a:	3304      	adds	r3, #4
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f7fe fe2e 	bl	80178ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018c72:	68bb      	ldr	r3, [r7, #8]
 8018c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d004      	beq.n	8018c84 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018c7a:	68bb      	ldr	r3, [r7, #8]
 8018c7c:	3318      	adds	r3, #24
 8018c7e:	4618      	mov	r0, r3
 8018c80:	f7fe fe25 	bl	80178ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018c84:	68bb      	ldr	r3, [r7, #8]
 8018c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c88:	2201      	movs	r2, #1
 8018c8a:	409a      	lsls	r2, r3
 8018c8c:	4b23      	ldr	r3, [pc, #140]	; (8018d1c <xTaskIncrementTick+0x164>)
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	4313      	orrs	r3, r2
 8018c92:	4a22      	ldr	r2, [pc, #136]	; (8018d1c <xTaskIncrementTick+0x164>)
 8018c94:	6013      	str	r3, [r2, #0]
 8018c96:	68bb      	ldr	r3, [r7, #8]
 8018c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c9a:	4613      	mov	r3, r2
 8018c9c:	009b      	lsls	r3, r3, #2
 8018c9e:	4413      	add	r3, r2
 8018ca0:	009b      	lsls	r3, r3, #2
 8018ca2:	4a1f      	ldr	r2, [pc, #124]	; (8018d20 <xTaskIncrementTick+0x168>)
 8018ca4:	441a      	add	r2, r3
 8018ca6:	68bb      	ldr	r3, [r7, #8]
 8018ca8:	3304      	adds	r3, #4
 8018caa:	4619      	mov	r1, r3
 8018cac:	4610      	mov	r0, r2
 8018cae:	f7fe fdb1 	bl	8017814 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018cb2:	68bb      	ldr	r3, [r7, #8]
 8018cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cb6:	4b1b      	ldr	r3, [pc, #108]	; (8018d24 <xTaskIncrementTick+0x16c>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	d3b4      	bcc.n	8018c2a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018cc4:	e7b1      	b.n	8018c2a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018cc6:	4b17      	ldr	r3, [pc, #92]	; (8018d24 <xTaskIncrementTick+0x16c>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ccc:	4914      	ldr	r1, [pc, #80]	; (8018d20 <xTaskIncrementTick+0x168>)
 8018cce:	4613      	mov	r3, r2
 8018cd0:	009b      	lsls	r3, r3, #2
 8018cd2:	4413      	add	r3, r2
 8018cd4:	009b      	lsls	r3, r3, #2
 8018cd6:	440b      	add	r3, r1
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	2b01      	cmp	r3, #1
 8018cdc:	d907      	bls.n	8018cee <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8018cde:	2301      	movs	r3, #1
 8018ce0:	617b      	str	r3, [r7, #20]
 8018ce2:	e004      	b.n	8018cee <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018ce4:	4b10      	ldr	r3, [pc, #64]	; (8018d28 <xTaskIncrementTick+0x170>)
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	3301      	adds	r3, #1
 8018cea:	4a0f      	ldr	r2, [pc, #60]	; (8018d28 <xTaskIncrementTick+0x170>)
 8018cec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8018cee:	4b0f      	ldr	r3, [pc, #60]	; (8018d2c <xTaskIncrementTick+0x174>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d001      	beq.n	8018cfa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8018cf6:	2301      	movs	r3, #1
 8018cf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8018cfa:	697b      	ldr	r3, [r7, #20]
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	3718      	adds	r7, #24
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	2000c464 	.word	0x2000c464
 8018d08:	2000c440 	.word	0x2000c440
 8018d0c:	2000c3f4 	.word	0x2000c3f4
 8018d10:	2000c3f8 	.word	0x2000c3f8
 8018d14:	2000c454 	.word	0x2000c454
 8018d18:	2000c45c 	.word	0x2000c45c
 8018d1c:	2000c444 	.word	0x2000c444
 8018d20:	2000c340 	.word	0x2000c340
 8018d24:	2000c33c 	.word	0x2000c33c
 8018d28:	2000c44c 	.word	0x2000c44c
 8018d2c:	2000c450 	.word	0x2000c450

08018d30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018d30:	b480      	push	{r7}
 8018d32:	b087      	sub	sp, #28
 8018d34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018d36:	4b26      	ldr	r3, [pc, #152]	; (8018dd0 <vTaskSwitchContext+0xa0>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d003      	beq.n	8018d46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018d3e:	4b25      	ldr	r3, [pc, #148]	; (8018dd4 <vTaskSwitchContext+0xa4>)
 8018d40:	2201      	movs	r2, #1
 8018d42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018d44:	e03e      	b.n	8018dc4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8018d46:	4b23      	ldr	r3, [pc, #140]	; (8018dd4 <vTaskSwitchContext+0xa4>)
 8018d48:	2200      	movs	r2, #0
 8018d4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8018d4c:	4b22      	ldr	r3, [pc, #136]	; (8018dd8 <vTaskSwitchContext+0xa8>)
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	fab3 f383 	clz	r3, r3
 8018d58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018d5a:	7afb      	ldrb	r3, [r7, #11]
 8018d5c:	f1c3 031f 	rsb	r3, r3, #31
 8018d60:	617b      	str	r3, [r7, #20]
 8018d62:	491e      	ldr	r1, [pc, #120]	; (8018ddc <vTaskSwitchContext+0xac>)
 8018d64:	697a      	ldr	r2, [r7, #20]
 8018d66:	4613      	mov	r3, r2
 8018d68:	009b      	lsls	r3, r3, #2
 8018d6a:	4413      	add	r3, r2
 8018d6c:	009b      	lsls	r3, r3, #2
 8018d6e:	440b      	add	r3, r1
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d109      	bne.n	8018d8a <vTaskSwitchContext+0x5a>
	__asm volatile
 8018d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d7a:	f383 8811 	msr	BASEPRI, r3
 8018d7e:	f3bf 8f6f 	isb	sy
 8018d82:	f3bf 8f4f 	dsb	sy
 8018d86:	607b      	str	r3, [r7, #4]
 8018d88:	e7fe      	b.n	8018d88 <vTaskSwitchContext+0x58>
 8018d8a:	697a      	ldr	r2, [r7, #20]
 8018d8c:	4613      	mov	r3, r2
 8018d8e:	009b      	lsls	r3, r3, #2
 8018d90:	4413      	add	r3, r2
 8018d92:	009b      	lsls	r3, r3, #2
 8018d94:	4a11      	ldr	r2, [pc, #68]	; (8018ddc <vTaskSwitchContext+0xac>)
 8018d96:	4413      	add	r3, r2
 8018d98:	613b      	str	r3, [r7, #16]
 8018d9a:	693b      	ldr	r3, [r7, #16]
 8018d9c:	685b      	ldr	r3, [r3, #4]
 8018d9e:	685a      	ldr	r2, [r3, #4]
 8018da0:	693b      	ldr	r3, [r7, #16]
 8018da2:	605a      	str	r2, [r3, #4]
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	685a      	ldr	r2, [r3, #4]
 8018da8:	693b      	ldr	r3, [r7, #16]
 8018daa:	3308      	adds	r3, #8
 8018dac:	429a      	cmp	r2, r3
 8018dae:	d104      	bne.n	8018dba <vTaskSwitchContext+0x8a>
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	685b      	ldr	r3, [r3, #4]
 8018db4:	685a      	ldr	r2, [r3, #4]
 8018db6:	693b      	ldr	r3, [r7, #16]
 8018db8:	605a      	str	r2, [r3, #4]
 8018dba:	693b      	ldr	r3, [r7, #16]
 8018dbc:	685b      	ldr	r3, [r3, #4]
 8018dbe:	68db      	ldr	r3, [r3, #12]
 8018dc0:	4a07      	ldr	r2, [pc, #28]	; (8018de0 <vTaskSwitchContext+0xb0>)
 8018dc2:	6013      	str	r3, [r2, #0]
}
 8018dc4:	bf00      	nop
 8018dc6:	371c      	adds	r7, #28
 8018dc8:	46bd      	mov	sp, r7
 8018dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dce:	4770      	bx	lr
 8018dd0:	2000c464 	.word	0x2000c464
 8018dd4:	2000c450 	.word	0x2000c450
 8018dd8:	2000c444 	.word	0x2000c444
 8018ddc:	2000c340 	.word	0x2000c340
 8018de0:	2000c33c 	.word	0x2000c33c

08018de4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b084      	sub	sp, #16
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d109      	bne.n	8018e08 <vTaskPlaceOnEventList+0x24>
 8018df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018df8:	f383 8811 	msr	BASEPRI, r3
 8018dfc:	f3bf 8f6f 	isb	sy
 8018e00:	f3bf 8f4f 	dsb	sy
 8018e04:	60fb      	str	r3, [r7, #12]
 8018e06:	e7fe      	b.n	8018e06 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018e08:	4b07      	ldr	r3, [pc, #28]	; (8018e28 <vTaskPlaceOnEventList+0x44>)
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	3318      	adds	r3, #24
 8018e0e:	4619      	mov	r1, r3
 8018e10:	6878      	ldr	r0, [r7, #4]
 8018e12:	f7fe fd23 	bl	801785c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018e16:	2101      	movs	r1, #1
 8018e18:	6838      	ldr	r0, [r7, #0]
 8018e1a:	f000 fb7f 	bl	801951c <prvAddCurrentTaskToDelayedList>
}
 8018e1e:	bf00      	nop
 8018e20:	3710      	adds	r7, #16
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}
 8018e26:	bf00      	nop
 8018e28:	2000c33c 	.word	0x2000c33c

08018e2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b086      	sub	sp, #24
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	68db      	ldr	r3, [r3, #12]
 8018e38:	68db      	ldr	r3, [r3, #12]
 8018e3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018e3c:	693b      	ldr	r3, [r7, #16]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d109      	bne.n	8018e56 <xTaskRemoveFromEventList+0x2a>
 8018e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e46:	f383 8811 	msr	BASEPRI, r3
 8018e4a:	f3bf 8f6f 	isb	sy
 8018e4e:	f3bf 8f4f 	dsb	sy
 8018e52:	60fb      	str	r3, [r7, #12]
 8018e54:	e7fe      	b.n	8018e54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018e56:	693b      	ldr	r3, [r7, #16]
 8018e58:	3318      	adds	r3, #24
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	f7fe fd37 	bl	80178ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e60:	4b1d      	ldr	r3, [pc, #116]	; (8018ed8 <xTaskRemoveFromEventList+0xac>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d11c      	bne.n	8018ea2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018e68:	693b      	ldr	r3, [r7, #16]
 8018e6a:	3304      	adds	r3, #4
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f7fe fd2e 	bl	80178ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018e72:	693b      	ldr	r3, [r7, #16]
 8018e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e76:	2201      	movs	r2, #1
 8018e78:	409a      	lsls	r2, r3
 8018e7a:	4b18      	ldr	r3, [pc, #96]	; (8018edc <xTaskRemoveFromEventList+0xb0>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	4313      	orrs	r3, r2
 8018e80:	4a16      	ldr	r2, [pc, #88]	; (8018edc <xTaskRemoveFromEventList+0xb0>)
 8018e82:	6013      	str	r3, [r2, #0]
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e88:	4613      	mov	r3, r2
 8018e8a:	009b      	lsls	r3, r3, #2
 8018e8c:	4413      	add	r3, r2
 8018e8e:	009b      	lsls	r3, r3, #2
 8018e90:	4a13      	ldr	r2, [pc, #76]	; (8018ee0 <xTaskRemoveFromEventList+0xb4>)
 8018e92:	441a      	add	r2, r3
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	3304      	adds	r3, #4
 8018e98:	4619      	mov	r1, r3
 8018e9a:	4610      	mov	r0, r2
 8018e9c:	f7fe fcba 	bl	8017814 <vListInsertEnd>
 8018ea0:	e005      	b.n	8018eae <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018ea2:	693b      	ldr	r3, [r7, #16]
 8018ea4:	3318      	adds	r3, #24
 8018ea6:	4619      	mov	r1, r3
 8018ea8:	480e      	ldr	r0, [pc, #56]	; (8018ee4 <xTaskRemoveFromEventList+0xb8>)
 8018eaa:	f7fe fcb3 	bl	8017814 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018eae:	693b      	ldr	r3, [r7, #16]
 8018eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eb2:	4b0d      	ldr	r3, [pc, #52]	; (8018ee8 <xTaskRemoveFromEventList+0xbc>)
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018eb8:	429a      	cmp	r2, r3
 8018eba:	d905      	bls.n	8018ec8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018ec0:	4b0a      	ldr	r3, [pc, #40]	; (8018eec <xTaskRemoveFromEventList+0xc0>)
 8018ec2:	2201      	movs	r2, #1
 8018ec4:	601a      	str	r2, [r3, #0]
 8018ec6:	e001      	b.n	8018ecc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8018ec8:	2300      	movs	r3, #0
 8018eca:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8018ecc:	697b      	ldr	r3, [r7, #20]
}
 8018ece:	4618      	mov	r0, r3
 8018ed0:	3718      	adds	r7, #24
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bd80      	pop	{r7, pc}
 8018ed6:	bf00      	nop
 8018ed8:	2000c464 	.word	0x2000c464
 8018edc:	2000c444 	.word	0x2000c444
 8018ee0:	2000c340 	.word	0x2000c340
 8018ee4:	2000c3fc 	.word	0x2000c3fc
 8018ee8:	2000c33c 	.word	0x2000c33c
 8018eec:	2000c450 	.word	0x2000c450

08018ef0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018ef0:	b480      	push	{r7}
 8018ef2:	b083      	sub	sp, #12
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018ef8:	4b06      	ldr	r3, [pc, #24]	; (8018f14 <vTaskInternalSetTimeOutState+0x24>)
 8018efa:	681a      	ldr	r2, [r3, #0]
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018f00:	4b05      	ldr	r3, [pc, #20]	; (8018f18 <vTaskInternalSetTimeOutState+0x28>)
 8018f02:	681a      	ldr	r2, [r3, #0]
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	605a      	str	r2, [r3, #4]
}
 8018f08:	bf00      	nop
 8018f0a:	370c      	adds	r7, #12
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f12:	4770      	bx	lr
 8018f14:	2000c454 	.word	0x2000c454
 8018f18:	2000c440 	.word	0x2000c440

08018f1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b088      	sub	sp, #32
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
 8018f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d109      	bne.n	8018f40 <xTaskCheckForTimeOut+0x24>
 8018f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f30:	f383 8811 	msr	BASEPRI, r3
 8018f34:	f3bf 8f6f 	isb	sy
 8018f38:	f3bf 8f4f 	dsb	sy
 8018f3c:	613b      	str	r3, [r7, #16]
 8018f3e:	e7fe      	b.n	8018f3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d109      	bne.n	8018f5a <xTaskCheckForTimeOut+0x3e>
 8018f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f4a:	f383 8811 	msr	BASEPRI, r3
 8018f4e:	f3bf 8f6f 	isb	sy
 8018f52:	f3bf 8f4f 	dsb	sy
 8018f56:	60fb      	str	r3, [r7, #12]
 8018f58:	e7fe      	b.n	8018f58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8018f5a:	f000 fc6f 	bl	801983c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018f5e:	4b1d      	ldr	r3, [pc, #116]	; (8018fd4 <xTaskCheckForTimeOut+0xb8>)
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	685b      	ldr	r3, [r3, #4]
 8018f68:	69ba      	ldr	r2, [r7, #24]
 8018f6a:	1ad3      	subs	r3, r2, r3
 8018f6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f76:	d102      	bne.n	8018f7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018f78:	2300      	movs	r3, #0
 8018f7a:	61fb      	str	r3, [r7, #28]
 8018f7c:	e023      	b.n	8018fc6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	681a      	ldr	r2, [r3, #0]
 8018f82:	4b15      	ldr	r3, [pc, #84]	; (8018fd8 <xTaskCheckForTimeOut+0xbc>)
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	429a      	cmp	r2, r3
 8018f88:	d007      	beq.n	8018f9a <xTaskCheckForTimeOut+0x7e>
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	685b      	ldr	r3, [r3, #4]
 8018f8e:	69ba      	ldr	r2, [r7, #24]
 8018f90:	429a      	cmp	r2, r3
 8018f92:	d302      	bcc.n	8018f9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018f94:	2301      	movs	r3, #1
 8018f96:	61fb      	str	r3, [r7, #28]
 8018f98:	e015      	b.n	8018fc6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018f9a:	683b      	ldr	r3, [r7, #0]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	697a      	ldr	r2, [r7, #20]
 8018fa0:	429a      	cmp	r2, r3
 8018fa2:	d20b      	bcs.n	8018fbc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018fa4:	683b      	ldr	r3, [r7, #0]
 8018fa6:	681a      	ldr	r2, [r3, #0]
 8018fa8:	697b      	ldr	r3, [r7, #20]
 8018faa:	1ad2      	subs	r2, r2, r3
 8018fac:	683b      	ldr	r3, [r7, #0]
 8018fae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	f7ff ff9d 	bl	8018ef0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	61fb      	str	r3, [r7, #28]
 8018fba:	e004      	b.n	8018fc6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	2200      	movs	r2, #0
 8018fc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018fc2:	2301      	movs	r3, #1
 8018fc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018fc6:	f000 fc67 	bl	8019898 <vPortExitCritical>

	return xReturn;
 8018fca:	69fb      	ldr	r3, [r7, #28]
}
 8018fcc:	4618      	mov	r0, r3
 8018fce:	3720      	adds	r7, #32
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bd80      	pop	{r7, pc}
 8018fd4:	2000c440 	.word	0x2000c440
 8018fd8:	2000c454 	.word	0x2000c454

08018fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018fdc:	b480      	push	{r7}
 8018fde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018fe0:	4b03      	ldr	r3, [pc, #12]	; (8018ff0 <vTaskMissedYield+0x14>)
 8018fe2:	2201      	movs	r2, #1
 8018fe4:	601a      	str	r2, [r3, #0]
}
 8018fe6:	bf00      	nop
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fee:	4770      	bx	lr
 8018ff0:	2000c450 	.word	0x2000c450

08018ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018ffc:	f000 f852 	bl	80190a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019000:	4b06      	ldr	r3, [pc, #24]	; (801901c <prvIdleTask+0x28>)
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	2b01      	cmp	r3, #1
 8019006:	d9f9      	bls.n	8018ffc <prvIdleTask+0x8>
			{
				taskYIELD();
 8019008:	4b05      	ldr	r3, [pc, #20]	; (8019020 <prvIdleTask+0x2c>)
 801900a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801900e:	601a      	str	r2, [r3, #0]
 8019010:	f3bf 8f4f 	dsb	sy
 8019014:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019018:	e7f0      	b.n	8018ffc <prvIdleTask+0x8>
 801901a:	bf00      	nop
 801901c:	2000c340 	.word	0x2000c340
 8019020:	e000ed04 	.word	0xe000ed04

08019024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801902a:	2300      	movs	r3, #0
 801902c:	607b      	str	r3, [r7, #4]
 801902e:	e00c      	b.n	801904a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019030:	687a      	ldr	r2, [r7, #4]
 8019032:	4613      	mov	r3, r2
 8019034:	009b      	lsls	r3, r3, #2
 8019036:	4413      	add	r3, r2
 8019038:	009b      	lsls	r3, r3, #2
 801903a:	4a12      	ldr	r2, [pc, #72]	; (8019084 <prvInitialiseTaskLists+0x60>)
 801903c:	4413      	add	r3, r2
 801903e:	4618      	mov	r0, r3
 8019040:	f7fe fbbb 	bl	80177ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	3301      	adds	r3, #1
 8019048:	607b      	str	r3, [r7, #4]
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2b06      	cmp	r3, #6
 801904e:	d9ef      	bls.n	8019030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019050:	480d      	ldr	r0, [pc, #52]	; (8019088 <prvInitialiseTaskLists+0x64>)
 8019052:	f7fe fbb2 	bl	80177ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019056:	480d      	ldr	r0, [pc, #52]	; (801908c <prvInitialiseTaskLists+0x68>)
 8019058:	f7fe fbaf 	bl	80177ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801905c:	480c      	ldr	r0, [pc, #48]	; (8019090 <prvInitialiseTaskLists+0x6c>)
 801905e:	f7fe fbac 	bl	80177ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019062:	480c      	ldr	r0, [pc, #48]	; (8019094 <prvInitialiseTaskLists+0x70>)
 8019064:	f7fe fba9 	bl	80177ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019068:	480b      	ldr	r0, [pc, #44]	; (8019098 <prvInitialiseTaskLists+0x74>)
 801906a:	f7fe fba6 	bl	80177ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801906e:	4b0b      	ldr	r3, [pc, #44]	; (801909c <prvInitialiseTaskLists+0x78>)
 8019070:	4a05      	ldr	r2, [pc, #20]	; (8019088 <prvInitialiseTaskLists+0x64>)
 8019072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019074:	4b0a      	ldr	r3, [pc, #40]	; (80190a0 <prvInitialiseTaskLists+0x7c>)
 8019076:	4a05      	ldr	r2, [pc, #20]	; (801908c <prvInitialiseTaskLists+0x68>)
 8019078:	601a      	str	r2, [r3, #0]
}
 801907a:	bf00      	nop
 801907c:	3708      	adds	r7, #8
 801907e:	46bd      	mov	sp, r7
 8019080:	bd80      	pop	{r7, pc}
 8019082:	bf00      	nop
 8019084:	2000c340 	.word	0x2000c340
 8019088:	2000c3cc 	.word	0x2000c3cc
 801908c:	2000c3e0 	.word	0x2000c3e0
 8019090:	2000c3fc 	.word	0x2000c3fc
 8019094:	2000c410 	.word	0x2000c410
 8019098:	2000c428 	.word	0x2000c428
 801909c:	2000c3f4 	.word	0x2000c3f4
 80190a0:	2000c3f8 	.word	0x2000c3f8

080190a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b082      	sub	sp, #8
 80190a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80190aa:	e019      	b.n	80190e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80190ac:	f000 fbc6 	bl	801983c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80190b0:	4b0f      	ldr	r3, [pc, #60]	; (80190f0 <prvCheckTasksWaitingTermination+0x4c>)
 80190b2:	68db      	ldr	r3, [r3, #12]
 80190b4:	68db      	ldr	r3, [r3, #12]
 80190b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	3304      	adds	r3, #4
 80190bc:	4618      	mov	r0, r3
 80190be:	f7fe fc06 	bl	80178ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 80190c2:	4b0c      	ldr	r3, [pc, #48]	; (80190f4 <prvCheckTasksWaitingTermination+0x50>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	3b01      	subs	r3, #1
 80190c8:	4a0a      	ldr	r2, [pc, #40]	; (80190f4 <prvCheckTasksWaitingTermination+0x50>)
 80190ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80190cc:	4b0a      	ldr	r3, [pc, #40]	; (80190f8 <prvCheckTasksWaitingTermination+0x54>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	3b01      	subs	r3, #1
 80190d2:	4a09      	ldr	r2, [pc, #36]	; (80190f8 <prvCheckTasksWaitingTermination+0x54>)
 80190d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80190d6:	f000 fbdf 	bl	8019898 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80190da:	6878      	ldr	r0, [r7, #4]
 80190dc:	f000 f80e 	bl	80190fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80190e0:	4b05      	ldr	r3, [pc, #20]	; (80190f8 <prvCheckTasksWaitingTermination+0x54>)
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d1e1      	bne.n	80190ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80190e8:	bf00      	nop
 80190ea:	3708      	adds	r7, #8
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}
 80190f0:	2000c410 	.word	0x2000c410
 80190f4:	2000c43c 	.word	0x2000c43c
 80190f8:	2000c424 	.word	0x2000c424

080190fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b082      	sub	sp, #8
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019108:	4618      	mov	r0, r3
 801910a:	f000 fd73 	bl	8019bf4 <vPortFree>
			vPortFree( pxTCB );
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f000 fd70 	bl	8019bf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019114:	bf00      	nop
 8019116:	3708      	adds	r7, #8
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801911c:	b480      	push	{r7}
 801911e:	b083      	sub	sp, #12
 8019120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019122:	4b0f      	ldr	r3, [pc, #60]	; (8019160 <prvResetNextTaskUnblockTime+0x44>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d101      	bne.n	8019130 <prvResetNextTaskUnblockTime+0x14>
 801912c:	2301      	movs	r3, #1
 801912e:	e000      	b.n	8019132 <prvResetNextTaskUnblockTime+0x16>
 8019130:	2300      	movs	r3, #0
 8019132:	2b00      	cmp	r3, #0
 8019134:	d004      	beq.n	8019140 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019136:	4b0b      	ldr	r3, [pc, #44]	; (8019164 <prvResetNextTaskUnblockTime+0x48>)
 8019138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801913c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801913e:	e008      	b.n	8019152 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8019140:	4b07      	ldr	r3, [pc, #28]	; (8019160 <prvResetNextTaskUnblockTime+0x44>)
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	68db      	ldr	r3, [r3, #12]
 8019146:	68db      	ldr	r3, [r3, #12]
 8019148:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	4a05      	ldr	r2, [pc, #20]	; (8019164 <prvResetNextTaskUnblockTime+0x48>)
 8019150:	6013      	str	r3, [r2, #0]
}
 8019152:	bf00      	nop
 8019154:	370c      	adds	r7, #12
 8019156:	46bd      	mov	sp, r7
 8019158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801915c:	4770      	bx	lr
 801915e:	bf00      	nop
 8019160:	2000c3f4 	.word	0x2000c3f4
 8019164:	2000c45c 	.word	0x2000c45c

08019168 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019168:	b480      	push	{r7}
 801916a:	b083      	sub	sp, #12
 801916c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801916e:	4b0b      	ldr	r3, [pc, #44]	; (801919c <xTaskGetSchedulerState+0x34>)
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d102      	bne.n	801917c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019176:	2301      	movs	r3, #1
 8019178:	607b      	str	r3, [r7, #4]
 801917a:	e008      	b.n	801918e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801917c:	4b08      	ldr	r3, [pc, #32]	; (80191a0 <xTaskGetSchedulerState+0x38>)
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d102      	bne.n	801918a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019184:	2302      	movs	r3, #2
 8019186:	607b      	str	r3, [r7, #4]
 8019188:	e001      	b.n	801918e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801918a:	2300      	movs	r3, #0
 801918c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801918e:	687b      	ldr	r3, [r7, #4]
	}
 8019190:	4618      	mov	r0, r3
 8019192:	370c      	adds	r7, #12
 8019194:	46bd      	mov	sp, r7
 8019196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919a:	4770      	bx	lr
 801919c:	2000c448 	.word	0x2000c448
 80191a0:	2000c464 	.word	0x2000c464

080191a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b084      	sub	sp, #16
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80191b0:	2300      	movs	r3, #0
 80191b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d06e      	beq.n	8019298 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80191ba:	68bb      	ldr	r3, [r7, #8]
 80191bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191be:	4b39      	ldr	r3, [pc, #228]	; (80192a4 <xTaskPriorityInherit+0x100>)
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191c4:	429a      	cmp	r2, r3
 80191c6:	d25e      	bcs.n	8019286 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80191c8:	68bb      	ldr	r3, [r7, #8]
 80191ca:	699b      	ldr	r3, [r3, #24]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	db06      	blt.n	80191de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80191d0:	4b34      	ldr	r3, [pc, #208]	; (80192a4 <xTaskPriorityInherit+0x100>)
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191d6:	f1c3 0207 	rsb	r2, r3, #7
 80191da:	68bb      	ldr	r3, [r7, #8]
 80191dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80191de:	68bb      	ldr	r3, [r7, #8]
 80191e0:	6959      	ldr	r1, [r3, #20]
 80191e2:	68bb      	ldr	r3, [r7, #8]
 80191e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191e6:	4613      	mov	r3, r2
 80191e8:	009b      	lsls	r3, r3, #2
 80191ea:	4413      	add	r3, r2
 80191ec:	009b      	lsls	r3, r3, #2
 80191ee:	4a2e      	ldr	r2, [pc, #184]	; (80192a8 <xTaskPriorityInherit+0x104>)
 80191f0:	4413      	add	r3, r2
 80191f2:	4299      	cmp	r1, r3
 80191f4:	d101      	bne.n	80191fa <xTaskPriorityInherit+0x56>
 80191f6:	2301      	movs	r3, #1
 80191f8:	e000      	b.n	80191fc <xTaskPriorityInherit+0x58>
 80191fa:	2300      	movs	r3, #0
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d03a      	beq.n	8019276 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019200:	68bb      	ldr	r3, [r7, #8]
 8019202:	3304      	adds	r3, #4
 8019204:	4618      	mov	r0, r3
 8019206:	f7fe fb62 	bl	80178ce <uxListRemove>
 801920a:	4603      	mov	r3, r0
 801920c:	2b00      	cmp	r3, #0
 801920e:	d115      	bne.n	801923c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8019210:	68bb      	ldr	r3, [r7, #8]
 8019212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019214:	4924      	ldr	r1, [pc, #144]	; (80192a8 <xTaskPriorityInherit+0x104>)
 8019216:	4613      	mov	r3, r2
 8019218:	009b      	lsls	r3, r3, #2
 801921a:	4413      	add	r3, r2
 801921c:	009b      	lsls	r3, r3, #2
 801921e:	440b      	add	r3, r1
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d10a      	bne.n	801923c <xTaskPriorityInherit+0x98>
 8019226:	68bb      	ldr	r3, [r7, #8]
 8019228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801922a:	2201      	movs	r2, #1
 801922c:	fa02 f303 	lsl.w	r3, r2, r3
 8019230:	43da      	mvns	r2, r3
 8019232:	4b1e      	ldr	r3, [pc, #120]	; (80192ac <xTaskPriorityInherit+0x108>)
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	4013      	ands	r3, r2
 8019238:	4a1c      	ldr	r2, [pc, #112]	; (80192ac <xTaskPriorityInherit+0x108>)
 801923a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801923c:	4b19      	ldr	r3, [pc, #100]	; (80192a4 <xTaskPriorityInherit+0x100>)
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019242:	68bb      	ldr	r3, [r7, #8]
 8019244:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019246:	68bb      	ldr	r3, [r7, #8]
 8019248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801924a:	2201      	movs	r2, #1
 801924c:	409a      	lsls	r2, r3
 801924e:	4b17      	ldr	r3, [pc, #92]	; (80192ac <xTaskPriorityInherit+0x108>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	4313      	orrs	r3, r2
 8019254:	4a15      	ldr	r2, [pc, #84]	; (80192ac <xTaskPriorityInherit+0x108>)
 8019256:	6013      	str	r3, [r2, #0]
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801925c:	4613      	mov	r3, r2
 801925e:	009b      	lsls	r3, r3, #2
 8019260:	4413      	add	r3, r2
 8019262:	009b      	lsls	r3, r3, #2
 8019264:	4a10      	ldr	r2, [pc, #64]	; (80192a8 <xTaskPriorityInherit+0x104>)
 8019266:	441a      	add	r2, r3
 8019268:	68bb      	ldr	r3, [r7, #8]
 801926a:	3304      	adds	r3, #4
 801926c:	4619      	mov	r1, r3
 801926e:	4610      	mov	r0, r2
 8019270:	f7fe fad0 	bl	8017814 <vListInsertEnd>
 8019274:	e004      	b.n	8019280 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019276:	4b0b      	ldr	r3, [pc, #44]	; (80192a4 <xTaskPriorityInherit+0x100>)
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801927c:	68bb      	ldr	r3, [r7, #8]
 801927e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8019280:	2301      	movs	r3, #1
 8019282:	60fb      	str	r3, [r7, #12]
 8019284:	e008      	b.n	8019298 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019286:	68bb      	ldr	r3, [r7, #8]
 8019288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801928a:	4b06      	ldr	r3, [pc, #24]	; (80192a4 <xTaskPriorityInherit+0x100>)
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019290:	429a      	cmp	r2, r3
 8019292:	d201      	bcs.n	8019298 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8019294:	2301      	movs	r3, #1
 8019296:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019298:	68fb      	ldr	r3, [r7, #12]
	}
 801929a:	4618      	mov	r0, r3
 801929c:	3710      	adds	r7, #16
 801929e:	46bd      	mov	sp, r7
 80192a0:	bd80      	pop	{r7, pc}
 80192a2:	bf00      	nop
 80192a4:	2000c33c 	.word	0x2000c33c
 80192a8:	2000c340 	.word	0x2000c340
 80192ac:	2000c444 	.word	0x2000c444

080192b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b086      	sub	sp, #24
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80192bc:	2300      	movs	r3, #0
 80192be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d06c      	beq.n	80193a0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80192c6:	4b39      	ldr	r3, [pc, #228]	; (80193ac <xTaskPriorityDisinherit+0xfc>)
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	693a      	ldr	r2, [r7, #16]
 80192cc:	429a      	cmp	r2, r3
 80192ce:	d009      	beq.n	80192e4 <xTaskPriorityDisinherit+0x34>
 80192d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192d4:	f383 8811 	msr	BASEPRI, r3
 80192d8:	f3bf 8f6f 	isb	sy
 80192dc:	f3bf 8f4f 	dsb	sy
 80192e0:	60fb      	str	r3, [r7, #12]
 80192e2:	e7fe      	b.n	80192e2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80192e4:	693b      	ldr	r3, [r7, #16]
 80192e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d109      	bne.n	8019300 <xTaskPriorityDisinherit+0x50>
 80192ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192f0:	f383 8811 	msr	BASEPRI, r3
 80192f4:	f3bf 8f6f 	isb	sy
 80192f8:	f3bf 8f4f 	dsb	sy
 80192fc:	60bb      	str	r3, [r7, #8]
 80192fe:	e7fe      	b.n	80192fe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8019300:	693b      	ldr	r3, [r7, #16]
 8019302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019304:	1e5a      	subs	r2, r3, #1
 8019306:	693b      	ldr	r3, [r7, #16]
 8019308:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801930a:	693b      	ldr	r3, [r7, #16]
 801930c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801930e:	693b      	ldr	r3, [r7, #16]
 8019310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019312:	429a      	cmp	r2, r3
 8019314:	d044      	beq.n	80193a0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801931a:	2b00      	cmp	r3, #0
 801931c:	d140      	bne.n	80193a0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801931e:	693b      	ldr	r3, [r7, #16]
 8019320:	3304      	adds	r3, #4
 8019322:	4618      	mov	r0, r3
 8019324:	f7fe fad3 	bl	80178ce <uxListRemove>
 8019328:	4603      	mov	r3, r0
 801932a:	2b00      	cmp	r3, #0
 801932c:	d115      	bne.n	801935a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801932e:	693b      	ldr	r3, [r7, #16]
 8019330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019332:	491f      	ldr	r1, [pc, #124]	; (80193b0 <xTaskPriorityDisinherit+0x100>)
 8019334:	4613      	mov	r3, r2
 8019336:	009b      	lsls	r3, r3, #2
 8019338:	4413      	add	r3, r2
 801933a:	009b      	lsls	r3, r3, #2
 801933c:	440b      	add	r3, r1
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d10a      	bne.n	801935a <xTaskPriorityDisinherit+0xaa>
 8019344:	693b      	ldr	r3, [r7, #16]
 8019346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019348:	2201      	movs	r2, #1
 801934a:	fa02 f303 	lsl.w	r3, r2, r3
 801934e:	43da      	mvns	r2, r3
 8019350:	4b18      	ldr	r3, [pc, #96]	; (80193b4 <xTaskPriorityDisinherit+0x104>)
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	4013      	ands	r3, r2
 8019356:	4a17      	ldr	r2, [pc, #92]	; (80193b4 <xTaskPriorityDisinherit+0x104>)
 8019358:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801935e:	693b      	ldr	r3, [r7, #16]
 8019360:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019362:	693b      	ldr	r3, [r7, #16]
 8019364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019366:	f1c3 0207 	rsb	r2, r3, #7
 801936a:	693b      	ldr	r3, [r7, #16]
 801936c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801936e:	693b      	ldr	r3, [r7, #16]
 8019370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019372:	2201      	movs	r2, #1
 8019374:	409a      	lsls	r2, r3
 8019376:	4b0f      	ldr	r3, [pc, #60]	; (80193b4 <xTaskPriorityDisinherit+0x104>)
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	4313      	orrs	r3, r2
 801937c:	4a0d      	ldr	r2, [pc, #52]	; (80193b4 <xTaskPriorityDisinherit+0x104>)
 801937e:	6013      	str	r3, [r2, #0]
 8019380:	693b      	ldr	r3, [r7, #16]
 8019382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019384:	4613      	mov	r3, r2
 8019386:	009b      	lsls	r3, r3, #2
 8019388:	4413      	add	r3, r2
 801938a:	009b      	lsls	r3, r3, #2
 801938c:	4a08      	ldr	r2, [pc, #32]	; (80193b0 <xTaskPriorityDisinherit+0x100>)
 801938e:	441a      	add	r2, r3
 8019390:	693b      	ldr	r3, [r7, #16]
 8019392:	3304      	adds	r3, #4
 8019394:	4619      	mov	r1, r3
 8019396:	4610      	mov	r0, r2
 8019398:	f7fe fa3c 	bl	8017814 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801939c:	2301      	movs	r3, #1
 801939e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80193a0:	697b      	ldr	r3, [r7, #20]
	}
 80193a2:	4618      	mov	r0, r3
 80193a4:	3718      	adds	r7, #24
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}
 80193aa:	bf00      	nop
 80193ac:	2000c33c 	.word	0x2000c33c
 80193b0:	2000c340 	.word	0x2000c340
 80193b4:	2000c444 	.word	0x2000c444

080193b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b088      	sub	sp, #32
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
 80193c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80193c6:	2301      	movs	r3, #1
 80193c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	f000 8086 	beq.w	80194de <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80193d2:	69bb      	ldr	r3, [r7, #24]
 80193d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d109      	bne.n	80193ee <vTaskPriorityDisinheritAfterTimeout+0x36>
 80193da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193de:	f383 8811 	msr	BASEPRI, r3
 80193e2:	f3bf 8f6f 	isb	sy
 80193e6:	f3bf 8f4f 	dsb	sy
 80193ea:	60fb      	str	r3, [r7, #12]
 80193ec:	e7fe      	b.n	80193ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80193ee:	69bb      	ldr	r3, [r7, #24]
 80193f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193f2:	683a      	ldr	r2, [r7, #0]
 80193f4:	429a      	cmp	r2, r3
 80193f6:	d902      	bls.n	80193fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	61fb      	str	r3, [r7, #28]
 80193fc:	e002      	b.n	8019404 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80193fe:	69bb      	ldr	r3, [r7, #24]
 8019400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019402:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8019404:	69bb      	ldr	r3, [r7, #24]
 8019406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019408:	69fa      	ldr	r2, [r7, #28]
 801940a:	429a      	cmp	r2, r3
 801940c:	d067      	beq.n	80194de <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801940e:	69bb      	ldr	r3, [r7, #24]
 8019410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019412:	697a      	ldr	r2, [r7, #20]
 8019414:	429a      	cmp	r2, r3
 8019416:	d162      	bne.n	80194de <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8019418:	4b33      	ldr	r3, [pc, #204]	; (80194e8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	69ba      	ldr	r2, [r7, #24]
 801941e:	429a      	cmp	r2, r3
 8019420:	d109      	bne.n	8019436 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8019422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019426:	f383 8811 	msr	BASEPRI, r3
 801942a:	f3bf 8f6f 	isb	sy
 801942e:	f3bf 8f4f 	dsb	sy
 8019432:	60bb      	str	r3, [r7, #8]
 8019434:	e7fe      	b.n	8019434 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8019436:	69bb      	ldr	r3, [r7, #24]
 8019438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801943a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801943c:	69bb      	ldr	r3, [r7, #24]
 801943e:	69fa      	ldr	r2, [r7, #28]
 8019440:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019442:	69bb      	ldr	r3, [r7, #24]
 8019444:	699b      	ldr	r3, [r3, #24]
 8019446:	2b00      	cmp	r3, #0
 8019448:	db04      	blt.n	8019454 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801944a:	69fb      	ldr	r3, [r7, #28]
 801944c:	f1c3 0207 	rsb	r2, r3, #7
 8019450:	69bb      	ldr	r3, [r7, #24]
 8019452:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019454:	69bb      	ldr	r3, [r7, #24]
 8019456:	6959      	ldr	r1, [r3, #20]
 8019458:	693a      	ldr	r2, [r7, #16]
 801945a:	4613      	mov	r3, r2
 801945c:	009b      	lsls	r3, r3, #2
 801945e:	4413      	add	r3, r2
 8019460:	009b      	lsls	r3, r3, #2
 8019462:	4a22      	ldr	r2, [pc, #136]	; (80194ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8019464:	4413      	add	r3, r2
 8019466:	4299      	cmp	r1, r3
 8019468:	d101      	bne.n	801946e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 801946a:	2301      	movs	r3, #1
 801946c:	e000      	b.n	8019470 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 801946e:	2300      	movs	r3, #0
 8019470:	2b00      	cmp	r3, #0
 8019472:	d034      	beq.n	80194de <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019474:	69bb      	ldr	r3, [r7, #24]
 8019476:	3304      	adds	r3, #4
 8019478:	4618      	mov	r0, r3
 801947a:	f7fe fa28 	bl	80178ce <uxListRemove>
 801947e:	4603      	mov	r3, r0
 8019480:	2b00      	cmp	r3, #0
 8019482:	d115      	bne.n	80194b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8019484:	69bb      	ldr	r3, [r7, #24]
 8019486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019488:	4918      	ldr	r1, [pc, #96]	; (80194ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801948a:	4613      	mov	r3, r2
 801948c:	009b      	lsls	r3, r3, #2
 801948e:	4413      	add	r3, r2
 8019490:	009b      	lsls	r3, r3, #2
 8019492:	440b      	add	r3, r1
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d10a      	bne.n	80194b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 801949a:	69bb      	ldr	r3, [r7, #24]
 801949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801949e:	2201      	movs	r2, #1
 80194a0:	fa02 f303 	lsl.w	r3, r2, r3
 80194a4:	43da      	mvns	r2, r3
 80194a6:	4b12      	ldr	r3, [pc, #72]	; (80194f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	4013      	ands	r3, r2
 80194ac:	4a10      	ldr	r2, [pc, #64]	; (80194f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80194ae:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80194b0:	69bb      	ldr	r3, [r7, #24]
 80194b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194b4:	2201      	movs	r2, #1
 80194b6:	409a      	lsls	r2, r3
 80194b8:	4b0d      	ldr	r3, [pc, #52]	; (80194f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	4313      	orrs	r3, r2
 80194be:	4a0c      	ldr	r2, [pc, #48]	; (80194f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80194c0:	6013      	str	r3, [r2, #0]
 80194c2:	69bb      	ldr	r3, [r7, #24]
 80194c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194c6:	4613      	mov	r3, r2
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	4413      	add	r3, r2
 80194cc:	009b      	lsls	r3, r3, #2
 80194ce:	4a07      	ldr	r2, [pc, #28]	; (80194ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80194d0:	441a      	add	r2, r3
 80194d2:	69bb      	ldr	r3, [r7, #24]
 80194d4:	3304      	adds	r3, #4
 80194d6:	4619      	mov	r1, r3
 80194d8:	4610      	mov	r0, r2
 80194da:	f7fe f99b 	bl	8017814 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80194de:	bf00      	nop
 80194e0:	3720      	adds	r7, #32
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	2000c33c 	.word	0x2000c33c
 80194ec:	2000c340 	.word	0x2000c340
 80194f0:	2000c444 	.word	0x2000c444

080194f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80194f4:	b480      	push	{r7}
 80194f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80194f8:	4b07      	ldr	r3, [pc, #28]	; (8019518 <pvTaskIncrementMutexHeldCount+0x24>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d004      	beq.n	801950a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8019500:	4b05      	ldr	r3, [pc, #20]	; (8019518 <pvTaskIncrementMutexHeldCount+0x24>)
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019506:	3201      	adds	r2, #1
 8019508:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801950a:	4b03      	ldr	r3, [pc, #12]	; (8019518 <pvTaskIncrementMutexHeldCount+0x24>)
 801950c:	681b      	ldr	r3, [r3, #0]
	}
 801950e:	4618      	mov	r0, r3
 8019510:	46bd      	mov	sp, r7
 8019512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019516:	4770      	bx	lr
 8019518:	2000c33c 	.word	0x2000c33c

0801951c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b084      	sub	sp, #16
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019526:	4b29      	ldr	r3, [pc, #164]	; (80195cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801952c:	4b28      	ldr	r3, [pc, #160]	; (80195d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	3304      	adds	r3, #4
 8019532:	4618      	mov	r0, r3
 8019534:	f7fe f9cb 	bl	80178ce <uxListRemove>
 8019538:	4603      	mov	r3, r0
 801953a:	2b00      	cmp	r3, #0
 801953c:	d10b      	bne.n	8019556 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801953e:	4b24      	ldr	r3, [pc, #144]	; (80195d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019544:	2201      	movs	r2, #1
 8019546:	fa02 f303 	lsl.w	r3, r2, r3
 801954a:	43da      	mvns	r2, r3
 801954c:	4b21      	ldr	r3, [pc, #132]	; (80195d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	4013      	ands	r3, r2
 8019552:	4a20      	ldr	r2, [pc, #128]	; (80195d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8019554:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801955c:	d10a      	bne.n	8019574 <prvAddCurrentTaskToDelayedList+0x58>
 801955e:	683b      	ldr	r3, [r7, #0]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d007      	beq.n	8019574 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019564:	4b1a      	ldr	r3, [pc, #104]	; (80195d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	3304      	adds	r3, #4
 801956a:	4619      	mov	r1, r3
 801956c:	481a      	ldr	r0, [pc, #104]	; (80195d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801956e:	f7fe f951 	bl	8017814 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019572:	e026      	b.n	80195c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019574:	68fa      	ldr	r2, [r7, #12]
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	4413      	add	r3, r2
 801957a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801957c:	4b14      	ldr	r3, [pc, #80]	; (80195d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	68ba      	ldr	r2, [r7, #8]
 8019582:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019584:	68ba      	ldr	r2, [r7, #8]
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	429a      	cmp	r2, r3
 801958a:	d209      	bcs.n	80195a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801958c:	4b13      	ldr	r3, [pc, #76]	; (80195dc <prvAddCurrentTaskToDelayedList+0xc0>)
 801958e:	681a      	ldr	r2, [r3, #0]
 8019590:	4b0f      	ldr	r3, [pc, #60]	; (80195d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	3304      	adds	r3, #4
 8019596:	4619      	mov	r1, r3
 8019598:	4610      	mov	r0, r2
 801959a:	f7fe f95f 	bl	801785c <vListInsert>
}
 801959e:	e010      	b.n	80195c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80195a0:	4b0f      	ldr	r3, [pc, #60]	; (80195e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80195a2:	681a      	ldr	r2, [r3, #0]
 80195a4:	4b0a      	ldr	r3, [pc, #40]	; (80195d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	3304      	adds	r3, #4
 80195aa:	4619      	mov	r1, r3
 80195ac:	4610      	mov	r0, r2
 80195ae:	f7fe f955 	bl	801785c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80195b2:	4b0c      	ldr	r3, [pc, #48]	; (80195e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	68ba      	ldr	r2, [r7, #8]
 80195b8:	429a      	cmp	r2, r3
 80195ba:	d202      	bcs.n	80195c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80195bc:	4a09      	ldr	r2, [pc, #36]	; (80195e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80195be:	68bb      	ldr	r3, [r7, #8]
 80195c0:	6013      	str	r3, [r2, #0]
}
 80195c2:	bf00      	nop
 80195c4:	3710      	adds	r7, #16
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bd80      	pop	{r7, pc}
 80195ca:	bf00      	nop
 80195cc:	2000c440 	.word	0x2000c440
 80195d0:	2000c33c 	.word	0x2000c33c
 80195d4:	2000c444 	.word	0x2000c444
 80195d8:	2000c428 	.word	0x2000c428
 80195dc:	2000c3f8 	.word	0x2000c3f8
 80195e0:	2000c3f4 	.word	0x2000c3f4
 80195e4:	2000c45c 	.word	0x2000c45c

080195e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80195e8:	b480      	push	{r7}
 80195ea:	b085      	sub	sp, #20
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	60f8      	str	r0, [r7, #12]
 80195f0:	60b9      	str	r1, [r7, #8]
 80195f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	3b04      	subs	r3, #4
 80195f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	3b04      	subs	r3, #4
 8019606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	f023 0201 	bic.w	r2, r3, #1
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	3b04      	subs	r3, #4
 8019616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019618:	4a0c      	ldr	r2, [pc, #48]	; (801964c <pxPortInitialiseStack+0x64>)
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	3b14      	subs	r3, #20
 8019622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019624:	687a      	ldr	r2, [r7, #4]
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	3b04      	subs	r3, #4
 801962e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	f06f 0202 	mvn.w	r2, #2
 8019636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	3b20      	subs	r3, #32
 801963c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801963e:	68fb      	ldr	r3, [r7, #12]
}
 8019640:	4618      	mov	r0, r3
 8019642:	3714      	adds	r7, #20
 8019644:	46bd      	mov	sp, r7
 8019646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964a:	4770      	bx	lr
 801964c:	08019651 	.word	0x08019651

08019650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019650:	b480      	push	{r7}
 8019652:	b085      	sub	sp, #20
 8019654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019656:	2300      	movs	r3, #0
 8019658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801965a:	4b11      	ldr	r3, [pc, #68]	; (80196a0 <prvTaskExitError+0x50>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019662:	d009      	beq.n	8019678 <prvTaskExitError+0x28>
 8019664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019668:	f383 8811 	msr	BASEPRI, r3
 801966c:	f3bf 8f6f 	isb	sy
 8019670:	f3bf 8f4f 	dsb	sy
 8019674:	60fb      	str	r3, [r7, #12]
 8019676:	e7fe      	b.n	8019676 <prvTaskExitError+0x26>
 8019678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801967c:	f383 8811 	msr	BASEPRI, r3
 8019680:	f3bf 8f6f 	isb	sy
 8019684:	f3bf 8f4f 	dsb	sy
 8019688:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801968a:	bf00      	nop
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d0fc      	beq.n	801968c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019692:	bf00      	nop
 8019694:	3714      	adds	r7, #20
 8019696:	46bd      	mov	sp, r7
 8019698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969c:	4770      	bx	lr
 801969e:	bf00      	nop
 80196a0:	20000050 	.word	0x20000050
	...

080196b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80196b0:	4b07      	ldr	r3, [pc, #28]	; (80196d0 <pxCurrentTCBConst2>)
 80196b2:	6819      	ldr	r1, [r3, #0]
 80196b4:	6808      	ldr	r0, [r1, #0]
 80196b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196ba:	f380 8809 	msr	PSP, r0
 80196be:	f3bf 8f6f 	isb	sy
 80196c2:	f04f 0000 	mov.w	r0, #0
 80196c6:	f380 8811 	msr	BASEPRI, r0
 80196ca:	4770      	bx	lr
 80196cc:	f3af 8000 	nop.w

080196d0 <pxCurrentTCBConst2>:
 80196d0:	2000c33c 	.word	0x2000c33c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80196d4:	bf00      	nop
 80196d6:	bf00      	nop

080196d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80196d8:	4808      	ldr	r0, [pc, #32]	; (80196fc <prvPortStartFirstTask+0x24>)
 80196da:	6800      	ldr	r0, [r0, #0]
 80196dc:	6800      	ldr	r0, [r0, #0]
 80196de:	f380 8808 	msr	MSP, r0
 80196e2:	f04f 0000 	mov.w	r0, #0
 80196e6:	f380 8814 	msr	CONTROL, r0
 80196ea:	b662      	cpsie	i
 80196ec:	b661      	cpsie	f
 80196ee:	f3bf 8f4f 	dsb	sy
 80196f2:	f3bf 8f6f 	isb	sy
 80196f6:	df00      	svc	0
 80196f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80196fa:	bf00      	nop
 80196fc:	e000ed08 	.word	0xe000ed08

08019700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b086      	sub	sp, #24
 8019704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019706:	4b44      	ldr	r3, [pc, #272]	; (8019818 <xPortStartScheduler+0x118>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	4a44      	ldr	r2, [pc, #272]	; (801981c <xPortStartScheduler+0x11c>)
 801970c:	4293      	cmp	r3, r2
 801970e:	d109      	bne.n	8019724 <xPortStartScheduler+0x24>
 8019710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019714:	f383 8811 	msr	BASEPRI, r3
 8019718:	f3bf 8f6f 	isb	sy
 801971c:	f3bf 8f4f 	dsb	sy
 8019720:	613b      	str	r3, [r7, #16]
 8019722:	e7fe      	b.n	8019722 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019724:	4b3c      	ldr	r3, [pc, #240]	; (8019818 <xPortStartScheduler+0x118>)
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	4a3d      	ldr	r2, [pc, #244]	; (8019820 <xPortStartScheduler+0x120>)
 801972a:	4293      	cmp	r3, r2
 801972c:	d109      	bne.n	8019742 <xPortStartScheduler+0x42>
 801972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019732:	f383 8811 	msr	BASEPRI, r3
 8019736:	f3bf 8f6f 	isb	sy
 801973a:	f3bf 8f4f 	dsb	sy
 801973e:	60fb      	str	r3, [r7, #12]
 8019740:	e7fe      	b.n	8019740 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019742:	4b38      	ldr	r3, [pc, #224]	; (8019824 <xPortStartScheduler+0x124>)
 8019744:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019746:	697b      	ldr	r3, [r7, #20]
 8019748:	781b      	ldrb	r3, [r3, #0]
 801974a:	b2db      	uxtb	r3, r3
 801974c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801974e:	697b      	ldr	r3, [r7, #20]
 8019750:	22ff      	movs	r2, #255	; 0xff
 8019752:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019754:	697b      	ldr	r3, [r7, #20]
 8019756:	781b      	ldrb	r3, [r3, #0]
 8019758:	b2db      	uxtb	r3, r3
 801975a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801975c:	78fb      	ldrb	r3, [r7, #3]
 801975e:	b2db      	uxtb	r3, r3
 8019760:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019764:	b2da      	uxtb	r2, r3
 8019766:	4b30      	ldr	r3, [pc, #192]	; (8019828 <xPortStartScheduler+0x128>)
 8019768:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801976a:	4b30      	ldr	r3, [pc, #192]	; (801982c <xPortStartScheduler+0x12c>)
 801976c:	2207      	movs	r2, #7
 801976e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019770:	e009      	b.n	8019786 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8019772:	4b2e      	ldr	r3, [pc, #184]	; (801982c <xPortStartScheduler+0x12c>)
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	3b01      	subs	r3, #1
 8019778:	4a2c      	ldr	r2, [pc, #176]	; (801982c <xPortStartScheduler+0x12c>)
 801977a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801977c:	78fb      	ldrb	r3, [r7, #3]
 801977e:	b2db      	uxtb	r3, r3
 8019780:	005b      	lsls	r3, r3, #1
 8019782:	b2db      	uxtb	r3, r3
 8019784:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019786:	78fb      	ldrb	r3, [r7, #3]
 8019788:	b2db      	uxtb	r3, r3
 801978a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801978e:	2b80      	cmp	r3, #128	; 0x80
 8019790:	d0ef      	beq.n	8019772 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019792:	4b26      	ldr	r3, [pc, #152]	; (801982c <xPortStartScheduler+0x12c>)
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	f1c3 0307 	rsb	r3, r3, #7
 801979a:	2b04      	cmp	r3, #4
 801979c:	d009      	beq.n	80197b2 <xPortStartScheduler+0xb2>
 801979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197a2:	f383 8811 	msr	BASEPRI, r3
 80197a6:	f3bf 8f6f 	isb	sy
 80197aa:	f3bf 8f4f 	dsb	sy
 80197ae:	60bb      	str	r3, [r7, #8]
 80197b0:	e7fe      	b.n	80197b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80197b2:	4b1e      	ldr	r3, [pc, #120]	; (801982c <xPortStartScheduler+0x12c>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	021b      	lsls	r3, r3, #8
 80197b8:	4a1c      	ldr	r2, [pc, #112]	; (801982c <xPortStartScheduler+0x12c>)
 80197ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80197bc:	4b1b      	ldr	r3, [pc, #108]	; (801982c <xPortStartScheduler+0x12c>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80197c4:	4a19      	ldr	r2, [pc, #100]	; (801982c <xPortStartScheduler+0x12c>)
 80197c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	b2da      	uxtb	r2, r3
 80197cc:	697b      	ldr	r3, [r7, #20]
 80197ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80197d0:	4b17      	ldr	r3, [pc, #92]	; (8019830 <xPortStartScheduler+0x130>)
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	4a16      	ldr	r2, [pc, #88]	; (8019830 <xPortStartScheduler+0x130>)
 80197d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80197da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80197dc:	4b14      	ldr	r3, [pc, #80]	; (8019830 <xPortStartScheduler+0x130>)
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	4a13      	ldr	r2, [pc, #76]	; (8019830 <xPortStartScheduler+0x130>)
 80197e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80197e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80197e8:	f000 f8d6 	bl	8019998 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80197ec:	4b11      	ldr	r3, [pc, #68]	; (8019834 <xPortStartScheduler+0x134>)
 80197ee:	2200      	movs	r2, #0
 80197f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80197f2:	f000 f8f5 	bl	80199e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80197f6:	4b10      	ldr	r3, [pc, #64]	; (8019838 <xPortStartScheduler+0x138>)
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	4a0f      	ldr	r2, [pc, #60]	; (8019838 <xPortStartScheduler+0x138>)
 80197fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019800:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019802:	f7ff ff69 	bl	80196d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019806:	f7ff fa93 	bl	8018d30 <vTaskSwitchContext>
	prvTaskExitError();
 801980a:	f7ff ff21 	bl	8019650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801980e:	2300      	movs	r3, #0
}
 8019810:	4618      	mov	r0, r3
 8019812:	3718      	adds	r7, #24
 8019814:	46bd      	mov	sp, r7
 8019816:	bd80      	pop	{r7, pc}
 8019818:	e000ed00 	.word	0xe000ed00
 801981c:	410fc271 	.word	0x410fc271
 8019820:	410fc270 	.word	0x410fc270
 8019824:	e000e400 	.word	0xe000e400
 8019828:	2000c468 	.word	0x2000c468
 801982c:	2000c46c 	.word	0x2000c46c
 8019830:	e000ed20 	.word	0xe000ed20
 8019834:	20000050 	.word	0x20000050
 8019838:	e000ef34 	.word	0xe000ef34

0801983c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801983c:	b480      	push	{r7}
 801983e:	b083      	sub	sp, #12
 8019840:	af00      	add	r7, sp, #0
 8019842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019846:	f383 8811 	msr	BASEPRI, r3
 801984a:	f3bf 8f6f 	isb	sy
 801984e:	f3bf 8f4f 	dsb	sy
 8019852:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019854:	4b0e      	ldr	r3, [pc, #56]	; (8019890 <vPortEnterCritical+0x54>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	3301      	adds	r3, #1
 801985a:	4a0d      	ldr	r2, [pc, #52]	; (8019890 <vPortEnterCritical+0x54>)
 801985c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801985e:	4b0c      	ldr	r3, [pc, #48]	; (8019890 <vPortEnterCritical+0x54>)
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	2b01      	cmp	r3, #1
 8019864:	d10e      	bne.n	8019884 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019866:	4b0b      	ldr	r3, [pc, #44]	; (8019894 <vPortEnterCritical+0x58>)
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	b2db      	uxtb	r3, r3
 801986c:	2b00      	cmp	r3, #0
 801986e:	d009      	beq.n	8019884 <vPortEnterCritical+0x48>
 8019870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019874:	f383 8811 	msr	BASEPRI, r3
 8019878:	f3bf 8f6f 	isb	sy
 801987c:	f3bf 8f4f 	dsb	sy
 8019880:	603b      	str	r3, [r7, #0]
 8019882:	e7fe      	b.n	8019882 <vPortEnterCritical+0x46>
	}
}
 8019884:	bf00      	nop
 8019886:	370c      	adds	r7, #12
 8019888:	46bd      	mov	sp, r7
 801988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988e:	4770      	bx	lr
 8019890:	20000050 	.word	0x20000050
 8019894:	e000ed04 	.word	0xe000ed04

08019898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019898:	b480      	push	{r7}
 801989a:	b083      	sub	sp, #12
 801989c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801989e:	4b11      	ldr	r3, [pc, #68]	; (80198e4 <vPortExitCritical+0x4c>)
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d109      	bne.n	80198ba <vPortExitCritical+0x22>
 80198a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198aa:	f383 8811 	msr	BASEPRI, r3
 80198ae:	f3bf 8f6f 	isb	sy
 80198b2:	f3bf 8f4f 	dsb	sy
 80198b6:	607b      	str	r3, [r7, #4]
 80198b8:	e7fe      	b.n	80198b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80198ba:	4b0a      	ldr	r3, [pc, #40]	; (80198e4 <vPortExitCritical+0x4c>)
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	3b01      	subs	r3, #1
 80198c0:	4a08      	ldr	r2, [pc, #32]	; (80198e4 <vPortExitCritical+0x4c>)
 80198c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80198c4:	4b07      	ldr	r3, [pc, #28]	; (80198e4 <vPortExitCritical+0x4c>)
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d104      	bne.n	80198d6 <vPortExitCritical+0x3e>
 80198cc:	2300      	movs	r3, #0
 80198ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80198d0:	683b      	ldr	r3, [r7, #0]
 80198d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80198d6:	bf00      	nop
 80198d8:	370c      	adds	r7, #12
 80198da:	46bd      	mov	sp, r7
 80198dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e0:	4770      	bx	lr
 80198e2:	bf00      	nop
 80198e4:	20000050 	.word	0x20000050
	...

080198f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80198f0:	f3ef 8009 	mrs	r0, PSP
 80198f4:	f3bf 8f6f 	isb	sy
 80198f8:	4b15      	ldr	r3, [pc, #84]	; (8019950 <pxCurrentTCBConst>)
 80198fa:	681a      	ldr	r2, [r3, #0]
 80198fc:	f01e 0f10 	tst.w	lr, #16
 8019900:	bf08      	it	eq
 8019902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801990a:	6010      	str	r0, [r2, #0]
 801990c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019914:	f380 8811 	msr	BASEPRI, r0
 8019918:	f3bf 8f4f 	dsb	sy
 801991c:	f3bf 8f6f 	isb	sy
 8019920:	f7ff fa06 	bl	8018d30 <vTaskSwitchContext>
 8019924:	f04f 0000 	mov.w	r0, #0
 8019928:	f380 8811 	msr	BASEPRI, r0
 801992c:	bc09      	pop	{r0, r3}
 801992e:	6819      	ldr	r1, [r3, #0]
 8019930:	6808      	ldr	r0, [r1, #0]
 8019932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019936:	f01e 0f10 	tst.w	lr, #16
 801993a:	bf08      	it	eq
 801993c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019940:	f380 8809 	msr	PSP, r0
 8019944:	f3bf 8f6f 	isb	sy
 8019948:	4770      	bx	lr
 801994a:	bf00      	nop
 801994c:	f3af 8000 	nop.w

08019950 <pxCurrentTCBConst>:
 8019950:	2000c33c 	.word	0x2000c33c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019954:	bf00      	nop
 8019956:	bf00      	nop

08019958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b082      	sub	sp, #8
 801995c:	af00      	add	r7, sp, #0
	__asm volatile
 801995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019962:	f383 8811 	msr	BASEPRI, r3
 8019966:	f3bf 8f6f 	isb	sy
 801996a:	f3bf 8f4f 	dsb	sy
 801996e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019970:	f7ff f922 	bl	8018bb8 <xTaskIncrementTick>
 8019974:	4603      	mov	r3, r0
 8019976:	2b00      	cmp	r3, #0
 8019978:	d003      	beq.n	8019982 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801997a:	4b06      	ldr	r3, [pc, #24]	; (8019994 <xPortSysTickHandler+0x3c>)
 801997c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019980:	601a      	str	r2, [r3, #0]
 8019982:	2300      	movs	r3, #0
 8019984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019986:	683b      	ldr	r3, [r7, #0]
 8019988:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801998c:	bf00      	nop
 801998e:	3708      	adds	r7, #8
 8019990:	46bd      	mov	sp, r7
 8019992:	bd80      	pop	{r7, pc}
 8019994:	e000ed04 	.word	0xe000ed04

08019998 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019998:	b480      	push	{r7}
 801999a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801999c:	4b0b      	ldr	r3, [pc, #44]	; (80199cc <vPortSetupTimerInterrupt+0x34>)
 801999e:	2200      	movs	r2, #0
 80199a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80199a2:	4b0b      	ldr	r3, [pc, #44]	; (80199d0 <vPortSetupTimerInterrupt+0x38>)
 80199a4:	2200      	movs	r2, #0
 80199a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80199a8:	4b0a      	ldr	r3, [pc, #40]	; (80199d4 <vPortSetupTimerInterrupt+0x3c>)
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	4a0a      	ldr	r2, [pc, #40]	; (80199d8 <vPortSetupTimerInterrupt+0x40>)
 80199ae:	fba2 2303 	umull	r2, r3, r2, r3
 80199b2:	099b      	lsrs	r3, r3, #6
 80199b4:	4a09      	ldr	r2, [pc, #36]	; (80199dc <vPortSetupTimerInterrupt+0x44>)
 80199b6:	3b01      	subs	r3, #1
 80199b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80199ba:	4b04      	ldr	r3, [pc, #16]	; (80199cc <vPortSetupTimerInterrupt+0x34>)
 80199bc:	2207      	movs	r2, #7
 80199be:	601a      	str	r2, [r3, #0]
}
 80199c0:	bf00      	nop
 80199c2:	46bd      	mov	sp, r7
 80199c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199c8:	4770      	bx	lr
 80199ca:	bf00      	nop
 80199cc:	e000e010 	.word	0xe000e010
 80199d0:	e000e018 	.word	0xe000e018
 80199d4:	20000054 	.word	0x20000054
 80199d8:	10624dd3 	.word	0x10624dd3
 80199dc:	e000e014 	.word	0xe000e014

080199e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80199e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80199f0 <vPortEnableVFP+0x10>
 80199e4:	6801      	ldr	r1, [r0, #0]
 80199e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80199ea:	6001      	str	r1, [r0, #0]
 80199ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80199ee:	bf00      	nop
 80199f0:	e000ed88 	.word	0xe000ed88

080199f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80199f4:	b480      	push	{r7}
 80199f6:	b085      	sub	sp, #20
 80199f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80199fa:	f3ef 8305 	mrs	r3, IPSR
 80199fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	2b0f      	cmp	r3, #15
 8019a04:	d913      	bls.n	8019a2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019a06:	4a16      	ldr	r2, [pc, #88]	; (8019a60 <vPortValidateInterruptPriority+0x6c>)
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	4413      	add	r3, r2
 8019a0c:	781b      	ldrb	r3, [r3, #0]
 8019a0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019a10:	4b14      	ldr	r3, [pc, #80]	; (8019a64 <vPortValidateInterruptPriority+0x70>)
 8019a12:	781b      	ldrb	r3, [r3, #0]
 8019a14:	7afa      	ldrb	r2, [r7, #11]
 8019a16:	429a      	cmp	r2, r3
 8019a18:	d209      	bcs.n	8019a2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8019a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a1e:	f383 8811 	msr	BASEPRI, r3
 8019a22:	f3bf 8f6f 	isb	sy
 8019a26:	f3bf 8f4f 	dsb	sy
 8019a2a:	607b      	str	r3, [r7, #4]
 8019a2c:	e7fe      	b.n	8019a2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019a2e:	4b0e      	ldr	r3, [pc, #56]	; (8019a68 <vPortValidateInterruptPriority+0x74>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019a36:	4b0d      	ldr	r3, [pc, #52]	; (8019a6c <vPortValidateInterruptPriority+0x78>)
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	d909      	bls.n	8019a52 <vPortValidateInterruptPriority+0x5e>
 8019a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a42:	f383 8811 	msr	BASEPRI, r3
 8019a46:	f3bf 8f6f 	isb	sy
 8019a4a:	f3bf 8f4f 	dsb	sy
 8019a4e:	603b      	str	r3, [r7, #0]
 8019a50:	e7fe      	b.n	8019a50 <vPortValidateInterruptPriority+0x5c>
	}
 8019a52:	bf00      	nop
 8019a54:	3714      	adds	r7, #20
 8019a56:	46bd      	mov	sp, r7
 8019a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a5c:	4770      	bx	lr
 8019a5e:	bf00      	nop
 8019a60:	e000e3f0 	.word	0xe000e3f0
 8019a64:	2000c468 	.word	0x2000c468
 8019a68:	e000ed0c 	.word	0xe000ed0c
 8019a6c:	2000c46c 	.word	0x2000c46c

08019a70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b08a      	sub	sp, #40	; 0x28
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019a78:	2300      	movs	r3, #0
 8019a7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019a7c:	f7fe ffd0 	bl	8018a20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019a80:	4b57      	ldr	r3, [pc, #348]	; (8019be0 <pvPortMalloc+0x170>)
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d101      	bne.n	8019a8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019a88:	f000 f90c 	bl	8019ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019a8c:	4b55      	ldr	r3, [pc, #340]	; (8019be4 <pvPortMalloc+0x174>)
 8019a8e:	681a      	ldr	r2, [r3, #0]
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	4013      	ands	r3, r2
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	f040 808c 	bne.w	8019bb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d01c      	beq.n	8019ada <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8019aa0:	2208      	movs	r2, #8
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	4413      	add	r3, r2
 8019aa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	f003 0307 	and.w	r3, r3, #7
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d013      	beq.n	8019ada <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	f023 0307 	bic.w	r3, r3, #7
 8019ab8:	3308      	adds	r3, #8
 8019aba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	f003 0307 	and.w	r3, r3, #7
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d009      	beq.n	8019ada <pvPortMalloc+0x6a>
 8019ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aca:	f383 8811 	msr	BASEPRI, r3
 8019ace:	f3bf 8f6f 	isb	sy
 8019ad2:	f3bf 8f4f 	dsb	sy
 8019ad6:	617b      	str	r3, [r7, #20]
 8019ad8:	e7fe      	b.n	8019ad8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d068      	beq.n	8019bb2 <pvPortMalloc+0x142>
 8019ae0:	4b41      	ldr	r3, [pc, #260]	; (8019be8 <pvPortMalloc+0x178>)
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	687a      	ldr	r2, [r7, #4]
 8019ae6:	429a      	cmp	r2, r3
 8019ae8:	d863      	bhi.n	8019bb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019aea:	4b40      	ldr	r3, [pc, #256]	; (8019bec <pvPortMalloc+0x17c>)
 8019aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019aee:	4b3f      	ldr	r3, [pc, #252]	; (8019bec <pvPortMalloc+0x17c>)
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019af4:	e004      	b.n	8019b00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8019af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b02:	685b      	ldr	r3, [r3, #4]
 8019b04:	687a      	ldr	r2, [r7, #4]
 8019b06:	429a      	cmp	r2, r3
 8019b08:	d903      	bls.n	8019b12 <pvPortMalloc+0xa2>
 8019b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d1f1      	bne.n	8019af6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019b12:	4b33      	ldr	r3, [pc, #204]	; (8019be0 <pvPortMalloc+0x170>)
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b18:	429a      	cmp	r2, r3
 8019b1a:	d04a      	beq.n	8019bb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019b1c:	6a3b      	ldr	r3, [r7, #32]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	2208      	movs	r2, #8
 8019b22:	4413      	add	r3, r2
 8019b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b28:	681a      	ldr	r2, [r3, #0]
 8019b2a:	6a3b      	ldr	r3, [r7, #32]
 8019b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b30:	685a      	ldr	r2, [r3, #4]
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	1ad2      	subs	r2, r2, r3
 8019b36:	2308      	movs	r3, #8
 8019b38:	005b      	lsls	r3, r3, #1
 8019b3a:	429a      	cmp	r2, r3
 8019b3c:	d91e      	bls.n	8019b7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	4413      	add	r3, r2
 8019b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019b46:	69bb      	ldr	r3, [r7, #24]
 8019b48:	f003 0307 	and.w	r3, r3, #7
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d009      	beq.n	8019b64 <pvPortMalloc+0xf4>
 8019b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b54:	f383 8811 	msr	BASEPRI, r3
 8019b58:	f3bf 8f6f 	isb	sy
 8019b5c:	f3bf 8f4f 	dsb	sy
 8019b60:	613b      	str	r3, [r7, #16]
 8019b62:	e7fe      	b.n	8019b62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b66:	685a      	ldr	r2, [r3, #4]
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	1ad2      	subs	r2, r2, r3
 8019b6c:	69bb      	ldr	r3, [r7, #24]
 8019b6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b72:	687a      	ldr	r2, [r7, #4]
 8019b74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019b76:	69b8      	ldr	r0, [r7, #24]
 8019b78:	f000 f8f6 	bl	8019d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019b7c:	4b1a      	ldr	r3, [pc, #104]	; (8019be8 <pvPortMalloc+0x178>)
 8019b7e:	681a      	ldr	r2, [r3, #0]
 8019b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b82:	685b      	ldr	r3, [r3, #4]
 8019b84:	1ad3      	subs	r3, r2, r3
 8019b86:	4a18      	ldr	r2, [pc, #96]	; (8019be8 <pvPortMalloc+0x178>)
 8019b88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019b8a:	4b17      	ldr	r3, [pc, #92]	; (8019be8 <pvPortMalloc+0x178>)
 8019b8c:	681a      	ldr	r2, [r3, #0]
 8019b8e:	4b18      	ldr	r3, [pc, #96]	; (8019bf0 <pvPortMalloc+0x180>)
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	429a      	cmp	r2, r3
 8019b94:	d203      	bcs.n	8019b9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019b96:	4b14      	ldr	r3, [pc, #80]	; (8019be8 <pvPortMalloc+0x178>)
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	4a15      	ldr	r2, [pc, #84]	; (8019bf0 <pvPortMalloc+0x180>)
 8019b9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ba0:	685a      	ldr	r2, [r3, #4]
 8019ba2:	4b10      	ldr	r3, [pc, #64]	; (8019be4 <pvPortMalloc+0x174>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	431a      	orrs	r2, r3
 8019ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019baa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bae:	2200      	movs	r2, #0
 8019bb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019bb2:	f7fe ff43 	bl	8018a3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019bb6:	69fb      	ldr	r3, [r7, #28]
 8019bb8:	f003 0307 	and.w	r3, r3, #7
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d009      	beq.n	8019bd4 <pvPortMalloc+0x164>
 8019bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bc4:	f383 8811 	msr	BASEPRI, r3
 8019bc8:	f3bf 8f6f 	isb	sy
 8019bcc:	f3bf 8f4f 	dsb	sy
 8019bd0:	60fb      	str	r3, [r7, #12]
 8019bd2:	e7fe      	b.n	8019bd2 <pvPortMalloc+0x162>
	return pvReturn;
 8019bd4:	69fb      	ldr	r3, [r7, #28]
}
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	3728      	adds	r7, #40	; 0x28
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	bd80      	pop	{r7, pc}
 8019bde:	bf00      	nop
 8019be0:	2000e3b8 	.word	0x2000e3b8
 8019be4:	2000e3c4 	.word	0x2000e3c4
 8019be8:	2000e3bc 	.word	0x2000e3bc
 8019bec:	2000e3b0 	.word	0x2000e3b0
 8019bf0:	2000e3c0 	.word	0x2000e3c0

08019bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b086      	sub	sp, #24
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d046      	beq.n	8019c94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019c06:	2308      	movs	r3, #8
 8019c08:	425b      	negs	r3, r3
 8019c0a:	697a      	ldr	r2, [r7, #20]
 8019c0c:	4413      	add	r3, r2
 8019c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019c10:	697b      	ldr	r3, [r7, #20]
 8019c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019c14:	693b      	ldr	r3, [r7, #16]
 8019c16:	685a      	ldr	r2, [r3, #4]
 8019c18:	4b20      	ldr	r3, [pc, #128]	; (8019c9c <vPortFree+0xa8>)
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	4013      	ands	r3, r2
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d109      	bne.n	8019c36 <vPortFree+0x42>
 8019c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c26:	f383 8811 	msr	BASEPRI, r3
 8019c2a:	f3bf 8f6f 	isb	sy
 8019c2e:	f3bf 8f4f 	dsb	sy
 8019c32:	60fb      	str	r3, [r7, #12]
 8019c34:	e7fe      	b.n	8019c34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019c36:	693b      	ldr	r3, [r7, #16]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d009      	beq.n	8019c52 <vPortFree+0x5e>
 8019c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c42:	f383 8811 	msr	BASEPRI, r3
 8019c46:	f3bf 8f6f 	isb	sy
 8019c4a:	f3bf 8f4f 	dsb	sy
 8019c4e:	60bb      	str	r3, [r7, #8]
 8019c50:	e7fe      	b.n	8019c50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019c52:	693b      	ldr	r3, [r7, #16]
 8019c54:	685a      	ldr	r2, [r3, #4]
 8019c56:	4b11      	ldr	r3, [pc, #68]	; (8019c9c <vPortFree+0xa8>)
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	4013      	ands	r3, r2
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d019      	beq.n	8019c94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019c60:	693b      	ldr	r3, [r7, #16]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d115      	bne.n	8019c94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	685a      	ldr	r2, [r3, #4]
 8019c6c:	4b0b      	ldr	r3, [pc, #44]	; (8019c9c <vPortFree+0xa8>)
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	43db      	mvns	r3, r3
 8019c72:	401a      	ands	r2, r3
 8019c74:	693b      	ldr	r3, [r7, #16]
 8019c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019c78:	f7fe fed2 	bl	8018a20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019c7c:	693b      	ldr	r3, [r7, #16]
 8019c7e:	685a      	ldr	r2, [r3, #4]
 8019c80:	4b07      	ldr	r3, [pc, #28]	; (8019ca0 <vPortFree+0xac>)
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	4413      	add	r3, r2
 8019c86:	4a06      	ldr	r2, [pc, #24]	; (8019ca0 <vPortFree+0xac>)
 8019c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019c8a:	6938      	ldr	r0, [r7, #16]
 8019c8c:	f000 f86c 	bl	8019d68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8019c90:	f7fe fed4 	bl	8018a3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019c94:	bf00      	nop
 8019c96:	3718      	adds	r7, #24
 8019c98:	46bd      	mov	sp, r7
 8019c9a:	bd80      	pop	{r7, pc}
 8019c9c:	2000e3c4 	.word	0x2000e3c4
 8019ca0:	2000e3bc 	.word	0x2000e3bc

08019ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019ca4:	b480      	push	{r7}
 8019ca6:	b085      	sub	sp, #20
 8019ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019caa:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8019cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019cb0:	4b27      	ldr	r3, [pc, #156]	; (8019d50 <prvHeapInit+0xac>)
 8019cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	f003 0307 	and.w	r3, r3, #7
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d00c      	beq.n	8019cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	3307      	adds	r3, #7
 8019cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	f023 0307 	bic.w	r3, r3, #7
 8019cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019ccc:	68ba      	ldr	r2, [r7, #8]
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	1ad3      	subs	r3, r2, r3
 8019cd2:	4a1f      	ldr	r2, [pc, #124]	; (8019d50 <prvHeapInit+0xac>)
 8019cd4:	4413      	add	r3, r2
 8019cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019cdc:	4a1d      	ldr	r2, [pc, #116]	; (8019d54 <prvHeapInit+0xb0>)
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019ce2:	4b1c      	ldr	r3, [pc, #112]	; (8019d54 <prvHeapInit+0xb0>)
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	68ba      	ldr	r2, [r7, #8]
 8019cec:	4413      	add	r3, r2
 8019cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019cf0:	2208      	movs	r2, #8
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	1a9b      	subs	r3, r3, r2
 8019cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	f023 0307 	bic.w	r3, r3, #7
 8019cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	4a15      	ldr	r2, [pc, #84]	; (8019d58 <prvHeapInit+0xb4>)
 8019d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019d06:	4b14      	ldr	r3, [pc, #80]	; (8019d58 <prvHeapInit+0xb4>)
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	2200      	movs	r2, #0
 8019d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019d0e:	4b12      	ldr	r3, [pc, #72]	; (8019d58 <prvHeapInit+0xb4>)
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	2200      	movs	r2, #0
 8019d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	68fa      	ldr	r2, [r7, #12]
 8019d1e:	1ad2      	subs	r2, r2, r3
 8019d20:	683b      	ldr	r3, [r7, #0]
 8019d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019d24:	4b0c      	ldr	r3, [pc, #48]	; (8019d58 <prvHeapInit+0xb4>)
 8019d26:	681a      	ldr	r2, [r3, #0]
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019d2c:	683b      	ldr	r3, [r7, #0]
 8019d2e:	685b      	ldr	r3, [r3, #4]
 8019d30:	4a0a      	ldr	r2, [pc, #40]	; (8019d5c <prvHeapInit+0xb8>)
 8019d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019d34:	683b      	ldr	r3, [r7, #0]
 8019d36:	685b      	ldr	r3, [r3, #4]
 8019d38:	4a09      	ldr	r2, [pc, #36]	; (8019d60 <prvHeapInit+0xbc>)
 8019d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019d3c:	4b09      	ldr	r3, [pc, #36]	; (8019d64 <prvHeapInit+0xc0>)
 8019d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019d42:	601a      	str	r2, [r3, #0]
}
 8019d44:	bf00      	nop
 8019d46:	3714      	adds	r7, #20
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4e:	4770      	bx	lr
 8019d50:	2000c470 	.word	0x2000c470
 8019d54:	2000e3b0 	.word	0x2000e3b0
 8019d58:	2000e3b8 	.word	0x2000e3b8
 8019d5c:	2000e3c0 	.word	0x2000e3c0
 8019d60:	2000e3bc 	.word	0x2000e3bc
 8019d64:	2000e3c4 	.word	0x2000e3c4

08019d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019d68:	b480      	push	{r7}
 8019d6a:	b085      	sub	sp, #20
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019d70:	4b28      	ldr	r3, [pc, #160]	; (8019e14 <prvInsertBlockIntoFreeList+0xac>)
 8019d72:	60fb      	str	r3, [r7, #12]
 8019d74:	e002      	b.n	8019d7c <prvInsertBlockIntoFreeList+0x14>
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	60fb      	str	r3, [r7, #12]
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	687a      	ldr	r2, [r7, #4]
 8019d82:	429a      	cmp	r2, r3
 8019d84:	d8f7      	bhi.n	8019d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	685b      	ldr	r3, [r3, #4]
 8019d8e:	68ba      	ldr	r2, [r7, #8]
 8019d90:	4413      	add	r3, r2
 8019d92:	687a      	ldr	r2, [r7, #4]
 8019d94:	429a      	cmp	r2, r3
 8019d96:	d108      	bne.n	8019daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	685a      	ldr	r2, [r3, #4]
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	685b      	ldr	r3, [r3, #4]
 8019da0:	441a      	add	r2, r3
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	685b      	ldr	r3, [r3, #4]
 8019db2:	68ba      	ldr	r2, [r7, #8]
 8019db4:	441a      	add	r2, r3
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	429a      	cmp	r2, r3
 8019dbc:	d118      	bne.n	8019df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	681a      	ldr	r2, [r3, #0]
 8019dc2:	4b15      	ldr	r3, [pc, #84]	; (8019e18 <prvInsertBlockIntoFreeList+0xb0>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	429a      	cmp	r2, r3
 8019dc8:	d00d      	beq.n	8019de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	685a      	ldr	r2, [r3, #4]
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	685b      	ldr	r3, [r3, #4]
 8019dd4:	441a      	add	r2, r3
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	681a      	ldr	r2, [r3, #0]
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	601a      	str	r2, [r3, #0]
 8019de4:	e008      	b.n	8019df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019de6:	4b0c      	ldr	r3, [pc, #48]	; (8019e18 <prvInsertBlockIntoFreeList+0xb0>)
 8019de8:	681a      	ldr	r2, [r3, #0]
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	601a      	str	r2, [r3, #0]
 8019dee:	e003      	b.n	8019df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	681a      	ldr	r2, [r3, #0]
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019df8:	68fa      	ldr	r2, [r7, #12]
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	d002      	beq.n	8019e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	687a      	ldr	r2, [r7, #4]
 8019e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019e06:	bf00      	nop
 8019e08:	3714      	adds	r7, #20
 8019e0a:	46bd      	mov	sp, r7
 8019e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e10:	4770      	bx	lr
 8019e12:	bf00      	nop
 8019e14:	2000e3b0 	.word	0x2000e3b0
 8019e18:	2000e3b8 	.word	0x2000e3b8

08019e1c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8019e1c:	b5b0      	push	{r4, r5, r7, lr}
 8019e1e:	b096      	sub	sp, #88	; 0x58
 8019e20:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8019e22:	f7f5 f8be 	bl	800efa2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8019e26:	f000 f89d 	bl	8019f64 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8019e2a:	f000 f967 	bl	801a0fc <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8019e2e:	f000 f937 	bl	801a0a0 <MX_LPUART1_UART_Init>

	/* USER CODE BEGIN 2 */

	//TCP/IP stack initialization
	netInit();
 8019e32:	f7e7 fe07 	bl	8001a44 <netInit>

	//Configure the first network interface
	interface = &netInterface[0];
 8019e36:	4b3e      	ldr	r3, [pc, #248]	; (8019f30 <main+0x114>)
 8019e38:	657b      	str	r3, [r7, #84]	; 0x54

	//Get default PPP settings
	pppGetDefaultSettings(&pppSettings);
 8019e3a:	483e      	ldr	r0, [pc, #248]	; (8019f34 <main+0x118>)
 8019e3c:	f7f3 fa06 	bl	800d24c <pppGetDefaultSettings>

	//Default async control character map
	pppSettings.accm = 0x00000000;
 8019e40:	4b3c      	ldr	r3, [pc, #240]	; (8019f34 <main+0x118>)
 8019e42:	2200      	movs	r2, #0
 8019e44:	609a      	str	r2, [r3, #8]

	//Initialize PPP
	pppInit(&pppContext, &pppSettings);
 8019e46:	493b      	ldr	r1, [pc, #236]	; (8019f34 <main+0x118>)
 8019e48:	483b      	ldr	r0, [pc, #236]	; (8019f38 <main+0x11c>)
 8019e4a:	f7f3 fa1d 	bl	800d288 <pppInit>

	//Set interface name
	netSetInterfaceName(interface, APP_IF_NAME);
 8019e4e:	493b      	ldr	r1, [pc, #236]	; (8019f3c <main+0x120>)
 8019e50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019e52:	f7e7 febb 	bl	8001bcc <netSetInterfaceName>
	//Select the relevant UART driver
	netSetUartDriver(interface, &uartDriver);
 8019e56:	493a      	ldr	r1, [pc, #232]	; (8019f40 <main+0x124>)
 8019e58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019e5a:	f7e7 fef7 	bl	8001c4c <netSetUartDriver>

	//Initialize network interface
	netConfigInterface(interface);
 8019e5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019e60:	f7e7 ff12 	bl	8001c88 <netConfigInterface>

	//Set IPv4 host address
	ipv4StringToAddr(APP_IPV4_HOST_ADDR, &ipv4Addr);
 8019e64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019e68:	4619      	mov	r1, r3
 8019e6a:	4836      	ldr	r0, [pc, #216]	; (8019f44 <main+0x128>)
 8019e6c:	f7ee fd42 	bl	80088f4 <ipv4StringToAddr>
	ipv4SetHostAddr(interface, ipv4Addr);
 8019e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e72:	4619      	mov	r1, r3
 8019e74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019e76:	f7ee fa2f 	bl	80082d8 <ipv4SetHostAddr>

	//Set subnet mask
	ipv4StringToAddr(APP_IPV4_SUBNET_MASK, &ipv4Addr);
 8019e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019e7e:	4619      	mov	r1, r3
 8019e80:	4831      	ldr	r0, [pc, #196]	; (8019f48 <main+0x12c>)
 8019e82:	f7ee fd37 	bl	80088f4 <ipv4StringToAddr>
	ipv4SetSubnetMask(interface, ipv4Addr);
 8019e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e88:	4619      	mov	r1, r3
 8019e8a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019e8c:	f7ee fa74 	bl	8008378 <ipv4SetSubnetMask>

	//Set default gateway
	ipv4StringToAddr(APP_IPV4_DEFAULT_GATEWAY, &ipv4Addr);
 8019e90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019e94:	4619      	mov	r1, r3
 8019e96:	482d      	ldr	r0, [pc, #180]	; (8019f4c <main+0x130>)
 8019e98:	f7ee fd2c 	bl	80088f4 <ipv4StringToAddr>
	ipv4SetDefaultGateway(interface, ipv4Addr);
 8019e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019ea2:	f7ee faa1 	bl	80083e8 <ipv4SetDefaultGateway>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Task */
	osThreadDef(osMainTask, mainTask, osPriorityNormal, 0, 128);
 8019ea6:	4b2a      	ldr	r3, [pc, #168]	; (8019f50 <main+0x134>)
 8019ea8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019eac:	461d      	mov	r5, r3
 8019eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019eb2:	682b      	ldr	r3, [r5, #0]
 8019eb4:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osMainTask), NULL);
 8019eb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019eba:	2100      	movs	r1, #0
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7fd fa21 	bl	8017304 <osThreadCreate>
 8019ec2:	4602      	mov	r2, r0
 8019ec4:	4b23      	ldr	r3, [pc, #140]	; (8019f54 <main+0x138>)
 8019ec6:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(osModbusTask, modbusTask, osPriorityNormal, 0, 500);
 8019ec8:	4b23      	ldr	r3, [pc, #140]	; (8019f58 <main+0x13c>)
 8019eca:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019ece:	461d      	mov	r5, r3
 8019ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ed4:	682b      	ldr	r3, [r5, #0]
 8019ed6:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osModbusTask), NULL);
 8019ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019edc:	2100      	movs	r1, #0
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f7fd fa10 	bl	8017304 <osThreadCreate>
 8019ee4:	4602      	mov	r2, r0
 8019ee6:	4b1b      	ldr	r3, [pc, #108]	; (8019f54 <main+0x138>)
 8019ee8:	601a      	str	r2, [r3, #0]

	osThreadDef(osLedBlueTask, ledBlueTask, osPriorityNormal, 0, 32);
 8019eea:	4b1c      	ldr	r3, [pc, #112]	; (8019f5c <main+0x140>)
 8019eec:	f107 0414 	add.w	r4, r7, #20
 8019ef0:	461d      	mov	r5, r3
 8019ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ef6:	682b      	ldr	r3, [r5, #0]
 8019ef8:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osLedBlueTask), NULL);
 8019efa:	f107 0314 	add.w	r3, r7, #20
 8019efe:	2100      	movs	r1, #0
 8019f00:	4618      	mov	r0, r3
 8019f02:	f7fd f9ff 	bl	8017304 <osThreadCreate>
 8019f06:	4602      	mov	r2, r0
 8019f08:	4b12      	ldr	r3, [pc, #72]	; (8019f54 <main+0x138>)
 8019f0a:	601a      	str	r2, [r3, #0]

	osThreadDef(osLedRedTask, ledRedTask, osPriorityNormal, 0, 32);
 8019f0c:	4b14      	ldr	r3, [pc, #80]	; (8019f60 <main+0x144>)
 8019f0e:	463c      	mov	r4, r7
 8019f10:	461d      	mov	r5, r3
 8019f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f16:	682b      	ldr	r3, [r5, #0]
 8019f18:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osLedRedTask), NULL);
 8019f1a:	463b      	mov	r3, r7
 8019f1c:	2100      	movs	r1, #0
 8019f1e:	4618      	mov	r0, r3
 8019f20:	f7fd f9f0 	bl	8017304 <osThreadCreate>
 8019f24:	4602      	mov	r2, r0
 8019f26:	4b0b      	ldr	r3, [pc, #44]	; (8019f54 <main+0x138>)
 8019f28:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8019f2a:	f7fd f9c8 	bl	80172be <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8019f2e:	e7fe      	b.n	8019f2e <main+0x112>
 8019f30:	2000e464 	.word	0x2000e464
 8019f34:	200102fc 	.word	0x200102fc
 8019f38:	20010548 	.word	0x20010548
 8019f3c:	0801d430 	.word	0x0801d430
 8019f40:	0801d824 	.word	0x0801d824
 8019f44:	0801d438 	.word	0x0801d438
 8019f48:	0801d444 	.word	0x0801d444
 8019f4c:	0801d454 	.word	0x0801d454
 8019f50:	0801d46c 	.word	0x0801d46c
 8019f54:	20013cdc 	.word	0x20013cdc
 8019f58:	0801d490 	.word	0x0801d490
 8019f5c:	0801d4b4 	.word	0x0801d4b4
 8019f60:	0801d4d8 	.word	0x0801d4d8

08019f64 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b0ba      	sub	sp, #232	; 0xe8
 8019f68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8019f6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019f6e:	2244      	movs	r2, #68	; 0x44
 8019f70:	2100      	movs	r1, #0
 8019f72:	4618      	mov	r0, r3
 8019f74:	f001 f8f8 	bl	801b168 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8019f78:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	601a      	str	r2, [r3, #0]
 8019f80:	605a      	str	r2, [r3, #4]
 8019f82:	609a      	str	r2, [r3, #8]
 8019f84:	60da      	str	r2, [r3, #12]
 8019f86:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8019f88:	1d3b      	adds	r3, r7, #4
 8019f8a:	228c      	movs	r2, #140	; 0x8c
 8019f8c:	2100      	movs	r1, #0
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f001 f8ea 	bl	801b168 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8019f94:	f7f6 ff78 	bl	8010e88 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8019f98:	4b40      	ldr	r3, [pc, #256]	; (801a09c <SystemClock_Config+0x138>)
 8019f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019f9e:	4a3f      	ldr	r2, [pc, #252]	; (801a09c <SystemClock_Config+0x138>)
 8019fa0:	f023 0318 	bic.w	r3, r3, #24
 8019fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8019fa8:	2314      	movs	r3, #20
 8019faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8019fae:	2301      	movs	r3, #1
 8019fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8019fb4:	2301      	movs	r3, #1
 8019fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8019fba:	2300      	movs	r3, #0
 8019fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8019fc0:	2390      	movs	r3, #144	; 0x90
 8019fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8019fc6:	2302      	movs	r3, #2
 8019fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8019fcc:	2301      	movs	r3, #1
 8019fce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLM = 5;
 8019fd2:	2305      	movs	r3, #5
 8019fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLN = 71;
 8019fd8:	2347      	movs	r3, #71	; 0x47
 8019fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8019fde:	2302      	movs	r3, #2
 8019fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8019fe4:	2302      	movs	r3, #2
 8019fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8019fea:	2306      	movs	r3, #6
 8019fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8019ff0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	f7f6 ffdb 	bl	8010fb0 <HAL_RCC_OscConfig>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d001      	beq.n	801a004 <SystemClock_Config+0xa0>
		Error_Handler();
 801a000:	f000 f964 	bl	801a2cc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 801a004:	230f      	movs	r3, #15
 801a006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801a00a:	2303      	movs	r3, #3
 801a00c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 801a010:	2390      	movs	r3, #144	; 0x90
 801a012:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801a016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a01a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801a01e:	2300      	movs	r3, #0
 801a020:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 801a024:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a028:	2100      	movs	r1, #0
 801a02a:	4618      	mov	r0, r3
 801a02c:	f7f7 fbae 	bl	801178c <HAL_RCC_ClockConfig>
 801a030:	4603      	mov	r3, r0
 801a032:	2b00      	cmp	r3, #0
 801a034:	d001      	beq.n	801a03a <SystemClock_Config+0xd6>
		Error_Handler();
 801a036:	f000 f949 	bl	801a2cc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 801a03a:	f242 0322 	movw	r3, #8226	; 0x2022
 801a03e:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_USB;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 801a040:	2300      	movs	r3, #0
 801a042:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 801a044:	2300      	movs	r3, #0
 801a046:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801a048:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801a04c:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 801a04e:	2301      	movs	r3, #1
 801a050:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 801a052:	2305      	movs	r3, #5
 801a054:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 801a056:	2314      	movs	r3, #20
 801a058:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 801a05a:	2302      	movs	r3, #2
 801a05c:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801a05e:	2302      	movs	r3, #2
 801a060:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801a062:	2302      	movs	r3, #2
 801a064:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801a066:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801a06a:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 801a06c:	1d3b      	adds	r3, r7, #4
 801a06e:	4618      	mov	r0, r3
 801a070:	f7f7 fd90 	bl	8011b94 <HAL_RCCEx_PeriphCLKConfig>
 801a074:	4603      	mov	r3, r0
 801a076:	2b00      	cmp	r3, #0
 801a078:	d001      	beq.n	801a07e <SystemClock_Config+0x11a>
		Error_Handler();
 801a07a:	f000 f927 	bl	801a2cc <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 801a07e:	f44f 7000 	mov.w	r0, #512	; 0x200
 801a082:	f7f6 ff1f 	bl	8010ec4 <HAL_PWREx_ControlVoltageScaling>
 801a086:	4603      	mov	r3, r0
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d001      	beq.n	801a090 <SystemClock_Config+0x12c>
			!= HAL_OK) {
		Error_Handler();
 801a08c:	f000 f91e 	bl	801a2cc <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 801a090:	f7f8 f878 	bl	8012184 <HAL_RCCEx_EnableMSIPLLMode>
}
 801a094:	bf00      	nop
 801a096:	37e8      	adds	r7, #232	; 0xe8
 801a098:	46bd      	mov	sp, r7
 801a09a:	bd80      	pop	{r7, pc}
 801a09c:	40021000 	.word	0x40021000

0801a0a0 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 801a0a4:	4b12      	ldr	r3, [pc, #72]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0a6:	4a13      	ldr	r2, [pc, #76]	; (801a0f4 <MX_LPUART1_UART_Init+0x54>)
 801a0a8:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 209700;
 801a0aa:	4b11      	ldr	r3, [pc, #68]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0ac:	4a12      	ldr	r2, [pc, #72]	; (801a0f8 <MX_LPUART1_UART_Init+0x58>)
 801a0ae:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 801a0b0:	4b0f      	ldr	r3, [pc, #60]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a0b6:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801a0b8:	4b0d      	ldr	r3, [pc, #52]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 801a0be:	4b0c      	ldr	r3, [pc, #48]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801a0c4:	4b0a      	ldr	r3, [pc, #40]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0c6:	220c      	movs	r2, #12
 801a0c8:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801a0ca:	4b09      	ldr	r3, [pc, #36]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801a0d0:	4b07      	ldr	r3, [pc, #28]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801a0d6:	4b06      	ldr	r3, [pc, #24]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0d8:	2200      	movs	r2, #0
 801a0da:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 801a0dc:	4804      	ldr	r0, [pc, #16]	; (801a0f0 <MX_LPUART1_UART_Init+0x50>)
 801a0de:	f7f8 fa2b 	bl	8012538 <HAL_UART_Init>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d001      	beq.n	801a0ec <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 801a0e8:	f000 f8f0 	bl	801a2cc <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 801a0ec:	bf00      	nop
 801a0ee:	bd80      	pop	{r7, pc}
 801a0f0:	2001027c 	.word	0x2001027c
 801a0f4:	40008000 	.word	0x40008000
 801a0f8:	00033324 	.word	0x00033324

0801a0fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b08a      	sub	sp, #40	; 0x28
 801a100:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 801a102:	f107 0314 	add.w	r3, r7, #20
 801a106:	2200      	movs	r2, #0
 801a108:	601a      	str	r2, [r3, #0]
 801a10a:	605a      	str	r2, [r3, #4]
 801a10c:	609a      	str	r2, [r3, #8]
 801a10e:	60da      	str	r2, [r3, #12]
 801a110:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 801a112:	4b3d      	ldr	r3, [pc, #244]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a116:	4a3c      	ldr	r2, [pc, #240]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a118:	f043 0304 	orr.w	r3, r3, #4
 801a11c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a11e:	4b3a      	ldr	r3, [pc, #232]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a122:	f003 0304 	and.w	r3, r3, #4
 801a126:	613b      	str	r3, [r7, #16]
 801a128:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 801a12a:	4b37      	ldr	r3, [pc, #220]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a12e:	4a36      	ldr	r2, [pc, #216]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a134:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a136:	4b34      	ldr	r3, [pc, #208]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a13e:	60fb      	str	r3, [r7, #12]
 801a140:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 801a142:	4b31      	ldr	r3, [pc, #196]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a146:	4a30      	ldr	r2, [pc, #192]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a148:	f043 0302 	orr.w	r3, r3, #2
 801a14c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a14e:	4b2e      	ldr	r3, [pc, #184]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a152:	f003 0302 	and.w	r3, r3, #2
 801a156:	60bb      	str	r3, [r7, #8]
 801a158:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 801a15a:	4b2b      	ldr	r3, [pc, #172]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a15e:	4a2a      	ldr	r2, [pc, #168]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a164:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a166:	4b28      	ldr	r3, [pc, #160]	; (801a208 <MX_GPIO_Init+0x10c>)
 801a168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a16e:	607b      	str	r3, [r7, #4]
 801a170:	687b      	ldr	r3, [r7, #4]
	;
	HAL_PWREx_EnableVddIO2();
 801a172:	f7f6 ff0d 	bl	8010f90 <HAL_PWREx_EnableVddIO2>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 801a176:	2200      	movs	r2, #0
 801a178:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 801a17c:	4823      	ldr	r0, [pc, #140]	; (801a20c <MX_GPIO_Init+0x110>)
 801a17e:	f7f5 fa47 	bl	800f610 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 801a182:	2200      	movs	r2, #0
 801a184:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 801a188:	4821      	ldr	r0, [pc, #132]	; (801a210 <MX_GPIO_Init+0x114>)
 801a18a:	f7f5 fa41 	bl	800f610 <HAL_GPIO_WritePin>
	USB_PowerSwitchOn_Pin | SMPS_V1_Pin | SMPS_EN_Pin | SMPS_SW_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 801a18e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a192:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801a194:	4b1f      	ldr	r3, [pc, #124]	; (801a214 <MX_GPIO_Init+0x118>)
 801a196:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a198:	2300      	movs	r3, #0
 801a19a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801a19c:	f107 0314 	add.w	r3, r7, #20
 801a1a0:	4619      	mov	r1, r3
 801a1a2:	481d      	ldr	r0, [pc, #116]	; (801a218 <MX_GPIO_Init+0x11c>)
 801a1a4:	f7f5 f8a2 	bl	800f2ec <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 801a1a8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 801a1ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801a1ae:	2301      	movs	r3, #1
 801a1b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801a1ba:	f107 0314 	add.w	r3, r7, #20
 801a1be:	4619      	mov	r1, r3
 801a1c0:	4812      	ldr	r0, [pc, #72]	; (801a20c <MX_GPIO_Init+0x110>)
 801a1c2:	f7f5 f893 	bl	800f2ec <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin | SMPS_PG_Pin;
 801a1c6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 801a1ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801a1d4:	f107 0314 	add.w	r3, r7, #20
 801a1d8:	4619      	mov	r1, r3
 801a1da:	480d      	ldr	r0, [pc, #52]	; (801a210 <MX_GPIO_Init+0x114>)
 801a1dc:	f7f5 f886 	bl	800f2ec <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin | SMPS_V1_Pin | SMPS_EN_Pin
 801a1e0:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 801a1e4:	617b      	str	r3, [r7, #20]
			| SMPS_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801a1f2:	f107 0314 	add.w	r3, r7, #20
 801a1f6:	4619      	mov	r1, r3
 801a1f8:	4805      	ldr	r0, [pc, #20]	; (801a210 <MX_GPIO_Init+0x114>)
 801a1fa:	f7f5 f877 	bl	800f2ec <HAL_GPIO_Init>

}
 801a1fe:	bf00      	nop
 801a200:	3728      	adds	r7, #40	; 0x28
 801a202:	46bd      	mov	sp, r7
 801a204:	bd80      	pop	{r7, pc}
 801a206:	bf00      	nop
 801a208:	40021000 	.word	0x40021000
 801a20c:	48000400 	.word	0x48000400
 801a210:	48001800 	.word	0x48001800
 801a214:	10110000 	.word	0x10110000
 801a218:	48000800 	.word	0x48000800

0801a21c <mainTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void mainTask(void const * argument) {
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b082      	sub	sp, #8
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]

	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 801a224:	f000 fb96 	bl	801a954 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
 801a228:	e7fe      	b.n	801a228 <mainTask+0xc>
	...

0801a22c <ledBlueTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void ledBlueTask(void const * argument) {
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b082      	sub	sp, #8
 801a230:	af00      	add	r7, sp, #0
 801a232:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 801a234:	20c8      	movs	r0, #200	; 0xc8
 801a236:	f7fd f88c 	bl	8017352 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 801a23a:	2180      	movs	r1, #128	; 0x80
 801a23c:	4801      	ldr	r0, [pc, #4]	; (801a244 <ledBlueTask+0x18>)
 801a23e:	f7f5 f9ff 	bl	800f640 <HAL_GPIO_TogglePin>
		osDelay(200);
 801a242:	e7f7      	b.n	801a234 <ledBlueTask+0x8>
 801a244:	48000400 	.word	0x48000400

0801a248 <ledRedTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void ledRedTask(void const * argument) {
 801a248:	b580      	push	{r7, lr}
 801a24a:	b082      	sub	sp, #8
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(400);
 801a250:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801a254:	f7fd f87d 	bl	8017352 <osDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 801a258:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801a25c:	4801      	ldr	r0, [pc, #4]	; (801a264 <ledRedTask+0x1c>)
 801a25e:	f7f5 f9ef 	bl	800f640 <HAL_GPIO_TogglePin>
		osDelay(400);
 801a262:	e7f5      	b.n	801a250 <ledRedTask+0x8>
 801a264:	48000400 	.word	0x48000400

0801a268 <modbusTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void modbusTask(void const * argument) {
 801a268:	b580      	push	{r7, lr}
 801a26a:	b086      	sub	sp, #24
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	IpAddr ipAddr;
	uint8_t coilState[2];
	NetInterface *interface = &netInterface[0];
 801a270:	4b13      	ldr	r3, [pc, #76]	; (801a2c0 <modbusTask+0x58>)
 801a272:	617b      	str	r3, [r7, #20]

	//Establish a PPP connection
	pppConnect(interface);
 801a274:	6978      	ldr	r0, [r7, #20]
 801a276:	f7f3 f863 	bl	800d340 <pppConnect>

	//Initialize Modbus/TCP client context
	modbusClientInit(&modbusClientContext);
 801a27a:	4812      	ldr	r0, [pc, #72]	; (801a2c4 <modbusTask+0x5c>)
 801a27c:	f7ef fa4a 	bl	8009714 <modbusClientInit>

	//Resolve Modbus/TCP server name
	getHostByName(NULL, APP_MODBUS_SERVER_NAME, &ipAddr, 0);
 801a280:	f107 020c 	add.w	r2, r7, #12
 801a284:	2300      	movs	r3, #0
 801a286:	4910      	ldr	r1, [pc, #64]	; (801a2c8 <modbusTask+0x60>)
 801a288:	2000      	movs	r0, #0
 801a28a:	f7e8 fff7 	bl	800327c <getHostByName>

	modbusClientBindToInterface(&modbusClientContext, interface);
 801a28e:	6979      	ldr	r1, [r7, #20]
 801a290:	480c      	ldr	r0, [pc, #48]	; (801a2c4 <modbusTask+0x5c>)
 801a292:	f7ef fa63 	bl	800975c <modbusClientBindToInterface>

	//Establish connection with the Modbus/TCP server
	modbusClientConnect(&modbusClientContext, &ipAddr, APP_MODBUS_SERVER_PORT);
 801a296:	f107 030c 	add.w	r3, r7, #12
 801a29a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 801a29e:	4619      	mov	r1, r3
 801a2a0:	4808      	ldr	r0, [pc, #32]	; (801a2c4 <modbusTask+0x5c>)
 801a2a2:	f7ef fa6f 	bl	8009784 <modbusClientConnect>

	modbusClientReadCoils(&modbusClientContext, 10000, 2, coilState);
 801a2a6:	f107 0308 	add.w	r3, r7, #8
 801a2aa:	2202      	movs	r2, #2
 801a2ac:	f242 7110 	movw	r1, #10000	; 0x2710
 801a2b0:	4804      	ldr	r0, [pc, #16]	; (801a2c4 <modbusTask+0x5c>)
 801a2b2:	f7ef faca 	bl	800984a <modbusClientReadCoils>

	//Close Modbus/TCP connection
	modbusClientDisconnect(&modbusClientContext);
 801a2b6:	4803      	ldr	r0, [pc, #12]	; (801a2c4 <modbusTask+0x5c>)
 801a2b8:	f7ef fb17 	bl	80098ea <modbusClientDisconnect>

	/* Infinite loop */
	for (;;) {
 801a2bc:	e7fe      	b.n	801a2bc <modbusTask+0x54>
 801a2be:	bf00      	nop
 801a2c0:	2000e464 	.word	0x2000e464
 801a2c4:	20010314 	.word	0x20010314
 801a2c8:	0801d454 	.word	0x0801d454

0801a2cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 801a2cc:	b480      	push	{r7}
 801a2ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 801a2d0:	bf00      	nop
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d8:	4770      	bx	lr
	...

0801a2dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b082      	sub	sp, #8
 801a2e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801a2e2:	4b11      	ldr	r3, [pc, #68]	; (801a328 <HAL_MspInit+0x4c>)
 801a2e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a2e6:	4a10      	ldr	r2, [pc, #64]	; (801a328 <HAL_MspInit+0x4c>)
 801a2e8:	f043 0301 	orr.w	r3, r3, #1
 801a2ec:	6613      	str	r3, [r2, #96]	; 0x60
 801a2ee:	4b0e      	ldr	r3, [pc, #56]	; (801a328 <HAL_MspInit+0x4c>)
 801a2f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a2f2:	f003 0301 	and.w	r3, r3, #1
 801a2f6:	607b      	str	r3, [r7, #4]
 801a2f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801a2fa:	4b0b      	ldr	r3, [pc, #44]	; (801a328 <HAL_MspInit+0x4c>)
 801a2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2fe:	4a0a      	ldr	r2, [pc, #40]	; (801a328 <HAL_MspInit+0x4c>)
 801a300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a304:	6593      	str	r3, [r2, #88]	; 0x58
 801a306:	4b08      	ldr	r3, [pc, #32]	; (801a328 <HAL_MspInit+0x4c>)
 801a308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a30a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a30e:	603b      	str	r3, [r7, #0]
 801a310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801a312:	2200      	movs	r2, #0
 801a314:	210f      	movs	r1, #15
 801a316:	f06f 0001 	mvn.w	r0, #1
 801a31a:	f7f4 ffb0 	bl	800f27e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801a31e:	bf00      	nop
 801a320:	3708      	adds	r7, #8
 801a322:	46bd      	mov	sp, r7
 801a324:	bd80      	pop	{r7, pc}
 801a326:	bf00      	nop
 801a328:	40021000 	.word	0x40021000

0801a32c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b08a      	sub	sp, #40	; 0x28
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a334:	f107 0314 	add.w	r3, r7, #20
 801a338:	2200      	movs	r2, #0
 801a33a:	601a      	str	r2, [r3, #0]
 801a33c:	605a      	str	r2, [r3, #4]
 801a33e:	609a      	str	r2, [r3, #8]
 801a340:	60da      	str	r2, [r3, #12]
 801a342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	4a18      	ldr	r2, [pc, #96]	; (801a3ac <HAL_UART_MspInit+0x80>)
 801a34a:	4293      	cmp	r3, r2
 801a34c:	d12a      	bne.n	801a3a4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801a34e:	4b18      	ldr	r3, [pc, #96]	; (801a3b0 <HAL_UART_MspInit+0x84>)
 801a350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a352:	4a17      	ldr	r2, [pc, #92]	; (801a3b0 <HAL_UART_MspInit+0x84>)
 801a354:	f043 0301 	orr.w	r3, r3, #1
 801a358:	65d3      	str	r3, [r2, #92]	; 0x5c
 801a35a:	4b15      	ldr	r3, [pc, #84]	; (801a3b0 <HAL_UART_MspInit+0x84>)
 801a35c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a35e:	f003 0301 	and.w	r3, r3, #1
 801a362:	613b      	str	r3, [r7, #16]
 801a364:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801a366:	4b12      	ldr	r3, [pc, #72]	; (801a3b0 <HAL_UART_MspInit+0x84>)
 801a368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a36a:	4a11      	ldr	r2, [pc, #68]	; (801a3b0 <HAL_UART_MspInit+0x84>)
 801a36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a370:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a372:	4b0f      	ldr	r3, [pc, #60]	; (801a3b0 <HAL_UART_MspInit+0x84>)
 801a374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a37a:	60fb      	str	r3, [r7, #12]
 801a37c:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 801a37e:	f7f6 fe07 	bl	8010f90 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 801a382:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801a386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a388:	2302      	movs	r3, #2
 801a38a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a38c:	2300      	movs	r3, #0
 801a38e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a390:	2303      	movs	r3, #3
 801a392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801a394:	2308      	movs	r3, #8
 801a396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801a398:	f107 0314 	add.w	r3, r7, #20
 801a39c:	4619      	mov	r1, r3
 801a39e:	4805      	ldr	r0, [pc, #20]	; (801a3b4 <HAL_UART_MspInit+0x88>)
 801a3a0:	f7f4 ffa4 	bl	800f2ec <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 801a3a4:	bf00      	nop
 801a3a6:	3728      	adds	r7, #40	; 0x28
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	bd80      	pop	{r7, pc}
 801a3ac:	40008000 	.word	0x40008000
 801a3b0:	40021000 	.word	0x40021000
 801a3b4:	48001800 	.word	0x48001800

0801a3b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801a3b8:	b480      	push	{r7}
 801a3ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801a3bc:	bf00      	nop
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c4:	4770      	bx	lr

0801a3c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801a3c6:	b480      	push	{r7}
 801a3c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801a3ca:	e7fe      	b.n	801a3ca <HardFault_Handler+0x4>

0801a3cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801a3cc:	b480      	push	{r7}
 801a3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801a3d0:	e7fe      	b.n	801a3d0 <MemManage_Handler+0x4>

0801a3d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801a3d2:	b480      	push	{r7}
 801a3d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801a3d6:	e7fe      	b.n	801a3d6 <BusFault_Handler+0x4>

0801a3d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801a3d8:	b480      	push	{r7}
 801a3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801a3dc:	e7fe      	b.n	801a3dc <UsageFault_Handler+0x4>

0801a3de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801a3de:	b480      	push	{r7}
 801a3e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801a3e2:	bf00      	nop
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ea:	4770      	bx	lr

0801a3ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801a3f0:	f7f4 fe2a 	bl	800f048 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 801a3f4:	f7fe feb8 	bl	8019168 <xTaskGetSchedulerState>
 801a3f8:	4603      	mov	r3, r0
 801a3fa:	2b01      	cmp	r3, #1
 801a3fc:	d001      	beq.n	801a402 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 801a3fe:	f7ff faab 	bl	8019958 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801a402:	bf00      	nop
 801a404:	bd80      	pop	{r7, pc}
	...

0801a408 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 801a40c:	4802      	ldr	r0, [pc, #8]	; (801a418 <OTG_FS_IRQHandler+0x10>)
 801a40e:	f7f5 fbb1 	bl	800fb74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801a412:	bf00      	nop
 801a414:	bd80      	pop	{r7, pc}
 801a416:	bf00      	nop
 801a418:	20014188 	.word	0x20014188

0801a41c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b086      	sub	sp, #24
 801a420:	af00      	add	r7, sp, #0
 801a422:	60f8      	str	r0, [r7, #12]
 801a424:	60b9      	str	r1, [r7, #8]
 801a426:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801a428:	2300      	movs	r3, #0
 801a42a:	617b      	str	r3, [r7, #20]
 801a42c:	e00a      	b.n	801a444 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801a42e:	f3af 8000 	nop.w
 801a432:	4601      	mov	r1, r0
 801a434:	68bb      	ldr	r3, [r7, #8]
 801a436:	1c5a      	adds	r2, r3, #1
 801a438:	60ba      	str	r2, [r7, #8]
 801a43a:	b2ca      	uxtb	r2, r1
 801a43c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801a43e:	697b      	ldr	r3, [r7, #20]
 801a440:	3301      	adds	r3, #1
 801a442:	617b      	str	r3, [r7, #20]
 801a444:	697a      	ldr	r2, [r7, #20]
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	429a      	cmp	r2, r3
 801a44a:	dbf0      	blt.n	801a42e <_read+0x12>
	}

return len;
 801a44c:	687b      	ldr	r3, [r7, #4]
}
 801a44e:	4618      	mov	r0, r3
 801a450:	3718      	adds	r7, #24
 801a452:	46bd      	mov	sp, r7
 801a454:	bd80      	pop	{r7, pc}

0801a456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801a456:	b580      	push	{r7, lr}
 801a458:	b086      	sub	sp, #24
 801a45a:	af00      	add	r7, sp, #0
 801a45c:	60f8      	str	r0, [r7, #12]
 801a45e:	60b9      	str	r1, [r7, #8]
 801a460:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801a462:	2300      	movs	r3, #0
 801a464:	617b      	str	r3, [r7, #20]
 801a466:	e009      	b.n	801a47c <_write+0x26>
	{
		__io_putchar(*ptr++);
 801a468:	68bb      	ldr	r3, [r7, #8]
 801a46a:	1c5a      	adds	r2, r3, #1
 801a46c:	60ba      	str	r2, [r7, #8]
 801a46e:	781b      	ldrb	r3, [r3, #0]
 801a470:	4618      	mov	r0, r3
 801a472:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801a476:	697b      	ldr	r3, [r7, #20]
 801a478:	3301      	adds	r3, #1
 801a47a:	617b      	str	r3, [r7, #20]
 801a47c:	697a      	ldr	r2, [r7, #20]
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	429a      	cmp	r2, r3
 801a482:	dbf1      	blt.n	801a468 <_write+0x12>
	}
	return len;
 801a484:	687b      	ldr	r3, [r7, #4]
}
 801a486:	4618      	mov	r0, r3
 801a488:	3718      	adds	r7, #24
 801a48a:	46bd      	mov	sp, r7
 801a48c:	bd80      	pop	{r7, pc}

0801a48e <_close>:

int _close(int file)
{
 801a48e:	b480      	push	{r7}
 801a490:	b083      	sub	sp, #12
 801a492:	af00      	add	r7, sp, #0
 801a494:	6078      	str	r0, [r7, #4]
	return -1;
 801a496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a49a:	4618      	mov	r0, r3
 801a49c:	370c      	adds	r7, #12
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a4:	4770      	bx	lr

0801a4a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 801a4a6:	b480      	push	{r7}
 801a4a8:	b083      	sub	sp, #12
 801a4aa:	af00      	add	r7, sp, #0
 801a4ac:	6078      	str	r0, [r7, #4]
 801a4ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801a4b0:	683b      	ldr	r3, [r7, #0]
 801a4b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801a4b6:	605a      	str	r2, [r3, #4]
	return 0;
 801a4b8:	2300      	movs	r3, #0
}
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	370c      	adds	r7, #12
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c4:	4770      	bx	lr

0801a4c6 <_isatty>:

int _isatty(int file)
{
 801a4c6:	b480      	push	{r7}
 801a4c8:	b083      	sub	sp, #12
 801a4ca:	af00      	add	r7, sp, #0
 801a4cc:	6078      	str	r0, [r7, #4]
	return 1;
 801a4ce:	2301      	movs	r3, #1
}
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	370c      	adds	r7, #12
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4da:	4770      	bx	lr

0801a4dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801a4dc:	b480      	push	{r7}
 801a4de:	b085      	sub	sp, #20
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	60f8      	str	r0, [r7, #12]
 801a4e4:	60b9      	str	r1, [r7, #8]
 801a4e6:	607a      	str	r2, [r7, #4]
	return 0;
 801a4e8:	2300      	movs	r3, #0
}
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	3714      	adds	r7, #20
 801a4ee:	46bd      	mov	sp, r7
 801a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f4:	4770      	bx	lr
	...

0801a4f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b084      	sub	sp, #16
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801a500:	4b11      	ldr	r3, [pc, #68]	; (801a548 <_sbrk+0x50>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	2b00      	cmp	r3, #0
 801a506:	d102      	bne.n	801a50e <_sbrk+0x16>
		heap_end = &end;
 801a508:	4b0f      	ldr	r3, [pc, #60]	; (801a548 <_sbrk+0x50>)
 801a50a:	4a10      	ldr	r2, [pc, #64]	; (801a54c <_sbrk+0x54>)
 801a50c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801a50e:	4b0e      	ldr	r3, [pc, #56]	; (801a548 <_sbrk+0x50>)
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801a514:	4b0c      	ldr	r3, [pc, #48]	; (801a548 <_sbrk+0x50>)
 801a516:	681a      	ldr	r2, [r3, #0]
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	4413      	add	r3, r2
 801a51c:	466a      	mov	r2, sp
 801a51e:	4293      	cmp	r3, r2
 801a520:	d907      	bls.n	801a532 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801a522:	f000 fd35 	bl	801af90 <__errno>
 801a526:	4602      	mov	r2, r0
 801a528:	230c      	movs	r3, #12
 801a52a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 801a52c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a530:	e006      	b.n	801a540 <_sbrk+0x48>
	}

	heap_end += incr;
 801a532:	4b05      	ldr	r3, [pc, #20]	; (801a548 <_sbrk+0x50>)
 801a534:	681a      	ldr	r2, [r3, #0]
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	4413      	add	r3, r2
 801a53a:	4a03      	ldr	r2, [pc, #12]	; (801a548 <_sbrk+0x50>)
 801a53c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801a53e:	68fb      	ldr	r3, [r7, #12]
}
 801a540:	4618      	mov	r0, r3
 801a542:	3710      	adds	r7, #16
 801a544:	46bd      	mov	sp, r7
 801a546:	bd80      	pop	{r7, pc}
 801a548:	2000e3c8 	.word	0x2000e3c8
 801a54c:	20014450 	.word	0x20014450

0801a550 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 801a550:	b480      	push	{r7}
 801a552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801a554:	4b17      	ldr	r3, [pc, #92]	; (801a5b4 <SystemInit+0x64>)
 801a556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a55a:	4a16      	ldr	r2, [pc, #88]	; (801a5b4 <SystemInit+0x64>)
 801a55c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801a564:	4b14      	ldr	r3, [pc, #80]	; (801a5b8 <SystemInit+0x68>)
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	4a13      	ldr	r2, [pc, #76]	; (801a5b8 <SystemInit+0x68>)
 801a56a:	f043 0301 	orr.w	r3, r3, #1
 801a56e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801a570:	4b11      	ldr	r3, [pc, #68]	; (801a5b8 <SystemInit+0x68>)
 801a572:	2200      	movs	r2, #0
 801a574:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801a576:	4b10      	ldr	r3, [pc, #64]	; (801a5b8 <SystemInit+0x68>)
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	4a0f      	ldr	r2, [pc, #60]	; (801a5b8 <SystemInit+0x68>)
 801a57c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 801a580:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 801a584:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801a586:	4b0c      	ldr	r3, [pc, #48]	; (801a5b8 <SystemInit+0x68>)
 801a588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a58c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801a58e:	4b0a      	ldr	r3, [pc, #40]	; (801a5b8 <SystemInit+0x68>)
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	4a09      	ldr	r2, [pc, #36]	; (801a5b8 <SystemInit+0x68>)
 801a594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a598:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 801a59a:	4b07      	ldr	r3, [pc, #28]	; (801a5b8 <SystemInit+0x68>)
 801a59c:	2200      	movs	r2, #0
 801a59e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801a5a0:	4b04      	ldr	r3, [pc, #16]	; (801a5b4 <SystemInit+0x64>)
 801a5a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801a5a6:	609a      	str	r2, [r3, #8]
#endif
}
 801a5a8:	bf00      	nop
 801a5aa:	46bd      	mov	sp, r7
 801a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b0:	4770      	bx	lr
 801a5b2:	bf00      	nop
 801a5b4:	e000ed00 	.word	0xe000ed00
 801a5b8:	40021000 	.word	0x40021000

0801a5bc <__NVIC_SetPriorityGrouping>:
{
 801a5bc:	b480      	push	{r7}
 801a5be:	b085      	sub	sp, #20
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	f003 0307 	and.w	r3, r3, #7
 801a5ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a5cc:	4b0c      	ldr	r3, [pc, #48]	; (801a600 <__NVIC_SetPriorityGrouping+0x44>)
 801a5ce:	68db      	ldr	r3, [r3, #12]
 801a5d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a5d2:	68ba      	ldr	r2, [r7, #8]
 801a5d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801a5d8:	4013      	ands	r3, r2
 801a5da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a5e0:	68bb      	ldr	r3, [r7, #8]
 801a5e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801a5e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801a5e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a5ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a5ee:	4a04      	ldr	r2, [pc, #16]	; (801a600 <__NVIC_SetPriorityGrouping+0x44>)
 801a5f0:	68bb      	ldr	r3, [r7, #8]
 801a5f2:	60d3      	str	r3, [r2, #12]
}
 801a5f4:	bf00      	nop
 801a5f6:	3714      	adds	r7, #20
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5fe:	4770      	bx	lr
 801a600:	e000ed00 	.word	0xe000ed00

0801a604 <__NVIC_EnableIRQ>:
{
 801a604:	b480      	push	{r7}
 801a606:	b083      	sub	sp, #12
 801a608:	af00      	add	r7, sp, #0
 801a60a:	4603      	mov	r3, r0
 801a60c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a60e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a612:	2b00      	cmp	r3, #0
 801a614:	db0b      	blt.n	801a62e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a616:	79fb      	ldrb	r3, [r7, #7]
 801a618:	f003 021f 	and.w	r2, r3, #31
 801a61c:	4907      	ldr	r1, [pc, #28]	; (801a63c <__NVIC_EnableIRQ+0x38>)
 801a61e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a622:	095b      	lsrs	r3, r3, #5
 801a624:	2001      	movs	r0, #1
 801a626:	fa00 f202 	lsl.w	r2, r0, r2
 801a62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a62e:	bf00      	nop
 801a630:	370c      	adds	r7, #12
 801a632:	46bd      	mov	sp, r7
 801a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a638:	4770      	bx	lr
 801a63a:	bf00      	nop
 801a63c:	e000e100 	.word	0xe000e100

0801a640 <__NVIC_DisableIRQ>:
{
 801a640:	b480      	push	{r7}
 801a642:	b083      	sub	sp, #12
 801a644:	af00      	add	r7, sp, #0
 801a646:	4603      	mov	r3, r0
 801a648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a64a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a64e:	2b00      	cmp	r3, #0
 801a650:	db10      	blt.n	801a674 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a652:	79fb      	ldrb	r3, [r7, #7]
 801a654:	f003 021f 	and.w	r2, r3, #31
 801a658:	4909      	ldr	r1, [pc, #36]	; (801a680 <__NVIC_DisableIRQ+0x40>)
 801a65a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a65e:	095b      	lsrs	r3, r3, #5
 801a660:	2001      	movs	r0, #1
 801a662:	fa00 f202 	lsl.w	r2, r0, r2
 801a666:	3320      	adds	r3, #32
 801a668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801a66c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801a670:	f3bf 8f6f 	isb	sy
}
 801a674:	bf00      	nop
 801a676:	370c      	adds	r7, #12
 801a678:	46bd      	mov	sp, r7
 801a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67e:	4770      	bx	lr
 801a680:	e000e100 	.word	0xe000e100

0801a684 <__NVIC_SetPriority>:
{
 801a684:	b480      	push	{r7}
 801a686:	b083      	sub	sp, #12
 801a688:	af00      	add	r7, sp, #0
 801a68a:	4603      	mov	r3, r0
 801a68c:	6039      	str	r1, [r7, #0]
 801a68e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a694:	2b00      	cmp	r3, #0
 801a696:	db0a      	blt.n	801a6ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	b2da      	uxtb	r2, r3
 801a69c:	490c      	ldr	r1, [pc, #48]	; (801a6d0 <__NVIC_SetPriority+0x4c>)
 801a69e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a6a2:	0112      	lsls	r2, r2, #4
 801a6a4:	b2d2      	uxtb	r2, r2
 801a6a6:	440b      	add	r3, r1
 801a6a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801a6ac:	e00a      	b.n	801a6c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a6ae:	683b      	ldr	r3, [r7, #0]
 801a6b0:	b2da      	uxtb	r2, r3
 801a6b2:	4908      	ldr	r1, [pc, #32]	; (801a6d4 <__NVIC_SetPriority+0x50>)
 801a6b4:	79fb      	ldrb	r3, [r7, #7]
 801a6b6:	f003 030f 	and.w	r3, r3, #15
 801a6ba:	3b04      	subs	r3, #4
 801a6bc:	0112      	lsls	r2, r2, #4
 801a6be:	b2d2      	uxtb	r2, r2
 801a6c0:	440b      	add	r3, r1
 801a6c2:	761a      	strb	r2, [r3, #24]
}
 801a6c4:	bf00      	nop
 801a6c6:	370c      	adds	r7, #12
 801a6c8:	46bd      	mov	sp, r7
 801a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ce:	4770      	bx	lr
 801a6d0:	e000e100 	.word	0xe000e100
 801a6d4:	e000ed00 	.word	0xe000ed00

0801a6d8 <NVIC_EncodePriority>:
{
 801a6d8:	b480      	push	{r7}
 801a6da:	b089      	sub	sp, #36	; 0x24
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	60f8      	str	r0, [r7, #12]
 801a6e0:	60b9      	str	r1, [r7, #8]
 801a6e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	f003 0307 	and.w	r3, r3, #7
 801a6ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a6ec:	69fb      	ldr	r3, [r7, #28]
 801a6ee:	f1c3 0307 	rsb	r3, r3, #7
 801a6f2:	2b04      	cmp	r3, #4
 801a6f4:	bf28      	it	cs
 801a6f6:	2304      	movcs	r3, #4
 801a6f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a6fa:	69fb      	ldr	r3, [r7, #28]
 801a6fc:	3304      	adds	r3, #4
 801a6fe:	2b06      	cmp	r3, #6
 801a700:	d902      	bls.n	801a708 <NVIC_EncodePriority+0x30>
 801a702:	69fb      	ldr	r3, [r7, #28]
 801a704:	3b03      	subs	r3, #3
 801a706:	e000      	b.n	801a70a <NVIC_EncodePriority+0x32>
 801a708:	2300      	movs	r3, #0
 801a70a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a70c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a710:	69bb      	ldr	r3, [r7, #24]
 801a712:	fa02 f303 	lsl.w	r3, r2, r3
 801a716:	43da      	mvns	r2, r3
 801a718:	68bb      	ldr	r3, [r7, #8]
 801a71a:	401a      	ands	r2, r3
 801a71c:	697b      	ldr	r3, [r7, #20]
 801a71e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a724:	697b      	ldr	r3, [r7, #20]
 801a726:	fa01 f303 	lsl.w	r3, r1, r3
 801a72a:	43d9      	mvns	r1, r3
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a730:	4313      	orrs	r3, r2
}
 801a732:	4618      	mov	r0, r3
 801a734:	3724      	adds	r7, #36	; 0x24
 801a736:	46bd      	mov	sp, r7
 801a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a73c:	4770      	bx	lr
	...

0801a740 <uartInit>:
 * @brief UART configuration
 * @return Error code
 **/

error_t uartInit(void)
{
 801a740:	b580      	push	{r7, lr}
 801a742:	b088      	sub	sp, #32
 801a744:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStructure;

   //Enable PWR clock
   __HAL_RCC_PWR_CLK_ENABLE();
 801a746:	4b3c      	ldr	r3, [pc, #240]	; (801a838 <uartInit+0xf8>)
 801a748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a74a:	4a3b      	ldr	r2, [pc, #236]	; (801a838 <uartInit+0xf8>)
 801a74c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a750:	6593      	str	r3, [r2, #88]	; 0x58
 801a752:	4b39      	ldr	r3, [pc, #228]	; (801a838 <uartInit+0xf8>)
 801a754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a75a:	60bb      	str	r3, [r7, #8]
 801a75c:	68bb      	ldr	r3, [r7, #8]

   //Enable GPIOA clocks
   __HAL_RCC_GPIOA_CLK_ENABLE();
 801a75e:	4b36      	ldr	r3, [pc, #216]	; (801a838 <uartInit+0xf8>)
 801a760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a762:	4a35      	ldr	r2, [pc, #212]	; (801a838 <uartInit+0xf8>)
 801a764:	f043 0301 	orr.w	r3, r3, #1
 801a768:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a76a:	4b33      	ldr	r3, [pc, #204]	; (801a838 <uartInit+0xf8>)
 801a76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a76e:	f003 0301 	and.w	r3, r3, #1
 801a772:	607b      	str	r3, [r7, #4]
 801a774:	687b      	ldr	r3, [r7, #4]

   //Enable USART1 clock
   __HAL_RCC_USART2_CLK_ENABLE();
 801a776:	4b30      	ldr	r3, [pc, #192]	; (801a838 <uartInit+0xf8>)
 801a778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a77a:	4a2f      	ldr	r2, [pc, #188]	; (801a838 <uartInit+0xf8>)
 801a77c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a780:	6593      	str	r3, [r2, #88]	; 0x58
 801a782:	4b2d      	ldr	r3, [pc, #180]	; (801a838 <uartInit+0xf8>)
 801a784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a78a:	603b      	str	r3, [r7, #0]
 801a78c:	683b      	ldr	r3, [r7, #0]

   //Configure USART1_TX (PA2) and USART1_RX (PA3)
   GPIO_InitStructure.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 801a78e:	230c      	movs	r3, #12
 801a790:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 801a792:	2302      	movs	r3, #2
 801a794:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 801a796:	2300      	movs	r3, #0
 801a798:	617b      	str	r3, [r7, #20]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801a79a:	2301      	movs	r3, #1
 801a79c:	61bb      	str	r3, [r7, #24]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 801a79e:	2307      	movs	r3, #7
 801a7a0:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 801a7a2:	f107 030c 	add.w	r3, r7, #12
 801a7a6:	4619      	mov	r1, r3
 801a7a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a7ac:	f7f4 fd9e 	bl	800f2ec <HAL_GPIO_Init>

   //Configure USART2
   UART_Handle.Instance = USART2;
 801a7b0:	4b22      	ldr	r3, [pc, #136]	; (801a83c <uartInit+0xfc>)
 801a7b2:	4a23      	ldr	r2, [pc, #140]	; (801a840 <uartInit+0x100>)
 801a7b4:	601a      	str	r2, [r3, #0]
   UART_Handle.Init.BaudRate = 115200;
 801a7b6:	4b21      	ldr	r3, [pc, #132]	; (801a83c <uartInit+0xfc>)
 801a7b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801a7bc:	605a      	str	r2, [r3, #4]
   UART_Handle.Init.WordLength = UART_WORDLENGTH_8B;
 801a7be:	4b1f      	ldr	r3, [pc, #124]	; (801a83c <uartInit+0xfc>)
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	609a      	str	r2, [r3, #8]
   UART_Handle.Init.StopBits = UART_STOPBITS_1;
 801a7c4:	4b1d      	ldr	r3, [pc, #116]	; (801a83c <uartInit+0xfc>)
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	60da      	str	r2, [r3, #12]
   UART_Handle.Init.Parity = UART_PARITY_NONE;
 801a7ca:	4b1c      	ldr	r3, [pc, #112]	; (801a83c <uartInit+0xfc>)
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	611a      	str	r2, [r3, #16]
   UART_Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801a7d0:	4b1a      	ldr	r3, [pc, #104]	; (801a83c <uartInit+0xfc>)
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	619a      	str	r2, [r3, #24]
   UART_Handle.Init.Mode = UART_MODE_TX_RX;
 801a7d6:	4b19      	ldr	r3, [pc, #100]	; (801a83c <uartInit+0xfc>)
 801a7d8:	220c      	movs	r2, #12
 801a7da:	615a      	str	r2, [r3, #20]
   HAL_UART_Init(&UART_Handle);
 801a7dc:	4817      	ldr	r0, [pc, #92]	; (801a83c <uartInit+0xfc>)
 801a7de:	f7f7 feab 	bl	8012538 <HAL_UART_Init>

   //Configure USART2 interrupts
   __HAL_UART_ENABLE_IT(&UART_Handle, UART_IT_TXE);
 801a7e2:	4b16      	ldr	r3, [pc, #88]	; (801a83c <uartInit+0xfc>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	681a      	ldr	r2, [r3, #0]
 801a7e8:	4b14      	ldr	r3, [pc, #80]	; (801a83c <uartInit+0xfc>)
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801a7f0:	601a      	str	r2, [r3, #0]
   __HAL_UART_ENABLE_IT(&UART_Handle, UART_IT_RXNE);
 801a7f2:	4b12      	ldr	r3, [pc, #72]	; (801a83c <uartInit+0xfc>)
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	681a      	ldr	r2, [r3, #0]
 801a7f8:	4b10      	ldr	r3, [pc, #64]	; (801a83c <uartInit+0xfc>)
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	f042 0220 	orr.w	r2, r2, #32
 801a800:	601a      	str	r2, [r3, #0]

   //Set priority grouping (4 bits for pre-emption priority, no bits
   //for subpriority)
   NVIC_SetPriorityGrouping(3);
 801a802:	2003      	movs	r0, #3
 801a804:	f7ff feda 	bl	801a5bc <__NVIC_SetPriorityGrouping>

   //Configure Ethernet interrupt priority
   NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(3, 12, 0));
 801a808:	2200      	movs	r2, #0
 801a80a:	210c      	movs	r1, #12
 801a80c:	2003      	movs	r0, #3
 801a80e:	f7ff ff63 	bl	801a6d8 <NVIC_EncodePriority>
 801a812:	4603      	mov	r3, r0
 801a814:	4619      	mov	r1, r3
 801a816:	2026      	movs	r0, #38	; 0x26
 801a818:	f7ff ff34 	bl	801a684 <__NVIC_SetPriority>

   //Enable USART1
   __HAL_UART_ENABLE(&UART_Handle);
 801a81c:	4b07      	ldr	r3, [pc, #28]	; (801a83c <uartInit+0xfc>)
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	681a      	ldr	r2, [r3, #0]
 801a822:	4b06      	ldr	r3, [pc, #24]	; (801a83c <uartInit+0xfc>)
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	f042 0201 	orr.w	r2, r2, #1
 801a82a:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 801a82c:	2300      	movs	r3, #0
}
 801a82e:	4618      	mov	r0, r3
 801a830:	3720      	adds	r7, #32
 801a832:	46bd      	mov	sp, r7
 801a834:	bd80      	pop	{r7, pc}
 801a836:	bf00      	nop
 801a838:	40021000 	.word	0x40021000
 801a83c:	2000e3cc 	.word	0x2000e3cc
 801a840:	40004400 	.word	0x40004400

0801a844 <uartEnableIrq>:
/**
 * @brief Enable UART interrupts
 **/

void uartEnableIrq(void)
{
 801a844:	b580      	push	{r7, lr}
 801a846:	af00      	add	r7, sp, #0
   //Enable USART1 interrupts
   NVIC_EnableIRQ(USART2_IRQn);
 801a848:	2026      	movs	r0, #38	; 0x26
 801a84a:	f7ff fedb 	bl	801a604 <__NVIC_EnableIRQ>
}
 801a84e:	bf00      	nop
 801a850:	bd80      	pop	{r7, pc}

0801a852 <uartDisableIrq>:
/**
 * @brief Disable UART interrupts
 **/

void uartDisableIrq(void)
{
 801a852:	b580      	push	{r7, lr}
 801a854:	af00      	add	r7, sp, #0
   //Disable USART2 interrupt
   NVIC_DisableIRQ(USART2_IRQn);
 801a856:	2026      	movs	r0, #38	; 0x26
 801a858:	f7ff fef2 	bl	801a640 <__NVIC_DisableIRQ>
}
 801a85c:	bf00      	nop
 801a85e:	bd80      	pop	{r7, pc}

0801a860 <uartStartTx>:
/**
 * @brief Start transmission
 **/

void uartStartTx(void)
{
 801a860:	b480      	push	{r7}
 801a862:	af00      	add	r7, sp, #0
   //Enable TXE interrupt
   __HAL_UART_ENABLE_IT(&UART_Handle, UART_IT_TXE);
 801a864:	4b06      	ldr	r3, [pc, #24]	; (801a880 <uartStartTx+0x20>)
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	681a      	ldr	r2, [r3, #0]
 801a86a:	4b05      	ldr	r3, [pc, #20]	; (801a880 <uartStartTx+0x20>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801a872:	601a      	str	r2, [r3, #0]
}
 801a874:	bf00      	nop
 801a876:	46bd      	mov	sp, r7
 801a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87c:	4770      	bx	lr
 801a87e:	bf00      	nop
 801a880:	2000e3cc 	.word	0x2000e3cc

0801a884 <USART2_IRQHandler>:
/**
 * @brief UART interrupt handler
 **/

void USART2_IRQHandler(void)
{
 801a884:	b580      	push	{r7, lr}
 801a886:	b084      	sub	sp, #16
 801a888:	af00      	add	r7, sp, #0

   //Enter interrupt service routine
   osEnterIsr();

   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 801a88a:	2300      	movs	r3, #0
 801a88c:	60fb      	str	r3, [r7, #12]

   //Point to the PPP network interface
   interface = &netInterface[0];
 801a88e:	4b2f      	ldr	r3, [pc, #188]	; (801a94c <USART2_IRQHandler+0xc8>)
 801a890:	60bb      	str	r3, [r7, #8]

   //TXE interrupt?
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_TXE) != RESET &&
 801a892:	4b2f      	ldr	r3, [pc, #188]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	69db      	ldr	r3, [r3, #28]
 801a898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a89c:	2b80      	cmp	r3, #128	; 0x80
 801a89e:	d121      	bne.n	801a8e4 <USART2_IRQHandler+0x60>
      __HAL_UART_GET_IT_SOURCE(&UART_Handle, UART_IT_TXE) != RESET)
 801a8a0:	4b2b      	ldr	r3, [pc, #172]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_TXE) != RESET &&
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d01a      	beq.n	801a8e4 <USART2_IRQHandler+0x60>
   {
      //Get next character
      flag |= pppHdlcDriverReadTxQueue(interface, &c);
 801a8ae:	1d3b      	adds	r3, r7, #4
 801a8b0:	4619      	mov	r1, r3
 801a8b2:	68b8      	ldr	r0, [r7, #8]
 801a8b4:	f7f3 ffd2 	bl	800e85c <pppHdlcDriverReadTxQueue>
 801a8b8:	4602      	mov	r2, r0
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	4313      	orrs	r3, r2
 801a8be:	60fb      	str	r3, [r7, #12]

      //Valid character read?
      if(c != EOF)
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a8c6:	d005      	beq.n	801a8d4 <USART2_IRQHandler+0x50>
      {
         //Send data byte
         UART_Handle.Instance->TDR = c;
 801a8c8:	687a      	ldr	r2, [r7, #4]
 801a8ca:	4b21      	ldr	r3, [pc, #132]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	b292      	uxth	r2, r2
 801a8d0:	851a      	strh	r2, [r3, #40]	; 0x28
 801a8d2:	e007      	b.n	801a8e4 <USART2_IRQHandler+0x60>
      }
      else
      {
         //Disable TXE interrupt
         __HAL_UART_DISABLE_IT(&UART_Handle, UART_IT_TXE);
 801a8d4:	4b1e      	ldr	r3, [pc, #120]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	681a      	ldr	r2, [r3, #0]
 801a8da:	4b1d      	ldr	r3, [pc, #116]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a8e2:	601a      	str	r2, [r3, #0]
      }
   }

   //RXNE interrupt?
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_RXNE) != RESET &&
 801a8e4:	4b1a      	ldr	r3, [pc, #104]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	69db      	ldr	r3, [r3, #28]
 801a8ea:	f003 0320 	and.w	r3, r3, #32
 801a8ee:	2b20      	cmp	r3, #32
 801a8f0:	d115      	bne.n	801a91e <USART2_IRQHandler+0x9a>
      __HAL_UART_GET_IT_SOURCE(&UART_Handle, UART_IT_RXNE) != RESET)
 801a8f2:	4b17      	ldr	r3, [pc, #92]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	f003 0320 	and.w	r3, r3, #32
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_RXNE) != RESET &&
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d00e      	beq.n	801a91e <USART2_IRQHandler+0x9a>
   {
      //Read data byte
      c = UART_Handle.Instance->RDR;
 801a900:	4b13      	ldr	r3, [pc, #76]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a906:	b29b      	uxth	r3, r3
 801a908:	607b      	str	r3, [r7, #4]
      //Process incoming character
      flag |= pppHdlcDriverWriteRxQueue(interface, c);
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	b2db      	uxtb	r3, r3
 801a90e:	4619      	mov	r1, r3
 801a910:	68b8      	ldr	r0, [r7, #8]
 801a912:	f7f3 fff9 	bl	800e908 <pppHdlcDriverWriteRxQueue>
 801a916:	4602      	mov	r2, r0
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	4313      	orrs	r3, r2
 801a91c:	60fb      	str	r3, [r7, #12]
   }

   //ORE interrupt?
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_ORE) != RESET &&
 801a91e:	4b0c      	ldr	r3, [pc, #48]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	69db      	ldr	r3, [r3, #28]
 801a924:	f003 0308 	and.w	r3, r3, #8
 801a928:	2b08      	cmp	r3, #8
 801a92a:	d10a      	bne.n	801a942 <USART2_IRQHandler+0xbe>
      __HAL_UART_GET_IT_SOURCE(&UART_Handle, UART_IT_RXNE) != RESET)
 801a92c:	4b08      	ldr	r3, [pc, #32]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	f003 0320 	and.w	r3, r3, #32
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_ORE) != RESET &&
 801a936:	2b00      	cmp	r3, #0
 801a938:	d003      	beq.n	801a942 <USART2_IRQHandler+0xbe>
   {
      //Clear ORE interrupt flag
      __HAL_UART_CLEAR_OREFLAG(&UART_Handle);
 801a93a:	4b05      	ldr	r3, [pc, #20]	; (801a950 <USART2_IRQHandler+0xcc>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	2208      	movs	r2, #8
 801a940:	621a      	str	r2, [r3, #32]
   }

   //Leave interrupt service routine
   osExitIsr(flag);
}
 801a942:	bf00      	nop
 801a944:	3710      	adds	r7, #16
 801a946:	46bd      	mov	sp, r7
 801a948:	bd80      	pop	{r7, pc}
 801a94a:	bf00      	nop
 801a94c:	2000e464 	.word	0x2000e464
 801a950:	2000e3cc 	.word	0x2000e3cc

0801a954 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801a954:	b580      	push	{r7, lr}
 801a956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801a958:	2201      	movs	r2, #1
 801a95a:	490e      	ldr	r1, [pc, #56]	; (801a994 <MX_USB_HOST_Init+0x40>)
 801a95c:	480e      	ldr	r0, [pc, #56]	; (801a998 <MX_USB_HOST_Init+0x44>)
 801a95e:	f7fb f847 	bl	80159f0 <USBH_Init>
 801a962:	4603      	mov	r3, r0
 801a964:	2b00      	cmp	r3, #0
 801a966:	d001      	beq.n	801a96c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801a968:	f7ff fcb0 	bl	801a2cc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 801a96c:	490b      	ldr	r1, [pc, #44]	; (801a99c <MX_USB_HOST_Init+0x48>)
 801a96e:	480a      	ldr	r0, [pc, #40]	; (801a998 <MX_USB_HOST_Init+0x44>)
 801a970:	f7fb f8da 	bl	8015b28 <USBH_RegisterClass>
 801a974:	4603      	mov	r3, r0
 801a976:	2b00      	cmp	r3, #0
 801a978:	d001      	beq.n	801a97e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801a97a:	f7ff fca7 	bl	801a2cc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801a97e:	4806      	ldr	r0, [pc, #24]	; (801a998 <MX_USB_HOST_Init+0x44>)
 801a980:	f7fb f977 	bl	8015c72 <USBH_Start>
 801a984:	4603      	mov	r3, r0
 801a986:	2b00      	cmp	r3, #0
 801a988:	d001      	beq.n	801a98e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801a98a:	f7ff fc9f 	bl	801a2cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801a98e:	bf00      	nop
 801a990:	bd80      	pop	{r7, pc}
 801a992:	bf00      	nop
 801a994:	0801a9a1 	.word	0x0801a9a1
 801a998:	20013ce0 	.word	0x20013ce0
 801a99c:	20000030 	.word	0x20000030

0801a9a0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801a9a0:	b480      	push	{r7}
 801a9a2:	b083      	sub	sp, #12
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
 801a9a8:	460b      	mov	r3, r1
 801a9aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801a9ac:	78fb      	ldrb	r3, [r7, #3]
 801a9ae:	3b01      	subs	r3, #1
 801a9b0:	2b04      	cmp	r3, #4
 801a9b2:	d819      	bhi.n	801a9e8 <USBH_UserProcess+0x48>
 801a9b4:	a201      	add	r2, pc, #4	; (adr r2, 801a9bc <USBH_UserProcess+0x1c>)
 801a9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9ba:	bf00      	nop
 801a9bc:	0801a9e9 	.word	0x0801a9e9
 801a9c0:	0801a9d9 	.word	0x0801a9d9
 801a9c4:	0801a9e9 	.word	0x0801a9e9
 801a9c8:	0801a9e1 	.word	0x0801a9e1
 801a9cc:	0801a9d1 	.word	0x0801a9d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801a9d0:	4b09      	ldr	r3, [pc, #36]	; (801a9f8 <USBH_UserProcess+0x58>)
 801a9d2:	2203      	movs	r2, #3
 801a9d4:	701a      	strb	r2, [r3, #0]
  break;
 801a9d6:	e008      	b.n	801a9ea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801a9d8:	4b07      	ldr	r3, [pc, #28]	; (801a9f8 <USBH_UserProcess+0x58>)
 801a9da:	2202      	movs	r2, #2
 801a9dc:	701a      	strb	r2, [r3, #0]
  break;
 801a9de:	e004      	b.n	801a9ea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801a9e0:	4b05      	ldr	r3, [pc, #20]	; (801a9f8 <USBH_UserProcess+0x58>)
 801a9e2:	2201      	movs	r2, #1
 801a9e4:	701a      	strb	r2, [r3, #0]
  break;
 801a9e6:	e000      	b.n	801a9ea <USBH_UserProcess+0x4a>

  default:
  break;
 801a9e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801a9ea:	bf00      	nop
 801a9ec:	370c      	adds	r7, #12
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f4:	4770      	bx	lr
 801a9f6:	bf00      	nop
 801a9f8:	2000e44c 	.word	0x2000e44c

0801a9fc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b08a      	sub	sp, #40	; 0x28
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801aa04:	f107 0314 	add.w	r3, r7, #20
 801aa08:	2200      	movs	r2, #0
 801aa0a:	601a      	str	r2, [r3, #0]
 801aa0c:	605a      	str	r2, [r3, #4]
 801aa0e:	609a      	str	r2, [r3, #8]
 801aa10:	60da      	str	r2, [r3, #12]
 801aa12:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801aa1c:	d14e      	bne.n	801aabc <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801aa1e:	4b29      	ldr	r3, [pc, #164]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa22:	4a28      	ldr	r2, [pc, #160]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa24:	f043 0301 	orr.w	r3, r3, #1
 801aa28:	64d3      	str	r3, [r2, #76]	; 0x4c
 801aa2a:	4b26      	ldr	r3, [pc, #152]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa2e:	f003 0301 	and.w	r3, r3, #1
 801aa32:	613b      	str	r3, [r7, #16]
 801aa34:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801aa36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801aa3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801aa3c:	2302      	movs	r3, #2
 801aa3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aa40:	2300      	movs	r3, #0
 801aa42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801aa44:	2303      	movs	r3, #3
 801aa46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801aa48:	230a      	movs	r3, #10
 801aa4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801aa4c:	f107 0314 	add.w	r3, r7, #20
 801aa50:	4619      	mov	r1, r3
 801aa52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801aa56:	f7f4 fc49 	bl	800f2ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801aa5a:	4b1a      	ldr	r3, [pc, #104]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa5e:	4a19      	ldr	r2, [pc, #100]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801aa64:	64d3      	str	r3, [r2, #76]	; 0x4c
 801aa66:	4b17      	ldr	r3, [pc, #92]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801aa6e:	60fb      	str	r3, [r7, #12]
 801aa70:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801aa72:	4b14      	ldr	r3, [pc, #80]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aa76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d114      	bne.n	801aaa8 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801aa7e:	4b11      	ldr	r3, [pc, #68]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aa82:	4a10      	ldr	r2, [pc, #64]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801aa88:	6593      	str	r3, [r2, #88]	; 0x58
 801aa8a:	4b0e      	ldr	r3, [pc, #56]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aa8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801aa92:	60bb      	str	r3, [r7, #8]
 801aa94:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 801aa96:	f7f6 fa6b 	bl	8010f70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801aa9a:	4b0a      	ldr	r3, [pc, #40]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aa9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aa9e:	4a09      	ldr	r2, [pc, #36]	; (801aac4 <HAL_HCD_MspInit+0xc8>)
 801aaa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801aaa4:	6593      	str	r3, [r2, #88]	; 0x58
 801aaa6:	e001      	b.n	801aaac <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801aaa8:	f7f6 fa62 	bl	8010f70 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801aaac:	2200      	movs	r2, #0
 801aaae:	2105      	movs	r1, #5
 801aab0:	2043      	movs	r0, #67	; 0x43
 801aab2:	f7f4 fbe4 	bl	800f27e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801aab6:	2043      	movs	r0, #67	; 0x43
 801aab8:	f7f4 fbfd 	bl	800f2b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801aabc:	bf00      	nop
 801aabe:	3728      	adds	r7, #40	; 0x28
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}
 801aac4:	40021000 	.word	0x40021000

0801aac8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	b082      	sub	sp, #8
 801aacc:	af00      	add	r7, sp, #0
 801aace:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801aad6:	4618      	mov	r0, r3
 801aad8:	f7fb fc21 	bl	801631e <USBH_LL_IncTimer>
}
 801aadc:	bf00      	nop
 801aade:	3708      	adds	r7, #8
 801aae0:	46bd      	mov	sp, r7
 801aae2:	bd80      	pop	{r7, pc}

0801aae4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b082      	sub	sp, #8
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	f7fb fc66 	bl	80163c4 <USBH_LL_Connect>
}
 801aaf8:	bf00      	nop
 801aafa:	3708      	adds	r7, #8
 801aafc:	46bd      	mov	sp, r7
 801aafe:	bd80      	pop	{r7, pc}

0801ab00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b082      	sub	sp, #8
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ab0e:	4618      	mov	r0, r3
 801ab10:	f7fb fc8c 	bl	801642c <USBH_LL_Disconnect>
}
 801ab14:	bf00      	nop
 801ab16:	3708      	adds	r7, #8
 801ab18:	46bd      	mov	sp, r7
 801ab1a:	bd80      	pop	{r7, pc}

0801ab1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801ab1c:	b580      	push	{r7, lr}
 801ab1e:	b082      	sub	sp, #8
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	6078      	str	r0, [r7, #4]
 801ab24:	460b      	mov	r3, r1
 801ab26:	70fb      	strb	r3, [r7, #3]
 801ab28:	4613      	mov	r3, r2
 801ab2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ab32:	4618      	mov	r0, r3
 801ab34:	f7fb fcca 	bl	80164cc <USBH_LL_NotifyURBChange>
#endif
}
 801ab38:	bf00      	nop
 801ab3a:	3708      	adds	r7, #8
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	bd80      	pop	{r7, pc}

0801ab40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b082      	sub	sp, #8
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f7fb fc0f 	bl	8016372 <USBH_LL_PortEnabled>
} 
 801ab54:	bf00      	nop
 801ab56:	3708      	adds	r7, #8
 801ab58:	46bd      	mov	sp, r7
 801ab5a:	bd80      	pop	{r7, pc}

0801ab5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b082      	sub	sp, #8
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f7fb fc0f 	bl	801638e <USBH_LL_PortDisabled>
} 
 801ab70:	bf00      	nop
 801ab72:	3708      	adds	r7, #8
 801ab74:	46bd      	mov	sp, r7
 801ab76:	bd80      	pop	{r7, pc}

0801ab78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b082      	sub	sp, #8
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801ab86:	2b01      	cmp	r3, #1
 801ab88:	d12a      	bne.n	801abe0 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801ab8a:	4a18      	ldr	r2, [pc, #96]	; (801abec <USBH_LL_Init+0x74>)
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	4a15      	ldr	r2, [pc, #84]	; (801abec <USBH_LL_Init+0x74>)
 801ab96:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801ab9a:	4b14      	ldr	r3, [pc, #80]	; (801abec <USBH_LL_Init+0x74>)
 801ab9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801aba0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 801aba2:	4b12      	ldr	r3, [pc, #72]	; (801abec <USBH_LL_Init+0x74>)
 801aba4:	220c      	movs	r2, #12
 801aba6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801aba8:	4b10      	ldr	r3, [pc, #64]	; (801abec <USBH_LL_Init+0x74>)
 801abaa:	2201      	movs	r2, #1
 801abac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801abae:	4b0f      	ldr	r3, [pc, #60]	; (801abec <USBH_LL_Init+0x74>)
 801abb0:	2200      	movs	r2, #0
 801abb2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801abb4:	4b0d      	ldr	r3, [pc, #52]	; (801abec <USBH_LL_Init+0x74>)
 801abb6:	2202      	movs	r2, #2
 801abb8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801abba:	4b0c      	ldr	r3, [pc, #48]	; (801abec <USBH_LL_Init+0x74>)
 801abbc:	2200      	movs	r2, #0
 801abbe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801abc0:	480a      	ldr	r0, [pc, #40]	; (801abec <USBH_LL_Init+0x74>)
 801abc2:	f7f4 fd56 	bl	800f672 <HAL_HCD_Init>
 801abc6:	4603      	mov	r3, r0
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d001      	beq.n	801abd0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801abcc:	f7ff fb7e 	bl	801a2cc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801abd0:	4806      	ldr	r0, [pc, #24]	; (801abec <USBH_LL_Init+0x74>)
 801abd2:	f7f5 f938 	bl	800fe46 <HAL_HCD_GetCurrentFrame>
 801abd6:	4603      	mov	r3, r0
 801abd8:	4619      	mov	r1, r3
 801abda:	6878      	ldr	r0, [r7, #4]
 801abdc:	f7fb fb90 	bl	8016300 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801abe0:	2300      	movs	r3, #0
}
 801abe2:	4618      	mov	r0, r3
 801abe4:	3708      	adds	r7, #8
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd80      	pop	{r7, pc}
 801abea:	bf00      	nop
 801abec:	20014188 	.word	0x20014188

0801abf0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b084      	sub	sp, #16
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abf8:	2300      	movs	r3, #0
 801abfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801abfc:	2300      	movs	r3, #0
 801abfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801ac06:	4618      	mov	r0, r3
 801ac08:	f7f5 f8ba 	bl	800fd80 <HAL_HCD_Start>
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ac10:	7bfb      	ldrb	r3, [r7, #15]
 801ac12:	4618      	mov	r0, r3
 801ac14:	f000 f94a 	bl	801aeac <USBH_Get_USB_Status>
 801ac18:	4603      	mov	r3, r0
 801ac1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801ac1c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac1e:	4618      	mov	r0, r3
 801ac20:	3710      	adds	r7, #16
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd80      	pop	{r7, pc}

0801ac26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801ac26:	b580      	push	{r7, lr}
 801ac28:	b084      	sub	sp, #16
 801ac2a:	af00      	add	r7, sp, #0
 801ac2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac2e:	2300      	movs	r3, #0
 801ac30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ac32:	2300      	movs	r3, #0
 801ac34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	f7f5 f8c2 	bl	800fdc6 <HAL_HCD_Stop>
 801ac42:	4603      	mov	r3, r0
 801ac44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ac46:	7bfb      	ldrb	r3, [r7, #15]
 801ac48:	4618      	mov	r0, r3
 801ac4a:	f000 f92f 	bl	801aeac <USBH_Get_USB_Status>
 801ac4e:	4603      	mov	r3, r0
 801ac50:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801ac52:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac54:	4618      	mov	r0, r3
 801ac56:	3710      	adds	r7, #16
 801ac58:	46bd      	mov	sp, r7
 801ac5a:	bd80      	pop	{r7, pc}

0801ac5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801ac5c:	b580      	push	{r7, lr}
 801ac5e:	b084      	sub	sp, #16
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801ac64:	2301      	movs	r3, #1
 801ac66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801ac6e:	4618      	mov	r0, r3
 801ac70:	f7f5 f8f7 	bl	800fe62 <HAL_HCD_GetCurrentSpeed>
 801ac74:	4603      	mov	r3, r0
 801ac76:	2b01      	cmp	r3, #1
 801ac78:	d007      	beq.n	801ac8a <USBH_LL_GetSpeed+0x2e>
 801ac7a:	2b01      	cmp	r3, #1
 801ac7c:	d302      	bcc.n	801ac84 <USBH_LL_GetSpeed+0x28>
 801ac7e:	2b02      	cmp	r3, #2
 801ac80:	d006      	beq.n	801ac90 <USBH_LL_GetSpeed+0x34>
 801ac82:	e008      	b.n	801ac96 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801ac84:	2300      	movs	r3, #0
 801ac86:	73fb      	strb	r3, [r7, #15]
    break;
 801ac88:	e008      	b.n	801ac9c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	73fb      	strb	r3, [r7, #15]
    break;
 801ac8e:	e005      	b.n	801ac9c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 801ac90:	2302      	movs	r3, #2
 801ac92:	73fb      	strb	r3, [r7, #15]
    break;
 801ac94:	e002      	b.n	801ac9c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801ac96:	2301      	movs	r3, #1
 801ac98:	73fb      	strb	r3, [r7, #15]
    break;
 801ac9a:	bf00      	nop
  }
  return  speed;
 801ac9c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac9e:	4618      	mov	r0, r3
 801aca0:	3710      	adds	r7, #16
 801aca2:	46bd      	mov	sp, r7
 801aca4:	bd80      	pop	{r7, pc}

0801aca6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801aca6:	b580      	push	{r7, lr}
 801aca8:	b084      	sub	sp, #16
 801acaa:	af00      	add	r7, sp, #0
 801acac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acae:	2300      	movs	r3, #0
 801acb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801acb2:	2300      	movs	r3, #0
 801acb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801acbc:	4618      	mov	r0, r3
 801acbe:	f7f5 f89f 	bl	800fe00 <HAL_HCD_ResetPort>
 801acc2:	4603      	mov	r3, r0
 801acc4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801acc6:	7bfb      	ldrb	r3, [r7, #15]
 801acc8:	4618      	mov	r0, r3
 801acca:	f000 f8ef 	bl	801aeac <USBH_Get_USB_Status>
 801acce:	4603      	mov	r3, r0
 801acd0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801acd2:	7bbb      	ldrb	r3, [r7, #14]
}
 801acd4:	4618      	mov	r0, r3
 801acd6:	3710      	adds	r7, #16
 801acd8:	46bd      	mov	sp, r7
 801acda:	bd80      	pop	{r7, pc}

0801acdc <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801acdc:	b590      	push	{r4, r7, lr}
 801acde:	b089      	sub	sp, #36	; 0x24
 801ace0:	af04      	add	r7, sp, #16
 801ace2:	6078      	str	r0, [r7, #4]
 801ace4:	4608      	mov	r0, r1
 801ace6:	4611      	mov	r1, r2
 801ace8:	461a      	mov	r2, r3
 801acea:	4603      	mov	r3, r0
 801acec:	70fb      	strb	r3, [r7, #3]
 801acee:	460b      	mov	r3, r1
 801acf0:	70bb      	strb	r3, [r7, #2]
 801acf2:	4613      	mov	r3, r2
 801acf4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acf6:	2300      	movs	r3, #0
 801acf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801acfa:	2300      	movs	r3, #0
 801acfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	f8d3 0494 	ldr.w	r0, [r3, #1172]	; 0x494
 801ad04:	787c      	ldrb	r4, [r7, #1]
 801ad06:	78ba      	ldrb	r2, [r7, #2]
 801ad08:	78f9      	ldrb	r1, [r7, #3]
 801ad0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ad0c:	9302      	str	r3, [sp, #8]
 801ad0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ad12:	9301      	str	r3, [sp, #4]
 801ad14:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ad18:	9300      	str	r3, [sp, #0]
 801ad1a:	4623      	mov	r3, r4
 801ad1c:	f7f4 fd0b 	bl	800f736 <HAL_HCD_HC_Init>
 801ad20:	4603      	mov	r3, r0
 801ad22:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801ad24:	7bfb      	ldrb	r3, [r7, #15]
 801ad26:	4618      	mov	r0, r3
 801ad28:	f000 f8c0 	bl	801aeac <USBH_Get_USB_Status>
 801ad2c:	4603      	mov	r3, r0
 801ad2e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801ad30:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad32:	4618      	mov	r0, r3
 801ad34:	3714      	adds	r7, #20
 801ad36:	46bd      	mov	sp, r7
 801ad38:	bd90      	pop	{r4, r7, pc}

0801ad3a <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801ad3a:	b580      	push	{r7, lr}
 801ad3c:	b084      	sub	sp, #16
 801ad3e:	af00      	add	r7, sp, #0
 801ad40:	6078      	str	r0, [r7, #4]
 801ad42:	460b      	mov	r3, r1
 801ad44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad46:	2300      	movs	r3, #0
 801ad48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801ad54:	78fa      	ldrb	r2, [r7, #3]
 801ad56:	4611      	mov	r1, r2
 801ad58:	4618      	mov	r0, r3
 801ad5a:	f7f4 fd84 	bl	800f866 <HAL_HCD_HC_Halt>
 801ad5e:	4603      	mov	r3, r0
 801ad60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ad62:	7bfb      	ldrb	r3, [r7, #15]
 801ad64:	4618      	mov	r0, r3
 801ad66:	f000 f8a1 	bl	801aeac <USBH_Get_USB_Status>
 801ad6a:	4603      	mov	r3, r0
 801ad6c:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 801ad6e:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad70:	4618      	mov	r0, r3
 801ad72:	3710      	adds	r7, #16
 801ad74:	46bd      	mov	sp, r7
 801ad76:	bd80      	pop	{r7, pc}

0801ad78 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801ad78:	b590      	push	{r4, r7, lr}
 801ad7a:	b089      	sub	sp, #36	; 0x24
 801ad7c:	af04      	add	r7, sp, #16
 801ad7e:	6078      	str	r0, [r7, #4]
 801ad80:	4608      	mov	r0, r1
 801ad82:	4611      	mov	r1, r2
 801ad84:	461a      	mov	r2, r3
 801ad86:	4603      	mov	r3, r0
 801ad88:	70fb      	strb	r3, [r7, #3]
 801ad8a:	460b      	mov	r3, r1
 801ad8c:	70bb      	strb	r3, [r7, #2]
 801ad8e:	4613      	mov	r3, r2
 801ad90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad92:	2300      	movs	r3, #0
 801ad94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ad96:	2300      	movs	r3, #0
 801ad98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	f8d3 0494 	ldr.w	r0, [r3, #1172]	; 0x494
 801ada0:	787c      	ldrb	r4, [r7, #1]
 801ada2:	78ba      	ldrb	r2, [r7, #2]
 801ada4:	78f9      	ldrb	r1, [r7, #3]
 801ada6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801adaa:	9303      	str	r3, [sp, #12]
 801adac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801adae:	9302      	str	r3, [sp, #8]
 801adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb2:	9301      	str	r3, [sp, #4]
 801adb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801adb8:	9300      	str	r3, [sp, #0]
 801adba:	4623      	mov	r3, r4
 801adbc:	f7f4 fd76 	bl	800f8ac <HAL_HCD_HC_SubmitRequest>
 801adc0:	4603      	mov	r3, r0
 801adc2:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 801adc4:	7bfb      	ldrb	r3, [r7, #15]
 801adc6:	4618      	mov	r0, r3
 801adc8:	f000 f870 	bl	801aeac <USBH_Get_USB_Status>
 801adcc:	4603      	mov	r3, r0
 801adce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801add0:	7bbb      	ldrb	r3, [r7, #14]
}
 801add2:	4618      	mov	r0, r3
 801add4:	3714      	adds	r7, #20
 801add6:	46bd      	mov	sp, r7
 801add8:	bd90      	pop	{r4, r7, pc}

0801adda <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801adda:	b580      	push	{r7, lr}
 801addc:	b082      	sub	sp, #8
 801adde:	af00      	add	r7, sp, #0
 801ade0:	6078      	str	r0, [r7, #4]
 801ade2:	460b      	mov	r3, r1
 801ade4:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801adec:	78fa      	ldrb	r2, [r7, #3]
 801adee:	4611      	mov	r1, r2
 801adf0:	4618      	mov	r0, r3
 801adf2:	f7f5 f813 	bl	800fe1c <HAL_HCD_HC_GetURBState>
 801adf6:	4603      	mov	r3, r0
}
 801adf8:	4618      	mov	r0, r3
 801adfa:	3708      	adds	r7, #8
 801adfc:	46bd      	mov	sp, r7
 801adfe:	bd80      	pop	{r7, pc}

0801ae00 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b082      	sub	sp, #8
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
 801ae08:	460b      	mov	r3, r1
 801ae0a:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801ae12:	2b01      	cmp	r3, #1
 801ae14:	d103      	bne.n	801ae1e <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801ae16:	78fb      	ldrb	r3, [r7, #3]
 801ae18:	4618      	mov	r0, r3
 801ae1a:	f000 f873 	bl	801af04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801ae1e:	20c8      	movs	r0, #200	; 0xc8
 801ae20:	f7f4 f930 	bl	800f084 <HAL_Delay>
  return USBH_OK;
 801ae24:	2300      	movs	r3, #0
}
 801ae26:	4618      	mov	r0, r3
 801ae28:	3708      	adds	r7, #8
 801ae2a:	46bd      	mov	sp, r7
 801ae2c:	bd80      	pop	{r7, pc}

0801ae2e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801ae2e:	b480      	push	{r7}
 801ae30:	b085      	sub	sp, #20
 801ae32:	af00      	add	r7, sp, #0
 801ae34:	6078      	str	r0, [r7, #4]
 801ae36:	460b      	mov	r3, r1
 801ae38:	70fb      	strb	r3, [r7, #3]
 801ae3a:	4613      	mov	r3, r2
 801ae3c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801ae44:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801ae46:	78fa      	ldrb	r2, [r7, #3]
 801ae48:	68f9      	ldr	r1, [r7, #12]
 801ae4a:	4613      	mov	r3, r2
 801ae4c:	009b      	lsls	r3, r3, #2
 801ae4e:	4413      	add	r3, r2
 801ae50:	00db      	lsls	r3, r3, #3
 801ae52:	440b      	add	r3, r1
 801ae54:	333b      	adds	r3, #59	; 0x3b
 801ae56:	781b      	ldrb	r3, [r3, #0]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d00a      	beq.n	801ae72 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801ae5c:	78fa      	ldrb	r2, [r7, #3]
 801ae5e:	68f9      	ldr	r1, [r7, #12]
 801ae60:	4613      	mov	r3, r2
 801ae62:	009b      	lsls	r3, r3, #2
 801ae64:	4413      	add	r3, r2
 801ae66:	00db      	lsls	r3, r3, #3
 801ae68:	440b      	add	r3, r1
 801ae6a:	3350      	adds	r3, #80	; 0x50
 801ae6c:	78ba      	ldrb	r2, [r7, #2]
 801ae6e:	701a      	strb	r2, [r3, #0]
 801ae70:	e009      	b.n	801ae86 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801ae72:	78fa      	ldrb	r2, [r7, #3]
 801ae74:	68f9      	ldr	r1, [r7, #12]
 801ae76:	4613      	mov	r3, r2
 801ae78:	009b      	lsls	r3, r3, #2
 801ae7a:	4413      	add	r3, r2
 801ae7c:	00db      	lsls	r3, r3, #3
 801ae7e:	440b      	add	r3, r1
 801ae80:	3351      	adds	r3, #81	; 0x51
 801ae82:	78ba      	ldrb	r2, [r7, #2]
 801ae84:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801ae86:	2300      	movs	r3, #0
}
 801ae88:	4618      	mov	r0, r3
 801ae8a:	3714      	adds	r7, #20
 801ae8c:	46bd      	mov	sp, r7
 801ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae92:	4770      	bx	lr

0801ae94 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b082      	sub	sp, #8
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801ae9c:	6878      	ldr	r0, [r7, #4]
 801ae9e:	f7f4 f8f1 	bl	800f084 <HAL_Delay>
}
 801aea2:	bf00      	nop
 801aea4:	3708      	adds	r7, #8
 801aea6:	46bd      	mov	sp, r7
 801aea8:	bd80      	pop	{r7, pc}
	...

0801aeac <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801aeac:	b480      	push	{r7}
 801aeae:	b085      	sub	sp, #20
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	4603      	mov	r3, r0
 801aeb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801aeba:	79fb      	ldrb	r3, [r7, #7]
 801aebc:	2b03      	cmp	r3, #3
 801aebe:	d817      	bhi.n	801aef0 <USBH_Get_USB_Status+0x44>
 801aec0:	a201      	add	r2, pc, #4	; (adr r2, 801aec8 <USBH_Get_USB_Status+0x1c>)
 801aec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aec6:	bf00      	nop
 801aec8:	0801aed9 	.word	0x0801aed9
 801aecc:	0801aedf 	.word	0x0801aedf
 801aed0:	0801aee5 	.word	0x0801aee5
 801aed4:	0801aeeb 	.word	0x0801aeeb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801aed8:	2300      	movs	r3, #0
 801aeda:	73fb      	strb	r3, [r7, #15]
    break;
 801aedc:	e00b      	b.n	801aef6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801aede:	2302      	movs	r3, #2
 801aee0:	73fb      	strb	r3, [r7, #15]
    break;
 801aee2:	e008      	b.n	801aef6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801aee4:	2301      	movs	r3, #1
 801aee6:	73fb      	strb	r3, [r7, #15]
    break;
 801aee8:	e005      	b.n	801aef6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801aeea:	2302      	movs	r3, #2
 801aeec:	73fb      	strb	r3, [r7, #15]
    break;
 801aeee:	e002      	b.n	801aef6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801aef0:	2302      	movs	r3, #2
 801aef2:	73fb      	strb	r3, [r7, #15]
    break;
 801aef4:	bf00      	nop
  }
  return usb_status;
 801aef6:	7bfb      	ldrb	r3, [r7, #15]
}
 801aef8:	4618      	mov	r0, r3
 801aefa:	3714      	adds	r7, #20
 801aefc:	46bd      	mov	sp, r7
 801aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af02:	4770      	bx	lr

0801af04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 801af04:	b580      	push	{r7, lr}
 801af06:	b084      	sub	sp, #16
 801af08:	af00      	add	r7, sp, #0
 801af0a:	4603      	mov	r3, r0
 801af0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 801af0e:	79fb      	ldrb	r3, [r7, #7]
 801af10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801af12:	79fb      	ldrb	r3, [r7, #7]
 801af14:	2b00      	cmp	r3, #0
 801af16:	d102      	bne.n	801af1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 801af18:	2301      	movs	r3, #1
 801af1a:	73fb      	strb	r3, [r7, #15]
 801af1c:	e001      	b.n	801af22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801af1e:	2300      	movs	r3, #0
 801af20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 801af22:	7bfb      	ldrb	r3, [r7, #15]
 801af24:	461a      	mov	r2, r3
 801af26:	2140      	movs	r1, #64	; 0x40
 801af28:	4803      	ldr	r0, [pc, #12]	; (801af38 <MX_DriverVbusFS+0x34>)
 801af2a:	f7f4 fb71 	bl	800f610 <HAL_GPIO_WritePin>
}
 801af2e:	bf00      	nop
 801af30:	3710      	adds	r7, #16
 801af32:	46bd      	mov	sp, r7
 801af34:	bd80      	pop	{r7, pc}
 801af36:	bf00      	nop
 801af38:	48001800 	.word	0x48001800

0801af3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801af3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 801af74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801af40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801af42:	e003      	b.n	801af4c <LoopCopyDataInit>

0801af44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 801af44:	4b0c      	ldr	r3, [pc, #48]	; (801af78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801af46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801af48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801af4a:	3104      	adds	r1, #4

0801af4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801af4c:	480b      	ldr	r0, [pc, #44]	; (801af7c <LoopForever+0xa>)
	ldr	r3, =_edata
 801af4e:	4b0c      	ldr	r3, [pc, #48]	; (801af80 <LoopForever+0xe>)
	adds	r2, r0, r1
 801af50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801af52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 801af54:	d3f6      	bcc.n	801af44 <CopyDataInit>
	ldr	r2, =_sbss
 801af56:	4a0b      	ldr	r2, [pc, #44]	; (801af84 <LoopForever+0x12>)
	b	LoopFillZerobss
 801af58:	e002      	b.n	801af60 <LoopFillZerobss>

0801af5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801af5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 801af5c:	f842 3b04 	str.w	r3, [r2], #4

0801af60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801af60:	4b09      	ldr	r3, [pc, #36]	; (801af88 <LoopForever+0x16>)
	cmp	r2, r3
 801af62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801af64:	d3f9      	bcc.n	801af5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801af66:	f7ff faf3 	bl	801a550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801af6a:	f000 f885 	bl	801b078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801af6e:	f7fe ff55 	bl	8019e1c <main>

0801af72 <LoopForever>:

LoopForever:
    b LoopForever
 801af72:	e7fe      	b.n	801af72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801af74:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 801af78:	0801d9e8 	.word	0x0801d9e8
	ldr	r0, =_sdata
 801af7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801af80:	20000228 	.word	0x20000228
	ldr	r2, =_sbss
 801af84:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 801af88:	20014450 	.word	0x20014450

0801af8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801af8c:	e7fe      	b.n	801af8c <ADC1_2_IRQHandler>
	...

0801af90 <__errno>:
 801af90:	4b01      	ldr	r3, [pc, #4]	; (801af98 <__errno+0x8>)
 801af92:	6818      	ldr	r0, [r3, #0]
 801af94:	4770      	bx	lr
 801af96:	bf00      	nop
 801af98:	20000058 	.word	0x20000058

0801af9c <fiprintf>:
 801af9c:	b40e      	push	{r1, r2, r3}
 801af9e:	b503      	push	{r0, r1, lr}
 801afa0:	4601      	mov	r1, r0
 801afa2:	ab03      	add	r3, sp, #12
 801afa4:	4805      	ldr	r0, [pc, #20]	; (801afbc <fiprintf+0x20>)
 801afa6:	f853 2b04 	ldr.w	r2, [r3], #4
 801afaa:	6800      	ldr	r0, [r0, #0]
 801afac:	9301      	str	r3, [sp, #4]
 801afae:	f000 f9b5 	bl	801b31c <_vfiprintf_r>
 801afb2:	b002      	add	sp, #8
 801afb4:	f85d eb04 	ldr.w	lr, [sp], #4
 801afb8:	b003      	add	sp, #12
 801afba:	4770      	bx	lr
 801afbc:	20000058 	.word	0x20000058

0801afc0 <_fwrite_r>:
 801afc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afc4:	9c08      	ldr	r4, [sp, #32]
 801afc6:	4689      	mov	r9, r1
 801afc8:	4617      	mov	r7, r2
 801afca:	fb02 f803 	mul.w	r8, r2, r3
 801afce:	4606      	mov	r6, r0
 801afd0:	b118      	cbz	r0, 801afda <_fwrite_r+0x1a>
 801afd2:	6983      	ldr	r3, [r0, #24]
 801afd4:	b90b      	cbnz	r3, 801afda <_fwrite_r+0x1a>
 801afd6:	f000 fe9b 	bl	801bd10 <__sinit>
 801afda:	4b1d      	ldr	r3, [pc, #116]	; (801b050 <_fwrite_r+0x90>)
 801afdc:	429c      	cmp	r4, r3
 801afde:	d11a      	bne.n	801b016 <_fwrite_r+0x56>
 801afe0:	6874      	ldr	r4, [r6, #4]
 801afe2:	89a3      	ldrh	r3, [r4, #12]
 801afe4:	071b      	lsls	r3, r3, #28
 801afe6:	d520      	bpl.n	801b02a <_fwrite_r+0x6a>
 801afe8:	6923      	ldr	r3, [r4, #16]
 801afea:	b1f3      	cbz	r3, 801b02a <_fwrite_r+0x6a>
 801afec:	2500      	movs	r5, #0
 801afee:	4545      	cmp	r5, r8
 801aff0:	d029      	beq.n	801b046 <_fwrite_r+0x86>
 801aff2:	68a3      	ldr	r3, [r4, #8]
 801aff4:	f819 1005 	ldrb.w	r1, [r9, r5]
 801aff8:	3b01      	subs	r3, #1
 801affa:	2b00      	cmp	r3, #0
 801affc:	60a3      	str	r3, [r4, #8]
 801affe:	da04      	bge.n	801b00a <_fwrite_r+0x4a>
 801b000:	69a2      	ldr	r2, [r4, #24]
 801b002:	4293      	cmp	r3, r2
 801b004:	db19      	blt.n	801b03a <_fwrite_r+0x7a>
 801b006:	290a      	cmp	r1, #10
 801b008:	d017      	beq.n	801b03a <_fwrite_r+0x7a>
 801b00a:	6823      	ldr	r3, [r4, #0]
 801b00c:	1c5a      	adds	r2, r3, #1
 801b00e:	6022      	str	r2, [r4, #0]
 801b010:	7019      	strb	r1, [r3, #0]
 801b012:	3501      	adds	r5, #1
 801b014:	e7eb      	b.n	801afee <_fwrite_r+0x2e>
 801b016:	4b0f      	ldr	r3, [pc, #60]	; (801b054 <_fwrite_r+0x94>)
 801b018:	429c      	cmp	r4, r3
 801b01a:	d101      	bne.n	801b020 <_fwrite_r+0x60>
 801b01c:	68b4      	ldr	r4, [r6, #8]
 801b01e:	e7e0      	b.n	801afe2 <_fwrite_r+0x22>
 801b020:	4b0d      	ldr	r3, [pc, #52]	; (801b058 <_fwrite_r+0x98>)
 801b022:	429c      	cmp	r4, r3
 801b024:	bf08      	it	eq
 801b026:	68f4      	ldreq	r4, [r6, #12]
 801b028:	e7db      	b.n	801afe2 <_fwrite_r+0x22>
 801b02a:	4621      	mov	r1, r4
 801b02c:	4630      	mov	r0, r6
 801b02e:	f000 fd11 	bl	801ba54 <__swsetup_r>
 801b032:	2800      	cmp	r0, #0
 801b034:	d0da      	beq.n	801afec <_fwrite_r+0x2c>
 801b036:	2500      	movs	r5, #0
 801b038:	e005      	b.n	801b046 <_fwrite_r+0x86>
 801b03a:	4622      	mov	r2, r4
 801b03c:	4630      	mov	r0, r6
 801b03e:	f000 fca9 	bl	801b994 <__swbuf_r>
 801b042:	3001      	adds	r0, #1
 801b044:	d1e5      	bne.n	801b012 <_fwrite_r+0x52>
 801b046:	fbb5 f0f7 	udiv	r0, r5, r7
 801b04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b04e:	bf00      	nop
 801b050:	0801d998 	.word	0x0801d998
 801b054:	0801d9b8 	.word	0x0801d9b8
 801b058:	0801d978 	.word	0x0801d978

0801b05c <fwrite>:
 801b05c:	b507      	push	{r0, r1, r2, lr}
 801b05e:	9300      	str	r3, [sp, #0]
 801b060:	4613      	mov	r3, r2
 801b062:	460a      	mov	r2, r1
 801b064:	4601      	mov	r1, r0
 801b066:	4803      	ldr	r0, [pc, #12]	; (801b074 <fwrite+0x18>)
 801b068:	6800      	ldr	r0, [r0, #0]
 801b06a:	f7ff ffa9 	bl	801afc0 <_fwrite_r>
 801b06e:	b003      	add	sp, #12
 801b070:	f85d fb04 	ldr.w	pc, [sp], #4
 801b074:	20000058 	.word	0x20000058

0801b078 <__libc_init_array>:
 801b078:	b570      	push	{r4, r5, r6, lr}
 801b07a:	4e0d      	ldr	r6, [pc, #52]	; (801b0b0 <__libc_init_array+0x38>)
 801b07c:	4c0d      	ldr	r4, [pc, #52]	; (801b0b4 <__libc_init_array+0x3c>)
 801b07e:	1ba4      	subs	r4, r4, r6
 801b080:	10a4      	asrs	r4, r4, #2
 801b082:	2500      	movs	r5, #0
 801b084:	42a5      	cmp	r5, r4
 801b086:	d109      	bne.n	801b09c <__libc_init_array+0x24>
 801b088:	4e0b      	ldr	r6, [pc, #44]	; (801b0b8 <__libc_init_array+0x40>)
 801b08a:	4c0c      	ldr	r4, [pc, #48]	; (801b0bc <__libc_init_array+0x44>)
 801b08c:	f001 f95c 	bl	801c348 <_init>
 801b090:	1ba4      	subs	r4, r4, r6
 801b092:	10a4      	asrs	r4, r4, #2
 801b094:	2500      	movs	r5, #0
 801b096:	42a5      	cmp	r5, r4
 801b098:	d105      	bne.n	801b0a6 <__libc_init_array+0x2e>
 801b09a:	bd70      	pop	{r4, r5, r6, pc}
 801b09c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b0a0:	4798      	blx	r3
 801b0a2:	3501      	adds	r5, #1
 801b0a4:	e7ee      	b.n	801b084 <__libc_init_array+0xc>
 801b0a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801b0aa:	4798      	blx	r3
 801b0ac:	3501      	adds	r5, #1
 801b0ae:	e7f2      	b.n	801b096 <__libc_init_array+0x1e>
 801b0b0:	0801d9e0 	.word	0x0801d9e0
 801b0b4:	0801d9e0 	.word	0x0801d9e0
 801b0b8:	0801d9e0 	.word	0x0801d9e0
 801b0bc:	0801d9e4 	.word	0x0801d9e4

0801b0c0 <__locale_ctype_ptr>:
 801b0c0:	4b04      	ldr	r3, [pc, #16]	; (801b0d4 <__locale_ctype_ptr+0x14>)
 801b0c2:	4a05      	ldr	r2, [pc, #20]	; (801b0d8 <__locale_ctype_ptr+0x18>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	6a1b      	ldr	r3, [r3, #32]
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	bf08      	it	eq
 801b0cc:	4613      	moveq	r3, r2
 801b0ce:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801b0d2:	4770      	bx	lr
 801b0d4:	20000058 	.word	0x20000058
 801b0d8:	200000bc 	.word	0x200000bc

0801b0dc <malloc>:
 801b0dc:	4b02      	ldr	r3, [pc, #8]	; (801b0e8 <malloc+0xc>)
 801b0de:	4601      	mov	r1, r0
 801b0e0:	6818      	ldr	r0, [r3, #0]
 801b0e2:	f000 b897 	b.w	801b214 <_malloc_r>
 801b0e6:	bf00      	nop
 801b0e8:	20000058 	.word	0x20000058

0801b0ec <free>:
 801b0ec:	4b02      	ldr	r3, [pc, #8]	; (801b0f8 <free+0xc>)
 801b0ee:	4601      	mov	r1, r0
 801b0f0:	6818      	ldr	r0, [r3, #0]
 801b0f2:	f000 b841 	b.w	801b178 <_free_r>
 801b0f6:	bf00      	nop
 801b0f8:	20000058 	.word	0x20000058

0801b0fc <__ascii_mbtowc>:
 801b0fc:	b082      	sub	sp, #8
 801b0fe:	b901      	cbnz	r1, 801b102 <__ascii_mbtowc+0x6>
 801b100:	a901      	add	r1, sp, #4
 801b102:	b142      	cbz	r2, 801b116 <__ascii_mbtowc+0x1a>
 801b104:	b14b      	cbz	r3, 801b11a <__ascii_mbtowc+0x1e>
 801b106:	7813      	ldrb	r3, [r2, #0]
 801b108:	600b      	str	r3, [r1, #0]
 801b10a:	7812      	ldrb	r2, [r2, #0]
 801b10c:	1c10      	adds	r0, r2, #0
 801b10e:	bf18      	it	ne
 801b110:	2001      	movne	r0, #1
 801b112:	b002      	add	sp, #8
 801b114:	4770      	bx	lr
 801b116:	4610      	mov	r0, r2
 801b118:	e7fb      	b.n	801b112 <__ascii_mbtowc+0x16>
 801b11a:	f06f 0001 	mvn.w	r0, #1
 801b11e:	e7f8      	b.n	801b112 <__ascii_mbtowc+0x16>

0801b120 <memcpy>:
 801b120:	b510      	push	{r4, lr}
 801b122:	1e43      	subs	r3, r0, #1
 801b124:	440a      	add	r2, r1
 801b126:	4291      	cmp	r1, r2
 801b128:	d100      	bne.n	801b12c <memcpy+0xc>
 801b12a:	bd10      	pop	{r4, pc}
 801b12c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b130:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b134:	e7f7      	b.n	801b126 <memcpy+0x6>

0801b136 <memmove>:
 801b136:	4288      	cmp	r0, r1
 801b138:	b510      	push	{r4, lr}
 801b13a:	eb01 0302 	add.w	r3, r1, r2
 801b13e:	d807      	bhi.n	801b150 <memmove+0x1a>
 801b140:	1e42      	subs	r2, r0, #1
 801b142:	4299      	cmp	r1, r3
 801b144:	d00a      	beq.n	801b15c <memmove+0x26>
 801b146:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b14a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801b14e:	e7f8      	b.n	801b142 <memmove+0xc>
 801b150:	4283      	cmp	r3, r0
 801b152:	d9f5      	bls.n	801b140 <memmove+0xa>
 801b154:	1881      	adds	r1, r0, r2
 801b156:	1ad2      	subs	r2, r2, r3
 801b158:	42d3      	cmn	r3, r2
 801b15a:	d100      	bne.n	801b15e <memmove+0x28>
 801b15c:	bd10      	pop	{r4, pc}
 801b15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b162:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801b166:	e7f7      	b.n	801b158 <memmove+0x22>

0801b168 <memset>:
 801b168:	4402      	add	r2, r0
 801b16a:	4603      	mov	r3, r0
 801b16c:	4293      	cmp	r3, r2
 801b16e:	d100      	bne.n	801b172 <memset+0xa>
 801b170:	4770      	bx	lr
 801b172:	f803 1b01 	strb.w	r1, [r3], #1
 801b176:	e7f9      	b.n	801b16c <memset+0x4>

0801b178 <_free_r>:
 801b178:	b538      	push	{r3, r4, r5, lr}
 801b17a:	4605      	mov	r5, r0
 801b17c:	2900      	cmp	r1, #0
 801b17e:	d045      	beq.n	801b20c <_free_r+0x94>
 801b180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b184:	1f0c      	subs	r4, r1, #4
 801b186:	2b00      	cmp	r3, #0
 801b188:	bfb8      	it	lt
 801b18a:	18e4      	addlt	r4, r4, r3
 801b18c:	f000 feae 	bl	801beec <__malloc_lock>
 801b190:	4a1f      	ldr	r2, [pc, #124]	; (801b210 <_free_r+0x98>)
 801b192:	6813      	ldr	r3, [r2, #0]
 801b194:	4610      	mov	r0, r2
 801b196:	b933      	cbnz	r3, 801b1a6 <_free_r+0x2e>
 801b198:	6063      	str	r3, [r4, #4]
 801b19a:	6014      	str	r4, [r2, #0]
 801b19c:	4628      	mov	r0, r5
 801b19e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b1a2:	f000 bea4 	b.w	801beee <__malloc_unlock>
 801b1a6:	42a3      	cmp	r3, r4
 801b1a8:	d90c      	bls.n	801b1c4 <_free_r+0x4c>
 801b1aa:	6821      	ldr	r1, [r4, #0]
 801b1ac:	1862      	adds	r2, r4, r1
 801b1ae:	4293      	cmp	r3, r2
 801b1b0:	bf04      	itt	eq
 801b1b2:	681a      	ldreq	r2, [r3, #0]
 801b1b4:	685b      	ldreq	r3, [r3, #4]
 801b1b6:	6063      	str	r3, [r4, #4]
 801b1b8:	bf04      	itt	eq
 801b1ba:	1852      	addeq	r2, r2, r1
 801b1bc:	6022      	streq	r2, [r4, #0]
 801b1be:	6004      	str	r4, [r0, #0]
 801b1c0:	e7ec      	b.n	801b19c <_free_r+0x24>
 801b1c2:	4613      	mov	r3, r2
 801b1c4:	685a      	ldr	r2, [r3, #4]
 801b1c6:	b10a      	cbz	r2, 801b1cc <_free_r+0x54>
 801b1c8:	42a2      	cmp	r2, r4
 801b1ca:	d9fa      	bls.n	801b1c2 <_free_r+0x4a>
 801b1cc:	6819      	ldr	r1, [r3, #0]
 801b1ce:	1858      	adds	r0, r3, r1
 801b1d0:	42a0      	cmp	r0, r4
 801b1d2:	d10b      	bne.n	801b1ec <_free_r+0x74>
 801b1d4:	6820      	ldr	r0, [r4, #0]
 801b1d6:	4401      	add	r1, r0
 801b1d8:	1858      	adds	r0, r3, r1
 801b1da:	4282      	cmp	r2, r0
 801b1dc:	6019      	str	r1, [r3, #0]
 801b1de:	d1dd      	bne.n	801b19c <_free_r+0x24>
 801b1e0:	6810      	ldr	r0, [r2, #0]
 801b1e2:	6852      	ldr	r2, [r2, #4]
 801b1e4:	605a      	str	r2, [r3, #4]
 801b1e6:	4401      	add	r1, r0
 801b1e8:	6019      	str	r1, [r3, #0]
 801b1ea:	e7d7      	b.n	801b19c <_free_r+0x24>
 801b1ec:	d902      	bls.n	801b1f4 <_free_r+0x7c>
 801b1ee:	230c      	movs	r3, #12
 801b1f0:	602b      	str	r3, [r5, #0]
 801b1f2:	e7d3      	b.n	801b19c <_free_r+0x24>
 801b1f4:	6820      	ldr	r0, [r4, #0]
 801b1f6:	1821      	adds	r1, r4, r0
 801b1f8:	428a      	cmp	r2, r1
 801b1fa:	bf04      	itt	eq
 801b1fc:	6811      	ldreq	r1, [r2, #0]
 801b1fe:	6852      	ldreq	r2, [r2, #4]
 801b200:	6062      	str	r2, [r4, #4]
 801b202:	bf04      	itt	eq
 801b204:	1809      	addeq	r1, r1, r0
 801b206:	6021      	streq	r1, [r4, #0]
 801b208:	605c      	str	r4, [r3, #4]
 801b20a:	e7c7      	b.n	801b19c <_free_r+0x24>
 801b20c:	bd38      	pop	{r3, r4, r5, pc}
 801b20e:	bf00      	nop
 801b210:	2000e450 	.word	0x2000e450

0801b214 <_malloc_r>:
 801b214:	b570      	push	{r4, r5, r6, lr}
 801b216:	1ccd      	adds	r5, r1, #3
 801b218:	f025 0503 	bic.w	r5, r5, #3
 801b21c:	3508      	adds	r5, #8
 801b21e:	2d0c      	cmp	r5, #12
 801b220:	bf38      	it	cc
 801b222:	250c      	movcc	r5, #12
 801b224:	2d00      	cmp	r5, #0
 801b226:	4606      	mov	r6, r0
 801b228:	db01      	blt.n	801b22e <_malloc_r+0x1a>
 801b22a:	42a9      	cmp	r1, r5
 801b22c:	d903      	bls.n	801b236 <_malloc_r+0x22>
 801b22e:	230c      	movs	r3, #12
 801b230:	6033      	str	r3, [r6, #0]
 801b232:	2000      	movs	r0, #0
 801b234:	bd70      	pop	{r4, r5, r6, pc}
 801b236:	f000 fe59 	bl	801beec <__malloc_lock>
 801b23a:	4a21      	ldr	r2, [pc, #132]	; (801b2c0 <_malloc_r+0xac>)
 801b23c:	6814      	ldr	r4, [r2, #0]
 801b23e:	4621      	mov	r1, r4
 801b240:	b991      	cbnz	r1, 801b268 <_malloc_r+0x54>
 801b242:	4c20      	ldr	r4, [pc, #128]	; (801b2c4 <_malloc_r+0xb0>)
 801b244:	6823      	ldr	r3, [r4, #0]
 801b246:	b91b      	cbnz	r3, 801b250 <_malloc_r+0x3c>
 801b248:	4630      	mov	r0, r6
 801b24a:	f000 fb05 	bl	801b858 <_sbrk_r>
 801b24e:	6020      	str	r0, [r4, #0]
 801b250:	4629      	mov	r1, r5
 801b252:	4630      	mov	r0, r6
 801b254:	f000 fb00 	bl	801b858 <_sbrk_r>
 801b258:	1c43      	adds	r3, r0, #1
 801b25a:	d124      	bne.n	801b2a6 <_malloc_r+0x92>
 801b25c:	230c      	movs	r3, #12
 801b25e:	6033      	str	r3, [r6, #0]
 801b260:	4630      	mov	r0, r6
 801b262:	f000 fe44 	bl	801beee <__malloc_unlock>
 801b266:	e7e4      	b.n	801b232 <_malloc_r+0x1e>
 801b268:	680b      	ldr	r3, [r1, #0]
 801b26a:	1b5b      	subs	r3, r3, r5
 801b26c:	d418      	bmi.n	801b2a0 <_malloc_r+0x8c>
 801b26e:	2b0b      	cmp	r3, #11
 801b270:	d90f      	bls.n	801b292 <_malloc_r+0x7e>
 801b272:	600b      	str	r3, [r1, #0]
 801b274:	50cd      	str	r5, [r1, r3]
 801b276:	18cc      	adds	r4, r1, r3
 801b278:	4630      	mov	r0, r6
 801b27a:	f000 fe38 	bl	801beee <__malloc_unlock>
 801b27e:	f104 000b 	add.w	r0, r4, #11
 801b282:	1d23      	adds	r3, r4, #4
 801b284:	f020 0007 	bic.w	r0, r0, #7
 801b288:	1ac3      	subs	r3, r0, r3
 801b28a:	d0d3      	beq.n	801b234 <_malloc_r+0x20>
 801b28c:	425a      	negs	r2, r3
 801b28e:	50e2      	str	r2, [r4, r3]
 801b290:	e7d0      	b.n	801b234 <_malloc_r+0x20>
 801b292:	428c      	cmp	r4, r1
 801b294:	684b      	ldr	r3, [r1, #4]
 801b296:	bf16      	itet	ne
 801b298:	6063      	strne	r3, [r4, #4]
 801b29a:	6013      	streq	r3, [r2, #0]
 801b29c:	460c      	movne	r4, r1
 801b29e:	e7eb      	b.n	801b278 <_malloc_r+0x64>
 801b2a0:	460c      	mov	r4, r1
 801b2a2:	6849      	ldr	r1, [r1, #4]
 801b2a4:	e7cc      	b.n	801b240 <_malloc_r+0x2c>
 801b2a6:	1cc4      	adds	r4, r0, #3
 801b2a8:	f024 0403 	bic.w	r4, r4, #3
 801b2ac:	42a0      	cmp	r0, r4
 801b2ae:	d005      	beq.n	801b2bc <_malloc_r+0xa8>
 801b2b0:	1a21      	subs	r1, r4, r0
 801b2b2:	4630      	mov	r0, r6
 801b2b4:	f000 fad0 	bl	801b858 <_sbrk_r>
 801b2b8:	3001      	adds	r0, #1
 801b2ba:	d0cf      	beq.n	801b25c <_malloc_r+0x48>
 801b2bc:	6025      	str	r5, [r4, #0]
 801b2be:	e7db      	b.n	801b278 <_malloc_r+0x64>
 801b2c0:	2000e450 	.word	0x2000e450
 801b2c4:	2000e454 	.word	0x2000e454

0801b2c8 <__sfputc_r>:
 801b2c8:	6893      	ldr	r3, [r2, #8]
 801b2ca:	3b01      	subs	r3, #1
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	b410      	push	{r4}
 801b2d0:	6093      	str	r3, [r2, #8]
 801b2d2:	da08      	bge.n	801b2e6 <__sfputc_r+0x1e>
 801b2d4:	6994      	ldr	r4, [r2, #24]
 801b2d6:	42a3      	cmp	r3, r4
 801b2d8:	db01      	blt.n	801b2de <__sfputc_r+0x16>
 801b2da:	290a      	cmp	r1, #10
 801b2dc:	d103      	bne.n	801b2e6 <__sfputc_r+0x1e>
 801b2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b2e2:	f000 bb57 	b.w	801b994 <__swbuf_r>
 801b2e6:	6813      	ldr	r3, [r2, #0]
 801b2e8:	1c58      	adds	r0, r3, #1
 801b2ea:	6010      	str	r0, [r2, #0]
 801b2ec:	7019      	strb	r1, [r3, #0]
 801b2ee:	4608      	mov	r0, r1
 801b2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b2f4:	4770      	bx	lr

0801b2f6 <__sfputs_r>:
 801b2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2f8:	4606      	mov	r6, r0
 801b2fa:	460f      	mov	r7, r1
 801b2fc:	4614      	mov	r4, r2
 801b2fe:	18d5      	adds	r5, r2, r3
 801b300:	42ac      	cmp	r4, r5
 801b302:	d101      	bne.n	801b308 <__sfputs_r+0x12>
 801b304:	2000      	movs	r0, #0
 801b306:	e007      	b.n	801b318 <__sfputs_r+0x22>
 801b308:	463a      	mov	r2, r7
 801b30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b30e:	4630      	mov	r0, r6
 801b310:	f7ff ffda 	bl	801b2c8 <__sfputc_r>
 801b314:	1c43      	adds	r3, r0, #1
 801b316:	d1f3      	bne.n	801b300 <__sfputs_r+0xa>
 801b318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b31c <_vfiprintf_r>:
 801b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b320:	460c      	mov	r4, r1
 801b322:	b09d      	sub	sp, #116	; 0x74
 801b324:	4617      	mov	r7, r2
 801b326:	461d      	mov	r5, r3
 801b328:	4606      	mov	r6, r0
 801b32a:	b118      	cbz	r0, 801b334 <_vfiprintf_r+0x18>
 801b32c:	6983      	ldr	r3, [r0, #24]
 801b32e:	b90b      	cbnz	r3, 801b334 <_vfiprintf_r+0x18>
 801b330:	f000 fcee 	bl	801bd10 <__sinit>
 801b334:	4b7c      	ldr	r3, [pc, #496]	; (801b528 <_vfiprintf_r+0x20c>)
 801b336:	429c      	cmp	r4, r3
 801b338:	d158      	bne.n	801b3ec <_vfiprintf_r+0xd0>
 801b33a:	6874      	ldr	r4, [r6, #4]
 801b33c:	89a3      	ldrh	r3, [r4, #12]
 801b33e:	0718      	lsls	r0, r3, #28
 801b340:	d55e      	bpl.n	801b400 <_vfiprintf_r+0xe4>
 801b342:	6923      	ldr	r3, [r4, #16]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d05b      	beq.n	801b400 <_vfiprintf_r+0xe4>
 801b348:	2300      	movs	r3, #0
 801b34a:	9309      	str	r3, [sp, #36]	; 0x24
 801b34c:	2320      	movs	r3, #32
 801b34e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b352:	2330      	movs	r3, #48	; 0x30
 801b354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b358:	9503      	str	r5, [sp, #12]
 801b35a:	f04f 0b01 	mov.w	fp, #1
 801b35e:	46b8      	mov	r8, r7
 801b360:	4645      	mov	r5, r8
 801b362:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b366:	b10b      	cbz	r3, 801b36c <_vfiprintf_r+0x50>
 801b368:	2b25      	cmp	r3, #37	; 0x25
 801b36a:	d154      	bne.n	801b416 <_vfiprintf_r+0xfa>
 801b36c:	ebb8 0a07 	subs.w	sl, r8, r7
 801b370:	d00b      	beq.n	801b38a <_vfiprintf_r+0x6e>
 801b372:	4653      	mov	r3, sl
 801b374:	463a      	mov	r2, r7
 801b376:	4621      	mov	r1, r4
 801b378:	4630      	mov	r0, r6
 801b37a:	f7ff ffbc 	bl	801b2f6 <__sfputs_r>
 801b37e:	3001      	adds	r0, #1
 801b380:	f000 80c2 	beq.w	801b508 <_vfiprintf_r+0x1ec>
 801b384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b386:	4453      	add	r3, sl
 801b388:	9309      	str	r3, [sp, #36]	; 0x24
 801b38a:	f898 3000 	ldrb.w	r3, [r8]
 801b38e:	2b00      	cmp	r3, #0
 801b390:	f000 80ba 	beq.w	801b508 <_vfiprintf_r+0x1ec>
 801b394:	2300      	movs	r3, #0
 801b396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b39a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b39e:	9304      	str	r3, [sp, #16]
 801b3a0:	9307      	str	r3, [sp, #28]
 801b3a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b3a6:	931a      	str	r3, [sp, #104]	; 0x68
 801b3a8:	46a8      	mov	r8, r5
 801b3aa:	2205      	movs	r2, #5
 801b3ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 801b3b0:	485e      	ldr	r0, [pc, #376]	; (801b52c <_vfiprintf_r+0x210>)
 801b3b2:	f7e4 ff25 	bl	8000200 <memchr>
 801b3b6:	9b04      	ldr	r3, [sp, #16]
 801b3b8:	bb78      	cbnz	r0, 801b41a <_vfiprintf_r+0xfe>
 801b3ba:	06d9      	lsls	r1, r3, #27
 801b3bc:	bf44      	itt	mi
 801b3be:	2220      	movmi	r2, #32
 801b3c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b3c4:	071a      	lsls	r2, r3, #28
 801b3c6:	bf44      	itt	mi
 801b3c8:	222b      	movmi	r2, #43	; 0x2b
 801b3ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b3ce:	782a      	ldrb	r2, [r5, #0]
 801b3d0:	2a2a      	cmp	r2, #42	; 0x2a
 801b3d2:	d02a      	beq.n	801b42a <_vfiprintf_r+0x10e>
 801b3d4:	9a07      	ldr	r2, [sp, #28]
 801b3d6:	46a8      	mov	r8, r5
 801b3d8:	2000      	movs	r0, #0
 801b3da:	250a      	movs	r5, #10
 801b3dc:	4641      	mov	r1, r8
 801b3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3e2:	3b30      	subs	r3, #48	; 0x30
 801b3e4:	2b09      	cmp	r3, #9
 801b3e6:	d969      	bls.n	801b4bc <_vfiprintf_r+0x1a0>
 801b3e8:	b360      	cbz	r0, 801b444 <_vfiprintf_r+0x128>
 801b3ea:	e024      	b.n	801b436 <_vfiprintf_r+0x11a>
 801b3ec:	4b50      	ldr	r3, [pc, #320]	; (801b530 <_vfiprintf_r+0x214>)
 801b3ee:	429c      	cmp	r4, r3
 801b3f0:	d101      	bne.n	801b3f6 <_vfiprintf_r+0xda>
 801b3f2:	68b4      	ldr	r4, [r6, #8]
 801b3f4:	e7a2      	b.n	801b33c <_vfiprintf_r+0x20>
 801b3f6:	4b4f      	ldr	r3, [pc, #316]	; (801b534 <_vfiprintf_r+0x218>)
 801b3f8:	429c      	cmp	r4, r3
 801b3fa:	bf08      	it	eq
 801b3fc:	68f4      	ldreq	r4, [r6, #12]
 801b3fe:	e79d      	b.n	801b33c <_vfiprintf_r+0x20>
 801b400:	4621      	mov	r1, r4
 801b402:	4630      	mov	r0, r6
 801b404:	f000 fb26 	bl	801ba54 <__swsetup_r>
 801b408:	2800      	cmp	r0, #0
 801b40a:	d09d      	beq.n	801b348 <_vfiprintf_r+0x2c>
 801b40c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b410:	b01d      	add	sp, #116	; 0x74
 801b412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b416:	46a8      	mov	r8, r5
 801b418:	e7a2      	b.n	801b360 <_vfiprintf_r+0x44>
 801b41a:	4a44      	ldr	r2, [pc, #272]	; (801b52c <_vfiprintf_r+0x210>)
 801b41c:	1a80      	subs	r0, r0, r2
 801b41e:	fa0b f000 	lsl.w	r0, fp, r0
 801b422:	4318      	orrs	r0, r3
 801b424:	9004      	str	r0, [sp, #16]
 801b426:	4645      	mov	r5, r8
 801b428:	e7be      	b.n	801b3a8 <_vfiprintf_r+0x8c>
 801b42a:	9a03      	ldr	r2, [sp, #12]
 801b42c:	1d11      	adds	r1, r2, #4
 801b42e:	6812      	ldr	r2, [r2, #0]
 801b430:	9103      	str	r1, [sp, #12]
 801b432:	2a00      	cmp	r2, #0
 801b434:	db01      	blt.n	801b43a <_vfiprintf_r+0x11e>
 801b436:	9207      	str	r2, [sp, #28]
 801b438:	e004      	b.n	801b444 <_vfiprintf_r+0x128>
 801b43a:	4252      	negs	r2, r2
 801b43c:	f043 0302 	orr.w	r3, r3, #2
 801b440:	9207      	str	r2, [sp, #28]
 801b442:	9304      	str	r3, [sp, #16]
 801b444:	f898 3000 	ldrb.w	r3, [r8]
 801b448:	2b2e      	cmp	r3, #46	; 0x2e
 801b44a:	d10e      	bne.n	801b46a <_vfiprintf_r+0x14e>
 801b44c:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b450:	2b2a      	cmp	r3, #42	; 0x2a
 801b452:	d138      	bne.n	801b4c6 <_vfiprintf_r+0x1aa>
 801b454:	9b03      	ldr	r3, [sp, #12]
 801b456:	1d1a      	adds	r2, r3, #4
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	9203      	str	r2, [sp, #12]
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	bfb8      	it	lt
 801b460:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b464:	f108 0802 	add.w	r8, r8, #2
 801b468:	9305      	str	r3, [sp, #20]
 801b46a:	4d33      	ldr	r5, [pc, #204]	; (801b538 <_vfiprintf_r+0x21c>)
 801b46c:	f898 1000 	ldrb.w	r1, [r8]
 801b470:	2203      	movs	r2, #3
 801b472:	4628      	mov	r0, r5
 801b474:	f7e4 fec4 	bl	8000200 <memchr>
 801b478:	b140      	cbz	r0, 801b48c <_vfiprintf_r+0x170>
 801b47a:	2340      	movs	r3, #64	; 0x40
 801b47c:	1b40      	subs	r0, r0, r5
 801b47e:	fa03 f000 	lsl.w	r0, r3, r0
 801b482:	9b04      	ldr	r3, [sp, #16]
 801b484:	4303      	orrs	r3, r0
 801b486:	f108 0801 	add.w	r8, r8, #1
 801b48a:	9304      	str	r3, [sp, #16]
 801b48c:	f898 1000 	ldrb.w	r1, [r8]
 801b490:	482a      	ldr	r0, [pc, #168]	; (801b53c <_vfiprintf_r+0x220>)
 801b492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b496:	2206      	movs	r2, #6
 801b498:	f108 0701 	add.w	r7, r8, #1
 801b49c:	f7e4 feb0 	bl	8000200 <memchr>
 801b4a0:	2800      	cmp	r0, #0
 801b4a2:	d037      	beq.n	801b514 <_vfiprintf_r+0x1f8>
 801b4a4:	4b26      	ldr	r3, [pc, #152]	; (801b540 <_vfiprintf_r+0x224>)
 801b4a6:	bb1b      	cbnz	r3, 801b4f0 <_vfiprintf_r+0x1d4>
 801b4a8:	9b03      	ldr	r3, [sp, #12]
 801b4aa:	3307      	adds	r3, #7
 801b4ac:	f023 0307 	bic.w	r3, r3, #7
 801b4b0:	3308      	adds	r3, #8
 801b4b2:	9303      	str	r3, [sp, #12]
 801b4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4b6:	444b      	add	r3, r9
 801b4b8:	9309      	str	r3, [sp, #36]	; 0x24
 801b4ba:	e750      	b.n	801b35e <_vfiprintf_r+0x42>
 801b4bc:	fb05 3202 	mla	r2, r5, r2, r3
 801b4c0:	2001      	movs	r0, #1
 801b4c2:	4688      	mov	r8, r1
 801b4c4:	e78a      	b.n	801b3dc <_vfiprintf_r+0xc0>
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	f108 0801 	add.w	r8, r8, #1
 801b4cc:	9305      	str	r3, [sp, #20]
 801b4ce:	4619      	mov	r1, r3
 801b4d0:	250a      	movs	r5, #10
 801b4d2:	4640      	mov	r0, r8
 801b4d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b4d8:	3a30      	subs	r2, #48	; 0x30
 801b4da:	2a09      	cmp	r2, #9
 801b4dc:	d903      	bls.n	801b4e6 <_vfiprintf_r+0x1ca>
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d0c3      	beq.n	801b46a <_vfiprintf_r+0x14e>
 801b4e2:	9105      	str	r1, [sp, #20]
 801b4e4:	e7c1      	b.n	801b46a <_vfiprintf_r+0x14e>
 801b4e6:	fb05 2101 	mla	r1, r5, r1, r2
 801b4ea:	2301      	movs	r3, #1
 801b4ec:	4680      	mov	r8, r0
 801b4ee:	e7f0      	b.n	801b4d2 <_vfiprintf_r+0x1b6>
 801b4f0:	ab03      	add	r3, sp, #12
 801b4f2:	9300      	str	r3, [sp, #0]
 801b4f4:	4622      	mov	r2, r4
 801b4f6:	4b13      	ldr	r3, [pc, #76]	; (801b544 <_vfiprintf_r+0x228>)
 801b4f8:	a904      	add	r1, sp, #16
 801b4fa:	4630      	mov	r0, r6
 801b4fc:	f3af 8000 	nop.w
 801b500:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801b504:	4681      	mov	r9, r0
 801b506:	d1d5      	bne.n	801b4b4 <_vfiprintf_r+0x198>
 801b508:	89a3      	ldrh	r3, [r4, #12]
 801b50a:	065b      	lsls	r3, r3, #25
 801b50c:	f53f af7e 	bmi.w	801b40c <_vfiprintf_r+0xf0>
 801b510:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b512:	e77d      	b.n	801b410 <_vfiprintf_r+0xf4>
 801b514:	ab03      	add	r3, sp, #12
 801b516:	9300      	str	r3, [sp, #0]
 801b518:	4622      	mov	r2, r4
 801b51a:	4b0a      	ldr	r3, [pc, #40]	; (801b544 <_vfiprintf_r+0x228>)
 801b51c:	a904      	add	r1, sp, #16
 801b51e:	4630      	mov	r0, r6
 801b520:	f000 f888 	bl	801b634 <_printf_i>
 801b524:	e7ec      	b.n	801b500 <_vfiprintf_r+0x1e4>
 801b526:	bf00      	nop
 801b528:	0801d998 	.word	0x0801d998
 801b52c:	0801d842 	.word	0x0801d842
 801b530:	0801d9b8 	.word	0x0801d9b8
 801b534:	0801d978 	.word	0x0801d978
 801b538:	0801d848 	.word	0x0801d848
 801b53c:	0801d84c 	.word	0x0801d84c
 801b540:	00000000 	.word	0x00000000
 801b544:	0801b2f7 	.word	0x0801b2f7

0801b548 <_printf_common>:
 801b548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b54c:	4691      	mov	r9, r2
 801b54e:	461f      	mov	r7, r3
 801b550:	688a      	ldr	r2, [r1, #8]
 801b552:	690b      	ldr	r3, [r1, #16]
 801b554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b558:	4293      	cmp	r3, r2
 801b55a:	bfb8      	it	lt
 801b55c:	4613      	movlt	r3, r2
 801b55e:	f8c9 3000 	str.w	r3, [r9]
 801b562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b566:	4606      	mov	r6, r0
 801b568:	460c      	mov	r4, r1
 801b56a:	b112      	cbz	r2, 801b572 <_printf_common+0x2a>
 801b56c:	3301      	adds	r3, #1
 801b56e:	f8c9 3000 	str.w	r3, [r9]
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	0699      	lsls	r1, r3, #26
 801b576:	bf42      	ittt	mi
 801b578:	f8d9 3000 	ldrmi.w	r3, [r9]
 801b57c:	3302      	addmi	r3, #2
 801b57e:	f8c9 3000 	strmi.w	r3, [r9]
 801b582:	6825      	ldr	r5, [r4, #0]
 801b584:	f015 0506 	ands.w	r5, r5, #6
 801b588:	d107      	bne.n	801b59a <_printf_common+0x52>
 801b58a:	f104 0a19 	add.w	sl, r4, #25
 801b58e:	68e3      	ldr	r3, [r4, #12]
 801b590:	f8d9 2000 	ldr.w	r2, [r9]
 801b594:	1a9b      	subs	r3, r3, r2
 801b596:	42ab      	cmp	r3, r5
 801b598:	dc28      	bgt.n	801b5ec <_printf_common+0xa4>
 801b59a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801b59e:	6822      	ldr	r2, [r4, #0]
 801b5a0:	3300      	adds	r3, #0
 801b5a2:	bf18      	it	ne
 801b5a4:	2301      	movne	r3, #1
 801b5a6:	0692      	lsls	r2, r2, #26
 801b5a8:	d42d      	bmi.n	801b606 <_printf_common+0xbe>
 801b5aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b5ae:	4639      	mov	r1, r7
 801b5b0:	4630      	mov	r0, r6
 801b5b2:	47c0      	blx	r8
 801b5b4:	3001      	adds	r0, #1
 801b5b6:	d020      	beq.n	801b5fa <_printf_common+0xb2>
 801b5b8:	6823      	ldr	r3, [r4, #0]
 801b5ba:	68e5      	ldr	r5, [r4, #12]
 801b5bc:	f8d9 2000 	ldr.w	r2, [r9]
 801b5c0:	f003 0306 	and.w	r3, r3, #6
 801b5c4:	2b04      	cmp	r3, #4
 801b5c6:	bf08      	it	eq
 801b5c8:	1aad      	subeq	r5, r5, r2
 801b5ca:	68a3      	ldr	r3, [r4, #8]
 801b5cc:	6922      	ldr	r2, [r4, #16]
 801b5ce:	bf0c      	ite	eq
 801b5d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b5d4:	2500      	movne	r5, #0
 801b5d6:	4293      	cmp	r3, r2
 801b5d8:	bfc4      	itt	gt
 801b5da:	1a9b      	subgt	r3, r3, r2
 801b5dc:	18ed      	addgt	r5, r5, r3
 801b5de:	f04f 0900 	mov.w	r9, #0
 801b5e2:	341a      	adds	r4, #26
 801b5e4:	454d      	cmp	r5, r9
 801b5e6:	d11a      	bne.n	801b61e <_printf_common+0xd6>
 801b5e8:	2000      	movs	r0, #0
 801b5ea:	e008      	b.n	801b5fe <_printf_common+0xb6>
 801b5ec:	2301      	movs	r3, #1
 801b5ee:	4652      	mov	r2, sl
 801b5f0:	4639      	mov	r1, r7
 801b5f2:	4630      	mov	r0, r6
 801b5f4:	47c0      	blx	r8
 801b5f6:	3001      	adds	r0, #1
 801b5f8:	d103      	bne.n	801b602 <_printf_common+0xba>
 801b5fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b602:	3501      	adds	r5, #1
 801b604:	e7c3      	b.n	801b58e <_printf_common+0x46>
 801b606:	18e1      	adds	r1, r4, r3
 801b608:	1c5a      	adds	r2, r3, #1
 801b60a:	2030      	movs	r0, #48	; 0x30
 801b60c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b610:	4422      	add	r2, r4
 801b612:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b616:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b61a:	3302      	adds	r3, #2
 801b61c:	e7c5      	b.n	801b5aa <_printf_common+0x62>
 801b61e:	2301      	movs	r3, #1
 801b620:	4622      	mov	r2, r4
 801b622:	4639      	mov	r1, r7
 801b624:	4630      	mov	r0, r6
 801b626:	47c0      	blx	r8
 801b628:	3001      	adds	r0, #1
 801b62a:	d0e6      	beq.n	801b5fa <_printf_common+0xb2>
 801b62c:	f109 0901 	add.w	r9, r9, #1
 801b630:	e7d8      	b.n	801b5e4 <_printf_common+0x9c>
	...

0801b634 <_printf_i>:
 801b634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b638:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801b63c:	460c      	mov	r4, r1
 801b63e:	7e09      	ldrb	r1, [r1, #24]
 801b640:	b085      	sub	sp, #20
 801b642:	296e      	cmp	r1, #110	; 0x6e
 801b644:	4617      	mov	r7, r2
 801b646:	4606      	mov	r6, r0
 801b648:	4698      	mov	r8, r3
 801b64a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b64c:	f000 80b3 	beq.w	801b7b6 <_printf_i+0x182>
 801b650:	d822      	bhi.n	801b698 <_printf_i+0x64>
 801b652:	2963      	cmp	r1, #99	; 0x63
 801b654:	d036      	beq.n	801b6c4 <_printf_i+0x90>
 801b656:	d80a      	bhi.n	801b66e <_printf_i+0x3a>
 801b658:	2900      	cmp	r1, #0
 801b65a:	f000 80b9 	beq.w	801b7d0 <_printf_i+0x19c>
 801b65e:	2958      	cmp	r1, #88	; 0x58
 801b660:	f000 8083 	beq.w	801b76a <_printf_i+0x136>
 801b664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b668:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b66c:	e032      	b.n	801b6d4 <_printf_i+0xa0>
 801b66e:	2964      	cmp	r1, #100	; 0x64
 801b670:	d001      	beq.n	801b676 <_printf_i+0x42>
 801b672:	2969      	cmp	r1, #105	; 0x69
 801b674:	d1f6      	bne.n	801b664 <_printf_i+0x30>
 801b676:	6820      	ldr	r0, [r4, #0]
 801b678:	6813      	ldr	r3, [r2, #0]
 801b67a:	0605      	lsls	r5, r0, #24
 801b67c:	f103 0104 	add.w	r1, r3, #4
 801b680:	d52a      	bpl.n	801b6d8 <_printf_i+0xa4>
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	6011      	str	r1, [r2, #0]
 801b686:	2b00      	cmp	r3, #0
 801b688:	da03      	bge.n	801b692 <_printf_i+0x5e>
 801b68a:	222d      	movs	r2, #45	; 0x2d
 801b68c:	425b      	negs	r3, r3
 801b68e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b692:	486f      	ldr	r0, [pc, #444]	; (801b850 <_printf_i+0x21c>)
 801b694:	220a      	movs	r2, #10
 801b696:	e039      	b.n	801b70c <_printf_i+0xd8>
 801b698:	2973      	cmp	r1, #115	; 0x73
 801b69a:	f000 809d 	beq.w	801b7d8 <_printf_i+0x1a4>
 801b69e:	d808      	bhi.n	801b6b2 <_printf_i+0x7e>
 801b6a0:	296f      	cmp	r1, #111	; 0x6f
 801b6a2:	d020      	beq.n	801b6e6 <_printf_i+0xb2>
 801b6a4:	2970      	cmp	r1, #112	; 0x70
 801b6a6:	d1dd      	bne.n	801b664 <_printf_i+0x30>
 801b6a8:	6823      	ldr	r3, [r4, #0]
 801b6aa:	f043 0320 	orr.w	r3, r3, #32
 801b6ae:	6023      	str	r3, [r4, #0]
 801b6b0:	e003      	b.n	801b6ba <_printf_i+0x86>
 801b6b2:	2975      	cmp	r1, #117	; 0x75
 801b6b4:	d017      	beq.n	801b6e6 <_printf_i+0xb2>
 801b6b6:	2978      	cmp	r1, #120	; 0x78
 801b6b8:	d1d4      	bne.n	801b664 <_printf_i+0x30>
 801b6ba:	2378      	movs	r3, #120	; 0x78
 801b6bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b6c0:	4864      	ldr	r0, [pc, #400]	; (801b854 <_printf_i+0x220>)
 801b6c2:	e055      	b.n	801b770 <_printf_i+0x13c>
 801b6c4:	6813      	ldr	r3, [r2, #0]
 801b6c6:	1d19      	adds	r1, r3, #4
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	6011      	str	r1, [r2, #0]
 801b6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b6d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b6d4:	2301      	movs	r3, #1
 801b6d6:	e08c      	b.n	801b7f2 <_printf_i+0x1be>
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	6011      	str	r1, [r2, #0]
 801b6dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b6e0:	bf18      	it	ne
 801b6e2:	b21b      	sxthne	r3, r3
 801b6e4:	e7cf      	b.n	801b686 <_printf_i+0x52>
 801b6e6:	6813      	ldr	r3, [r2, #0]
 801b6e8:	6825      	ldr	r5, [r4, #0]
 801b6ea:	1d18      	adds	r0, r3, #4
 801b6ec:	6010      	str	r0, [r2, #0]
 801b6ee:	0628      	lsls	r0, r5, #24
 801b6f0:	d501      	bpl.n	801b6f6 <_printf_i+0xc2>
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	e002      	b.n	801b6fc <_printf_i+0xc8>
 801b6f6:	0668      	lsls	r0, r5, #25
 801b6f8:	d5fb      	bpl.n	801b6f2 <_printf_i+0xbe>
 801b6fa:	881b      	ldrh	r3, [r3, #0]
 801b6fc:	4854      	ldr	r0, [pc, #336]	; (801b850 <_printf_i+0x21c>)
 801b6fe:	296f      	cmp	r1, #111	; 0x6f
 801b700:	bf14      	ite	ne
 801b702:	220a      	movne	r2, #10
 801b704:	2208      	moveq	r2, #8
 801b706:	2100      	movs	r1, #0
 801b708:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b70c:	6865      	ldr	r5, [r4, #4]
 801b70e:	60a5      	str	r5, [r4, #8]
 801b710:	2d00      	cmp	r5, #0
 801b712:	f2c0 8095 	blt.w	801b840 <_printf_i+0x20c>
 801b716:	6821      	ldr	r1, [r4, #0]
 801b718:	f021 0104 	bic.w	r1, r1, #4
 801b71c:	6021      	str	r1, [r4, #0]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d13d      	bne.n	801b79e <_printf_i+0x16a>
 801b722:	2d00      	cmp	r5, #0
 801b724:	f040 808e 	bne.w	801b844 <_printf_i+0x210>
 801b728:	4665      	mov	r5, ip
 801b72a:	2a08      	cmp	r2, #8
 801b72c:	d10b      	bne.n	801b746 <_printf_i+0x112>
 801b72e:	6823      	ldr	r3, [r4, #0]
 801b730:	07db      	lsls	r3, r3, #31
 801b732:	d508      	bpl.n	801b746 <_printf_i+0x112>
 801b734:	6923      	ldr	r3, [r4, #16]
 801b736:	6862      	ldr	r2, [r4, #4]
 801b738:	429a      	cmp	r2, r3
 801b73a:	bfde      	ittt	le
 801b73c:	2330      	movle	r3, #48	; 0x30
 801b73e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b742:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b746:	ebac 0305 	sub.w	r3, ip, r5
 801b74a:	6123      	str	r3, [r4, #16]
 801b74c:	f8cd 8000 	str.w	r8, [sp]
 801b750:	463b      	mov	r3, r7
 801b752:	aa03      	add	r2, sp, #12
 801b754:	4621      	mov	r1, r4
 801b756:	4630      	mov	r0, r6
 801b758:	f7ff fef6 	bl	801b548 <_printf_common>
 801b75c:	3001      	adds	r0, #1
 801b75e:	d14d      	bne.n	801b7fc <_printf_i+0x1c8>
 801b760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b764:	b005      	add	sp, #20
 801b766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b76a:	4839      	ldr	r0, [pc, #228]	; (801b850 <_printf_i+0x21c>)
 801b76c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b770:	6813      	ldr	r3, [r2, #0]
 801b772:	6821      	ldr	r1, [r4, #0]
 801b774:	1d1d      	adds	r5, r3, #4
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	6015      	str	r5, [r2, #0]
 801b77a:	060a      	lsls	r2, r1, #24
 801b77c:	d50b      	bpl.n	801b796 <_printf_i+0x162>
 801b77e:	07ca      	lsls	r2, r1, #31
 801b780:	bf44      	itt	mi
 801b782:	f041 0120 	orrmi.w	r1, r1, #32
 801b786:	6021      	strmi	r1, [r4, #0]
 801b788:	b91b      	cbnz	r3, 801b792 <_printf_i+0x15e>
 801b78a:	6822      	ldr	r2, [r4, #0]
 801b78c:	f022 0220 	bic.w	r2, r2, #32
 801b790:	6022      	str	r2, [r4, #0]
 801b792:	2210      	movs	r2, #16
 801b794:	e7b7      	b.n	801b706 <_printf_i+0xd2>
 801b796:	064d      	lsls	r5, r1, #25
 801b798:	bf48      	it	mi
 801b79a:	b29b      	uxthmi	r3, r3
 801b79c:	e7ef      	b.n	801b77e <_printf_i+0x14a>
 801b79e:	4665      	mov	r5, ip
 801b7a0:	fbb3 f1f2 	udiv	r1, r3, r2
 801b7a4:	fb02 3311 	mls	r3, r2, r1, r3
 801b7a8:	5cc3      	ldrb	r3, [r0, r3]
 801b7aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b7ae:	460b      	mov	r3, r1
 801b7b0:	2900      	cmp	r1, #0
 801b7b2:	d1f5      	bne.n	801b7a0 <_printf_i+0x16c>
 801b7b4:	e7b9      	b.n	801b72a <_printf_i+0xf6>
 801b7b6:	6813      	ldr	r3, [r2, #0]
 801b7b8:	6825      	ldr	r5, [r4, #0]
 801b7ba:	6961      	ldr	r1, [r4, #20]
 801b7bc:	1d18      	adds	r0, r3, #4
 801b7be:	6010      	str	r0, [r2, #0]
 801b7c0:	0628      	lsls	r0, r5, #24
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	d501      	bpl.n	801b7ca <_printf_i+0x196>
 801b7c6:	6019      	str	r1, [r3, #0]
 801b7c8:	e002      	b.n	801b7d0 <_printf_i+0x19c>
 801b7ca:	066a      	lsls	r2, r5, #25
 801b7cc:	d5fb      	bpl.n	801b7c6 <_printf_i+0x192>
 801b7ce:	8019      	strh	r1, [r3, #0]
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	6123      	str	r3, [r4, #16]
 801b7d4:	4665      	mov	r5, ip
 801b7d6:	e7b9      	b.n	801b74c <_printf_i+0x118>
 801b7d8:	6813      	ldr	r3, [r2, #0]
 801b7da:	1d19      	adds	r1, r3, #4
 801b7dc:	6011      	str	r1, [r2, #0]
 801b7de:	681d      	ldr	r5, [r3, #0]
 801b7e0:	6862      	ldr	r2, [r4, #4]
 801b7e2:	2100      	movs	r1, #0
 801b7e4:	4628      	mov	r0, r5
 801b7e6:	f7e4 fd0b 	bl	8000200 <memchr>
 801b7ea:	b108      	cbz	r0, 801b7f0 <_printf_i+0x1bc>
 801b7ec:	1b40      	subs	r0, r0, r5
 801b7ee:	6060      	str	r0, [r4, #4]
 801b7f0:	6863      	ldr	r3, [r4, #4]
 801b7f2:	6123      	str	r3, [r4, #16]
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b7fa:	e7a7      	b.n	801b74c <_printf_i+0x118>
 801b7fc:	6923      	ldr	r3, [r4, #16]
 801b7fe:	462a      	mov	r2, r5
 801b800:	4639      	mov	r1, r7
 801b802:	4630      	mov	r0, r6
 801b804:	47c0      	blx	r8
 801b806:	3001      	adds	r0, #1
 801b808:	d0aa      	beq.n	801b760 <_printf_i+0x12c>
 801b80a:	6823      	ldr	r3, [r4, #0]
 801b80c:	079b      	lsls	r3, r3, #30
 801b80e:	d413      	bmi.n	801b838 <_printf_i+0x204>
 801b810:	68e0      	ldr	r0, [r4, #12]
 801b812:	9b03      	ldr	r3, [sp, #12]
 801b814:	4298      	cmp	r0, r3
 801b816:	bfb8      	it	lt
 801b818:	4618      	movlt	r0, r3
 801b81a:	e7a3      	b.n	801b764 <_printf_i+0x130>
 801b81c:	2301      	movs	r3, #1
 801b81e:	464a      	mov	r2, r9
 801b820:	4639      	mov	r1, r7
 801b822:	4630      	mov	r0, r6
 801b824:	47c0      	blx	r8
 801b826:	3001      	adds	r0, #1
 801b828:	d09a      	beq.n	801b760 <_printf_i+0x12c>
 801b82a:	3501      	adds	r5, #1
 801b82c:	68e3      	ldr	r3, [r4, #12]
 801b82e:	9a03      	ldr	r2, [sp, #12]
 801b830:	1a9b      	subs	r3, r3, r2
 801b832:	42ab      	cmp	r3, r5
 801b834:	dcf2      	bgt.n	801b81c <_printf_i+0x1e8>
 801b836:	e7eb      	b.n	801b810 <_printf_i+0x1dc>
 801b838:	2500      	movs	r5, #0
 801b83a:	f104 0919 	add.w	r9, r4, #25
 801b83e:	e7f5      	b.n	801b82c <_printf_i+0x1f8>
 801b840:	2b00      	cmp	r3, #0
 801b842:	d1ac      	bne.n	801b79e <_printf_i+0x16a>
 801b844:	7803      	ldrb	r3, [r0, #0]
 801b846:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b84a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b84e:	e76c      	b.n	801b72a <_printf_i+0xf6>
 801b850:	0801d853 	.word	0x0801d853
 801b854:	0801d864 	.word	0x0801d864

0801b858 <_sbrk_r>:
 801b858:	b538      	push	{r3, r4, r5, lr}
 801b85a:	4c06      	ldr	r4, [pc, #24]	; (801b874 <_sbrk_r+0x1c>)
 801b85c:	2300      	movs	r3, #0
 801b85e:	4605      	mov	r5, r0
 801b860:	4608      	mov	r0, r1
 801b862:	6023      	str	r3, [r4, #0]
 801b864:	f7fe fe48 	bl	801a4f8 <_sbrk>
 801b868:	1c43      	adds	r3, r0, #1
 801b86a:	d102      	bne.n	801b872 <_sbrk_r+0x1a>
 801b86c:	6823      	ldr	r3, [r4, #0]
 801b86e:	b103      	cbz	r3, 801b872 <_sbrk_r+0x1a>
 801b870:	602b      	str	r3, [r5, #0]
 801b872:	bd38      	pop	{r3, r4, r5, pc}
 801b874:	2001444c 	.word	0x2001444c

0801b878 <siprintf>:
 801b878:	b40e      	push	{r1, r2, r3}
 801b87a:	b500      	push	{lr}
 801b87c:	b09c      	sub	sp, #112	; 0x70
 801b87e:	ab1d      	add	r3, sp, #116	; 0x74
 801b880:	9002      	str	r0, [sp, #8]
 801b882:	9006      	str	r0, [sp, #24]
 801b884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b888:	4809      	ldr	r0, [pc, #36]	; (801b8b0 <siprintf+0x38>)
 801b88a:	9107      	str	r1, [sp, #28]
 801b88c:	9104      	str	r1, [sp, #16]
 801b88e:	4909      	ldr	r1, [pc, #36]	; (801b8b4 <siprintf+0x3c>)
 801b890:	f853 2b04 	ldr.w	r2, [r3], #4
 801b894:	9105      	str	r1, [sp, #20]
 801b896:	6800      	ldr	r0, [r0, #0]
 801b898:	9301      	str	r3, [sp, #4]
 801b89a:	a902      	add	r1, sp, #8
 801b89c:	f000 fba8 	bl	801bff0 <_svfiprintf_r>
 801b8a0:	9b02      	ldr	r3, [sp, #8]
 801b8a2:	2200      	movs	r2, #0
 801b8a4:	701a      	strb	r2, [r3, #0]
 801b8a6:	b01c      	add	sp, #112	; 0x70
 801b8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8ac:	b003      	add	sp, #12
 801b8ae:	4770      	bx	lr
 801b8b0:	20000058 	.word	0x20000058
 801b8b4:	ffff0208 	.word	0xffff0208

0801b8b8 <strcasecmp>:
 801b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8ba:	4606      	mov	r6, r0
 801b8bc:	460f      	mov	r7, r1
 801b8be:	f816 4b01 	ldrb.w	r4, [r6], #1
 801b8c2:	f7ff fbfd 	bl	801b0c0 <__locale_ctype_ptr>
 801b8c6:	4420      	add	r0, r4
 801b8c8:	f817 5b01 	ldrb.w	r5, [r7], #1
 801b8cc:	7843      	ldrb	r3, [r0, #1]
 801b8ce:	f003 0303 	and.w	r3, r3, #3
 801b8d2:	2b01      	cmp	r3, #1
 801b8d4:	bf08      	it	eq
 801b8d6:	3420      	addeq	r4, #32
 801b8d8:	f7ff fbf2 	bl	801b0c0 <__locale_ctype_ptr>
 801b8dc:	4428      	add	r0, r5
 801b8de:	7842      	ldrb	r2, [r0, #1]
 801b8e0:	f002 0203 	and.w	r2, r2, #3
 801b8e4:	2a01      	cmp	r2, #1
 801b8e6:	bf08      	it	eq
 801b8e8:	3520      	addeq	r5, #32
 801b8ea:	1b60      	subs	r0, r4, r5
 801b8ec:	d101      	bne.n	801b8f2 <strcasecmp+0x3a>
 801b8ee:	2d00      	cmp	r5, #0
 801b8f0:	d1e5      	bne.n	801b8be <strcasecmp+0x6>
 801b8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b8f4 <strchr>:
 801b8f4:	b2c9      	uxtb	r1, r1
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8fc:	b11a      	cbz	r2, 801b906 <strchr+0x12>
 801b8fe:	428a      	cmp	r2, r1
 801b900:	d1f9      	bne.n	801b8f6 <strchr+0x2>
 801b902:	4618      	mov	r0, r3
 801b904:	4770      	bx	lr
 801b906:	2900      	cmp	r1, #0
 801b908:	bf18      	it	ne
 801b90a:	2300      	movne	r3, #0
 801b90c:	e7f9      	b.n	801b902 <strchr+0xe>

0801b90e <strcpy>:
 801b90e:	4603      	mov	r3, r0
 801b910:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b914:	f803 2b01 	strb.w	r2, [r3], #1
 801b918:	2a00      	cmp	r2, #0
 801b91a:	d1f9      	bne.n	801b910 <strcpy+0x2>
 801b91c:	4770      	bx	lr

0801b91e <strncasecmp>:
 801b91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b922:	4606      	mov	r6, r0
 801b924:	460f      	mov	r7, r1
 801b926:	eb00 0802 	add.w	r8, r0, r2
 801b92a:	45b0      	cmp	r8, r6
 801b92c:	d019      	beq.n	801b962 <strncasecmp+0x44>
 801b92e:	f816 4b01 	ldrb.w	r4, [r6], #1
 801b932:	f7ff fbc5 	bl	801b0c0 <__locale_ctype_ptr>
 801b936:	4420      	add	r0, r4
 801b938:	f817 5b01 	ldrb.w	r5, [r7], #1
 801b93c:	7843      	ldrb	r3, [r0, #1]
 801b93e:	f003 0303 	and.w	r3, r3, #3
 801b942:	2b01      	cmp	r3, #1
 801b944:	bf08      	it	eq
 801b946:	3420      	addeq	r4, #32
 801b948:	f7ff fbba 	bl	801b0c0 <__locale_ctype_ptr>
 801b94c:	4428      	add	r0, r5
 801b94e:	7842      	ldrb	r2, [r0, #1]
 801b950:	f002 0203 	and.w	r2, r2, #3
 801b954:	2a01      	cmp	r2, #1
 801b956:	bf08      	it	eq
 801b958:	3520      	addeq	r5, #32
 801b95a:	1b60      	subs	r0, r4, r5
 801b95c:	d102      	bne.n	801b964 <strncasecmp+0x46>
 801b95e:	2d00      	cmp	r5, #0
 801b960:	d1e3      	bne.n	801b92a <strncasecmp+0xc>
 801b962:	2000      	movs	r0, #0
 801b964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b968 <strncpy>:
 801b968:	b570      	push	{r4, r5, r6, lr}
 801b96a:	3901      	subs	r1, #1
 801b96c:	4604      	mov	r4, r0
 801b96e:	b902      	cbnz	r2, 801b972 <strncpy+0xa>
 801b970:	bd70      	pop	{r4, r5, r6, pc}
 801b972:	4623      	mov	r3, r4
 801b974:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801b978:	f803 5b01 	strb.w	r5, [r3], #1
 801b97c:	1e56      	subs	r6, r2, #1
 801b97e:	b92d      	cbnz	r5, 801b98c <strncpy+0x24>
 801b980:	4414      	add	r4, r2
 801b982:	42a3      	cmp	r3, r4
 801b984:	d0f4      	beq.n	801b970 <strncpy+0x8>
 801b986:	f803 5b01 	strb.w	r5, [r3], #1
 801b98a:	e7fa      	b.n	801b982 <strncpy+0x1a>
 801b98c:	461c      	mov	r4, r3
 801b98e:	4632      	mov	r2, r6
 801b990:	e7ed      	b.n	801b96e <strncpy+0x6>
	...

0801b994 <__swbuf_r>:
 801b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b996:	460e      	mov	r6, r1
 801b998:	4614      	mov	r4, r2
 801b99a:	4605      	mov	r5, r0
 801b99c:	b118      	cbz	r0, 801b9a6 <__swbuf_r+0x12>
 801b99e:	6983      	ldr	r3, [r0, #24]
 801b9a0:	b90b      	cbnz	r3, 801b9a6 <__swbuf_r+0x12>
 801b9a2:	f000 f9b5 	bl	801bd10 <__sinit>
 801b9a6:	4b21      	ldr	r3, [pc, #132]	; (801ba2c <__swbuf_r+0x98>)
 801b9a8:	429c      	cmp	r4, r3
 801b9aa:	d12a      	bne.n	801ba02 <__swbuf_r+0x6e>
 801b9ac:	686c      	ldr	r4, [r5, #4]
 801b9ae:	69a3      	ldr	r3, [r4, #24]
 801b9b0:	60a3      	str	r3, [r4, #8]
 801b9b2:	89a3      	ldrh	r3, [r4, #12]
 801b9b4:	071a      	lsls	r2, r3, #28
 801b9b6:	d52e      	bpl.n	801ba16 <__swbuf_r+0x82>
 801b9b8:	6923      	ldr	r3, [r4, #16]
 801b9ba:	b363      	cbz	r3, 801ba16 <__swbuf_r+0x82>
 801b9bc:	6923      	ldr	r3, [r4, #16]
 801b9be:	6820      	ldr	r0, [r4, #0]
 801b9c0:	1ac0      	subs	r0, r0, r3
 801b9c2:	6963      	ldr	r3, [r4, #20]
 801b9c4:	b2f6      	uxtb	r6, r6
 801b9c6:	4283      	cmp	r3, r0
 801b9c8:	4637      	mov	r7, r6
 801b9ca:	dc04      	bgt.n	801b9d6 <__swbuf_r+0x42>
 801b9cc:	4621      	mov	r1, r4
 801b9ce:	4628      	mov	r0, r5
 801b9d0:	f000 f934 	bl	801bc3c <_fflush_r>
 801b9d4:	bb28      	cbnz	r0, 801ba22 <__swbuf_r+0x8e>
 801b9d6:	68a3      	ldr	r3, [r4, #8]
 801b9d8:	3b01      	subs	r3, #1
 801b9da:	60a3      	str	r3, [r4, #8]
 801b9dc:	6823      	ldr	r3, [r4, #0]
 801b9de:	1c5a      	adds	r2, r3, #1
 801b9e0:	6022      	str	r2, [r4, #0]
 801b9e2:	701e      	strb	r6, [r3, #0]
 801b9e4:	6963      	ldr	r3, [r4, #20]
 801b9e6:	3001      	adds	r0, #1
 801b9e8:	4283      	cmp	r3, r0
 801b9ea:	d004      	beq.n	801b9f6 <__swbuf_r+0x62>
 801b9ec:	89a3      	ldrh	r3, [r4, #12]
 801b9ee:	07db      	lsls	r3, r3, #31
 801b9f0:	d519      	bpl.n	801ba26 <__swbuf_r+0x92>
 801b9f2:	2e0a      	cmp	r6, #10
 801b9f4:	d117      	bne.n	801ba26 <__swbuf_r+0x92>
 801b9f6:	4621      	mov	r1, r4
 801b9f8:	4628      	mov	r0, r5
 801b9fa:	f000 f91f 	bl	801bc3c <_fflush_r>
 801b9fe:	b190      	cbz	r0, 801ba26 <__swbuf_r+0x92>
 801ba00:	e00f      	b.n	801ba22 <__swbuf_r+0x8e>
 801ba02:	4b0b      	ldr	r3, [pc, #44]	; (801ba30 <__swbuf_r+0x9c>)
 801ba04:	429c      	cmp	r4, r3
 801ba06:	d101      	bne.n	801ba0c <__swbuf_r+0x78>
 801ba08:	68ac      	ldr	r4, [r5, #8]
 801ba0a:	e7d0      	b.n	801b9ae <__swbuf_r+0x1a>
 801ba0c:	4b09      	ldr	r3, [pc, #36]	; (801ba34 <__swbuf_r+0xa0>)
 801ba0e:	429c      	cmp	r4, r3
 801ba10:	bf08      	it	eq
 801ba12:	68ec      	ldreq	r4, [r5, #12]
 801ba14:	e7cb      	b.n	801b9ae <__swbuf_r+0x1a>
 801ba16:	4621      	mov	r1, r4
 801ba18:	4628      	mov	r0, r5
 801ba1a:	f000 f81b 	bl	801ba54 <__swsetup_r>
 801ba1e:	2800      	cmp	r0, #0
 801ba20:	d0cc      	beq.n	801b9bc <__swbuf_r+0x28>
 801ba22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ba26:	4638      	mov	r0, r7
 801ba28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba2a:	bf00      	nop
 801ba2c:	0801d998 	.word	0x0801d998
 801ba30:	0801d9b8 	.word	0x0801d9b8
 801ba34:	0801d978 	.word	0x0801d978

0801ba38 <__ascii_wctomb>:
 801ba38:	b149      	cbz	r1, 801ba4e <__ascii_wctomb+0x16>
 801ba3a:	2aff      	cmp	r2, #255	; 0xff
 801ba3c:	bf85      	ittet	hi
 801ba3e:	238a      	movhi	r3, #138	; 0x8a
 801ba40:	6003      	strhi	r3, [r0, #0]
 801ba42:	700a      	strbls	r2, [r1, #0]
 801ba44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801ba48:	bf98      	it	ls
 801ba4a:	2001      	movls	r0, #1
 801ba4c:	4770      	bx	lr
 801ba4e:	4608      	mov	r0, r1
 801ba50:	4770      	bx	lr
	...

0801ba54 <__swsetup_r>:
 801ba54:	4b32      	ldr	r3, [pc, #200]	; (801bb20 <__swsetup_r+0xcc>)
 801ba56:	b570      	push	{r4, r5, r6, lr}
 801ba58:	681d      	ldr	r5, [r3, #0]
 801ba5a:	4606      	mov	r6, r0
 801ba5c:	460c      	mov	r4, r1
 801ba5e:	b125      	cbz	r5, 801ba6a <__swsetup_r+0x16>
 801ba60:	69ab      	ldr	r3, [r5, #24]
 801ba62:	b913      	cbnz	r3, 801ba6a <__swsetup_r+0x16>
 801ba64:	4628      	mov	r0, r5
 801ba66:	f000 f953 	bl	801bd10 <__sinit>
 801ba6a:	4b2e      	ldr	r3, [pc, #184]	; (801bb24 <__swsetup_r+0xd0>)
 801ba6c:	429c      	cmp	r4, r3
 801ba6e:	d10f      	bne.n	801ba90 <__swsetup_r+0x3c>
 801ba70:	686c      	ldr	r4, [r5, #4]
 801ba72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba76:	b29a      	uxth	r2, r3
 801ba78:	0715      	lsls	r5, r2, #28
 801ba7a:	d42c      	bmi.n	801bad6 <__swsetup_r+0x82>
 801ba7c:	06d0      	lsls	r0, r2, #27
 801ba7e:	d411      	bmi.n	801baa4 <__swsetup_r+0x50>
 801ba80:	2209      	movs	r2, #9
 801ba82:	6032      	str	r2, [r6, #0]
 801ba84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba88:	81a3      	strh	r3, [r4, #12]
 801ba8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba8e:	e03e      	b.n	801bb0e <__swsetup_r+0xba>
 801ba90:	4b25      	ldr	r3, [pc, #148]	; (801bb28 <__swsetup_r+0xd4>)
 801ba92:	429c      	cmp	r4, r3
 801ba94:	d101      	bne.n	801ba9a <__swsetup_r+0x46>
 801ba96:	68ac      	ldr	r4, [r5, #8]
 801ba98:	e7eb      	b.n	801ba72 <__swsetup_r+0x1e>
 801ba9a:	4b24      	ldr	r3, [pc, #144]	; (801bb2c <__swsetup_r+0xd8>)
 801ba9c:	429c      	cmp	r4, r3
 801ba9e:	bf08      	it	eq
 801baa0:	68ec      	ldreq	r4, [r5, #12]
 801baa2:	e7e6      	b.n	801ba72 <__swsetup_r+0x1e>
 801baa4:	0751      	lsls	r1, r2, #29
 801baa6:	d512      	bpl.n	801bace <__swsetup_r+0x7a>
 801baa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801baaa:	b141      	cbz	r1, 801babe <__swsetup_r+0x6a>
 801baac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bab0:	4299      	cmp	r1, r3
 801bab2:	d002      	beq.n	801baba <__swsetup_r+0x66>
 801bab4:	4630      	mov	r0, r6
 801bab6:	f7ff fb5f 	bl	801b178 <_free_r>
 801baba:	2300      	movs	r3, #0
 801babc:	6363      	str	r3, [r4, #52]	; 0x34
 801babe:	89a3      	ldrh	r3, [r4, #12]
 801bac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bac4:	81a3      	strh	r3, [r4, #12]
 801bac6:	2300      	movs	r3, #0
 801bac8:	6063      	str	r3, [r4, #4]
 801baca:	6923      	ldr	r3, [r4, #16]
 801bacc:	6023      	str	r3, [r4, #0]
 801bace:	89a3      	ldrh	r3, [r4, #12]
 801bad0:	f043 0308 	orr.w	r3, r3, #8
 801bad4:	81a3      	strh	r3, [r4, #12]
 801bad6:	6923      	ldr	r3, [r4, #16]
 801bad8:	b94b      	cbnz	r3, 801baee <__swsetup_r+0x9a>
 801bada:	89a3      	ldrh	r3, [r4, #12]
 801badc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bae4:	d003      	beq.n	801baee <__swsetup_r+0x9a>
 801bae6:	4621      	mov	r1, r4
 801bae8:	4630      	mov	r0, r6
 801baea:	f000 f9bf 	bl	801be6c <__smakebuf_r>
 801baee:	89a2      	ldrh	r2, [r4, #12]
 801baf0:	f012 0301 	ands.w	r3, r2, #1
 801baf4:	d00c      	beq.n	801bb10 <__swsetup_r+0xbc>
 801baf6:	2300      	movs	r3, #0
 801baf8:	60a3      	str	r3, [r4, #8]
 801bafa:	6963      	ldr	r3, [r4, #20]
 801bafc:	425b      	negs	r3, r3
 801bafe:	61a3      	str	r3, [r4, #24]
 801bb00:	6923      	ldr	r3, [r4, #16]
 801bb02:	b953      	cbnz	r3, 801bb1a <__swsetup_r+0xc6>
 801bb04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801bb0c:	d1ba      	bne.n	801ba84 <__swsetup_r+0x30>
 801bb0e:	bd70      	pop	{r4, r5, r6, pc}
 801bb10:	0792      	lsls	r2, r2, #30
 801bb12:	bf58      	it	pl
 801bb14:	6963      	ldrpl	r3, [r4, #20]
 801bb16:	60a3      	str	r3, [r4, #8]
 801bb18:	e7f2      	b.n	801bb00 <__swsetup_r+0xac>
 801bb1a:	2000      	movs	r0, #0
 801bb1c:	e7f7      	b.n	801bb0e <__swsetup_r+0xba>
 801bb1e:	bf00      	nop
 801bb20:	20000058 	.word	0x20000058
 801bb24:	0801d998 	.word	0x0801d998
 801bb28:	0801d9b8 	.word	0x0801d9b8
 801bb2c:	0801d978 	.word	0x0801d978

0801bb30 <__sflush_r>:
 801bb30:	898a      	ldrh	r2, [r1, #12]
 801bb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb36:	4605      	mov	r5, r0
 801bb38:	0710      	lsls	r0, r2, #28
 801bb3a:	460c      	mov	r4, r1
 801bb3c:	d458      	bmi.n	801bbf0 <__sflush_r+0xc0>
 801bb3e:	684b      	ldr	r3, [r1, #4]
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	dc05      	bgt.n	801bb50 <__sflush_r+0x20>
 801bb44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	dc02      	bgt.n	801bb50 <__sflush_r+0x20>
 801bb4a:	2000      	movs	r0, #0
 801bb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb52:	2e00      	cmp	r6, #0
 801bb54:	d0f9      	beq.n	801bb4a <__sflush_r+0x1a>
 801bb56:	2300      	movs	r3, #0
 801bb58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bb5c:	682f      	ldr	r7, [r5, #0]
 801bb5e:	6a21      	ldr	r1, [r4, #32]
 801bb60:	602b      	str	r3, [r5, #0]
 801bb62:	d032      	beq.n	801bbca <__sflush_r+0x9a>
 801bb64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bb66:	89a3      	ldrh	r3, [r4, #12]
 801bb68:	075a      	lsls	r2, r3, #29
 801bb6a:	d505      	bpl.n	801bb78 <__sflush_r+0x48>
 801bb6c:	6863      	ldr	r3, [r4, #4]
 801bb6e:	1ac0      	subs	r0, r0, r3
 801bb70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bb72:	b10b      	cbz	r3, 801bb78 <__sflush_r+0x48>
 801bb74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bb76:	1ac0      	subs	r0, r0, r3
 801bb78:	2300      	movs	r3, #0
 801bb7a:	4602      	mov	r2, r0
 801bb7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb7e:	6a21      	ldr	r1, [r4, #32]
 801bb80:	4628      	mov	r0, r5
 801bb82:	47b0      	blx	r6
 801bb84:	1c43      	adds	r3, r0, #1
 801bb86:	89a3      	ldrh	r3, [r4, #12]
 801bb88:	d106      	bne.n	801bb98 <__sflush_r+0x68>
 801bb8a:	6829      	ldr	r1, [r5, #0]
 801bb8c:	291d      	cmp	r1, #29
 801bb8e:	d848      	bhi.n	801bc22 <__sflush_r+0xf2>
 801bb90:	4a29      	ldr	r2, [pc, #164]	; (801bc38 <__sflush_r+0x108>)
 801bb92:	40ca      	lsrs	r2, r1
 801bb94:	07d6      	lsls	r6, r2, #31
 801bb96:	d544      	bpl.n	801bc22 <__sflush_r+0xf2>
 801bb98:	2200      	movs	r2, #0
 801bb9a:	6062      	str	r2, [r4, #4]
 801bb9c:	04d9      	lsls	r1, r3, #19
 801bb9e:	6922      	ldr	r2, [r4, #16]
 801bba0:	6022      	str	r2, [r4, #0]
 801bba2:	d504      	bpl.n	801bbae <__sflush_r+0x7e>
 801bba4:	1c42      	adds	r2, r0, #1
 801bba6:	d101      	bne.n	801bbac <__sflush_r+0x7c>
 801bba8:	682b      	ldr	r3, [r5, #0]
 801bbaa:	b903      	cbnz	r3, 801bbae <__sflush_r+0x7e>
 801bbac:	6560      	str	r0, [r4, #84]	; 0x54
 801bbae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bbb0:	602f      	str	r7, [r5, #0]
 801bbb2:	2900      	cmp	r1, #0
 801bbb4:	d0c9      	beq.n	801bb4a <__sflush_r+0x1a>
 801bbb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bbba:	4299      	cmp	r1, r3
 801bbbc:	d002      	beq.n	801bbc4 <__sflush_r+0x94>
 801bbbe:	4628      	mov	r0, r5
 801bbc0:	f7ff fada 	bl	801b178 <_free_r>
 801bbc4:	2000      	movs	r0, #0
 801bbc6:	6360      	str	r0, [r4, #52]	; 0x34
 801bbc8:	e7c0      	b.n	801bb4c <__sflush_r+0x1c>
 801bbca:	2301      	movs	r3, #1
 801bbcc:	4628      	mov	r0, r5
 801bbce:	47b0      	blx	r6
 801bbd0:	1c41      	adds	r1, r0, #1
 801bbd2:	d1c8      	bne.n	801bb66 <__sflush_r+0x36>
 801bbd4:	682b      	ldr	r3, [r5, #0]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d0c5      	beq.n	801bb66 <__sflush_r+0x36>
 801bbda:	2b1d      	cmp	r3, #29
 801bbdc:	d001      	beq.n	801bbe2 <__sflush_r+0xb2>
 801bbde:	2b16      	cmp	r3, #22
 801bbe0:	d101      	bne.n	801bbe6 <__sflush_r+0xb6>
 801bbe2:	602f      	str	r7, [r5, #0]
 801bbe4:	e7b1      	b.n	801bb4a <__sflush_r+0x1a>
 801bbe6:	89a3      	ldrh	r3, [r4, #12]
 801bbe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bbec:	81a3      	strh	r3, [r4, #12]
 801bbee:	e7ad      	b.n	801bb4c <__sflush_r+0x1c>
 801bbf0:	690f      	ldr	r7, [r1, #16]
 801bbf2:	2f00      	cmp	r7, #0
 801bbf4:	d0a9      	beq.n	801bb4a <__sflush_r+0x1a>
 801bbf6:	0793      	lsls	r3, r2, #30
 801bbf8:	680e      	ldr	r6, [r1, #0]
 801bbfa:	bf08      	it	eq
 801bbfc:	694b      	ldreq	r3, [r1, #20]
 801bbfe:	600f      	str	r7, [r1, #0]
 801bc00:	bf18      	it	ne
 801bc02:	2300      	movne	r3, #0
 801bc04:	eba6 0807 	sub.w	r8, r6, r7
 801bc08:	608b      	str	r3, [r1, #8]
 801bc0a:	f1b8 0f00 	cmp.w	r8, #0
 801bc0e:	dd9c      	ble.n	801bb4a <__sflush_r+0x1a>
 801bc10:	4643      	mov	r3, r8
 801bc12:	463a      	mov	r2, r7
 801bc14:	6a21      	ldr	r1, [r4, #32]
 801bc16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bc18:	4628      	mov	r0, r5
 801bc1a:	47b0      	blx	r6
 801bc1c:	2800      	cmp	r0, #0
 801bc1e:	dc06      	bgt.n	801bc2e <__sflush_r+0xfe>
 801bc20:	89a3      	ldrh	r3, [r4, #12]
 801bc22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc26:	81a3      	strh	r3, [r4, #12]
 801bc28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc2c:	e78e      	b.n	801bb4c <__sflush_r+0x1c>
 801bc2e:	4407      	add	r7, r0
 801bc30:	eba8 0800 	sub.w	r8, r8, r0
 801bc34:	e7e9      	b.n	801bc0a <__sflush_r+0xda>
 801bc36:	bf00      	nop
 801bc38:	20400001 	.word	0x20400001

0801bc3c <_fflush_r>:
 801bc3c:	b538      	push	{r3, r4, r5, lr}
 801bc3e:	690b      	ldr	r3, [r1, #16]
 801bc40:	4605      	mov	r5, r0
 801bc42:	460c      	mov	r4, r1
 801bc44:	b1db      	cbz	r3, 801bc7e <_fflush_r+0x42>
 801bc46:	b118      	cbz	r0, 801bc50 <_fflush_r+0x14>
 801bc48:	6983      	ldr	r3, [r0, #24]
 801bc4a:	b90b      	cbnz	r3, 801bc50 <_fflush_r+0x14>
 801bc4c:	f000 f860 	bl	801bd10 <__sinit>
 801bc50:	4b0c      	ldr	r3, [pc, #48]	; (801bc84 <_fflush_r+0x48>)
 801bc52:	429c      	cmp	r4, r3
 801bc54:	d109      	bne.n	801bc6a <_fflush_r+0x2e>
 801bc56:	686c      	ldr	r4, [r5, #4]
 801bc58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc5c:	b17b      	cbz	r3, 801bc7e <_fflush_r+0x42>
 801bc5e:	4621      	mov	r1, r4
 801bc60:	4628      	mov	r0, r5
 801bc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bc66:	f7ff bf63 	b.w	801bb30 <__sflush_r>
 801bc6a:	4b07      	ldr	r3, [pc, #28]	; (801bc88 <_fflush_r+0x4c>)
 801bc6c:	429c      	cmp	r4, r3
 801bc6e:	d101      	bne.n	801bc74 <_fflush_r+0x38>
 801bc70:	68ac      	ldr	r4, [r5, #8]
 801bc72:	e7f1      	b.n	801bc58 <_fflush_r+0x1c>
 801bc74:	4b05      	ldr	r3, [pc, #20]	; (801bc8c <_fflush_r+0x50>)
 801bc76:	429c      	cmp	r4, r3
 801bc78:	bf08      	it	eq
 801bc7a:	68ec      	ldreq	r4, [r5, #12]
 801bc7c:	e7ec      	b.n	801bc58 <_fflush_r+0x1c>
 801bc7e:	2000      	movs	r0, #0
 801bc80:	bd38      	pop	{r3, r4, r5, pc}
 801bc82:	bf00      	nop
 801bc84:	0801d998 	.word	0x0801d998
 801bc88:	0801d9b8 	.word	0x0801d9b8
 801bc8c:	0801d978 	.word	0x0801d978

0801bc90 <std>:
 801bc90:	2300      	movs	r3, #0
 801bc92:	b510      	push	{r4, lr}
 801bc94:	4604      	mov	r4, r0
 801bc96:	e9c0 3300 	strd	r3, r3, [r0]
 801bc9a:	6083      	str	r3, [r0, #8]
 801bc9c:	8181      	strh	r1, [r0, #12]
 801bc9e:	6643      	str	r3, [r0, #100]	; 0x64
 801bca0:	81c2      	strh	r2, [r0, #14]
 801bca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bca6:	6183      	str	r3, [r0, #24]
 801bca8:	4619      	mov	r1, r3
 801bcaa:	2208      	movs	r2, #8
 801bcac:	305c      	adds	r0, #92	; 0x5c
 801bcae:	f7ff fa5b 	bl	801b168 <memset>
 801bcb2:	4b05      	ldr	r3, [pc, #20]	; (801bcc8 <std+0x38>)
 801bcb4:	6263      	str	r3, [r4, #36]	; 0x24
 801bcb6:	4b05      	ldr	r3, [pc, #20]	; (801bccc <std+0x3c>)
 801bcb8:	62a3      	str	r3, [r4, #40]	; 0x28
 801bcba:	4b05      	ldr	r3, [pc, #20]	; (801bcd0 <std+0x40>)
 801bcbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bcbe:	4b05      	ldr	r3, [pc, #20]	; (801bcd4 <std+0x44>)
 801bcc0:	6224      	str	r4, [r4, #32]
 801bcc2:	6323      	str	r3, [r4, #48]	; 0x30
 801bcc4:	bd10      	pop	{r4, pc}
 801bcc6:	bf00      	nop
 801bcc8:	0801c1e1 	.word	0x0801c1e1
 801bccc:	0801c203 	.word	0x0801c203
 801bcd0:	0801c23b 	.word	0x0801c23b
 801bcd4:	0801c25f 	.word	0x0801c25f

0801bcd8 <_cleanup_r>:
 801bcd8:	4901      	ldr	r1, [pc, #4]	; (801bce0 <_cleanup_r+0x8>)
 801bcda:	f000 b885 	b.w	801bde8 <_fwalk_reent>
 801bcde:	bf00      	nop
 801bce0:	0801bc3d 	.word	0x0801bc3d

0801bce4 <__sfmoreglue>:
 801bce4:	b570      	push	{r4, r5, r6, lr}
 801bce6:	1e4a      	subs	r2, r1, #1
 801bce8:	2568      	movs	r5, #104	; 0x68
 801bcea:	4355      	muls	r5, r2
 801bcec:	460e      	mov	r6, r1
 801bcee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bcf2:	f7ff fa8f 	bl	801b214 <_malloc_r>
 801bcf6:	4604      	mov	r4, r0
 801bcf8:	b140      	cbz	r0, 801bd0c <__sfmoreglue+0x28>
 801bcfa:	2100      	movs	r1, #0
 801bcfc:	e9c0 1600 	strd	r1, r6, [r0]
 801bd00:	300c      	adds	r0, #12
 801bd02:	60a0      	str	r0, [r4, #8]
 801bd04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bd08:	f7ff fa2e 	bl	801b168 <memset>
 801bd0c:	4620      	mov	r0, r4
 801bd0e:	bd70      	pop	{r4, r5, r6, pc}

0801bd10 <__sinit>:
 801bd10:	6983      	ldr	r3, [r0, #24]
 801bd12:	b510      	push	{r4, lr}
 801bd14:	4604      	mov	r4, r0
 801bd16:	bb33      	cbnz	r3, 801bd66 <__sinit+0x56>
 801bd18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801bd1c:	6503      	str	r3, [r0, #80]	; 0x50
 801bd1e:	4b12      	ldr	r3, [pc, #72]	; (801bd68 <__sinit+0x58>)
 801bd20:	4a12      	ldr	r2, [pc, #72]	; (801bd6c <__sinit+0x5c>)
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	6282      	str	r2, [r0, #40]	; 0x28
 801bd26:	4298      	cmp	r0, r3
 801bd28:	bf04      	itt	eq
 801bd2a:	2301      	moveq	r3, #1
 801bd2c:	6183      	streq	r3, [r0, #24]
 801bd2e:	f000 f81f 	bl	801bd70 <__sfp>
 801bd32:	6060      	str	r0, [r4, #4]
 801bd34:	4620      	mov	r0, r4
 801bd36:	f000 f81b 	bl	801bd70 <__sfp>
 801bd3a:	60a0      	str	r0, [r4, #8]
 801bd3c:	4620      	mov	r0, r4
 801bd3e:	f000 f817 	bl	801bd70 <__sfp>
 801bd42:	2200      	movs	r2, #0
 801bd44:	60e0      	str	r0, [r4, #12]
 801bd46:	2104      	movs	r1, #4
 801bd48:	6860      	ldr	r0, [r4, #4]
 801bd4a:	f7ff ffa1 	bl	801bc90 <std>
 801bd4e:	2201      	movs	r2, #1
 801bd50:	2109      	movs	r1, #9
 801bd52:	68a0      	ldr	r0, [r4, #8]
 801bd54:	f7ff ff9c 	bl	801bc90 <std>
 801bd58:	2202      	movs	r2, #2
 801bd5a:	2112      	movs	r1, #18
 801bd5c:	68e0      	ldr	r0, [r4, #12]
 801bd5e:	f7ff ff97 	bl	801bc90 <std>
 801bd62:	2301      	movs	r3, #1
 801bd64:	61a3      	str	r3, [r4, #24]
 801bd66:	bd10      	pop	{r4, pc}
 801bd68:	0801d834 	.word	0x0801d834
 801bd6c:	0801bcd9 	.word	0x0801bcd9

0801bd70 <__sfp>:
 801bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd72:	4b1b      	ldr	r3, [pc, #108]	; (801bde0 <__sfp+0x70>)
 801bd74:	681e      	ldr	r6, [r3, #0]
 801bd76:	69b3      	ldr	r3, [r6, #24]
 801bd78:	4607      	mov	r7, r0
 801bd7a:	b913      	cbnz	r3, 801bd82 <__sfp+0x12>
 801bd7c:	4630      	mov	r0, r6
 801bd7e:	f7ff ffc7 	bl	801bd10 <__sinit>
 801bd82:	3648      	adds	r6, #72	; 0x48
 801bd84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bd88:	3b01      	subs	r3, #1
 801bd8a:	d503      	bpl.n	801bd94 <__sfp+0x24>
 801bd8c:	6833      	ldr	r3, [r6, #0]
 801bd8e:	b133      	cbz	r3, 801bd9e <__sfp+0x2e>
 801bd90:	6836      	ldr	r6, [r6, #0]
 801bd92:	e7f7      	b.n	801bd84 <__sfp+0x14>
 801bd94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bd98:	b16d      	cbz	r5, 801bdb6 <__sfp+0x46>
 801bd9a:	3468      	adds	r4, #104	; 0x68
 801bd9c:	e7f4      	b.n	801bd88 <__sfp+0x18>
 801bd9e:	2104      	movs	r1, #4
 801bda0:	4638      	mov	r0, r7
 801bda2:	f7ff ff9f 	bl	801bce4 <__sfmoreglue>
 801bda6:	6030      	str	r0, [r6, #0]
 801bda8:	2800      	cmp	r0, #0
 801bdaa:	d1f1      	bne.n	801bd90 <__sfp+0x20>
 801bdac:	230c      	movs	r3, #12
 801bdae:	603b      	str	r3, [r7, #0]
 801bdb0:	4604      	mov	r4, r0
 801bdb2:	4620      	mov	r0, r4
 801bdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdb6:	4b0b      	ldr	r3, [pc, #44]	; (801bde4 <__sfp+0x74>)
 801bdb8:	6665      	str	r5, [r4, #100]	; 0x64
 801bdba:	e9c4 5500 	strd	r5, r5, [r4]
 801bdbe:	60a5      	str	r5, [r4, #8]
 801bdc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801bdc4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801bdc8:	2208      	movs	r2, #8
 801bdca:	4629      	mov	r1, r5
 801bdcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bdd0:	f7ff f9ca 	bl	801b168 <memset>
 801bdd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bdd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bddc:	e7e9      	b.n	801bdb2 <__sfp+0x42>
 801bdde:	bf00      	nop
 801bde0:	0801d834 	.word	0x0801d834
 801bde4:	ffff0001 	.word	0xffff0001

0801bde8 <_fwalk_reent>:
 801bde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdec:	4680      	mov	r8, r0
 801bdee:	4689      	mov	r9, r1
 801bdf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bdf4:	2600      	movs	r6, #0
 801bdf6:	b914      	cbnz	r4, 801bdfe <_fwalk_reent+0x16>
 801bdf8:	4630      	mov	r0, r6
 801bdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bdfe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801be02:	3f01      	subs	r7, #1
 801be04:	d501      	bpl.n	801be0a <_fwalk_reent+0x22>
 801be06:	6824      	ldr	r4, [r4, #0]
 801be08:	e7f5      	b.n	801bdf6 <_fwalk_reent+0xe>
 801be0a:	89ab      	ldrh	r3, [r5, #12]
 801be0c:	2b01      	cmp	r3, #1
 801be0e:	d907      	bls.n	801be20 <_fwalk_reent+0x38>
 801be10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801be14:	3301      	adds	r3, #1
 801be16:	d003      	beq.n	801be20 <_fwalk_reent+0x38>
 801be18:	4629      	mov	r1, r5
 801be1a:	4640      	mov	r0, r8
 801be1c:	47c8      	blx	r9
 801be1e:	4306      	orrs	r6, r0
 801be20:	3568      	adds	r5, #104	; 0x68
 801be22:	e7ee      	b.n	801be02 <_fwalk_reent+0x1a>

0801be24 <__swhatbuf_r>:
 801be24:	b570      	push	{r4, r5, r6, lr}
 801be26:	460e      	mov	r6, r1
 801be28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be2c:	2900      	cmp	r1, #0
 801be2e:	b096      	sub	sp, #88	; 0x58
 801be30:	4614      	mov	r4, r2
 801be32:	461d      	mov	r5, r3
 801be34:	da07      	bge.n	801be46 <__swhatbuf_r+0x22>
 801be36:	2300      	movs	r3, #0
 801be38:	602b      	str	r3, [r5, #0]
 801be3a:	89b3      	ldrh	r3, [r6, #12]
 801be3c:	061a      	lsls	r2, r3, #24
 801be3e:	d410      	bmi.n	801be62 <__swhatbuf_r+0x3e>
 801be40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801be44:	e00e      	b.n	801be64 <__swhatbuf_r+0x40>
 801be46:	466a      	mov	r2, sp
 801be48:	f000 fa30 	bl	801c2ac <_fstat_r>
 801be4c:	2800      	cmp	r0, #0
 801be4e:	dbf2      	blt.n	801be36 <__swhatbuf_r+0x12>
 801be50:	9a01      	ldr	r2, [sp, #4]
 801be52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801be56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801be5a:	425a      	negs	r2, r3
 801be5c:	415a      	adcs	r2, r3
 801be5e:	602a      	str	r2, [r5, #0]
 801be60:	e7ee      	b.n	801be40 <__swhatbuf_r+0x1c>
 801be62:	2340      	movs	r3, #64	; 0x40
 801be64:	2000      	movs	r0, #0
 801be66:	6023      	str	r3, [r4, #0]
 801be68:	b016      	add	sp, #88	; 0x58
 801be6a:	bd70      	pop	{r4, r5, r6, pc}

0801be6c <__smakebuf_r>:
 801be6c:	898b      	ldrh	r3, [r1, #12]
 801be6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801be70:	079d      	lsls	r5, r3, #30
 801be72:	4606      	mov	r6, r0
 801be74:	460c      	mov	r4, r1
 801be76:	d507      	bpl.n	801be88 <__smakebuf_r+0x1c>
 801be78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801be7c:	6023      	str	r3, [r4, #0]
 801be7e:	6123      	str	r3, [r4, #16]
 801be80:	2301      	movs	r3, #1
 801be82:	6163      	str	r3, [r4, #20]
 801be84:	b002      	add	sp, #8
 801be86:	bd70      	pop	{r4, r5, r6, pc}
 801be88:	ab01      	add	r3, sp, #4
 801be8a:	466a      	mov	r2, sp
 801be8c:	f7ff ffca 	bl	801be24 <__swhatbuf_r>
 801be90:	9900      	ldr	r1, [sp, #0]
 801be92:	4605      	mov	r5, r0
 801be94:	4630      	mov	r0, r6
 801be96:	f7ff f9bd 	bl	801b214 <_malloc_r>
 801be9a:	b948      	cbnz	r0, 801beb0 <__smakebuf_r+0x44>
 801be9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bea0:	059a      	lsls	r2, r3, #22
 801bea2:	d4ef      	bmi.n	801be84 <__smakebuf_r+0x18>
 801bea4:	f023 0303 	bic.w	r3, r3, #3
 801bea8:	f043 0302 	orr.w	r3, r3, #2
 801beac:	81a3      	strh	r3, [r4, #12]
 801beae:	e7e3      	b.n	801be78 <__smakebuf_r+0xc>
 801beb0:	4b0d      	ldr	r3, [pc, #52]	; (801bee8 <__smakebuf_r+0x7c>)
 801beb2:	62b3      	str	r3, [r6, #40]	; 0x28
 801beb4:	89a3      	ldrh	r3, [r4, #12]
 801beb6:	6020      	str	r0, [r4, #0]
 801beb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bebc:	81a3      	strh	r3, [r4, #12]
 801bebe:	9b00      	ldr	r3, [sp, #0]
 801bec0:	6163      	str	r3, [r4, #20]
 801bec2:	9b01      	ldr	r3, [sp, #4]
 801bec4:	6120      	str	r0, [r4, #16]
 801bec6:	b15b      	cbz	r3, 801bee0 <__smakebuf_r+0x74>
 801bec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801becc:	4630      	mov	r0, r6
 801bece:	f000 f9ff 	bl	801c2d0 <_isatty_r>
 801bed2:	b128      	cbz	r0, 801bee0 <__smakebuf_r+0x74>
 801bed4:	89a3      	ldrh	r3, [r4, #12]
 801bed6:	f023 0303 	bic.w	r3, r3, #3
 801beda:	f043 0301 	orr.w	r3, r3, #1
 801bede:	81a3      	strh	r3, [r4, #12]
 801bee0:	89a3      	ldrh	r3, [r4, #12]
 801bee2:	431d      	orrs	r5, r3
 801bee4:	81a5      	strh	r5, [r4, #12]
 801bee6:	e7cd      	b.n	801be84 <__smakebuf_r+0x18>
 801bee8:	0801bcd9 	.word	0x0801bcd9

0801beec <__malloc_lock>:
 801beec:	4770      	bx	lr

0801beee <__malloc_unlock>:
 801beee:	4770      	bx	lr

0801bef0 <_realloc_r>:
 801bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bef2:	4607      	mov	r7, r0
 801bef4:	4614      	mov	r4, r2
 801bef6:	460e      	mov	r6, r1
 801bef8:	b921      	cbnz	r1, 801bf04 <_realloc_r+0x14>
 801befa:	4611      	mov	r1, r2
 801befc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bf00:	f7ff b988 	b.w	801b214 <_malloc_r>
 801bf04:	b922      	cbnz	r2, 801bf10 <_realloc_r+0x20>
 801bf06:	f7ff f937 	bl	801b178 <_free_r>
 801bf0a:	4625      	mov	r5, r4
 801bf0c:	4628      	mov	r0, r5
 801bf0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf10:	f000 fa00 	bl	801c314 <_malloc_usable_size_r>
 801bf14:	42a0      	cmp	r0, r4
 801bf16:	d20f      	bcs.n	801bf38 <_realloc_r+0x48>
 801bf18:	4621      	mov	r1, r4
 801bf1a:	4638      	mov	r0, r7
 801bf1c:	f7ff f97a 	bl	801b214 <_malloc_r>
 801bf20:	4605      	mov	r5, r0
 801bf22:	2800      	cmp	r0, #0
 801bf24:	d0f2      	beq.n	801bf0c <_realloc_r+0x1c>
 801bf26:	4631      	mov	r1, r6
 801bf28:	4622      	mov	r2, r4
 801bf2a:	f7ff f8f9 	bl	801b120 <memcpy>
 801bf2e:	4631      	mov	r1, r6
 801bf30:	4638      	mov	r0, r7
 801bf32:	f7ff f921 	bl	801b178 <_free_r>
 801bf36:	e7e9      	b.n	801bf0c <_realloc_r+0x1c>
 801bf38:	4635      	mov	r5, r6
 801bf3a:	e7e7      	b.n	801bf0c <_realloc_r+0x1c>

0801bf3c <__ssputs_r>:
 801bf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf40:	688e      	ldr	r6, [r1, #8]
 801bf42:	429e      	cmp	r6, r3
 801bf44:	4682      	mov	sl, r0
 801bf46:	460c      	mov	r4, r1
 801bf48:	4690      	mov	r8, r2
 801bf4a:	4699      	mov	r9, r3
 801bf4c:	d837      	bhi.n	801bfbe <__ssputs_r+0x82>
 801bf4e:	898a      	ldrh	r2, [r1, #12]
 801bf50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bf54:	d031      	beq.n	801bfba <__ssputs_r+0x7e>
 801bf56:	6825      	ldr	r5, [r4, #0]
 801bf58:	6909      	ldr	r1, [r1, #16]
 801bf5a:	1a6f      	subs	r7, r5, r1
 801bf5c:	6965      	ldr	r5, [r4, #20]
 801bf5e:	2302      	movs	r3, #2
 801bf60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf64:	fb95 f5f3 	sdiv	r5, r5, r3
 801bf68:	f109 0301 	add.w	r3, r9, #1
 801bf6c:	443b      	add	r3, r7
 801bf6e:	429d      	cmp	r5, r3
 801bf70:	bf38      	it	cc
 801bf72:	461d      	movcc	r5, r3
 801bf74:	0553      	lsls	r3, r2, #21
 801bf76:	d530      	bpl.n	801bfda <__ssputs_r+0x9e>
 801bf78:	4629      	mov	r1, r5
 801bf7a:	f7ff f94b 	bl	801b214 <_malloc_r>
 801bf7e:	4606      	mov	r6, r0
 801bf80:	b950      	cbnz	r0, 801bf98 <__ssputs_r+0x5c>
 801bf82:	230c      	movs	r3, #12
 801bf84:	f8ca 3000 	str.w	r3, [sl]
 801bf88:	89a3      	ldrh	r3, [r4, #12]
 801bf8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf8e:	81a3      	strh	r3, [r4, #12]
 801bf90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bf94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf98:	463a      	mov	r2, r7
 801bf9a:	6921      	ldr	r1, [r4, #16]
 801bf9c:	f7ff f8c0 	bl	801b120 <memcpy>
 801bfa0:	89a3      	ldrh	r3, [r4, #12]
 801bfa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bfa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bfaa:	81a3      	strh	r3, [r4, #12]
 801bfac:	6126      	str	r6, [r4, #16]
 801bfae:	6165      	str	r5, [r4, #20]
 801bfb0:	443e      	add	r6, r7
 801bfb2:	1bed      	subs	r5, r5, r7
 801bfb4:	6026      	str	r6, [r4, #0]
 801bfb6:	60a5      	str	r5, [r4, #8]
 801bfb8:	464e      	mov	r6, r9
 801bfba:	454e      	cmp	r6, r9
 801bfbc:	d900      	bls.n	801bfc0 <__ssputs_r+0x84>
 801bfbe:	464e      	mov	r6, r9
 801bfc0:	4632      	mov	r2, r6
 801bfc2:	4641      	mov	r1, r8
 801bfc4:	6820      	ldr	r0, [r4, #0]
 801bfc6:	f7ff f8b6 	bl	801b136 <memmove>
 801bfca:	68a3      	ldr	r3, [r4, #8]
 801bfcc:	1b9b      	subs	r3, r3, r6
 801bfce:	60a3      	str	r3, [r4, #8]
 801bfd0:	6823      	ldr	r3, [r4, #0]
 801bfd2:	441e      	add	r6, r3
 801bfd4:	6026      	str	r6, [r4, #0]
 801bfd6:	2000      	movs	r0, #0
 801bfd8:	e7dc      	b.n	801bf94 <__ssputs_r+0x58>
 801bfda:	462a      	mov	r2, r5
 801bfdc:	f7ff ff88 	bl	801bef0 <_realloc_r>
 801bfe0:	4606      	mov	r6, r0
 801bfe2:	2800      	cmp	r0, #0
 801bfe4:	d1e2      	bne.n	801bfac <__ssputs_r+0x70>
 801bfe6:	6921      	ldr	r1, [r4, #16]
 801bfe8:	4650      	mov	r0, sl
 801bfea:	f7ff f8c5 	bl	801b178 <_free_r>
 801bfee:	e7c8      	b.n	801bf82 <__ssputs_r+0x46>

0801bff0 <_svfiprintf_r>:
 801bff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bff4:	461d      	mov	r5, r3
 801bff6:	898b      	ldrh	r3, [r1, #12]
 801bff8:	061f      	lsls	r7, r3, #24
 801bffa:	b09d      	sub	sp, #116	; 0x74
 801bffc:	4680      	mov	r8, r0
 801bffe:	460c      	mov	r4, r1
 801c000:	4616      	mov	r6, r2
 801c002:	d50f      	bpl.n	801c024 <_svfiprintf_r+0x34>
 801c004:	690b      	ldr	r3, [r1, #16]
 801c006:	b96b      	cbnz	r3, 801c024 <_svfiprintf_r+0x34>
 801c008:	2140      	movs	r1, #64	; 0x40
 801c00a:	f7ff f903 	bl	801b214 <_malloc_r>
 801c00e:	6020      	str	r0, [r4, #0]
 801c010:	6120      	str	r0, [r4, #16]
 801c012:	b928      	cbnz	r0, 801c020 <_svfiprintf_r+0x30>
 801c014:	230c      	movs	r3, #12
 801c016:	f8c8 3000 	str.w	r3, [r8]
 801c01a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c01e:	e0c8      	b.n	801c1b2 <_svfiprintf_r+0x1c2>
 801c020:	2340      	movs	r3, #64	; 0x40
 801c022:	6163      	str	r3, [r4, #20]
 801c024:	2300      	movs	r3, #0
 801c026:	9309      	str	r3, [sp, #36]	; 0x24
 801c028:	2320      	movs	r3, #32
 801c02a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c02e:	2330      	movs	r3, #48	; 0x30
 801c030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c034:	9503      	str	r5, [sp, #12]
 801c036:	f04f 0b01 	mov.w	fp, #1
 801c03a:	4637      	mov	r7, r6
 801c03c:	463d      	mov	r5, r7
 801c03e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c042:	b10b      	cbz	r3, 801c048 <_svfiprintf_r+0x58>
 801c044:	2b25      	cmp	r3, #37	; 0x25
 801c046:	d13e      	bne.n	801c0c6 <_svfiprintf_r+0xd6>
 801c048:	ebb7 0a06 	subs.w	sl, r7, r6
 801c04c:	d00b      	beq.n	801c066 <_svfiprintf_r+0x76>
 801c04e:	4653      	mov	r3, sl
 801c050:	4632      	mov	r2, r6
 801c052:	4621      	mov	r1, r4
 801c054:	4640      	mov	r0, r8
 801c056:	f7ff ff71 	bl	801bf3c <__ssputs_r>
 801c05a:	3001      	adds	r0, #1
 801c05c:	f000 80a4 	beq.w	801c1a8 <_svfiprintf_r+0x1b8>
 801c060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c062:	4453      	add	r3, sl
 801c064:	9309      	str	r3, [sp, #36]	; 0x24
 801c066:	783b      	ldrb	r3, [r7, #0]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	f000 809d 	beq.w	801c1a8 <_svfiprintf_r+0x1b8>
 801c06e:	2300      	movs	r3, #0
 801c070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c078:	9304      	str	r3, [sp, #16]
 801c07a:	9307      	str	r3, [sp, #28]
 801c07c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c080:	931a      	str	r3, [sp, #104]	; 0x68
 801c082:	462f      	mov	r7, r5
 801c084:	2205      	movs	r2, #5
 801c086:	f817 1b01 	ldrb.w	r1, [r7], #1
 801c08a:	4850      	ldr	r0, [pc, #320]	; (801c1cc <_svfiprintf_r+0x1dc>)
 801c08c:	f7e4 f8b8 	bl	8000200 <memchr>
 801c090:	9b04      	ldr	r3, [sp, #16]
 801c092:	b9d0      	cbnz	r0, 801c0ca <_svfiprintf_r+0xda>
 801c094:	06d9      	lsls	r1, r3, #27
 801c096:	bf44      	itt	mi
 801c098:	2220      	movmi	r2, #32
 801c09a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c09e:	071a      	lsls	r2, r3, #28
 801c0a0:	bf44      	itt	mi
 801c0a2:	222b      	movmi	r2, #43	; 0x2b
 801c0a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c0a8:	782a      	ldrb	r2, [r5, #0]
 801c0aa:	2a2a      	cmp	r2, #42	; 0x2a
 801c0ac:	d015      	beq.n	801c0da <_svfiprintf_r+0xea>
 801c0ae:	9a07      	ldr	r2, [sp, #28]
 801c0b0:	462f      	mov	r7, r5
 801c0b2:	2000      	movs	r0, #0
 801c0b4:	250a      	movs	r5, #10
 801c0b6:	4639      	mov	r1, r7
 801c0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c0bc:	3b30      	subs	r3, #48	; 0x30
 801c0be:	2b09      	cmp	r3, #9
 801c0c0:	d94d      	bls.n	801c15e <_svfiprintf_r+0x16e>
 801c0c2:	b1b8      	cbz	r0, 801c0f4 <_svfiprintf_r+0x104>
 801c0c4:	e00f      	b.n	801c0e6 <_svfiprintf_r+0xf6>
 801c0c6:	462f      	mov	r7, r5
 801c0c8:	e7b8      	b.n	801c03c <_svfiprintf_r+0x4c>
 801c0ca:	4a40      	ldr	r2, [pc, #256]	; (801c1cc <_svfiprintf_r+0x1dc>)
 801c0cc:	1a80      	subs	r0, r0, r2
 801c0ce:	fa0b f000 	lsl.w	r0, fp, r0
 801c0d2:	4318      	orrs	r0, r3
 801c0d4:	9004      	str	r0, [sp, #16]
 801c0d6:	463d      	mov	r5, r7
 801c0d8:	e7d3      	b.n	801c082 <_svfiprintf_r+0x92>
 801c0da:	9a03      	ldr	r2, [sp, #12]
 801c0dc:	1d11      	adds	r1, r2, #4
 801c0de:	6812      	ldr	r2, [r2, #0]
 801c0e0:	9103      	str	r1, [sp, #12]
 801c0e2:	2a00      	cmp	r2, #0
 801c0e4:	db01      	blt.n	801c0ea <_svfiprintf_r+0xfa>
 801c0e6:	9207      	str	r2, [sp, #28]
 801c0e8:	e004      	b.n	801c0f4 <_svfiprintf_r+0x104>
 801c0ea:	4252      	negs	r2, r2
 801c0ec:	f043 0302 	orr.w	r3, r3, #2
 801c0f0:	9207      	str	r2, [sp, #28]
 801c0f2:	9304      	str	r3, [sp, #16]
 801c0f4:	783b      	ldrb	r3, [r7, #0]
 801c0f6:	2b2e      	cmp	r3, #46	; 0x2e
 801c0f8:	d10c      	bne.n	801c114 <_svfiprintf_r+0x124>
 801c0fa:	787b      	ldrb	r3, [r7, #1]
 801c0fc:	2b2a      	cmp	r3, #42	; 0x2a
 801c0fe:	d133      	bne.n	801c168 <_svfiprintf_r+0x178>
 801c100:	9b03      	ldr	r3, [sp, #12]
 801c102:	1d1a      	adds	r2, r3, #4
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	9203      	str	r2, [sp, #12]
 801c108:	2b00      	cmp	r3, #0
 801c10a:	bfb8      	it	lt
 801c10c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c110:	3702      	adds	r7, #2
 801c112:	9305      	str	r3, [sp, #20]
 801c114:	4d2e      	ldr	r5, [pc, #184]	; (801c1d0 <_svfiprintf_r+0x1e0>)
 801c116:	7839      	ldrb	r1, [r7, #0]
 801c118:	2203      	movs	r2, #3
 801c11a:	4628      	mov	r0, r5
 801c11c:	f7e4 f870 	bl	8000200 <memchr>
 801c120:	b138      	cbz	r0, 801c132 <_svfiprintf_r+0x142>
 801c122:	2340      	movs	r3, #64	; 0x40
 801c124:	1b40      	subs	r0, r0, r5
 801c126:	fa03 f000 	lsl.w	r0, r3, r0
 801c12a:	9b04      	ldr	r3, [sp, #16]
 801c12c:	4303      	orrs	r3, r0
 801c12e:	3701      	adds	r7, #1
 801c130:	9304      	str	r3, [sp, #16]
 801c132:	7839      	ldrb	r1, [r7, #0]
 801c134:	4827      	ldr	r0, [pc, #156]	; (801c1d4 <_svfiprintf_r+0x1e4>)
 801c136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c13a:	2206      	movs	r2, #6
 801c13c:	1c7e      	adds	r6, r7, #1
 801c13e:	f7e4 f85f 	bl	8000200 <memchr>
 801c142:	2800      	cmp	r0, #0
 801c144:	d038      	beq.n	801c1b8 <_svfiprintf_r+0x1c8>
 801c146:	4b24      	ldr	r3, [pc, #144]	; (801c1d8 <_svfiprintf_r+0x1e8>)
 801c148:	bb13      	cbnz	r3, 801c190 <_svfiprintf_r+0x1a0>
 801c14a:	9b03      	ldr	r3, [sp, #12]
 801c14c:	3307      	adds	r3, #7
 801c14e:	f023 0307 	bic.w	r3, r3, #7
 801c152:	3308      	adds	r3, #8
 801c154:	9303      	str	r3, [sp, #12]
 801c156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c158:	444b      	add	r3, r9
 801c15a:	9309      	str	r3, [sp, #36]	; 0x24
 801c15c:	e76d      	b.n	801c03a <_svfiprintf_r+0x4a>
 801c15e:	fb05 3202 	mla	r2, r5, r2, r3
 801c162:	2001      	movs	r0, #1
 801c164:	460f      	mov	r7, r1
 801c166:	e7a6      	b.n	801c0b6 <_svfiprintf_r+0xc6>
 801c168:	2300      	movs	r3, #0
 801c16a:	3701      	adds	r7, #1
 801c16c:	9305      	str	r3, [sp, #20]
 801c16e:	4619      	mov	r1, r3
 801c170:	250a      	movs	r5, #10
 801c172:	4638      	mov	r0, r7
 801c174:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c178:	3a30      	subs	r2, #48	; 0x30
 801c17a:	2a09      	cmp	r2, #9
 801c17c:	d903      	bls.n	801c186 <_svfiprintf_r+0x196>
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d0c8      	beq.n	801c114 <_svfiprintf_r+0x124>
 801c182:	9105      	str	r1, [sp, #20]
 801c184:	e7c6      	b.n	801c114 <_svfiprintf_r+0x124>
 801c186:	fb05 2101 	mla	r1, r5, r1, r2
 801c18a:	2301      	movs	r3, #1
 801c18c:	4607      	mov	r7, r0
 801c18e:	e7f0      	b.n	801c172 <_svfiprintf_r+0x182>
 801c190:	ab03      	add	r3, sp, #12
 801c192:	9300      	str	r3, [sp, #0]
 801c194:	4622      	mov	r2, r4
 801c196:	4b11      	ldr	r3, [pc, #68]	; (801c1dc <_svfiprintf_r+0x1ec>)
 801c198:	a904      	add	r1, sp, #16
 801c19a:	4640      	mov	r0, r8
 801c19c:	f3af 8000 	nop.w
 801c1a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801c1a4:	4681      	mov	r9, r0
 801c1a6:	d1d6      	bne.n	801c156 <_svfiprintf_r+0x166>
 801c1a8:	89a3      	ldrh	r3, [r4, #12]
 801c1aa:	065b      	lsls	r3, r3, #25
 801c1ac:	f53f af35 	bmi.w	801c01a <_svfiprintf_r+0x2a>
 801c1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c1b2:	b01d      	add	sp, #116	; 0x74
 801c1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1b8:	ab03      	add	r3, sp, #12
 801c1ba:	9300      	str	r3, [sp, #0]
 801c1bc:	4622      	mov	r2, r4
 801c1be:	4b07      	ldr	r3, [pc, #28]	; (801c1dc <_svfiprintf_r+0x1ec>)
 801c1c0:	a904      	add	r1, sp, #16
 801c1c2:	4640      	mov	r0, r8
 801c1c4:	f7ff fa36 	bl	801b634 <_printf_i>
 801c1c8:	e7ea      	b.n	801c1a0 <_svfiprintf_r+0x1b0>
 801c1ca:	bf00      	nop
 801c1cc:	0801d842 	.word	0x0801d842
 801c1d0:	0801d848 	.word	0x0801d848
 801c1d4:	0801d84c 	.word	0x0801d84c
 801c1d8:	00000000 	.word	0x00000000
 801c1dc:	0801bf3d 	.word	0x0801bf3d

0801c1e0 <__sread>:
 801c1e0:	b510      	push	{r4, lr}
 801c1e2:	460c      	mov	r4, r1
 801c1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1e8:	f000 f89c 	bl	801c324 <_read_r>
 801c1ec:	2800      	cmp	r0, #0
 801c1ee:	bfab      	itete	ge
 801c1f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c1f2:	89a3      	ldrhlt	r3, [r4, #12]
 801c1f4:	181b      	addge	r3, r3, r0
 801c1f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c1fa:	bfac      	ite	ge
 801c1fc:	6563      	strge	r3, [r4, #84]	; 0x54
 801c1fe:	81a3      	strhlt	r3, [r4, #12]
 801c200:	bd10      	pop	{r4, pc}

0801c202 <__swrite>:
 801c202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c206:	461f      	mov	r7, r3
 801c208:	898b      	ldrh	r3, [r1, #12]
 801c20a:	05db      	lsls	r3, r3, #23
 801c20c:	4605      	mov	r5, r0
 801c20e:	460c      	mov	r4, r1
 801c210:	4616      	mov	r6, r2
 801c212:	d505      	bpl.n	801c220 <__swrite+0x1e>
 801c214:	2302      	movs	r3, #2
 801c216:	2200      	movs	r2, #0
 801c218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c21c:	f000 f868 	bl	801c2f0 <_lseek_r>
 801c220:	89a3      	ldrh	r3, [r4, #12]
 801c222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c22a:	81a3      	strh	r3, [r4, #12]
 801c22c:	4632      	mov	r2, r6
 801c22e:	463b      	mov	r3, r7
 801c230:	4628      	mov	r0, r5
 801c232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c236:	f000 b817 	b.w	801c268 <_write_r>

0801c23a <__sseek>:
 801c23a:	b510      	push	{r4, lr}
 801c23c:	460c      	mov	r4, r1
 801c23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c242:	f000 f855 	bl	801c2f0 <_lseek_r>
 801c246:	1c43      	adds	r3, r0, #1
 801c248:	89a3      	ldrh	r3, [r4, #12]
 801c24a:	bf15      	itete	ne
 801c24c:	6560      	strne	r0, [r4, #84]	; 0x54
 801c24e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c256:	81a3      	strheq	r3, [r4, #12]
 801c258:	bf18      	it	ne
 801c25a:	81a3      	strhne	r3, [r4, #12]
 801c25c:	bd10      	pop	{r4, pc}

0801c25e <__sclose>:
 801c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c262:	f000 b813 	b.w	801c28c <_close_r>
	...

0801c268 <_write_r>:
 801c268:	b538      	push	{r3, r4, r5, lr}
 801c26a:	4c07      	ldr	r4, [pc, #28]	; (801c288 <_write_r+0x20>)
 801c26c:	4605      	mov	r5, r0
 801c26e:	4608      	mov	r0, r1
 801c270:	4611      	mov	r1, r2
 801c272:	2200      	movs	r2, #0
 801c274:	6022      	str	r2, [r4, #0]
 801c276:	461a      	mov	r2, r3
 801c278:	f7fe f8ed 	bl	801a456 <_write>
 801c27c:	1c43      	adds	r3, r0, #1
 801c27e:	d102      	bne.n	801c286 <_write_r+0x1e>
 801c280:	6823      	ldr	r3, [r4, #0]
 801c282:	b103      	cbz	r3, 801c286 <_write_r+0x1e>
 801c284:	602b      	str	r3, [r5, #0]
 801c286:	bd38      	pop	{r3, r4, r5, pc}
 801c288:	2001444c 	.word	0x2001444c

0801c28c <_close_r>:
 801c28c:	b538      	push	{r3, r4, r5, lr}
 801c28e:	4c06      	ldr	r4, [pc, #24]	; (801c2a8 <_close_r+0x1c>)
 801c290:	2300      	movs	r3, #0
 801c292:	4605      	mov	r5, r0
 801c294:	4608      	mov	r0, r1
 801c296:	6023      	str	r3, [r4, #0]
 801c298:	f7fe f8f9 	bl	801a48e <_close>
 801c29c:	1c43      	adds	r3, r0, #1
 801c29e:	d102      	bne.n	801c2a6 <_close_r+0x1a>
 801c2a0:	6823      	ldr	r3, [r4, #0]
 801c2a2:	b103      	cbz	r3, 801c2a6 <_close_r+0x1a>
 801c2a4:	602b      	str	r3, [r5, #0]
 801c2a6:	bd38      	pop	{r3, r4, r5, pc}
 801c2a8:	2001444c 	.word	0x2001444c

0801c2ac <_fstat_r>:
 801c2ac:	b538      	push	{r3, r4, r5, lr}
 801c2ae:	4c07      	ldr	r4, [pc, #28]	; (801c2cc <_fstat_r+0x20>)
 801c2b0:	2300      	movs	r3, #0
 801c2b2:	4605      	mov	r5, r0
 801c2b4:	4608      	mov	r0, r1
 801c2b6:	4611      	mov	r1, r2
 801c2b8:	6023      	str	r3, [r4, #0]
 801c2ba:	f7fe f8f4 	bl	801a4a6 <_fstat>
 801c2be:	1c43      	adds	r3, r0, #1
 801c2c0:	d102      	bne.n	801c2c8 <_fstat_r+0x1c>
 801c2c2:	6823      	ldr	r3, [r4, #0]
 801c2c4:	b103      	cbz	r3, 801c2c8 <_fstat_r+0x1c>
 801c2c6:	602b      	str	r3, [r5, #0]
 801c2c8:	bd38      	pop	{r3, r4, r5, pc}
 801c2ca:	bf00      	nop
 801c2cc:	2001444c 	.word	0x2001444c

0801c2d0 <_isatty_r>:
 801c2d0:	b538      	push	{r3, r4, r5, lr}
 801c2d2:	4c06      	ldr	r4, [pc, #24]	; (801c2ec <_isatty_r+0x1c>)
 801c2d4:	2300      	movs	r3, #0
 801c2d6:	4605      	mov	r5, r0
 801c2d8:	4608      	mov	r0, r1
 801c2da:	6023      	str	r3, [r4, #0]
 801c2dc:	f7fe f8f3 	bl	801a4c6 <_isatty>
 801c2e0:	1c43      	adds	r3, r0, #1
 801c2e2:	d102      	bne.n	801c2ea <_isatty_r+0x1a>
 801c2e4:	6823      	ldr	r3, [r4, #0]
 801c2e6:	b103      	cbz	r3, 801c2ea <_isatty_r+0x1a>
 801c2e8:	602b      	str	r3, [r5, #0]
 801c2ea:	bd38      	pop	{r3, r4, r5, pc}
 801c2ec:	2001444c 	.word	0x2001444c

0801c2f0 <_lseek_r>:
 801c2f0:	b538      	push	{r3, r4, r5, lr}
 801c2f2:	4c07      	ldr	r4, [pc, #28]	; (801c310 <_lseek_r+0x20>)
 801c2f4:	4605      	mov	r5, r0
 801c2f6:	4608      	mov	r0, r1
 801c2f8:	4611      	mov	r1, r2
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	6022      	str	r2, [r4, #0]
 801c2fe:	461a      	mov	r2, r3
 801c300:	f7fe f8ec 	bl	801a4dc <_lseek>
 801c304:	1c43      	adds	r3, r0, #1
 801c306:	d102      	bne.n	801c30e <_lseek_r+0x1e>
 801c308:	6823      	ldr	r3, [r4, #0]
 801c30a:	b103      	cbz	r3, 801c30e <_lseek_r+0x1e>
 801c30c:	602b      	str	r3, [r5, #0]
 801c30e:	bd38      	pop	{r3, r4, r5, pc}
 801c310:	2001444c 	.word	0x2001444c

0801c314 <_malloc_usable_size_r>:
 801c314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c318:	1f18      	subs	r0, r3, #4
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	bfbc      	itt	lt
 801c31e:	580b      	ldrlt	r3, [r1, r0]
 801c320:	18c0      	addlt	r0, r0, r3
 801c322:	4770      	bx	lr

0801c324 <_read_r>:
 801c324:	b538      	push	{r3, r4, r5, lr}
 801c326:	4c07      	ldr	r4, [pc, #28]	; (801c344 <_read_r+0x20>)
 801c328:	4605      	mov	r5, r0
 801c32a:	4608      	mov	r0, r1
 801c32c:	4611      	mov	r1, r2
 801c32e:	2200      	movs	r2, #0
 801c330:	6022      	str	r2, [r4, #0]
 801c332:	461a      	mov	r2, r3
 801c334:	f7fe f872 	bl	801a41c <_read>
 801c338:	1c43      	adds	r3, r0, #1
 801c33a:	d102      	bne.n	801c342 <_read_r+0x1e>
 801c33c:	6823      	ldr	r3, [r4, #0]
 801c33e:	b103      	cbz	r3, 801c342 <_read_r+0x1e>
 801c340:	602b      	str	r3, [r5, #0]
 801c342:	bd38      	pop	{r3, r4, r5, pc}
 801c344:	2001444c 	.word	0x2001444c

0801c348 <_init>:
 801c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c34a:	bf00      	nop
 801c34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c34e:	bc08      	pop	{r3}
 801c350:	469e      	mov	lr, r3
 801c352:	4770      	bx	lr

0801c354 <_fini>:
 801c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c356:	bf00      	nop
 801c358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c35a:	bc08      	pop	{r3}
 801c35c:	469e      	mov	lr, r3
 801c35e:	4770      	bx	lr
