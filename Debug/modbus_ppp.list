
modbus_ppp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001924c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014e0  080193fc  080193fc  000293fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8dc  0801a8dc  000300bc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a8dc  0801a8dc  0002a8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a8e4  0801a8e4  000300bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a8e4  0801a8e4  0002a8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a8e8  0801a8e8  0002a8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0801a8ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007858  200000bc  0801a9a8  000300bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007914  0801a9a8  00037914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00095885  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009b9c  00000000  00000000  000c5971  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000026d0  00000000  00000000  000cf510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002350  00000000  00000000  000d1be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a801  00000000  00000000  000d3f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00090fb8  00000000  00000000  0010e731  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117663  00000000  00000000  0019f6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002b6d4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a550  00000000  00000000  002b6dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080193e4 	.word	0x080193e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	080193e4 	.word	0x080193e4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <swapInt16>:
 * @param[in] value 16-bit value
 * @return 16-bit value with byte order swapped
 **/

uint16_t swapInt16(uint16_t value)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
   return SWAPINT16(value);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	ba5b      	rev16	r3, r3
 80005ae:	b29b      	uxth	r3, r3
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	061a      	lsls	r2, r3, #24
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80005d0:	431a      	orrs	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80005da:	431a      	orrs	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	0e1b      	lsrs	r3, r3, #24
 80005e0:	4313      	orrs	r3, r2
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <osCreateTask>:
 *   new task. If the function fails, the return value is NULL
 **/

OsTask *osCreateTask(const char_t *name, OsTaskCode taskCode,
   void *param, size_t stackSize, int_t priority)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b08a      	sub	sp, #40	; 0x28
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	603b      	str	r3, [r7, #0]
   threadDef.attr.stack_size = stackSize * sizeof(uint_t);
   threadDef.attr.priority = (osPriority_t) priority;
   threadDef.attr.tz_module = 0;
   threadDef.attr.reserved = 0;
#else
   threadDef.name = (char_t *) name;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	613b      	str	r3, [r7, #16]
   threadDef.pthread = (os_pthread) taskCode;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	617b      	str	r3, [r7, #20]
   threadDef.tpriority = (osPriority) priority;
 8000604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000606:	b21b      	sxth	r3, r3
 8000608:	833b      	strh	r3, [r7, #24]
   threadDef.instances = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
   threadDef.stacksize = stackSize;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	623b      	str	r3, [r7, #32]
#endif

   //Create a new thread
   threadId = osThreadCreate(&threadDef, param);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4618      	mov	r0, r3
 800061a:	f013 ffa7 	bl	801456c <osThreadCreate>
 800061e:	6278      	str	r0, [r7, #36]	; 0x24
   //Return a handle to the newly created thread
   return (OsTask *) threadId;
 8000620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000622:	4618      	mov	r0, r3
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
#if defined(osCMSIS_RTX) || defined(osCMSIS_FreeRTOS)
   //Not implemented
#else
   //Make sure the operating system is running
   if(osKernelRunning())
 800062e:	f013 ff81 	bl	8014534 <osKernelRunning>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <osSuspendAllTasks+0x12>
   {
      //Suspend all threads
      osThreadSuspendAll();
 8000638:	f014 f9e0 	bl	80149fc <osThreadSuspendAll>
   }
#endif
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
#if defined(osCMSIS_RTX) || defined(osCMSIS_FreeRTOS)
   //Not implemented
#else
   //Make sure the operating system is running
   if(osKernelRunning())
 8000644:	f013 ff76 	bl	8014534 <osKernelRunning>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <osResumeAllTasks+0x12>
   {
      //Resume all threads
      osThreadResumeAll();
 800064e:	f014 f9dc 	bl	8014a0a <osThreadResumeAll>
   }
#endif
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <osCreateEvent>:
 * @return The function returns TRUE if the event object was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateEvent(OsEvent *event)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
   semaphoreDef.name = NULL;
   semaphoreDef.attr_bits = 0;
   semaphoreDef.cb_mem = NULL;
   semaphoreDef.cb_size = 0;
#else
   semaphoreDef.dummy = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
#endif

   //Create a binary semaphore object
   event->id = osSemaphoreCreate(&semaphoreDef, 1);
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2101      	movs	r1, #1
 8000668:	4618      	mov	r0, r3
 800066a:	f014 f84b 	bl	8014704 <osSemaphoreCreate>
 800066e:	4602      	mov	r2, r0
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]

   //Check whether the returned semaphore ID is valid
   if(event->id != NULL)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d007      	beq.n	800068c <osCreateEvent+0x36>
   {
      //Force the specified event to the nonsignaled state
      osSemaphoreWait(event->id, 0);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f014 f85c 	bl	8014740 <osSemaphoreWait>
      //Event successfully created
      return TRUE;
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <osCreateEvent+0x38>
   }
   else
   {
      //Failed to create event object
      return FALSE;
 800068c:	2300      	movs	r3, #0
   }
}
 800068e:	4618      	mov	r0, r3
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <osDeleteEvent>:
 * @brief Delete an event object
 * @param[in] event Pointer to the event object
 **/

void osDeleteEvent(OsEvent *event)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
   //Make sure the semaphore ID is valid
   if(event->id != NULL)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <osDeleteEvent+0x1a>
   {
      //Properly dispose the event object
      osSemaphoreDelete(event->id);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f014 f8cc 	bl	8014848 <osSemaphoreDelete>
   }
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <osSetEvent>:
 * @brief Set the specified event object to the signaled state
 * @param[in] event Pointer to the event object
 **/

void osSetEvent(OsEvent *event)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
   //Set the specified event to the signaled state
   osSemaphoreRelease(event->id);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f014 f889 	bl	80147dc <osSemaphoreRelease>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <osWaitForEvent>:
 * @return The function returns TRUE if the state of the specified object is
 *   signaled. FALSE is returned if the timeout interval elapsed
 **/

bool_t osWaitForEvent(OsEvent *event, systime_t timeout)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
   int32_t ret;

   //Wait until the specified event is in the signaled
   //state or the timeout interval elapses
   if(timeout == INFINITE_DELAY)
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006e2:	d108      	bne.n	80006f6 <osWaitForEvent+0x24>
   {
      //Infinite timeout period
      ret = osSemaphoreWait(event->id, osWaitForever);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006ec:	4618      	mov	r0, r3
 80006ee:	f014 f827 	bl	8014740 <osSemaphoreWait>
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	e006      	b.n	8000704 <osWaitForEvent+0x32>

         //Check timeout value
      } while(ret == 0 && timeout > 0);
#else
      //Wait for the specified time interval
      ret = osSemaphoreWait(event->id, timeout);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6839      	ldr	r1, [r7, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f014 f81f 	bl	8014740 <osSemaphoreWait>
 8000702:	60f8      	str	r0, [r7, #12]
      return TRUE;
   else
      return FALSE;
#else
   //Check return value
   if(ret == osOK)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <osWaitForEvent+0x3c>
      return TRUE;
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <osWaitForEvent+0x3e>
   else
      return FALSE;
 800070e:	2300      	movs	r3, #0
#endif
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <osSetEventFromIsr>:
 * @return TRUE if setting the event to signaled state caused a task to unblock
 *   and the unblocked task has a priority higher than the currently running task
 **/

bool_t osSetEventFromIsr(OsEvent *event)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
   //Set the specified event to the signaled state
   osSemaphoreRelease(event->id);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f014 f859 	bl	80147dc <osSemaphoreRelease>

   //The return value is not relevant
   return FALSE;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
   mutexDef.name = NULL;
   mutexDef.attr_bits = 0;
   mutexDef.cb_mem = NULL;
   mutexDef.cb_size = 0;
#else
   mutexDef.dummy = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
#endif

   //Create a mutex object
   mutex->id = osMutexCreate(&mutexDef);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4618      	mov	r0, r3
 8000746:	f013 ff4c 	bl	80145e2 <osMutexCreate>
 800074a:	4602      	mov	r2, r0
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	601a      	str	r2, [r3, #0]

   //Check whether the returned mutex ID is valid
   if(mutex->id != NULL)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <osCreateMutex+0x28>
      return TRUE;
 8000758:	2301      	movs	r3, #1
 800075a:	e000      	b.n	800075e <osCreateMutex+0x2a>
   else
      return FALSE;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <osAcquireMutex>:
 * @brief Acquire ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osAcquireMutex(OsMutex *mutex)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   //Obtain ownership of the mutex object
   osMutexWait(mutex->id, osWaitForever);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000776:	4618      	mov	r0, r3
 8000778:	f013 ff40 	bl	80145fc <osMutexWait>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <osReleaseMutex>:
 * @brief Release ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osReleaseMutex(OsMutex *mutex)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
   //Release ownership of the mutex object
   osMutexRelease(mutex->id);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f013 ff81 	bl	8014698 <osMutexRelease>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <osGetSystemTime>:
 * @brief Retrieve system time
 * @return Number of milliseconds elapsed since the system was last started
 **/

systime_t osGetSystemTime(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
   time = osKernelGetTickCount();
#elif defined(osCMSIS_FreeRTOS)
   time = osKernelGetTickCount();
#else
   //Get current tick count
   time = osKernelSysTick();
 80007a4:	f013 fed2 	bl	801454c <osKernelSysTick>
 80007a8:	6078      	str	r0, [r7, #4]
#endif

   //Convert system ticks to milliseconds
   return OS_SYSTICKS_TO_MS(time);
 80007aa:	687b      	ldr	r3, [r7, #4]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

void *osAllocMem(size_t size)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
   void *p;

   //Enter critical section
   osSuspendAllTasks();
 80007bc:	f7ff ff35 	bl	800062a <osSuspendAllTasks>
   //Allocate a memory block
   p = malloc(size);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f017 fd51 	bl	8018268 <malloc>
 80007c6:	4603      	mov	r3, r0
 80007c8:	60fb      	str	r3, [r7, #12]
   //Leave critical section
   osResumeAllTasks();
 80007ca:	f7ff ff39 	bl	8000640 <osResumeAllTasks>

   //Debug message
   TRACE_DEBUG("Allocating %u bytes at 0x%08X\r\n", size, (uint_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void osFreeMem(void *p)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d006      	beq.n	80007f4 <osFreeMem+0x1c>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08X\r\n", (uint_t) p);

      //Enter critical section
      osSuspendAllTasks();
 80007e6:	f7ff ff20 	bl	800062a <osSuspendAllTasks>
      //Free memory block
      free(p);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f017 fd44 	bl	8018278 <free>
      //Leave critical section
      osResumeAllTasks();
 80007f0:	f7ff ff26 	bl	8000640 <osResumeAllTasks>
   }
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <strSafeCopy>:
 * @param[in] destSize Size of the buffer allocated for the destination string
 * @return Error code
 **/

error_t strSafeCopy(char_t *dest, const char_t *src, size_t destSize)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
   size_t n;

   //Check parameters
   if(dest == NULL || src == NULL || destSize < 1)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d005      	beq.n	800081a <strSafeCopy+0x1e>
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <strSafeCopy+0x1e>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <strSafeCopy+0x22>
      return ERROR_INVALID_PARAMETER;
 800081a:	2302      	movs	r3, #2
 800081c:	e015      	b.n	800084a <strSafeCopy+0x4e>

   //Get the length of the source name
   n = strlen(src);
 800081e:	68b8      	ldr	r0, [r7, #8]
 8000820:	f7ff fce6 	bl	80001f0 <strlen>
 8000824:	6178      	str	r0, [r7, #20]
   //Limit the number of characters to be copied
   n = MIN(n, destSize - 1);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3b01      	subs	r3, #1
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4293      	cmp	r3, r2
 800082e:	bf28      	it	cs
 8000830:	4613      	movcs	r3, r2
 8000832:	617b      	str	r3, [r7, #20]

   //Copy the string
   strncpy(dest, src, n);
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	68b9      	ldr	r1, [r7, #8]
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f018 f8f1 	bl	8018a20 <strncpy>
   //Properly terminate the string with a NULL character
   dest[n] = '\0';
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	4413      	add	r3, r2
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <md5Init>:
 * @brief Initialize MD5 message digest context
 * @param[in] context Pointer to the MD5 context to initialize
 **/

void md5Init(Md5Context *context)
{
 8000854:	b490      	push	{r4, r7}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
   //Set initial hash value
   context->h[0] = 0x67452301;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <md5Init+0x40>)
 8000860:	601a      	str	r2, [r3, #0]
   context->h[1] = 0xEFCDAB89;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <md5Init+0x44>)
 8000866:	605a      	str	r2, [r3, #4]
   context->h[2] = 0x98BADCFE;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a0c      	ldr	r2, [pc, #48]	; (800089c <md5Init+0x48>)
 800086c:	609a      	str	r2, [r3, #8]
   context->h[3] = 0x10325476;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <md5Init+0x4c>)
 8000872:	60da      	str	r2, [r3, #12]

   //Number of bytes in the buffer
   context->size = 0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	651a      	str	r2, [r3, #80]	; 0x50
   //Total length of the message
   context->totalSize = 0;
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	f04f 0300 	mov.w	r3, #0
 8000880:	f04f 0400 	mov.w	r4, #0
 8000884:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bc90      	pop	{r4, r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	67452301 	.word	0x67452301
 8000898:	efcdab89 	.word	0xefcdab89
 800089c:	98badcfe 	.word	0x98badcfe
 80008a0:	10325476 	.word	0x10325476

080008a4 <md5Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void md5Update(Md5Context *context, const void *data, size_t length)
{
 80008a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
   size_t n;

   //Process the incoming data
   while(length > 0)
 80008b2:	e039      	b.n	8000928 <md5Update+0x84>
   {
      //The buffer can hold at most 64 bytes
      n = MIN(length, 64 - context->size);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4293      	cmp	r3, r2
 80008c0:	bf28      	it	cs
 80008c2:	4613      	movcs	r3, r2
 80008c4:	617b      	str	r3, [r7, #20]

      //Copy the data to the buffer
      cryptoMemcpy(context->buffer + context->size, data, n);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f103 0210 	add.w	r2, r3, #16
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008d0:	4413      	add	r3, r2
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f017 fcd6 	bl	8018288 <memcpy>

      //Update the MD5 context
      context->size += n;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	441a      	add	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	651a      	str	r2, [r3, #80]	; 0x50
      context->totalSize += n;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	469b      	mov	fp, r3
 80008f2:	f04f 0c00 	mov.w	ip, #0
 80008f6:	eb1b 0301 	adds.w	r3, fp, r1
 80008fa:	eb4c 0402 	adc.w	r4, ip, r2
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
      //Advance the data pointer
      data = (uint8_t *) data + n;
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	4413      	add	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	607b      	str	r3, [r7, #4]

      //Process message in 16-word blocks
      if(context->size == 64)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000918:	2b40      	cmp	r3, #64	; 0x40
 800091a:	d105      	bne.n	8000928 <md5Update+0x84>
      {
         //Transform the 16-word block
         md5ProcessBlock(context);
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f000 f863 	bl	80009e8 <md5ProcessBlock>
         //Empty the buffer
         context->size = 0;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2200      	movs	r2, #0
 8000926:	651a      	str	r2, [r3, #80]	; 0x50
   while(length > 0)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1c2      	bne.n	80008b4 <md5Update+0x10>
      }
   }
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08000938 <md5Final>:
 * @param[in] context Pointer to the MD5 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void md5Final(Md5Context *context, uint8_t *digest)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t paddingSize;
   uint64_t totalSize;

   //Length of the original message (before padding)
   totalSize = context->totalSize * 8;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	e9d3 1216 	ldrd	r1, r2, [r3, #88]	; 0x58
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	f04f 0400 	mov.w	r4, #0
 8000950:	00d4      	lsls	r4, r2, #3
 8000952:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000956:	00cb      	lsls	r3, r1, #3
 8000958:	e9c7 3402 	strd	r3, r4, [r7, #8]

   //Pad the message so that its length is congruent to 56 modulo 64
   if(context->size < 56)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000960:	2b37      	cmp	r3, #55	; 0x37
 8000962:	d805      	bhi.n	8000970 <md5Final+0x38>
      paddingSize = 56 - context->size;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000968:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	e004      	b.n	800097a <md5Final+0x42>
   else
      paddingSize = 64 + 56 - context->size;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000974:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000978:	613b      	str	r3, [r7, #16]

   //Append padding
   md5Update(context, padding, paddingSize);
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4919      	ldr	r1, [pc, #100]	; (80009e4 <md5Final+0xac>)
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff90 	bl	80008a4 <md5Update>

   //Append the length of the original message
   context->x[14] = htole32((uint32_t) totalSize);
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	649a      	str	r2, [r3, #72]	; 0x48
   context->x[15] = htole32((uint32_t) (totalSize >> 32));
 800098a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800098e:	f04f 0300 	mov.w	r3, #0
 8000992:	f04f 0400 	mov.w	r4, #0
 8000996:	0013      	movs	r3, r2
 8000998:	2400      	movs	r4, #0
 800099a:	461a      	mov	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	64da      	str	r2, [r3, #76]	; 0x4c

   //Calculate the message digest
   md5ProcessBlock(context);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f821 	bl	80009e8 <md5ProcessBlock>

   //Convert from host byte order to little-endian byte order
   for(i = 0; i < 4; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e00a      	b.n	80009c2 <md5Final+0x8a>
   {
      context->h[i] = htole32(context->h[i]);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < 4; i++)
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	3301      	adds	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d9f1      	bls.n	80009ac <md5Final+0x74>
   }

   //Copy the resulting digest
   if(digest != NULL)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d005      	beq.n	80009da <md5Final+0xa2>
      cryptoMemcpy(digest, context->digest, MD5_DIGEST_SIZE);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2210      	movs	r2, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	6838      	ldr	r0, [r7, #0]
 80009d6:	f017 fc57 	bl	8018288 <memcpy>
}
 80009da:	bf00      	nop
 80009dc:	371c      	adds	r7, #28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd90      	pop	{r4, r7, pc}
 80009e2:	bf00      	nop
 80009e4:	0801a4fc 	.word	0x0801a4fc

080009e8 <md5ProcessBlock>:
 * @brief Process message in 16-word blocks
 * @param[in] context Pointer to the MD5 context
 **/

void md5ProcessBlock(Md5Context *context)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Initialize the 4 working registers
   uint32_t a = context->h[0];
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	61bb      	str	r3, [r7, #24]
   uint32_t b = context->h[1];
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	617b      	str	r3, [r7, #20]
   uint32_t c = context->h[2];
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	613b      	str	r3, [r7, #16]
   uint32_t d = context->h[3];
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	60fb      	str	r3, [r7, #12]

   //Process message in 16-word blocks
   uint32_t *x = context->x;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	60bb      	str	r3, [r7, #8]

   //Convert from little-endian byte order to host byte order
   for(i = 0; i < 16; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	e00c      	b.n	8000a2e <md5ProcessBlock+0x46>
   {
      x[i] = letoh32(x[i]);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	441a      	add	r2, r3
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	440b      	add	r3, r1
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	601a      	str	r2, [r3, #0]
   for(i = 0; i < 16; i++)
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d9ef      	bls.n	8000a14 <md5ProcessBlock+0x2c>
   }

   //Round 1
   FF(a, b, c, d, x[0],  7,  k[0]);
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	401a      	ands	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	43d9      	mvns	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	400b      	ands	r3, r1
 8000a42:	431a      	orrs	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4aa7      	ldr	r2, [pc, #668]	; (8000ce8 <md5ProcessBlock+0x300>)
 8000a4c:	4413      	add	r3, r2
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	4413      	add	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[1],  12, k[1]);
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	401a      	ands	r2, r3
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	43d9      	mvns	r1, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	400b      	ands	r3, r1
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	3304      	adds	r3, #4
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a9c      	ldr	r2, [pc, #624]	; (8000cec <md5ProcessBlock+0x304>)
 8000a7a:	4413      	add	r3, r2
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[2],  17, k[2]);
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	401a      	ands	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	3308      	adds	r3, #8
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a92      	ldr	r2, [pc, #584]	; (8000cf0 <md5ProcessBlock+0x308>)
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4413      	add	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4413      	add	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
   FF(b, c, d, a, x[3],  22, k[3]);
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43d9      	mvns	r1, r3
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	400b      	ands	r3, r1
 8000aca:	431a      	orrs	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	330c      	adds	r3, #12
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a87      	ldr	r2, [pc, #540]	; (8000cf4 <md5ProcessBlock+0x30c>)
 8000ad6:	4413      	add	r3, r2
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	4413      	add	r3, r2
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	617b      	str	r3, [r7, #20]
   FF(a, b, c, d, x[4],  7,  k[4]);
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	400b      	ands	r3, r1
 8000af8:	431a      	orrs	r2, r3
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	3310      	adds	r3, #16
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a7d      	ldr	r2, [pc, #500]	; (8000cf8 <md5ProcessBlock+0x310>)
 8000b04:	4413      	add	r3, r2
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4413      	add	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	4413      	add	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[5],  12, k[5]);
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	43d9      	mvns	r1, r3
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	400b      	ands	r3, r1
 8000b26:	431a      	orrs	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3314      	adds	r3, #20
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a72      	ldr	r2, [pc, #456]	; (8000cfc <md5ProcessBlock+0x314>)
 8000b32:	4413      	add	r3, r2
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[6],  17, k[6]);
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	400b      	ands	r3, r1
 8000b54:	431a      	orrs	r2, r3
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3318      	adds	r3, #24
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a68      	ldr	r2, [pc, #416]	; (8000d00 <md5ProcessBlock+0x318>)
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4413      	add	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4413      	add	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
   FF(b, c, d, a, x[7],  22, k[7]);
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	401a      	ands	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	43d9      	mvns	r1, r3
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	400b      	ands	r3, r1
 8000b82:	431a      	orrs	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	331c      	adds	r3, #28
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a5d      	ldr	r2, [pc, #372]	; (8000d04 <md5ProcessBlock+0x31c>)
 8000b8e:	4413      	add	r3, r2
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	4413      	add	r3, r2
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	617b      	str	r3, [r7, #20]
   FF(a, b, c, d, x[8],  7,  k[8]);
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	400b      	ands	r3, r1
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	3320      	adds	r3, #32
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a53      	ldr	r2, [pc, #332]	; (8000d08 <md5ProcessBlock+0x320>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	4413      	add	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[9],  12, k[9]);
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	43d9      	mvns	r1, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	400b      	ands	r3, r1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3324      	adds	r3, #36	; 0x24
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a48      	ldr	r2, [pc, #288]	; (8000d0c <md5ProcessBlock+0x324>)
 8000bea:	4413      	add	r3, r2
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[10], 17, k[10]);
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	401a      	ands	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	3328      	adds	r3, #40	; 0x28
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a3e      	ldr	r2, [pc, #248]	; (8000d10 <md5ProcessBlock+0x328>)
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	4413      	add	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
   FF(b, c, d, a, x[11], 22, k[11]);
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	401a      	ands	r2, r3
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	43d9      	mvns	r1, r3
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	400b      	ands	r3, r1
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	332c      	adds	r3, #44	; 0x2c
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a33      	ldr	r2, [pc, #204]	; (8000d14 <md5ProcessBlock+0x32c>)
 8000c46:	4413      	add	r3, r2
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4413      	add	r3, r2
 8000c58:	617b      	str	r3, [r7, #20]
   FF(a, b, c, d, x[12], 7,  k[12]);
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	400b      	ands	r3, r1
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3330      	adds	r3, #48	; 0x30
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <md5ProcessBlock+0x330>)
 8000c74:	4413      	add	r3, r2
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4413      	add	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4413      	add	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
   FF(d, a, b, c, x[13], 12, k[13]);
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	43d9      	mvns	r1, r3
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	400b      	ands	r3, r1
 8000c96:	431a      	orrs	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3334      	adds	r3, #52	; 0x34
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <md5ProcessBlock+0x334>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	ea4f 5333 	mov.w	r3, r3, ror #20
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
   FF(c, d, a, b, x[14], 17, k[14]);
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	400b      	ands	r3, r1
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	3338      	adds	r3, #56	; 0x38
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <md5ProcessBlock+0x338>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	e01e      	b.n	8000d24 <md5ProcessBlock+0x33c>
 8000ce6:	bf00      	nop
 8000ce8:	d76aa478 	.word	0xd76aa478
 8000cec:	e8c7b756 	.word	0xe8c7b756
 8000cf0:	242070db 	.word	0x242070db
 8000cf4:	c1bdceee 	.word	0xc1bdceee
 8000cf8:	f57c0faf 	.word	0xf57c0faf
 8000cfc:	4787c62a 	.word	0x4787c62a
 8000d00:	a8304613 	.word	0xa8304613
 8000d04:	fd469501 	.word	0xfd469501
 8000d08:	698098d8 	.word	0x698098d8
 8000d0c:	8b44f7af 	.word	0x8b44f7af
 8000d10:	ffff5bb1 	.word	0xffff5bb1
 8000d14:	895cd7be 	.word	0x895cd7be
 8000d18:	6b901122 	.word	0x6b901122
 8000d1c:	fd987193 	.word	0xfd987193
 8000d20:	a679438e 	.word	0xa679438e
   FF(b, c, d, a, x[15], 22, k[15]);
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	401a      	ands	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	43d9      	mvns	r1, r3
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	400b      	ands	r3, r1
 8000d32:	431a      	orrs	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	333c      	adds	r3, #60	; 0x3c
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4aa6      	ldr	r2, [pc, #664]	; (8000fd8 <md5ProcessBlock+0x5f0>)
 8000d3e:	4413      	add	r3, r2
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	4413      	add	r3, r2
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4413      	add	r3, r2
 8000d50:	617b      	str	r3, [r7, #20]

   //Round 2
   GG(a, b, c, d, x[1],  5,  k[16]);
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	401a      	ands	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	400b      	ands	r3, r1
 8000d60:	431a      	orrs	r2, r3
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	3304      	adds	r3, #4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a9c      	ldr	r2, [pc, #624]	; (8000fdc <md5ProcessBlock+0x5f4>)
 8000d6c:	4413      	add	r3, r2
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4413      	add	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[6],  9,  k[17]);
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	401a      	ands	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	43d9      	mvns	r1, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	400b      	ands	r3, r1
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3318      	adds	r3, #24
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a91      	ldr	r2, [pc, #580]	; (8000fe0 <md5ProcessBlock+0x5f8>)
 8000d9a:	4413      	add	r3, r2
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[11], 14, k[18]);
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	400b      	ands	r3, r1
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	332c      	adds	r3, #44	; 0x2c
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a87      	ldr	r2, [pc, #540]	; (8000fe4 <md5ProcessBlock+0x5fc>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4413      	add	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[0],  20, k[19]);
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	401a      	ands	r2, r3
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43d9      	mvns	r1, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	400b      	ands	r3, r1
 8000dea:	431a      	orrs	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a7d      	ldr	r2, [pc, #500]	; (8000fe8 <md5ProcessBlock+0x600>)
 8000df4:	4413      	add	r3, r2
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4413      	add	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
   GG(a, b, c, d, x[5],  5,  k[20]);
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43d9      	mvns	r1, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	400b      	ands	r3, r1
 8000e16:	431a      	orrs	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	3314      	adds	r3, #20
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a72      	ldr	r2, [pc, #456]	; (8000fec <md5ProcessBlock+0x604>)
 8000e22:	4413      	add	r3, r2
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4413      	add	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	4413      	add	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[10], 9,  k[21]);
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	400b      	ands	r3, r1
 8000e44:	431a      	orrs	r2, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3328      	adds	r3, #40	; 0x28
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a68      	ldr	r2, [pc, #416]	; (8000ff0 <md5ProcessBlock+0x608>)
 8000e50:	4413      	add	r3, r2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	4413      	add	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4413      	add	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[15], 14, k[22]);
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	401a      	ands	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	43d9      	mvns	r1, r3
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	400b      	ands	r3, r1
 8000e72:	431a      	orrs	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	333c      	adds	r3, #60	; 0x3c
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a5d      	ldr	r2, [pc, #372]	; (8000ff4 <md5ProcessBlock+0x60c>)
 8000e7e:	4413      	add	r3, r2
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4413      	add	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[4],  20, k[23]);
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	401a      	ands	r2, r3
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	3310      	adds	r3, #16
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a53      	ldr	r2, [pc, #332]	; (8000ff8 <md5ProcessBlock+0x610>)
 8000eac:	4413      	add	r3, r2
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
   GG(a, b, c, d, x[9],  5,  k[24]);
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43d9      	mvns	r1, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	400b      	ands	r3, r1
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	3324      	adds	r3, #36	; 0x24
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <md5ProcessBlock+0x614>)
 8000eda:	4413      	add	r3, r2
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4413      	add	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	4413      	add	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[14], 9,  k[25]);
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	400b      	ands	r3, r1
 8000efc:	431a      	orrs	r2, r3
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	3338      	adds	r3, #56	; 0x38
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <md5ProcessBlock+0x618>)
 8000f08:	4413      	add	r3, r2
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4413      	add	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[3],  14, k[26]);
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	401a      	ands	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	43d9      	mvns	r1, r3
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	400b      	ands	r3, r1
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	330c      	adds	r3, #12
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a33      	ldr	r2, [pc, #204]	; (8001004 <md5ProcessBlock+0x61c>)
 8000f36:	4413      	add	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[8],  20, k[27]);
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	400b      	ands	r3, r1
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	3320      	adds	r3, #32
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a29      	ldr	r2, [pc, #164]	; (8001008 <md5ProcessBlock+0x620>)
 8000f64:	4413      	add	r3, r2
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4413      	add	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	ea4f 3333 	mov.w	r3, r3, ror #12
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4413      	add	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]
   GG(a, b, c, d, x[13], 5,  k[28]);
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43d9      	mvns	r1, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	400b      	ands	r3, r1
 8000f86:	431a      	orrs	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	3334      	adds	r3, #52	; 0x34
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a1e      	ldr	r2, [pc, #120]	; (800100c <md5ProcessBlock+0x624>)
 8000f92:	4413      	add	r3, r2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4413      	add	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
   GG(d, a, b, c, x[2],  9,  k[29]);
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	401a      	ands	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3308      	adds	r3, #8
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <md5ProcessBlock+0x628>)
 8000fc0:	4413      	add	r3, r2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
   GG(c, d, a, b, x[7],  14, k[30]);
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	e01d      	b.n	8001014 <md5ProcessBlock+0x62c>
 8000fd8:	49b40821 	.word	0x49b40821
 8000fdc:	f61e2562 	.word	0xf61e2562
 8000fe0:	c040b340 	.word	0xc040b340
 8000fe4:	265e5a51 	.word	0x265e5a51
 8000fe8:	e9b6c7aa 	.word	0xe9b6c7aa
 8000fec:	d62f105d 	.word	0xd62f105d
 8000ff0:	02441453 	.word	0x02441453
 8000ff4:	d8a1e681 	.word	0xd8a1e681
 8000ff8:	e7d3fbc8 	.word	0xe7d3fbc8
 8000ffc:	21e1cde6 	.word	0x21e1cde6
 8001000:	c33707d6 	.word	0xc33707d6
 8001004:	f4d50d87 	.word	0xf4d50d87
 8001008:	455a14ed 	.word	0x455a14ed
 800100c:	a9e3e905 	.word	0xa9e3e905
 8001010:	fcefa3f8 	.word	0xfcefa3f8
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	43d9      	mvns	r1, r3
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	400b      	ands	r3, r1
 8001020:	431a      	orrs	r2, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	331c      	adds	r3, #28
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4413      	add	r3, r2
 800102a:	4aa4      	ldr	r2, [pc, #656]	; (80012bc <md5ProcessBlock+0x8d4>)
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4413      	add	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
   GG(b, c, d, a, x[12], 20, k[31]);
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	401a      	ands	r2, r3
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	43d9      	mvns	r1, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	400b      	ands	r3, r1
 800104e:	431a      	orrs	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	3330      	adds	r3, #48	; 0x30
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a99      	ldr	r2, [pc, #612]	; (80012c0 <md5ProcessBlock+0x8d8>)
 800105a:	4413      	add	r3, r2
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	4413      	add	r3, r2
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	ea4f 3333 	mov.w	r3, r3, ror #12
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4413      	add	r3, r2
 800106c:	617b      	str	r3, [r7, #20]

   //Round 3
   HH(a, b, c, d, x[5],  4,  k[32]);
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	405a      	eors	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	405a      	eors	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	3314      	adds	r3, #20
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a90      	ldr	r2, [pc, #576]	; (80012c4 <md5ProcessBlock+0x8dc>)
 8001082:	4413      	add	r3, r2
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4413      	add	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	ea4f 7333 	mov.w	r3, r3, ror #28
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4413      	add	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[8],  11, k[33]);
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	405a      	eors	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	405a      	eors	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	3320      	adds	r3, #32
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a87      	ldr	r2, [pc, #540]	; (80012c8 <md5ProcessBlock+0x8e0>)
 80010aa:	4413      	add	r3, r2
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	ea4f 5373 	mov.w	r3, r3, ror #21
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[11], 16, k[34]);
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	405a      	eors	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	405a      	eors	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	332c      	adds	r3, #44	; 0x2c
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a7e      	ldr	r2, [pc, #504]	; (80012cc <md5ProcessBlock+0x8e4>)
 80010d2:	4413      	add	r3, r2
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4413      	add	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	ea4f 4333 	mov.w	r3, r3, ror #16
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[14], 23, k[35]);
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	405a      	eors	r2, r3
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	405a      	eors	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3338      	adds	r3, #56	; 0x38
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a75      	ldr	r2, [pc, #468]	; (80012d0 <md5ProcessBlock+0x8e8>)
 80010fa:	4413      	add	r3, r2
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	4413      	add	r3, r2
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	ea4f 2373 	mov.w	r3, r3, ror #9
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4413      	add	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
   HH(a, b, c, d, x[1],  4,  k[36]);
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	405a      	eors	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	405a      	eors	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3304      	adds	r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a6c      	ldr	r2, [pc, #432]	; (80012d4 <md5ProcessBlock+0x8ec>)
 8001122:	4413      	add	r3, r2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4413      	add	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	ea4f 7333 	mov.w	r3, r3, ror #28
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4413      	add	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[4],  11, k[37]);
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	405a      	eors	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	405a      	eors	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3310      	adds	r3, #16
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a63      	ldr	r2, [pc, #396]	; (80012d8 <md5ProcessBlock+0x8f0>)
 800114a:	4413      	add	r3, r2
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	ea4f 5373 	mov.w	r3, r3, ror #21
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[7],  16, k[38]);
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	405a      	eors	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	405a      	eors	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	331c      	adds	r3, #28
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a5a      	ldr	r2, [pc, #360]	; (80012dc <md5ProcessBlock+0x8f4>)
 8001172:	4413      	add	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4413      	add	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[10], 23, k[39]);
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	405a      	eors	r2, r3
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	405a      	eors	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	3328      	adds	r3, #40	; 0x28
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <md5ProcessBlock+0x8f8>)
 800119a:	4413      	add	r3, r2
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4413      	add	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	ea4f 2373 	mov.w	r3, r3, ror #9
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4413      	add	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]
   HH(a, b, c, d, x[13], 4,  k[40]);
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	405a      	eors	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	405a      	eors	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3334      	adds	r3, #52	; 0x34
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <md5ProcessBlock+0x8fc>)
 80011c2:	4413      	add	r3, r2
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4413      	add	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	ea4f 7333 	mov.w	r3, r3, ror #28
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4413      	add	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[0],  11, k[41]);
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	405a      	eors	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	405a      	eors	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a40      	ldr	r2, [pc, #256]	; (80012e8 <md5ProcessBlock+0x900>)
 80011e8:	4413      	add	r3, r2
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4413      	add	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	ea4f 5373 	mov.w	r3, r3, ror #21
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4413      	add	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[3],  16, k[42]);
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	405a      	eors	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	405a      	eors	r2, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	330c      	adds	r3, #12
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4413      	add	r3, r2
 800120e:	4a37      	ldr	r2, [pc, #220]	; (80012ec <md5ProcessBlock+0x904>)
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4413      	add	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	ea4f 4333 	mov.w	r3, r3, ror #16
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4413      	add	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[6],  23, k[43]);
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	405a      	eors	r2, r3
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	405a      	eors	r2, r3
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3318      	adds	r3, #24
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4413      	add	r3, r2
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <md5ProcessBlock+0x908>)
 8001238:	4413      	add	r3, r2
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4413      	add	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	ea4f 2373 	mov.w	r3, r3, ror #9
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4413      	add	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
   HH(a, b, c, d, x[9],  4,  k[44]);
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	405a      	eors	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	405a      	eors	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	3324      	adds	r3, #36	; 0x24
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <md5ProcessBlock+0x90c>)
 8001260:	4413      	add	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	ea4f 7333 	mov.w	r3, r3, ror #28
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4413      	add	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
   HH(d, a, b, c, x[12], 11, k[45]);
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	405a      	eors	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	405a      	eors	r2, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3330      	adds	r3, #48	; 0x30
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4413      	add	r3, r2
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <md5ProcessBlock+0x910>)
 8001288:	4413      	add	r3, r2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	ea4f 5373 	mov.w	r3, r3, ror #21
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4413      	add	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
   HH(c, d, a, b, x[15], 16, k[46]);
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	405a      	eors	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	405a      	eors	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	333c      	adds	r3, #60	; 0x3c
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <md5ProcessBlock+0x914>)
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4413      	add	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	e022      	b.n	8001300 <md5ProcessBlock+0x918>
 80012ba:	bf00      	nop
 80012bc:	676f02d9 	.word	0x676f02d9
 80012c0:	8d2a4c8a 	.word	0x8d2a4c8a
 80012c4:	fffa3942 	.word	0xfffa3942
 80012c8:	8771f681 	.word	0x8771f681
 80012cc:	6d9d6122 	.word	0x6d9d6122
 80012d0:	fde5380c 	.word	0xfde5380c
 80012d4:	a4beea44 	.word	0xa4beea44
 80012d8:	4bdecfa9 	.word	0x4bdecfa9
 80012dc:	f6bb4b60 	.word	0xf6bb4b60
 80012e0:	bebfbc70 	.word	0xbebfbc70
 80012e4:	289b7ec6 	.word	0x289b7ec6
 80012e8:	eaa127fa 	.word	0xeaa127fa
 80012ec:	d4ef3085 	.word	0xd4ef3085
 80012f0:	04881d05 	.word	0x04881d05
 80012f4:	d9d4d039 	.word	0xd9d4d039
 80012f8:	e6db99e5 	.word	0xe6db99e5
 80012fc:	1fa27cf8 	.word	0x1fa27cf8
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
   HH(b, c, d, a, x[2],  23, k[47]);
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	405a      	eors	r2, r3
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	405a      	eors	r2, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3308      	adds	r3, #8
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4413      	add	r3, r2
 800131e:	4aa7      	ldr	r2, [pc, #668]	; (80015bc <md5ProcessBlock+0xbd4>)
 8001320:	4413      	add	r3, r2
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4413      	add	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	ea4f 2373 	mov.w	r3, r3, ror #9
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]

   //Round 4
   II(a, b, c, d, x[0],  6,  k[48]);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	431a      	orrs	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	405a      	eors	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4413      	add	r3, r2
 8001346:	4a9e      	ldr	r2, [pc, #632]	; (80015c0 <md5ProcessBlock+0xbd8>)
 8001348:	4413      	add	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4413      	add	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	ea4f 63b3 	mov.w	r3, r3, ror #26
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4413      	add	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[7],  10, k[49]);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43da      	mvns	r2, r3
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	431a      	orrs	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	405a      	eors	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	331c      	adds	r3, #28
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a94      	ldr	r2, [pc, #592]	; (80015c4 <md5ProcessBlock+0xbdc>)
 8001372:	4413      	add	r3, r2
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[14], 15, k[50]);
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	43da      	mvns	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	431a      	orrs	r2, r3
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	405a      	eors	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3338      	adds	r3, #56	; 0x38
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4413      	add	r3, r2
 800139a:	4a8b      	ldr	r2, [pc, #556]	; (80015c8 <md5ProcessBlock+0xbe0>)
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4413      	add	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	ea4f 4373 	mov.w	r3, r3, ror #17
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[5],  21, k[51]);
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43da      	mvns	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	405a      	eors	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	3314      	adds	r3, #20
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a81      	ldr	r2, [pc, #516]	; (80015cc <md5ProcessBlock+0xbe4>)
 80013c6:	4413      	add	r3, r2
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4413      	add	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]
   II(a, b, c, d, x[12], 6,  k[52]);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43da      	mvns	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	405a      	eors	r2, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3330      	adds	r3, #48	; 0x30
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a78      	ldr	r2, [pc, #480]	; (80015d0 <md5ProcessBlock+0xbe8>)
 80013f0:	4413      	add	r3, r2
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4413      	add	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	ea4f 63b3 	mov.w	r3, r3, ror #26
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4413      	add	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[3],  10, k[53]);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43da      	mvns	r2, r3
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	431a      	orrs	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	405a      	eors	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	330c      	adds	r3, #12
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a6e      	ldr	r2, [pc, #440]	; (80015d4 <md5ProcessBlock+0xbec>)
 800141a:	4413      	add	r3, r2
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[10], 15, k[54]);
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	43da      	mvns	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	431a      	orrs	r2, r3
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	405a      	eors	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3328      	adds	r3, #40	; 0x28
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4413      	add	r3, r2
 8001442:	4a65      	ldr	r2, [pc, #404]	; (80015d8 <md5ProcessBlock+0xbf0>)
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4413      	add	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	ea4f 4373 	mov.w	r3, r3, ror #17
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[1],  21, k[55]);
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	431a      	orrs	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	405a      	eors	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3304      	adds	r3, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a5b      	ldr	r2, [pc, #364]	; (80015dc <md5ProcessBlock+0xbf4>)
 800146e:	4413      	add	r3, r2
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	4413      	add	r3, r2
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4413      	add	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
   II(a, b, c, d, x[8],  6,  k[56]);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43da      	mvns	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	431a      	orrs	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	405a      	eors	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	3320      	adds	r3, #32
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <md5ProcessBlock+0xbf8>)
 8001498:	4413      	add	r3, r2
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4413      	add	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	ea4f 63b3 	mov.w	r3, r3, ror #26
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[15], 10, k[57]);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43da      	mvns	r2, r3
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	405a      	eors	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	333c      	adds	r3, #60	; 0x3c
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a48      	ldr	r2, [pc, #288]	; (80015e4 <md5ProcessBlock+0xbfc>)
 80014c2:	4413      	add	r3, r2
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[6],  15, k[58]);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	43da      	mvns	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	431a      	orrs	r2, r3
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	405a      	eors	r2, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3318      	adds	r3, #24
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a3f      	ldr	r2, [pc, #252]	; (80015e8 <md5ProcessBlock+0xc00>)
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4413      	add	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	ea4f 4373 	mov.w	r3, r3, ror #17
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4413      	add	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[13], 21, k[59]);
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	43da      	mvns	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	431a      	orrs	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	405a      	eors	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3334      	adds	r3, #52	; 0x34
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a35      	ldr	r2, [pc, #212]	; (80015ec <md5ProcessBlock+0xc04>)
 8001516:	4413      	add	r3, r2
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	4413      	add	r3, r2
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	617b      	str	r3, [r7, #20]
   II(a, b, c, d, x[4],  6,  k[60]);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	43da      	mvns	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	431a      	orrs	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	405a      	eors	r2, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3310      	adds	r3, #16
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4413      	add	r3, r2
 800153e:	4a2c      	ldr	r2, [pc, #176]	; (80015f0 <md5ProcessBlock+0xc08>)
 8001540:	4413      	add	r3, r2
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4413      	add	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4413      	add	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
   II(d, a, b, c, x[11], 10, k[61]);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43da      	mvns	r2, r3
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	431a      	orrs	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	405a      	eors	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	332c      	adds	r3, #44	; 0x2c
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <md5ProcessBlock+0xc0c>)
 800156a:	4413      	add	r3, r2
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
   II(c, d, a, b, x[2],  15, k[62]);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	43da      	mvns	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	431a      	orrs	r2, r3
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	405a      	eors	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3308      	adds	r3, #8
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4413      	add	r3, r2
 8001592:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <md5ProcessBlock+0xc10>)
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4413      	add	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	ea4f 4373 	mov.w	r3, r3, ror #17
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	4413      	add	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
   II(b, c, d, a, x[9],  21, k[63]);
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	405a      	eors	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3324      	adds	r3, #36	; 0x24
 80015b8:	e020      	b.n	80015fc <md5ProcessBlock+0xc14>
 80015ba:	bf00      	nop
 80015bc:	c4ac5665 	.word	0xc4ac5665
 80015c0:	f4292244 	.word	0xf4292244
 80015c4:	432aff97 	.word	0x432aff97
 80015c8:	ab9423a7 	.word	0xab9423a7
 80015cc:	fc93a039 	.word	0xfc93a039
 80015d0:	655b59c3 	.word	0x655b59c3
 80015d4:	8f0ccc92 	.word	0x8f0ccc92
 80015d8:	ffeff47d 	.word	0xffeff47d
 80015dc:	85845dd1 	.word	0x85845dd1
 80015e0:	6fa87e4f 	.word	0x6fa87e4f
 80015e4:	fe2ce6e0 	.word	0xfe2ce6e0
 80015e8:	a3014314 	.word	0xa3014314
 80015ec:	4e0811a1 	.word	0x4e0811a1
 80015f0:	f7537e82 	.word	0xf7537e82
 80015f4:	bd3af235 	.word	0xbd3af235
 80015f8:	2ad7d2bb 	.word	0x2ad7d2bb
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <md5ProcessBlock+0xc6c>)
 8001602:	4413      	add	r3, r2
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4413      	add	r3, r2
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]

   //Update the hash value
   context->h[0] += a;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	441a      	add	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	601a      	str	r2, [r3, #0]
   context->h[1] += b;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	441a      	add	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	605a      	str	r2, [r3, #4]
   context->h[2] += c;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	441a      	add	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	609a      	str	r2, [r3, #8]
   context->h[3] += d;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	441a      	add	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60da      	str	r2, [r3, #12]
}
 8001646:	bf00      	nop
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	eb86d391 	.word	0xeb86d391

08001658 <ipSendDatagram>:
 * @return Error code
 **/

error_t ipSendDatagram(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, uint_t flags)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af02      	add	r7, sp, #8
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d10b      	bne.n	8001686 <ipSendDatagram+0x2e>
   {
      //Form an IPv4 packet and send it
      error = ipv4SendDatagram(interface, &pseudoHeader->ipv4Data,
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1d19      	adds	r1, r3, #4
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f005 f81b 	bl	80066b6 <ipv4SendDatagram>
 8001680:	4603      	mov	r3, r0
 8001682:	82fb      	strh	r3, [r7, #22]
 8001684:	e001      	b.n	800168a <ipSendDatagram+0x32>
   else
#endif
   //Destination address is invalid
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 8001686:	23e4      	movs	r3, #228	; 0xe4
 8001688:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800168a:	8afb      	ldrh	r3, [r7, #22]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <ipCalcChecksum>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksum(const void *data, size_t length)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
   uint32_t temp;
   uint32_t checksum;
   const uint8_t *p;

   //Checksum preset value
   checksum = 0x0000;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]

   //Point to the data over which to calculate the IP checksum
   p = (const uint8_t *) data;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	613b      	str	r3, [r7, #16]

   //Pointer not aligned on a 16-bit boundary?
   if(((uint_t) p & 1) != 0)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00e      	beq.n	80016ce <ipCalcChecksum+0x3a>
   {
      if(length >= 1)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <ipCalcChecksum+0x3a>
#ifdef _CPU_BIG_ENDIAN
         //Update checksum value
         checksum += (uint32_t) *p;
#else
         //Update checksum value
         checksum += (uint32_t) *p << 8;
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	4413      	add	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]
#endif
         //Restore the alignment on 16-bit boundaries
         p++;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	3301      	adds	r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length--;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	603b      	str	r3, [r7, #0]
      }
   }

   //Pointer not aligned on a 32-bit boundary?
   if(((uint_t) p & 2) != 0)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d024      	beq.n	8001722 <ipCalcChecksum+0x8e>
   {
      if(length >= 2)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d921      	bls.n	8001722 <ipCalcChecksum+0x8e>
      {
         //Update checksum value
         checksum += (uint32_t) *((uint16_t *) p);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4413      	add	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]

         //Restore the alignment on 32-bit boundaries
         p += 2;
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	3302      	adds	r3, #2
 80016ee:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length -= 2;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	3b02      	subs	r3, #2
 80016f4:	603b      	str	r3, [r7, #0]
      }
   }

   //Process the data 4 bytes at a time
   while(length >= 4)
 80016f6:	e014      	b.n	8001722 <ipCalcChecksum+0x8e>
   {
      //Update checksum value
      temp = checksum + *((uint32_t *) p);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]

      //Add carry bit, if any
      if(temp < checksum)
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	429a      	cmp	r2, r3
 8001708:	d203      	bcs.n	8001712 <ipCalcChecksum+0x7e>
      {
         checksum = temp + 1;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e001      	b.n	8001716 <ipCalcChecksum+0x82>
      }
      else
      {
         checksum = temp;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	617b      	str	r3, [r7, #20]
      }

      //Point to the next 32-bit word
      p += 4;
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	3304      	adds	r3, #4
 800171a:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 4;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	3b04      	subs	r3, #4
 8001720:	603b      	str	r3, [r7, #0]
   while(length >= 4)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d8e7      	bhi.n	80016f8 <ipCalcChecksum+0x64>
   }

   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	b29a      	uxth	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]

   //Add left-over 16-bit word, if any
   if(length >= 2)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d90b      	bls.n	8001752 <ipCalcChecksum+0xbe>
   {
      //Update checksum value
      checksum += (uint32_t) *((uint16_t *) p);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4413      	add	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

      //Point to the next byte
      p += 2;
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	3302      	adds	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 2;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	3b02      	subs	r3, #2
 8001750:	603b      	str	r3, [r7, #0]
   }

   //Add left-over byte, if any
   if(length >= 1)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <ipCalcChecksum+0xd0>
#ifdef _CPU_BIG_ENDIAN
      //Update checksum value
      checksum += (uint32_t) *p << 8;
#else
      //Update checksum value
      checksum += (uint32_t) *p;
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	4413      	add	r3, r2
 8001762:	617b      	str	r3, [r7, #20]
#endif
   }

   //Fold 32-bit sum to 16 bits (first pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	b29a      	uxth	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits (second pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	b29a      	uxth	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	4413      	add	r3, r2
 800177a:	617b      	str	r3, [r7, #20]

   //Restore checksum endianness
   if(((uint_t) data & 1) != 0)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <ipCalcChecksum+0x100>
   {
      //Swap checksum value
      checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	0a1a      	lsrs	r2, r3, #8
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	4313      	orrs	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	617b      	str	r3, [r7, #20]
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	b29b      	uxth	r3, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	b29b      	uxth	r3, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <ipCalcChecksumEx>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksumEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
   uint_t pos;
   uint8_t *data;
   uint32_t checksum;

   //Checksum preset value
   checksum = 0x0000;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]

   //Current position in the multi-part buffer
   pos = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
 80017c0:	e060      	b.n	8001884 <ipCalcChecksumEx+0xdc>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4413      	add	r3, r2
 80017cc:	889b      	ldrh	r3, [r3, #4]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d249      	bcs.n	800186a <ipCalcChecksumEx+0xc2>
      {
         //Point to the first data byte
         data = (uint8_t *) buffer->chunk[i].address + offset;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017da:	3201      	adds	r2, #1
 80017dc:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4413      	add	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]

         //Number of bytes available in the current chunk
         n = buffer->chunk[i].length - offset;
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	3301      	adds	r3, #1
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
         //Limit the number of byte to process
         n = MIN(n, length - pos);
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4293      	cmp	r3, r2
 8001804:	bf28      	it	cs
 8001806:	4613      	movcs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

         //Take care of alignment issues
         if((pos & 1) != 0)
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <ipCalcChecksumEx+0x7a>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	0a1a      	lsrs	r2, r3, #8
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	4313      	orrs	r3, r2
 800181e:	b29b      	uxth	r3, r3
 8001820:	61fb      	str	r3, [r7, #28]
         }

         //Process data chunk
         checksum += ipCalcChecksum(data, n) ^ 0xFFFF;
 8001822:	6979      	ldr	r1, [r7, #20]
 8001824:	69b8      	ldr	r0, [r7, #24]
 8001826:	f7ff ff35 	bl	8001694 <ipCalcChecksum>
 800182a:	4603      	mov	r3, r0
 800182c:	43db      	mvns	r3, r3
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	4413      	add	r3, r2
 8001836:	61fb      	str	r3, [r7, #28]
         //Fold 32-bit sum to 16 bits
         checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	b29a      	uxth	r2, r3
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	4413      	add	r3, r2
 8001842:	61fb      	str	r3, [r7, #28]

         //Restore checksum endianness
         if((pos & 1) != 0)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <ipCalcChecksumEx+0xb4>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	0a1a      	lsrs	r2, r3, #8
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	4313      	orrs	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	61fb      	str	r3, [r7, #28]
         }

         //Advance current position
         pos += n;
 800185c:	6a3a      	ldr	r2, [r7, #32]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	623b      	str	r3, [r7, #32]
         //Process the next block from the start
         offset = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	e009      	b.n	800187e <ipCalcChecksumEx+0xd6>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	3301      	adds	r3, #1
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4413      	add	r3, r2
 8001874:	889b      	ldrh	r3, [r3, #4]
 8001876:	461a      	mov	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	3301      	adds	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188a:	429a      	cmp	r2, r3
 800188c:	d203      	bcs.n	8001896 <ipCalcChecksumEx+0xee>
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	d395      	bcc.n	80017c2 <ipCalcChecksumEx+0x1a>
      }
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	b29b      	uxth	r3, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	b29b      	uxth	r3, r3
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <ipCalcUpperLayerChecksumEx>:
 * @return Checksum value
 **/

uint16_t ipCalcUpperLayerChecksumEx(const void *pseudoHeader,
   size_t pseudoHeaderLen, const NetBuffer *buffer, size_t offset, size_t length)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	603b      	str	r3, [r7, #0]
   uint32_t checksum;

   //Process pseudo header
   checksum = ipCalcChecksum(pseudoHeader, pseudoHeaderLen) ^ 0xFFFF;
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff feec 	bl	8001694 <ipCalcChecksum>
 80018bc:	4603      	mov	r3, r0
 80018be:	43db      	mvns	r3, r3
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	617b      	str	r3, [r7, #20]
   //Process upper-layer data
   checksum += ipCalcChecksumEx(buffer, offset, length) ^ 0xFFFF;
 80018c4:	6a3a      	ldr	r2, [r7, #32]
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff6d 	bl	80017a8 <ipCalcChecksumEx>
 80018ce:	4603      	mov	r3, r0
 80018d0:	43db      	mvns	r3, r3
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	0c1b      	lsrs	r3, r3, #16
 80018e4:	4413      	add	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	b29b      	uxth	r3, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <ipAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ipAllocBuffer(size_t length, size_t *offset)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
#if (IPV6_SUPPORT == ENABLED)
   //Maximum overhead when using IPv6
   headerLen = sizeof(Ipv6Header) + sizeof(Ipv6FragmentHeader);
#else
   //Maximum overhead when using IPv4
   headerLen = sizeof(Ipv4Header);
 8001902:	2314      	movs	r3, #20
 8001904:	60fb      	str	r3, [r7, #12]
#if (ETH_SUPPORT == ENABLED)
   //Allocate a buffer to hold the Ethernet header and the IP packet
   buffer = ethAllocBuffer(length + headerLen, offset);
#elif (PPP_SUPPORT == ENABLED)
   //Allocate a buffer to hold the PPP header and the IP packet
   buffer = pppAllocBuffer(length + headerLen, offset);
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f009 f9d2 	bl	800acb8 <pppAllocBuffer>
 8001914:	60b8      	str	r0, [r7, #8]
   //Clear offset value
   *offset = 0;
#endif

   //Successful memory allocation?
   if(buffer != NULL)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <ipAllocBuffer+0x30>
   {
      //Offset to the first byte of the payload
      *offset += headerLen;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	441a      	add	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	601a      	str	r2, [r3, #0]
   }

   //Return a pointer to the freshly allocated buffer
   return buffer;
 8001928:	68bb      	ldr	r3, [r7, #8]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <netInit>:
 * @brief TCP/IP stack initialization
 * @return Error code
 **/

error_t netInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af02      	add	r7, sp, #8
   error_t error;
   uint_t i;
   NetInterface *interface;

   //The TCP/IP process is currently suspended
   netTaskRunning = FALSE;
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <netInit+0x148>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
   //Get current time
   netTimestamp = osGetSystemTime();
 8001940:	f7fe ff2d 	bl	800079e <osGetSystemTime>
 8001944:	4602      	mov	r2, r0
 8001946:	4b4e      	ldr	r3, [pc, #312]	; (8001a80 <netInit+0x14c>)
 8001948:	601a      	str	r2, [r3, #0]

   //Create a mutex to prevent simultaneous access to the TCP/IP stack
   if(!osCreateMutex(&netMutex))
 800194a:	484e      	ldr	r0, [pc, #312]	; (8001a84 <netInit+0x150>)
 800194c:	f7fe fef2 	bl	8000734 <osCreateMutex>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <netInit+0x26>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001956:	2365      	movs	r3, #101	; 0x65
 8001958:	e08b      	b.n	8001a72 <netInit+0x13e>
   }

   //Create a event object to receive notifications from device drivers
   if(!osCreateEvent(&netEvent))
 800195a:	484b      	ldr	r0, [pc, #300]	; (8001a88 <netInit+0x154>)
 800195c:	f7fe fe7b 	bl	8000656 <osCreateEvent>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <netInit+0x36>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001966:	2365      	movs	r3, #101	; 0x65
 8001968:	e083      	b.n	8001a72 <netInit+0x13e>
   }

   //Memory pool initialization
   error = memPoolInit();
 800196a:	f000 fbe1 	bl	8002130 <memPoolInit>
 800196e:	4603      	mov	r3, r0
 8001970:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001972:	897b      	ldrh	r3, [r7, #10]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <netInit+0x48>
      return error;
 8001978:	897b      	ldrh	r3, [r7, #10]
 800197a:	e07a      	b.n	8001a72 <netInit+0x13e>

   //Clear configuration data for each interface
   memset(netInterface, 0, sizeof(netInterface));
 800197c:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001980:	2100      	movs	r1, #0
 8001982:	4842      	ldr	r0, [pc, #264]	; (8001a8c <netInit+0x158>)
 8001984:	f016 fca4 	bl	80182d0 <memset>

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e01b      	b.n	80019c6 <netInit+0x92>
   {
      //Point to the current interface
      interface = &netInterface[i];
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	4a3c      	ldr	r2, [pc, #240]	; (8001a8c <netInit+0x158>)
 800199a:	4413      	add	r3, r2
 800199c:	607b      	str	r3, [r7, #4]

      //Default interface name
      sprintf(interface->name, "eth%u", i);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3310      	adds	r3, #16
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	493a      	ldr	r1, [pc, #232]	; (8001a90 <netInit+0x15c>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f017 f81a 	bl	80189e0 <siprintf>

      //Zero-based index
      interface->index = i;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	601a      	str	r2, [r3, #0]
      //Unique number identifying the interface
      interface->id = i;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]
      //Default PHY address
      interface->phyAddr = UINT8_MAX;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	22ff      	movs	r2, #255	; 0xff
 80019bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3301      	adds	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0e0      	beq.n	800198e <netInit+0x5a>
   }

   //Create a mutex to prevent simultaneous access to the callback table
   if(!osCreateMutex(&callbackTableMutex))
 80019cc:	4831      	ldr	r0, [pc, #196]	; (8001a94 <netInit+0x160>)
 80019ce:	f7fe feb1 	bl	8000734 <osCreateMutex>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <netInit+0xa8>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 80019d8:	2365      	movs	r3, #101	; 0x65
 80019da:	e04a      	b.n	8001a72 <netInit+0x13e>
   }

   //Initialize callback table
   memset(callbackTable, 0, sizeof(callbackTable));
 80019dc:	2248      	movs	r2, #72	; 0x48
 80019de:	2100      	movs	r1, #0
 80019e0:	482d      	ldr	r0, [pc, #180]	; (8001a98 <netInit+0x164>)
 80019e2:	f016 fc75 	bl	80182d0 <memset>

   //Socket related initialization
   error = socketInit();
 80019e6:	f001 f80f 	bl	8002a08 <socketInit>
 80019ea:	4603      	mov	r3, r0
 80019ec:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 80019ee:	897b      	ldrh	r3, [r7, #10]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <netInit+0xc4>
      return error;
 80019f4:	897b      	ldrh	r3, [r7, #10]
 80019f6:	e03c      	b.n	8001a72 <netInit+0x13e>
      return error;
#endif

#if (UDP_SUPPORT == ENABLED)
   //UDP related initialization
   error = udpInit();
 80019f8:	f003 fd74 	bl	80054e4 <udpInit>
 80019fc:	4603      	mov	r3, r0
 80019fe:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001a00:	897b      	ldrh	r3, [r7, #10]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <netInit+0xd6>
      return error;
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	e033      	b.n	8001a72 <netInit+0x13e>
#endif

#if (TCP_SUPPORT == ENABLED)
   //TCP related initialization
   error = tcpInit();
 8001a0a:	f001 f847 	bl	8002a9c <tcpInit>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001a12:	897b      	ldrh	r3, [r7, #10]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <netInit+0xe8>
      return error;
 8001a18:	897b      	ldrh	r3, [r7, #10]
 8001a1a:	e02a      	b.n	8001a72 <netInit+0x13e>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //DNS cache initialization
   error = dnsInit();
 8001a1c:	f004 f868 	bl	8005af0 <dnsInit>
 8001a20:	4603      	mov	r3, r0
 8001a22:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001a24:	897b      	ldrh	r3, [r7, #10]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <netInit+0xfa>
      return error;
 8001a2a:	897b      	ldrh	r3, [r7, #10]
 8001a2c:	e021      	b.n	8001a72 <netInit+0x13e>
#endif

   //Initialize tick counters
   nicTickCounter = 0;
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <netInit+0x168>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

#if (PPP_SUPPORT == ENABLED)
   pppTickCounter = 0;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <netInit+0x16c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   arpTickCounter = 0;
#endif
#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   ipv4FragTickCounter = 0;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <netInit+0x170>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
#endif
#if (IPV6_SUPPORT == ENABLED && DHCPV6_CLIENT_SUPPORT == ENABLED)
   dhcpv6ClientTickCounter = 0;
#endif
#if (TCP_SUPPORT == ENABLED)
   tcpTickCounter = 0;
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <netInit+0x174>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
#endif
#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   dnsTickCounter = 0;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <netInit+0x178>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
   //Create a task to handle TCP/IP events
   osCreateStaticTask(&netTaskInstance, "TCP/IP Stack", (OsTaskCode) netTask,
      NULL, netTaskStack, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);
#else
   //Create a task to handle TCP/IP events
   netTaskHandle = osCreateTask("TCP/IP Stack", (OsTaskCode) netTask,
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	f240 238a 	movw	r3, #650	; 0x28a
 8001a54:	2200      	movs	r2, #0
 8001a56:	4916      	ldr	r1, [pc, #88]	; (8001ab0 <netInit+0x17c>)
 8001a58:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <netInit+0x180>)
 8001a5a:	f7fe fdc8 	bl	80005ee <osCreateTask>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <netInit+0x184>)
 8001a62:	601a      	str	r2, [r3, #0]
      NULL, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);

   //Unable to create the task?
   if(netTaskHandle == OS_INVALID_HANDLE)
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <netInit+0x184>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <netInit+0x13c>
      return ERROR_OUT_OF_RESOURCES;
 8001a6c:	2365      	movs	r3, #101	; 0x65
 8001a6e:	e000      	b.n	8001a72 <netInit+0x13e>
   //The TCP/IP process is now running
   netTaskRunning = TRUE;
#endif

   //Successful initialization
   return NO_ERROR;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200000d8 	.word	0x200000d8
 8001a80:	200000dc 	.word	0x200000dc
 8001a84:	20001a98 	.word	0x20001a98
 8001a88:	20001a90 	.word	0x20001a90
 8001a8c:	20001a9c 	.word	0x20001a9c
 8001a90:	080193fc 	.word	0x080193fc
 8001a94:	200000e0 	.word	0x200000e0
 8001a98:	200000e4 	.word	0x200000e4
 8001a9c:	20001e68 	.word	0x20001e68
 8001aa0:	20003864 	.word	0x20003864
 8001aa4:	20003860 	.word	0x20003860
 8001aa8:	20003474 	.word	0x20003474
 8001aac:	2000385c 	.word	0x2000385c
 8001ab0:	08001ded 	.word	0x08001ded
 8001ab4:	08019404 	.word	0x08019404
 8001ab8:	20001a94 	.word	0x20001a94

08001abc <netSetInterfaceName>:
 * @param[in] name NULL-terminated string that contains the interface name
 * @return Error code
 **/

error_t netSetInterfaceName(NetInterface *interface, const char_t *name)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || name == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <netSetInterfaceName+0x16>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <netSetInterfaceName+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e00d      	b.n	8001af2 <netSetInterfaceName+0x36>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001ad6:	4809      	ldr	r0, [pc, #36]	; (8001afc <netSetInterfaceName+0x40>)
 8001ad8:	f7fe fe45 	bl	8000766 <osAcquireMutex>

   //Set interface name
   strSafeCopy(interface->name, name, NET_MAX_IF_NAME_LEN);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3310      	adds	r3, #16
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	6839      	ldr	r1, [r7, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fe89 	bl	80007fc <strSafeCopy>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <netSetInterfaceName+0x40>)
 8001aec:	f7fe fe4a 	bl	8000784 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20001a98 	.word	0x20001a98

08001b00 <netSetDriver>:
 * @param[in] driver Ethernet MAC driver
 * @return Error code
 **/

error_t netSetDriver(NetInterface *interface, const NicDriver *driver)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <netSetDriver+0x16>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <netSetDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001b16:	2302      	movs	r3, #2
 8001b18:	e009      	b.n	8001b2e <netSetDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001b1a:	4807      	ldr	r0, [pc, #28]	; (8001b38 <netSetDriver+0x38>)
 8001b1c:	f7fe fe23 	bl	8000766 <osAcquireMutex>
   //Set Ethernet MAC driver
   interface->nicDriver = driver;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	649a      	str	r2, [r3, #72]	; 0x48
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001b26:	4804      	ldr	r0, [pc, #16]	; (8001b38 <netSetDriver+0x38>)
 8001b28:	f7fe fe2c 	bl	8000784 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20001a98 	.word	0x20001a98

08001b3c <netSetUartDriver>:
 * @param[in] driver Underlying UART driver
 * @return Error code
 **/

error_t netSetUartDriver(NetInterface *interface, const UartDriver *driver)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <netSetUartDriver+0x16>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <netSetUartDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001b52:	2302      	movs	r3, #2
 8001b54:	e009      	b.n	8001b6a <netSetUartDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <netSetUartDriver+0x38>)
 8001b58:	f7fe fe05 	bl	8000766 <osAcquireMutex>
   //Set UART driver
   interface->uartDriver = driver;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	659a      	str	r2, [r3, #88]	; 0x58
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001b62:	4804      	ldr	r0, [pc, #16]	; (8001b74 <netSetUartDriver+0x38>)
 8001b64:	f7fe fe0e 	bl	8000784 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20001a98 	.word	0x20001a98

08001b78 <netConfigInterface>:
 * @param[in] interface Network interface to configure
 * @return Error code
 **/

error_t netConfigInterface(NetInterface *interface)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
   error_t error;

   //Make sure the network interface is valid
   if(interface == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <netConfigInterface+0x12>
      return ERROR_INVALID_PARAMETER;
 8001b86:	2302      	movs	r3, #2
 8001b88:	e04b      	b.n	8001c22 <netConfigInterface+0xaa>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001b8a:	4828      	ldr	r0, [pc, #160]	; (8001c2c <netConfigInterface+0xb4>)
 8001b8c:	f7fe fdeb 	bl	8000766 <osAcquireMutex>

   //Disable hardware interrupts
   if(interface->nicDriver != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <netConfigInterface+0x2a>
      interface->nicDriver->disableIrq(interface);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3

   //Start of exception handling block
   do
   {
      //Receive notifications when the transmitter is ready to send
      if(!osCreateEvent(&interface->nicTxEvent))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3370      	adds	r3, #112	; 0x70
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fd55 	bl	8000656 <osCreateEvent>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <netConfigInterface+0x40>
      {
         //Failed to create event object
         error = ERROR_OUT_OF_RESOURCES;
 8001bb2:	2365      	movs	r3, #101	; 0x65
 8001bb4:	81fb      	strh	r3, [r7, #14]
         //Stop immediately
         break;
 8001bb6:	e016      	b.n	8001be6 <netConfigInterface+0x6e>
      }

      //Valid NIC driver?
      if(interface->nicDriver != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <netConfigInterface+0x5c>
      {
         //Network controller initialization
         error = interface->nicDriver->init(interface);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	81fb      	strh	r3, [r7, #14]
         //Any error to report?
         if(error)
 8001bce:	89fb      	ldrh	r3, [r7, #14]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <netConfigInterface+0x6c>
         break;
#endif

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 initialization
      error = ipv4Init(interface);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f004 fbe1 	bl	800639c <ipv4Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	e000      	b.n	8001be6 <netConfigInterface+0x6e>
            break;
 8001be4:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Check status code
   if(!error)
 8001be6:	89fb      	ldrh	r3, [r7, #14]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d111      	bne.n	8001c10 <netConfigInterface+0x98>
   {
      //The network interface is now fully configured
      interface->configured = TRUE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      //Check whether the TCP/IP process is running
      if(netTaskRunning)
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <netConfigInterface+0xb8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <netConfigInterface+0xa2>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00a      	beq.n	8001c1a <netConfigInterface+0xa2>
            interface->nicDriver->enableIrq(interface);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	4798      	blx	r3
 8001c0e:	e004      	b.n	8001c1a <netConfigInterface+0xa2>
      }
   }
   else
   {
      //Clean up side effects before returning
      osDeleteEvent(&interface->nicTxEvent);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3370      	adds	r3, #112	; 0x70
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fd3e 	bl	8000696 <osDeleteEvent>
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001c1a:	4804      	ldr	r0, [pc, #16]	; (8001c2c <netConfigInterface+0xb4>)
 8001c1c:	f7fe fdb2 	bl	8000784 <osReleaseMutex>

   //Return status code
   return error;
 8001c20:	89fb      	ldrh	r3, [r7, #14]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20001a98 	.word	0x20001a98
 8001c30:	200000d8 	.word	0x200000d8

08001c34 <netProcessLinkChange>:
 * @brief Process link state change event
 * @param[in] interface Underlying network interface
 **/

void netProcessLinkChange(NetInterface *interface)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
   uint_t i;
   Socket *socket;

   //Check link state
   if(interface->linkState)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d07c      	beq.n	8001d3e <netProcessLinkChange+0x10a>
   {
      //Display link state
      TRACE_INFO("Link is up (%s)...\r\n", interface->name);
 8001c44:	f7fe fcf1 	bl	800062a <osSuspendAllTasks>
 8001c48:	4b5b      	ldr	r3, [pc, #364]	; (8001db8 <netProcessLinkChange+0x184>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68d8      	ldr	r0, [r3, #12]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3310      	adds	r3, #16
 8001c52:	461a      	mov	r2, r3
 8001c54:	4959      	ldr	r1, [pc, #356]	; (8001dbc <netProcessLinkChange+0x188>)
 8001c56:	f016 fa75 	bl	8018144 <fiprintf>
 8001c5a:	f7fe fcf1 	bl	8000640 <osResumeAllTasks>

      //Display link speed
      if(interface->linkSpeed == NIC_LINK_SPEED_1GBPS)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c64:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <netProcessLinkChange+0x18c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10c      	bne.n	8001c84 <netProcessLinkChange+0x50>
      {
         //1000BASE-T
         TRACE_INFO("  Link speed = 1000 Mbps\r\n");
 8001c6a:	f7fe fcde 	bl	800062a <osSuspendAllTasks>
 8001c6e:	4b52      	ldr	r3, [pc, #328]	; (8001db8 <netProcessLinkChange+0x184>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	221a      	movs	r2, #26
 8001c76:	2101      	movs	r1, #1
 8001c78:	4852      	ldr	r0, [pc, #328]	; (8001dc4 <netProcessLinkChange+0x190>)
 8001c7a:	f016 fac3 	bl	8018204 <fwrite>
 8001c7e:	f7fe fcdf 	bl	8000640 <osResumeAllTasks>
 8001c82:	e038      	b.n	8001cf6 <netProcessLinkChange+0xc2>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_100MBPS)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c8a:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <netProcessLinkChange+0x194>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d10c      	bne.n	8001caa <netProcessLinkChange+0x76>
      {
         //100BASE-TX
         TRACE_INFO("  Link speed = 100 Mbps\r\n");
 8001c90:	f7fe fccb 	bl	800062a <osSuspendAllTasks>
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <netProcessLinkChange+0x184>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2219      	movs	r2, #25
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	484b      	ldr	r0, [pc, #300]	; (8001dcc <netProcessLinkChange+0x198>)
 8001ca0:	f016 fab0 	bl	8018204 <fwrite>
 8001ca4:	f7fe fccc 	bl	8000640 <osResumeAllTasks>
 8001ca8:	e025      	b.n	8001cf6 <netProcessLinkChange+0xc2>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_10MBPS)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cb0:	4a47      	ldr	r2, [pc, #284]	; (8001dd0 <netProcessLinkChange+0x19c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10c      	bne.n	8001cd0 <netProcessLinkChange+0x9c>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = 10 Mbps\r\n");
 8001cb6:	f7fe fcb8 	bl	800062a <osSuspendAllTasks>
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <netProcessLinkChange+0x184>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2218      	movs	r2, #24
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4843      	ldr	r0, [pc, #268]	; (8001dd4 <netProcessLinkChange+0x1a0>)
 8001cc6:	f016 fa9d 	bl	8018204 <fwrite>
 8001cca:	f7fe fcb9 	bl	8000640 <osResumeAllTasks>
 8001cce:	e012      	b.n	8001cf6 <netProcessLinkChange+0xc2>
      }
      else if(interface->linkSpeed != NIC_LINK_SPEED_UNKNOWN)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00d      	beq.n	8001cf6 <netProcessLinkChange+0xc2>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = %" PRIu32 " bps\r\n",
 8001cda:	f7fe fca6 	bl	800062a <osSuspendAllTasks>
 8001cde:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <netProcessLinkChange+0x184>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68d8      	ldr	r0, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cea:	461a      	mov	r2, r3
 8001cec:	493a      	ldr	r1, [pc, #232]	; (8001dd8 <netProcessLinkChange+0x1a4>)
 8001cee:	f016 fa29 	bl	8018144 <fiprintf>
 8001cf2:	f7fe fca5 	bl	8000640 <osResumeAllTasks>
            interface->linkSpeed);
      }

      //Display duplex mode
      if(interface->duplexMode == NIC_FULL_DUPLEX_MODE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d10c      	bne.n	8001d1a <netProcessLinkChange+0xe6>
      {
         //1000BASE-T
         TRACE_INFO("  Duplex mode = Full-Duplex\r\n");
 8001d00:	f7fe fc93 	bl	800062a <osSuspendAllTasks>
 8001d04:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <netProcessLinkChange+0x184>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	221d      	movs	r2, #29
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4833      	ldr	r0, [pc, #204]	; (8001ddc <netProcessLinkChange+0x1a8>)
 8001d10:	f016 fa78 	bl	8018204 <fwrite>
 8001d14:	f7fe fc94 	bl	8000640 <osResumeAllTasks>
 8001d18:	e01e      	b.n	8001d58 <netProcessLinkChange+0x124>
      }
      else if(interface->duplexMode == NIC_HALF_DUPLEX_MODE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d119      	bne.n	8001d58 <netProcessLinkChange+0x124>
      {
         //100BASE-TX
         TRACE_INFO("  Duplex mode = Half-Duplex\r\n");
 8001d24:	f7fe fc81 	bl	800062a <osSuspendAllTasks>
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <netProcessLinkChange+0x184>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	221d      	movs	r2, #29
 8001d30:	2101      	movs	r1, #1
 8001d32:	482b      	ldr	r0, [pc, #172]	; (8001de0 <netProcessLinkChange+0x1ac>)
 8001d34:	f016 fa66 	bl	8018204 <fwrite>
 8001d38:	f7fe fc82 	bl	8000640 <osResumeAllTasks>
 8001d3c:	e00c      	b.n	8001d58 <netProcessLinkChange+0x124>
      }
   }
   else
   {
      //Display link state
      TRACE_INFO("Link is down (%s)...\r\n", interface->name);
 8001d3e:	f7fe fc74 	bl	800062a <osSuspendAllTasks>
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <netProcessLinkChange+0x184>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68d8      	ldr	r0, [r3, #12]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3310      	adds	r3, #16
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4925      	ldr	r1, [pc, #148]	; (8001de4 <netProcessLinkChange+0x1b0>)
 8001d50:	f016 f9f8 	bl	8018144 <fiprintf>
 8001d54:	f7fe fc74 	bl	8000640 <osResumeAllTasks>
   IF_MIB_SET_TIME_TICKS(ifTable[interface->index].ifLastChange,
      osGetSystemTime() / 10);

#if (IPV4_SUPPORT == ENABLED)
   //Notify IPv4 of link state changes
   ipv4LinkChangeEvent(interface);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f004 fb59 	bl	8006410 <ipv4LinkChangeEvent>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Flush DNS cache
   dnsFlushCache(interface);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f003 fed4 	bl	8005b0c <dnsFlushCache>
#if (DNS_SD_SUPPORT == ENABLED)
   //Perform probing and announcing
   dnsSdLinkChangeEvent(interface->dnsSdContext);
#endif
   //Notify registered users of link state changes
   netInvokeLinkChangeCallback(interface, interface->linkState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f9a8 	bl	80020c0 <netInvokeLinkChangeCallback>

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e018      	b.n	8001da8 <netProcessLinkChange+0x174>
   {
      //Point to the current socket
      socket = socketTable + i;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f44f 720d 	mov.w	r2, #564	; 0x234
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <netProcessLinkChange+0x1b4>)
 8001d82:	4413      	add	r3, r2
 8001d84:	60bb      	str	r3, [r7, #8]

#if (TCP_SUPPORT == ENABLED)
      //Connection-oriented socket?
      if(socket->type == SOCKET_TYPE_STREAM)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <netProcessLinkChange+0x160>
      {
         tcpUpdateEvents(socket);
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f002 ffde 	bl	8004d50 <tcpUpdateEvents>
      }
#endif

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d102      	bne.n	8001da2 <netProcessLinkChange+0x16e>
      {
         udpUpdateEvents(socket);
 8001d9c:	68b8      	ldr	r0, [r7, #8]
 8001d9e:	f003 fdc6 	bl	800592e <udpUpdateEvents>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b09      	cmp	r3, #9
 8001dac:	d9e3      	bls.n	8001d76 <netProcessLinkChange+0x142>
      {
         rawSocketUpdateEvents(socket);
      }
#endif
   }
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000058 	.word	0x20000058
 8001dbc:	08019414 	.word	0x08019414
 8001dc0:	3b9aca00 	.word	0x3b9aca00
 8001dc4:	0801942c 	.word	0x0801942c
 8001dc8:	05f5e100 	.word	0x05f5e100
 8001dcc:	08019448 	.word	0x08019448
 8001dd0:	00989680 	.word	0x00989680
 8001dd4:	08019464 	.word	0x08019464
 8001dd8:	08019480 	.word	0x08019480
 8001ddc:	0801949c 	.word	0x0801949c
 8001de0:	080194bc 	.word	0x080194bc
 8001de4:	080194dc 	.word	0x080194dc
 8001de8:	20001e6c 	.word	0x20001e6c

08001dec <netTask>:
/**
 * @brief TCP/IP events handling
 **/

void netTask(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
#if (NET_RTOS_SUPPORT == ENABLED)
   //Task prologue
   osEnterTask();

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001df2:	4851      	ldr	r0, [pc, #324]	; (8001f38 <netTask+0x14c>)
 8001df4:	f7fe fcb7 	bl	8000766 <osAcquireMutex>

   //The TCP/IP process is now running
   netTaskRunning = TRUE;
 8001df8:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <netTask+0x150>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e018      	b.n	8001e36 <netTask+0x4a>
   {
      //Point to the current network interface
      interface = &netInterface[i];
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <netTask+0x154>)
 8001e10:	4413      	add	r3, r2
 8001e12:	607b      	str	r3, [r7, #4]

      //Check whether the interface is fully configured
      if(interface->configured)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <netTask+0x44>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <netTask+0x44>
         {
            interface->nicDriver->enableIrq(interface);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0e3      	beq.n	8001e04 <netTask+0x18>
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001e3c:	483e      	ldr	r0, [pc, #248]	; (8001f38 <netTask+0x14c>)
 8001e3e:	f7fe fca1 	bl	8000784 <osReleaseMutex>
   //Main loop
   while(1)
   {
#endif
      //Get current time
      time = osGetSystemTime();
 8001e42:	f7fe fcac 	bl	800079e <osGetSystemTime>
 8001e46:	60f8      	str	r0, [r7, #12]

      //Compute the maximum blocking time when waiting for an event
      if(timeCompare(time, netTimestamp) < 0)
 8001e48:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <netTask+0x158>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	da05      	bge.n	8001e60 <netTask+0x74>
         timeout = netTimestamp - time;
 8001e54:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <netTask+0x158>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	e001      	b.n	8001e64 <netTask+0x78>
      else
         timeout = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]

      //Receive notifications when a frame has been received, or the
      //link state of any network interfaces has changed
      status = osWaitForEvent(&netEvent, timeout);
 8001e64:	6939      	ldr	r1, [r7, #16]
 8001e66:	4838      	ldr	r0, [pc, #224]	; (8001f48 <netTask+0x15c>)
 8001e68:	f7fe fc33 	bl	80006d2 <osWaitForEvent>
 8001e6c:	60b8      	str	r0, [r7, #8]

      //Check whether the specified event is in signaled state
      if(status)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d04a      	beq.n	8001f0a <netTask+0x11e>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8001e74:	4830      	ldr	r0, [pc, #192]	; (8001f38 <netTask+0x14c>)
 8001e76:	f7fe fc76 	bl	8000766 <osAcquireMutex>

         //Process events
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e03e      	b.n	8001efe <netTask+0x112>
         {
            //Point to the current network interface
            interface = &netInterface[i];
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <netTask+0x154>)
 8001e8c:	4413      	add	r3, r2
 8001e8e:	607b      	str	r3, [r7, #4]

            //Check whether a NIC event is pending
            if(interface->nicEvent)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <netTask+0xd8>
            {
               //Acknowledge the event by clearing the flag
               interface->nicEvent = FALSE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	675a      	str	r2, [r3, #116]	; 0x74

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <netTask+0xd8>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
                  //Handle NIC events
                  interface->nicDriver->eventHandler(interface);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
               }
            }

            //Check whether a PHY event is pending
            if(interface->phyEvent)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d015      	beq.n	8001ef8 <netTask+0x10c>
            {
               //Acknowledge the event by clearing the flag
               interface->phyEvent = FALSE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	679a      	str	r2, [r3, #120]	; 0x78

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00e      	beq.n	8001ef8 <netTask+0x10c>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
                  //Handle PHY events
                  interface->phyDriver->eventHandler(interface);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0bd      	beq.n	8001e80 <netTask+0x94>
               }
            }
         }

         //Release exclusive access
         osReleaseMutex(&netMutex);
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <netTask+0x14c>)
 8001f06:	f7fe fc3d 	bl	8000784 <osReleaseMutex>
      }

      //Get current time
      time = osGetSystemTime();
 8001f0a:	f7fe fc48 	bl	800079e <osGetSystemTime>
 8001f0e:	60f8      	str	r0, [r7, #12]

      //Check current time
      if(timeCompare(time, netTimestamp) >= 0)
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <netTask+0x158>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db92      	blt.n	8001e42 <netTask+0x56>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8001f1c:	4806      	ldr	r0, [pc, #24]	; (8001f38 <netTask+0x14c>)
 8001f1e:	f7fe fc22 	bl	8000766 <osAcquireMutex>
         //Handle periodic operations
         netTick();
 8001f22:	f000 f813 	bl	8001f4c <netTick>
         //Release exclusive access
         osReleaseMutex(&netMutex);
 8001f26:	4804      	ldr	r0, [pc, #16]	; (8001f38 <netTask+0x14c>)
 8001f28:	f7fe fc2c 	bl	8000784 <osReleaseMutex>

         //Next event
         netTimestamp = time + NET_TICK_INTERVAL;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3364      	adds	r3, #100	; 0x64
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <netTask+0x158>)
 8001f32:	6013      	str	r3, [r2, #0]
      time = osGetSystemTime();
 8001f34:	e785      	b.n	8001e42 <netTask+0x56>
 8001f36:	bf00      	nop
 8001f38:	20001a98 	.word	0x20001a98
 8001f3c:	200000d8 	.word	0x200000d8
 8001f40:	20001a9c 	.word	0x20001a9c
 8001f44:	200000dc 	.word	0x200000dc
 8001f48:	20001a90 	.word	0x20001a90

08001f4c <netTick>:
/**
 * @brief Manage TCP/IP timers
 **/

void netTick(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
   uint_t i;

   //Increment tick counter
   nicTickCounter += NET_TICK_INTERVAL;
 8001f52:	4b50      	ldr	r3, [pc, #320]	; (8002094 <netTick+0x148>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3364      	adds	r3, #100	; 0x64
 8001f58:	4a4e      	ldr	r2, [pc, #312]	; (8002094 <netTick+0x148>)
 8001f5a:	6013      	str	r3, [r2, #0]

   //Handle periodic operations such as polling the link state
   if(nicTickCounter >= NIC_TICK_INTERVAL)
 8001f5c:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <netTick+0x148>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f64:	d320      	bcc.n	8001fa8 <netTick+0x5c>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	e017      	b.n	8001f9c <netTick+0x50>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8001f6c:	4a4a      	ldr	r2, [pc, #296]	; (8002098 <netTick+0x14c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3388      	adds	r3, #136	; 0x88
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <netTick+0x4a>
            nicTick(&netInterface[i]);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	4a42      	ldr	r2, [pc, #264]	; (8002098 <netTick+0x14c>)
 8001f8e:	4413      	add	r3, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fc58 	bl	8002846 <nicTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0e4      	beq.n	8001f6c <netTick+0x20>
      }

      //Reset tick counter
      nicTickCounter = 0;
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <netTick+0x148>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
   }

#if (PPP_SUPPORT == ENABLED)
   //Increment tick counter
   pppTickCounter += NET_TICK_INTERVAL;
 8001fa8:	4b3c      	ldr	r3, [pc, #240]	; (800209c <netTick+0x150>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3364      	adds	r3, #100	; 0x64
 8001fae:	4a3b      	ldr	r2, [pc, #236]	; (800209c <netTick+0x150>)
 8001fb0:	6013      	str	r3, [r2, #0]

   //Manage PPP related timers
   if(pppTickCounter >= PPP_TICK_INTERVAL)
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <netTick+0x150>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fba:	d320      	bcc.n	8001ffe <netTick+0xb2>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	e017      	b.n	8001ff2 <netTick+0xa6>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8001fc2:	4a35      	ldr	r2, [pc, #212]	; (8002098 <netTick+0x14c>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3388      	adds	r3, #136	; 0x88
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d009      	beq.n	8001fec <netTick+0xa0>
            pppTick(&netInterface[i]);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <netTick+0x14c>)
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f008 fc4e 	bl	800a888 <pppTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0e4      	beq.n	8001fc2 <netTick+0x76>
      }

      //Reset tick counter
      pppTickCounter = 0;
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <netTick+0x150>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   //Increment tick counter
   ipv4FragTickCounter += NET_TICK_INTERVAL;
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <netTick+0x154>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3364      	adds	r3, #100	; 0x64
 8002004:	4a26      	ldr	r2, [pc, #152]	; (80020a0 <netTick+0x154>)
 8002006:	6013      	str	r3, [r2, #0]

   //Handle IPv4 fragment reassembly timeout
   if(ipv4FragTickCounter >= IPV4_FRAG_TICK_INTERVAL)
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <netTick+0x154>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002010:	d320      	bcc.n	8002054 <netTick+0x108>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	e017      	b.n	8002048 <netTick+0xfc>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8002018:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <netTick+0x14c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3388      	adds	r3, #136	; 0x88
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <netTick+0xf6>
            ipv4FragTick(&netInterface[i]);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	4a17      	ldr	r2, [pc, #92]	; (8002098 <netTick+0x14c>)
 800203a:	4413      	add	r3, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f004 fe86 	bl	8006d4e <ipv4FragTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3301      	adds	r3, #1
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0e4      	beq.n	8002018 <netTick+0xcc>
      }

      //Reset tick counter
      ipv4FragTickCounter = 0;
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <netTick+0x154>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
   }
#endif

#if (TCP_SUPPORT == ENABLED)
   //Increment tick counter
   tcpTickCounter += NET_TICK_INTERVAL;
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <netTick+0x158>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3364      	adds	r3, #100	; 0x64
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <netTick+0x158>)
 800205c:	6013      	str	r3, [r2, #0]

   //Manage TCP related timers
   if(tcpTickCounter >= TCP_TICK_INTERVAL)
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <netTick+0x158>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b63      	cmp	r3, #99	; 0x63
 8002064:	d904      	bls.n	8002070 <netTick+0x124>
   {
      //TCP timer handler
      tcpTick();
 8002066:	f003 f851 	bl	800510c <tcpTick>
      //Reset tick counter
      tcpTickCounter = 0;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <netTick+0x158>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dnsTickCounter += NET_TICK_INTERVAL;
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <netTick+0x15c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3364      	adds	r3, #100	; 0x64
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <netTick+0x15c>)
 8002078:	6013      	str	r3, [r2, #0]

   //Manage DNS cache
   if(dnsTickCounter >= DNS_TICK_INTERVAL)
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <netTick+0x15c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2bc7      	cmp	r3, #199	; 0xc7
 8002080:	d904      	bls.n	800208c <netTick+0x140>
   {
      //DNS timer handler
      dnsTick();
 8002082:	f003 fd87 	bl	8005b94 <dnsTick>
      //Reset tick counter
      dnsTickCounter = 0;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <netTick+0x15c>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

      //Reset tick counter
      dnsSdTickCounter = 0;
   }
#endif
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20001e68 	.word	0x20001e68
 8002098:	20001a9c 	.word	0x20001a9c
 800209c:	20003864 	.word	0x20003864
 80020a0:	20003860 	.word	0x20003860
 80020a4:	20003474 	.word	0x20003474
 80020a8:	2000385c 	.word	0x2000385c

080020ac <netGetDefaultInterface>:
 * @brief Get default network interface
 * @return Pointer to the default network interface to be used
 **/

NetInterface *netGetDefaultInterface(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
   //Default network interface
   return &netInterface[0];
 80020b0:	4b02      	ldr	r3, [pc, #8]	; (80020bc <netGetDefaultInterface+0x10>)
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	20001a9c 	.word	0x20001a9c

080020c0 <netInvokeLinkChangeCallback>:
 * @param[in] interface Underlying network interface
 * @param[in] linkState Link state
 **/

void netInvokeLinkChangeCallback(NetInterface *interface, bool_t linkState)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
   uint_t i;
   LinkChangeCallbackDesc *entry;

   //Acquire exclusive access to the callback table
   osAcquireMutex(&callbackTableMutex);
 80020ca:	4817      	ldr	r0, [pc, #92]	; (8002128 <netInvokeLinkChangeCallback+0x68>)
 80020cc:	f7fe fb4b 	bl	8000766 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < NET_CALLBACK_TABLE_SIZE; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e01e      	b.n	8002114 <netInvokeLinkChangeCallback+0x54>
   {
      //Point to the current entry
      entry = &callbackTable[i];
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <netInvokeLinkChangeCallback+0x6c>)
 80020e2:	4413      	add	r3, r2
 80020e4:	60bb      	str	r3, [r7, #8]

      //Any registered callback?
      if(entry->callback != NULL)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00f      	beq.n	800210e <netInvokeLinkChangeCallback+0x4e>
      {
         //Check whether the network interface matches the current entry
         if(entry->interface == NULL || entry->interface == interface)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <netInvokeLinkChangeCallback+0x40>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d106      	bne.n	800210e <netInvokeLinkChangeCallback+0x4e>
         {
            //Invoke user callback function
            entry->callback(interface, linkState, entry->param);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	6892      	ldr	r2, [r2, #8]
 8002108:	6839      	ldr	r1, [r7, #0]
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
   for(i = 0; i < NET_CALLBACK_TABLE_SIZE; i++)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3301      	adds	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d9dd      	bls.n	80020d6 <netInvokeLinkChangeCallback+0x16>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&callbackTableMutex);
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <netInvokeLinkChangeCallback+0x68>)
 800211c:	f7fe fb32 	bl	8000784 <osReleaseMutex>
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200000e0 	.word	0x200000e0
 800212c:	200000e4 	.word	0x200000e4

08002130 <memPoolInit>:
 * @brief Memory pool initialization
 * @return Error code
 **/

error_t memPoolInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
   memPoolCurrentUsage = 0;
   memPoolMaxUsage = 0;
#endif

   //Successful initialization
   return NO_ERROR;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <memPoolAlloc>:
 * @param[in] size Bytes to allocate
 * @return Pointer to the allocated space or NULL if there is insufficient memory available
 **/

void *memPoolAlloc(size_t size)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   uint_t i;
#endif

   //Pointer to the allocated memory block
   void *p = NULL;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Allocate a memory block
   p = osAllocMem(size);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7fe fb31 	bl	80007b4 <osAllocMem>
 8002152:	60f8      	str	r0, [r7, #12]
#endif

   //Failed to allocate memory?
   if(!p)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10b      	bne.n	8002172 <memPoolAlloc+0x32>
   {
      //Debug message
      TRACE_WARNING("Memory allocation failed!\r\n");
 800215a:	f7fe fa66 	bl	800062a <osSuspendAllTasks>
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <memPoolAlloc+0x3c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	221b      	movs	r2, #27
 8002166:	2101      	movs	r1, #1
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <memPoolAlloc+0x40>)
 800216a:	f016 f84b 	bl	8018204 <fwrite>
 800216e:	f7fe fa67 	bl	8000640 <osResumeAllTasks>
   }

   //Return a pointer to the allocated memory block
   return p;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000058 	.word	0x20000058
 8002180:	080194f4 	.word	0x080194f4

08002184 <memPoolFree>:
 * @brief Release a memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void memPoolFree(void *p)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Release memory block
   osFreeMem(p);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7fe fb23 	bl	80007d8 <osFreeMem>
#endif
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <netBufferAlloc>:
 * @return Pointer to the allocated buffer or NULL if there is
 *   insufficient memory available
 **/

NetBuffer *netBufferAlloc(size_t length)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   error_t error;
   NetBuffer *buffer;

   //Allocate memory to hold the multi-part buffer
   buffer = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 80021a2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80021a6:	f7ff ffcb 	bl	8002140 <memPoolAlloc>
 80021aa:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(buffer == NULL)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <netBufferAlloc+0x1c>
      return NULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e020      	b.n	80021f8 <netBufferAlloc+0x5e>

   //The multi-part buffer consists of a single chunk
   buffer->chunkCount = 1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
   buffer->maxChunkCount = MAX_CHUNK_COUNT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2209      	movs	r2, #9
 80021c0:	605a      	str	r2, [r3, #4]
   buffer->chunk[0].address = (uint8_t *) buffer + CHUNKED_BUFFER_HEADER_SIZE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	609a      	str	r2, [r3, #8]
   buffer->chunk[0].length = NET_MEM_POOL_BUFFER_SIZE - CHUNKED_BUFFER_HEADER_SIZE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 80021d2:	819a      	strh	r2, [r3, #12]
   buffer->chunk[0].size = 0;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	81da      	strh	r2, [r3, #14]

   //Adjust the length of the buffer
   error = netBufferSetLength(buffer, length);
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f840 	bl	8002262 <netBufferSetLength>
 80021e2:	4603      	mov	r3, r0
 80021e4:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 80021e6:	897b      	ldrh	r3, [r7, #10]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d004      	beq.n	80021f6 <netBufferAlloc+0x5c>
   {
      //Clean up side effects
      netBufferFree(buffer);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f807 	bl	8002200 <netBufferFree>
      //Report an failure
      return NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <netBufferAlloc+0x5e>
   }

   //Successful memory allocation
   return buffer;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <netBufferFree>:
 * @brief Dispose a multi-part buffer
 * @param[in] buffer Pointer to the multi-part buffer to be released
 **/

void netBufferFree(NetBuffer *buffer)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
   //Properly dispose data chunks
   netBufferSetLength(buffer, 0);
 8002208:	2100      	movs	r1, #0
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f829 	bl	8002262 <netBufferSetLength>
   //Release multi-part buffer
   memPoolFree(buffer);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ffb7 	bl	8002184 <memPoolFree>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <netBufferGetLength>:
 * @param[in] buffer Pointer to a multi-part buffer
 * @return Actual length in bytes
 **/

size_t netBufferGetLength(const NetBuffer *buffer)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Total length
   size_t length = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e00c      	b.n	800224a <netBufferGetLength+0x2c>
      length += buffer->chunk[i].length;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3301      	adds	r3, #1
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	889b      	ldrh	r3, [r3, #4]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	4413      	add	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount; i++)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d3ed      	bcc.n	8002230 <netBufferGetLength+0x12>

   //Return total length
   return length;
 8002254:	68bb      	ldr	r3, [r7, #8]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <netBufferSetLength>:
 * @param[in] length Desired length
 * @return Error code
 **/

error_t netBufferSetLength(NetBuffer *buffer, size_t length)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t chunkCount;
   ChunkDesc *chunk;

   //Get the actual number of chunks
   chunkCount = buffer->chunkCount;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	613b      	str	r3, [r7, #16]

   //Loop through data chunks
   for(i = 0; i < chunkCount && length > 0; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e02c      	b.n	80022d2 <netBufferSetLength+0x70>
   {
      //Point to the chunk descriptor;
      chunk = &buffer->chunk[i];
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

      //Adjust the length of the current chunk when possible
      if(length <= chunk->length)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	461a      	mov	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4293      	cmp	r3, r2
 800228e:	d804      	bhi.n	800229a <netBufferSetLength+0x38>
      {
         chunk->length = length;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	809a      	strh	r2, [r3, #4]
 8002298:	e012      	b.n	80022c0 <netBufferSetLength+0x5e>
      }
      else if(chunk->size > 0 && i == (chunkCount - 1))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	88db      	ldrh	r3, [r3, #6]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00e      	beq.n	80022c0 <netBufferSetLength+0x5e>
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d109      	bne.n	80022c0 <netBufferSetLength+0x5e>
      {
         chunk->length = MIN(length, chunk->size);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88db      	ldrh	r3, [r3, #6]
 80022b0:	461a      	mov	r2, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	bf28      	it	cs
 80022b8:	4613      	movcs	r3, r2
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	809a      	strh	r2, [r3, #4]
      }

      //Prepare to process next chunk
      length -= chunk->length;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	889b      	ldrh	r3, [r3, #4]
 80022c4:	461a      	mov	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	603b      	str	r3, [r7, #0]
   for(i = 0; i < chunkCount && length > 0; i++)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d202      	bcs.n	80022e0 <netBufferSetLength+0x7e>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1cb      	bne.n	8002278 <netBufferSetLength+0x16>
   }

   //The size of the buffer should be decreased?
   if(!length)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d151      	bne.n	800238a <netBufferSetLength+0x128>
   {
      //Adjust the number of chunks
      buffer->chunkCount = i;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	601a      	str	r2, [r3, #0]

      //Delete unnecessary data chunks
      while(i < chunkCount)
 80022ec:	e01a      	b.n	8002324 <netBufferSetLength+0xc2>
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

         //Release previously allocated memory
         if(chunk->size > 0)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	88db      	ldrh	r3, [r3, #6]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <netBufferSetLength+0xaa>
            memPoolFree(chunk->address);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff3c 	bl	8002184 <memPoolFree>

         //Mark the current chunk as free
         chunk->address = NULL;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
         chunk->length = 0;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	809a      	strh	r2, [r3, #4]
         chunk->size = 0;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	80da      	strh	r2, [r3, #6]

         //Next chunk
         i++;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
      while(i < chunkCount)
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d3e0      	bcc.n	80022ee <netBufferSetLength+0x8c>
 800232c:	e035      	b.n	800239a <netBufferSetLength+0x138>
   {
      //Add as many chunks as necessary
      while(i < buffer->maxChunkCount && length > 0)
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

         //Allocate memory to hold a new chunk
         chunk->address = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 800233a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800233e:	f7ff feff 	bl	8002140 <memPoolAlloc>
 8002342:	4602      	mov	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]
         //Failed to allocate memory?
         if(!chunk->address)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <netBufferSetLength+0xf2>
            return ERROR_OUT_OF_MEMORY;
 8002350:	2364      	movs	r3, #100	; 0x64
 8002352:	e028      	b.n	80023a6 <netBufferSetLength+0x144>

         //Allocated memory
         chunk->size = NET_MEM_POOL_BUFFER_SIZE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800235a:	80da      	strh	r2, [r3, #6]
         //Actual length of the data chunk
         chunk->length = MIN(length, NET_MEM_POOL_BUFFER_SIZE);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002362:	bf28      	it	cs
 8002364:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	809a      	strh	r2, [r3, #4]

         //Prepare to process next chunk
         length -= chunk->length;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	889b      	ldrh	r3, [r3, #4]
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	603b      	str	r3, [r7, #0]
         buffer->chunkCount++;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	601a      	str	r2, [r3, #0]
         i++;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
      while(i < buffer->maxChunkCount && length > 0)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	d202      	bcs.n	800239a <netBufferSetLength+0x138>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1c9      	bne.n	800232e <netBufferSetLength+0xcc>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_OUT_OF_RESOURCES : NO_ERROR;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <netBufferSetLength+0x142>
 80023a0:	2365      	movs	r3, #101	; 0x65
 80023a2:	e000      	b.n	80023a6 <netBufferSetLength+0x144>
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <netBufferAt>:
 * @param[in] offset Offset from the beginning of the buffer
 * @return Pointer the data at the specified position
 **/

void *netBufferAt(const NetBuffer *buffer, size_t offset)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e01e      	b.n	80023fc <netBufferAt+0x4e>
   {
      //The data at the specified offset resides in the current chunk?
      if(offset < buffer->chunk[i].length)
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	889b      	ldrh	r3, [r3, #4]
 80023ca:	461a      	mov	r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d207      	bcs.n	80023e2 <netBufferAt+0x34>
         return (uint8_t *) buffer->chunk[i].address + offset;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	3201      	adds	r2, #1
 80023d8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	e012      	b.n	8002408 <netBufferAt+0x5a>

      //Jump to the next chunk
      offset -= buffer->chunk[i].length;
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3301      	adds	r3, #1
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	889b      	ldrh	r3, [r3, #4]
 80023ee:	461a      	mov	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	603b      	str	r3, [r7, #0]
   for(i = 0; i < buffer->chunkCount; i++)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	429a      	cmp	r2, r3
 8002404:	d3db      	bcc.n	80023be <netBufferAt+0x10>
   }

   //Invalid offset...
   return NULL;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <netBufferConcat>:
 * @return Error code
 **/

error_t netBufferConcat(NetBuffer *dest,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
   uint_t i;
   uint_t j;

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	e016      	b.n	8002456 <netBufferConcat+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	3301      	adds	r3, #1
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	889b      	ldrh	r3, [r3, #4]
 8002434:	461a      	mov	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4293      	cmp	r3, r2
 800243a:	d312      	bcc.n	8002462 <netBufferConcat+0x4e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	3301      	adds	r3, #1
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	889b      	ldrh	r3, [r3, #4]
 8002448:	461a      	mov	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	607b      	str	r3, [r7, #4]
   for(j = 0; j < src->chunkCount; j++)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	3301      	adds	r3, #1
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3e3      	bcc.n	8002428 <netBufferConcat+0x14>
 8002460:	e000      	b.n	8002464 <netBufferConcat+0x50>
         break;
 8002462:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	429a      	cmp	r2, r3
 800246c:	d301      	bcc.n	8002472 <netBufferConcat+0x5e>
      return ERROR_INVALID_PARAMETER;
 800246e:	2302      	movs	r3, #2
 8002470:	e065      	b.n	800253e <netBufferConcat+0x12a>

   //Position to the end of the destination data
   i = dest->chunkCount;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	617b      	str	r3, [r7, #20]

   //Copy data blocks
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 8002478:	e04d      	b.n	8002516 <netBufferConcat+0x102>
   {
      //Copy current block
      dest->chunk[i].address = (uint8_t *) src->chunk[j].address + srcOffset;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	3201      	adds	r2, #1
 8002480:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	18d1      	adds	r1, r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	3201      	adds	r2, #1
 800248e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      dest->chunk[i].length = src->chunk[j].length - srcOffset;
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	3301      	adds	r3, #1
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	889a      	ldrh	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	b299      	uxth	r1, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3301      	adds	r3, #1
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	460a      	mov	r2, r1
 80024b2:	809a      	strh	r2, [r3, #4]
      dest->chunk[i].size = 0;
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	2200      	movs	r2, #0
 80024c0:	80da      	strh	r2, [r3, #6]

      //Limit the number of bytes to copy
      if(length < dest->chunk[i].length)
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	889b      	ldrh	r3, [r3, #4]
 80024ce:	461a      	mov	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d208      	bcs.n	80024e8 <netBufferConcat+0xd4>
         dest->chunk[i].length = length;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b299      	uxth	r1, r3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	460a      	mov	r2, r1
 80024e6:	809a      	strh	r2, [r3, #4]

      //Decrement the number of remaining bytes
      length -= dest->chunk[i].length;
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	461a      	mov	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	603b      	str	r3, [r7, #0]
      //Increment the number of chunks
      dest->chunkCount++;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	601a      	str	r2, [r3, #0]

      //Adjust variables
      srcOffset = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
      i++;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
      j++;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	3301      	adds	r3, #1
 8002514:	613b      	str	r3, [r7, #16]
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <netBufferConcat+0x11c>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	429a      	cmp	r2, r3
 8002524:	d204      	bcs.n	8002530 <netBufferConcat+0x11c>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d3a4      	bcc.n	800247a <netBufferConcat+0x66>
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	bf14      	ite	ne
 8002536:	2301      	movne	r3, #1
 8002538:	2300      	moveq	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	b29b      	uxth	r3, r3
}
 800253e:	4618      	mov	r0, r3
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <netBufferCopy>:
 * @return Error code
 **/

error_t netBufferCopy(NetBuffer *dest, size_t destOffset,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b08a      	sub	sp, #40	; 0x28
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint8_t *p;
   uint8_t *q;

   //Skip the beginning of the source data
   for(i = 0; i < dest->chunkCount; i++)
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
 800255c:	e016      	b.n	800258c <netBufferCopy+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(destOffset < dest->chunk[i].length)
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	3301      	adds	r3, #1
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	889b      	ldrh	r3, [r3, #4]
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4293      	cmp	r3, r2
 8002570:	d312      	bcc.n	8002598 <netBufferCopy+0x4e>
         break;

      //Jump to the next chunk
      destOffset -= dest->chunk[i].length;
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	3301      	adds	r3, #1
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	889b      	ldrh	r3, [r3, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount; i++)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	3301      	adds	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	429a      	cmp	r2, r3
 8002594:	d3e3      	bcc.n	800255e <netBufferCopy+0x14>
 8002596:	e000      	b.n	800259a <netBufferCopy+0x50>
         break;
 8002598:	bf00      	nop
   }

   //Invalid offset?
   if(i >= dest->chunkCount)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d301      	bcc.n	80025a8 <netBufferCopy+0x5e>
      return ERROR_INVALID_PARAMETER;
 80025a4:	2302      	movs	r3, #2
 80025a6:	e096      	b.n	80026d6 <netBufferCopy+0x18c>

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	e016      	b.n	80025dc <netBufferCopy+0x92>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	3301      	adds	r3, #1
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	889b      	ldrh	r3, [r3, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d312      	bcc.n	80025e8 <netBufferCopy+0x9e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	3301      	adds	r3, #1
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	889b      	ldrh	r3, [r3, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	603b      	str	r3, [r7, #0]
   for(j = 0; j < src->chunkCount; j++)
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	3301      	adds	r3, #1
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a3a      	ldr	r2, [r7, #32]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3e3      	bcc.n	80025ae <netBufferCopy+0x64>
 80025e6:	e000      	b.n	80025ea <netBufferCopy+0xa0>
         break;
 80025e8:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6a3a      	ldr	r2, [r7, #32]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d35c      	bcc.n	80026ae <netBufferCopy+0x164>
      return ERROR_INVALID_PARAMETER;
 80025f4:	2302      	movs	r3, #2
 80025f6:	e06e      	b.n	80026d6 <netBufferCopy+0x18c>

   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
   {
      //Point to the first data byte
      p = (uint8_t *) dest->chunk[i].address + destOffset;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fc:	3201      	adds	r2, #1
 80025fe:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4413      	add	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]
      q = (uint8_t *) src->chunk[j].address + srcOffset;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a3a      	ldr	r2, [r7, #32]
 800260c:	3201      	adds	r2, #1
 800260e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]

      //Compute the number of bytes to copy
      n = MIN(length, dest->chunk[i].length - destOffset);
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	3301      	adds	r3, #1
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	889b      	ldrh	r3, [r3, #4]
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800262c:	4293      	cmp	r3, r2
 800262e:	bf28      	it	cs
 8002630:	4613      	movcs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
      n = MIN(n, src->chunk[j].length - srcOffset);
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	3301      	adds	r3, #1
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	889b      	ldrh	r3, [r3, #4]
 8002640:	461a      	mov	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4293      	cmp	r3, r2
 800264a:	bf28      	it	cs
 800264c:	4613      	movcs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]

      //Copy data
      memcpy(p, q, n);
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	69b9      	ldr	r1, [r7, #24]
 8002654:	69f8      	ldr	r0, [r7, #28]
 8002656:	f015 fe17 	bl	8018288 <memcpy>

      destOffset += n;
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4413      	add	r3, r2
 8002660:	60bb      	str	r3, [r7, #8]
      srcOffset += n;
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	4413      	add	r3, r2
 8002668:	603b      	str	r3, [r7, #0]
      length -= n;
 800266a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	633b      	str	r3, [r7, #48]	; 0x30

      if(destOffset >= dest->chunk[i].length)
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	3301      	adds	r3, #1
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	889b      	ldrh	r3, [r3, #4]
 800267e:	461a      	mov	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4293      	cmp	r3, r2
 8002684:	d304      	bcc.n	8002690 <netBufferCopy+0x146>
      {
         destOffset = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
         i++;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if(srcOffset >= src->chunk[j].length)
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	3301      	adds	r3, #1
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	889b      	ldrh	r3, [r3, #4]
 800269c:	461a      	mov	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d304      	bcc.n	80026ae <netBufferCopy+0x164>
      {
         srcOffset = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	603b      	str	r3, [r7, #0]
         j++;
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	3301      	adds	r3, #1
 80026ac:	623b      	str	r3, [r7, #32]
   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <netBufferCopy+0x17e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d204      	bcs.n	80026c8 <netBufferCopy+0x17e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a3a      	ldr	r2, [r7, #32]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d397      	bcc.n	80025f8 <netBufferCopy+0xae>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	b29b      	uxth	r3, r3
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3728      	adds	r7, #40	; 0x28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <netBufferAppend>:
 * @param[in] length Number of bytes in the user buffer
 * @return Error code
 **/

error_t netBufferAppend(NetBuffer *dest, const void *src, size_t length)
{
 80026de:	b480      	push	{r7}
 80026e0:	b087      	sub	sp, #28
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
   uint_t i;

   //Make sure there is enough space to add an extra chunk
   if(dest->chunkCount >= dest->maxChunkCount)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d301      	bcc.n	80026fa <netBufferAppend+0x1c>
      return ERROR_FAILURE;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e01e      	b.n	8002738 <netBufferAppend+0x5a>

   //Position to the end of the buffer
   i = dest->chunkCount;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	617b      	str	r3, [r7, #20]

   //Insert a new chunk at the end of the list
   dest->chunk[i].address = (void *) src;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	3201      	adds	r2, #1
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
   dest->chunk[i].length = length;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	b299      	uxth	r1, r3
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	460a      	mov	r2, r1
 800271c:	809a      	strh	r2, [r3, #4]
   dest->chunk[i].size = 0;
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	2200      	movs	r2, #0
 800272a:	80da      	strh	r2, [r3, #6]

   //Increment the number of chunks
   dest->chunkCount++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <netBufferWrite>:
 * @return Actual number of bytes copied
 **/

size_t netBufferWrite(NetBuffer *dest,
   size_t destOffset, const void *src, size_t length)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes written
   totalLength = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]

   //Loop through data chunks
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e03e      	b.n	80027da <netBufferWrite+0x96>
   {
      //Is there any data to copy in the current chunk?
      if(destOffset < dest->chunk[i].length)
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	889b      	ldrh	r3, [r3, #4]
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4293      	cmp	r3, r2
 800276e:	d227      	bcs.n	80027c0 <netBufferWrite+0x7c>
      {
         //Point to the first byte to be written
         p = (uint8_t *) dest->chunk[i].address + destOffset;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	3201      	adds	r2, #1
 8002776:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4413      	add	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, dest->chunk[i].length - destOffset);
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	889b      	ldrh	r3, [r3, #4]
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad2      	subs	r2, r2, r3
 8002792:	6839      	ldr	r1, [r7, #0]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	1acb      	subs	r3, r1, r3
 8002798:	4293      	cmp	r3, r2
 800279a:	bf28      	it	cs
 800279c:	4613      	movcs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

         //Copy data
         memcpy(p, src, n);
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	6978      	ldr	r0, [r7, #20]
 80027a6:	f015 fd6f 	bl	8018288 <memcpy>

         //Advance read pointer
         src = (uint8_t *) src + n;
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	607b      	str	r3, [r7, #4]
         //Total number of bytes written
         totalLength += n;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
         //Process the next block from the start
         destOffset = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	e009      	b.n	80027d4 <netBufferWrite+0x90>
      }
      else
      {
         //Skip the current chunk
         destOffset -= dest->chunk[i].length;
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	889b      	ldrh	r3, [r3, #4]
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	3301      	adds	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d203      	bcs.n	80027ec <netBufferWrite+0xa8>
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d3b7      	bcc.n	800275c <netBufferWrite+0x18>
      }
   }

   //Return the actual number of bytes written
   return totalLength;
 80027ec:	69bb      	ldr	r3, [r7, #24]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <nicGetPhysicalInterface>:
 * @param[in] interface Pointer to the network interface
 * @return Pointer to the physical interface
 **/

NetInterface *nicGetPhysicalInterface(NetInterface *interface)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
      interface = interface->parent;
   }
#endif

   //Return a pointer to the physical interface
   return interface;
 80027fe:	687b      	ldr	r3, [r7, #4]
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <nicGetSwitchPort>:
 * @param[in] interface Pointer to the network interface
 * @return Switch port identifier
 **/

uint8_t nicGetSwitchPort(NetInterface *interface)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

   //Return switch port identifier
   return interface->port;
#else
   //Ethernet port multiplication (VLAN or tail tagging) is not supported
   return 0;
 8002814:	2300      	movs	r3, #0
#endif
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <nicIsParentInterface>:
 * @param[in] parent Pointer to the parent interface
 * @return TRUE is an existing parent/child relationship is found, else FALSE
 **/

bool_t nicIsParentInterface(NetInterface *interface, NetInterface *parent)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]

   //Return TRUE is an existing parent/child relationship is found
   return flag;
#else
   //Virtual interfaces are not supported
   return (interface == parent) ? TRUE : FALSE;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
#endif
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <nicTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void nicTick(NetInterface *interface)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002852:	2b00      	cmp	r3, #0
 8002854:	d013      	beq.n	800287e <nicTick+0x38>
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3

      //Handle periodic operations
      interface->nicDriver->tick(interface);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3

      //Re-enable interrupts if necessary
      if(interface->configured)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <nicTick+0x38>
      {
         interface->nicDriver->enableIrq(interface);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
      }
   }
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <nicSendPacket>:
 * @return Error code
 **/

error_t nicSendPacket(NetInterface *interface, const NetBuffer *buffer,
   size_t offset)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
   TRACE_DEBUG("Sending packet (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG_NET_BUFFER("  ", buffer, offset, length);
#endif

   //Check whether the interface is enabled for operation
   if(interface->configured && interface->nicDriver != NULL)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	2b00      	cmp	r3, #0
 800289a:	d033      	beq.n	8002904 <nicSendPacket+0x7e>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02f      	beq.n	8002904 <nicSendPacket+0x7e>
   {
      //Loopback interface?
      if(interface->nicDriver->type == NIC_TYPE_LOOPBACK)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d102      	bne.n	80028b4 <nicSendPacket+0x2e>
      {
         //The loopback interface is always available
         status = TRUE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	e007      	b.n	80028c4 <nicSendPacket+0x3e>
      }
      else
      {
         //Wait for the transmitter to be ready to send
         status = osWaitForEvent(&interface->nicTxEvent, NIC_MAX_BLOCKING_TIME);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3370      	adds	r3, #112	; 0x70
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd ff08 	bl	80006d2 <osWaitForEvent>
 80028c2:	6138      	str	r0, [r7, #16]
      }

      //Check whether the specified event is in signaled state
      if(status)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d018      	beq.n	80028fc <nicSendPacket+0x76>
      {
         //Disable interrupts
         interface->nicDriver->disableIrq(interface);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	4798      	blx	r3

         //Send Ethernet frame
         error = interface->nicDriver->sendPacket(interface, buffer, offset);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	4798      	blx	r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	82fb      	strh	r3, [r7, #22]

         //Re-enable interrupts if necessary
         if(interface->configured)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00c      	beq.n	800290a <nicSendPacket+0x84>
         {
            interface->nicDriver->enableIrq(interface);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	4798      	blx	r3
      if(status)
 80028fa:	e006      	b.n	800290a <nicSendPacket+0x84>
         }
      }
      else
      {
         //The transmitter is busy
         error = ERROR_TRANSMITTER_BUSY;
 80028fc:	f240 1311 	movw	r3, #273	; 0x111
 8002900:	82fb      	strh	r3, [r7, #22]
      if(status)
 8002902:	e002      	b.n	800290a <nicSendPacket+0x84>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8002904:	2307      	movs	r3, #7
 8002906:	82fb      	strh	r3, [r7, #22]
 8002908:	e000      	b.n	800290c <nicSendPacket+0x86>
      if(status)
 800290a:	bf00      	nop
   }

   //Return status code
   return error;
 800290c:	8afb      	ldrh	r3, [r7, #22]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <nicProcessPacket>:
 * @param[in] packet Incoming packet to process
 * @param[in] length Total packet length
 **/

void nicProcessPacket(NetInterface *interface, uint8_t *packet, size_t length)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
   NicType type;

   //Check whether the interface is enabled for operation
   if(interface->configured)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <nicProcessPacket+0x42>
   {
      //Re-enable interrupts
      interface->nicDriver->enableIrq(interface);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	4798      	blx	r3
      //Debug message
      TRACE_DEBUG("Packet received (%" PRIuSIZE " bytes)...\r\n", length);
      TRACE_DEBUG_ARRAY("  ", packet, length);

      //Retrieve network interface type
      type = interface->nicDriver->type;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	75fb      	strb	r3, [r7, #23]
      }
      else
#endif
#if (PPP_SUPPORT == ENABLED)
      //PPP interface?
      if(type == NIC_TYPE_PPP)
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d104      	bne.n	800294e <nicProcessPacket+0x38>
      {
         //Process incoming PPP frame
         pppProcessFrame(interface, packet, length);
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f007 ffbb 	bl	800a8c4 <pppProcessFrame>
      {
         //Silently discard the received packet
      }

      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	4798      	blx	r3
   }
}
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <nicNotifyLinkChange>:
 * @brief Process link state change notification
 * @param[in] interface Underlying network interface
 **/

void nicNotifyLinkChange(NetInterface *interface)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
   uint_t i;
   NetInterface *physicalInterface;
   NetInterface *virtualInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff44 	bl	80027f6 <nicGetPhysicalInterface>
 800296e:	6138      	str	r0, [r7, #16]

   //Re-enable interrupts if necessary
   if(physicalInterface->configured)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	2b00      	cmp	r3, #0
 8002978:	d004      	beq.n	8002984 <nicNotifyLinkChange+0x24>
   {
      physicalInterface->nicDriver->enableIrq(physicalInterface);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	6938      	ldr	r0, [r7, #16]
 8002982:	4798      	blx	r3
   }

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	e02f      	b.n	80029ea <nicNotifyLinkChange+0x8a>
   {
      //Point to the current interface
      virtualInterface = &netInterface[i];
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <nicNotifyLinkChange+0xa4>)
 8002996:	4413      	add	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

      //Check whether the current virtual interface is attached to the physical
      //interface
      if(nicIsParentInterface(virtualInterface, interface) &&
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff ff40 	bl	8002822 <nicIsParentInterface>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01d      	beq.n	80029e4 <nicNotifyLinkChange+0x84>
         nicGetSwitchPort(virtualInterface) == nicGetSwitchPort(interface))
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ff2f 	bl	800280c <nicGetSwitchPort>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461c      	mov	r4, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ff2a 	bl	800280c <nicGetSwitchPort>
 80029b8:	4603      	mov	r3, r0
      if(nicIsParentInterface(virtualInterface, interface) &&
 80029ba:	429c      	cmp	r4, r3
 80029bc:	d112      	bne.n	80029e4 <nicNotifyLinkChange+0x84>
      {
         //Set operation mode
         virtualInterface->linkSpeed = interface->linkSpeed;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         virtualInterface->duplexMode = interface->duplexMode;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

         //Update link state
         virtualInterface->linkState = interface->linkState;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	67da      	str	r2, [r3, #124]	; 0x7c

         //Process link state change event
         netProcessLinkChange(virtualInterface);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff f928 	bl	8001c34 <netProcessLinkChange>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0cc      	beq.n	800298a <nicNotifyLinkChange+0x2a>
      }
   }

   //Disable interrupts
   physicalInterface->nicDriver->disableIrq(physicalInterface);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	6938      	ldr	r0, [r7, #16]
 80029f8:	4798      	blx	r3
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd90      	pop	{r4, r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20001a9c 	.word	0x20001a9c

08002a08 <socketInit>:
 * @brief Socket related initialization
 * @return Error code
 **/

error_t socketInit(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
   uint_t i;
   uint_t j;

   //Initialize socket descriptors
   memset(socketTable, 0, sizeof(socketTable));
 8002a0e:	f241 6208 	movw	r2, #5640	; 0x1608
 8002a12:	2100      	movs	r1, #0
 8002a14:	4820      	ldr	r0, [pc, #128]	; (8002a98 <socketInit+0x90>)
 8002a16:	f015 fc5b 	bl	80182d0 <memset>

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	e032      	b.n	8002a86 <socketInit+0x7e>
   {
      //Set socket identifier
      socketTable[i].descriptor = i;
 8002a20:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <socketInit+0x90>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f44f 710d 	mov.w	r1, #564	; 0x234
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]

      //Create an event object to track socket events
      if(!osCreateEvent(&socketTable[i].event))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	3330      	adds	r3, #48	; 0x30
 8002a3e:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <socketInit+0x90>)
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fe06 	bl	8000656 <osCreateEvent>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d117      	bne.n	8002a80 <socketInit+0x78>
      {
         //Clean up side effects
         for(j = 0; j < i; j++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	e00e      	b.n	8002a74 <socketInit+0x6c>
            osDeleteEvent(&socketTable[j].event);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	3330      	adds	r3, #48	; 0x30
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <socketInit+0x90>)
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fe14 	bl	8000696 <osDeleteEvent>
         for(j = 0; j < i; j++)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d3ec      	bcc.n	8002a56 <socketInit+0x4e>

         //Report an error
         return ERROR_OUT_OF_RESOURCES;
 8002a7c:	2365      	movs	r3, #101	; 0x65
 8002a7e:	e006      	b.n	8002a8e <socketInit+0x86>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3301      	adds	r3, #1
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b09      	cmp	r3, #9
 8002a8a:	d9c9      	bls.n	8002a20 <socketInit+0x18>
      }
   }

   //Successful initialization
   return NO_ERROR;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20001e6c 	.word	0x20001e6c

08002a9c <tcpInit>:
 * @brief TCP related initialization
 * @return Error code
 **/

error_t tcpInit(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   tcpDynamicPort = 0;
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <tcpInit+0x18>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]

   //Successful initialization
   return NO_ERROR;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	2000012c 	.word	0x2000012c

08002ab8 <tcpProcessSegment>:
 * @param[in] offset Offset to the first byte of the TCP header
 **/

void tcpProcessSegment(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, const NetBuffer *buffer, size_t offset)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b08d      	sub	sp, #52	; 0x34
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]

   //A TCP implementation must silently discard an incoming segment that
   //is addressed to a broadcast or multicast address (refer to RFC 1122,
   //section 4.2.3.10)
#if (IPV4_SUPPORT == ENABLED)
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	f040 81a6 	bne.w	8002e1c <tcpProcessSegment+0x364>
   {
      //Ensure the destination address is not a broadcast address
      if(ipv4IsBroadcastAddr(interface, pseudoHeader->ipv4Data.destAddr))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f004 fc10 	bl	80072fc <ipv4IsBroadcastAddr>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 819e 	bne.w	8002e20 <tcpProcessSegment+0x368>
         return;
      //Ensure the destination address is not a multicast address
      if(ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aec:	2be0      	cmp	r3, #224	; 0xe0
 8002aee:	f000 8199 	beq.w	8002e24 <tcpProcessSegment+0x36c>
      //This should never occur...
      return;
   }

   //Retrieve the length of the TCP segment
   length = netBufferGetLength(buffer) - offset;
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fb93 	bl	800221e <netBufferGetLength>
 8002af8:	4602      	mov	r2, r0
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	61bb      	str	r3, [r7, #24]

   //Point to the TCP header
   segment = netBufferAt(buffer, offset);
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fc53 	bl	80023ae <netBufferAt>
 8002b08:	6178      	str	r0, [r7, #20]
   //Sanity check
   if(segment == NULL)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 818b 	beq.w	8002e28 <tcpProcessSegment+0x370>
      return;

   //Ensure the TCP header is valid
   if(length < sizeof(TcpHeader))
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b13      	cmp	r3, #19
 8002b16:	f240 8189 	bls.w	8002e2c <tcpProcessSegment+0x374>
      //Exit immediately
      return;
   }

   //Check header length
   if(segment->dataOffset < 5 || ((size_t) segment->dataOffset * 4) > length)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	7b1b      	ldrb	r3, [r3, #12]
 8002b1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	f240 8183 	bls.w	8002e30 <tcpProcessSegment+0x378>
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	7b1b      	ldrb	r3, [r3, #12]
 8002b2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f0c0 8179 	bcc.w	8002e30 <tcpProcessSegment+0x378>
      //Exit immediately
      return;
   }

   //Verify TCP checksum
   if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1d18      	adds	r0, r3, #4
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	f7fe feaa 	bl	80018a6 <ipCalcUpperLayerChecksumEx>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f040 816d 	bne.w	8002e34 <tcpProcessSegment+0x37c>
      //Exit immediately
      return;
   }

   //No matching socket in the LISTEN state for the moment
   passiveSocket = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]

   //Look through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
 8002b62:	e067      	b.n	8002c34 <tcpProcessSegment+0x17c>
   {
      //Point to the current socket
      socket = socketTable + i;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f44f 720d 	mov.w	r2, #564	; 0x234
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	4aa4      	ldr	r2, [pc, #656]	; (8002e00 <tcpProcessSegment+0x348>)
 8002b70:	4413      	add	r3, r2
 8002b72:	623b      	str	r3, [r7, #32]

      //TCP socket found?
      if(socket->type != SOCKET_TYPE_STREAM)
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d149      	bne.n	8002c10 <tcpProcessSegment+0x158>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <tcpProcessSegment+0xd6>
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d142      	bne.n	8002c14 <tcpProcessSegment+0x15c>
         continue;
      //Check destination port number
      if(socket->localPort != ntohs(segment->destPort))
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	8b1c      	ldrh	r4, [r3, #24]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	885b      	ldrh	r3, [r3, #2]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fd01 	bl	80005a0 <swapInt16>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	429c      	cmp	r4, r3
 8002ba2:	d139      	bne.n	8002c18 <tcpProcessSegment+0x160>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d137      	bne.n	8002c1c <tcpProcessSegment+0x164>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d009      	beq.n	8002bc8 <tcpProcessSegment+0x110>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d131      	bne.n	8002c20 <tcpProcessSegment+0x168>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d12d      	bne.n	8002c24 <tcpProcessSegment+0x16c>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d009      	beq.n	8002be4 <tcpProcessSegment+0x12c>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d127      	bne.n	8002c28 <tcpProcessSegment+0x170>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	6a1a      	ldr	r2, [r3, #32]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d123      	bne.n	8002c2c <tcpProcessSegment+0x174>
         //This should never occur...
         continue;
      }

      //Keep track of the first matching socket in the LISTEN state
      if(socket->state == TCP_STATE_LISTEN && passiveSocket == NULL)
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d104      	bne.n	8002bf8 <tcpProcessSegment+0x140>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <tcpProcessSegment+0x140>
         passiveSocket = socket;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	61fb      	str	r3, [r7, #28]

      //Source port filtering
      if(socket->remotePort != ntohs(segment->srcPort))
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fccc 	bl	80005a0 <swapInt16>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	429c      	cmp	r4, r3
 8002c0c:	d016      	beq.n	8002c3c <tcpProcessSegment+0x184>
         continue;
 8002c0e:	e00e      	b.n	8002c2e <tcpProcessSegment+0x176>
         continue;
 8002c10:	bf00      	nop
 8002c12:	e00c      	b.n	8002c2e <tcpProcessSegment+0x176>
         continue;
 8002c14:	bf00      	nop
 8002c16:	e00a      	b.n	8002c2e <tcpProcessSegment+0x176>
         continue;
 8002c18:	bf00      	nop
 8002c1a:	e008      	b.n	8002c2e <tcpProcessSegment+0x176>
         continue;
 8002c1c:	bf00      	nop
 8002c1e:	e006      	b.n	8002c2e <tcpProcessSegment+0x176>
               continue;
 8002c20:	bf00      	nop
 8002c22:	e004      	b.n	8002c2e <tcpProcessSegment+0x176>
               continue;
 8002c24:	bf00      	nop
 8002c26:	e002      	b.n	8002c2e <tcpProcessSegment+0x176>
               continue;
 8002c28:	bf00      	nop
 8002c2a:	e000      	b.n	8002c2e <tcpProcessSegment+0x176>
               continue;
 8002c2c:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	3301      	adds	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	2b09      	cmp	r3, #9
 8002c38:	d994      	bls.n	8002b64 <tcpProcessSegment+0xac>
 8002c3a:	e000      	b.n	8002c3e <tcpProcessSegment+0x186>

      //A matching socket has been found
      break;
 8002c3c:	bf00      	nop
   }

   //If no matching socket has been found then try to
   //use the first matching socket in the LISTEN state
   if(i >= SOCKET_MAX_COUNT)
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	2b09      	cmp	r3, #9
 8002c42:	d901      	bls.n	8002c48 <tcpProcessSegment+0x190>
      socket = passiveSocket;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	623b      	str	r3, [r7, #32]

   //Offset to the first data byte
   offset += segment->dataOffset * 4;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	7b1b      	ldrb	r3, [r3, #12]
 8002c4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	461a      	mov	r2, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	603b      	str	r3, [r7, #0]
   //Calculate the length of the data
   length -= segment->dataOffset * 4;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	7b1b      	ldrb	r3, [r3, #12]
 8002c60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
   //Debug message
   TRACE_DEBUG("%s: TCP segment received (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   if(socket == NULL)
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <tcpProcessSegment+0x1cc>
      tcpDumpHeader(segment, length, 0, 0);
 8002c76:	2300      	movs	r3, #0
 8002c78:	2200      	movs	r2, #0
 8002c7a:	69b9      	ldr	r1, [r7, #24]
 8002c7c:	6978      	ldr	r0, [r7, #20]
 8002c7e:	f002 fa38 	bl	80050f2 <tcpDumpHeader>
 8002c82:	e007      	b.n	8002c94 <tcpProcessSegment+0x1dc>
   else
      tcpDumpHeader(segment, length, socket->irs, socket->iss);
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	6978      	ldr	r0, [r7, #20]
 8002c90:	f002 fa2f 	bl	80050f2 <tcpDumpHeader>

   //Convert from network byte order to host byte order
   segment->srcPort = ntohs(segment->srcPort);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc80 	bl	80005a0 <swapInt16>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	801a      	strh	r2, [r3, #0]
   segment->destPort = ntohs(segment->destPort);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	885b      	ldrh	r3, [r3, #2]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fc76 	bl	80005a0 <swapInt16>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	805a      	strh	r2, [r3, #2]
   segment->seqNum = ntohl(segment->seqNum);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc7b 	bl	80005bc <swapInt32>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	605a      	str	r2, [r3, #4]
   segment->ackNum = ntohl(segment->ackNum);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc73 	bl	80005bc <swapInt32>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	609a      	str	r2, [r3, #8]
   segment->window = ntohs(segment->window);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	89db      	ldrh	r3, [r3, #14]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fc5c 	bl	80005a0 <swapInt16>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	81da      	strh	r2, [r3, #14]
   segment->urgentPointer = ntohs(segment->urgentPointer);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	8a5b      	ldrh	r3, [r3, #18]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc52 	bl	80005a0 <swapInt16>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	825a      	strh	r2, [r3, #18]

   //Specified port is unreachable?
   if(socket == NULL)
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d110      	bne.n	8002d2c <tcpProcessSegment+0x274>
   {
      //An incoming segment not containing a RST causes
      //a reset to be sent in response
      if(!(segment->flags & TCP_FLAG_RST))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	7b5b      	ldrb	r3, [r3, #13]
 8002d0e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 808d 	bne.w	8002e38 <tcpProcessSegment+0x380>
         tcpSendResetSegment(interface, pseudoHeader, segment, length);
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fee2 	bl	8003aee <tcpSendResetSegment>

      //Return immediately
      return;
 8002d2a:	e085      	b.n	8002e38 <tcpProcessSegment+0x380>
   }

   //Check current state
   switch(socket->state)
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d32:	2b0a      	cmp	r3, #10
 8002d34:	d86c      	bhi.n	8002e10 <tcpProcessSegment+0x358>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <tcpProcessSegment+0x284>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d69 	.word	0x08002d69
 8002d40:	08002d77 	.word	0x08002d77
 8002d44:	08002d89 	.word	0x08002d89
 8002d48:	08002d95 	.word	0x08002d95
 8002d4c:	08002da7 	.word	0x08002da7
 8002d50:	08002db9 	.word	0x08002db9
 8002d54:	08002dc5 	.word	0x08002dc5
 8002d58:	08002dd1 	.word	0x08002dd1
 8002d5c:	08002de3 	.word	0x08002de3
 8002d60:	08002df5 	.word	0x08002df5
 8002d64:	08002e05 	.word	0x08002e05
   {
   //Process CLOSED state
   case TCP_STATE_CLOSED:
      //This is the default state that each connection starts in before
      //the process of establishing it begins
      tcpStateClosed(interface, pseudoHeader, segment, length);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f866 	bl	8002e40 <tcpStateClosed>
      break;
 8002d74:	e061      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Process LISTEN state
   case TCP_STATE_LISTEN:
      //A device (normally a server) is waiting to receive a synchronize (SYN)
      //message from a client. It has not yet sent its own SYN message
      tcpStateListen(socket, interface, pseudoHeader, segment, length);
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	6a38      	ldr	r0, [r7, #32]
 8002d82:	f000 f877 	bl	8002e74 <tcpStateListen>
      break;
 8002d86:	e058      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Process SYN_SENT state
   case TCP_STATE_SYN_SENT:
      //The device (normally a client) has sent a synchronize (SYN) message and
      //is waiting for a matching SYN from the other device (usually a server)
      tcpStateSynSent(socket, segment, length);
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	6979      	ldr	r1, [r7, #20]
 8002d8c:	6a38      	ldr	r0, [r7, #32]
 8002d8e:	f000 f939 	bl	8003004 <tcpStateSynSent>
      break;
 8002d92:	e052      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Process SYN_RECEIVED state
   case TCP_STATE_SYN_RECEIVED:
      //The device has both received a SYN from its partner and sent its own SYN.
      //It is now waiting for an ACK to its SYN to finish connection setup
      tcpStateSynReceived(socket, segment, buffer, offset, length);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	6a38      	ldr	r0, [r7, #32]
 8002da0:	f000 fa23 	bl	80031ea <tcpStateSynReceived>
      break;
 8002da4:	e049      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Process ESTABLISHED state
   case TCP_STATE_ESTABLISHED:
      //Data can be exchanged freely once both devices in the connection enter
      //this state. This will continue until the connection is closed
      tcpStateEstablished(socket, segment, buffer, offset, length);
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6979      	ldr	r1, [r7, #20]
 8002db0:	6a38      	ldr	r0, [r7, #32]
 8002db2:	f000 fa83 	bl	80032bc <tcpStateEstablished>
      break;
 8002db6:	e040      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Process CLOSE_WAIT state
   case TCP_STATE_CLOSE_WAIT:
      //The device has received a close request (FIN) from the other device. It
      //must now wait for the application to acknowledge this request and
      //generate a matching request
      tcpStateCloseWait(socket, segment, length);
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	6979      	ldr	r1, [r7, #20]
 8002dbc:	6a38      	ldr	r0, [r7, #32]
 8002dbe:	f000 faf3 	bl	80033a8 <tcpStateCloseWait>
      break;
 8002dc2:	e03a      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Process LAST_ACK state
   case TCP_STATE_LAST_ACK:
      //A device that has already received a close request and acknowledged it,
      //has sent its own FIN and is waiting for an ACK to this request
      tcpStateLastAck(socket, segment, length);
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	6979      	ldr	r1, [r7, #20]
 8002dc8:	6a38      	ldr	r0, [r7, #32]
 8002dca:	f000 fb30 	bl	800342e <tcpStateLastAck>
      break;
 8002dce:	e034      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Process FIN_WAIT_1 state
   case TCP_STATE_FIN_WAIT_1:
      //A device in this state is waiting for an ACK for a FIN it has sent, or
      //is waiting for a connection termination request from the other device
      tcpStateFinWait1(socket, segment, buffer, offset, length);
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	6a38      	ldr	r0, [r7, #32]
 8002ddc:	f000 fb67 	bl	80034ae <tcpStateFinWait1>
      break;
 8002de0:	e02b      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Process FIN_WAIT_2 state
   case TCP_STATE_FIN_WAIT_2:
      //A device in this state has received an ACK for its request to terminate the
      //connection and is now waiting for a matching FIN from the other device
      tcpStateFinWait2(socket, segment, buffer, offset, length);
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6979      	ldr	r1, [r7, #20]
 8002dec:	6a38      	ldr	r0, [r7, #32]
 8002dee:	f000 fbee 	bl	80035ce <tcpStateFinWait2>
      break;
 8002df2:	e022      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Process CLOSING state
   case TCP_STATE_CLOSING:
      //The device has received a FIN from the other device and sent an ACK for
      //it, but not yet received an ACK for its own FIN message
      tcpStateClosing(socket, segment, length);
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	6979      	ldr	r1, [r7, #20]
 8002df8:	6a38      	ldr	r0, [r7, #32]
 8002dfa:	f000 fc5b 	bl	80036b4 <tcpStateClosing>
      break;
 8002dfe:	e01c      	b.n	8002e3a <tcpProcessSegment+0x382>
 8002e00:	20001e6c 	.word	0x20001e6c
   case TCP_STATE_TIME_WAIT:
      //The device has now received a FIN from the other device and acknowledged
      //it, and sent its own FIN and received an ACK for it. We are done, except
      //for waiting to ensure the ACK is received and prevent potential overlap
      //with new connections
      tcpStateTimeWait(socket, segment, length);
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	6979      	ldr	r1, [r7, #20]
 8002e08:	6a38      	ldr	r0, [r7, #32]
 8002e0a:	f000 fc9d 	bl	8003748 <tcpStateTimeWait>
      break;
 8002e0e:	e014      	b.n	8002e3a <tcpProcessSegment+0x382>
   //Invalid state...
   default:
      //Back to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8002e10:	2100      	movs	r1, #0
 8002e12:	6a38      	ldr	r0, [r7, #32]
 8002e14:	f001 ff76 	bl	8004d04 <tcpChangeState>
      //Silently discard incoming packet
      break;
 8002e18:	bf00      	nop
 8002e1a:	e00e      	b.n	8002e3a <tcpProcessSegment+0x382>
      return;
 8002e1c:	bf00      	nop
 8002e1e:	e00c      	b.n	8002e3a <tcpProcessSegment+0x382>
         return;
 8002e20:	bf00      	nop
 8002e22:	e00a      	b.n	8002e3a <tcpProcessSegment+0x382>
         return;
 8002e24:	bf00      	nop
 8002e26:	e008      	b.n	8002e3a <tcpProcessSegment+0x382>
      return;
 8002e28:	bf00      	nop
 8002e2a:	e006      	b.n	8002e3a <tcpProcessSegment+0x382>
      return;
 8002e2c:	bf00      	nop
 8002e2e:	e004      	b.n	8002e3a <tcpProcessSegment+0x382>
      return;
 8002e30:	bf00      	nop
 8002e32:	e002      	b.n	8002e3a <tcpProcessSegment+0x382>
      return;
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <tcpProcessSegment+0x382>
      return;
 8002e38:	bf00      	nop
   }
}
 8002e3a:	372c      	adds	r7, #44	; 0x2c
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd90      	pop	{r4, r7, pc}

08002e40 <tcpStateClosed>:
 * @param[in] length Length of the segment data
 **/

void tcpStateClosed(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSED state\r\n");

   //An incoming segment not containing a RST causes
   //a reset to be sent in response
   if(!(segment->flags & TCP_FLAG_RST))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7b5b      	ldrb	r3, [r3, #13]
 8002e52:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <tcpStateClosed+0x2c>
      tcpSendResetSegment(interface, pseudoHeader, segment, length);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fe41 	bl	8003aee <tcpSendResetSegment>
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <tcpStateListen>:
 * @param[in] length Length of the segment data
 **/

void tcpStateListen(Socket *socket, NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("TCP FSM: LISTEN state\r\n");

   //An incoming RST should be ignored
   if(segment->flags & TCP_FLAG_RST)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	7b5b      	ldrb	r3, [r3, #13]
 8002e86:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 80ab 	bne.w	8002fec <tcpStateListen+0x178>
      return;

   //Any acknowledgment is bad if it arrives on a connection
   //still in the LISTEN state
   if(segment->flags & TCP_FLAG_ACK)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	7b5b      	ldrb	r3, [r3, #13]
 8002e9a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <tcpStateListen+0x42>
   {
      //A reset segment should be formed for any arriving ACK-bearing segment
      tcpSendResetSegment(interface, pseudoHeader, segment, length);
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	68b8      	ldr	r0, [r7, #8]
 8002eb0:	f000 fe1d 	bl	8003aee <tcpSendResetSegment>
      //Return immediately
      return;
 8002eb4:	e0a3      	b.n	8002ffe <tcpStateListen+0x18a>
   }

   //Check the SYN bit
   if(segment->flags & TCP_FLAG_SYN)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	7b5b      	ldrb	r3, [r3, #13]
 8002eba:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 809a 	beq.w	8002ffe <tcpStateListen+0x18a>
   {
      //Silently drop duplicate SYN segments
      if(tcpIsDuplicateSyn(socket, pseudoHeader, segment))
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f001 f99f 	bl	8004212 <tcpIsDuplicateSyn>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 808a 	bne.w	8002ff0 <tcpStateListen+0x17c>
         return;

      //Check whether the SYN queue is empty
      if(socket->synQueue == NULL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d108      	bne.n	8002ef8 <tcpStateListen+0x84>
      {
         //Allocate memory to save incoming data
         queueItem = memPoolAlloc(sizeof(TcpSynQueueItem));
 8002ee6:	2024      	movs	r0, #36	; 0x24
 8002ee8:	f7ff f92a 	bl	8002140 <memPoolAlloc>
 8002eec:	61b8      	str	r0, [r7, #24]
         //Add the newly created item to the queue
         socket->synQueue = queueItem;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8002ef6:	e01f      	b.n	8002f38 <tcpStateListen+0xc4>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->synQueue;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002efe:	61bb      	str	r3, [r7, #24]

         //Reach the last item in the SYN queue
         for(i = 1; queueItem->next != NULL; i++)
 8002f00:	2301      	movs	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	e005      	b.n	8002f12 <tcpStateListen+0x9e>
            queueItem = queueItem->next;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	61bb      	str	r3, [r7, #24]
         for(i = 1; queueItem->next != NULL; i++)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f5      	bne.n	8002f06 <tcpStateListen+0x92>

         //Make sure the SYN queue is not full
         if(i >= socket->synQueueSize)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d266      	bcs.n	8002ff4 <tcpStateListen+0x180>
            return;

         //Allocate memory to save incoming data
         queueItem->next = memPoolAlloc(sizeof(TcpSynQueueItem));
 8002f26:	2024      	movs	r0, #36	; 0x24
 8002f28:	f7ff f90a 	bl	8002140 <memPoolAlloc>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	61bb      	str	r3, [r7, #24]
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d05c      	beq.n	8002ff8 <tcpStateListen+0x184>
         return;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 is currently used?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d15a      	bne.n	8002ffc <tcpStateListen+0x188>
      {
         //Save the source IPv4 address
         queueItem->srcAddr.length = sizeof(Ipv4Addr);
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	609a      	str	r2, [r3, #8]
         queueItem->srcAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	60da      	str	r2, [r3, #12]
         //Save the destination IPv4 address
         queueItem->destAddr.length = sizeof(Ipv4Addr);
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2204      	movs	r2, #4
 8002f58:	615a      	str	r2, [r3, #20]
         queueItem->destAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	619a      	str	r2, [r3, #24]
         //This should never occur...
         return;
      }

      //Initialize next field
      queueItem->next = NULL;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
      //Underlying network interface
      queueItem->interface = interface;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	605a      	str	r2, [r3, #4]
      //Save the port number of the client
      queueItem->srcPort = segment->srcPort;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	821a      	strh	r2, [r3, #16]
      //Save the initial sequence number
      queueItem->isn = segment->seqNum;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	61da      	str	r2, [r3, #28]
      //Default MSS value
      queueItem->mss = MIN(TCP_DEFAULT_MSS, TCP_MAX_MSS);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f44f 7206 	mov.w	r2, #536	; 0x218
 8002f86:	841a      	strh	r2, [r3, #32]

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 8002f88:	2102      	movs	r1, #2
 8002f8a:	6838      	ldr	r0, [r7, #0]
 8002f8c:	f000 feec 	bl	8003d68 <tcpGetOption>
 8002f90:	6178      	str	r0, [r7, #20]

      //Specified option found?
      if(option != NULL && option->length == 4)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d025      	beq.n	8002fe4 <tcpStateListen+0x170>
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	785b      	ldrb	r3, [r3, #1]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d121      	bne.n	8002fe4 <tcpStateListen+0x170>
      {
         //Retrieve MSS value
         memcpy(&queueItem->mss, option->value, 2);
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	3320      	adds	r3, #32
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	3202      	adds	r2, #2
 8002fa8:	8812      	ldrh	r2, [r2, #0]
 8002faa:	b292      	uxth	r2, r2
 8002fac:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         queueItem->mss = ntohs(queueItem->mss);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	8c1b      	ldrh	r3, [r3, #32]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd faf4 	bl	80005a0 <swapInt16>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	841a      	strh	r2, [r3, #32]

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", queueItem->mss);

         //Make sure that the MSS advertised by the peer is acceptable
         queueItem->mss = MIN(queueItem->mss, TCP_MAX_MSS);
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	8c1b      	ldrh	r3, [r3, #32]
 8002fc4:	f240 5296 	movw	r2, #1430	; 0x596
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	bf28      	it	cs
 8002fcc:	4613      	movcs	r3, r2
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	841a      	strh	r2, [r3, #32]
         queueItem->mss = MAX(queueItem->mss, TCP_MIN_MSS);
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	8c1b      	ldrh	r3, [r3, #32]
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	bf38      	it	cc
 8002fdc:	2340      	movcc	r3, #64	; 0x40
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	841a      	strh	r2, [r3, #32]
      }

      //Notify user that a connection request is pending
      tcpUpdateEvents(socket);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f001 feb3 	bl	8004d50 <tcpUpdateEvents>
 8002fea:	e008      	b.n	8002ffe <tcpStateListen+0x18a>
      return;
 8002fec:	bf00      	nop
 8002fee:	e006      	b.n	8002ffe <tcpStateListen+0x18a>
         return;
 8002ff0:	bf00      	nop
 8002ff2:	e004      	b.n	8002ffe <tcpStateListen+0x18a>
            return;
 8002ff4:	bf00      	nop
 8002ff6:	e002      	b.n	8002ffe <tcpStateListen+0x18a>
         return;
 8002ff8:	bf00      	nop
 8002ffa:	e000      	b.n	8002ffe <tcpStateListen+0x18a>
         return;
 8002ffc:	bf00      	nop

      //The rest of the processing described in RFC 793 will be done
      //asynchronously when socketAccept() function is called
   }
}
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <tcpStateSynSent>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateSynSent(Socket *socket, TcpHeader *segment, size_t length)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-SENT state\r\n");

   //Check the ACK bit
   if(segment->flags & TCP_FLAG_ACK)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	7b5b      	ldrb	r3, [r3, #13]
 8003014:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01b      	beq.n	800305a <tcpStateSynSent+0x56>
   {
      //Make sure the acknowledgment number is valid
      if(segment->ackNum != socket->sndNxt)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800302a:	429a      	cmp	r2, r3
 800302c:	d015      	beq.n	800305a <tcpStateSynSent+0x56>
      {
         //Send a reset segment unless the RST bit is set
         if(!(segment->flags & TCP_FLAG_RST))
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	7b5b      	ldrb	r3, [r3, #13]
 8003032:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 80ce 	bne.w	80031de <tcpStateSynSent+0x1da>
            tcpSendSegment(socket, TCP_FLAG_RST, segment->ackNum, 0, 0, FALSE);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	2300      	movs	r3, #0
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	2300      	movs	r3, #0
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	2300      	movs	r3, #0
 8003050:	2104      	movs	r1, #4
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fbd8 	bl	8003808 <tcpSendSegment>

         //Drop the segment and return
         return;
 8003058:	e0c1      	b.n	80031de <tcpStateSynSent+0x1da>
      }
   }

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	7b5b      	ldrb	r3, [r3, #13]
 800305e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00e      	beq.n	800308a <tcpStateSynSent+0x86>
   {
      //Make sure the ACK is acceptable
      if(segment->flags & TCP_FLAG_ACK)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	7b5b      	ldrb	r3, [r3, #13]
 8003070:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80b1 	beq.w	80031e2 <tcpStateSynSent+0x1de>
      {
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8003080:	2100      	movs	r1, #0
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f001 fe3e 	bl	8004d04 <tcpChangeState>
         MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
         TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);
      }

      //Drop the segment and return
      return;
 8003088:	e0ab      	b.n	80031e2 <tcpStateSynSent+0x1de>
   }

   //Check the SYN bit
   if(segment->flags & TCP_FLAG_SYN)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	7b5b      	ldrb	r3, [r3, #13]
 800308e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a3 	beq.w	80031e4 <tcpStateSynSent+0x1e0>
   {
      //Save initial receive sequence number
      socket->irs = segment->seqNum;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	65da      	str	r2, [r3, #92]	; 0x5c
      //Initialize RCV.NXT pointer
      socket->rcvNxt = segment->seqNum + 1;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	679a      	str	r2, [r3, #120]	; 0x78

      //If there is an ACK, SND.UNA should be advanced to equal SEG.ACK
      if(segment->flags & TCP_FLAG_ACK)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	7b5b      	ldrb	r3, [r3, #13]
 80030b4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <tcpStateSynSent+0xc6>
         socket->sndUna = segment->ackNum;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	661a      	str	r2, [r3, #96]	; 0x60

      //Compute retransmission timeout
      tcpComputeRto(socket);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f001 fc0e 	bl	80048ec <tcpComputeRto>

      //Any segments on the retransmission queue which are thereby
      //acknowledged should be removed
      tcpUpdateRetransmitQueue(socket);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f001 fa48 	bl	8004566 <tcpUpdateRetransmitQueue>

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 80030d6:	2102      	movs	r1, #2
 80030d8:	68b8      	ldr	r0, [r7, #8]
 80030da:	f000 fe45 	bl	8003d68 <tcpGetOption>
 80030de:	6178      	str	r0, [r7, #20]

      //Specified option found?
      if(option != NULL && option->length == 4)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d02b      	beq.n	800313e <tcpStateSynSent+0x13a>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	785b      	ldrb	r3, [r3, #1]
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d127      	bne.n	800313e <tcpStateSynSent+0x13a>
      {
         //Retrieve MSS value
         memcpy(&socket->smss, option->value, 2);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3354      	adds	r3, #84	; 0x54
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	3202      	adds	r2, #2
 80030f6:	8812      	ldrh	r2, [r2, #0]
 80030f8:	b292      	uxth	r2, r2
 80030fa:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         socket->smss = ntohs(socket->smss);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fa4c 	bl	80005a0 <swapInt16>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", socket->smss);

         //Make sure that the MSS advertised by the peer is acceptable
         socket->smss = MIN(socket->smss, TCP_MAX_MSS);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003118:	f240 5296 	movw	r2, #1430	; 0x596
 800311c:	4293      	cmp	r3, r2
 800311e:	bf28      	it	cs
 8003120:	4613      	movcs	r3, r2
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
         socket->smss = MAX(socket->smss, TCP_MIN_MSS);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	bf38      	it	cc
 8003134:	2340      	movcc	r3, #64	; 0x40
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Initial congestion window
      socket->cwnd = MIN(TCP_INITIAL_WINDOW * socket->smss, socket->txBufferSize);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800314a:	4619      	mov	r1, r3
 800314c:	460b      	mov	r3, r1
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	440b      	add	r3, r1
 8003152:	4293      	cmp	r3, r2
 8003154:	bf28      	it	cs
 8003156:	4613      	movcs	r3, r2
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
#endif

      //Check whether our SYN has been acknowledged (SND.UNA > ISS)
      if(TCP_CMP_SEQ(socket->sndUna, socket->iss) > 0)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	dd25      	ble.n	80031ba <tcpStateSynSent+0x1b6>
      {
         //Update the send window before entering ESTABLISHED state (refer to
         //RFC 1122, section 4.2.2.20)
         socket->sndWnd = segment->window;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	89db      	ldrh	r3, [r3, #14]
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
         socket->sndWl1 = segment->seqNum;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	671a      	str	r2, [r3, #112]	; 0x70
         socket->sndWl2 = segment->ackNum;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	675a      	str	r2, [r3, #116]	; 0x74

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = segment->window;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	89db      	ldrh	r3, [r3, #14]
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

         //Form an ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800319e:	2300      	movs	r3, #0
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2300      	movs	r3, #0
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	460b      	mov	r3, r1
 80031a8:	2110      	movs	r1, #16
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fb2c 	bl	8003808 <tcpSendSegment>
         //Switch to the ESTABLISHED state
         tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 80031b0:	2104      	movs	r1, #4
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f001 fda6 	bl	8004d04 <tcpChangeState>
 80031b8:	e014      	b.n	80031e4 <tcpStateSynSent+0x1e0>
      }
      else
      {
         //Form an SYN ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_SYN | TCP_FLAG_ACK, socket->iss, socket->rcvNxt, 0, TRUE);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80031c2:	2301      	movs	r3, #1
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	460b      	mov	r3, r1
 80031cc:	2112      	movs	r1, #18
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fb1a 	bl	8003808 <tcpSendSegment>
         //Enter SYN-RECEIVED state
         tcpChangeState(socket, TCP_STATE_SYN_RECEIVED);
 80031d4:	2103      	movs	r1, #3
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f001 fd94 	bl	8004d04 <tcpChangeState>
 80031dc:	e002      	b.n	80031e4 <tcpStateSynSent+0x1e0>
         return;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <tcpStateSynSent+0x1e0>
      return;
 80031e2:	bf00      	nop
      }
   }
}
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <tcpStateSynReceived>:
 * @param[in] length Length of the segment data
 **/

void tcpStateSynReceived(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af02      	add	r7, sp, #8
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-RECEIVED state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fe06 	bl	8003e0e <tcpCheckSequenceNumber>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d151      	bne.n	80032ac <tcpStateSynReceived+0xc2>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	7b5b      	ldrb	r3, [r3, #13]
 800320c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <tcpStateSynReceived+0x3a>
   {
      //Return to CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800321a:	2100      	movs	r1, #0
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f001 fd71 	bl	8004d04 <tcpChangeState>
      //CLOSED state from either the SYN-SENT state or the SYN-RECEIVED state
      MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
      TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);

      //Return immediately
      return;
 8003222:	e048      	b.n	80032b6 <tcpStateSynReceived+0xcc>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fe80 	bl	8003f2e <tcpCheckSyn>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d13d      	bne.n	80032b0 <tcpStateSynReceived+0xc6>
      return;

   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	7b5b      	ldrb	r3, [r3, #13]
 8003238:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	d036      	beq.n	80032b4 <tcpStateSynReceived+0xca>
      return;

   //Make sure the acknowledgment number is valid
   if(segment->ackNum != socket->sndNxt)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800324e:	429a      	cmp	r2, r3
 8003250:	d00b      	beq.n	800326a <tcpStateSynReceived+0x80>
   {
      //If the segment acknowledgment is not acceptable, form a reset
      //segment and send it
      tcpSendSegment(socket, TCP_FLAG_RST, segment->ackNum, 0, 0, FALSE);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	2300      	movs	r3, #0
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	2300      	movs	r3, #0
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	2104      	movs	r1, #4
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fad0 	bl	8003808 <tcpSendSegment>

      //Drop the segment and return
      return;
 8003268:	e025      	b.n	80032b6 <tcpStateSynReceived+0xcc>
   }

   //Update the send window before entering ESTABLISHED state (refer to
   //RFC 1122, section 4.2.2.20)
   socket->sndWnd = segment->window;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	89db      	ldrh	r3, [r3, #14]
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
   socket->sndWl1 = segment->seqNum;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	671a      	str	r2, [r3, #112]	; 0x70
   socket->sndWl2 = segment->ackNum;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	675a      	str	r2, [r3, #116]	; 0x74

   //Maximum send window it has seen so far on the connection
   socket->maxSndWnd = segment->window;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	89db      	ldrh	r3, [r3, #14]
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

   //Enter ESTABLISHED state
   tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 8003292:	2104      	movs	r1, #4
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f001 fd35 	bl	8004d04 <tcpChangeState>
   //And continue processing...
   tcpStateEstablished(socket, segment, buffer, offset, length);
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f809 	bl	80032bc <tcpStateEstablished>
 80032aa:	e004      	b.n	80032b6 <tcpStateSynReceived+0xcc>
      return;
 80032ac:	bf00      	nop
 80032ae:	e002      	b.n	80032b6 <tcpStateSynReceived+0xcc>
      return;
 80032b0:	bf00      	nop
 80032b2:	e000      	b.n	80032b6 <tcpStateSynReceived+0xcc>
      return;
 80032b4:	bf00      	nop
}
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <tcpStateEstablished>:
 * @param[in] length Length of the segment data
 **/

void tcpStateEstablished(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
   uint_t flags = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: ESTABLISHED state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fd9b 	bl	8003e0e <tcpCheckSequenceNumber>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d15c      	bne.n	8003398 <tcpStateEstablished+0xdc>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	7b5b      	ldrb	r3, [r3, #13]
 80032e2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <tcpStateEstablished+0x3e>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80032f0:	2100      	movs	r1, #0
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f001 fd06 	bl	8004d04 <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 80032f8:	e053      	b.n	80033a2 <tcpStateEstablished+0xe6>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80032fa:	6a3a      	ldr	r2, [r7, #32]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fe15 	bl	8003f2e <tcpCheckSyn>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d148      	bne.n	800339c <tcpStateEstablished+0xe0>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 800330a:	6a3a      	ldr	r2, [r7, #32]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fe47 	bl	8003fa2 <tcpCheckAck>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d142      	bne.n	80033a0 <tcpStateEstablished+0xe4>
      return;
   //Process the segment text
   if(length > 0)
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <tcpStateEstablished+0x74>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f001 f878 	bl	8004420 <tcpProcessSegmentData>

   //Check the FIN bit
   if(segment->flags & TCP_FLAG_FIN)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	7b5b      	ldrb	r3, [r3, #13]
 8003334:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01d      	beq.n	800337e <tcpStateEstablished+0xc2>
   {
      //The FIN can only be acknowledged if all the segment data
      //has been successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	440b      	add	r3, r1
 800334e:	429a      	cmp	r2, r3
 8003350:	d115      	bne.n	800337e <tcpStateEstablished+0xc2>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	679a      	str	r2, [r3, #120]	; 0x78
         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003364:	2300      	movs	r3, #0
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	2300      	movs	r3, #0
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	460b      	mov	r3, r1
 800336e:	2110      	movs	r1, #16
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fa49 	bl	8003808 <tcpSendSegment>
         //Switch to the CLOSE-WAIT state
         tcpChangeState(socket, TCP_STATE_CLOSE_WAIT);
 8003376:	2105      	movs	r1, #5
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f001 fcc3 	bl	8004d04 <tcpChangeState>
      }
   }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate AK received?
   if(socket->dupAckCount > 0)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <tcpStateEstablished+0xd2>
      flags = SOCKET_FLAG_NO_DELAY;
 8003388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800338c:	617b      	str	r3, [r7, #20]
#endif

   //The Nagle algorithm should be implemented to coalesce
   //short segments (refer to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 800338e:	6979      	ldr	r1, [r7, #20]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f001 fbac 	bl	8004aee <tcpNagleAlgo>
 8003396:	e004      	b.n	80033a2 <tcpStateEstablished+0xe6>
      return;
 8003398:	bf00      	nop
 800339a:	e002      	b.n	80033a2 <tcpStateEstablished+0xe6>
      return;
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <tcpStateEstablished+0xe6>
      return;
 80033a0:	bf00      	nop
}
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <tcpStateCloseWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateCloseWait(Socket *socket, TcpHeader *segment, size_t length)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
   uint_t flags = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSE-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fd26 	bl	8003e0e <tcpCheckSequenceNumber>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d12a      	bne.n	800341e <tcpStateCloseWait+0x76>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	7b5b      	ldrb	r3, [r3, #13]
 80033cc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <tcpStateCloseWait+0x3c>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80033da:	2100      	movs	r1, #0
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f001 fc91 	bl	8004d04 <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 80033e2:	e021      	b.n	8003428 <tcpStateCloseWait+0x80>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fda0 	bl	8003f2e <tcpCheckSyn>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <tcpStateCloseWait+0x7a>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fdd2 	bl	8003fa2 <tcpCheckAck>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d110      	bne.n	8003426 <tcpStateCloseWait+0x7e>
      return;

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate AK received?
   if(socket->dupAckCount > 0)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <tcpStateCloseWait+0x6c>
      flags = SOCKET_FLAG_NO_DELAY;
 800340e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003412:	617b      	str	r3, [r7, #20]
#endif

   //The Nagle algorithm should be implemented to coalesce
   //short segments (refer to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 8003414:	6979      	ldr	r1, [r7, #20]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f001 fb69 	bl	8004aee <tcpNagleAlgo>
 800341c:	e004      	b.n	8003428 <tcpStateCloseWait+0x80>
      return;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <tcpStateCloseWait+0x80>
      return;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <tcpStateCloseWait+0x80>
      return;
 8003426:	bf00      	nop
}
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <tcpStateLastAck>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateLastAck(Socket *socket, TcpHeader *segment, size_t length)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: LAST-ACK state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fce5 	bl	8003e0e <tcpCheckSequenceNumber>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d129      	bne.n	800349e <tcpStateLastAck+0x70>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	7b5b      	ldrb	r3, [r3, #13]
 800344e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <tcpStateLastAck+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800345c:	2100      	movs	r1, #0
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f001 fc50 	bl	8004d04 <tcpChangeState>
      //Return immediately
      return;
 8003464:	e020      	b.n	80034a8 <tcpStateLastAck+0x7a>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fd5f 	bl	8003f2e <tcpCheckSyn>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d115      	bne.n	80034a2 <tcpStateLastAck+0x74>
      return;
   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	7b5b      	ldrb	r3, [r3, #13]
 800347a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <tcpStateLastAck+0x78>
      return;

   //The only thing that can arrive in this state is an
   //acknowledgment of our FIN
   if(segment->ackNum == socket->sndNxt)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003490:	429a      	cmp	r2, r3
 8003492:	d109      	bne.n	80034a8 <tcpStateLastAck+0x7a>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003494:	2100      	movs	r1, #0
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f001 fc34 	bl	8004d04 <tcpChangeState>
 800349c:	e004      	b.n	80034a8 <tcpStateLastAck+0x7a>
      return;
 800349e:	bf00      	nop
 80034a0:	e002      	b.n	80034a8 <tcpStateLastAck+0x7a>
      return;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <tcpStateLastAck+0x7a>
      return;
 80034a6:	bf00      	nop
   }
}
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <tcpStateFinWait1>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait1(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af02      	add	r7, sp, #8
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-1 state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fca4 	bl	8003e0e <tcpCheckSequenceNumber>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d178      	bne.n	80035be <tcpStateFinWait1+0x110>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	7b5b      	ldrb	r3, [r3, #13]
 80034d0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <tcpStateFinWait1+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80034de:	2100      	movs	r1, #0
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f001 fc0f 	bl	8004d04 <tcpChangeState>
      //Return immediately
      return;
 80034e6:	e06f      	b.n	80035c8 <tcpStateFinWait1+0x11a>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fd1e 	bl	8003f2e <tcpCheckSyn>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d164      	bne.n	80035c2 <tcpStateFinWait1+0x114>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fd50 	bl	8003fa2 <tcpCheckAck>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d15e      	bne.n	80035c6 <tcpStateFinWait1+0x118>
      return;

   //Check whether our FIN is now acknowledged
   if(segment->ackNum == socket->sndNxt)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003510:	429a      	cmp	r2, r3
 8003512:	d10b      	bne.n	800352c <tcpStateFinWait1+0x7e>
   {
      //Start the FIN-WAIT-2 timer to prevent the connection
      //from staying in the FIN-WAIT-2 state forever
      tcpTimerStart(&socket->finWait2Timer, TCP_FIN_WAIT_2_TIMER);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800351a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800351e:	4618      	mov	r0, r3
 8003520:	f001 ff96 	bl	8005450 <tcpTimerStart>
      //enter FIN-WAIT-2 and continue processing in that state
      tcpChangeState(socket, TCP_STATE_FIN_WAIT_2);
 8003524:	2108      	movs	r1, #8
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f001 fbec 	bl	8004d04 <tcpChangeState>
   }

   //Process the segment text
   if(length > 0)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <tcpStateFinWait1+0x94>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 ff6f 	bl	8004420 <tcpProcessSegmentData>

   //Check the FIN bit
   if(segment->flags & TCP_FLAG_FIN)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	7b5b      	ldrb	r3, [r3, #13]
 8003546:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d039      	beq.n	80035c8 <tcpStateFinWait1+0x11a>
   {
      //The FIN can only be acknowledged if all the segment data
      //has been successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	440b      	add	r3, r1
 8003560:	429a      	cmp	r2, r3
 8003562:	d131      	bne.n	80035c8 <tcpStateFinWait1+0x11a>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	679a      	str	r2, [r3, #120]	; 0x78
         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003576:	2300      	movs	r3, #0
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	2300      	movs	r3, #0
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	460b      	mov	r3, r1
 8003580:	2110      	movs	r1, #16
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f940 	bl	8003808 <tcpSendSegment>

         //Check if our FIN has been acknowledged
         if(segment->ackNum == socket->sndNxt)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003590:	429a      	cmp	r2, r3
 8003592:	d10f      	bne.n	80035b4 <tcpStateFinWait1+0x106>
         {
            //Release previously allocated resources
            tcpDeleteControlBlock(socket);
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 ffcb 	bl	8004530 <tcpDeleteControlBlock>
            //Start the 2MSL timer
            tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035a0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 ff53 	bl	8005450 <tcpTimerStart>
            //Switch to the TIME-WAIT state
            tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 80035aa:	210a      	movs	r1, #10
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f001 fba9 	bl	8004d04 <tcpChangeState>
 80035b2:	e009      	b.n	80035c8 <tcpStateFinWait1+0x11a>
         }
         else
         {
            //If our FIN has not been acknowledged, then enter CLOSING state
            tcpChangeState(socket, TCP_STATE_CLOSING);
 80035b4:	2109      	movs	r1, #9
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f001 fba4 	bl	8004d04 <tcpChangeState>
 80035bc:	e004      	b.n	80035c8 <tcpStateFinWait1+0x11a>
      return;
 80035be:	bf00      	nop
 80035c0:	e002      	b.n	80035c8 <tcpStateFinWait1+0x11a>
      return;
 80035c2:	bf00      	nop
 80035c4:	e000      	b.n	80035c8 <tcpStateFinWait1+0x11a>
      return;
 80035c6:	bf00      	nop
         }
      }
   }
}
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <tcpStateFinWait2>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait2(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af02      	add	r7, sp, #8
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-2 state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fc14 	bl	8003e0e <tcpCheckSequenceNumber>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d15b      	bne.n	80036a4 <tcpStateFinWait2+0xd6>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	7b5b      	ldrb	r3, [r3, #13]
 80035f0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <tcpStateFinWait2+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80035fe:	2100      	movs	r1, #0
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f001 fb7f 	bl	8004d04 <tcpChangeState>
      //Return immediately
      return;
 8003606:	e052      	b.n	80036ae <tcpStateFinWait2+0xe0>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fc8e 	bl	8003f2e <tcpCheckSyn>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d147      	bne.n	80036a8 <tcpStateFinWait2+0xda>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fcc0 	bl	8003fa2 <tcpCheckAck>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d141      	bne.n	80036ac <tcpStateFinWait2+0xde>
      return;
   //Process the segment text
   if(length > 0)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <tcpStateFinWait2+0x70>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fef1 	bl	8004420 <tcpProcessSegmentData>

   //Check the FIN bit
   if(segment->flags & TCP_FLAG_FIN)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	7b5b      	ldrb	r3, [r3, #13]
 8003642:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d02e      	beq.n	80036ae <tcpStateFinWait2+0xe0>
   {
      //The FIN can only be acknowledged if all the segment data
      //has been successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	440b      	add	r3, r1
 800365c:	429a      	cmp	r2, r3
 800365e:	d126      	bne.n	80036ae <tcpStateFinWait2+0xe0>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	679a      	str	r2, [r3, #120]	; 0x78
         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003672:	2300      	movs	r3, #0
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	2300      	movs	r3, #0
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	460b      	mov	r3, r1
 800367c:	2110      	movs	r1, #16
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f8c2 	bl	8003808 <tcpSendSegment>

         //Release previously allocated resources
         tcpDeleteControlBlock(socket);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 ff53 	bl	8004530 <tcpDeleteControlBlock>
         //Start the 2MSL timer
         tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003690:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003694:	4618      	mov	r0, r3
 8003696:	f001 fedb 	bl	8005450 <tcpTimerStart>
         //Switch to the TIME_WAIT state
         tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 800369a:	210a      	movs	r1, #10
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f001 fb31 	bl	8004d04 <tcpChangeState>
 80036a2:	e004      	b.n	80036ae <tcpStateFinWait2+0xe0>
      return;
 80036a4:	bf00      	nop
 80036a6:	e002      	b.n	80036ae <tcpStateFinWait2+0xe0>
      return;
 80036a8:	bf00      	nop
 80036aa:	e000      	b.n	80036ae <tcpStateFinWait2+0xe0>
      return;
 80036ac:	bf00      	nop
      }
   }
}
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <tcpStateClosing>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateClosing(Socket *socket, TcpHeader *segment, size_t length)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSING state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fba2 	bl	8003e0e <tcpCheckSequenceNumber>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d133      	bne.n	8003738 <tcpStateClosing+0x84>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	7b5b      	ldrb	r3, [r3, #13]
 80036d4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d004      	beq.n	80036ec <tcpStateClosing+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80036e2:	2100      	movs	r1, #0
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f001 fb0d 	bl	8004d04 <tcpChangeState>
      //Return immediately
      return;
 80036ea:	e02a      	b.n	8003742 <tcpStateClosing+0x8e>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fc1c 	bl	8003f2e <tcpCheckSyn>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11f      	bne.n	800373c <tcpStateClosing+0x88>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fc4e 	bl	8003fa2 <tcpCheckAck>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d119      	bne.n	8003740 <tcpStateClosing+0x8c>
      return;

   //If the ACK acknowledges our FIN then enter the TIME-WAIT
   //state, otherwise ignore the segment
   if(segment->ackNum == socket->sndNxt)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003714:	429a      	cmp	r2, r3
 8003716:	d114      	bne.n	8003742 <tcpStateClosing+0x8e>
   {
      //Release previously allocated resources
      tcpDeleteControlBlock(socket);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 ff09 	bl	8004530 <tcpDeleteControlBlock>
      //Start the 2MSL timer
      tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003724:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003728:	4618      	mov	r0, r3
 800372a:	f001 fe91 	bl	8005450 <tcpTimerStart>
      //Switch to the TIME-WAIT state
      tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 800372e:	210a      	movs	r1, #10
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f001 fae7 	bl	8004d04 <tcpChangeState>
 8003736:	e004      	b.n	8003742 <tcpStateClosing+0x8e>
      return;
 8003738:	bf00      	nop
 800373a:	e002      	b.n	8003742 <tcpStateClosing+0x8e>
      return;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <tcpStateClosing+0x8e>
      return;
 8003740:	bf00      	nop
   }
}
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <tcpStateTimeWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateTimeWait(Socket *socket, TcpHeader *segment, size_t length)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: TIME-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSequenceNumber(socket, segment, length))
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fb58 	bl	8003e0e <tcpCheckSequenceNumber>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d147      	bne.n	80037f4 <tcpStateTimeWait+0xac>
      return;

   //Check the RST bit
   if(segment->flags & TCP_FLAG_RST)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	7b5b      	ldrb	r3, [r3, #13]
 8003768:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <tcpStateTimeWait+0x4c>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003776:	2100      	movs	r1, #0
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f001 fac3 	bl	8004d04 <tcpChangeState>

      //Dispose the socket if the user does not have the ownership anymore
      if(!socket->ownedFlag)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	2b00      	cmp	r3, #0
 8003784:	d138      	bne.n	80037f8 <tcpStateTimeWait+0xb0>
      {
         //Delete the TCB
         tcpDeleteControlBlock(socket);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fed2 	bl	8004530 <tcpDeleteControlBlock>
         //Mark the socket as closed
         socket->type = SOCKET_TYPE_UNUSED;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	605a      	str	r2, [r3, #4]
      }

      //Return immediately
      return;
 8003792:	e031      	b.n	80037f8 <tcpStateTimeWait+0xb0>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fbc8 	bl	8003f2e <tcpCheckSyn>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d12b      	bne.n	80037fc <tcpStateTimeWait+0xb4>
      return;
   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	7b5b      	ldrb	r3, [r3, #13]
 80037a8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d024      	beq.n	8003800 <tcpStateTimeWait+0xb8>
      return;

   //The only thing that can arrive in this state is a retransmission
   //of the remote FIN. Acknowledge it and restart the 2 MSL timeout
   if(segment->flags & TCP_FLAG_FIN)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	7b5b      	ldrb	r3, [r3, #13]
 80037ba:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01c      	beq.n	8003802 <tcpStateTimeWait+0xba>
   {
      //Send an acknowledgment for the FIN
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80037d0:	2300      	movs	r3, #0
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	460b      	mov	r3, r1
 80037da:	2110      	movs	r1, #16
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f813 	bl	8003808 <tcpSendSegment>
      //Restart the 2MSL timer
      tcpTimerStart(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037e8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 fe2f 	bl	8005450 <tcpTimerStart>
 80037f2:	e006      	b.n	8003802 <tcpStateTimeWait+0xba>
      return;
 80037f4:	bf00      	nop
 80037f6:	e004      	b.n	8003802 <tcpStateTimeWait+0xba>
      return;
 80037f8:	bf00      	nop
 80037fa:	e002      	b.n	8003802 <tcpStateTimeWait+0xba>
      return;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <tcpStateTimeWait+0xba>
      return;
 8003800:	bf00      	nop
   }
}
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <tcpSendSegment>:
 * @return Error code
 **/

error_t tcpSendSegment(Socket *socket, uint8_t flags, uint32_t seqNum,
   uint32_t ackNum, size_t length, bool_t addToQueue)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b093      	sub	sp, #76	; 0x4c
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	460b      	mov	r3, r1
 8003816:	72fb      	strb	r3, [r7, #11]
   TcpHeader *segment;
   TcpQueueItem *queueItem;
   IpPseudoHeader pseudoHeader;

   //Maximum segment size
   uint16_t mss = HTONS(socket->rmss);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800381e:	ba5b      	rev16	r3, r3
 8003820:	b29b      	uxth	r3, r3
 8003822:	82fb      	strh	r3, [r7, #22]

   //Allocate a memory buffer to hold the TCP segment
   buffer = ipAllocBuffer(TCP_MAX_HEADER_LENGTH, &offset);
 8003824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003828:	4619      	mov	r1, r3
 800382a:	203c      	movs	r0, #60	; 0x3c
 800382c:	f7fe f864 	bl	80018f8 <ipAllocBuffer>
 8003830:	63b8      	str	r0, [r7, #56]	; 0x38
   //Failed to allocate memory?
   if(buffer == NULL)
 8003832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <tcpSendSegment+0x34>
      return ERROR_OUT_OF_MEMORY;
 8003838:	2364      	movs	r3, #100	; 0x64
 800383a:	e154      	b.n	8003ae6 <tcpSendSegment+0x2de>

   //Point to the beginning of the TCP segment
   segment = netBufferAt(buffer, offset);
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	4619      	mov	r1, r3
 8003840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003842:	f7fe fdb4 	bl	80023ae <netBufferAt>
 8003846:	6378      	str	r0, [r7, #52]	; 0x34

   //Format TCP header
   segment->srcPort = htons(socket->localPort);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8b1b      	ldrh	r3, [r3, #24]
 800384c:	4618      	mov	r0, r3
 800384e:	f7fc fea7 	bl	80005a0 <swapInt16>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003858:	801a      	strh	r2, [r3, #0]
   segment->destPort = htons(socket->remotePort);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fe9e 	bl	80005a0 <swapInt16>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386a:	805a      	strh	r2, [r3, #2]
   segment->seqNum = htonl(seqNum);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fc fea5 	bl	80005bc <swapInt32>
 8003872:	4602      	mov	r2, r0
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	605a      	str	r2, [r3, #4]
   segment->ackNum = (flags & TCP_FLAG_ACK) ? htonl(ackNum) : 0;
 8003878:	7afb      	ldrb	r3, [r7, #11]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <tcpSendSegment+0x84>
 8003882:	6838      	ldr	r0, [r7, #0]
 8003884:	f7fc fe9a 	bl	80005bc <swapInt32>
 8003888:	4602      	mov	r2, r0
 800388a:	e000      	b.n	800388e <tcpSendSegment+0x86>
 800388c:	2200      	movs	r2, #0
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	609a      	str	r2, [r3, #8]
   segment->reserved1 = 0;
 8003892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003894:	7b13      	ldrb	r3, [r2, #12]
 8003896:	f36f 0303 	bfc	r3, #0, #4
 800389a:	7313      	strb	r3, [r2, #12]
   segment->dataOffset = 5;
 800389c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389e:	7b13      	ldrb	r3, [r2, #12]
 80038a0:	2105      	movs	r1, #5
 80038a2:	f361 1307 	bfi	r3, r1, #4, #4
 80038a6:	7313      	strb	r3, [r2, #12]
   segment->flags = flags;
 80038a8:	7afb      	ldrb	r3, [r7, #11]
 80038aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ae:	b2d9      	uxtb	r1, r3
 80038b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b2:	7b53      	ldrb	r3, [r2, #13]
 80038b4:	f361 0305 	bfi	r3, r1, #0, #6
 80038b8:	7353      	strb	r3, [r2, #13]
   segment->reserved2 = 0;
 80038ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038bc:	7b53      	ldrb	r3, [r2, #13]
 80038be:	f36f 1387 	bfc	r3, #6, #2
 80038c2:	7353      	strb	r3, [r2, #13]
   segment->window = htons(socket->rcvWnd);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fe68 	bl	80005a0 <swapInt16>
 80038d0:	4603      	mov	r3, r0
 80038d2:	461a      	mov	r2, r3
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	81da      	strh	r2, [r3, #14]
   segment->checksum = 0;
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038da:	2200      	movs	r2, #0
 80038dc:	741a      	strb	r2, [r3, #16]
 80038de:	2200      	movs	r2, #0
 80038e0:	745a      	strb	r2, [r3, #17]
   segment->urgentPointer = 0;
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	2200      	movs	r2, #0
 80038e6:	749a      	strb	r2, [r3, #18]
 80038e8:	2200      	movs	r2, #0
 80038ea:	74da      	strb	r2, [r3, #19]

   //SYN flag set?
   if(flags & TCP_FLAG_SYN)
 80038ec:	7afb      	ldrb	r3, [r7, #11]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d006      	beq.n	8003904 <tcpSendSegment+0xfc>
   {
      //Append MSS option
      tcpAddOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE, &mss, sizeof(mss));
 80038f6:	f107 0216 	add.w	r2, r7, #22
 80038fa:	2302      	movs	r3, #2
 80038fc:	2102      	movs	r1, #2
 80038fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003900:	f000 f9ce 	bl	8003ca0 <tcpAddOption>
      tcpAddOption(segment, TCP_OPTION_SACK_PERMITTED, NULL, 0);
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + segment->dataOffset * 4);
 8003904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003906:	7b1b      	ldrb	r3, [r3, #12]
 8003908:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800390c:	b2db      	uxtb	r3, r3
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	461a      	mov	r2, r3
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	4413      	add	r3, r2
 8003916:	4619      	mov	r1, r3
 8003918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800391a:	f7fe fca2 	bl	8002262 <netBufferSetLength>

   //Any data to send?
   if(length > 0)
 800391e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00f      	beq.n	8003944 <tcpSendSegment+0x13c>
   {
      //Copy data
      error = tcpReadTxBuffer(socket, seqNum, buffer, length);
 8003924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f001 fb42 	bl	8004fb4 <tcpReadTxBuffer>
 8003930:	4603      	mov	r3, r0
 8003932:	867b      	strh	r3, [r7, #50]	; 0x32
      //Any error to report?
      if(error)
 8003934:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d004      	beq.n	8003944 <tcpSendSegment+0x13c>
      {
         //Clean up side effects
         netBufferFree(buffer);
 800393a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800393c:	f7fe fc60 	bl	8002200 <netBufferFree>
         //Exit immediately
         return error;
 8003940:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003942:	e0d0      	b.n	8003ae6 <tcpSendSegment+0x2de>
      }
   }

   //Calculate the length of the complete TCP segment
   totalLength = segment->dataOffset * 4 + length;
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	7b1b      	ldrb	r3, [r3, #12]
 8003948:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800394c:	b2db      	uxtb	r3, r3
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	461a      	mov	r2, r3
 8003952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003954:	4413      	add	r3, r2
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(socket->remoteIpAddr.length == sizeof(Ipv4Addr))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d128      	bne.n	80039b2 <tcpSendSegment+0x1aa>
   {
      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8003960:	230c      	movs	r3, #12
 8003962:	61bb      	str	r3, [r7, #24]
      pseudoHeader.ipv4Data.srcAddr = socket->localIpAddr.ipv4Addr;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	61fb      	str	r3, [r7, #28]
      pseudoHeader.ipv4Data.destAddr = socket->remoteIpAddr.ipv4Addr;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	623b      	str	r3, [r7, #32]
      pseudoHeader.ipv4Data.reserved = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 8003976:	2306      	movs	r3, #6
 8003978:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      pseudoHeader.ipv4Data.length = htons(totalLength);
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	b29b      	uxth	r3, r3
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fe0d 	bl	80005a0 <swapInt16>
 8003986:	4603      	mov	r3, r0
 8003988:	84fb      	strh	r3, [r7, #38]	; 0x26

      //Calculate TCP header checksum
      segment->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 800398a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800398c:	f107 0318 	add.w	r3, r7, #24
 8003990:	1d18      	adds	r0, r3, #4
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800399a:	210c      	movs	r1, #12
 800399c:	f7fd ff83 	bl	80018a6 <ipCalcUpperLayerChecksumEx>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a6:	821a      	strh	r2, [r3, #16]
      //This should never occur...
      return ERROR_INVALID_ADDRESS;
   }

   //Add current segment to retransmission queue?
   if(addToQueue)
 80039a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8082 	beq.w	8003ab4 <tcpSendSegment+0x2ac>
 80039b0:	e004      	b.n	80039bc <tcpSendSegment+0x1b4>
      netBufferFree(buffer);
 80039b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039b4:	f7fe fc24 	bl	8002200 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 80039b8:	23e4      	movs	r3, #228	; 0xe4
 80039ba:	e094      	b.n	8003ae6 <tcpSendSegment+0x2de>
   {
      //Empty retransmission queue?
      if(!socket->retransmitQueue)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <tcpSendSegment+0x1d0>
      {
         //Create a new item
         queueItem = memPoolAlloc(sizeof(TcpQueueItem));
 80039c6:	2058      	movs	r0, #88	; 0x58
 80039c8:	f7fe fbba 	bl	8002140 <memPoolAlloc>
 80039cc:	63f8      	str	r0, [r7, #60]	; 0x3c
         //Add the newly created item to the queue
         socket->retransmitQueue = queueItem;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039d2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 80039d6:	e014      	b.n	8003a02 <tcpSendSegment+0x1fa>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->retransmitQueue;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
         //Reach the last item of the retransmission queue
         while(queueItem->next) queueItem = queueItem->next;
 80039e0:	e002      	b.n	80039e8 <tcpSendSegment+0x1e0>
 80039e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f8      	bne.n	80039e2 <tcpSendSegment+0x1da>
         //Create a new item
         queueItem->next = memPoolAlloc(sizeof(TcpQueueItem));
 80039f0:	2058      	movs	r0, #88	; 0x58
 80039f2:	f7fe fba5 	bl	8002140 <memPoolAlloc>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 80039fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 8003a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <tcpSendSegment+0x20a>
      {
         //Free previously allocated memory
         netBufferFree(buffer);
 8003a08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a0a:	f7fe fbf9 	bl	8002200 <netBufferFree>
         //Return status
         return ERROR_OUT_OF_MEMORY;
 8003a0e:	2364      	movs	r3, #100	; 0x64
 8003a10:	e069      	b.n	8003ae6 <tcpSendSegment+0x2de>
      }

      //Retransmission mechanism requires additional information
      queueItem->next = NULL;
 8003a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
      queueItem->length = length;
 8003a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a1c:	605a      	str	r2, [r3, #4]
      queueItem->sacked = FALSE;
 8003a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
      //Save TCP header
      memcpy(queueItem->header, segment, segment->dataOffset * 4);
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	f103 001c 	add.w	r0, r3, #28
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2c:	7b1b      	ldrb	r3, [r3, #12]
 8003a2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	461a      	mov	r2, r3
 8003a38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a3a:	f014 fc25 	bl	8018288 <memcpy>
      //Save pseudo header
      queueItem->pseudoHeader = pseudoHeader;
 8003a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a40:	f103 040c 	add.w	r4, r3, #12
 8003a44:	f107 0318 	add.w	r3, r7, #24
 8003a48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

      //Take one RTT measurement at a time
      if(!socket->rttBusy)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d116      	bne.n	8003a86 <tcpSendSegment+0x27e>
      {
         //Save round-trip start time
         socket->rttStartTime = osGetSystemTime();
 8003a58:	f7fc fea1 	bl	800079e <osGetSystemTime>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         //Record current sequence number
         socket->rttSeqNum = ntohl(segment->seqNum);
 8003a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fc fda7 	bl	80005bc <swapInt32>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
         //Wait for an acknowledgment that covers that sequence number...
         socket->rttBusy = TRUE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
         //Reset the byte counter
         socket->n = 0;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
      }

      //Check whether the RTO timer is already running
      if(!tcpTimerRunning(&socket->retransmitTimer))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fd00 	bl	8005492 <tcpTimerRunning>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <tcpSendSegment+0x2ac>
      {
         //If the timer is not running, start it running so that
         //it will expire after RTO seconds
         tcpTimerStart(&socket->retransmitTimer, socket->rto);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f001 fcd2 	bl	8005450 <tcpTimerStart>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   //Debug message
   TRACE_DEBUG("%s: Sending TCP segment (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment, length, socket->iss, socket->irs);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003abe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ac0:	f001 fb17 	bl	80050f2 <tcpDumpHeader>

   //Send TCP segment
   error = ipSendDatagram(socket->interface, &pseudoHeader, buffer, offset, 0);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68d8      	ldr	r0, [r3, #12]
 8003ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aca:	f107 0118 	add.w	r1, r7, #24
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ad6:	f7fd fdbf 	bl	8001658 <ipSendDatagram>
 8003ada:	4603      	mov	r3, r0
 8003adc:	867b      	strh	r3, [r7, #50]	; 0x32

   //Free previously allocated memory
   netBufferFree(buffer);
 8003ade:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ae0:	f7fe fb8e 	bl	8002200 <netBufferFree>
   //Return error code
   return error;
 8003ae4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3744      	adds	r7, #68	; 0x44
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd90      	pop	{r4, r7, pc}

08003aee <tcpSendResetSegment>:
 * @return Error code
 **/

error_t tcpSendResetSegment(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b092      	sub	sp, #72	; 0x48
 8003af2:	af02      	add	r7, sp, #8
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
   NetBuffer *buffer;
   TcpHeader *segment2;
   IpPseudoHeader pseudoHeader2;

   //Check whether the ACK bit is set
   if(segment->flags & TCP_FLAG_ACK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7b5b      	ldrb	r3, [r3, #13]
 8003b00:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <tcpSendResetSegment+0x32>
   {
      //If the incoming segment has an ACK field, the reset takes
      //its sequence number from the ACK field of the segment
      flags = TCP_FLAG_RST;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      seqNum = segment->ackNum;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	63bb      	str	r3, [r7, #56]	; 0x38
      ackNum = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1e:	e021      	b.n	8003b64 <tcpSendResetSegment+0x76>
   }
   else
   {
      //Otherwise the reset has sequence number zero and the ACK field is set to
      //the sum of the sequence number and segment length of the incoming segment
      flags = TCP_FLAG_RST | TCP_FLAG_ACK;
 8003b20:	2314      	movs	r3, #20
 8003b22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      seqNum = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
      ackNum = segment->seqNum + length;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	4413      	add	r3, r2
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34

      //Advance the acknowledgment number over the SYN or the FIN
      if(segment->flags & TCP_FLAG_SYN)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7b5b      	ldrb	r3, [r3, #13]
 8003b38:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <tcpSendResetSegment+0x5e>
         ackNum++;
 8003b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b48:	3301      	adds	r3, #1
 8003b4a:	637b      	str	r3, [r7, #52]	; 0x34
      if(segment->flags & TCP_FLAG_FIN)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7b5b      	ldrb	r3, [r3, #13]
 8003b50:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <tcpSendResetSegment+0x76>
         ackNum++;
 8003b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b60:	3301      	adds	r3, #1
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
   }

   //Allocate a memory buffer to hold the reset segment
   buffer = ipAllocBuffer(sizeof(TcpHeader), &offset);
 8003b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b68:	4619      	mov	r1, r3
 8003b6a:	2014      	movs	r0, #20
 8003b6c:	f7fd fec4 	bl	80018f8 <ipAllocBuffer>
 8003b70:	6338      	str	r0, [r7, #48]	; 0x30
   //Failed to allocate memory?
   if(buffer == NULL)
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <tcpSendResetSegment+0x8e>
      return ERROR_OUT_OF_MEMORY;
 8003b78:	2364      	movs	r3, #100	; 0x64
 8003b7a:	e08d      	b.n	8003c98 <tcpSendResetSegment+0x1aa>

   //Point to the beginning of the TCP segment
   segment2 = netBufferAt(buffer, offset);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b82:	f7fe fc14 	bl	80023ae <netBufferAt>
 8003b86:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Format TCP header
   segment2->srcPort = htons(segment->destPort);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	885b      	ldrh	r3, [r3, #2]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fd06 	bl	80005a0 <swapInt16>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	801a      	strh	r2, [r3, #0]
   segment2->destPort = htons(segment->srcPort);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fc fcfc 	bl	80005a0 <swapInt16>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	805a      	strh	r2, [r3, #2]
   segment2->seqNum = htonl(seqNum);
 8003bb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bb2:	f7fc fd03 	bl	80005bc <swapInt32>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bba:	605a      	str	r2, [r3, #4]
   segment2->ackNum = htonl(ackNum);
 8003bbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bbe:	f7fc fcfd 	bl	80005bc <swapInt32>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	609a      	str	r2, [r3, #8]
   segment2->reserved1 = 0;
 8003bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bca:	7b13      	ldrb	r3, [r2, #12]
 8003bcc:	f36f 0303 	bfc	r3, #0, #4
 8003bd0:	7313      	strb	r3, [r2, #12]
   segment2->dataOffset = 5;
 8003bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd4:	7b13      	ldrb	r3, [r2, #12]
 8003bd6:	2105      	movs	r1, #5
 8003bd8:	f361 1307 	bfi	r3, r1, #4, #4
 8003bdc:	7313      	strb	r3, [r2, #12]
   segment2->flags = flags;
 8003bde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be6:	b2d9      	uxtb	r1, r3
 8003be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bea:	7b53      	ldrb	r3, [r2, #13]
 8003bec:	f361 0305 	bfi	r3, r1, #0, #6
 8003bf0:	7353      	strb	r3, [r2, #13]
   segment2->reserved2 = 0;
 8003bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf4:	7b53      	ldrb	r3, [r2, #13]
 8003bf6:	f36f 1387 	bfc	r3, #6, #2
 8003bfa:	7353      	strb	r3, [r2, #13]
   segment2->window = 0;
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	2200      	movs	r2, #0
 8003c00:	739a      	strb	r2, [r3, #14]
 8003c02:	2200      	movs	r2, #0
 8003c04:	73da      	strb	r2, [r3, #15]
   segment2->checksum = 0;
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	2200      	movs	r2, #0
 8003c0a:	741a      	strb	r2, [r3, #16]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	745a      	strb	r2, [r3, #17]
   segment2->urgentPointer = 0;
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	2200      	movs	r2, #0
 8003c14:	749a      	strb	r2, [r3, #18]
 8003c16:	2200      	movs	r2, #0
 8003c18:	74da      	strb	r2, [r3, #19]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b0c      	cmp	r3, #12
 8003c20:	d136      	bne.n	8003c90 <tcpSendResetSegment+0x1a2>
   {
      //Format IPv4 pseudo header
      pseudoHeader2.length = sizeof(Ipv4PseudoHeader);
 8003c22:	230c      	movs	r3, #12
 8003c24:	617b      	str	r3, [r7, #20]
      pseudoHeader2.ipv4Data.srcAddr = pseudoHeader->ipv4Data.destAddr;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
      pseudoHeader2.ipv4Data.destAddr = pseudoHeader->ipv4Data.srcAddr;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	61fb      	str	r3, [r7, #28]
      pseudoHeader2.ipv4Data.reserved = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 3020 	strb.w	r3, [r7, #32]
      pseudoHeader2.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 8003c38:	2306      	movs	r3, #6
 8003c3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      pseudoHeader2.ipv4Data.length = HTONS(sizeof(TcpHeader));
 8003c3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c42:	847b      	strh	r3, [r7, #34]	; 0x22

      //Calculate TCP header checksum
      segment2->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader2.ipv4Data,
 8003c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	1d18      	adds	r0, r3, #4
 8003c4c:	2314      	movs	r3, #20
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c54:	210c      	movs	r1, #12
 8003c56:	f7fd fe26 	bl	80018a6 <ipCalcUpperLayerChecksumEx>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	821a      	strh	r2, [r3, #16]

   //Debug message
   TRACE_DEBUG("%s: Sending TCP reset segment...\r\n",
      formatSystemTime(osGetSystemTime(), NULL));
   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment2, length, 0, 0);
 8003c62:	2300      	movs	r3, #0
 8003c64:	2200      	movs	r2, #0
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c6a:	f001 fa42 	bl	80050f2 <tcpDumpHeader>

   //Send TCP segment
   error = ipSendDatagram(interface, &pseudoHeader2, buffer, offset, 0);
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c70:	f107 0114 	add.w	r1, r7, #20
 8003c74:	2300      	movs	r3, #0
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7fd fceb 	bl	8001658 <ipSendDatagram>
 8003c82:	4603      	mov	r3, r0
 8003c84:	857b      	strh	r3, [r7, #42]	; 0x2a

   //Free previously allocated memory
   netBufferFree(buffer);
 8003c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c88:	f7fe faba 	bl	8002200 <netBufferFree>
   //Return error code
   return error;
 8003c8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c8e:	e003      	b.n	8003c98 <tcpSendResetSegment+0x1aa>
      netBufferFree(buffer);
 8003c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c92:	f7fe fab5 	bl	8002200 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 8003c96:	23e4      	movs	r3, #228	; 0xe4
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3740      	adds	r7, #64	; 0x40
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <tcpAddOption>:
 * @return Error code
 **/

error_t tcpAddOption(TcpHeader *segment, uint8_t kind, const void *value,
   uint8_t length)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	461a      	mov	r2, r3
 8003cac:	460b      	mov	r3, r1
 8003cae:	72fb      	strb	r3, [r7, #11]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	72bb      	strb	r3, [r7, #10]
   uint_t i;
   size_t paddingSize;
   TcpOption *option;

   //Length of the complete option field
   length += sizeof(TcpOption);
 8003cb4:	7abb      	ldrb	r3, [r7, #10]
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	72bb      	strb	r3, [r7, #10]

   //Make sure there is enough space to add the specified option
   if((segment->dataOffset * 4 + length) > TCP_MAX_HEADER_LENGTH)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	7b1b      	ldrb	r3, [r3, #12]
 8003cbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	009a      	lsls	r2, r3, #2
 8003cc6:	7abb      	ldrb	r3, [r7, #10]
 8003cc8:	4413      	add	r3, r2
 8003cca:	2b3c      	cmp	r3, #60	; 0x3c
 8003ccc:	dd01      	ble.n	8003cd2 <tcpAddOption+0x32>
      return ERROR_FAILURE;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e046      	b.n	8003d60 <tcpAddOption+0xc0>

   //Index of the first available byte
   i = segment->dataOffset * 4 - sizeof(TcpHeader);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	7b1b      	ldrb	r3, [r3, #12]
 8003cd6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	3b14      	subs	r3, #20
 8003ce0:	61fb      	str	r3, [r7, #28]

   //Calculate the number of padding bytes
   paddingSize = (length % 4) ? 4 - (length % 4) : 0;
 8003ce2:	7abb      	ldrb	r3, [r7, #10]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <tcpAddOption+0x5a>
 8003cee:	7abb      	ldrb	r3, [r7, #10]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	f1c3 0304 	rsb	r3, r3, #4
 8003cf8:	e000      	b.n	8003cfc <tcpAddOption+0x5c>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
   //Write padding bytes
   while(paddingSize--)
 8003cfe:	e006      	b.n	8003d0e <tcpAddOption+0x6e>
      segment->options[i++] = TCP_OPTION_NOP;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	61fa      	str	r2, [r7, #28]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	751a      	strb	r2, [r3, #20]
   while(paddingSize--)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	1e5a      	subs	r2, r3, #1
 8003d12:	61ba      	str	r2, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f3      	bne.n	8003d00 <tcpAddOption+0x60>

   //Point to the current location
   option = (TcpOption *) (segment->options + i);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f103 0214 	add.w	r2, r3, #20
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
   //Write specified option
   option->kind = kind;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	7afa      	ldrb	r2, [r7, #11]
 8003d28:	701a      	strb	r2, [r3, #0]
   option->length = length;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	7aba      	ldrb	r2, [r7, #10]
 8003d2e:	705a      	strb	r2, [r3, #1]
   memcpy(option->value, value, length - sizeof(TcpOption));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	1c98      	adds	r0, r3, #2
 8003d34:	7abb      	ldrb	r3, [r7, #10]
 8003d36:	3b02      	subs	r3, #2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	f014 faa4 	bl	8018288 <memcpy>
   //Adjust index value
   i += length;
 8003d40:	7abb      	ldrb	r3, [r7, #10]
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	61fb      	str	r3, [r7, #28]

   //Update TCP header length
   segment->dataOffset = (sizeof(TcpHeader) + i) / 4;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3314      	adds	r3, #20
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	b2d9      	uxtb	r1, r3
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	7b13      	ldrb	r3, [r2, #12]
 8003d58:	f361 1307 	bfi	r3, r1, #4, #4
 8003d5c:	7313      	strb	r3, [r2, #12]

   //Option successfully added
   return NO_ERROR;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <tcpGetOption>:
 * @return If the specified option is found, a pointer to the corresponding
 *   option is returned. Otherwise NULL pointer is returned
 **/

TcpOption *tcpGetOption(TcpHeader *segment, uint8_t kind)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]
   size_t length;
   uint_t i;
   TcpOption *option;

   //Make sure the TCP header is valid
   if(segment->dataOffset < 5)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7b1b      	ldrb	r3, [r3, #12]
 8003d78:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d801      	bhi.n	8003d86 <tcpGetOption+0x1e>
      return NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e03d      	b.n	8003e02 <tcpGetOption+0x9a>

   //Compute the length of the options field
   length = segment->dataOffset * 4 - sizeof(TcpHeader);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	7b1b      	ldrb	r3, [r3, #12]
 8003d8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	3b14      	subs	r3, #20
 8003d94:	613b      	str	r3, [r7, #16]

   //Point to the very first option
   i = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

   //Parse TCP options
   while(i < length)
 8003d9a:	e02b      	b.n	8003df4 <tcpGetOption+0x8c>
   {
      //Point to the current option
      option = (TcpOption *) (segment->options + i);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f103 0214 	add.w	r2, r3, #20
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4413      	add	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

      //NOP option detected?
      if(option->kind == TCP_OPTION_NOP)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d103      	bne.n	8003db8 <tcpGetOption+0x50>
      {
         i++;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3301      	adds	r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
         continue;
 8003db6:	e01d      	b.n	8003df4 <tcpGetOption+0x8c>
      }
      //END option detected?
      if(option->kind == TCP_OPTION_END)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01e      	beq.n	8003dfe <tcpGetOption+0x96>
         break;
      //Check option length
      if((i + 1) >= length || (i + option->length) > length)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d91a      	bls.n	8003e00 <tcpGetOption+0x98>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d312      	bcc.n	8003e00 <tcpGetOption+0x98>
         break;

      //Current option kind match the specified one?
      if(option->kind == kind)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d101      	bne.n	8003de8 <tcpGetOption+0x80>
         return option;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	e00c      	b.n	8003e02 <tcpGetOption+0x9a>

      //Jump to next the next option
      i += option->length;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	461a      	mov	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4413      	add	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
   while(i < length)
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d3cf      	bcc.n	8003d9c <tcpGetOption+0x34>
 8003dfc:	e000      	b.n	8003e00 <tcpGetOption+0x98>
         break;
 8003dfe:	bf00      	nop
   }

   //Specified option code not found
   return NULL;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <tcpCheckSequenceNumber>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the incoming segment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckSequenceNumber(Socket *socket, TcpHeader *segment, size_t length)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b088      	sub	sp, #32
 8003e12:	af02      	add	r7, sp, #8
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
   //Acceptability test for an incoming segment
   bool_t acceptable = FALSE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]

   //Case where both segment length and receive window are zero
   if(!length && !socket->rcvWnd)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10d      	bne.n	8003e40 <tcpCheckSequenceNumber+0x32>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d108      	bne.n	8003e40 <tcpCheckSequenceNumber+0x32>
   {
      //Make sure that SEG.SEQ = RCV.NXT
      if(segment->seqNum == socket->rcvNxt)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d159      	bne.n	8003eee <tcpCheckSequenceNumber+0xe0>
      {
         acceptable = TRUE;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
      if(segment->seqNum == socket->rcvNxt)
 8003e3e:	e056      	b.n	8003eee <tcpCheckSequenceNumber+0xe0>
      }
   }
   //Case where segment length is zero and receive window is non zero
   else if(!length && socket->rcvWnd)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <tcpCheckSequenceNumber+0x6c>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d014      	beq.n	8003e7a <tcpCheckSequenceNumber+0x6c>
   {
      //Make sure that RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	db46      	blt.n	8003eec <tcpCheckSequenceNumber+0xde>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 8003e6c:	440b      	add	r3, r1
 8003e6e:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da3b      	bge.n	8003eec <tcpCheckSequenceNumber+0xde>
      {
         acceptable = TRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	617b      	str	r3, [r7, #20]
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8003e78:	e038      	b.n	8003eec <tcpCheckSequenceNumber+0xde>
      }
   }
   //Case where both segment length and receive window are non zero
   else if(length && socket->rcvWnd)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d036      	beq.n	8003eee <tcpCheckSequenceNumber+0xe0>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d031      	beq.n	8003eee <tcpCheckSequenceNumber+0xe0>
   {
      //Check whether RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	db0d      	blt.n	8003eb4 <tcpCheckSequenceNumber+0xa6>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 8003ea6:	440b      	add	r3, r1
 8003ea8:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da02      	bge.n	8003eb4 <tcpCheckSequenceNumber+0xa6>
      {
         acceptable = TRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e01c      	b.n	8003eee <tcpCheckSequenceNumber+0xe0>
      }
      //or RCV.NXT <= SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	441a      	add	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	db11      	blt.n	8003eee <tcpCheckSequenceNumber+0xe0>
         TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt + socket->rcvWnd) < 0)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	441a      	add	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 8003edc:	440b      	add	r3, r1
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	3b01      	subs	r3, #1
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	da03      	bge.n	8003eee <tcpCheckSequenceNumber+0xe0>
      {
         acceptable = TRUE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e000      	b.n	8003eee <tcpCheckSequenceNumber+0xe0>
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8003eec:	bf00      	nop
      }
   }

   //Non acceptable sequence number?
   if(!acceptable)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d117      	bne.n	8003f24 <tcpCheckSequenceNumber+0x116>
      //Debug message
      TRACE_WARNING("Sequence number is not acceptable!\r\n");

      //If an incoming segment is not acceptable, an acknowledgment
      //should be sent in reply (unless the RST bit is set)
      if(!(segment->flags & TCP_FLAG_RST))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	7b5b      	ldrb	r3, [r3, #13]
 8003ef8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10c      	bne.n	8003f20 <tcpCheckSequenceNumber+0x112>
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	2300      	movs	r3, #0
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	460b      	mov	r3, r1
 8003f18:	2110      	movs	r1, #16
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff fc74 	bl	8003808 <tcpSendSegment>

      //Return status code
      return ERROR_FAILURE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <tcpCheckSequenceNumber+0x118>
   }

   //Sequence number is acceptable
   return NO_ERROR;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <tcpCheckSyn>:
 * @param[in] length Length of the segment data
 * @return ERROR_FAILURE if the SYN is in the window, NO_ERROR otherwise
 **/

error_t tcpCheckSyn(Socket *socket, TcpHeader *segment, size_t length)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af02      	add	r7, sp, #8
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
   //Check the SYN bit
   if(segment->flags & TCP_FLAG_SYN)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	7b5b      	ldrb	r3, [r3, #13]
 8003f3e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d025      	beq.n	8003f98 <tcpCheckSyn+0x6a>
   {
      //If this step is reached, the SYN is in the window. It is an error
      //and a reset shall be sent in response
      if(segment->flags & TCP_FLAG_ACK)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	7b5b      	ldrb	r3, [r3, #13]
 8003f50:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <tcpCheckSyn+0x48>
      {
         tcpSendSegment(socket, TCP_FLAG_RST, segment->ackNum, 0, 0, FALSE);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	2300      	movs	r3, #0
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	2300      	movs	r3, #0
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff fc4a 	bl	8003808 <tcpSendSegment>
 8003f74:	e00e      	b.n	8003f94 <tcpCheckSyn+0x66>
      }
      else
      {
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
            segment->seqNum + length + 1, 0, FALSE);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	2300      	movs	r3, #0
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	2300      	movs	r3, #0
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2114      	movs	r1, #20
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff fc3a 	bl	8003808 <tcpSendSegment>
      }

      //Return immediately
      return ERROR_FAILURE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <tcpCheckSyn+0x6c>
   }

   //No error to report
   return NO_ERROR;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <tcpCheckAck>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the acknowledgment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b08c      	sub	sp, #48	; 0x30
 8003fa6:	af02      	add	r7, sp, #8
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
   uint_t thresh;
   bool_t duplicateFlag;
   bool_t updateFlag;

   //If the ACK bit is off drop the segment and return
   if(!(segment->flags & TCP_FLAG_ACK))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	7b5b      	ldrb	r3, [r3, #13]
 8003fb2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <tcpCheckAck+0x22>
      return ERROR_FAILURE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e122      	b.n	800420a <tcpCheckAck+0x268>

   //Test the case where SEG.ACK < SND.UNA
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) < 0)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da01      	bge.n	8003fd6 <tcpCheckAck+0x34>
   {
      //An old duplicate ACK has been received
      return NO_ERROR;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e119      	b.n	800420a <tcpCheckAck+0x268>
   }
   //Test the case where SEG.ACK > SND.NXT
   else if(TCP_CMP_SEQ(segment->ackNum, socket->sndNxt) > 0)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dd0e      	ble.n	8004002 <tcpCheckAck+0x60>
   {
      //Send an ACK segment indicating the current send sequence number
      //and the acknowledgment number expected to be received
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003fec:	2300      	movs	r3, #0
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff fc05 	bl	8003808 <tcpSendSegment>

      //The ACK segment acknowledges something not yet sent
      return ERROR_FAILURE;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e103      	b.n	800420a <tcpCheckAck+0x268>
   }

   //Check whether the ACK is a duplicate
   duplicateFlag = tcpIsDuplicateAck(socket, segment, length);
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68b9      	ldr	r1, [r7, #8]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f93e 	bl	8004288 <tcpIsDuplicateAck>
 800400c:	61f8      	str	r0, [r7, #28]

   //The send window should be updated
   tcpUpdateSendWindow(socket, segment);
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fbeb 	bl	80047ec <tcpUpdateSendWindow>

   //The incoming ACK segment acknowledges new data?
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) > 0)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	dd77      	ble.n	8004114 <tcpCheckAck+0x172>
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Compute the number of bytes acknowledged by the incoming ACK
      n = segment->ackNum - socket->sndUna;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	627b      	str	r3, [r7, #36]	; 0x24

      //Check whether the ACK segment acknowledges our SYN
      if(socket->sndUna == socket->iss)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	429a      	cmp	r2, r3
 800403a:	d102      	bne.n	8004042 <tcpCheckAck+0xa0>
         n--;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	3b01      	subs	r3, #1
 8004040:	627b      	str	r3, [r7, #36]	; 0x24

      //Total number of bytes acknowledged during the whole round-trip
      socket->n += n;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	441a      	add	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
      //Update SND.UNA pointer
      socket->sndUna = segment->ackNum;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	661a      	str	r2, [r3, #96]	; 0x60

      //Compute retransmission timeout
      updateFlag = tcpComputeRto(socket);
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fc46 	bl	80048ec <tcpComputeRto>
 8004060:	6178      	str	r0, [r7, #20]

      //Any segments on the retransmission queue which are thereby
      //entirely acknowledged are removed
      tcpUpdateRetransmitQueue(socket);
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fa7f 	bl	8004566 <tcpUpdateRetransmitQueue>

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <tcpCheckAck+0xdc>
      {
         //Invoke fast recovery (refer to RFC 6582)
         tcpFastRecovery(socket, segment, n);
 8004072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f96e 	bl	8004358 <tcpFastRecovery>
 800407c:	e03c      	b.n	80040f8 <tcpCheckAck+0x156>
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

         //Check congestion state
         if(socket->congestState == TCP_CONGEST_STATE_LOSS_RECOVERY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800408c:	2b02      	cmp	r3, #2
 800408e:	d103      	bne.n	8004098 <tcpCheckAck+0xf6>
         {
            //Invoke fast loss recovery
            tcpFastLossRecovery(socket, segment);
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f9a7 	bl	80043e6 <tcpFastLossRecovery>
         }

         //Slow start algorithm is used when cwnd is lower than ssthresh
         if(socket->cwnd < socket->ssthresh)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d211      	bcs.n	80040cc <tcpCheckAck+0x12a>
         {
            //During slow start, TCP increments cwnd by at most SMSS bytes
            //for each ACK received that cumulatively acknowledges new data
            socket->cwnd += MIN(n, socket->smss);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80040b4:	4619      	mov	r1, r3
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	428b      	cmp	r3, r1
 80040ba:	bf28      	it	cs
 80040bc:	460b      	movcs	r3, r1
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80040ca:	e015      	b.n	80040f8 <tcpCheckAck+0x156>
         }
         //Congestion avoidance algorithm is used when cwnd exceeds ssthres
         else
         {
            //Congestion window is updated once per RTT
            if(updateFlag)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d012      	beq.n	80040f8 <tcpCheckAck+0x156>
            {
               //TCP must not increment cwnd by more than SMSS bytes
               socket->cwnd += MIN(socket->n, socket->smss);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80040de:	4619      	mov	r1, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040e6:	428b      	cmp	r3, r1
 80040e8:	bf28      	it	cs
 80040ea:	460b      	movcs	r3, r1
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
            }
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	f8b2 209a 	ldrh.w	r2, [r2, #154]	; 0x9a
 8004104:	4293      	cmp	r3, r2
 8004106:	bf28      	it	cs
 8004108:	4613      	movcs	r3, r2
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8004112:	e076      	b.n	8004202 <tcpCheckAck+0x260>
   //The incoming ACK segment does not acknowledge new data?
   else
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check whether the acknowledgment is a duplicate
      if(duplicateFlag)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <tcpCheckAck+0x188>
      {
         //Increment duplicate ACK counter
         socket->dupAckCount++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004128:	e003      	b.n	8004132 <tcpCheckAck+0x190>
         TRACE_INFO("TCP duplicate ACK #%u\r\n", socket->dupAckCount);
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      }

      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_IDLE)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004138:	2b00      	cmp	r3, #0
 800413a:	d142      	bne.n	80041c2 <tcpCheckAck+0x220>
      {
         //Use default duplicate ACK threshold
         thresh = TCP_FAST_RETRANSMIT_THRES;
 800413c:	2303      	movs	r3, #3
 800413e:	623b      	str	r3, [r7, #32]
         //Amount of data sent but not yet acknowledged
         ownd = socket->sndNxt - socket->sndUna;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	61bb      	str	r3, [r7, #24]

         //Test if there is either no unsent data ready for transmission at
         //the sender, or the advertised receive window does not permit new
         //segments to be transmitted (refer to RFC 5827 section 3.1)
         if(socket->sndUser == 0 || socket->sndWnd <= (socket->sndNxt - socket->sndUna))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <tcpCheckAck+0x1ca>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800415c:	4619      	mov	r1, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	4299      	cmp	r1, r3
 800416a:	d817      	bhi.n	800419c <tcpCheckAck+0x1fa>
         {
            //Compute the duplicate ACK threshold used to trigger a
            //retransmission
            if(ownd <= (3 * socket->smss))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004172:	461a      	mov	r2, r3
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	461a      	mov	r2, r3
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	4293      	cmp	r3, r2
 8004180:	d802      	bhi.n	8004188 <tcpCheckAck+0x1e6>
               thresh = 1;
 8004182:	2301      	movs	r3, #1
 8004184:	623b      	str	r3, [r7, #32]
 8004186:	e009      	b.n	800419c <tcpCheckAck+0x1fa>
            else if(ownd <= (4 * socket->smss))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	461a      	mov	r2, r3
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	4293      	cmp	r3, r2
 8004196:	d801      	bhi.n	800419c <tcpCheckAck+0x1fa>
               thresh = 2;
 8004198:	2302      	movs	r3, #2
 800419a:	623b      	str	r3, [r7, #32]
         }

         //Check the number of duplicate ACKs that have been received
         if(socket->dupAckCount >= thresh)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041a2:	6a3a      	ldr	r2, [r7, #32]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d81f      	bhi.n	80041e8 <tcpCheckAck+0x246>
         {
            //The TCP sender first checks the value of recover to see if the
            //cumulative acknowledgment field covers more than recover
            if(TCP_CMP_SEQ(segment->ackNum, socket->recover + 1) > 0)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	dd16      	ble.n	80041e8 <tcpCheckAck+0x246>
            {
               //Invoke Fast Retransmit (refer to RFC 6582)
               tcpFastRetransmit(socket);
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f894 	bl	80042e8 <tcpFastRetransmit>
 80041c0:	e012      	b.n	80041e8 <tcpCheckAck+0x246>
               //If not, the TCP does not enter fast retransmit and does not
               //reset ssthres...
            }
         }
      }
      else if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d10d      	bne.n	80041e8 <tcpCheckAck+0x246>
      {
         //Duplicate ACK received?
         if(duplicateFlag)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <tcpCheckAck+0x246>
         {
            //For each additional duplicate ACK received (after the third),
            //cwnd must be incremented by SMSS. This artificially inflates
            //the congestion window in order to reflect the additional
            //segment that has left the network
            socket->cwnd += socket->smss;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80041de:	4413      	add	r3, r2
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	f8b2 209a 	ldrh.w	r2, [r2, #154]	; 0x9a
 80041f4:	4293      	cmp	r3, r2
 80041f6:	bf28      	it	cs
 80041f8:	4613      	movcs	r3, r2
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
#endif
   }

   //Update TX events
   tcpUpdateEvents(socket);
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fda4 	bl	8004d50 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3728      	adds	r7, #40	; 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <tcpIsDuplicateSyn>:
 * @return TRUE if the SYN segment is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateSyn(Socket *socket, IpPseudoHeader *pseudoHeader,
   TcpHeader *segment)
{
 8004212:	b480      	push	{r7}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
   bool_t flag;
   TcpSynQueueItem *queueItem;

   //Initialize flag
   flag = FALSE;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]

   //Point to the very first item
   queueItem = socket->synQueue;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004228:	613b      	str	r3, [r7, #16]

   //Loop through the SYN queue
   while(queueItem != NULL)
 800422a:	e023      	b.n	8004274 <tcpIsDuplicateSyn+0x62>
   {
#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b04      	cmp	r3, #4
 8004232:	d11c      	bne.n	800426e <tcpIsDuplicateSyn+0x5c>
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	695b      	ldr	r3, [r3, #20]
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 8004238:	2b04      	cmp	r3, #4
 800423a:	d118      	bne.n	800426e <tcpIsDuplicateSyn+0x5c>
         pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	681b      	ldr	r3, [r3, #0]
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d114      	bne.n	800426e <tcpIsDuplicateSyn+0x5c>
      {
         //Check source and destination addresses
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d10e      	bne.n	800426e <tcpIsDuplicateSyn+0x5c>
            queueItem->destAddr.ipv4Addr == pseudoHeader->ipv4Data.destAddr)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	689b      	ldr	r3, [r3, #8]
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8004258:	429a      	cmp	r2, r3
 800425a:	d108      	bne.n	800426e <tcpIsDuplicateSyn+0x5c>
         {
            //Check source port
            if(queueItem->srcPort == segment->srcPort)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	8a1a      	ldrh	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	429a      	cmp	r2, r3
 8004268:	d101      	bne.n	800426e <tcpIsDuplicateSyn+0x5c>
            {
               //Duplicate SYN
               flag = TRUE;
 800426a:	2301      	movs	r3, #1
 800426c:	617b      	str	r3, [r7, #20]
      {
         //Just for sanity
      }

      //Next item
      queueItem = queueItem->next;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	613b      	str	r3, [r7, #16]
   while(queueItem != NULL)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1d8      	bne.n	800422c <tcpIsDuplicateSyn+0x1a>
   }

   //Return TRUE if the SYN segment is a duplicate
   return flag;
 800427a:	697b      	ldr	r3, [r7, #20]
}
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <tcpIsDuplicateAck>:
 * @param[in] length Length of the segment data
 * @return TRUE if the ACK is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
   bool_t flag;

   //An ACK is considered a duplicate when the following conditions are met
   flag = FALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]

   //The receiver of the ACK has outstanding data
   if(socket->retransmitQueue != NULL)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01b      	beq.n	80042da <tcpIsDuplicateAck+0x52>
   {
      //The incoming acknowledgment carries no data
      if(length == 0)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d118      	bne.n	80042da <tcpIsDuplicateAck+0x52>
      {
         //the SYN and FIN bits are both off
         if(!(segment->flags & (TCP_FLAG_SYN | TCP_FLAG_FIN)))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	7b5b      	ldrb	r3, [r3, #13]
 80042ac:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <tcpIsDuplicateAck+0x52>
         {
            //The acknowledgment number is equal to the greatest acknowledgment
            //received on the given connection
            if(segment->ackNum == socket->sndUna)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d109      	bne.n	80042da <tcpIsDuplicateAck+0x52>
            {
               //The advertised window in the incoming acknowledgment equals
               //the advertised window in the last incoming acknowledgment
               if(segment->window == socket->sndWnd)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	89db      	ldrh	r3, [r3, #14]
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d101      	bne.n	80042da <tcpIsDuplicateAck+0x52>
               {
                  //Duplicate ACK
                  flag = TRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
         }
      }
   }

   //Return TRUE if the acknowledgment is a duplicate
   return flag;
 80042da:	697b      	ldr	r3, [r7, #20]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <tcpFastRetransmit>:
 * @brief Fast retransmit procedure
 * @param[in] socket Handle referencing the current socket
 **/

void tcpFastRetransmit(Socket *socket)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   uint_t flightSize;

   //Amount of data that has been sent but not yet acknowledged
   flightSize = socket->sndNxt - socket->sndUna;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	60fb      	str	r3, [r7, #12]
   //After receiving 3 duplicate ACKs, ssthresh must be adjusted
   socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	461a      	mov	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	085b      	lsrs	r3, r3, #1
 800430a:	4293      	cmp	r3, r2
 800430c:	bf38      	it	cc
 800430e:	4613      	movcc	r3, r2
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

   //The value of recover is incremented to the value of the highest
   //sequence number transmitted by the TCP so far
   socket->recover = socket->sndNxt - 1;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431c:	1e5a      	subs	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
   //Debug message
   TRACE_INFO("TCP fast retransmit...\r\n");

   //TCP performs a retransmission of what appears to be the missing segment,
   //without waiting for the retransmission timer to expire
   tcpRetransmitSegment(socket);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fb67 	bl	80049f8 <tcpRetransmitSegment>

   //cwnd must set to ssthresh plus 3*SMSS. This artificially inflates the
   //congestion window by the number of segments (three) that have left the
   //network and which the receiver has buffered
   socket->cwnd = socket->ssthresh + TCP_FAST_RETRANSMIT_THRES * socket->smss;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004336:	4619      	mov	r1, r3
 8004338:	0049      	lsls	r1, r1, #1
 800433a:	440b      	add	r3, r1
 800433c:	b29b      	uxth	r3, r3
 800433e:	4413      	add	r3, r2
 8004340:	b29a      	uxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

   //Enter the fast recovery procedure
   socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
#endif
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <tcpFastRecovery>:
 * @param[in] segment Pointer to the incoming TCP segment
 * @param[in] n Number of bytes acknowledged by the incoming ACK
 **/

void tcpFastRecovery(Socket *socket, TcpHeader *segment, uint_t n)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and including
   //recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	dd0a      	ble.n	800438a <tcpFastRecovery+0x32>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Set cwnd to ssthresh
      socket->cwnd = socket->ssthresh;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      //Exit the fast recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      //Do not exit the fast recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
   }
#endif
}
 8004388:	e029      	b.n	80043de <tcpFastRecovery+0x86>
      tcpRetransmitSegment(socket);
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fb34 	bl	80049f8 <tcpRetransmitSegment>
      if(socket->cwnd > n)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4293      	cmp	r3, r2
 800439c:	d209      	bcs.n	80043b2 <tcpFastRecovery+0x5a>
         socket->cwnd -= n;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      if(n >= socket->smss)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80043b8:	461a      	mov	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4293      	cmp	r3, r2
 80043be:	d30a      	bcc.n	80043d6 <tcpFastRecovery+0x7e>
         socket->cwnd += socket->smss;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80043cc:	4413      	add	r3, r2
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <tcpFastLossRecovery>:
 * @param[in] socket Handle referencing the current socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpFastLossRecovery(Socket *socket, TcpHeader *segment)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and
   //including recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	dd04      	ble.n	800440a <tcpFastLossRecovery+0x24>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Exit the fast loss recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      //Do not exit the fast loss recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
   }
#endif
}
 8004408:	e006      	b.n	8004418 <tcpFastLossRecovery+0x32>
      tcpRetransmitSegment(socket);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 faf4 	bl	80049f8 <tcpRetransmitSegment>
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <tcpProcessSegmentData>:
 * @param[in] length Length of the segment data
 **/

void tcpProcessSegmentData(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
   uint32_t leftEdge;
   uint32_t rightEdge;

   //First sequence number occupied by the incoming segment
   leftEdge = segment->seqNum;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	617b      	str	r3, [r7, #20]
   //Sequence number immediately following the incoming segment
   rightEdge = segment->seqNum + length;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	4413      	add	r3, r2
 800443c:	613b      	str	r3, [r7, #16]

   //Check whether some data falls outside the receive window
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) < 0)
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	da09      	bge.n	800445e <tcpProcessSegmentData+0x3e>
   {
      //Position of the first byte to be read
      offset += socket->rcvNxt - leftEdge;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	4413      	add	r3, r2
 8004456:	603b      	str	r3, [r7, #0]
      //Ignore the data that falls outside the receive window
      leftEdge = socket->rcvNxt;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800445c:	617b      	str	r3, [r7, #20]
   }
   if(TCP_CMP_SEQ(rightEdge, socket->rcvNxt + socket->rcvWnd) > 0)
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	f8b1 107e 	ldrh.w	r1, [r1, #126]	; 0x7e
 800446a:	440b      	add	r3, r1
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	dd06      	ble.n	8004480 <tcpProcessSegmentData+0x60>
   {
      //Ignore the data that falls outside the receive window
      rightEdge = socket->rcvNxt + socket->rcvWnd;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	f8b2 207e 	ldrh.w	r2, [r2, #126]	; 0x7e
 800447c:	4413      	add	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
   }

   //Copy the incoming data to the receive buffer
   tcpWriteRxBuffer(socket, leftEdge, buffer, offset, rightEdge - leftEdge);
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fdde 	bl	8005050 <tcpWriteRxBuffer>

   //Update the list of non-contiguous blocks of data that
   //have been received and queued
   tcpUpdateSackBlocks(socket, &leftEdge, &rightEdge);
 8004494:	f107 0210 	add.w	r2, r7, #16
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	4619      	mov	r1, r3
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f917 	bl	80046d2 <tcpUpdateSackBlocks>

   //Check whether the segment was received out of order
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) > 0)
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	dd0d      	ble.n	80044cc <tcpProcessSegmentData+0xac>
   {
      //Out of order data segments should be acknowledged immediately, in
      //order to accelerate loss recovery
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80044b8:	2300      	movs	r3, #0
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	2300      	movs	r3, #0
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	460b      	mov	r3, r1
 80044c2:	2110      	movs	r1, #16
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff f99f 	bl	8003808 <tcpSendSegment>
         FALSE);

      //Notify user task that data is available
      tcpUpdateEvents(socket);
   }
}
 80044ca:	e02d      	b.n	8004528 <tcpProcessSegmentData+0x108>
      length = rightEdge - leftEdge;
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	623b      	str	r3, [r7, #32]
      socket->rcvNxt += length;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	441a      	add	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	679a      	str	r2, [r3, #120]	; 0x78
      socket->rcvUser += length;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
      socket->rcvWnd -= length;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004510:	2300      	movs	r3, #0
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	2300      	movs	r3, #0
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	460b      	mov	r3, r1
 800451a:	2110      	movs	r1, #16
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff f973 	bl	8003808 <tcpSendSegment>
      tcpUpdateEvents(socket);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fc14 	bl	8004d50 <tcpUpdateEvents>
}
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <tcpDeleteControlBlock>:
 * @brief Delete TCB structure
 * @param[in] socket Handle referencing the socket
 **/

void tcpDeleteControlBlock(Socket *socket)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
   //Delete retransmission queue
   tcpFlushRetransmitQueue(socket);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f88c 	bl	8004656 <tcpFlushRetransmitQueue>

   //Delete SYN queue
   tcpFlushSynQueue(socket);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8ab 	bl	800469a <tcpFlushSynQueue>

   //Release transmit buffer
   netBufferSetLength((NetBuffer *) &socket->txBuffer, 0);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	33ac      	adds	r3, #172	; 0xac
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd fe89 	bl	8002262 <netBufferSetLength>

   //Release receive buffer
   netBufferSetLength((NetBuffer *) &socket->rxBuffer, 0);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f7fd fe82 	bl	8002262 <netBufferSetLength>
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <tcpUpdateRetransmitQueue>:
 * @brief Remove acknowledged segments from retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateRetransmitQueue(Socket *socket)
{
 8004566:	b590      	push	{r4, r7, lr}
 8004568:	b087      	sub	sp, #28
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
   TcpQueueItem *prevQueueItem;
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Point to the first item of the retransmission queue
   prevQueueItem = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
   queueItem = socket->retransmitQueue;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8004578:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 800457a:	e05a      	b.n	8004632 <tcpUpdateRetransmitQueue+0xcc>
   {
      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	331c      	adds	r3, #28
 8004580:	60bb      	str	r3, [r7, #8]

      //Calculate the length of the TCP segment
      if(header->flags & TCP_FLAG_SYN)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	7b5b      	ldrb	r3, [r3, #13]
 8004586:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <tcpUpdateRetransmitQueue+0x34>
         length = 1;
 8004594:	2301      	movs	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e010      	b.n	80045bc <tcpUpdateRetransmitQueue+0x56>
      else if(header->flags & TCP_FLAG_FIN)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	7b5b      	ldrb	r3, [r3, #13]
 800459e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <tcpUpdateRetransmitQueue+0x50>
         length = queueItem->length + 1;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	3301      	adds	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e002      	b.n	80045bc <tcpUpdateRetransmitQueue+0x56>
      else
         length = queueItem->length;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	617b      	str	r3, [r7, #20]

      //If an acknowledgment is received for a segment before its timer
      //expires, the segment is removed from the retransmission queue
      if(TCP_CMP_SEQ(socket->sndUna, ntohl(header->seqNum) + length) >= 0)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fb fff9 	bl	80005bc <swapInt32>
 80045ca:	4602      	mov	r2, r0
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4413      	add	r3, r2
 80045d0:	1ae3      	subs	r3, r4, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	db28      	blt.n	8004628 <tcpUpdateRetransmitQueue+0xc2>
      {
         //First item of the queue?
         if(prevQueueItem == NULL)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10c      	bne.n	80045f6 <tcpUpdateRetransmitQueue+0x90>
         {
            //Remove the current item from the queue
            socket->retransmitQueue = queueItem->next;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
            //The item can now be safely deleted
            memPoolFree(queueItem);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7fd fdcc 	bl	8002184 <memPoolFree>
            //Point to the next item
            queueItem = socket->retransmitQueue;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e009      	b.n	800460a <tcpUpdateRetransmitQueue+0xa4>
         }
         else
         {
            //Remove the current item from the queue
            prevQueueItem->next = queueItem->next;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	601a      	str	r2, [r3, #0]
            //The item can now be safely deleted
            memPoolFree(queueItem);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7fd fdc0 	bl	8002184 <memPoolFree>
            //Point to the next item
            queueItem = prevQueueItem->next;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]
         }

         //When an ACK is received that acknowledges new data, restart the
         //retransmission timer so that it will expire after RTO seconds
         tcpTimerStart(&socket->retransmitTimer, socket->rto);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f000 ff19 	bl	8005450 <tcpTimerStart>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8004626:	e004      	b.n	8004632 <tcpUpdateRetransmitQueue+0xcc>
      }
      //No acknowledgment received for the current segment...
      else
      {
         //Point to the next item
         prevQueueItem = queueItem;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	613b      	str	r3, [r7, #16]
         queueItem = queueItem->next;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1a1      	bne.n	800457c <tcpUpdateRetransmitQueue+0x16>
      }
   }

   //When all outstanding data has been acknowledged,
   //turn off the retransmission timer
   if(socket->retransmitQueue == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d105      	bne.n	800464e <tcpUpdateRetransmitQueue+0xe8>
      tcpTimerStop(&socket->retransmitTimer);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004648:	4618      	mov	r0, r3
 800464a:	f000 ff15 	bl	8005478 <tcpTimerStop>
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd90      	pop	{r4, r7, pc}

08004656 <tcpFlushRetransmitQueue>:
 * @brief Flush retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushRetransmitQueue(Socket *socket)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
   //Point to the first item in the retransmission queue
   TcpQueueItem *queueItem = socket->retransmitQueue;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8004664:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 8004666:	e007      	b.n	8004678 <tcpFlushRetransmitQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpQueueItem *nextQueueItem = queueItem->next;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7fd fd88 	bl	8002184 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f4      	bne.n	8004668 <tcpFlushRetransmitQueue+0x12>
   }

   //The retransmission queue is now flushed
   socket->retransmitQueue = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

   //Turn off the retransmission timer
   tcpTimerStop(&socket->retransmitTimer);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fef3 	bl	8005478 <tcpTimerStop>
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <tcpFlushSynQueue>:
 * @brief Flush SYN queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushSynQueue(Socket *socket)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
   //Point to the first item in the SYN queue
   TcpSynQueueItem *queueItem = socket->synQueue;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80046a8:	60fb      	str	r3, [r7, #12]

   //Loop through SYN queue
   while(queueItem != NULL)
 80046aa:	e007      	b.n	80046bc <tcpFlushSynQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpSynQueueItem *nextQueueItem = queueItem->next;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7fd fd66 	bl	8002184 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f4      	bne.n	80046ac <tcpFlushSynQueue+0x12>
   }

   //SYN queue was successfully flushed
   socket->synQueue = NULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <tcpUpdateSackBlocks>:
 * @param[in,out] leftEdge First sequence number occupied by the incoming data
 * @param[in,out] rightEdge Sequence number immediately following the incoming data
 **/

void tcpUpdateSackBlocks(Socket *socket, uint32_t *leftEdge, uint32_t *rightEdge)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
   uint_t i = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]

   //Loop through the blocks
   while(i < socket->sackBlockCount)
 80046e2:	e050      	b.n	8004786 <tcpUpdateSackBlocks+0xb4>
   {
      //Find each block that overlaps the specified one
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	3341      	adds	r3, #65	; 0x41
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	440b      	add	r3, r1
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	db42      	blt.n	8004780 <tcpUpdateSackBlocks+0xae>
         TCP_CMP_SEQ(*leftEdge, socket->sackBlock[i].rightEdge) <= 0)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3341      	adds	r3, #65	; 0x41
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 800470c:	2b00      	cmp	r3, #0
 800470e:	dc37      	bgt.n	8004780 <tcpUpdateSackBlocks+0xae>
      {
         //Merge blocks to form a contiguous one
         *leftEdge = MIN(*leftEdge, socket->sackBlock[i].leftEdge);
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3341      	adds	r3, #65	; 0x41
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	bf28      	it	cs
 8004724:	461a      	movcs	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	601a      	str	r2, [r3, #0]
         *rightEdge = MAX(*rightEdge, socket->sackBlock[i].rightEdge);
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	3341      	adds	r3, #65	; 0x41
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	bf38      	it	cc
 800473e:	461a      	movcc	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	601a      	str	r2, [r3, #0]

         //Delete current block
         memmove(socket->sackBlock + i, socket->sackBlock + i + 1,
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	18d0      	adds	r0, r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	3301      	adds	r3, #1
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	18d1      	adds	r1, r2, r3
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4613      	mov	r3, r2
 8004762:	075b      	lsls	r3, r3, #29
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	3318      	adds	r3, #24
 800476a:	461a      	mov	r2, r3
 800476c:	f013 fd97 	bl	801829e <memmove>
            (TCP_MAX_SACK_BLOCKS - i - 1) * sizeof(TcpSackBlock));

         //Decrement the number of non-contiguous blocks
         socket->sackBlockCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004776:	1e5a      	subs	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
 800477e:	e002      	b.n	8004786 <tcpUpdateSackBlocks+0xb4>
      }
      else
      {
         //Point to the next block
         i++;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3301      	adds	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
   while(i < socket->sackBlockCount)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	429a      	cmp	r2, r3
 8004790:	d3a8      	bcc.n	80046e4 <tcpUpdateSackBlocks+0x12>
      }
   }

   //Check whether the incoming segment was received out of order
   if(TCP_CMP_SEQ(*leftEdge, socket->rcvNxt) > 0)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	dd21      	ble.n	80047e4 <tcpUpdateSackBlocks+0x112>
   {
      //Make room for the new non-contiguous block
      memmove(socket->sackBlock + 1, socket->sackBlock,
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80047a6:	f103 0008 	add.w	r0, r3, #8
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80047b0:	2218      	movs	r2, #24
 80047b2:	4619      	mov	r1, r3
 80047b4:	f013 fd73 	bl	801829e <memmove>
         (TCP_MAX_SACK_BLOCKS - 1) * sizeof(TcpSackBlock));

      //Insert the element in the list
      socket->sackBlock[0].leftEdge = *leftEdge;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
      socket->sackBlock[0].rightEdge = *rightEdge;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

      //Increment the number of non-contiguous blocks
      if(socket->sackBlockCount < TCP_MAX_SACK_BLOCKS)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d806      	bhi.n	80047e4 <tcpUpdateSackBlocks+0x112>
         socket->sackBlockCount++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
   }
}
 80047e4:	bf00      	nop
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <tcpUpdateSendWindow>:
 * @param[in] socket Handle referencing the socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpUpdateSendWindow(Socket *socket, TcpHeader *segment)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
   //Case where neither the sequence nor the acknowledgment number is increased
   if(segment->seqNum == socket->sndWl1 && segment->ackNum == socket->sndWl2)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	429a      	cmp	r2, r3
 8004800:	d129      	bne.n	8004856 <tcpUpdateSendWindow+0x6a>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480a:	429a      	cmp	r2, r3
 800480c:	d123      	bne.n	8004856 <tcpUpdateSendWindow+0x6a>
   {
      //TCP may ignore a window update with a smaller window than previously
      //offered if neither the sequence number nor the acknowledgment number
      //is increased (refer to RFC 1122, section 4.2.2.16)
      if(segment->window > socket->sndWnd)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	89db      	ldrh	r3, [r3, #14]
 8004812:	b29a      	uxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800481a:	429a      	cmp	r2, r3
 800481c:	d962      	bls.n	80048e4 <tcpUpdateSendWindow+0xf8>
      {
         //Update the send window and record the sequence number and the
         //acknowledgment number used to update SND.WND
         socket->sndWnd = segment->window;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	89db      	ldrh	r3, [r3, #14]
 8004822:	b29a      	uxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
         socket->sndWl1 = segment->seqNum;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	671a      	str	r2, [r3, #112]	; 0x70
         socket->sndWl2 = segment->ackNum;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	675a      	str	r2, [r3, #116]	; 0x74

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	89db      	ldrh	r3, [r3, #14]
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004846:	4293      	cmp	r3, r2
 8004848:	bf38      	it	cc
 800484a:	4613      	movcc	r3, r2
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      if(segment->window > socket->sndWnd)
 8004854:	e046      	b.n	80048e4 <tcpUpdateSendWindow+0xf8>
      }
   }
   //Case where the sequence or the acknowledgment number is increased
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	db3f      	blt.n	80048e4 <tcpUpdateSendWindow+0xf8>
      TCP_CMP_SEQ(segment->ackNum, socket->sndWl2) >= 0)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486c:	1ad3      	subs	r3, r2, r3
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 800486e:	2b00      	cmp	r3, #0
 8004870:	db38      	blt.n	80048e4 <tcpUpdateSendWindow+0xf8>
   {
      //The remote host advertises a zero window?
      if(!segment->window && socket->sndWnd)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	89db      	ldrh	r3, [r3, #14]
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d117      	bne.n	80048ac <tcpUpdateSendWindow+0xc0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004882:	2b00      	cmp	r3, #0
 8004884:	d012      	beq.n	80048ac <tcpUpdateSendWindow+0xc0>
      {
         //Start the persist timer
         socket->wndProbeCount = 0;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
         socket->wndProbeInterval = TCP_DEFAULT_PROBE_INTERVAL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004894:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
         tcpTimerStart(&socket->persistTimer, socket->wndProbeInterval);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fdd2 	bl	8005450 <tcpTimerStart>
      }

      //Update the send window and record the sequence number and the
      //acknowledgment number used to update SND.WND
      socket->sndWnd = segment->window;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	89db      	ldrh	r3, [r3, #14]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      socket->sndWl1 = segment->seqNum;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	671a      	str	r2, [r3, #112]	; 0x70
      socket->sndWl2 = segment->ackNum;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	675a      	str	r2, [r3, #116]	; 0x74

      //Maximum send window it has seen so far on the connection
      socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	89db      	ldrh	r3, [r3, #14]
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bf38      	it	cc
 80048d8:	4613      	movcc	r3, r2
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
   }
}
 80048e2:	e7ff      	b.n	80048e4 <tcpUpdateSendWindow+0xf8>
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <tcpComputeRto>:
 * @param[in] socket Handle referencing the socket
 * @return TRUE if the RTT measurement is complete, else FALSE
 **/

bool_t tcpComputeRto(Socket *socket)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
   bool_t flag;
   systime_t r;
   systime_t delta;

   //Clear flag
   flag = FALSE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]

   //TCP implementation takes one RTT measurement at a time
   if(socket->rttBusy)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d075      	beq.n	80049ee <tcpComputeRto+0x102>
   {
      //Ensure the incoming ACK number covers the expected sequence number
      if(TCP_CMP_SEQ(socket->sndUna, socket->rttSeqNum) > 0)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	dd6d      	ble.n	80049ee <tcpComputeRto+0x102>
      {
         //Calculate round-time trip
         r = osGetSystemTime() - socket->rttStartTime;
 8004912:	f7fb ff44 	bl	800079e <osGetSystemTime>
 8004916:	4602      	mov	r2, r0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	613b      	str	r3, [r7, #16]

         //First RTT measurement?
         if(!socket->srtt && !socket->rttvar)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10e      	bne.n	800494a <tcpComputeRto+0x5e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <tcpComputeRto+0x5e>
         {
            //Initialize RTO calculation algorithm
            socket->srtt = r;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            socket->rttvar = r / 2;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	085a      	lsrs	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004948:	e029      	b.n	800499e <tcpComputeRto+0xb2>
         }
         else
         {
            //Calculate the difference between the measured value and the
            //current RTT estimator
            delta = (r > socket->srtt) ? (r - socket->srtt) : (socket->srtt - r);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d905      	bls.n	8004962 <tcpComputeRto+0x76>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	e004      	b.n	800496c <tcpComputeRto+0x80>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	60fb      	str	r3, [r7, #12]

            //Implement Van Jacobson's algorithm (as specified in RFC 6298 2.3)
            socket->rttvar = (3 * socket->rttvar + delta) / 4;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	441a      	add	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	089a      	lsrs	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            socket->srtt = (7 * socket->srtt + r) / 8;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	1a9a      	subs	r2, r3, r2
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4413      	add	r3, r2
 8004996:	08da      	lsrs	r2, r3, #3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
         }

         //Calculate the next retransmission timeout
         socket->rto = socket->srtt + 4 * socket->rttvar;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

         //Whenever RTO is computed, if it is less than 1 second, then the RTO
         //should be rounded up to 1 second
         socket->rto = MAX(socket->rto, TCP_MIN_RTO);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049be:	bf38      	it	cc
 80049c0:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
 80049c4:	461a      	mov	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

         //A maximum value may be placed on RTO provided it is at least 60
         //seconds
         socket->rto = MIN(socket->rto, TCP_MAX_RTO);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80049d6:	429a      	cmp	r2, r3
 80049d8:	bf28      	it	cs
 80049da:	461a      	movcs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
         //Debug message
         TRACE_DEBUG("R=%" PRIu32 ", SRTT=%" PRIu32 ", RTTVAR=%" PRIu32 ", RTO=%" PRIu32 "\r\n",
            r, socket->srtt, socket->rttvar, socket->rto);

         //RTT measurement is complete
         socket->rttBusy = FALSE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         //Set flag
         flag = TRUE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	617b      	str	r3, [r7, #20]
      }
   }

   //Return TRUE if the RTT measurement is complete
   return flag;
 80049ee:	697b      	ldr	r3, [r7, #20]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <tcpRetransmitSegment>:
 * @param[in] socket Handle referencing the socket
 * @return Error code
 **/

error_t tcpRetransmitSegment(Socket *socket)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	6078      	str	r0, [r7, #4]
   NetBuffer *buffer;
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Initialize error code
   error = NO_ERROR;
 8004a00:	2300      	movs	r3, #0
 8004a02:	83fb      	strh	r3, [r7, #30]
   //Total number of bytes that have been retransmitted
   length = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]

   //Point to the retransmission queue
   queueItem = socket->retransmitQueue;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8004a0e:	617b      	str	r3, [r7, #20]

   //Any segment in the retransmission queue?
   while(queueItem != NULL)
 8004a10:	e063      	b.n	8004ada <tcpRetransmitSegment+0xe2>
   {
      //Total number of bytes that have been retransmitted
      length += queueItem->length;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]

      //The amount of data that can be sent cannot exceed the MSS
      if(length > socket->smss)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004a22:	461a      	mov	r2, r3
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d902      	bls.n	8004a30 <tcpRetransmitSegment+0x38>
      {
         //We are done
         error = NO_ERROR;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	83fb      	strh	r3, [r7, #30]
         //Exit immediately
         break;
 8004a2e:	e059      	b.n	8004ae4 <tcpRetransmitSegment+0xec>
      }

      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	331c      	adds	r3, #28
 8004a34:	613b      	str	r3, [r7, #16]

      //Allocate a memory buffer to hold the TCP segment
      buffer = ipAllocBuffer(0, &offset);
 8004a36:	f107 0308 	add.w	r3, r7, #8
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7fc ff5b 	bl	80018f8 <ipAllocBuffer>
 8004a42:	60f8      	str	r0, [r7, #12]
      //Failed to allocate memory?
      if(buffer == NULL)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <tcpRetransmitSegment+0x58>
      {
         //Report an error
         error = ERROR_OUT_OF_MEMORY;
 8004a4a:	2364      	movs	r3, #100	; 0x64
 8004a4c:	83fb      	strh	r3, [r7, #30]
         //Exit immediately
         break;
 8004a4e:	e049      	b.n	8004ae4 <tcpRetransmitSegment+0xec>

      //Start of exception handling block
      do
      {
         //Copy TCP header
         error = netBufferAppend(buffer, header, header->dataOffset * 4);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	7b1b      	ldrb	r3, [r3, #12]
 8004a54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6939      	ldr	r1, [r7, #16]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f7fd fe3c 	bl	80026de <netBufferAppend>
 8004a66:	4603      	mov	r3, r0
 8004a68:	83fb      	strh	r3, [r7, #30]
         //Any error to report?
         if(error)
 8004a6a:	8bfb      	ldrh	r3, [r7, #30]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d128      	bne.n	8004ac2 <tcpRetransmitSegment+0xca>
            break;

         //Copy data from send buffer
         error = tcpReadTxBuffer(socket, ntohl(header->seqNum), buffer,
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fb fda1 	bl	80005bc <swapInt32>
 8004a7a:	4601      	mov	r1, r0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fa96 	bl	8004fb4 <tcpReadTxBuffer>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	83fb      	strh	r3, [r7, #30]
            queueItem->length);
         //Any error to report?
         if(error)
 8004a8c:	8bfb      	ldrh	r3, [r7, #30]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d119      	bne.n	8004ac6 <tcpRetransmitSegment+0xce>
         //Total number of segments retransmitted
         MIB2_INC_COUNTER32(tcpGroup.tcpRetransSegs, 1);
         TCP_MIB_INC_COUNTER32(tcpRetransSegs, 1);

         //Dump TCP header contents for debugging purpose
         tcpDumpHeader(header, queueItem->length, socket->iss, socket->irs);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9e:	6938      	ldr	r0, [r7, #16]
 8004aa0:	f000 fb27 	bl	80050f2 <tcpDumpHeader>

         //Retransmit the lost segment without waiting for the retransmission
         //timer to expire
         error = ipSendDatagram(socket->interface, &queueItem->pseudoHeader,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68d8      	ldr	r0, [r3, #12]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f103 010c 	add.w	r1, r3, #12
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f7fc fdce 	bl	8001658 <ipSendDatagram>
 8004abc:	4603      	mov	r3, r0
 8004abe:	83fb      	strh	r3, [r7, #30]
 8004ac0:	e002      	b.n	8004ac8 <tcpRetransmitSegment+0xd0>
            break;
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <tcpRetransmitSegment+0xd0>
            break;
 8004ac6:	bf00      	nop

         //End of exception handling block
      } while(0);

      //Free previously allocated memory
      netBufferFree(buffer);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7fd fb99 	bl	8002200 <netBufferFree>

      //Any error to report?
      if(error)
 8004ace:	8bfb      	ldrh	r3, [r7, #30]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <tcpRetransmitSegment+0xea>
         //Exit immediately
         break;
      }

      //Point to the next segment in the queue
      queueItem = queueItem->next;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	617b      	str	r3, [r7, #20]
   while(queueItem != NULL)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d198      	bne.n	8004a12 <tcpRetransmitSegment+0x1a>
 8004ae0:	e000      	b.n	8004ae4 <tcpRetransmitSegment+0xec>
         break;
 8004ae2:	bf00      	nop
   }

   //Return status code
   return error;
 8004ae4:	8bfb      	ldrh	r3, [r7, #30]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <tcpNagleAlgo>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t tcpNagleAlgo(Socket *socket, uint_t flags)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b088      	sub	sp, #32
 8004af2:	af02      	add	r7, sp, #8
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
   uint_t n;
   uint_t u;

   //The amount of data that can be sent at any given time is
   //limited by the receiver window and the congestion window
   n = MIN(socket->sndWnd, socket->txBufferSize);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bf28      	it	cs
 8004b08:	4613      	movcs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check the congestion window
   n = MIN(n, socket->cwnd);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8004b12:	461a      	mov	r2, r3
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bf28      	it	cs
 8004b1a:	4613      	movcs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
#endif

   //Retrieve the size of the usable window
   u = n - (socket->sndNxt - socket->sndUna);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

   //The Nagle algorithm discourages sending tiny segments when
   //the data to be sent increases in small increments
   while(socket->sndUser > 0)
 8004b2e:	e0d3      	b.n	8004cd8 <tcpNagleAlgo+0x1ea>
   {
      //The usable window size may become zero or negative,
      //preventing packet transmission
      if((int_t) u <= 0)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f340 80d7 	ble.w	8004ce6 <tcpNagleAlgo+0x1f8>
         break;

      //Calculate the number of bytes to send at a time
      n = MIN(u, socket->sndUser);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004b3e:	461a      	mov	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4293      	cmp	r3, r2
 8004b44:	bf28      	it	cs
 8004b46:	4613      	movcs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
      n = MIN(n, socket->smss);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004b50:	461a      	mov	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4293      	cmp	r3, r2
 8004b56:	bf28      	it	cs
 8004b58:	4613      	movcs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

      //Disable Nagle algorithm?
      if(flags & SOCKET_FLAG_NO_DELAY)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <tcpNagleAlgo+0xaa>
      {
         //All packets will be send no matter what size they have
         if(n > 0)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80be 	beq.w	8004cea <tcpNagleAlgo+0x1fc>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004b76:	2301      	movs	r3, #1
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	2118      	movs	r1, #24
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fe fe40 	bl	8003808 <tcpSendSegment>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8004b8c:	89fb      	ldrh	r3, [r7, #14]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 808e 	beq.w	8004cb0 <tcpNagleAlgo+0x1c2>
               return error;
 8004b94:	89fb      	ldrh	r3, [r7, #14]
 8004b96:	e0b1      	b.n	8004cfc <tcpNagleAlgo+0x20e>
         {
            //We are done...
            break;
         }
      }
      else if(flags & SOCKET_FLAG_DELAY)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d021      	beq.n	8004be6 <tcpNagleAlgo+0xf8>
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ba8:	461a      	mov	r2, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4293      	cmp	r3, r2
 8004bae:	bf28      	it	cs
 8004bb0:	4613      	movcs	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	f0c0 8098 	bcc.w	8004cee <tcpNagleAlgo+0x200>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	2118      	movs	r1, #24
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fe fe18 	bl	8003808 <tcpSendSegment>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d066      	beq.n	8004cb0 <tcpNagleAlgo+0x1c2>
               return error;
 8004be2:	89fb      	ldrh	r3, [r7, #14]
 8004be4:	e08a      	b.n	8004cfc <tcpNagleAlgo+0x20e>
         }
      }
      else
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004bec:	461a      	mov	r2, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	bf28      	it	cs
 8004bf4:	4613      	movcs	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d313      	bcc.n	8004c28 <tcpNagleAlgo+0x13a>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c08:	2301      	movs	r3, #1
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	460b      	mov	r3, r1
 8004c12:	2118      	movs	r1, #24
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fe fdf7 	bl	8003808 <tcpSendSegment>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8004c1e:	89fb      	ldrh	r3, [r7, #14]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d045      	beq.n	8004cb0 <tcpNagleAlgo+0x1c2>
               return error;
 8004c24:	89fb      	ldrh	r3, [r7, #14]
 8004c26:	e069      	b.n	8004cfc <tcpNagleAlgo+0x20e>
         }
         //Or if all queued data can be sent now
         else if(socket->sndNxt == socket->sndUna && socket->sndUser <= u)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d11a      	bne.n	8004c6a <tcpNagleAlgo+0x17c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d313      	bcc.n	8004c6a <tcpNagleAlgo+0x17c>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	460b      	mov	r3, r1
 8004c54:	2118      	movs	r1, #24
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fe fdd6 	bl	8003808 <tcpSendSegment>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8004c60:	89fb      	ldrh	r3, [r7, #14]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d024      	beq.n	8004cb0 <tcpNagleAlgo+0x1c2>
               return error;
 8004c66:	89fb      	ldrh	r3, [r7, #14]
 8004c68:	e048      	b.n	8004cfc <tcpNagleAlgo+0x20e>
         }
         //Or if at least a fraction of the maximum window can be sent
         else if(MIN(socket->sndUser, u) >= (socket->maxSndWnd / 2))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c70:	461a      	mov	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4293      	cmp	r3, r2
 8004c76:	bf28      	it	cs
 8004c78:	4613      	movcs	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 8004c80:	0852      	lsrs	r2, r2, #1
 8004c82:	b292      	uxth	r2, r2
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d334      	bcc.n	8004cf2 <tcpNagleAlgo+0x204>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004c90:	2301      	movs	r3, #1
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	2118      	movs	r1, #24
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fe fdb3 	bl	8003808 <tcpSendSegment>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <tcpNagleAlgo+0x1c2>
               return error;
 8004cac:	89fb      	ldrh	r3, [r7, #14]
 8004cae:	e025      	b.n	8004cfc <tcpNagleAlgo+0x20e>
            break;
         }
      }

      //Advance SND.NXT pointer
      socket->sndNxt += n;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	441a      	add	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	665a      	str	r2, [r3, #100]	; 0x64
      //Update the number of data buffered but not yet sent
      socket->sndUser -= n;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      //Update the size of the usable window
      u -= n;
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	617b      	str	r3, [r7, #20]
   while(socket->sndUser > 0)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f47f af26 	bne.w	8004b30 <tcpNagleAlgo+0x42>
 8004ce4:	e006      	b.n	8004cf4 <tcpNagleAlgo+0x206>
         break;
 8004ce6:	bf00      	nop
 8004ce8:	e004      	b.n	8004cf4 <tcpNagleAlgo+0x206>
            break;
 8004cea:	bf00      	nop
 8004cec:	e002      	b.n	8004cf4 <tcpNagleAlgo+0x206>
            break;
 8004cee:	bf00      	nop
 8004cf0:	e000      	b.n	8004cf4 <tcpNagleAlgo+0x206>
            break;
 8004cf2:	bf00      	nop
   }

   //Check whether the transmitter can accept more data
   tcpUpdateEvents(socket);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f82b 	bl	8004d50 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <tcpChangeState>:
 * @param[in] socket Handle referencing the socket
 * @param[in] newState New TCP state to switch to
 **/

void tcpChangeState(Socket *socket, TcpState newState)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	70fb      	strb	r3, [r7, #3]
   //Enter CLOSED state?
   if(newState == TCP_STATE_CLOSED)
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d110      	bne.n	8004d38 <tcpChangeState+0x34>
   {
      //Check previous state
      if(socket->state == TCP_STATE_LAST_ACK ||
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d1c:	2b06      	cmp	r3, #6
 8004d1e:	d004      	beq.n	8004d2a <tcpChangeState+0x26>
         socket->state == TCP_STATE_TIME_WAIT)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
      if(socket->state == TCP_STATE_LAST_ACK ||
 8004d26:	2b0a      	cmp	r3, #10
 8004d28:	d103      	bne.n	8004d32 <tcpChangeState+0x2e>
      {
         //The connection has been closed properly
         socket->closedFlag = TRUE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d30:	e002      	b.n	8004d38 <tcpChangeState+0x34>
      }
      else
      {
         //The connection has been reset by the peer
         socket->resetFlag = TRUE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	651a      	str	r2, [r3, #80]	; 0x50
      }
   }

   //Enter the desired state
   socket->state = newState;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   //Update TCP related events
   tcpUpdateEvents(socket);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f805 	bl	8004d50 <tcpUpdateEvents>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <tcpUpdateEvents>:
 * @brief Update TCP related events
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateEvents(Socket *socket)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	63da      	str	r2, [r3, #60]	; 0x3c

   //Check current TCP state
   switch(socket->state)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d64:	2b0a      	cmp	r3, #10
 8004d66:	d84d      	bhi.n	8004e04 <tcpUpdateEvents+0xb4>
 8004d68:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <tcpUpdateEvents+0x20>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004ddf 	.word	0x08004ddf
 8004d74:	08004e05 	.word	0x08004e05
 8004d78:	08004e05 	.word	0x08004e05
 8004d7c:	08004e05 	.word	0x08004e05
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	08004dc5 	.word	0x08004dc5
 8004d88:	08004dc5 	.word	0x08004dc5
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004dab 	.word	0x08004dab
 8004d94:	08004dc5 	.word	0x08004dc5
 8004d98:	08004ddf 	.word	0x08004ddf
   {
   //ESTABLISHED or FIN-WAIT-1 state?
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da0:	f043 0201 	orr.w	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8004da8:	e02d      	b.n	8004e06 <tcpUpdateEvents+0xb6>
   //FIN-WAIT-2 state?
   case TCP_STATE_FIN_WAIT_2:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	f043 0201 	orr.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8004dc2:	e020      	b.n	8004e06 <tcpUpdateEvents+0xb6>
   //CLOSE-WAIT, LAST-ACK or CLOSING state?
   case TCP_STATE_CLOSE_WAIT:
   case TCP_STATE_LAST_ACK:
   case TCP_STATE_CLOSING:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc8:	f043 0201 	orr.w	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8004ddc:	e013      	b.n	8004e06 <tcpUpdateEvents+0xb6>
   //TIME-WAIT or CLOSED state?
   case TCP_STATE_TIME_WAIT:
   case TCP_STATE_CLOSED:
      socket->eventFlags |= SOCKET_EVENT_CLOSED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	f043 0202 	orr.w	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8004e02:	e000      	b.n	8004e06 <tcpUpdateEvents+0xb6>
   //Any other state
   default:
      break;
 8004e04:	bf00      	nop
   }

   //Handle TX specific events
   if(socket->state == TCP_STATE_SYN_SENT ||
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d004      	beq.n	8004e1a <tcpUpdateEvents+0xca>
      socket->state == TCP_STATE_SYN_RECEIVED)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   if(socket->state == TCP_STATE_SYN_SENT ||
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d10c      	bne.n	8004e34 <tcpUpdateEvents+0xe4>
   {
      //Disallow write operations until the connection is established
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	f043 0208 	orr.w	r2, r3, #8
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	f043 0210 	orr.w	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e32:	e050      	b.n	8004ed6 <tcpUpdateEvents+0x186>
   }
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d004      	beq.n	8004e48 <tcpUpdateEvents+0xf8>
      socket->state == TCP_STATE_CLOSE_WAIT)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	d12d      	bne.n	8004ea4 <tcpUpdateEvents+0x154>
   {
      //Check whether the send buffer is full or not
      if((socket->sndUser + socket->sndNxt - socket->sndUna) < socket->txBufferSize)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5a:	1ad2      	subs	r2, r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d205      	bcs.n	8004e72 <tcpUpdateEvents+0x122>
         socket->eventFlags |= SOCKET_EVENT_TX_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	f043 0204 	orr.w	r2, r3, #4
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	63da      	str	r2, [r3, #60]	; 0x3c

      //Check whether all the data in the send buffer has been transmitted
      if(!socket->sndUser)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d12b      	bne.n	8004ed4 <tcpUpdateEvents+0x184>
      {
         //All the pending data has been sent out
         socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e80:	f043 0208 	orr.w	r2, r3, #8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	63da      	str	r2, [r3, #60]	; 0x3c

         //Check whether an acknowledgment has been received
         if(TCP_CMP_SEQ(socket->sndUna, socket->sndNxt) >= 0)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	db1e      	blt.n	8004ed4 <tcpUpdateEvents+0x184>
            socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9a:	f043 0210 	orr.w	r2, r3, #16
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	63da      	str	r2, [r3, #60]	; 0x3c
      if(!socket->sndUser)
 8004ea2:	e017      	b.n	8004ed4 <tcpUpdateEvents+0x184>
      }
   }
   else if(socket->state != TCP_STATE_LISTEN)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d013      	beq.n	8004ed6 <tcpUpdateEvents+0x186>
   {
      //Unblock user task if the connection is being closed
      socket->eventFlags |= SOCKET_EVENT_TX_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	f043 0204 	orr.w	r2, r3, #4
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	f043 0208 	orr.w	r2, r3, #8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	63da      	str	r2, [r3, #60]	; 0x3c
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eca:	f043 0210 	orr.w	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ed2:	e000      	b.n	8004ed6 <tcpUpdateEvents+0x186>
      if(!socket->sndUser)
 8004ed4:	bf00      	nop
   }

   //Handle RX specific events
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d009      	beq.n	8004ef4 <tcpUpdateEvents+0x1a4>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8004ee6:	2b07      	cmp	r3, #7
 8004ee8:	d004      	beq.n	8004ef4 <tcpUpdateEvents+0x1a4>
      socket->state == TCP_STATE_FIN_WAIT_2)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d10b      	bne.n	8004f0c <tcpUpdateEvents+0x1bc>
   {
      //Data is available for reading?
      if(socket->rcvUser > 0)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d027      	beq.n	8004f4e <tcpUpdateEvents+0x1fe>
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	63da      	str	r2, [r3, #60]	; 0x3c
      if(socket->rcvUser > 0)
 8004f0a:	e020      	b.n	8004f4e <tcpUpdateEvents+0x1fe>
   }
   else if(socket->state == TCP_STATE_LISTEN)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10b      	bne.n	8004f2e <tcpUpdateEvents+0x1de>
   {
      //If the socket is currently in the listen state, it will be marked
      //as readable if an incoming connection request has been received
      if(socket->synQueue != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d016      	beq.n	8004f4e <tcpUpdateEvents+0x1fe>
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f2c:	e00f      	b.n	8004f4e <tcpUpdateEvents+0x1fe>
   }
   else if(socket->state != TCP_STATE_SYN_SENT &&
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d00a      	beq.n	8004f4e <tcpUpdateEvents+0x1fe>
      socket->state != TCP_STATE_SYN_RECEIVED)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   else if(socket->state != TCP_STATE_SYN_SENT &&
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d005      	beq.n	8004f4e <tcpUpdateEvents+0x1fe>
   {
      //Readability can also indicate that a request to close
      //the socket has been received from the peer
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	63da      	str	r2, [r3, #60]	; 0x3c
   }

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d011      	beq.n	8004f7a <tcpUpdateEvents+0x22a>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d006      	beq.n	8004f6e <tcpUpdateEvents+0x21e>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f6c:	e005      	b.n	8004f7a <tcpUpdateEvents+0x22a>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	401a      	ands	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	63da      	str	r2, [r3, #60]	; 0x3c

   //Any event to signal?
   if(socket->eventFlags)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <tcpUpdateEvents+0x25c>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3334      	adds	r3, #52	; 0x34
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fb fb8f 	bl	80006b8 <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <tcpUpdateEvents+0x25c>
         osSetEvent(socket->userEvent);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fb fb86 	bl	80006b8 <osSetEvent>
   }
}
 8004fac:	bf00      	nop
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <tcpReadTxBuffer>:
 * @return Error code
 **/

error_t tcpReadTxBuffer(Socket *socket, uint32_t seqNum,
   NetBuffer *buffer, size_t length)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
   error_t error;

   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8004fd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fd6:	fb02 f201 	mul.w	r2, r2, r1
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	441a      	add	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d80a      	bhi.n	8005004 <tcpReadTxBuffer+0x50>
   {
      //Copy the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fd fa0b 	bl	8002414 <netBufferConcat>
 8004ffe:	4603      	mov	r3, r0
 8005000:	82fb      	strh	r3, [r7, #22]
 8005002:	e020      	b.n	8005046 <tcpReadTxBuffer+0x92>
         offset, length);
   }
   else
   {
      //Copy the first part of the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f103 01ac 	add.w	r1, r3, #172	; 0xac
         offset, socket->txBufferSize - offset);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fd f9fc 	bl	8002414 <netBufferConcat>
 800501c:	4603      	mov	r3, r0
 800501e:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8005020:	8afb      	ldrh	r3, [r7, #22]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10f      	bne.n	8005046 <tcpReadTxBuffer+0x92>
      {
         //Wrap around to the beginning of the circular buffer
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f103 01ac 	add.w	r1, r3, #172	; 0xac
            0, length - socket->txBufferSize + offset);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	1ad2      	subs	r2, r2, r3
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4413      	add	r3, r2
 800503a:	2200      	movs	r2, #0
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fd f9e9 	bl	8002414 <netBufferConcat>
 8005042:	4603      	mov	r3, r0
 8005044:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 8005046:	8afb      	ldrh	r3, [r7, #22]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <tcpWriteRxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteRxBuffer(Socket *socket, uint32_t seqNum,
   const NetBuffer *data, size_t dataOffset, size_t length)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 800506e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005072:	fb02 f201 	mul.w	r2, r2, r1
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	441a      	add	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005086:	429a      	cmp	r2, r3
 8005088:	d80a      	bhi.n	80050a0 <tcpWriteRxBuffer+0x50>
   {
      //Copy the payload
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 7098 	add.w	r0, r3, #304	; 0x130
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6979      	ldr	r1, [r7, #20]
 800509a:	f7fd fa56 	bl	800254a <netBufferCopy>
         offset, data, dataOffset, socket->rxBufferSize - offset);
      //Wrap around to the beginning of the circular buffer
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
         dataOffset + socket->rxBufferSize - offset, length - socket->rxBufferSize + offset);
   }
}
 800509e:	e024      	b.n	80050ea <tcpWriteRxBuffer+0x9a>
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 7098 	add.w	r0, r3, #304	; 0x130
         offset, data, dataOffset, socket->rxBufferSize - offset);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6979      	ldr	r1, [r7, #20]
 80050b8:	f7fd fa47 	bl	800254a <netBufferCopy>
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 7098 	add.w	r0, r3, #304	; 0x130
         dataOffset + socket->rxBufferSize - offset, length - socket->rxBufferSize + offset);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	441a      	add	r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad1      	subs	r1, r2, r3
         dataOffset + socket->rxBufferSize - offset, length - socket->rxBufferSize + offset);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80050d6:	6a3a      	ldr	r2, [r7, #32]
 80050d8:	1ad2      	subs	r2, r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	4413      	add	r3, r2
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	460b      	mov	r3, r1
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	2100      	movs	r1, #0
 80050e6:	f7fd fa30 	bl	800254a <netBufferCopy>
}
 80050ea:	bf00      	nop
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <tcpDumpHeader>:
 * @param[in] irs Initial receive sequence number (needed to compute relative ACK number)
 **/

void tcpDumpHeader(const TcpHeader *segment, size_t length, uint32_t iss,
   uint32_t irs)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	603b      	str	r3, [r7, #0]
      (segment->flags & TCP_FLAG_ACK) ? 'A' : '-',
      (segment->flags & TCP_FLAG_URG) ? 'U' : '-',
      ntohl(segment->seqNum), ntohl(segment->seqNum) - iss,
      ntohl(segment->ackNum), ntohl(segment->ackNum) - irs,
      ntohs(segment->window), length);
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <tcpTick>:
 * FIN-WAIT-2 timer and TIME-WAIT timer)
 *
 **/

void tcpTick(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
   uint_t i;
   uint_t n;
   uint_t u;

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e193      	b.n	8005440 <tcpTick+0x334>
   {
      //Shortcut to the current socket
      Socket *socket = socketTable + i;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f44f 720d 	mov.w	r2, #564	; 0x234
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	4aa2      	ldr	r2, [pc, #648]	; (80053ac <tcpTick+0x2a0>)
 8005124:	4413      	add	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
      //Check socket type
      if(socket->type != SOCKET_TYPE_STREAM)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b01      	cmp	r3, #1
 800512e:	f040 817f 	bne.w	8005430 <tcpTick+0x324>
         continue;
      //Check the current state of the TCP state machine
      if(socket->state == TCP_STATE_CLOSED)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 817b 	beq.w	8005434 <tcpTick+0x328>
         continue;

      //Is there any packet in the retransmission queue?
      if(socket->retransmitQueue != NULL)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d06c      	beq.n	8005222 <tcpTick+0x116>
      {
         //Retransmission timeout?
         if(tcpTimerElapsed(&socket->retransmitTimer))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f9ab 	bl	80054aa <tcpTimerElapsed>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d063      	beq.n	8005222 <tcpTick+0x116>
         {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //When a TCP sender detects segment loss using the retransmission
            //timer and the given segment has not yet been resent by way of
            //the retransmission timer, the value of ssthresh must be updated
            if(!socket->retransmitCount)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d113      	bne.n	800518c <tcpTick+0x80>
            {
               //Amount of data that has been sent but not yet acknowledged
               uint_t flightSize = socket->sndNxt - socket->sndUna;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	60bb      	str	r3, [r7, #8]
               //Adjust ssthresh value
               socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	461a      	mov	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	4293      	cmp	r3, r2
 8005180:	bf38      	it	cc
 8005182:	4613      	movcc	r3, r2
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
            }

            //Furthermore, upon a timeout cwnd must be set to no more than
            //the loss window, LW, which equals 1 full-sized segment
            socket->cwnd = MIN(TCP_LOSS_WINDOW * socket->smss, socket->txBufferSize);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8005198:	4293      	cmp	r3, r2
 800519a:	bf28      	it	cs
 800519c:	4613      	movcs	r3, r2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

            //After a retransmit timeout, record the highest sequence number
            //transmitted in the variable recover
            socket->recover = socket->sndNxt - 1;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051aa:	1e5a      	subs	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

            //Enter the fast loss recovery procedure
            socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
#endif
            //Make sure the maximum number of retransmissions has not been reached
            if(socket->retransmitCount < TCP_MAX_RETRIES)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d820      	bhi.n	8005206 <tcpTick+0xfa>
                  formatSystemTime(osGetSystemTime(), NULL), socket->retransmitCount + 1,
                  socket->retransmitQueue->length);

               //Retransmit the earliest segment that has not been
               //acknowledged by the TCP receiver
               tcpRetransmitSegment(socket);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fc17 	bl	80049f8 <tcpRetransmitSegment>

               //Use exponential back-off algorithm to calculate the new RTO
               socket->rto = MIN(socket->rto * 2, TCP_MAX_RTO);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80051d6:	429a      	cmp	r2, r3
 80051d8:	bf28      	it	cs
 80051da:	461a      	movcs	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
               //Restart retransmission timer
               tcpTimerStart(&socket->retransmitTimer, socket->rto);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f000 f92d 	bl	8005450 <tcpTimerStart>
               //Increment retransmission counter
               socket->retransmitCount++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8005204:	e009      	b.n	800521a <tcpTick+0x10e>
            }
            else
            {
               //The maximum number of retransmissions has been exceeded
               tcpChangeState(socket, TCP_STATE_CLOSED);
 8005206:	2100      	movs	r1, #0
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff fd7b 	bl	8004d04 <tcpChangeState>
               //Turn off the retransmission timer
               tcpTimerStop(&socket->retransmitTimer);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005214:	4618      	mov	r0, r3
 8005216:	f000 f92f 	bl	8005478 <tcpTimerStop>
            }

            //TCP must use Karn's algorithm for taking RTT samples. That is, RTT
            //samples must not be made using segments that were retransmitted
            socket->rttBusy = FALSE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         }
      }

      //Check the current state of the TCP state machine
      if(socket->state == TCP_STATE_CLOSED)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8105 	beq.w	8005438 <tcpTick+0x32c>
         continue;

      //The persist timer is used when the remote host advertises
      //a window size of zero
      if(!socket->sndWnd && socket->wndProbeInterval)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005234:	2b00      	cmp	r3, #0
 8005236:	d142      	bne.n	80052be <tcpTick+0x1b2>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d03d      	beq.n	80052be <tcpTick+0x1b2>
      {
         //Time to send a new probe?
         if(tcpTimerElapsed(&socket->persistTimer))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005248:	4618      	mov	r0, r3
 800524a:	f000 f92e 	bl	80054aa <tcpTimerElapsed>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d034      	beq.n	80052be <tcpTick+0x1b2>
         {
            //Make sure the maximum number of retransmissions has not been reached
            if(socket->wndProbeCount < TCP_MAX_RETRIES)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800525a:	2b04      	cmp	r3, #4
 800525c:	d82b      	bhi.n	80052b6 <tcpTick+0x1aa>
               //Debug message
               TRACE_INFO("%s: TCP zero window probe #%u...\r\n",
                  formatSystemTime(osGetSystemTime(), NULL), socket->wndProbeCount + 1);

               //Zero window probes usually have the sequence number one less than expected
               tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt - 1, socket->rcvNxt, 0, FALSE);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005262:	1e5a      	subs	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005268:	2300      	movs	r3, #0
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	2300      	movs	r3, #0
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	460b      	mov	r3, r1
 8005272:	2110      	movs	r1, #16
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7fe fac7 	bl	8003808 <tcpSendSegment>
               //The interval between successive probes should be increased exponentially
               socket->wndProbeInterval = MIN(socket->wndProbeInterval * 2, TCP_MAX_PROBE_INTERVAL);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005286:	429a      	cmp	r2, r3
 8005288:	bf28      	it	cs
 800528a:	461a      	movcs	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
               //Restart the persist timer
               tcpTimerStart(&socket->persistTimer, socket->wndProbeInterval);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f000 f8d5 	bl	8005450 <tcpTimerStart>
               //Increment window probe counter
               socket->wndProbeCount++;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 80052b4:	e003      	b.n	80052be <tcpTick+0x1b2>
            }
            else
            {
               //Enter CLOSED state
               tcpChangeState(socket, TCP_STATE_CLOSED);
 80052b6:	2100      	movs	r1, #0
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fd23 	bl	8004d04 <tcpChangeState>

      //To avoid a deadlock, it is necessary to have a timeout to force
      //transmission of data, overriding the SWS avoidance algorithm. In
      //practice, this timeout should seldom occur (refer to RFC 1122,
      //section 4.2.3.4)
      if(socket->state == TCP_STATE_ESTABLISHED || socket->state == TCP_STATE_CLOSE_WAIT)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d004      	beq.n	80052d2 <tcpTick+0x1c6>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ce:	2b05      	cmp	r3, #5
 80052d0:	d17f      	bne.n	80053d2 <tcpTick+0x2c6>
      {
         //The override timeout occurred?
         if(socket->sndUser && tcpTimerElapsed(&socket->overrideTimer))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d07a      	beq.n	80053d2 <tcpTick+0x2c6>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f8e1 	bl	80054aa <tcpTimerElapsed>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d071      	beq.n	80053d2 <tcpTick+0x2c6>
         {
            //The amount of data that can be sent at any given time is
            //limited by the receiver window and the congestion window
            n = MIN(socket->sndWnd, socket->txBufferSize);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 80052fa:	4293      	cmp	r3, r2
 80052fc:	bf28      	it	cs
 80052fe:	4613      	movcs	r3, r2
 8005300:	607b      	str	r3, [r7, #4]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //Check the congestion window
            n = MIN(n, socket->cwnd);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8005308:	461a      	mov	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4293      	cmp	r3, r2
 800530e:	bf28      	it	cs
 8005310:	4613      	movcs	r3, r2
 8005312:	607b      	str	r3, [r7, #4]
#endif
            //Retrieve the size of the usable window
            u = n - (socket->sndNxt - socket->sndUna);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	4413      	add	r3, r2
 8005322:	613b      	str	r3, [r7, #16]

            //Send as much data as possible
            while(socket->sndUser > 0)
 8005324:	e03a      	b.n	800539c <tcpTick+0x290>
            {
               //The usable window size may become zero or negative,
               //preventing packet transmission
               if((int_t) u <= 0)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	dd3d      	ble.n	80053a8 <tcpTick+0x29c>
                  break;

               //Calculate the number of bytes to send at a time
               n = MIN(u, socket->sndUser);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005332:	461a      	mov	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4293      	cmp	r3, r2
 8005338:	bf28      	it	cs
 800533a:	4613      	movcs	r3, r2
 800533c:	607b      	str	r3, [r7, #4]
               n = MIN(n, socket->smss);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005344:	461a      	mov	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4293      	cmp	r3, r2
 800534a:	bf28      	it	cs
 800534c:	4613      	movcs	r3, r2
 800534e:	607b      	str	r3, [r7, #4]

               //Send TCP segment
               error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005358:	2301      	movs	r3, #1
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	460b      	mov	r3, r1
 8005362:	2118      	movs	r1, #24
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7fe fa4f 	bl	8003808 <tcpSendSegment>
 800536a:	4603      	mov	r3, r0
 800536c:	807b      	strh	r3, [r7, #2]
                  socket->sndNxt, socket->rcvNxt, n, TRUE);
               //Failed to send TCP segment?
               if(error)
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d11d      	bne.n	80053b0 <tcpTick+0x2a4>
                  break;

               //Advance SND.NXT pointer
               socket->sndNxt += n;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	441a      	add	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	665a      	str	r2, [r3, #100]	; 0x64
               //Adjust the number of bytes buffered but not yet sent
               socket->sndUser -= n;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	b29b      	uxth	r3, r3
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
               //Update the size of the usable window
               u -= n;
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	613b      	str	r3, [r7, #16]
            while(socket->sndUser > 0)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1bf      	bne.n	8005326 <tcpTick+0x21a>
 80053a6:	e004      	b.n	80053b2 <tcpTick+0x2a6>
                  break;
 80053a8:	bf00      	nop
 80053aa:	e002      	b.n	80053b2 <tcpTick+0x2a6>
 80053ac:	20001e6c 	.word	0x20001e6c
                  break;
 80053b0:	bf00      	nop
            }

            //Check whether the transmitter can accept more data
            tcpUpdateEvents(socket);
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff fccc 	bl	8004d50 <tcpUpdateEvents>

            //Restart override timer if necessary
            if(socket->sndUser > 0)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d007      	beq.n	80053d2 <tcpTick+0x2c6>
               tcpTimerStart(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80053c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f83f 	bl	8005450 <tcpTimerStart>
         }
      }

      //The FIN-WAIT-2 timer prevents the connection
      //from staying in the FIN-WAIT-2 state forever
      if(socket->state == TCP_STATE_FIN_WAIT_2)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d10c      	bne.n	80053f6 <tcpTick+0x2ea>
      {
         //Maximum FIN-WAIT-2 time has elapsed?
         if(tcpTimerElapsed(&socket->finWait2Timer))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f861 	bl	80054aa <tcpTimerElapsed>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <tcpTick+0x2ea>
         {
            //Debug message
            TRACE_WARNING("TCP FIN-WAIT-2 timer elapsed...\r\n");
            //Enter CLOSED state
            tcpChangeState(socket, TCP_STATE_CLOSED);
 80053ee:	2100      	movs	r1, #0
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f7ff fc87 	bl	8004d04 <tcpChangeState>
         }
      }

      //TIME-WAIT timer
      if(socket->state == TCP_STATE_TIME_WAIT)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053fc:	2b0a      	cmp	r3, #10
 80053fe:	d11c      	bne.n	800543a <tcpTick+0x32e>
      {
         //2MSL time has elapsed?
         if(tcpTimerElapsed(&socket->timeWaitTimer))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f84f 	bl	80054aa <tcpTimerElapsed>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d013      	beq.n	800543a <tcpTick+0x32e>
         {
            //Debug message
            TRACE_WARNING("TCP 2MSL timer elapsed (socket %u)...\r\n", i);
            //Enter CLOSED state
            tcpChangeState(socket, TCP_STATE_CLOSED);
 8005412:	2100      	movs	r1, #0
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff fc75 	bl	8004d04 <tcpChangeState>

            //Dispose the socket if the user does not have the ownership anymore
            if(!socket->ownedFlag)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <tcpTick+0x32e>
            {
               //Delete the TCB
               tcpDeleteControlBlock(socket);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff f884 	bl	8004530 <tcpDeleteControlBlock>
               //Mark the socket as closed
               socket->type = SOCKET_TYPE_UNUSED;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	605a      	str	r2, [r3, #4]
 800542e:	e004      	b.n	800543a <tcpTick+0x32e>
         continue;
 8005430:	bf00      	nop
 8005432:	e002      	b.n	800543a <tcpTick+0x32e>
         continue;
 8005434:	bf00      	nop
 8005436:	e000      	b.n	800543a <tcpTick+0x32e>
         continue;
 8005438:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	3301      	adds	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b09      	cmp	r3, #9
 8005444:	f67f ae68 	bls.w	8005118 <tcpTick+0xc>
            }
         }
      }
   }
}
 8005448:	bf00      	nop
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <tcpTimerStart>:
 * @param[in] timer Pointer to the timer structure
 * @param[in] delay Time interval
 **/

void tcpTimerStart(TcpTimer *timer, systime_t delay)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
   //Start timer
   timer->startTime = osGetSystemTime();
 800545a:	f7fb f9a0 	bl	800079e <osGetSystemTime>
 800545e:	4602      	mov	r2, r0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	605a      	str	r2, [r3, #4]
   timer->interval = delay;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	609a      	str	r2, [r3, #8]

   //The timer is now running...
   timer->running = TRUE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <tcpTimerStop>:
 * @brief Stop TCP timer
 * @param[in] timer Pointer to the timer structure
 **/

void tcpTimerStop(TcpTimer *timer)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
   //Stop timer
   timer->running = FALSE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <tcpTimerRunning>:
 * @param[in] timer Pointer to the timer structure
 * @return Timer state
 **/

bool_t tcpTimerRunning(TcpTimer *timer)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
   //Check whether the timer is running
   return timer->running;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <tcpTimerElapsed>:
 * @param[in] timer Pointer to the timer structure
 * @return Timer state
 **/

bool_t tcpTimerElapsed(TcpTimer *timer)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Check whether the timer is running
   if(!timer->running)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <tcpTimerElapsed+0x14>
      return FALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e00e      	b.n	80054dc <tcpTimerElapsed+0x32>

   //Get current time
   time = osGetSystemTime();
 80054be:	f7fb f96e 	bl	800079e <osGetSystemTime>
 80054c2:	60f8      	str	r0, [r7, #12]

   //Check whether the specified time interval has elapsed
   if(timeCompare(time, timer->startTime + timer->interval) >= 0)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4413      	add	r3, r2
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	db01      	blt.n	80054da <tcpTimerElapsed+0x30>
      return TRUE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <tcpTimerElapsed+0x32>
   else
      return FALSE;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <udpInit>:
 * @brief UDP related initialization
 * @return Error code
 **/

error_t udpInit(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   udpDynamicPort = 0;
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <udpInit+0x2c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	801a      	strh	r2, [r3, #0]

   //Create a mutex to prevent simultaneous access to the callback table
   if(!osCreateMutex(&udpCallbackMutex))
 80054ee:	4809      	ldr	r0, [pc, #36]	; (8005514 <udpInit+0x30>)
 80054f0:	f7fb f920 	bl	8000734 <osCreateMutex>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <udpInit+0x1a>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 80054fa:	2365      	movs	r3, #101	; 0x65
 80054fc:	e005      	b.n	800550a <udpInit+0x26>
   }

   //Initialize callback table
   memset(udpCallbackTable, 0, sizeof(udpCallbackTable));
 80054fe:	22a0      	movs	r2, #160	; 0xa0
 8005500:	2100      	movs	r1, #0
 8005502:	4805      	ldr	r0, [pc, #20]	; (8005518 <udpInit+0x34>)
 8005504:	f012 fee4 	bl	80182d0 <memset>

   //Successful initialization
   return NO_ERROR;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	2000012e 	.word	0x2000012e
 8005514:	20003478 	.word	0x20003478
 8005518:	2000347c 	.word	0x2000347c

0800551c <udpProcessDatagram>:
 * @return Error code
 **/

error_t udpProcessDatagram(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, const NetBuffer *buffer, size_t offset)
{
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b08f      	sub	sp, #60	; 0x3c
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
   Socket *socket;
   SocketQueueItem *queueItem;
   NetBuffer *p;

   //Retrieve the length of the UDP datagram
   length = netBufferGetLength(buffer) - offset;
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc fe77 	bl	800221e <netBufferGetLength>
 8005530:	4602      	mov	r2, r0
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	623b      	str	r3, [r7, #32]

   //Ensure the UDP header is valid
   if(length < sizeof(UdpHeader))
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	2b07      	cmp	r3, #7
 800553c:	d801      	bhi.n	8005542 <udpProcessDatagram+0x26>
      //reasons other than the lack of an application at the destination port
      MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
      UDP_MIB_INC_COUNTER32(udpInErrors, 1);

      //Report an error
      return ERROR_INVALID_HEADER;
 800553e:	23d4      	movs	r3, #212	; 0xd4
 8005540:	e129      	b.n	8005796 <udpProcessDatagram+0x27a>
   }

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fc ff32 	bl	80023ae <netBufferAt>
 800554a:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(header == NULL)
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <udpProcessDatagram+0x3a>
      return ERROR_FAILURE;
 8005552:	2301      	movs	r3, #1
 8005554:	e11f      	b.n	8005796 <udpProcessDatagram+0x27a>

   //Debug message
   TRACE_INFO("UDP datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 8005556:	69f8      	ldr	r0, [r7, #28]
 8005558:	f000 fac0 	bl	8005adc <udpDumpHeader>

   //When UDP runs over IPv6, the checksum is mandatory
   if(header->checksum != 0x0000 || pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	88db      	ldrh	r3, [r3, #6]
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <udpProcessDatagram+0x52>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b28      	cmp	r3, #40	; 0x28
 800556c:	d10e      	bne.n	800558c <udpProcessDatagram+0x70>
   {
      //Verify UDP checksum
      if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	1d18      	adds	r0, r3, #4
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	f7fc f992 	bl	80018a6 <ipCalcUpperLayerChecksumEx>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <udpProcessDatagram+0x70>
         //reasons other than the lack of an application at the destination port
         MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
         UDP_MIB_INC_COUNTER32(udpInErrors, 1);

         //Report an error
         return ERROR_WRONG_CHECKSUM;
 8005588:	23d5      	movs	r3, #213	; 0xd5
 800558a:	e104      	b.n	8005796 <udpProcessDatagram+0x27a>
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800558c:	2300      	movs	r3, #0
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005590:	e065      	b.n	800565e <udpProcessDatagram+0x142>
   {
      //Point to the current socket
      socket = socketTable + i;
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	f44f 720d 	mov.w	r2, #564	; 0x234
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	4a80      	ldr	r2, [pc, #512]	; (80057a0 <udpProcessDatagram+0x284>)
 800559e:	4413      	add	r3, r2
 80055a0:	62bb      	str	r3, [r7, #40]	; 0x28

      //UDP socket found?
      if(socket->type != SOCKET_TYPE_DGRAM)
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d147      	bne.n	800563a <udpProcessDatagram+0x11e>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <udpProcessDatagram+0xa0>
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d140      	bne.n	800563e <udpProcessDatagram+0x122>
         continue;
      //Check destination port number
      if(socket->localPort == 0 || socket->localPort != ntohs(header->destPort))
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	8b1b      	ldrh	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d03e      	beq.n	8005642 <udpProcessDatagram+0x126>
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	8b1c      	ldrh	r4, [r3, #24]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	885b      	ldrh	r3, [r3, #2]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fa ffe6 	bl	80005a0 <swapInt16>
 80055d4:	4603      	mov	r3, r0
 80055d6:	429c      	cmp	r4, r3
 80055d8:	d133      	bne.n	8005642 <udpProcessDatagram+0x126>
         continue;
      //Source port number filtering
      if(socket->remotePort != 0 && socket->remotePort != ntohs(header->srcPort))
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <udpProcessDatagram+0xdc>
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fa ffd7 	bl	80005a0 <swapInt16>
 80055f2:	4603      	mov	r3, r0
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d126      	bne.n	8005646 <udpProcessDatagram+0x12a>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d124      	bne.n	800564a <udpProcessDatagram+0x12e>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <udpProcessDatagram+0x100>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b04      	cmp	r3, #4
 800560e:	d11e      	bne.n	800564e <udpProcessDatagram+0x132>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	695a      	ldr	r2, [r3, #20]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	429a      	cmp	r2, r3
 800561a:	d11a      	bne.n	8005652 <udpProcessDatagram+0x136>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d020      	beq.n	8005666 <udpProcessDatagram+0x14a>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d114      	bne.n	8005656 <udpProcessDatagram+0x13a>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d016      	beq.n	8005666 <udpProcessDatagram+0x14a>
               continue;
 8005638:	e00e      	b.n	8005658 <udpProcessDatagram+0x13c>
         continue;
 800563a:	bf00      	nop
 800563c:	e00c      	b.n	8005658 <udpProcessDatagram+0x13c>
         continue;
 800563e:	bf00      	nop
 8005640:	e00a      	b.n	8005658 <udpProcessDatagram+0x13c>
         continue;
 8005642:	bf00      	nop
 8005644:	e008      	b.n	8005658 <udpProcessDatagram+0x13c>
         continue;
 8005646:	bf00      	nop
 8005648:	e006      	b.n	8005658 <udpProcessDatagram+0x13c>
      else
#endif
      //Invalid packet received?
      {
         //This should never occur...
         continue;
 800564a:	bf00      	nop
 800564c:	e004      	b.n	8005658 <udpProcessDatagram+0x13c>
               continue;
 800564e:	bf00      	nop
 8005650:	e002      	b.n	8005658 <udpProcessDatagram+0x13c>
               continue;
 8005652:	bf00      	nop
 8005654:	e000      	b.n	8005658 <udpProcessDatagram+0x13c>
               continue;
 8005656:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	3301      	adds	r3, #1
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b09      	cmp	r3, #9
 8005662:	d996      	bls.n	8005592 <udpProcessDatagram+0x76>
 8005664:	e000      	b.n	8005668 <udpProcessDatagram+0x14c>
      }

      //The current socket meets all the criteria
      break;
 8005666:	bf00      	nop
   }

   //Point to the payload
   offset += sizeof(UdpHeader);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	3308      	adds	r3, #8
 800566c:	603b      	str	r3, [r7, #0]
   length -= sizeof(UdpHeader);
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	3b08      	subs	r3, #8
 8005672:	623b      	str	r3, [r7, #32]

   //No matching socket found?
   if(i >= SOCKET_MAX_COUNT)
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	2b09      	cmp	r3, #9
 8005678:	d90b      	bls.n	8005692 <udpProcessDatagram+0x176>
   {
      //Invoke user callback, if any
      error = udpInvokeRxCallback(interface, pseudoHeader, header, buffer, offset);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f9cf 	bl	8005a28 <udpInvokeRxCallback>
 800568a:	4603      	mov	r3, r0
 800568c:	82fb      	strh	r3, [r7, #22]
      //Return status code
      return error;
 800568e:	8afb      	ldrh	r3, [r7, #22]
 8005690:	e081      	b.n	8005796 <udpProcessDatagram+0x27a>
   }

   //Empty receive queue?
   if(!socket->receiveQueue)
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8005698:	2b00      	cmp	r3, #0
 800569a:	d118      	bne.n	80056ce <udpProcessDatagram+0x1b2>
   {
      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	3320      	adds	r3, #32
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fc fd7a 	bl	800219a <netBufferAlloc>
 80056a6:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00c      	beq.n	80056c8 <udpProcessDatagram+0x1ac>
      {
         //Point to the newly created item
         queueItem = netBufferAt(p, 0);
 80056ae:	2100      	movs	r1, #0
 80056b0:	69b8      	ldr	r0, [r7, #24]
 80056b2:	f7fc fe7c 	bl	80023ae <netBufferAt>
 80056b6:	6278      	str	r0, [r7, #36]	; 0x24
         queueItem->buffer = p;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	619a      	str	r2, [r3, #24]
         //Add the newly created item to the queue
         socket->receiveQueue = queueItem;
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
 80056c6:	e031      	b.n	800572c <udpProcessDatagram+0x210>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
 80056cc:	e02e      	b.n	800572c <udpProcessDatagram+0x210>
      }
   }
   else
   {
      //Point to the very first item
      queueItem = socket->receiveQueue;
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
      //Reach the last item in the receive queue
      for(i = 1; queueItem->next; i++)
 80056d6:	2301      	movs	r3, #1
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056da:	e005      	b.n	80056e8 <udpProcessDatagram+0x1cc>
         queueItem = queueItem->next;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
      for(i = 1; queueItem->next; i++)
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	3301      	adds	r3, #1
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f5      	bne.n	80056dc <udpProcessDatagram+0x1c0>

      //Make sure the receive queue is not full
      if(i >= UDP_RX_QUEUE_SIZE)
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d901      	bls.n	80056fa <udpProcessDatagram+0x1de>
         return ERROR_RECEIVE_QUEUE_FULL;
 80056f6:	23db      	movs	r3, #219	; 0xdb
 80056f8:	e04d      	b.n	8005796 <udpProcessDatagram+0x27a>

      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	3320      	adds	r3, #32
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fc fd4b 	bl	800219a <netBufferAlloc>
 8005704:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <udpProcessDatagram+0x20c>
      {
         //Add the newly created item to the queue
         queueItem->next = netBufferAt(p, 0);
 800570c:	2100      	movs	r1, #0
 800570e:	69b8      	ldr	r0, [r7, #24]
 8005710:	f7fc fe4d 	bl	80023ae <netBufferAt>
 8005714:	4602      	mov	r2, r0
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
         queueItem->buffer = p;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	619a      	str	r2, [r3, #24]
 8005726:	e001      	b.n	800572c <udpProcessDatagram+0x210>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8005728:	2300      	movs	r3, #0
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
      }
   }

   //Failed to allocate memory?
   if(queueItem == NULL)
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <udpProcessDatagram+0x21a>
      return ERROR_OUT_OF_MEMORY;
 8005732:	2364      	movs	r3, #100	; 0x64
 8005734:	e02f      	b.n	8005796 <udpProcessDatagram+0x27a>

   //Initialize next field
   queueItem->next = NULL;
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
   //Record the source port number
   queueItem->srcPort = ntohs(header->srcPort);
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	4618      	mov	r0, r3
 8005744:	f7fa ff2c 	bl	80005a0 <swapInt16>
 8005748:	4603      	mov	r3, r0
 800574a:	461a      	mov	r2, r3
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	819a      	strh	r2, [r3, #12]

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 remote address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b0c      	cmp	r3, #12
 8005756:	d10d      	bne.n	8005774 <udpProcessDatagram+0x258>
   {
      //Save the source IPv4 address
      queueItem->srcIpAddr.length = sizeof(Ipv4Addr);
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	2204      	movs	r2, #4
 800575c:	605a      	str	r2, [r3, #4]
      queueItem->srcIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	609a      	str	r2, [r3, #8]
      //Save the destination IPv4 address
      queueItem->destIpAddr.length = sizeof(Ipv4Addr);
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	2204      	movs	r2, #4
 800576a:	611a      	str	r2, [r3, #16]
      queueItem->destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	615a      	str	r2, [r3, #20]
      queueItem->destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
   }
#endif

   //Offset to the payload
   queueItem->offset = sizeof(SocketQueueItem);
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	2220      	movs	r2, #32
 8005778:	61da      	str	r2, [r3, #28]
   //Copy the payload
   netBufferCopy(queueItem->buffer, queueItem->offset, buffer, offset, length);
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	6998      	ldr	r0, [r3, #24]
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	69d9      	ldr	r1, [r3, #28]
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	f7fc fede 	bl	800254a <netBufferCopy>

   //Notify user that data is available
   udpUpdateEvents(socket);
 800578e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005790:	f000 f8cd 	bl	800592e <udpUpdateEvents>
   MIB2_INC_COUNTER32(udpGroup.udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);

   //Successful processing
   return NO_ERROR;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3734      	adds	r7, #52	; 0x34
 800579a:	46bd      	mov	sp, r7
 800579c:	bd90      	pop	{r4, r7, pc}
 800579e:	bf00      	nop
 80057a0:	20001e6c 	.word	0x20001e6c

080057a4 <udpSendDatagramEx>:
 **/

error_t udpSendDatagramEx(NetInterface *interface, const IpAddr *srcIpAddr,
   uint16_t srcPort, const IpAddr *destIpAddr, uint16_t destPort,
   NetBuffer *buffer, size_t offset, uint_t flags)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08e      	sub	sp, #56	; 0x38
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	80fb      	strh	r3, [r7, #6]
   size_t length;
   UdpHeader *header;
   IpPseudoHeader pseudoHeader;

   //Make room for the UDP header
   offset -= sizeof(UdpHeader);
 80057b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b6:	3b08      	subs	r3, #8
 80057b8:	643b      	str	r3, [r7, #64]	; 0x40
   //Retrieve the length of the datagram
   length = netBufferGetLength(buffer) - offset;
 80057ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80057bc:	f7fc fd2f 	bl	800221e <netBufferGetLength>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 80057c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80057cc:	f7fc fdef 	bl	80023ae <netBufferAt>
 80057d0:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(header == NULL)
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <udpSendDatagramEx+0x38>
      return ERROR_FAILURE;
 80057d8:	2301      	movs	r3, #1
 80057da:	e088      	b.n	80058ee <udpSendDatagramEx+0x14a>

   //Format UDP header
   header->srcPort = htons(srcPort);
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fa fede 	bl	80005a0 <swapInt16>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	801a      	strh	r2, [r3, #0]
   header->destPort = htons(destPort);
 80057ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fa fed6 	bl	80005a0 <swapInt16>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461a      	mov	r2, r3
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	805a      	strh	r2, [r3, #2]
   header->length = htons(length);
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	b29b      	uxth	r3, r3
 8005800:	4618      	mov	r0, r3
 8005802:	f7fa fecd 	bl	80005a0 <swapInt16>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	809a      	strh	r2, [r3, #4]
   header->checksum = 0;
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	2200      	movs	r2, #0
 8005812:	719a      	strb	r2, [r3, #6]
 8005814:	2200      	movs	r2, #0
 8005816:	71da      	strb	r2, [r3, #7]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(destIpAddr->length == sizeof(Ipv4Addr))
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b04      	cmp	r3, #4
 800581e:	d14e      	bne.n	80058be <udpSendDatagramEx+0x11a>
   {
      //Valid source IP address?
      if(srcIpAddr != NULL && srcIpAddr->length == sizeof(Ipv4Addr))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <udpSendDatagramEx+0x92>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d103      	bne.n	8005836 <udpSendDatagramEx+0x92>
      {
         //Copy the source IP address
         pseudoHeader.ipv4Data.srcAddr = srcIpAddr->ipv4Addr;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	e01d      	b.n	8005872 <udpSendDatagramEx+0xce>
      {
         Ipv4Addr ipAddr;

         //Select the source IPv4 address and the relevant network interface
         //to use when sending data to the specified destination host
         error = ipv4SelectSourceAddr(&interface, destIpAddr->ipv4Addr,
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	f107 0210 	add.w	r2, r7, #16
 800583e:	f107 030c 	add.w	r3, r7, #12
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fc50 	bl	80070e8 <ipv4SelectSourceAddr>
 8005848:	4603      	mov	r3, r0
 800584a:	84fb      	strh	r3, [r7, #38]	; 0x26
            &ipAddr);

         //Check status code
         if(!error)
 800584c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <udpSendDatagramEx+0xb4>
         {
            //Copy the resulting source IP address
            pseudoHeader.ipv4Data.srcAddr = ipAddr;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	e00c      	b.n	8005872 <udpSendDatagramEx+0xce>
         }
         else
         {
            //Handle the special case where the destination address is the
            //broadcast address
            if(destIpAddr->ipv4Addr == IPV4_BROADCAST_ADDR && interface != NULL)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005860:	d105      	bne.n	800586e <udpSendDatagramEx+0xca>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <udpSendDatagramEx+0xca>
            {
               //Use the unspecified address as source address
               pseudoHeader.ipv4Data.srcAddr = IPV4_UNSPECIFIED_ADDR;
 8005868:	2300      	movs	r3, #0
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	e001      	b.n	8005872 <udpSendDatagramEx+0xce>
            }
            else
            {
               //Source address selection failed
               return error;
 800586e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005870:	e03d      	b.n	80058ee <udpSendDatagramEx+0x14a>
            }
         }
      }

      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8005872:	230c      	movs	r3, #12
 8005874:	617b      	str	r3, [r7, #20]
      pseudoHeader.ipv4Data.destAddr = destIpAddr->ipv4Addr;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	61fb      	str	r3, [r7, #28]
      pseudoHeader.ipv4Data.reserved = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	f887 3020 	strb.w	r3, [r7, #32]
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_UDP;
 8005882:	2311      	movs	r3, #17
 8005884:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      pseudoHeader.ipv4Data.length = htons(length);
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	b29b      	uxth	r3, r3
 800588c:	4618      	mov	r0, r3
 800588e:	f7fa fe87 	bl	80005a0 <swapInt16>
 8005892:	4603      	mov	r3, r0
 8005894:	847b      	strh	r3, [r7, #34]	; 0x22

      //Calculate UDP header checksum
      header->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 8005896:	f107 0314 	add.w	r3, r7, #20
 800589a:	1d18      	adds	r0, r3, #4
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058a4:	210c      	movs	r1, #12
 80058a6:	f7fb fffe 	bl	80018a6 <ipCalcUpperLayerChecksumEx>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	80da      	strh	r2, [r3, #6]
   }

   //If the computed checksum is zero, it is transmitted as all ones. An all
   //zero transmitted checksum value means that the transmitter generated no
   //checksum
   if(header->checksum == 0x0000)
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	88db      	ldrh	r3, [r3, #6]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <udpSendDatagramEx+0x12c>
 80058bc:	e001      	b.n	80058c2 <udpSendDatagramEx+0x11e>
      return ERROR_FAILURE;
 80058be:	2301      	movs	r3, #1
 80058c0:	e015      	b.n	80058ee <udpSendDatagramEx+0x14a>
   {
      header->checksum = 0xFFFF;
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058c8:	719a      	strb	r2, [r3, #6]
 80058ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ce:	71da      	strb	r2, [r3, #7]
   UDP_MIB_INC_COUNTER64(udpHCOutDatagrams, 1);

   //Debug message
   TRACE_INFO("Sending UDP datagram (%" PRIuSIZE " bytes)\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 80058d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d2:	f000 f903 	bl	8005adc <udpDumpHeader>

   //Send UDP datagram
   error = ipSendDatagram(interface, &pseudoHeader, buffer, offset, flags);
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f107 0114 	add.w	r1, r7, #20
 80058dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058e4:	f7fb feb8 	bl	8001658 <ipSendDatagram>
 80058e8:	4603      	mov	r3, r0
 80058ea:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Return status code
   return error;
 80058ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3730      	adds	r7, #48	; 0x30
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <udpAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *udpAllocBuffer(size_t length, size_t *offset)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;

   //Allocate a buffer to hold the UDP header and the payload
   buffer = ipAllocBuffer(length + sizeof(UdpHeader), offset);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3308      	adds	r3, #8
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fb fff6 	bl	80018f8 <ipAllocBuffer>
 800590c:	60f8      	str	r0, [r7, #12]
   //Failed to allocate buffer?
   if(buffer == NULL)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <udpAllocBuffer+0x22>
      return NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	e006      	b.n	8005926 <udpAllocBuffer+0x30>

   //Offset to the first byte of the payload
   *offset += sizeof(UdpHeader);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f103 0208 	add.w	r2, r3, #8
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 8005924:	68fb      	ldr	r3, [r7, #12]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <udpUpdateEvents>:
 * @brief Update UDP related events
 * @param[in] socket Handle referencing the socket
 **/

void udpUpdateEvents(Socket *socket)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	63da      	str	r2, [r3, #60]	; 0x3c

   //The socket is marked as readable if a datagram is pending in the queue
   if(socket->receiveQueue)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <udpUpdateEvents+0x24>
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d011      	beq.n	800597e <udpUpdateEvents+0x50>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d006      	beq.n	8005972 <udpUpdateEvents+0x44>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005970:	e005      	b.n	800597e <udpUpdateEvents+0x50>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	63da      	str	r2, [r3, #60]	; 0x3c
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	401a      	ands	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	63da      	str	r2, [r3, #60]	; 0x3c

   //Any event to signal?
   if(socket->eventFlags)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <udpUpdateEvents+0x82>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3334      	adds	r3, #52	; 0x34
 8005998:	4618      	mov	r0, r3
 800599a:	f7fa fe8d 	bl	80006b8 <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d004      	beq.n	80059b0 <udpUpdateEvents+0x82>
         osSetEvent(socket->userEvent);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fa fe84 	bl	80006b8 <osSetEvent>
   }
}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <udpDetachRxCallback>:
 * @param[in] port UDP port number
 * @return Error code
 **/

error_t udpDetachRxCallback(NetInterface *interface, uint16_t port)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	807b      	strh	r3, [r7, #2]
   error_t error;
   uint_t i;
   UdpRxCallbackDesc *entry;

   //Initialize status code
   error = ERROR_FAILURE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	82fb      	strh	r3, [r7, #22]

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 80059c8:	4815      	ldr	r0, [pc, #84]	; (8005a20 <udpDetachRxCallback+0x68>)
 80059ca:	f7fa fecc 	bl	8000766 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	e01a      	b.n	8005a0a <udpDetachRxCallback+0x52>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <udpDetachRxCallback+0x6c>)
 80059da:	4413      	add	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

      //Check whether the entry is currently in used
      if(entry->callback != NULL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00e      	beq.n	8005a04 <udpDetachRxCallback+0x4c>
      {
         //Does the specified port number match the current entry?
         if(entry->port == port && entry->interface == interface)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	889b      	ldrh	r3, [r3, #4]
 80059ea:	887a      	ldrh	r2, [r7, #2]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d109      	bne.n	8005a04 <udpDetachRxCallback+0x4c>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d104      	bne.n	8005a04 <udpDetachRxCallback+0x4c>
         {
            //Unregister user callback
            entry->callback = NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	609a      	str	r2, [r3, #8]
            //A matching entry has been found
            error = NO_ERROR;
 8005a00:	2300      	movs	r3, #0
 8005a02:	82fb      	strh	r3, [r7, #22]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	3301      	adds	r3, #1
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	d9e1      	bls.n	80059d4 <udpDetachRxCallback+0x1c>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 8005a10:	4803      	ldr	r0, [pc, #12]	; (8005a20 <udpDetachRxCallback+0x68>)
 8005a12:	f7fa feb7 	bl	8000784 <osReleaseMutex>

   //Return status code
   return error;
 8005a16:	8afb      	ldrh	r3, [r7, #22]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20003478 	.word	0x20003478
 8005a24:	2000347c 	.word	0x2000347c

08005a28 <udpInvokeRxCallback>:
 * @return Error code
 **/

error_t udpInvokeRxCallback(NetInterface *interface, const IpPseudoHeader *pseudoHeader,
   const UdpHeader *header, const NetBuffer *buffer, size_t offset)
{
 8005a28:	b590      	push	{r4, r7, lr}
 8005a2a:	b08b      	sub	sp, #44	; 0x2c
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
   uint_t i;
   void *param;
   UdpRxCallbackDesc *entry;

   //Initialize status code
   error = ERROR_PORT_UNREACHABLE;
 8005a36:	23d2      	movs	r3, #210	; 0xd2
 8005a38:	83fb      	strh	r3, [r7, #30]

   //Acquire exclusive access to the callback table
   osAcquireMutex(&udpCallbackMutex);
 8005a3a:	4826      	ldr	r0, [pc, #152]	; (8005ad4 <udpInvokeRxCallback+0xac>)
 8005a3c:	f7fa fe93 	bl	8000766 <osAcquireMutex>

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8005a40:	2300      	movs	r3, #0
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	e03b      	b.n	8005abe <udpInvokeRxCallback+0x96>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <udpInvokeRxCallback+0xb0>)
 8005a4c:	4413      	add	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

      //Check whether the entry is currently in used
      if(entry->callback != NULL)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d02f      	beq.n	8005ab8 <udpInvokeRxCallback+0x90>
      {
         //Bound to a particular interface?
         if(entry->interface == NULL || entry->interface == interface)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <udpInvokeRxCallback+0x42>
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d126      	bne.n	8005ab8 <udpInvokeRxCallback+0x90>
         {
            //Does the specified port number match the current entry?
            if(entry->port == ntohs(header->destPort))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	889c      	ldrh	r4, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	885b      	ldrh	r3, [r3, #2]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fa fd93 	bl	80005a0 <swapInt16>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	429c      	cmp	r4, r3
 8005a7e:	d11b      	bne.n	8005ab8 <udpInvokeRxCallback+0x90>
            {
               //Retrieve callback parameter
               param = entry->param;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	613b      	str	r3, [r7, #16]

               //Release mutex to prevent any deadlock
               if(param == NULL)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d102      	bne.n	8005a92 <udpInvokeRxCallback+0x6a>
                  osReleaseMutex(&udpCallbackMutex);
 8005a8c:	4811      	ldr	r0, [pc, #68]	; (8005ad4 <udpInvokeRxCallback+0xac>)
 8005a8e:	f7fa fe79 	bl	8000784 <osReleaseMutex>

               //Invoke user callback function
               entry->callback(interface, pseudoHeader,
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	689c      	ldr	r4, [r3, #8]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	47a0      	blx	r4
                  header, buffer, offset, param);

               //Acquire mutex
               if(param == NULL)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <udpInvokeRxCallback+0x8c>
                  osAcquireMutex(&udpCallbackMutex);
 8005aae:	4809      	ldr	r0, [pc, #36]	; (8005ad4 <udpInvokeRxCallback+0xac>)
 8005ab0:	f7fa fe59 	bl	8000766 <osAcquireMutex>

               //A matching entry has been found
               error = NO_ERROR;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	83fb      	strh	r3, [r7, #30]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	3301      	adds	r3, #1
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b09      	cmp	r3, #9
 8005ac2:	d9c0      	bls.n	8005a46 <udpInvokeRxCallback+0x1e>
         }
      }
   }

   //Release exclusive access to the callback table
   osReleaseMutex(&udpCallbackMutex);
 8005ac4:	4803      	ldr	r0, [pc, #12]	; (8005ad4 <udpInvokeRxCallback+0xac>)
 8005ac6:	f7fa fe5d 	bl	8000784 <osReleaseMutex>
      UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
      UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);
   }

   //Return status code
   return error;
 8005aca:	8bfb      	ldrh	r3, [r7, #30]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3724      	adds	r7, #36	; 0x24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd90      	pop	{r4, r7, pc}
 8005ad4:	20003478 	.word	0x20003478
 8005ad8:	2000347c 	.word	0x2000347c

08005adc <udpDumpHeader>:
 * @brief Dump UDP header for debugging purpose
 * @param[in] datagram Pointer to the UDP header
 **/

void udpDumpHeader(const UdpHeader *datagram)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
   //Dump UDP header contents
   TRACE_DEBUG("  Source Port = %" PRIu16 "\r\n", ntohs(datagram->srcPort));
   TRACE_DEBUG("  Destination Port = %" PRIu16 "\r\n", ntohs(datagram->destPort));
   TRACE_DEBUG("  Length = %" PRIu16 "\r\n", ntohs(datagram->length));
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(datagram->checksum));
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <dnsInit>:
 * @brief DNS cache initialization
 * @return Error code
 **/

error_t dnsInit(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
   //Initialize DNS cache
   memset(dnsCache, 0, sizeof(dnsCache));
 8005af4:	f44f 7250 	mov.w	r2, #832	; 0x340
 8005af8:	2100      	movs	r1, #0
 8005afa:	4803      	ldr	r0, [pc, #12]	; (8005b08 <dnsInit+0x18>)
 8005afc:	f012 fbe8 	bl	80182d0 <memset>

   //Successful initialization
   return NO_ERROR;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	2000351c 	.word	0x2000351c

08005b0c <dnsFlushCache>:
 * @brief Flush DNS cache
 * @param[in] interface Underlying network interface
 **/

void dnsFlushCache(NetInterface *interface)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
   uint_t i;
   DnsCacheEntry *entry;

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e015      	b.n	8005b46 <dnsFlushCache+0x3a>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2268      	movs	r2, #104	; 0x68
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
 8005b22:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <dnsFlushCache+0x48>)
 8005b24:	4413      	add	r3, r2
 8005b26:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in used
      if(entry->state != DNS_STATE_NONE)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <dnsFlushCache+0x34>
      {
         //Delete DNS entries only for the given network interface
         if(entry->interface == interface)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d102      	bne.n	8005b40 <dnsFlushCache+0x34>
            dnsDeleteEntry(entry);
 8005b3a:	68b8      	ldr	r0, [r7, #8]
 8005b3c:	f000 f80c 	bl	8005b58 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b07      	cmp	r3, #7
 8005b4a:	d9e6      	bls.n	8005b1a <dnsFlushCache+0xe>
      }
   }
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	2000351c 	.word	0x2000351c

08005b58 <dnsDeleteEntry>:
 * @brief Delete the specified DNS cache entry
 * @param[in] entry Pointer to the DNS cache entry to be deleted
 **/

void dnsDeleteEntry(DnsCacheEntry *entry)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
   //Make sure the specified entry is valid
   if(entry != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d012      	beq.n	8005b8c <dnsDeleteEntry+0x34>
   {
#if (DNS_CLIENT_SUPPORT == ENABLED)
      //DNS resolver?
      if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	789b      	ldrb	r3, [r3, #2]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10b      	bne.n	8005b86 <dnsDeleteEntry+0x2e>
      {
         //Name resolution in progress?
         if(entry->state == DNS_STATE_IN_PROGRESS)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d107      	bne.n	8005b86 <dnsDeleteEntry+0x2e>
         {
            //Unregister user callback
            udpDetachRxCallback(entry->interface, entry->port);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	899b      	ldrh	r3, [r3, #12]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4610      	mov	r0, r2
 8005b82:	f7ff ff19 	bl	80059b8 <udpDetachRxCallback>
         }
      }
#endif
      //Delete DNS cache entry
      entry->state = DNS_STATE_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	701a      	strb	r2, [r3, #0]
   }
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <dnsTick>:
 * manage DNS cache
 *
 **/

void dnsTick(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
   uint_t i;
   systime_t time;
   DnsCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 8005b9a:	f7fa fe00 	bl	800079e <osGetSystemTime>
 8005b9e:	6078      	str	r0, [r7, #4]

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	e079      	b.n	8005c9a <dnsTick+0x106>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2268      	movs	r2, #104	; 0x68
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	4a3e      	ldr	r2, [pc, #248]	; (8005ca8 <dnsTick+0x114>)
 8005bb0:	4413      	add	r3, r2
 8005bb2:	603b      	str	r3, [r7, #0]

      //Name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d15b      	bne.n	8005c74 <dnsTick+0xe0>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc4:	4413      	add	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	db62      	blt.n	8005c94 <dnsTick+0x100>
         {
            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount > 0)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d025      	beq.n	8005c22 <dnsTick+0x8e>
            {
#if (DNS_CLIENT_SUPPORT == ENABLED)
               //DNS resolver?
               if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	789b      	ldrb	r3, [r3, #2]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d105      	bne.n	8005bea <dnsTick+0x56>
               {
                  //Retransmit DNS query
                  error = dnsSendQuery(entry);
 8005bde:	6838      	ldr	r0, [r7, #0]
 8005be0:	f000 f864 	bl	8005cac <dnsSendQuery>
 8005be4:	4603      	mov	r3, r0
 8005be6:	81fb      	strh	r3, [r7, #14]
 8005be8:	e001      	b.n	8005bee <dnsTick+0x5a>
               }
               else
#endif
               //Unknown protocol?
               {
                  error = ERROR_FAILURE;
 8005bea:	2301      	movs	r3, #1
 8005bec:	81fb      	strh	r3, [r7, #14]
               }

               //Query message successfully sent?
               if(!error)
 8005bee:	89fb      	ldrh	r3, [r7, #14]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d112      	bne.n	8005c1a <dnsTick+0x86>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	659a      	str	r2, [r3, #88]	; 0x58
                  //The timeout value is doubled for each subsequent retransmission
                  entry->timeout = MIN(entry->timeout * 2, entry->maxTimeout);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	429a      	cmp	r2, r3
 8005c06:	bf28      	it	cs
 8005c08:	461a      	movcs	r2, r3
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c12:	1e5a      	subs	r2, r3, #1
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	665a      	str	r2, [r3, #100]	; 0x64
 8005c18:	e03c      	b.n	8005c94 <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 8005c1a:	6838      	ldr	r0, [r7, #0]
 8005c1c:	f7ff ff9c 	bl	8005b58 <dnsDeleteEntry>
 8005c20:	e038      	b.n	8005c94 <dnsTick+0x100>
               }
            }
#if (DNS_CLIENT_SUPPORT == ENABLED)
            //DNS resolver?
            else if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	789b      	ldrb	r3, [r3, #2]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d120      	bne.n	8005c6c <dnsTick+0xd8>
            {
               //Select the next DNS server
               entry->dnsServerNum++;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	609a      	str	r2, [r3, #8]
               //Initialize retransmission counter
               entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2203      	movs	r2, #3
 8005c38:	665a      	str	r2, [r3, #100]	; 0x64
               //Send DNS query
               error = dnsSendQuery(entry);
 8005c3a:	6838      	ldr	r0, [r7, #0]
 8005c3c:	f000 f836 	bl	8005cac <dnsSendQuery>
 8005c40:	4603      	mov	r3, r0
 8005c42:	81fb      	strh	r3, [r7, #14]

               //DNS message successfully sent?
               if(!error)
 8005c44:	89fb      	ldrh	r3, [r7, #14]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10c      	bne.n	8005c64 <dnsTick+0xd0>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	659a      	str	r2, [r3, #88]	; 0x58
                  //Set timeout value
                  entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c56:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c5c:	1e5a      	subs	r2, r3, #1
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	665a      	str	r2, [r3, #100]	; 0x64
 8005c62:	e017      	b.n	8005c94 <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 8005c64:	6838      	ldr	r0, [r7, #0]
 8005c66:	f7ff ff77 	bl	8005b58 <dnsDeleteEntry>
 8005c6a:	e013      	b.n	8005c94 <dnsTick+0x100>
            }
#endif
            else
            {
               //The maximum number of retransmissions has been exceeded
               dnsDeleteEntry(entry);
 8005c6c:	6838      	ldr	r0, [r7, #0]
 8005c6e:	f7ff ff73 	bl	8005b58 <dnsDeleteEntry>
 8005c72:	e00f      	b.n	8005c94 <dnsTick+0x100>
            }
         }
      }
      //Name successfully resolved?
      else if(entry->state == DNS_STATE_RESOLVED)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d10b      	bne.n	8005c94 <dnsTick+0x100>
      {
         //Check the lifetime of the current DNS cache entry
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c84:	4413      	add	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db02      	blt.n	8005c94 <dnsTick+0x100>
         {
            //Periodically time out DNS cache entries
            dnsDeleteEntry(entry);
 8005c8e:	6838      	ldr	r0, [r7, #0]
 8005c90:	f7ff ff62 	bl	8005b58 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b07      	cmp	r3, #7
 8005c9e:	d982      	bls.n	8005ba6 <dnsTick+0x12>
         }
      }
   }
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	2000351c 	.word	0x2000351c

08005cac <dnsSendQuery>:
 * @param[in] entry Pointer to a valid DNS cache entry
 * @return Error code
 **/

error_t dnsSendQuery(DnsCacheEntry *entry)
{
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b091      	sub	sp, #68	; 0x44
 8005cb0:	af04      	add	r7, sp, #16
 8005cb2:	6078      	str	r0, [r7, #4]
   DnsQuestion *dnsQuestion;
   IpAddr destIpAddr;

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d11a      	bne.n	8005cf2 <dnsSendQuery+0x46>
   {
      //Point to the IPv4 context
      Ipv4Context *ipv4Context = &entry->interface->ipv4Context;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	338c      	adds	r3, #140	; 0x8c
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

      //Out of range index?
      if(entry->dnsServerNum >= IPV4_DNS_SERVER_LIST_SIZE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d902      	bls.n	8005cd2 <dnsSendQuery+0x26>
         return ERROR_NO_DNS_SERVER;
 8005ccc:	f240 2323 	movw	r3, #547	; 0x223
 8005cd0:	e0bf      	b.n	8005e52 <dnsSendQuery+0x1a6>

      //Select the relevant DNS server
      destIpAddr.length = sizeof(Ipv4Addr);
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	60fb      	str	r3, [r7, #12]
      destIpAddr.ipv4Addr = ipv4Context->dnsServerList[entry->dnsServerNum];
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cdc:	3308      	adds	r3, #8
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

      //Make sure the IP address is valid
      if(destIpAddr.ipv4Addr == IPV4_UNSPECIFIED_ADDR)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d104      	bne.n	8005cf6 <dnsSendQuery+0x4a>
         return ERROR_NO_DNS_SERVER;
 8005cec:	f240 2323 	movw	r3, #547	; 0x223
 8005cf0:	e0af      	b.n	8005e52 <dnsSendQuery+0x1a6>
   else
#endif
   //Invalid host type?
   {
      //Report an error
      return ERROR_INVALID_PARAMETER;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e0ad      	b.n	8005e52 <dnsSendQuery+0x1a6>
   }

   //Allocate a memory buffer to hold the DNS query message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 8005cf6:	f107 0314 	add.w	r3, r7, #20
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d00:	f7ff fdf9 	bl	80058f6 <udpAllocBuffer>
 8005d04:	62b8      	str	r0, [r7, #40]	; 0x28
   //Failed to allocate buffer?
   if(buffer == NULL)
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <dnsSendQuery+0x64>
      return ERROR_OUT_OF_MEMORY;
 8005d0c:	2364      	movs	r3, #100	; 0x64
 8005d0e:	e0a0      	b.n	8005e52 <dnsSendQuery+0x1a6>

   //Point to the DNS header
   message = netBufferAt(buffer, offset);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	4619      	mov	r1, r3
 8005d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d16:	f7fc fb4a 	bl	80023ae <netBufferAt>
 8005d1a:	6278      	str	r0, [r7, #36]	; 0x24

   //Format DNS query message
   message->id = htons(entry->id);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	89db      	ldrh	r3, [r3, #14]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fa fc3d 	bl	80005a0 <swapInt16>
 8005d26:	4603      	mov	r3, r0
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	801a      	strh	r2, [r3, #0]
   message->qr = 0;
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d30:	7893      	ldrb	r3, [r2, #2]
 8005d32:	f36f 13c7 	bfc	r3, #7, #1
 8005d36:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	7893      	ldrb	r3, [r2, #2]
 8005d3c:	f36f 03c6 	bfc	r3, #3, #4
 8005d40:	7093      	strb	r3, [r2, #2]
   message->aa = 0;
 8005d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d44:	7893      	ldrb	r3, [r2, #2]
 8005d46:	f36f 0382 	bfc	r3, #2, #1
 8005d4a:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 8005d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4e:	7893      	ldrb	r3, [r2, #2]
 8005d50:	f36f 0341 	bfc	r3, #1, #1
 8005d54:	7093      	strb	r3, [r2, #2]
   message->rd = 1;
 8005d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d58:	7893      	ldrb	r3, [r2, #2]
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	7093      	strb	r3, [r2, #2]
   message->ra = 0;
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	78d3      	ldrb	r3, [r2, #3]
 8005d64:	f36f 13c7 	bfc	r3, #7, #1
 8005d68:	70d3      	strb	r3, [r2, #3]
   message->z = 0;
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6c:	78d3      	ldrb	r3, [r2, #3]
 8005d6e:	f36f 1306 	bfc	r3, #4, #3
 8005d72:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	78d3      	ldrb	r3, [r2, #3]
 8005d78:	f36f 0303 	bfc	r3, #0, #4
 8005d7c:	70d3      	strb	r3, [r2, #3]

   //The DNS query contains one question
   message->qdcount = HTONS(1);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	2200      	movs	r2, #0
 8005d82:	711a      	strb	r2, [r3, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	2200      	movs	r2, #0
 8005d90:	719a      	strb	r2, [r3, #6]
 8005d92:	2200      	movs	r2, #0
 8005d94:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	2200      	movs	r2, #0
 8005d9a:	721a      	strb	r2, [r3, #8]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	2200      	movs	r2, #0
 8005da4:	729a      	strb	r2, [r3, #10]
 8005da6:	2200      	movs	r2, #0
 8005da8:	72da      	strb	r2, [r3, #11]

   //Length of the DNS query message
   length = sizeof(DnsHeader);
 8005daa:	230c      	movs	r3, #12
 8005dac:	623b      	str	r3, [r7, #32]

   //Encode the host name using the DNS name notation
   length += dnsEncodeName(entry->name, message->questions);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f103 0210 	add.w	r2, r3, #16
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	330c      	adds	r3, #12
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f000 f852 	bl	8005e64 <dnsEncodeName>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	623b      	str	r3, [r7, #32]

   //Point to the corresponding question structure
   dnsQuestion = DNS_GET_QUESTION(message, length);
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	4413      	add	r3, r2
 8005dce:	61fb      	str	r3, [r7, #28]

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d10d      	bne.n	8005df4 <dnsSendQuery+0x148>
   {
      //Fill in question structure
      dnsQuestion->qtype = HTONS(DNS_RR_TYPE_A);
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	705a      	strb	r2, [r3, #1]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2200      	movs	r2, #0
 8005dea:	709a      	strb	r2, [r3, #2]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	70da      	strb	r2, [r3, #3]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
   }
#endif

   //Update the length of the DNS query message
   length += sizeof(DnsQuestion);
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	3304      	adds	r3, #4
 8005df8:	623b      	str	r3, [r7, #32]

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	4413      	add	r3, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e04:	f7fc fa2d 	bl	8002262 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending DNS message (%" PRIuSIZE " bytes)...\r\n", length);
 8005e08:	f7fa fc0f 	bl	800062a <osSuspendAllTasks>
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <dnsSendQuery+0x1b0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	6a3a      	ldr	r2, [r7, #32]
 8005e14:	4912      	ldr	r1, [pc, #72]	; (8005e60 <dnsSendQuery+0x1b4>)
 8005e16:	4618      	mov	r0, r3
 8005e18:	f012 f994 	bl	8018144 <fiprintf>
 8005e1c:	f7fa fc10 	bl	8000640 <osResumeAllTasks>
   //Dump message
   dnsDumpMessage(message, length);

   //Send DNS query message
   error = udpSendDatagramEx(entry->interface, NULL, entry->port,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6858      	ldr	r0, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8999      	ldrh	r1, [r3, #12]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f107 040c 	add.w	r4, r7, #12
 8005e2e:	2200      	movs	r2, #0
 8005e30:	9203      	str	r2, [sp, #12]
 8005e32:	9302      	str	r3, [sp, #8]
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	2335      	movs	r3, #53	; 0x35
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	4623      	mov	r3, r4
 8005e3e:	460a      	mov	r2, r1
 8005e40:	2100      	movs	r1, #0
 8005e42:	f7ff fcaf 	bl	80057a4 <udpSendDatagramEx>
 8005e46:	4603      	mov	r3, r0
 8005e48:	837b      	strh	r3, [r7, #26]
      &destIpAddr, DNS_PORT, buffer, offset, 0);

   //Free previously allocated memory
   netBufferFree(buffer);
 8005e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4c:	f7fc f9d8 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 8005e50:	8b7b      	ldrh	r3, [r7, #26]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3734      	adds	r7, #52	; 0x34
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd90      	pop	{r4, r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000058 	.word	0x20000058
 8005e60:	0801957c 	.word	0x0801957c

08005e64 <dnsEncodeName>:
 * @param[out] dest Pointer to the encoded domain name (optional parameter)
 * @return Length of the encoded domain name
 **/

size_t dnsEncodeName(const char_t *src, uint8_t *dest)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
   uint_t i = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
   size_t length = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]

   //Parse input name
   while(1)
   {
      //End of string detected?
      if(src[i] == '\0')
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d11b      	bne.n	8005eba <dnsEncodeName+0x56>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <dnsEncodeName+0x2a>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b3f      	cmp	r3, #63	; 0x3f
 8005e8c:	d901      	bls.n	8005e92 <dnsEncodeName+0x2e>
            return 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e04d      	b.n	8005f2e <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d009      	beq.n	8005eac <dnsEncodeName+0x48>
         {
            dest[0] = i;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	701a      	strb	r2, [r3, #0]
            dest[i + 1] = 0;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the resulting string
         length += i + 2;
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3302      	adds	r3, #2
 8005eb4:	60bb      	str	r3, [r7, #8]

         //Stop parsing the input string
         return length;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	e039      	b.n	8005f2e <dnsEncodeName+0xca>
      }
      //Separator detected?
      else if(src[i] == '.')
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ec4:	d123      	bne.n	8005f0e <dnsEncodeName+0xaa>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <dnsEncodeName+0x6e>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b3f      	cmp	r3, #63	; 0x3f
 8005ed0:	d901      	bls.n	8005ed6 <dnsEncodeName+0x72>
            return 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e02b      	b.n	8005f2e <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <dnsEncodeName+0x80>
            dest[0] = i;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	701a      	strb	r2, [r3, #0]

         //Adjust the length of the resulting string
         length += i + 1;
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4413      	add	r3, r2
 8005eea:	3301      	adds	r3, #1
 8005eec:	60bb      	str	r3, [r7, #8]

         //Advance write pointer
         if(dest != NULL)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d004      	beq.n	8005efe <dnsEncodeName+0x9a>
            dest += i + 1;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	4413      	add	r3, r2
 8005efc:	603b      	str	r3, [r7, #0]

         //Prepare to decode the next label
         src += i + 1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	4413      	add	r3, r2
 8005f06:	607b      	str	r3, [r7, #4]
         i = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	e7b3      	b.n	8005e76 <dnsEncodeName+0x12>
      }
      //Any other character?
      else
      {
         //Copy current character
         if(dest != NULL)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <dnsEncodeName+0xc2>
            dest[i + 1] = src[i];
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	441a      	add	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	440b      	add	r3, r1
 8005f22:	7812      	ldrb	r2, [r2, #0]
 8005f24:	701a      	strb	r2, [r3, #0]

         //Point to the next character
         i++;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]
      if(src[i] == '\0')
 8005f2c:	e7a3      	b.n	8005e76 <dnsEncodeName+0x12>
      }
   }
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <icmpProcessMessage>:
 **/

void icmpProcessMessage(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *buffer,
   size_t offset)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	603b      	str	r3, [r7, #0]
   //Total number of ICMP messages which the entity received
   MIB2_INC_COUNTER32(icmpGroup.icmpInMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsInMsgs, 1);

   //Retrieve the length of the ICMP message
   length = netBufferGetLength(buffer) - offset;
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7fc f968 	bl	800221e <netBufferGetLength>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	617b      	str	r3, [r7, #20]

   //Ensure the message length is correct
   if(length < sizeof(IcmpHeader))
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d923      	bls.n	8005fa4 <icmpProcessMessage+0x6a>
      //Silently discard incoming message
      return;
   }

   //Point to the ICMP message header
   header = netBufferAt(buffer, offset);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fc fa25 	bl	80023ae <netBufferAt>
 8005f64:	6138      	str	r0, [r7, #16]
   //Sanity check
   if(header == NULL)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01d      	beq.n	8005fa8 <icmpProcessMessage+0x6e>
      return;

   //Debug message
   TRACE_INFO("ICMP message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpDumpMessage(header);
 8005f6c:	6938      	ldr	r0, [r7, #16]
 8005f6e:	f000 f9f7 	bl	8006360 <icmpDumpMessage>

   //Verify checksum value
   if(ipCalcChecksumEx(buffer, offset, length) != 0x0000)
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fb fc16 	bl	80017a8 <ipCalcChecksumEx>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d114      	bne.n	8005fac <icmpProcessMessage+0x72>
      //Drop incoming message
      return;
   }

   //Update ICMP statistics
   icmpUpdateInStats(header->type);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 f982 	bl	8006290 <icmpUpdateInStats>

   //Check the type of ICMP message
   switch(header->type)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d000      	beq.n	8005f96 <icmpProcessMessage+0x5c>
   //Unknown type?
   default:
      //Debug message
      TRACE_WARNING("Unknown ICMP message type!\r\n");
      //Discard incoming ICMP message
      break;
 8005f94:	e00b      	b.n	8005fae <icmpProcessMessage+0x74>
      icmpProcessEchoRequest(interface, requestPseudoHeader, buffer, offset);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f809 	bl	8005fb4 <icmpProcessEchoRequest>
      break;
 8005fa2:	e004      	b.n	8005fae <icmpProcessMessage+0x74>
      return;
 8005fa4:	bf00      	nop
 8005fa6:	e002      	b.n	8005fae <icmpProcessMessage+0x74>
      return;
 8005fa8:	bf00      	nop
 8005faa:	e000      	b.n	8005fae <icmpProcessMessage+0x74>
      return;
 8005fac:	bf00      	nop
   }
}
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <icmpProcessEchoRequest>:
 **/

void icmpProcessEchoRequest(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *request,
   size_t requestOffset)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b092      	sub	sp, #72	; 0x48
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
   IcmpEchoMessage *requestHeader;
   IcmpEchoMessage *replyHeader;
   Ipv4PseudoHeader replyPseudoHeader;

   //Retrieve the length of the Echo Request message
   requestLength = netBufferGetLength(request) - requestOffset;
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fc f92b 	bl	800221e <netBufferGetLength>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Ensure the packet length is correct
   if(requestLength < sizeof(IcmpEchoMessage))
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd2:	2b07      	cmp	r3, #7
 8005fd4:	f240 80a1 	bls.w	800611a <icmpProcessEchoRequest+0x166>
      return;

   //Point to the Echo Request header
   requestHeader = netBufferAt(request, requestOffset);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fc f9e7 	bl	80023ae <netBufferAt>
 8005fe0:	63b8      	str	r0, [r7, #56]	; 0x38
   //Sanity check
   if(requestHeader == NULL)
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 809a 	beq.w	800611e <icmpProcessEchoRequest+0x16a>
      return;

   //Debug message
   TRACE_INFO("ICMP Echo Request message received (%" PRIuSIZE " bytes)...\r\n", requestLength);
   //Dump message contents for debugging purpose
   icmpDumpEchoMessage(requestHeader);
 8005fea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fec:	f000 f9c2 	bl	8006374 <icmpDumpEchoMessage>

   //Check whether the destination address of the Echo Request message is
   //a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f001 f97f 	bl	80072fc <ipv4IsBroadcastAddr>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <icmpProcessEchoRequest+0x5c>
      ipv4IsMulticastAddr(requestPseudoHeader->destAddr))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 800600c:	2be0      	cmp	r3, #224	; 0xe0
 800600e:	d116      	bne.n	800603e <icmpProcessEchoRequest+0x8a>
   {
      Ipv4Addr ipAddr;

      //If support for broadcast Echo Request messages has been explicitly
      //disabled, then the host shall not respond to the incoming request
      if(!interface->ipv4Context.enableBroadcastEchoReq)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8083 	beq.w	8006122 <icmpProcessEchoRequest+0x16e>
         return;

      //The source address of the reply must be a unicast address belonging to
      //the interface on which the broadcast Echo Request message was received
      error = ipv4SelectSourceAddr(&interface, requestPseudoHeader->srcAddr,
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	f107 0214 	add.w	r2, r7, #20
 8006024:	f107 030c 	add.w	r3, r7, #12
 8006028:	4618      	mov	r0, r3
 800602a:	f001 f85d 	bl	80070e8 <ipv4SelectSourceAddr>
 800602e:	4603      	mov	r3, r0
 8006030:	86fb      	strh	r3, [r7, #54]	; 0x36
         &ipAddr);
      //Any error to report?
      if(error)
 8006032:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006034:	2b00      	cmp	r3, #0
 8006036:	d176      	bne.n	8006126 <icmpProcessEchoRequest+0x172>
         return;

      //Copy the resulting source IP address
      replyPseudoHeader.srcAddr = ipAddr;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	61bb      	str	r3, [r7, #24]
   {
 800603c:	e002      	b.n	8006044 <icmpProcessEchoRequest+0x90>
   }
   else
   {
      //The destination address of the Echo Request message is a unicast address
      replyPseudoHeader.srcAddr = requestPseudoHeader->destAddr;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	61bb      	str	r3, [r7, #24]
   }

   //Allocate memory to hold the Echo Reply message
   reply = ipAllocBuffer(sizeof(IcmpEchoMessage), &replyOffset);
 8006044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006048:	4619      	mov	r1, r3
 800604a:	2008      	movs	r0, #8
 800604c:	f7fb fc54 	bl	80018f8 <ipAllocBuffer>
 8006050:	6338      	str	r0, [r7, #48]	; 0x30
   //Failed to allocate memory?
   if(reply == NULL)
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	2b00      	cmp	r3, #0
 8006056:	d068      	beq.n	800612a <icmpProcessEchoRequest+0x176>
      return;

   //Point to the Echo Reply header
   replyHeader = netBufferAt(reply, replyOffset);
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	4619      	mov	r1, r3
 800605c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800605e:	f7fc f9a6 	bl	80023ae <netBufferAt>
 8006062:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Format Echo Reply header
   replyHeader->type = ICMP_TYPE_ECHO_REPLY;
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
   replyHeader->code = 0;
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	2200      	movs	r2, #0
 800606e:	705a      	strb	r2, [r3, #1]
   replyHeader->checksum = 0;
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006072:	2200      	movs	r2, #0
 8006074:	709a      	strb	r2, [r3, #2]
 8006076:	2200      	movs	r2, #0
 8006078:	70da      	strb	r2, [r3, #3]
   replyHeader->identifier = requestHeader->identifier;
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	889b      	ldrh	r3, [r3, #4]
 800607e:	b29a      	uxth	r2, r3
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	809a      	strh	r2, [r3, #4]
   replyHeader->sequenceNumber = requestHeader->sequenceNumber;
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	88db      	ldrh	r3, [r3, #6]
 8006088:	b29a      	uxth	r2, r3
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	80da      	strh	r2, [r3, #6]

   //Point to the first data byte
   requestOffset += sizeof(IcmpEchoMessage);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	603b      	str	r3, [r7, #0]
   requestLength -= sizeof(IcmpEchoMessage);
 8006094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006096:	3b08      	subs	r3, #8
 8006098:	63fb      	str	r3, [r7, #60]	; 0x3c

   //Copy data
   error = netBufferConcat(reply, request, requestOffset, requestLength);
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060a2:	f7fc f9b7 	bl	8002414 <netBufferConcat>
 80060a6:	4603      	mov	r3, r0
 80060a8:	86fb      	strh	r3, [r7, #54]	; 0x36

   //Check status code
   if(!error)
 80060aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d130      	bne.n	8006112 <icmpProcessEchoRequest+0x15e>
   {
      //Get the length of the resulting message
      replyLength = netBufferGetLength(reply) - replyOffset;
 80060b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b2:	f7fc f8b4 	bl	800221e <netBufferGetLength>
 80060b6:	4602      	mov	r2, r0
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
      //Calculate ICMP header checksum
      replyHeader->checksum = ipCalcChecksumEx(reply, replyOffset, replyLength);
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c2:	4619      	mov	r1, r3
 80060c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060c6:	f7fb fb6f 	bl	80017a8 <ipCalcChecksumEx>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      replyPseudoHeader.destAddr = requestPseudoHeader->srcAddr;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	61fb      	str	r3, [r7, #28]
      replyPseudoHeader.reserved = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	f887 3020 	strb.w	r3, [r7, #32]
      replyPseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      replyPseudoHeader.length = htons(replyLength);
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fa fa59 	bl	80005a0 <swapInt16>
 80060ee:	4603      	mov	r3, r0
 80060f0:	847b      	strh	r3, [r7, #34]	; 0x22

      //Update ICMP statistics
      icmpUpdateOutStats(ICMP_TYPE_ECHO_REPLY);
 80060f2:	2000      	movs	r0, #0
 80060f4:	f000 f900 	bl	80062f8 <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Echo Reply message (%" PRIuSIZE " bytes)...\r\n", replyLength);
      //Dump message contents for debugging purpose
      icmpDumpEchoMessage(replyHeader);
 80060f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060fa:	f000 f93b 	bl	8006374 <icmpDumpEchoMessage>

      //Send Echo Reply message
      ipv4SendDatagram(interface, &replyPseudoHeader, reply, replyOffset,
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006102:	f107 0118 	add.w	r1, r7, #24
 8006106:	2340      	movs	r3, #64	; 0x40
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	4613      	mov	r3, r2
 800610c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610e:	f000 fad2 	bl	80066b6 <ipv4SendDatagram>
         IPV4_DEFAULT_TTL);
   }

   //Free previously allocated memory block
   netBufferFree(reply);
 8006112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006114:	f7fc f874 	bl	8002200 <netBufferFree>
 8006118:	e008      	b.n	800612c <icmpProcessEchoRequest+0x178>
      return;
 800611a:	bf00      	nop
 800611c:	e006      	b.n	800612c <icmpProcessEchoRequest+0x178>
      return;
 800611e:	bf00      	nop
 8006120:	e004      	b.n	800612c <icmpProcessEchoRequest+0x178>
         return;
 8006122:	bf00      	nop
 8006124:	e002      	b.n	800612c <icmpProcessEchoRequest+0x178>
         return;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <icmpProcessEchoRequest+0x178>
      return;
 800612a:	bf00      	nop
}
 800612c:	3740      	adds	r7, #64	; 0x40
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <icmpSendErrorMessage>:
 * @return Error code
 **/

error_t icmpSendErrorMessage(NetInterface *interface, uint8_t type, uint8_t code,
   uint8_t parameter, const NetBuffer *ipPacket, size_t ipPacketOffset)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b08e      	sub	sp, #56	; 0x38
 8006136:	af02      	add	r7, sp, #8
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	4608      	mov	r0, r1
 800613c:	4611      	mov	r1, r2
 800613e:	461a      	mov	r2, r3
 8006140:	4603      	mov	r3, r0
 8006142:	70fb      	strb	r3, [r7, #3]
 8006144:	460b      	mov	r3, r1
 8006146:	70bb      	strb	r3, [r7, #2]
 8006148:	4613      	mov	r3, r2
 800614a:	707b      	strb	r3, [r7, #1]
   NetBuffer *icmpMessage;
   IcmpErrorMessage *icmpHeader;
   Ipv4PseudoHeader pseudoHeader;

   //Retrieve the length of the invoking IPv4 packet
   length = netBufferGetLength(ipPacket) - ipPacketOffset;
 800614c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800614e:	f7fc f866 	bl	800221e <netBufferGetLength>
 8006152:	4602      	mov	r2, r0
 8006154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28

   //Check the length of the IPv4 packet
   if(length < sizeof(Ipv4Header))
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	2b13      	cmp	r3, #19
 800615e:	d801      	bhi.n	8006164 <icmpSendErrorMessage+0x32>
      return ERROR_INVALID_LENGTH;
 8006160:	23eb      	movs	r3, #235	; 0xeb
 8006162:	e091      	b.n	8006288 <icmpSendErrorMessage+0x156>

   //Point to the header of the invoking packet
   ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 8006164:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006168:	f7fc f921 	bl	80023ae <netBufferAt>
 800616c:	6278      	str	r0, [r7, #36]	; 0x24
   //Sanity check
   if(ipHeader == NULL)
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <icmpSendErrorMessage+0x46>
      return ERROR_FAILURE;
 8006174:	2301      	movs	r3, #1
 8006176:	e087      	b.n	8006288 <icmpSendErrorMessage+0x156>

   //Never respond to a packet destined to a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f8bc 	bl	80072fc <ipv4IsBroadcastAddr>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <icmpSendErrorMessage+0x64>
      ipv4IsMulticastAddr(ipHeader->destAddr))
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 8006192:	2be0      	cmp	r3, #224	; 0xe0
 8006194:	d101      	bne.n	800619a <icmpSendErrorMessage+0x68>
   {
      //Report an error
      return ERROR_INVALID_ADDRESS;
 8006196:	23e4      	movs	r3, #228	; 0xe4
 8006198:	e076      	b.n	8006288 <icmpSendErrorMessage+0x156>
   }

   //Length of the data that will be returned along with the ICMP header
   length = MIN(length, (size_t) ipHeader->headerLength * 4 + 8);
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	3302      	adds	r3, #2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061aa:	4293      	cmp	r3, r2
 80061ac:	bf28      	it	cs
 80061ae:	4613      	movcs	r3, r2
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28

   //Allocate a memory buffer to hold the ICMP message
   icmpMessage = ipAllocBuffer(sizeof(IcmpErrorMessage), &offset);
 80061b2:	f107 0318 	add.w	r3, r7, #24
 80061b6:	4619      	mov	r1, r3
 80061b8:	2008      	movs	r0, #8
 80061ba:	f7fb fb9d 	bl	80018f8 <ipAllocBuffer>
 80061be:	6238      	str	r0, [r7, #32]
   //Failed to allocate memory?
   if(icmpMessage == NULL)
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <icmpSendErrorMessage+0x98>
      return ERROR_OUT_OF_MEMORY;
 80061c6:	2364      	movs	r3, #100	; 0x64
 80061c8:	e05e      	b.n	8006288 <icmpSendErrorMessage+0x156>

   //Point to the ICMP header
   icmpHeader = netBufferAt(icmpMessage, offset);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	4619      	mov	r1, r3
 80061ce:	6a38      	ldr	r0, [r7, #32]
 80061d0:	f7fc f8ed 	bl	80023ae <netBufferAt>
 80061d4:	61f8      	str	r0, [r7, #28]

   //Format ICMP message
   icmpHeader->type = type;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	78fa      	ldrb	r2, [r7, #3]
 80061da:	701a      	strb	r2, [r3, #0]
   icmpHeader->code = code;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	78ba      	ldrb	r2, [r7, #2]
 80061e0:	705a      	strb	r2, [r3, #1]
   icmpHeader->checksum = 0;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2200      	movs	r2, #0
 80061e6:	709a      	strb	r2, [r3, #2]
 80061e8:	2200      	movs	r2, #0
 80061ea:	70da      	strb	r2, [r3, #3]
   icmpHeader->parameter = parameter;
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	787a      	ldrb	r2, [r7, #1]
 80061f0:	711a      	strb	r2, [r3, #4]
   icmpHeader->unused = 0;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	2200      	movs	r2, #0
 80061f6:	715a      	strb	r2, [r3, #5]
 80061f8:	2200      	movs	r2, #0
 80061fa:	719a      	strb	r2, [r3, #6]
 80061fc:	2200      	movs	r2, #0
 80061fe:	71da      	strb	r2, [r3, #7]

   //Copy the IP header and the first 8 bytes of the original datagram data
   error = netBufferConcat(icmpMessage, ipPacket, ipPacketOffset, length);
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006206:	6a38      	ldr	r0, [r7, #32]
 8006208:	f7fc f904 	bl	8002414 <netBufferConcat>
 800620c:	4603      	mov	r3, r0
 800620e:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Check status code
   if(!error)
 8006210:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006212:	2b00      	cmp	r3, #0
 8006214:	d134      	bne.n	8006280 <icmpSendErrorMessage+0x14e>
   {
      //Get the length of the resulting message
      length = netBufferGetLength(icmpMessage) - offset;
 8006216:	6a38      	ldr	r0, [r7, #32]
 8006218:	f7fc f801 	bl	800221e <netBufferGetLength>
 800621c:	4602      	mov	r2, r0
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
      //Message checksum calculation
      icmpHeader->checksum = ipCalcChecksumEx(icmpMessage, offset, length);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006228:	4619      	mov	r1, r3
 800622a:	6a38      	ldr	r0, [r7, #32]
 800622c:	f7fb fabc 	bl	80017a8 <ipCalcChecksumEx>
 8006230:	4603      	mov	r3, r0
 8006232:	461a      	mov	r2, r3
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      pseudoHeader.srcAddr = ipHeader->destAddr;
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	60fb      	str	r3, [r7, #12]
      pseudoHeader.destAddr = ipHeader->srcAddr;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	613b      	str	r3, [r7, #16]
      pseudoHeader.reserved = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	753b      	strb	r3, [r7, #20]
      pseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 8006248:	2301      	movs	r3, #1
 800624a:	757b      	strb	r3, [r7, #21]
      pseudoHeader.length = htons(length);
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	b29b      	uxth	r3, r3
 8006250:	4618      	mov	r0, r3
 8006252:	f7fa f9a5 	bl	80005a0 <swapInt16>
 8006256:	4603      	mov	r3, r0
 8006258:	82fb      	strh	r3, [r7, #22]

      //Update ICMP statistics
      icmpUpdateOutStats(type);
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 f84b 	bl	80062f8 <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Error message (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump message contents for debugging purpose
      icmpDumpErrorMessage(icmpHeader);
 8006262:	69f8      	ldr	r0, [r7, #28]
 8006264:	f000 f890 	bl	8006388 <icmpDumpErrorMessage>

      //Send ICMP Error message
      error = ipv4SendDatagram(interface, &pseudoHeader, icmpMessage, offset,
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	f107 010c 	add.w	r1, r7, #12
 800626e:	2340      	movs	r3, #64	; 0x40
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa1d 	bl	80066b6 <ipv4SendDatagram>
 800627c:	4603      	mov	r3, r0
 800627e:	85fb      	strh	r3, [r7, #46]	; 0x2e
         IPV4_DEFAULT_TTL);
   }

   //Free previously allocated memory
   netBufferFree(icmpMessage);
 8006280:	6a38      	ldr	r0, [r7, #32]
 8006282:	f7fb ffbd 	bl	8002200 <netBufferFree>

   //Return status code
   return error;
 8006286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8006288:	4618      	mov	r0, r3
 800628a:	3730      	adds	r7, #48	; 0x30
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <icmpUpdateInStats>:
 * @brief Update ICMP input statistics
 * @param[in] type ICMP message type
 **/

void icmpUpdateInStats(uint8_t type)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
   //Check ICMP message type
   switch(type)
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	3b03      	subs	r3, #3
 800629e:	2b0f      	cmp	r3, #15
 80062a0:	d822      	bhi.n	80062e8 <icmpUpdateInStats+0x58>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <icmpUpdateInStats+0x18>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062e9 	.word	0x080062e9
 80062ac:	080062e9 	.word	0x080062e9
 80062b0:	080062e9 	.word	0x080062e9
 80062b4:	080062e9 	.word	0x080062e9
 80062b8:	080062e9 	.word	0x080062e9
 80062bc:	080062e9 	.word	0x080062e9
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062e9 	.word	0x080062e9
 80062c8:	080062e9 	.word	0x080062e9
 80062cc:	080062e9 	.word	0x080062e9
 80062d0:	080062e9 	.word	0x080062e9
 80062d4:	080062e9 	.word	0x080062e9
 80062d8:	080062e9 	.word	0x080062e9
 80062dc:	080062e9 	.word	0x080062e9
 80062e0:	080062e9 	.word	0x080062e9
 80062e4:	080062e9 	.word	0x080062e9
      //Number of ICMP Address Mask Reply messages received
      MIB2_INC_COUNTER32(icmpGroup.icmpInAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 80062e8:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsInPkts[type], 1);
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop

080062f8 <icmpUpdateOutStats>:
 * @brief Update ICMP output statistics
 * @param[in] type ICMPv6 message type
 **/

void icmpUpdateOutStats(uint8_t type)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	71fb      	strb	r3, [r7, #7]
   //Total number of ICMP messages which this entity attempted to send
   MIB2_INC_COUNTER32(icmpGroup.icmpOutMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsOutMsgs, 1);

   //Check ICMP message type
   switch(type)
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	3b03      	subs	r3, #3
 8006306:	2b0f      	cmp	r3, #15
 8006308:	d822      	bhi.n	8006350 <icmpUpdateOutStats+0x58>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <icmpUpdateOutStats+0x18>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006351 	.word	0x08006351
 8006314:	08006351 	.word	0x08006351
 8006318:	08006351 	.word	0x08006351
 800631c:	08006351 	.word	0x08006351
 8006320:	08006351 	.word	0x08006351
 8006324:	08006351 	.word	0x08006351
 8006328:	08006351 	.word	0x08006351
 800632c:	08006351 	.word	0x08006351
 8006330:	08006351 	.word	0x08006351
 8006334:	08006351 	.word	0x08006351
 8006338:	08006351 	.word	0x08006351
 800633c:	08006351 	.word	0x08006351
 8006340:	08006351 	.word	0x08006351
 8006344:	08006351 	.word	0x08006351
 8006348:	08006351 	.word	0x08006351
 800634c:	08006351 	.word	0x08006351
      //Number of ICMP Address Mask Reply messages sent
      MIB2_INC_COUNTER32(icmpGroup.icmpOutAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 8006350:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsOutPkts[type], 1);
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop

08006360 <icmpDumpMessage>:
 * @brief Dump ICMP message for debugging purpose
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpMessage(const IcmpHeader *message)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <icmpDumpEchoMessage>:
 * @brief Dump ICMP Echo Request or Echo Reply message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpEchoMessage(const IcmpEchoMessage *message)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Identifier = 0x%04" PRIX16 "\r\n", ntohs(message->identifier));
   TRACE_DEBUG("  Sequence Number = 0x%04" PRIX16 "\r\n", ntohs(message->sequenceNumber));
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <icmpDumpErrorMessage>:
 * @brief Dump generic ICMP Error message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpErrorMessage(const IcmpErrorMessage *message)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Parameter = %" PRIu8 "\r\n", message->parameter);
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <ipv4Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ipv4Init(NetInterface *interface)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7fc fa26 	bl	80027f6 <nicGetPhysicalInterface>
 80063aa:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	338c      	adds	r3, #140	; 0x8c
 80063b0:	60bb      	str	r3, [r7, #8]

   //Clear the IPv4 context
   memset(context, 0, sizeof(Ipv4Context));
 80063b2:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80063b6:	2100      	movs	r1, #0
 80063b8:	68b8      	ldr	r0, [r7, #8]
 80063ba:	f011 ff89 	bl	80182d0 <memset>

   //Initialize interface specific variables
   context->linkMtu = physicalInterface->nicDriver->mtu;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	601a      	str	r2, [r3, #0]
   context->isRouter = FALSE;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2200      	movs	r2, #0
 80063cc:	605a      	str	r2, [r3, #4]

   //Broadcast ICMP Echo Request messages are allowed by default
   context->enableBroadcastEchoReq = TRUE;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2201      	movs	r2, #1
 80063d2:	609a      	str	r2, [r3, #8]

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   context->identification = 0;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2200      	movs	r2, #0
 80063d8:	819a      	strh	r2, [r3, #12]

   //Initialize the list of DNS servers
   memset(context->dnsServerList, 0, sizeof(context->dnsServerList));
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	3324      	adds	r3, #36	; 0x24
 80063de:	2208      	movs	r2, #8
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f011 ff74 	bl	80182d0 <memset>
   //Initialize the multicast filter table
   memset(context->multicastFilter, 0, sizeof(context->multicastFilter));
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	332c      	adds	r3, #44	; 0x2c
 80063ec:	2250      	movs	r2, #80	; 0x50
 80063ee:	2100      	movs	r1, #0
 80063f0:	4618      	mov	r0, r3
 80063f2:	f011 ff6d 	bl	80182d0 <memset>

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Initialize the reassembly queue
   memset(context->fragQueue, 0, sizeof(context->fragQueue));
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	337c      	adds	r3, #124	; 0x7c
 80063fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80063fe:	2100      	movs	r1, #0
 8006400:	4618      	mov	r0, r3
 8006402:	f011 ff65 	bl	80182d0 <memset>
#endif

   //Successful initialization
   return NO_ERROR;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <ipv4LinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ipv4LinkChangeEvent(NetInterface *interface)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fc f9ec 	bl	80027f6 <nicGetPhysicalInterface>
 800641e:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	338c      	adds	r3, #140	; 0x8c
 8006424:	60bb      	str	r3, [r7, #8]

   //Restore default MTU
   context->linkMtu = physicalInterface->nicDriver->mtu;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	601a      	str	r2, [r3, #0]
   arpFlushCache(interface);
#endif

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Flush the reassembly queue
   ipv4FlushFragQueue(interface);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fda9 	bl	8006f88 <ipv4FlushFragQueue>

#if (DHCP_CLIENT_SUPPORT == ENABLED)
   //Notify the DHCP client of link state changes
   dhcpClientLinkChangeEvent(interface->dhcpClientContext);
#endif
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <ipv4ProcessPacket>:
 * @param[in] packet Incoming IPv4 packet
 * @param[in] length Packet length including header and payload
 **/

void ipv4ProcessPacket(NetInterface *interface, Ipv4Header *packet, size_t length)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b08a      	sub	sp, #40	; 0x28
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 800644a:	2300      	movs	r3, #0
 800644c:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Start of exception handling block
   do
   {
      //Ensure the packet length is greater than 20 bytes
      if(length < sizeof(Ipv4Header))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b13      	cmp	r3, #19
 8006452:	d802      	bhi.n	800645a <ipv4ProcessPacket+0x1c>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 8006454:	23eb      	movs	r3, #235	; 0xeb
 8006456:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8006458:	e09a      	b.n	8006590 <ipv4ProcessPacket+0x152>
      }

      //Debug message
      TRACE_INFO("IPv4 packet received (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump IP header contents for debugging purpose
      ipv4DumpHeader(packet);
 800645a:	68b8      	ldr	r0, [r7, #8]
 800645c:	f000 fa4a 	bl	80068f4 <ipv4DumpHeader>

      //A packet whose version number is not 4 must be silently discarded
      if(packet->version != IPV4_VERSION)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f023 030f 	bic.w	r3, r3, #15
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d002      	beq.n	8006474 <ipv4ProcessPacket+0x36>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 800646e:	23d4      	movs	r3, #212	; 0xd4
 8006470:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8006472:	e08d      	b.n	8006590 <ipv4ProcessPacket+0x152>
      }

      //Valid IPv4 header shall contains more than five 32-bit words
      if(packet->headerLength < 5)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b04      	cmp	r3, #4
 8006480:	d802      	bhi.n	8006488 <ipv4ProcessPacket+0x4a>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 8006482:	23d4      	movs	r3, #212	; 0xd4
 8006484:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8006486:	e083      	b.n	8006590 <ipv4ProcessPacket+0x152>
      }

      //Ensure the total length is correct before processing the packet
      if(ntohs(packet->totalLength) < (packet->headerLength * 4))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	885b      	ldrh	r3, [r3, #2]
 800648c:	b29b      	uxth	r3, r3
 800648e:	4618      	mov	r0, r3
 8006490:	f7fa f886 	bl	80005a0 <swapInt16>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	429a      	cmp	r2, r3
 80064a6:	da02      	bge.n	80064ae <ipv4ProcessPacket+0x70>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 80064a8:	23d4      	movs	r3, #212	; 0xd4
 80064aa:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 80064ac:	e070      	b.n	8006590 <ipv4ProcessPacket+0x152>
      }

      //Truncated packet?
      if(length < ntohs(packet->totalLength))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	885b      	ldrh	r3, [r3, #2]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fa f873 	bl	80005a0 <swapInt16>
 80064ba:	4603      	mov	r3, r0
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d202      	bcs.n	80064ca <ipv4ProcessPacket+0x8c>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 80064c4:	23eb      	movs	r3, #235	; 0xeb
 80064c6:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 80064c8:	e062      	b.n	8006590 <ipv4ProcessPacket+0x152>
      }

      //Source address filtering
      if(ipv4CheckSourceAddr(interface, packet->srcAddr))
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	4619      	mov	r1, r3
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fd97 	bl	8007004 <ipv4CheckSourceAddr>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <ipv4ProcessPacket+0xa4>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 80064dc:	23d4      	movs	r3, #212	; 0xd4
 80064de:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 80064e0:	e056      	b.n	8006590 <ipv4ProcessPacket+0x152>

#if defined(IPV4_PACKET_FORWARD_HOOK)
      IPV4_PACKET_FORWARD_HOOK(interface, packet, length);
#else
      //Destination address filtering
      if(ipv4CheckDestAddr(interface, packet->destAddr))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	4619      	mov	r1, r3
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fda3 	bl	8007034 <ipv4CheckDestAddr>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <ipv4ProcessPacket+0xbc>

         //Forward the packet according to the routing table
         ipv4ForwardPacket(interface, (NetBuffer *) &buffer, 0);
#else
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 80064f4:	23e4      	movs	r3, #228	; 0xe4
 80064f6:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
         //We are done
         break;
 80064f8:	e04a      	b.n	8006590 <ipv4ProcessPacket+0x152>
      }
#endif

      //Packets addressed to a tentative address should be silently discarded
      if(ipv4IsTentativeAddr(interface, packet->destAddr))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	4619      	mov	r1, r3
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 ff3b 	bl	800737c <ipv4IsTentativeAddr>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <ipv4ProcessPacket+0xd4>
      {
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 800650c:	23e4      	movs	r3, #228	; 0xe4
 800650e:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8006510:	e03e      	b.n	8006590 <ipv4ProcessPacket+0x152>
      }

      //The host must verify the IP header checksum on every received datagram
      //and silently discard every datagram that has a bad checksum (refer to
      //RFC 1122, section 3.2.1.2)
      if(ipCalcChecksum(packet, packet->headerLength * 4) != 0x0000)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800651a:	b2db      	uxtb	r3, r3
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4619      	mov	r1, r3
 8006520:	68b8      	ldr	r0, [r7, #8]
 8006522:	f7fb f8b7 	bl	8001694 <ipCalcChecksum>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <ipv4ProcessPacket+0xf4>
      {
         //Debug message
         TRACE_WARNING("Wrong IP header checksum!\r\n");

         //Discard incoming packet
         error = ERROR_INVALID_HEADER;
 800652c:	23d4      	movs	r3, #212	; 0xd4
 800652e:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8006530:	e02e      	b.n	8006590 <ipv4ProcessPacket+0x152>
      }

      //Update IP statistics
      ipv4UpdateInStats(interface, packet->destAddr, length);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	4619      	mov	r1, r3
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 ffe9 	bl	8007512 <ipv4UpdateInStats>

      //Convert the total length from network byte order
      length = ntohs(packet->totalLength);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	885b      	ldrh	r3, [r3, #2]
 8006544:	b29b      	uxth	r3, r3
 8006546:	4618      	mov	r0, r3
 8006548:	f7fa f82a 	bl	80005a0 <swapInt16>
 800654c:	4603      	mov	r3, r0
 800654e:	607b      	str	r3, [r7, #4]

      //A fragmented packet was received?
      if(ntohs(packet->fragmentOffset) & (IPV4_FLAG_MF | IPV4_OFFSET_MASK))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	88db      	ldrh	r3, [r3, #6]
 8006554:	b29b      	uxth	r3, r3
 8006556:	4618      	mov	r0, r3
 8006558:	f7fa f822 	bl	80005a0 <swapInt16>
 800655c:	4603      	mov	r3, r0
 800655e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <ipv4ProcessPacket+0x134>
      {
#if (IPV4_FRAG_SUPPORT == ENABLED)
         //Reassemble the original datagram
         ipv4ReassembleDatagram(interface, packet, length);
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 fa57 	bl	8006a1e <ipv4ReassembleDatagram>
 8006570:	e00e      	b.n	8006590 <ipv4ProcessPacket+0x152>
      else
      {
         NetBuffer1 buffer;

         //Unfragmented datagrams fit in a single chunk
         buffer.chunkCount = 1;
 8006572:	2301      	movs	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
         buffer.maxChunkCount = 1;
 8006576:	2301      	movs	r3, #1
 8006578:	61bb      	str	r3, [r7, #24]
         buffer.chunk[0].address = packet;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	61fb      	str	r3, [r7, #28]
         buffer.chunk[0].length = (uint16_t) length;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	b29b      	uxth	r3, r3
 8006582:	843b      	strh	r3, [r7, #32]

         //Pass the IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &buffer);
 8006584:	f107 0314 	add.w	r3, r7, #20
 8006588:	4619      	mov	r1, r3
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f80c 	bl	80065a8 <ipv4ProcessDatagram>

      //End of exception handling block
   } while(0);

   //Invalid IPv4 packet received?
   if(error)
 8006590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <ipv4ProcessPacket+0x162>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 8006596:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006598:	4619      	mov	r1, r3
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 ffda 	bl	8007554 <ipv4UpdateErrorStats>
   }
}
 80065a0:	bf00      	nop
 80065a2:	3728      	adds	r7, #40	; 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <ipv4ProcessDatagram>:
 * @param[in] interface Underlying network interface
 * @param[in] buffer Multi-part buffer that holds the incoming IPv4 datagram
 **/

void ipv4ProcessDatagram(NetInterface *interface, const NetBuffer *buffer)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08c      	sub	sp, #48	; 0x30
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
   size_t length;
   Ipv4Header *header;
   IpPseudoHeader pseudoHeader;

   //Retrieve the length of the IPv4 datagram
   length = netBufferGetLength(buffer);
 80065b2:	6838      	ldr	r0, [r7, #0]
 80065b4:	f7fb fe33 	bl	800221e <netBufferGetLength>
 80065b8:	6238      	str	r0, [r7, #32]

   //Point to the IPv4 header
   header = netBufferAt(buffer, 0);
 80065ba:	2100      	movs	r1, #0
 80065bc:	6838      	ldr	r0, [r7, #0]
 80065be:	f7fb fef6 	bl	80023ae <netBufferAt>
 80065c2:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(header == NULL)
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d071      	beq.n	80066ae <ipv4ProcessDatagram+0x106>
      return;

   //Debug message
   TRACE_INFO("IPv4 datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump IP header contents for debugging purpose
   ipv4DumpHeader(header);
 80065ca:	69f8      	ldr	r0, [r7, #28]
 80065cc:	f000 f992 	bl	80068f4 <ipv4DumpHeader>

   //Get the offset to the payload
   offset = header->headerLength * 4;
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	61bb      	str	r3, [r7, #24]
   //Compute the length of the payload
   length -= header->headerLength * 4;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	461a      	mov	r2, r3
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	623b      	str	r3, [r7, #32]

   //Form the IPv4 pseudo header
   pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 80065f2:	230c      	movs	r3, #12
 80065f4:	60bb      	str	r3, [r7, #8]
   pseudoHeader.ipv4Data.srcAddr = header->srcAddr;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	60fb      	str	r3, [r7, #12]
   pseudoHeader.ipv4Data.destAddr = header->destAddr;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	613b      	str	r3, [r7, #16]
   pseudoHeader.ipv4Data.reserved = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	753b      	strb	r3, [r7, #20]
   pseudoHeader.ipv4Data.protocol = header->protocol;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	7a5b      	ldrb	r3, [r3, #9]
 800660a:	757b      	strb	r3, [r7, #21]
   pseudoHeader.ipv4Data.length = htons(length);
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	b29b      	uxth	r3, r3
 8006610:	4618      	mov	r0, r3
 8006612:	f7f9 ffc5 	bl	80005a0 <swapInt16>
 8006616:	4603      	mov	r3, r0
 8006618:	82fb      	strh	r3, [r7, #22]
#if defined(IPV4_DATAGRAM_FORWARD_HOOK)
   IPV4_DATAGRAM_FORWARD_HOOK(interface, &pseudoHeader, buffer, offset);
#endif

   //Check the protocol field
   switch(header->protocol)
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	7a5b      	ldrb	r3, [r3, #9]
 800661e:	2b06      	cmp	r3, #6
 8006620:	d00e      	beq.n	8006640 <ipv4ProcessDatagram+0x98>
 8006622:	2b11      	cmp	r3, #17
 8006624:	d016      	beq.n	8006654 <ipv4ProcessDatagram+0xac>
 8006626:	2b01      	cmp	r3, #1
 8006628:	d11e      	bne.n	8006668 <ipv4ProcessDatagram+0xc0>
   {
   //ICMP protocol?
   case IPV4_PROTOCOL_ICMP:
      //Process incoming ICMP message
      icmpProcessMessage(interface, &pseudoHeader.ipv4Data, buffer, offset);
 800662a:	f107 0308 	add.w	r3, r7, #8
 800662e:	1d19      	adds	r1, r3, #4
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff fc80 	bl	8005f3a <icmpProcessMessage>
#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Allow raw sockets to process ICMP messages
      rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset);
#endif
      //No error to report
      error = NO_ERROR;
 800663a:	2300      	movs	r3, #0
 800663c:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Continue processing
      break;
 800663e:	e016      	b.n	800666e <ipv4ProcessDatagram+0xc6>

#if (TCP_SUPPORT == ENABLED)
   //TCP protocol?
   case IPV4_PROTOCOL_TCP:
      //Process incoming TCP segment
      tcpProcessSegment(interface, &pseudoHeader, buffer, offset);
 8006640:	f107 0108 	add.w	r1, r7, #8
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7fc fa35 	bl	8002ab8 <tcpProcessSegment>
      //No error to report
      error = NO_ERROR;
 800664e:	2300      	movs	r3, #0
 8006650:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Continue processing
      break;
 8006652:	e00c      	b.n	800666e <ipv4ProcessDatagram+0xc6>

#if (UDP_SUPPORT == ENABLED)
   //UDP protocol?
   case IPV4_PROTOCOL_UDP:
      //Process incoming UDP datagram
      error = udpProcessDatagram(interface, &pseudoHeader, buffer, offset);
 8006654:	f107 0108 	add.w	r1, r7, #8
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fe ff5d 	bl	800551c <udpProcessDatagram>
 8006662:	4603      	mov	r3, r0
 8006664:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Continue processing
      break;
 8006666:	e002      	b.n	800666e <ipv4ProcessDatagram+0xc6>
#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Allow raw sockets to process IPv4 packets
      error = rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset);
#else
      //Report an error
      error = ERROR_PROTOCOL_UNREACHABLE;
 8006668:	23d1      	movs	r3, #209	; 0xd1
 800666a:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
      //Continue processing
      break;
 800666c:	bf00      	nop
   }

   //Unreachable protocol?
   if(error == ERROR_PROTOCOL_UNREACHABLE)
 800666e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006670:	2bd1      	cmp	r3, #209	; 0xd1
 8006672:	d10e      	bne.n	8006692 <ipv4ProcessDatagram+0xea>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 8006674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 ff6b 	bl	8007554 <ipv4UpdateErrorStats>

      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 800667e:	2300      	movs	r3, #0
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	2300      	movs	r3, #0
 8006688:	2202      	movs	r2, #2
 800668a:	2103      	movs	r1, #3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff fd50 	bl	8006132 <icmpSendErrorMessage>
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInDelivers, 1);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInDelivers, 1);
   }

   //Unreachable port?
   if(error == ERROR_PORT_UNREACHABLE)
 8006692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006694:	2bd2      	cmp	r3, #210	; 0xd2
 8006696:	d10b      	bne.n	80066b0 <ipv4ProcessDatagram+0x108>
   {
      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 8006698:	2300      	movs	r3, #0
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	2300      	movs	r3, #0
 80066a2:	2203      	movs	r2, #3
 80066a4:	2103      	movs	r1, #3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fd43 	bl	8006132 <icmpSendErrorMessage>
 80066ac:	e000      	b.n	80066b0 <ipv4ProcessDatagram+0x108>
      return;
 80066ae:	bf00      	nop
         ICMP_CODE_PORT_UNREACHABLE, 0, buffer, 0);
   }
}
 80066b0:	3728      	adds	r7, #40	; 0x28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <ipv4SendDatagram>:
 * @return Error code
 **/

error_t ipv4SendDatagram(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, uint_t flags)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b08c      	sub	sp, #48	; 0x30
 80066ba:	af04      	add	r7, sp, #16
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutRequests, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutRequests, 1);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutRequests, 1);

   //Retrieve the length of payload
   length = netBufferGetLength(buffer) - offset;
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fb fdaa 	bl	800221e <netBufferGetLength>
 80066ca:	4602      	mov	r2, r0
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	61bb      	str	r3, [r7, #24]

   //Check whether the TTL value is zero
   if((flags & IP_FLAG_TTL) == 0)
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <ipv4SendDatagram+0x2c>
   {
      //Use default Time-To-Live value
      flags |= IPV4_DEFAULT_TTL;
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
   }

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   id = interface->ipv4Context.identification++;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	b291      	uxth	r1, r2
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f8a2 1098 	strh.w	r1, [r2, #152]	; 0x98
 80066f2:	82fb      	strh	r3, [r7, #22]

   //If the payload length is smaller than the network
   //interface MTU then no fragmentation is needed
   if((length + sizeof(Ipv4Header)) <= interface->ipv4Context.linkMtu)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f103 0214 	add.w	r2, r3, #20
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006700:	429a      	cmp	r2, r3
 8006702:	d80e      	bhi.n	8006722 <ipv4SendDatagram+0x6c>
   {
      //Send data as is
      error = ipv4SendPacket(interface, pseudoHeader, id, 0, buffer, offset,
 8006704:	8afa      	ldrh	r2, [r7, #22]
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	2300      	movs	r3, #0
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f814 	bl	8006744 <ipv4SendPacket>
 800671c:	4603      	mov	r3, r0
 800671e:	83fb      	strh	r3, [r7, #30]
 8006720:	e00b      	b.n	800673a <ipv4SendDatagram+0x84>
   //then the device must fragment the data
   else
   {
#if (IPV4_FRAG_SUPPORT == ENABLED)
      //Fragment IP datagram into smaller packets
      error = ipv4FragmentDatagram(interface, pseudoHeader, id, buffer, offset,
 8006722:	8afa      	ldrh	r2, [r7, #22]
 8006724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f8e9 	bl	8006908 <ipv4FragmentDatagram>
 8006736:	4603      	mov	r3, r0
 8006738:	83fb      	strh	r3, [r7, #30]
      error = ERROR_MESSAGE_TOO_LONG;
#endif
   }

   //Return status code
   return error;
 800673a:	8bfb      	ldrh	r3, [r7, #30]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <ipv4SendPacket>:
 **/

error_t ipv4SendPacket(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   uint16_t fragId, size_t fragOffset, NetBuffer *buffer, size_t offset,
   uint_t flags)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	80fb      	strh	r3, [r7, #6]
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;
#endif

   //Is there enough space for the IPv4 header?
   if(offset < sizeof(Ipv4Header))
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	2b13      	cmp	r3, #19
 8006758:	d801      	bhi.n	800675e <ipv4SendPacket+0x1a>
      return ERROR_INVALID_PARAMETER;
 800675a:	2302      	movs	r3, #2
 800675c:	e09a      	b.n	8006894 <ipv4SendPacket+0x150>

   //Make room for the header
   offset -= sizeof(Ipv4Header);
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	3b14      	subs	r3, #20
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
   //Calculate the size of the entire packet, including header and data
   length = netBufferGetLength(buffer) - offset;
 8006764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006766:	f7fb fd5a 	bl	800221e <netBufferGetLength>
 800676a:	4602      	mov	r2, r0
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	61bb      	str	r3, [r7, #24]

   //Point to the IPv4 header
   packet = netBufferAt(buffer, offset);
 8006772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006776:	f7fb fe1a 	bl	80023ae <netBufferAt>
 800677a:	6178      	str	r0, [r7, #20]

   //Format IPv4 header
   packet->version = IPV4_VERSION;
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	7813      	ldrb	r3, [r2, #0]
 8006780:	2104      	movs	r1, #4
 8006782:	f361 1307 	bfi	r3, r1, #4, #4
 8006786:	7013      	strb	r3, [r2, #0]
   packet->headerLength = 5;
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	7813      	ldrb	r3, [r2, #0]
 800678c:	2105      	movs	r1, #5
 800678e:	f361 0303 	bfi	r3, r1, #0, #4
 8006792:	7013      	strb	r3, [r2, #0]
   packet->typeOfService = 0;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	705a      	strb	r2, [r3, #1]
   packet->totalLength = htons(length);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	b29b      	uxth	r3, r3
 800679e:	4618      	mov	r0, r3
 80067a0:	f7f9 fefe 	bl	80005a0 <swapInt16>
 80067a4:	4603      	mov	r3, r0
 80067a6:	461a      	mov	r2, r3
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	805a      	strh	r2, [r3, #2]
   packet->identification = htons(fragId);
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7f9 fef6 	bl	80005a0 <swapInt16>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	809a      	strh	r2, [r3, #4]
   packet->fragmentOffset = htons(fragOffset);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7f9 feed 	bl	80005a0 <swapInt16>
 80067c6:	4603      	mov	r3, r0
 80067c8:	461a      	mov	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	80da      	strh	r2, [r3, #6]
   packet->timeToLive = flags & IP_FLAG_TTL;
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	721a      	strb	r2, [r3, #8]
   packet->protocol = pseudoHeader->protocol;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	7a5a      	ldrb	r2, [r3, #9]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	725a      	strb	r2, [r3, #9]
   packet->headerChecksum = 0;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	729a      	strb	r2, [r3, #10]
 80067e4:	2200      	movs	r2, #0
 80067e6:	72da      	strb	r2, [r3, #11]
   packet->srcAddr = pseudoHeader->srcAddr;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	60da      	str	r2, [r3, #12]
   packet->destAddr = pseudoHeader->destAddr;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	611a      	str	r2, [r3, #16]

   //Calculate IP header checksum
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
      packet->headerLength * 4);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006800:	b2db      	uxtb	r3, r3
 8006802:	009b      	lsls	r3, r3, #2
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 8006804:	461a      	mov	r2, r3
 8006806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800680a:	f7fa ffcd 	bl	80017a8 <ipCalcChecksumEx>
 800680e:	4603      	mov	r3, r0
 8006810:	461a      	mov	r2, r3
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	815a      	strh	r2, [r3, #10]

   //Ensure the source address is valid
   error = ipv4CheckSourceAddr(interface, pseudoHeader->srcAddr);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4619      	mov	r1, r3
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fbf1 	bl	8007004 <ipv4CheckSourceAddr>
 8006822:	4603      	mov	r3, r0
 8006824:	83fb      	strh	r3, [r7, #30]
   //Invalid source address?
   if(error)
 8006826:	8bfb      	ldrh	r3, [r7, #30]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <ipv4SendPacket+0xec>
      return error;
 800682c:	8bfb      	ldrh	r3, [r7, #30]
 800682e:	e031      	b.n	8006894 <ipv4SendPacket+0x150>

   //Check destination address
   if(pseudoHeader->destAddr == IPV4_UNSPECIFIED_ADDR)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <ipv4SendPacket+0xfa>
   {
      //The unspecified address must not appear on the public Internet
      error = ERROR_INVALID_ADDRESS;
 8006838:	23e4      	movs	r3, #228	; 0xe4
 800683a:	83fb      	strh	r3, [r7, #30]
 800683c:	e029      	b.n	8006892 <ipv4SendPacket+0x14e>
   }
   else if(ipv4IsLocalHostAddr(pseudoHeader->destAddr))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fdc4 	bl	80073d0 <ipv4IsLocalHostAddr>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <ipv4SendPacket+0x112>
         }
      }
#else
      //Addresses within the entire 127.0.0.0/8 block do not legitimately
      //appear on any network anywhere
      error = ERROR_NO_ROUTE;
 800684e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006852:	83fb      	strh	r3, [r7, #30]
 8006854:	e01d      	b.n	8006892 <ipv4SendPacket+0x14e>
      }
      else
#endif
#if (PPP_SUPPORT == ENABLED)
      //PPP interface?
      if(interface->nicDriver != NULL &&
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800685a:	2b00      	cmp	r3, #0
 800685c:	d017      	beq.n	800688e <ipv4SendPacket+0x14a>
         interface->nicDriver->type == NIC_TYPE_PPP)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006862:	781b      	ldrb	r3, [r3, #0]
      if(interface->nicDriver != NULL &&
 8006864:	2b02      	cmp	r3, #2
 8006866:	d112      	bne.n	800688e <ipv4SendPacket+0x14a>
      {
         //Update IP statistics
         ipv4UpdateOutStats(interface, pseudoHeader->destAddr, length);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	4619      	mov	r1, r3
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fe5e 	bl	8007532 <ipv4UpdateOutStats>

         //Debug message
         TRACE_INFO("Sending IPv4 packet (%" PRIuSIZE " bytes)...\r\n", length);
         //Dump IP header contents for debugging purpose
         ipv4DumpHeader(packet);
 8006876:	6978      	ldr	r0, [r7, #20]
 8006878:	f000 f83c 	bl	80068f4 <ipv4DumpHeader>

         //Send PPP frame
         error = pppSendFrame(interface, buffer, offset, PPP_PROTOCOL_IP);
 800687c:	2321      	movs	r3, #33	; 0x21
 800687e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f004 f8a2 	bl	800a9cc <pppSendFrame>
 8006888:	4603      	mov	r3, r0
 800688a:	83fb      	strh	r3, [r7, #30]
 800688c:	e001      	b.n	8006892 <ipv4SendPacket+0x14e>
      else
#endif
      //Unknown interface type?
      {
         //Report an error
         error = ERROR_INVALID_INTERFACE;
 800688e:	2307      	movs	r3, #7
 8006890:	83fb      	strh	r3, [r7, #30]
      }
   }

   //Return status code
   return error;
 8006892:	8bfb      	ldrh	r3, [r7, #30]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <ipv4AddrToString>:
 * @param[out] str NULL-terminated string representing the IPv4 address
 * @return Pointer to the formatted string
 **/

char_t *ipv4AddrToString(Ipv4Addr ipAddr, char_t *str)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
   uint8_t *p;
   static char_t buffer[16];

   //If the NULL pointer is given as parameter, then the internal buffer is used
   if(str == NULL)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <ipv4AddrToString+0x14>
      str = buffer;
 80068ac:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <ipv4AddrToString+0x50>)
 80068ae:	603b      	str	r3, [r7, #0]

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	60fb      	str	r3, [r7, #12]
   //Format IPv4 address
   sprintf(str, "%" PRIu8 ".%" PRIu8 ".%" PRIu8 ".%" PRIu8 "", p[0], p[1], p[2], p[3]);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	4619      	mov	r1, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3301      	adds	r3, #1
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3302      	adds	r3, #2
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3303      	adds	r3, #3
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	9200      	str	r2, [sp, #0]
 80068d4:	4603      	mov	r3, r0
 80068d6:	460a      	mov	r2, r1
 80068d8:	4905      	ldr	r1, [pc, #20]	; (80068f0 <ipv4AddrToString+0x54>)
 80068da:	6838      	ldr	r0, [r7, #0]
 80068dc:	f012 f880 	bl	80189e0 <siprintf>

   //Return a pointer to the formatted string
   return str;
 80068e0:	683b      	ldr	r3, [r7, #0]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000130 	.word	0x20000130
 80068f0:	080195c8 	.word	0x080195c8

080068f4 <ipv4DumpHeader>:
 * @brief Dump IPv4 header for debugging purpose
 * @param[in] ipHeader Pointer to the IPv4 header
 **/

void ipv4DumpHeader(const Ipv4Header *ipHeader)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Time To Live = %" PRIu8 "\r\n", ipHeader->timeToLive);
   TRACE_DEBUG("  Protocol = %" PRIu8 "\r\n", ipHeader->protocol);
   TRACE_DEBUG("  Header Checksum = 0x%04" PRIX16 "\r\n", ntohs(ipHeader->headerChecksum));
   TRACE_DEBUG("  Src Addr = %s\r\n", ipv4AddrToString(ipHeader->srcAddr, NULL));
   TRACE_DEBUG("  Dest Addr = %s\r\n", ipv4AddrToString(ipHeader->destAddr, NULL));
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <ipv4FragmentDatagram>:
 **/

error_t ipv4FragmentDatagram(NetInterface *interface,
   Ipv4PseudoHeader *pseudoHeader, uint16_t id, const NetBuffer *payload,
   size_t payloadOffset, uint_t flags)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b090      	sub	sp, #64	; 0x40
 800690c:	af04      	add	r7, sp, #16
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	80fb      	strh	r3, [r7, #6]
   //Number of IP datagrams that would require fragmentation in order to be transmitted
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragReqds, 1);

   //Retrieve the length of the payload
   payloadLen = netBufferGetLength(payload) - payloadOffset;
 8006918:	6838      	ldr	r0, [r7, #0]
 800691a:	f7fb fc80 	bl	800221e <netBufferGetLength>
 800691e:	4602      	mov	r2, r0
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	623b      	str	r3, [r7, #32]

   //Allocate a memory buffer to hold IP fragments
   fragment = ipAllocBuffer(0, &fragmentOffset);
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	4619      	mov	r1, r3
 800692c:	2000      	movs	r0, #0
 800692e:	f7fa ffe3 	bl	80018f8 <ipAllocBuffer>
 8006932:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(!fragment)
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <ipv4FragmentDatagram+0x36>
      return ERROR_OUT_OF_MEMORY;
 800693a:	2364      	movs	r3, #100	; 0x64
 800693c:	e06b      	b.n	8006a16 <ipv4FragmentDatagram+0x10e>

   //Determine the maximum payload size for fragmented packets
   maxFragmentSize = interface->ipv4Context.linkMtu - sizeof(Ipv4Header);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006944:	3b14      	subs	r3, #20
 8006946:	61bb      	str	r3, [r7, #24]
   //The size shall be a multiple of 8-byte blocks
   maxFragmentSize -= (maxFragmentSize % 8);
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	61bb      	str	r3, [r7, #24]

   //Initialize error code
   error = NO_ERROR;
 8006950:	2300      	movs	r3, #0
 8006952:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Split the payload into multiple IP fragments
   for(offset = 0; offset < payloadLen; offset += length)
 8006954:	2300      	movs	r3, #0
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
 8006958:	e051      	b.n	80069fe <ipv4FragmentDatagram+0xf6>
   {
      //Flush the contents of the fragment
      error = netBufferSetLength(fragment, fragmentOffset);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4619      	mov	r1, r3
 800695e:	69f8      	ldr	r0, [r7, #28]
 8006960:	f7fb fc7f 	bl	8002262 <netBufferSetLength>
 8006964:	4603      	mov	r3, r0
 8006966:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Sanity check
      if(error)
 8006968:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800696a:	2b00      	cmp	r3, #0
 800696c:	d14c      	bne.n	8006a08 <ipv4FragmentDatagram+0x100>
         break;

      //Process the last fragment?
      if((payloadLen - offset) <= maxFragmentSize)
 800696e:	6a3a      	ldr	r2, [r7, #32]
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	429a      	cmp	r2, r3
 8006978:	d31d      	bcc.n	80069b6 <ipv4FragmentDatagram+0xae>
      {
         //Size of the current fragment
         length = payloadLen - offset;
 800697a:	6a3a      	ldr	r2, [r7, #32]
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 8006982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	441a      	add	r2, r3
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	69f8      	ldr	r0, [r7, #28]
 800698e:	f7fb fd41 	bl	8002414 <netBufferConcat>

         //Do not set the MF flag for the last fragment
         error = ipv4SendPacket(interface, pseudoHeader, id,
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	08d8      	lsrs	r0, r3, #3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	88f9      	ldrh	r1, [r7, #6]
 800699a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800699c:	9202      	str	r2, [sp, #8]
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	4603      	mov	r3, r0
 80069a6:	460a      	mov	r2, r1
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff feca 	bl	8006744 <ipv4SendPacket>
 80069b0:	4603      	mov	r3, r0
 80069b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80069b4:	e01c      	b.n	80069f0 <ipv4FragmentDatagram+0xe8>
            offset / 8, fragment, fragmentOffset, flags);
      }
      else
      {
         //Size of the current fragment (must be a multiple of 8-byte blocks)
         length = maxFragmentSize;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 80069ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	441a      	add	r2, r3
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	69f8      	ldr	r0, [r7, #28]
 80069c6:	f7fb fd25 	bl	8002414 <netBufferConcat>

         //Fragmented packets must have the MF flag set
         error = ipv4SendPacket(interface, pseudoHeader, id,
            IPV4_FLAG_MF | (offset / 8), fragment, fragmentOffset, flags);
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	08db      	lsrs	r3, r3, #3
         error = ipv4SendPacket(interface, pseudoHeader, id,
 80069ce:	f443 5000 	orr.w	r0, r3, #8192	; 0x2000
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	88f9      	ldrh	r1, [r7, #6]
 80069d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069d8:	9202      	str	r2, [sp, #8]
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	4603      	mov	r3, r0
 80069e2:	460a      	mov	r2, r1
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff feac 	bl	8006744 <ipv4SendPacket>
 80069ec:	4603      	mov	r3, r0
 80069ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      //Failed to send current IP packet?
      if(error)
 80069f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <ipv4FragmentDatagram+0x104>
   for(offset = 0; offset < payloadLen; offset += length)
 80069f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	4413      	add	r3, r2
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d3a9      	bcc.n	800695a <ipv4FragmentDatagram+0x52>
 8006a06:	e002      	b.n	8006a0e <ipv4FragmentDatagram+0x106>
         break;
 8006a08:	bf00      	nop
 8006a0a:	e000      	b.n	8006a0e <ipv4FragmentDatagram+0x106>
         break;
 8006a0c:	bf00      	nop
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragOKs, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragOKs, 1);
   }

   //Free previously allocated memory
   netBufferFree(fragment);
 8006a0e:	69f8      	ldr	r0, [r7, #28]
 8006a10:	f7fb fbf6 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 8006a14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3730      	adds	r7, #48	; 0x30
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <ipv4ReassembleDatagram>:
 * @param[in] length Packet length including header and payload
 **/

void ipv4ReassembleDatagram(NetInterface *interface,
   const Ipv4Header *packet, size_t length)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b08c      	sub	sp, #48	; 0x30
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
   MIB2_INC_COUNTER32(ipGroup.ipReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmReqds, 1);

   //Get the length of the payload
   length -= packet->headerLength * 4;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	461a      	mov	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	607b      	str	r3, [r7, #4]
   //Convert the fragment offset from network byte order
   offset = ntohs(packet->fragmentOffset);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	88db      	ldrh	r3, [r3, #6]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7f9 fdab 	bl	80005a0 <swapInt16>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Every fragment except the last must contain a multiple of 8 bytes of data
   if((offset & IPV4_FLAG_MF) && (length % 8))
 8006a4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <ipv4ReassembleDatagram+0x46>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f040 816f 	bne.w	8006d42 <ipv4ReassembleDatagram+0x324>
      //Drop the incoming fragment
      return;
   }

   //Calculate the index of the first byte
   dataFirst = (offset & IPV4_OFFSET_MASK) * 8;
 8006a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	84bb      	strh	r3, [r7, #36]	; 0x24
   //Calculate the index immediately following the last byte
   dataLast = dataFirst + (uint16_t) length;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a76:	4413      	add	r3, r2
 8006a78:	847b      	strh	r3, [r7, #34]	; 0x22

   //Search for a matching IP datagram being reassembled
   frag = ipv4SearchFragQueue(interface, packet);
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f9c7 	bl	8006e10 <ipv4SearchFragQueue>
 8006a82:	61f8      	str	r0, [r7, #28]

   //No matching entry in the reassembly queue?
   if(frag == NULL)
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 815d 	beq.w	8006d46 <ipv4ReassembleDatagram+0x328>
      //Drop the incoming fragment
      return;
   }

   //The very first fragment requires special handling
   if(!(offset & IPV4_OFFSET_MASK))
 8006a8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d132      	bne.n	8006afc <ipv4ReassembleDatagram+0xde>
   {
      //Calculate the length of the IP header including options
      frag->headerLength = packet->headerLength * 4;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	605a      	str	r2, [r3, #4]

      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + frag->dataLen) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab6:	d906      	bls.n	8006ac6 <ipv4ReassembleDatagram+0xa8>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	3310      	adds	r3, #16
 8006abc:	2100      	movs	r1, #0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fb fbcf 	bl	8002262 <netBufferSetLength>
         //Exit immediately
         return;
 8006ac4:	e140      	b.n	8006d48 <ipv4ReassembleDatagram+0x32a>
      }

      //Make sure the IP header entirely fits in the first chunk
      if(frag->headerLength > frag->buffer.chunk[0].size)
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	8bd2      	ldrh	r2, [r2, #30]
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d906      	bls.n	8006ae0 <ipv4ReassembleDatagram+0xc2>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	3310      	adds	r3, #16
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fb fbc2 	bl	8002262 <netBufferSetLength>
         //Exit immediately
         return;
 8006ade:	e133      	b.n	8006d48 <ipv4ReassembleDatagram+0x32a>
      }

      //Fix the length of the first chunk
      frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	839a      	strh	r2, [r3, #28]
      //Always take the IP header from the first fragment
      netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	f103 0010 	add.w	r0, r3, #16
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	2100      	movs	r1, #0
 8006af8:	f7fb fe24 	bl	8002744 <netBufferWrite>
   }

   //It may be necessary to increase the size of the buffer...
   if(dataLast > frag->dataLen)
 8006afc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d927      	bls.n	8006b56 <ipv4ReassembleDatagram+0x138>
   {
      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + dataLast) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b12:	d906      	bls.n	8006b22 <ipv4ReassembleDatagram+0x104>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	3310      	adds	r3, #16
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fb fba1 	bl	8002262 <netBufferSetLength>
         //Exit immediately
         return;
 8006b20:	e112      	b.n	8006d48 <ipv4ReassembleDatagram+0x32a>
      }

      //Adjust the size of the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + dataLast + sizeof(Ipv4HoleDesc));
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b2e:	4413      	add	r3, r2
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8006b30:	3306      	adds	r3, #6
 8006b32:	4619      	mov	r1, r3
 8006b34:	f7fb fb95 	bl	8002262 <netBufferSetLength>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	837b      	strh	r3, [r7, #26]

      //Any error to report?
      if(error)
 8006b3c:	8b7b      	ldrh	r3, [r7, #26]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d006      	beq.n	8006b50 <ipv4ReassembleDatagram+0x132>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	3310      	adds	r3, #16
 8006b46:	2100      	movs	r1, #0
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fb fb8a 	bl	8002262 <netBufferSetLength>
         //Exit immediately
         return;
 8006b4e:	e0fb      	b.n	8006d48 <ipv4ReassembleDatagram+0x32a>
      }

      //Actual length of the payload
      frag->dataLen = dataLast;
 8006b50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	609a      	str	r2, [r3, #8]
   }

   //Select the first hole descriptor from the list
   hole = ipv4FindHole(frag, frag->firstHole);
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	899b      	ldrh	r3, [r3, #12]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	69f8      	ldr	r0, [r7, #28]
 8006b5e:	f000 fa32 	bl	8006fc6 <ipv4FindHole>
 8006b62:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Keep track of the previous hole in the list
   prevHole = NULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28

   //Iterate through the hole descriptors
   while(hole != NULL)
 8006b68:	e08b      	b.n	8006c82 <ipv4ReassembleDatagram+0x264>
   {
      //Save lower and upper boundaries for later use
      uint16_t holeFirst = hole->first;
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	781a      	ldrb	r2, [r3, #0]
 8006b6e:	785b      	ldrb	r3, [r3, #1]
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	4313      	orrs	r3, r2
 8006b74:	827b      	strh	r3, [r7, #18]
      uint16_t holeLast = hole->last;
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	789a      	ldrb	r2, [r3, #2]
 8006b7a:	78db      	ldrb	r3, [r3, #3]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	823b      	strh	r3, [r7, #16]

      //Check whether the newly arrived fragment interacts with this hole
      //in some way
      if(dataFirst < holeLast && dataLast > holeFirst)
 8006b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b84:	8a3b      	ldrh	r3, [r7, #16]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d269      	bcs.n	8006c5e <ipv4ReassembleDatagram+0x240>
 8006b8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b8c:	8a7b      	ldrh	r3, [r7, #18]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d965      	bls.n	8006c5e <ipv4ReassembleDatagram+0x240>
      {
         //The current descriptor is no longer valid. We will destroy it,
         //and in the next two steps, we will determine whether or not it
         //is necessary to create any new hole descriptors
         if(prevHole != NULL)
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <ipv4ReassembleDatagram+0x186>
            prevHole->next = hole->next;
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	889b      	ldrh	r3, [r3, #4]
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	809a      	strh	r2, [r3, #4]
 8006ba2:	e004      	b.n	8006bae <ipv4ReassembleDatagram+0x190>
         else
            frag->firstHole = hole->next;
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	889b      	ldrh	r3, [r3, #4]
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	819a      	strh	r2, [r3, #12]

         //Is there still a hole at the beginning of the segment?
         if(dataFirst > holeFirst)
 8006bae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bb0:	8a7b      	ldrh	r3, [r7, #18]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d924      	bls.n	8006c00 <ipv4ReassembleDatagram+0x1e2>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, holeFirst);
 8006bb6:	8a7b      	ldrh	r3, [r7, #18]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	69f8      	ldr	r0, [r7, #28]
 8006bbc:	f000 fa03 	bl	8006fc6 <ipv4FindHole>
 8006bc0:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = holeFirst;
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	8a7a      	ldrh	r2, [r7, #18]
 8006bc6:	801a      	strh	r2, [r3, #0]
            hole->last = dataFirst;
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bcc:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <ipv4ReassembleDatagram+0x1cc>
            {
               hole->next = prevHole->next;
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	889b      	ldrh	r3, [r3, #4]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	809a      	strh	r2, [r3, #4]
 8006be8:	e008      	b.n	8006bfc <ipv4ReassembleDatagram+0x1de>
            }
            else
            {
               hole->next = frag->firstHole;
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	899a      	ldrh	r2, [r3, #12]
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
         }

         //Is there still a hole at the end of the segment?
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 8006c00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c02:	8a3b      	ldrh	r3, [r7, #16]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d22d      	bcs.n	8006c64 <ipv4ReassembleDatagram+0x246>
 8006c08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d028      	beq.n	8006c64 <ipv4ReassembleDatagram+0x246>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, dataLast);
 8006c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c14:	4619      	mov	r1, r3
 8006c16:	69f8      	ldr	r0, [r7, #28]
 8006c18:	f000 f9d5 	bl	8006fc6 <ipv4FindHole>
 8006c1c:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = dataLast;
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c22:	801a      	strh	r2, [r3, #0]
            hole->last = holeLast;
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	8a3a      	ldrh	r2, [r7, #16]
 8006c28:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <ipv4ReassembleDatagram+0x228>
            {
               hole->next = prevHole->next;
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	889b      	ldrh	r3, [r3, #4]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	809a      	strh	r2, [r3, #4]
 8006c44:	e008      	b.n	8006c58 <ipv4ReassembleDatagram+0x23a>
            }
            else
            {
               hole->next = frag->firstHole;
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	899a      	ldrh	r2, [r3, #12]
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 8006c5c:	e002      	b.n	8006c64 <ipv4ReassembleDatagram+0x246>
         }
      }
      else
      {
         //The newly arrived fragment does not interact with the current hole
         prevHole = hole;
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c62:	e000      	b.n	8006c66 <ipv4ReassembleDatagram+0x248>
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 8006c64:	bf00      	nop
      }

      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <ipv4ReassembleDatagram+0x256>
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	889b      	ldrh	r3, [r3, #4]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	e001      	b.n	8006c78 <ipv4ReassembleDatagram+0x25a>
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	899b      	ldrh	r3, [r3, #12]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	69f8      	ldr	r0, [r7, #28]
 8006c7c:	f000 f9a3 	bl	8006fc6 <ipv4FindHole>
 8006c80:	62f8      	str	r0, [r7, #44]	; 0x2c
   while(hole != NULL)
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f47f af70 	bne.w	8006b6a <ipv4ReassembleDatagram+0x14c>
   }

   //Copy data from the fragment to the reassembly buffer
   netBufferWrite((NetBuffer *) &frag->buffer,
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f103 0010 	add.w	r0, r3, #16
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	685a      	ldr	r2, [r3, #4]
   netBufferWrite((NetBuffer *) &frag->buffer,
 8006c94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c96:	18d1      	adds	r1, r2, r3
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	461a      	mov	r2, r3
   netBufferWrite((NetBuffer *) &frag->buffer,
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	441a      	add	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f7fb fd4a 	bl	8002744 <netBufferWrite>

   //Dump hole descriptor list
   ipv4DumpHoleList(frag);
 8006cb0:	69f8      	ldr	r0, [r7, #28]
 8006cb2:	f000 f99d 	bl	8006ff0 <ipv4DumpHoleList>

   //If the hole descriptor list is empty, the reassembly process is now complete
   if(!ipv4FindHole(frag, frag->firstHole))
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	899b      	ldrh	r3, [r3, #12]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	69f8      	ldr	r0, [r7, #28]
 8006cbe:	f000 f982 	bl	8006fc6 <ipv4FindHole>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d13f      	bne.n	8006d48 <ipv4ReassembleDatagram+0x32a>
   {
      //Discard the extra hole descriptor that follows the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + frag->dataLen);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	689b      	ldr	r3, [r3, #8]
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8006cd6:	4413      	add	r3, r2
 8006cd8:	4619      	mov	r1, r3
 8006cda:	f7fb fac2 	bl	8002262 <netBufferSetLength>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	837b      	strh	r3, [r7, #26]

      //Check status code
      if(error)
 8006ce2:	8b7b      	ldrh	r3, [r7, #26]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d125      	bne.n	8006d34 <ipv4ReassembleDatagram+0x316>
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);
      }
      else
      {
         //Point to the IP header
         Ipv4Header *datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	3310      	adds	r3, #16
 8006cec:	2100      	movs	r1, #0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fb fb5d 	bl	80023ae <netBufferAt>
 8006cf4:	6178      	str	r0, [r7, #20]

         //Fix IP header
         datagram->totalLength = htons(frag->headerLength + frag->dataLen);
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	4413      	add	r3, r2
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7f9 fc4a 	bl	80005a0 <swapInt16>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	805a      	strh	r2, [r3, #2]
         datagram->fragmentOffset = 0;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2200      	movs	r2, #0
 8006d18:	719a      	strb	r2, [r3, #6]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	71da      	strb	r2, [r3, #7]
         datagram->headerChecksum = 0;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2200      	movs	r2, #0
 8006d22:	729a      	strb	r2, [r3, #10]
 8006d24:	2200      	movs	r2, #0
 8006d26:	72da      	strb	r2, [r3, #11]
         MIB2_INC_COUNTER32(ipGroup.ipReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmOKs, 1);

         //Pass the original IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &frag->buffer);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	3310      	adds	r3, #16
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff fc3a 	bl	80065a8 <ipv4ProcessDatagram>
      }

      //Release previously allocated memory
      netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	3310      	adds	r3, #16
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fb fa91 	bl	8002262 <netBufferSetLength>
 8006d40:	e002      	b.n	8006d48 <ipv4ReassembleDatagram+0x32a>
      return;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <ipv4ReassembleDatagram+0x32a>
      return;
 8006d46:	bf00      	nop
   }
}
 8006d48:	3730      	adds	r7, #48	; 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <ipv4FragTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void ipv4FragTick(NetInterface *interface)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b08a      	sub	sp, #40	; 0x28
 8006d52:	af02      	add	r7, sp, #8
 8006d54:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv4HoleDesc *hole;

   //Get current time
   time = osGetSystemTime();
 8006d56:	f7f9 fd22 	bl	800079e <osGetSystemTime>
 8006d5a:	61b8      	str	r0, [r7, #24]

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61fb      	str	r3, [r7, #28]
 8006d60:	e04f      	b.n	8006e02 <ipv4FragTick+0xb4>
   {
      //Point to the current entry in the reassembly queue
      Ipv4FragDesc *frag = &interface->ipv4Context.fragQueue[i];
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	4613      	mov	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	4413      	add	r3, r2
 8006d74:	3308      	adds	r3, #8
 8006d76:	617b      	str	r3, [r7, #20]

      //Make sure the entry is currently in use
      if(frag->buffer.chunkCount > 0)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d03d      	beq.n	8006dfc <ipv4FragTick+0xae>
      {
         //If the timer runs out, the partially-reassembled datagram must be
         //discarded and ICMP Time Exceeded message sent to the source host
         if((time - frag->timestamp) >= IPV4_FRAG_TIME_TO_LIVE)
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d935      	bls.n	8006dfc <ipv4FragTick+0xae>
         {
            //Debug message
            TRACE_INFO("IPv4 fragment reassembly timeout...\r\n");
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(frag->buffer.chunk[0].address);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fdad 	bl	80068f4 <ipv4DumpHeader>
            MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

            //Point to the first hole descriptor
            hole = ipv4FindHole(frag, frag->firstHole);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	899b      	ldrh	r3, [r3, #12]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6978      	ldr	r0, [r7, #20]
 8006da2:	f000 f910 	bl	8006fc6 <ipv4FindHole>
 8006da6:	6138      	str	r0, [r7, #16]

            //Make sure the fragment zero has been received
            //before sending an ICMP message
            if(hole != NULL && hole->first > 0)
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d020      	beq.n	8006df0 <ipv4FragTick+0xa2>
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01b      	beq.n	8006df0 <ipv4FragTick+0xa2>
            {
               //Fix the size of the reconstructed datagram
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f103 0010 	add.w	r0, r3, #16
                  frag->headerLength + hole->first);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	8812      	ldrh	r2, [r2, #0]
 8006dc6:	b292      	uxth	r2, r2
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8006dc8:	4413      	add	r3, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	f7fb fa49 	bl	8002262 <netBufferSetLength>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	81fb      	strh	r3, [r7, #14]

               //Check status code
               if(!error)
 8006dd4:	89fb      	ldrh	r3, [r7, #14]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <ipv4FragTick+0xa2>
               {
                  //Send an ICMP Time Exceeded message
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
                     ICMP_CODE_REASSEMBLY_TIME_EXCEEDED, 0, (NetBuffer *) &frag->buffer, 0);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	3310      	adds	r3, #16
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
 8006dde:	2200      	movs	r2, #0
 8006de0:	9201      	str	r2, [sp, #4]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	2300      	movs	r3, #0
 8006de6:	2201      	movs	r2, #1
 8006de8:	210b      	movs	r1, #11
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff f9a1 	bl	8006132 <icmpSendErrorMessage>
               }
            }

            //Drop the partially reconstructed datagram
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	3310      	adds	r3, #16
 8006df4:	2100      	movs	r1, #0
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fb fa33 	bl	8002262 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	61fb      	str	r3, [r7, #28]
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d9ac      	bls.n	8006d62 <ipv4FragTick+0x14>
         }
      }
   }
}
 8006e08:	bf00      	nop
 8006e0a:	3720      	adds	r7, #32
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <ipv4SearchFragQueue>:
 * @return Matching fragment descriptor
 **/

Ipv4FragDesc *ipv4SearchFragQueue(NetInterface *interface,
   const Ipv4Header *packet)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
   Ipv4Header *datagram;
   Ipv4FragDesc *frag;
   Ipv4HoleDesc *hole;

   //Search for a matching IP datagram being reassembled
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	e03b      	b.n	8006e98 <ipv4SearchFragQueue+0x88>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	4413      	add	r3, r2
 8006e32:	3308      	adds	r3, #8
 8006e34:	61bb      	str	r3, [r7, #24]

      //Check whether the current entry is used?
      if(frag->buffer.chunkCount > 0)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d029      	beq.n	8006e92 <ipv4SearchFragQueue+0x82>
      {
         //Point to the corresponding datagram
         datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	3310      	adds	r3, #16
 8006e42:	2100      	movs	r1, #0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fb fab2 	bl	80023ae <netBufferAt>
 8006e4a:	60f8      	str	r0, [r7, #12]

         //Check source and destination addresses
         if(datagram->srcAddr != packet->srcAddr)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d115      	bne.n	8006e84 <ipv4SearchFragQueue+0x74>
            continue;
         if(datagram->destAddr != packet->destAddr)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d111      	bne.n	8006e88 <ipv4SearchFragQueue+0x78>
            continue;
         //Compare identification and protocol fields
         if(datagram->identification != packet->identification)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	889b      	ldrh	r3, [r3, #4]
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	889b      	ldrh	r3, [r3, #4]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d10b      	bne.n	8006e8c <ipv4SearchFragQueue+0x7c>
            continue;
         if(datagram->protocol != packet->protocol)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	7a5a      	ldrb	r2, [r3, #9]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	7a5b      	ldrb	r3, [r3, #9]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d107      	bne.n	8006e90 <ipv4SearchFragQueue+0x80>
            continue;

         //A matching entry has been found in the reassembly queue
         return frag;
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	e07d      	b.n	8006f80 <ipv4SearchFragQueue+0x170>
            continue;
 8006e84:	bf00      	nop
 8006e86:	e004      	b.n	8006e92 <ipv4SearchFragQueue+0x82>
            continue;
 8006e88:	bf00      	nop
 8006e8a:	e002      	b.n	8006e92 <ipv4SearchFragQueue+0x82>
            continue;
 8006e8c:	bf00      	nop
 8006e8e:	e000      	b.n	8006e92 <ipv4SearchFragQueue+0x82>
            continue;
 8006e90:	bf00      	nop
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	3301      	adds	r3, #1
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d9c0      	bls.n	8006e20 <ipv4SearchFragQueue+0x10>
      }
   }

   //If the current packet does not match an existing entry
   //in the reassembly queue, then create a new entry
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	e069      	b.n	8006f78 <ipv4SearchFragQueue+0x168>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	61bb      	str	r3, [r7, #24]

      //The current entry is free?
      if(!frag->buffer.chunkCount)
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d157      	bne.n	8006f72 <ipv4SearchFragQueue+0x162>
      {
         //Number of chunks that comprise the reassembly buffer
         frag->buffer.maxChunkCount = arraysize(frag->buffer.chunk);
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	615a      	str	r2, [r3, #20]

         //Allocate sufficient memory to hold the IPv4 header and
         //the first hole descriptor
         error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	3310      	adds	r3, #16
 8006ecc:	f240 6106 	movw	r1, #1542	; 0x606
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fb f9c6 	bl	8002262 <netBufferSetLength>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	82fb      	strh	r3, [r7, #22]
            NET_MEM_POOL_BUFFER_SIZE + sizeof(Ipv4HoleDesc));

         //Failed to allocate memory?
         if(error)
 8006eda:	8afb      	ldrh	r3, [r7, #22]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d007      	beq.n	8006ef0 <ipv4SearchFragQueue+0xe0>
         {
            //Clean up side effects
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	3310      	adds	r3, #16
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fb f9bb 	bl	8002262 <netBufferSetLength>
            //Exit immediately
            return NULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e047      	b.n	8006f80 <ipv4SearchFragQueue+0x170>
         }

         //Initial length of the reconstructed datagram
         frag->headerLength = packet->headerLength * 4;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	461a      	mov	r2, r3
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	605a      	str	r2, [r3, #4]
         frag->dataLen = 0;
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2200      	movs	r2, #0
 8006f06:	609a      	str	r2, [r3, #8]

         //Fix the length of the first chunk
         frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	839a      	strh	r2, [r3, #28]
         //Copy IPv4 header from the incoming fragment
         netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f103 0010 	add.w	r0, r3, #16
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	2100      	movs	r1, #0
 8006f20:	f7fb fc10 	bl	8002744 <netBufferWrite>

         //Save current time
         frag->timestamp = osGetSystemTime();
 8006f24:	f7f9 fc3b 	bl	800079e <osGetSystemTime>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	601a      	str	r2, [r3, #0]
         //Create a new entry in the hole descriptor list
         frag->firstHole = 0;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2200      	movs	r2, #0
 8006f32:	819a      	strh	r2, [r3, #12]

         //Point to first hole descriptor
         hole = ipv4FindHole(frag, frag->firstHole);
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	899b      	ldrh	r3, [r3, #12]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	69b8      	ldr	r0, [r7, #24]
 8006f3c:	f000 f843 	bl	8006fc6 <ipv4FindHole>
 8006f40:	6138      	str	r0, [r7, #16]
         //The entry describes the datagram as being completely missing
         hole->first = 0;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	705a      	strb	r2, [r3, #1]
         hole->last = IPV4_INFINITY;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f52:	709a      	strb	r2, [r3, #2]
 8006f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f58:	70da      	strb	r2, [r3, #3]
         hole->next = IPV4_INFINITY;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f60:	711a      	strb	r2, [r3, #4]
 8006f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f66:	715a      	strb	r2, [r3, #5]

         //Dump hole descriptor list
         ipv4DumpHoleList(frag);
 8006f68:	69b8      	ldr	r0, [r7, #24]
 8006f6a:	f000 f841 	bl	8006ff0 <ipv4DumpHoleList>

         //Return the matching fragment descriptor
         return frag;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	e006      	b.n	8006f80 <ipv4SearchFragQueue+0x170>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	3301      	adds	r3, #1
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d992      	bls.n	8006ea4 <ipv4SearchFragQueue+0x94>
      }
   }

   //The reassembly queue is full
   return NULL;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3720      	adds	r7, #32
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <ipv4FlushFragQueue>:
 * @brief Flush IPv4 reassembly queue
 * @param[in] interface Underlying network interface
 **/

void ipv4FlushFragQueue(NetInterface *interface)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e010      	b.n	8006fb8 <ipv4FlushFragQueue+0x30>
   {
      //Drop any partially reconstructed datagram
      netBufferSetLength((NetBuffer *) &interface->ipv4Context.fragQueue[i].buffer, 0);
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	3308      	adds	r3, #8
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fb f958 	bl	8002262 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d9eb      	bls.n	8006f96 <ipv4FlushFragQueue+0xe>
   }
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <ipv4FindHole>:
 * @return A pointer to the hole descriptor is returned if the
 *   specified offset is valid. Otherwise NULL is returned
 **/

Ipv4HoleDesc *ipv4FindHole(Ipv4FragDesc *frag, uint16_t offset)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	807b      	strh	r3, [r7, #2]
   //Return a pointer to the hole descriptor
   return netBufferAt((NetBuffer *) &frag->buffer, frag->headerLength + offset);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f103 0010 	add.w	r0, r3, #16
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	887b      	ldrh	r3, [r7, #2]
 8006fde:	4413      	add	r3, r2
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	f7fb f9e4 	bl	80023ae <netBufferAt>
 8006fe6:	4603      	mov	r3, r0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <ipv4DumpHoleList>:
 * @brief Dump hole descriptor list
 * @param[in] frag IPv4 fragment descriptor
 **/

void ipv4DumpHoleList(Ipv4FragDesc *frag)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
      TRACE_DEBUG("  %" PRIu16 " - %" PRIu16 "\r\n", hole->first, hole->last);
      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, hole->next);
   }
#endif
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <ipv4CheckSourceAddr>:
 * @param[in] ipAddr Source IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckSourceAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
   //Broadcast and multicast addresses must not be used as source address
   //(refer to RFC 1122, section 3.2.1.3)
   if(ipv4IsBroadcastAddr(interface, ipAddr) || ipv4IsMulticastAddr(ipAddr))
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f973 	bl	80072fc <ipv4IsBroadcastAddr>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <ipv4CheckSourceAddr+0x22>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007022:	2be0      	cmp	r3, #224	; 0xe0
 8007024:	d101      	bne.n	800702a <ipv4CheckSourceAddr+0x26>
   {
      //Debug message
      TRACE_WARNING("Wrong source IPv4 address!\r\n");
      //The source address not is acceptable
      return ERROR_INVALID_ADDRESS;
 8007026:	23e4      	movs	r3, #228	; 0xe4
 8007028:	e000      	b.n	800702c <ipv4CheckSourceAddr+0x28>
   }

   //The source address is acceptable
   return NO_ERROR;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <ipv4CheckDestAddr>:
 * @param[in] ipAddr Destination IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckDestAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;
   Ipv4AddrEntry *entry;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 800703e:	23e4      	movs	r3, #228	; 0xe4
 8007040:	82fb      	strh	r3, [r7, #22]

   //Broadcast address?
   if(ipv4IsBroadcastAddr(interface, ipAddr))
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f959 	bl	80072fc <ipv4IsBroadcastAddr>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <ipv4CheckDestAddr+0x22>
   {
      //Always accept broadcast address
      error = NO_ERROR;
 8007050:	2300      	movs	r3, #0
 8007052:	82fb      	strh	r3, [r7, #22]
 8007054:	e043      	b.n	80070de <ipv4CheckDestAddr+0xaa>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800705c:	2be0      	cmp	r3, #224	; 0xe0
 800705e:	d11f      	bne.n	80070a0 <ipv4CheckDestAddr+0x6c>
   {
      //Go through the multicast filter table
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8007060:	2300      	movs	r3, #0
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	e018      	b.n	8007098 <ipv4CheckDestAddr+0x64>
      {
         Ipv4FilterEntry *entry;

         //Point to the current entry
         entry = &interface->ipv4Context.multicastFilter[i];
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	33b0      	adds	r3, #176	; 0xb0
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	3308      	adds	r3, #8
 8007078:	60bb      	str	r3, [r7, #8]

         //Valid entry?
         if(entry->refCount > 0)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <ipv4CheckDestAddr+0x5e>
         {
            //Check whether the destination IPv4 address matches
            //a relevant multicast address
            if(entry->addr == ipAddr)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d102      	bne.n	8007092 <ipv4CheckDestAddr+0x5e>
            {
               //The multicast address is acceptable
               error = NO_ERROR;
 800708c:	2300      	movs	r3, #0
 800708e:	82fb      	strh	r3, [r7, #22]
               //Stop immediately
               break;
 8007090:	e025      	b.n	80070de <ipv4CheckDestAddr+0xaa>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	3301      	adds	r3, #1
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2b03      	cmp	r3, #3
 800709c:	d9e3      	bls.n	8007066 <ipv4CheckDestAddr+0x32>
 800709e:	e01e      	b.n	80070de <ipv4CheckDestAddr+0xaa>
   }
   //Unicast address?
   else
   {
      //Loop through the list of IPv4 addresses assigned to the interface
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80070a0:	2300      	movs	r3, #0
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	e018      	b.n	80070d8 <ipv4CheckDestAddr+0xa4>
      {
         //Point to the current entry
         entry = &interface->ipv4Context.addrList[i];
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	3398      	adds	r3, #152	; 0x98
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	3304      	adds	r3, #4
 80070b8:	60fb      	str	r3, [r7, #12]

         //Valid entry?
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	791b      	ldrb	r3, [r3, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d007      	beq.n	80070d2 <ipv4CheckDestAddr+0x9e>
         {
            //Check whether the destination address matches a valid unicast
            //address assigned to the interface
            if(entry->addr == ipAddr)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d102      	bne.n	80070d2 <ipv4CheckDestAddr+0x9e>
            {
               //The destination address is acceptable
               error = NO_ERROR;
 80070cc:	2300      	movs	r3, #0
 80070ce:	82fb      	strh	r3, [r7, #22]
               //We are done
               break;
 80070d0:	e005      	b.n	80070de <ipv4CheckDestAddr+0xaa>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	3301      	adds	r3, #1
 80070d6:	613b      	str	r3, [r7, #16]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0e3      	beq.n	80070a6 <ipv4CheckDestAddr+0x72>
         }
      }
   }

   //Return status code
   return error;
 80070de:	8afb      	ldrh	r3, [r7, #22]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <ipv4SelectSourceAddr>:
 * @return Error code
 **/

error_t ipv4SelectSourceAddr(NetInterface **interface,
   Ipv4Addr destAddr, Ipv4Addr *srcAddr)
{
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b08d      	sub	sp, #52	; 0x34
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
   NetInterface *bestInterface;
   Ipv4AddrEntry *currentAddr;
   Ipv4AddrEntry *bestAddr;

   //Initialize variables
   bestInterface = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	623b      	str	r3, [r7, #32]
   bestAddr = NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61fb      	str	r3, [r7, #28]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80070fc:	2300      	movs	r3, #0
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007100:	e0e0      	b.n	80072c4 <ipv4SelectSourceAddr+0x1dc>
   {
      //Point to the current interface
      currentInterface = &netInterface[i];
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8007108:	fb02 f303 	mul.w	r3, r2, r3
 800710c:	4a7a      	ldr	r2, [pc, #488]	; (80072f8 <ipv4SelectSourceAddr+0x210>)
 800710e:	4413      	add	r3, r2
 8007110:	61bb      	str	r3, [r7, #24]

      //A network interface may be provided as a hint
      if(*interface != currentInterface && *interface != NULL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	429a      	cmp	r2, r3
 800711a:	d004      	beq.n	8007126 <ipv4SelectSourceAddr+0x3e>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 80cb 	bne.w	80072bc <ipv4SelectSourceAddr+0x1d4>
         //Select the next interface in the list
         continue;
      }

      //A sort of the candidate source addresses is being performed
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 8007126:	2300      	movs	r3, #0
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
 800712a:	e0c2      	b.n	80072b2 <ipv4SelectSourceAddr+0x1ca>
      {
         //Point to the current entry
         currentAddr = &currentInterface->ipv4Context.addrList[j];
 800712c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	3398      	adds	r3, #152	; 0x98
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	4413      	add	r3, r2
 800713c:	3304      	adds	r3, #4
 800713e:	617b      	str	r3, [r7, #20]

         //Check the state of the address
         if(currentAddr->state == IPV4_ADDR_STATE_VALID)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	791b      	ldrb	r3, [r3, #4]
 8007144:	2b02      	cmp	r3, #2
 8007146:	f040 80b1 	bne.w	80072ac <ipv4SelectSourceAddr+0x1c4>
         {
            //Select the first address as default
            if(bestAddr == NULL)
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <ipv4SelectSourceAddr+0x72>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8007158:	e0a8      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
            }

            //Prefer same address
            if(bestAddr->addr == destAddr)
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	f000 8098 	beq.w	8007296 <ipv4SelectSourceAddr+0x1ae>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->addr == destAddr)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	d104      	bne.n	800717a <ipv4SelectSourceAddr+0x92>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8007178:	e098      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
            }

            //Check whether the destination address matches the default gateway
            if(bestAddr->defaultGateway == destAddr)
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	429a      	cmp	r2, r3
 8007182:	f000 808a 	beq.w	800729a <ipv4SelectSourceAddr+0x1b2>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway == destAddr)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	429a      	cmp	r2, r3
 800718e:	d104      	bne.n	800719a <ipv4SelectSourceAddr+0xb2>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8007198:	e088      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
            }

            //Prefer appropriate scope
            if(ipv4GetAddrScope(currentAddr->addr) < ipv4GetAddrScope(bestAddr->addr))
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f962 	bl	8007468 <ipv4GetAddrScope>
 80071a4:	4604      	mov	r4, r0
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f95c 	bl	8007468 <ipv4GetAddrScope>
 80071b0:	4603      	mov	r3, r0
 80071b2:	429c      	cmp	r4, r3
 80071b4:	d210      	bcs.n	80071d8 <ipv4SelectSourceAddr+0xf0>
            {
               if(ipv4GetAddrScope(currentAddr->addr) >= ipv4GetAddrScope(destAddr))
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f954 	bl	8007468 <ipv4GetAddrScope>
 80071c0:	4604      	mov	r4, r0
 80071c2:	68b8      	ldr	r0, [r7, #8]
 80071c4:	f000 f950 	bl	8007468 <ipv4GetAddrScope>
 80071c8:	4603      	mov	r3, r0
 80071ca:	429c      	cmp	r4, r3
 80071cc:	d367      	bcc.n	800729e <ipv4SelectSourceAddr+0x1b6>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 80071d6:	e062      	b.n	800729e <ipv4SelectSourceAddr+0x1b6>
            }
            else if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(currentAddr->addr))
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f943 	bl	8007468 <ipv4GetAddrScope>
 80071e2:	4604      	mov	r4, r0
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 f93d 	bl	8007468 <ipv4GetAddrScope>
 80071ee:	4603      	mov	r3, r0
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d210      	bcs.n	8007216 <ipv4SelectSourceAddr+0x12e>
            {
               if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(destAddr))
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 f935 	bl	8007468 <ipv4GetAddrScope>
 80071fe:	4604      	mov	r4, r0
 8007200:	68b8      	ldr	r0, [r7, #8]
 8007202:	f000 f931 	bl	8007468 <ipv4GetAddrScope>
 8007206:	4603      	mov	r3, r0
 8007208:	429c      	cmp	r4, r3
 800720a:	d24a      	bcs.n	80072a2 <ipv4SelectSourceAddr+0x1ba>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 8007214:	e045      	b.n	80072a2 <ipv4SelectSourceAddr+0x1ba>
            }

            //If the destination address lies on one of the subnets to which
            //the host is directly connected, the corresponding source address
            //may be chosen (refer to RFC 1122, section 3.3.4.3)
            if(ipv4IsOnSubnet(bestAddr, destAddr))
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	405a      	eors	r2, r3
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	4013      	ands	r3, r2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d11b      	bne.n	8007260 <ipv4SelectSourceAddr+0x178>
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	405a      	eors	r2, r3
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4013      	ands	r3, r2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d135      	bne.n	80072a6 <ipv4SelectSourceAddr+0x1be>
               {
                  //Use longest subnet mask
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f946 	bl	80074d0 <ipv4GetPrefixLength>
 8007244:	4604      	mov	r4, r0
                     ipv4GetPrefixLength(bestAddr->subnetMask))
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 f940 	bl	80074d0 <ipv4GetPrefixLength>
 8007250:	4603      	mov	r3, r0
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 8007252:	429c      	cmp	r4, r3
 8007254:	d927      	bls.n	80072a6 <ipv4SelectSourceAddr+0x1be>
                  {
                     //Give the current source address the higher precedence
                     bestInterface = currentInterface;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	623b      	str	r3, [r7, #32]
                     bestAddr = currentAddr;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	61fb      	str	r3, [r7, #28]
                  }
               }

               //Select the next address in the list
               continue;
 800725e:	e022      	b.n	80072a6 <ipv4SelectSourceAddr+0x1be>
            }
            else
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	405a      	eors	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4013      	ands	r3, r2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d104      	bne.n	800727c <ipv4SelectSourceAddr+0x194>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	61fb      	str	r3, [r7, #28]

                  //Select the next address in the list
                  continue;
 800727a:	e017      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
            }

            //The default gateways may be consulted. If these gateways are
            //assigned to different interfaces, the interface corresponding
            //to the gateway with the highest preference may be chosen
            if(bestAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d112      	bne.n	80072aa <ipv4SelectSourceAddr+0x1c2>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00f      	beq.n	80072ac <ipv4SelectSourceAddr+0x1c4>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 8007294:	e00a      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
               continue;
 8007296:	bf00      	nop
 8007298:	e008      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
               continue;
 800729a:	bf00      	nop
 800729c:	e006      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
               continue;
 800729e:	bf00      	nop
 80072a0:	e004      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
               continue;
 80072a2:	bf00      	nop
 80072a4:	e002      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
               continue;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <ipv4SelectSourceAddr+0x1c4>
               continue;
 80072aa:	bf00      	nop
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	3301      	adds	r3, #1
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f43f af39 	beq.w	800712c <ipv4SelectSourceAddr+0x44>
 80072ba:	e000      	b.n	80072be <ipv4SelectSourceAddr+0x1d6>
         continue;
 80072bc:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	3301      	adds	r3, #1
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f43f af1b 	beq.w	8007102 <ipv4SelectSourceAddr+0x1a>
         }
      }
   }

   //Valid source address?
   if(bestAddr != NULL)
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <ipv4SelectSourceAddr+0x1fe>
   {
      //Return the out-going interface and the source address to be used
      *interface = bestInterface;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a3a      	ldr	r2, [r7, #32]
 80072d6:	601a      	str	r2, [r3, #0]
      *srcAddr = bestAddr->addr;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	601a      	str	r2, [r3, #0]

      //Successful source address selection
      error = NO_ERROR;
 80072e0:	2300      	movs	r3, #0
 80072e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80072e4:	e002      	b.n	80072ec <ipv4SelectSourceAddr+0x204>
   }
   else
   {
      //Report an error
      error = ERROR_NO_ADDRESS;
 80072e6:	f240 13f7 	movw	r3, #503	; 0x1f7
 80072ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
   }

   //Return status code
   return error;
 80072ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3734      	adds	r7, #52	; 0x34
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd90      	pop	{r4, r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20001a9c 	.word	0x20001a9c

080072fc <ipv4IsBroadcastAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a broadcast address, else FALSE
 **/

bool_t ipv4IsBroadcastAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Check whether the specified IPv4 address is the broadcast address
   if(ipAddr == IPV4_BROADCAST_ADDR)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800730c:	d101      	bne.n	8007312 <ipv4IsBroadcastAddr+0x16>
      return TRUE;
 800730e:	2301      	movs	r3, #1
 8007310:	e02e      	b.n	8007370 <ipv4IsBroadcastAddr+0x74>

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e027      	b.n	8007368 <ipv4IsBroadcastAddr+0x6c>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	3398      	adds	r3, #152	; 0x98
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	3304      	adds	r3, #4
 800732a:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	791b      	ldrb	r3, [r3, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d016      	beq.n	8007362 <ipv4IsBroadcastAddr+0x66>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	405a      	eors	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	4013      	ands	r3, r2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10d      	bne.n	8007362 <ipv4IsBroadcastAddr+0x66>
         {
            //Make sure the subnet mask is not 255.255.255.255
            if(entry->subnetMask != IPV4_BROADCAST_ADDR)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800734e:	d008      	beq.n	8007362 <ipv4IsBroadcastAddr+0x66>
            {
               //Directed broadcast address?
               if((ipAddr | entry->subnetMask) == IPV4_BROADCAST_ADDR)
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800735c:	d101      	bne.n	8007362 <ipv4IsBroadcastAddr+0x66>
               {
                  return TRUE;
 800735e:	2301      	movs	r3, #1
 8007360:	e006      	b.n	8007370 <ipv4IsBroadcastAddr+0x74>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0d4      	beq.n	8007318 <ipv4IsBroadcastAddr+0x1c>
         }
      }
   }

   //The specified IPv4 address is not a broadcast address
   return FALSE;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <ipv4IsTentativeAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a tentative address, else FALSE
 **/

bool_t ipv4IsTentativeAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	e017      	b.n	80073bc <ipv4IsTentativeAddr+0x40>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	3398      	adds	r3, #152	; 0x98
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	4413      	add	r3, r2
 800739c:	3304      	adds	r3, #4
 800739e:	60bb      	str	r3, [r7, #8]

      //Tentative address?
      if(entry->state == IPV4_ADDR_STATE_TENTATIVE)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	791b      	ldrb	r3, [r3, #4]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d106      	bne.n	80073b6 <ipv4IsTentativeAddr+0x3a>
      {
         //Check whether the specified address matches a valid unicast
         //address assigned to the interface
         if(entry->addr == ipAddr)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d101      	bne.n	80073b6 <ipv4IsTentativeAddr+0x3a>
         {
            //The specified IPv4 address is a tentative address
            return TRUE;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e006      	b.n	80073c4 <ipv4IsTentativeAddr+0x48>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0e4      	beq.n	800738c <ipv4IsTentativeAddr+0x10>
         }
      }
   }

   //The specified IPv4 address is not a tentative address
   return FALSE;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <ipv4IsLocalHostAddr>:
 * @return TRUE if the IPv4 address matches any address assigned to the host,
 *   else FALSE
 **/

bool_t ipv4IsLocalHostAddr(Ipv4Addr ipAddr)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b089      	sub	sp, #36	; 0x24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
   bool_t flag;
   NetInterface *interface;
   Ipv4AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 80073d8:	2300      	movs	r3, #0
 80073da:	617b      	str	r3, [r7, #20]

   //Loopback address?
   if(ipv4IsLoopbackAddr(ipAddr))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b7f      	cmp	r3, #127	; 0x7f
 80073e2:	d102      	bne.n	80073ea <ipv4IsLocalHostAddr+0x1a>
   {
      //The 127.0.0.0/8 block is assigned for use as the host loopback address.
      //A datagram sent by a higher-level protocol to an address anywhere within
      //this block loops back inside the host (refer to RFC 5735, section 3)
      flag = TRUE;
 80073e4:	2301      	movs	r3, #1
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	e034      	b.n	8007454 <ipv4IsLocalHostAddr+0x84>
   }
   else
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
 80073ee:	e02b      	b.n	8007448 <ipv4IsLocalHostAddr+0x78>
      {
         //Point to the current interface
         interface = &netInterface[i];
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 80073f6:	fb02 f303 	mul.w	r3, r2, r3
 80073fa:	4a1a      	ldr	r2, [pc, #104]	; (8007464 <ipv4IsLocalHostAddr+0x94>)
 80073fc:	4413      	add	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]

         //Iterate through the list of addresses assigned to the interface
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 8007400:	2300      	movs	r3, #0
 8007402:	61bb      	str	r3, [r7, #24]
 8007404:	e017      	b.n	8007436 <ipv4IsLocalHostAddr+0x66>
         {
            //Point to the current entry
            entry = &interface->ipv4Context.addrList[j];
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	3398      	adds	r3, #152	; 0x98
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4413      	add	r3, r2
 8007416:	3304      	adds	r3, #4
 8007418:	60fb      	str	r3, [r7, #12]

            //Check whether the specified IPv4 address matches any address
            //assigned to the host
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	791b      	ldrb	r3, [r3, #4]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d106      	bne.n	8007430 <ipv4IsLocalHostAddr+0x60>
               entry->addr == ipAddr)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d101      	bne.n	8007430 <ipv4IsLocalHostAddr+0x60>
            {
               flag = TRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	617b      	str	r3, [r7, #20]
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	3301      	adds	r3, #1
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d102      	bne.n	8007442 <ipv4IsLocalHostAddr+0x72>
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0e1      	beq.n	8007406 <ipv4IsLocalHostAddr+0x36>
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	3301      	adds	r3, #1
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <ipv4IsLocalHostAddr+0x84>
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0cd      	beq.n	80073f0 <ipv4IsLocalHostAddr+0x20>
         }
      }
   }

   //Return TRUE if the specified address matches any address assigned to the host
   return flag;
 8007454:	697b      	ldr	r3, [r7, #20]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3724      	adds	r7, #36	; 0x24
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	20001a9c 	.word	0x20001a9c

08007468 <ipv4GetAddrScope>:
 * @param[in] ipAddr IPv4 address
 * @return IPv4 address scope
 **/

uint_t ipv4GetAddrScope(Ipv4Addr ipAddr)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
   uint_t scope;

   //Broadcast address?
   if(ipAddr == IPV4_BROADCAST_ADDR)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007476:	d102      	bne.n	800747e <ipv4GetAddrScope+0x16>
   {
      //The broadcast address is never forwarded by the routers connecting
      //the local network to other networks
      scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 8007478:	2302      	movs	r3, #2
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	e021      	b.n	80074c2 <ipv4GetAddrScope+0x5a>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007484:	2be0      	cmp	r3, #224	; 0xe0
 8007486:	d10a      	bne.n	800749e <ipv4GetAddrScope+0x36>
   {
      //Local Network Control Block?
      if((ipAddr & IPV4_MULTICAST_LNCB_MASK) == IPV4_MULTICAST_LNCB_PREFIX)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800748e:	2be0      	cmp	r3, #224	; 0xe0
 8007490:	d102      	bne.n	8007498 <ipv4GetAddrScope+0x30>
      {
         //Addresses in the Local Network Control Block are used for protocol
         //control traffic that is not forwarded off link
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 8007492:	2302      	movs	r3, #2
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e014      	b.n	80074c2 <ipv4GetAddrScope+0x5a>
      }
      //Any other multicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 8007498:	2303      	movs	r3, #3
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e011      	b.n	80074c2 <ipv4GetAddrScope+0x5a>
   }
   //Unicast address?
   else
   {
      //Loopback address?
      if((ipAddr & IPV4_LOOPBACK_MASK) == IPV4_LOOPBACK_PREFIX)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b7f      	cmp	r3, #127	; 0x7f
 80074a4:	d102      	bne.n	80074ac <ipv4GetAddrScope+0x44>
      {
         //IPv4 loopback addresses, which have the prefix 127.0.0.0/8,
         //are assigned interface-local scope
         scope = IPV4_ADDR_SCOPE_INTERFACE_LOCAL;
 80074a6:	2301      	movs	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	e00a      	b.n	80074c2 <ipv4GetAddrScope+0x5a>
      }
      //Link-local address?
      else if((ipAddr & IPV4_LINK_LOCAL_MASK) == IPV4_LINK_LOCAL_PREFIX)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d102      	bne.n	80074be <ipv4GetAddrScope+0x56>
      {
         //IPv4 auto-configuration addresses, which have the prefix
         //169.254.0.0/16, are assigned link-local scope
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 80074b8:	2302      	movs	r3, #2
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	e001      	b.n	80074c2 <ipv4GetAddrScope+0x5a>
      }
      //Any other unicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 80074be:	2303      	movs	r3, #3
 80074c0:	60fb      	str	r3, [r7, #12]
      }
   }

   //Return the scope of the specified IPv4 address
   return scope;
 80074c2:	68fb      	ldr	r3, [r7, #12]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <ipv4GetPrefixLength>:
 * @param[in] mask Subnet mask
 * @return Prefix length
 **/

uint_t ipv4GetPrefixLength(Ipv4Addr mask)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Convert from network byte order to host byte order
   mask = ntohl(mask);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7f9 f86f 	bl	80005bc <swapInt32>
 80074de:	6078      	str	r0, [r7, #4]

   //Count of the number of leading 1 bits in the network mask
   for(i = 0; i < 32; i++)
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e00b      	b.n	80074fe <ipv4GetPrefixLength+0x2e>
   {
      //Check the value of the current bit
      if(!(mask & (1U << (31 - i))))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f1c3 031f 	rsb	r3, r3, #31
 80074ec:	2201      	movs	r2, #1
 80074ee:	409a      	lsls	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4013      	ands	r3, r2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d006      	beq.n	8007506 <ipv4GetPrefixLength+0x36>
   for(i = 0; i < 32; i++)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b1f      	cmp	r3, #31
 8007502:	d9f0      	bls.n	80074e6 <ipv4GetPrefixLength+0x16>
 8007504:	e000      	b.n	8007508 <ipv4GetPrefixLength+0x38>
         break;
 8007506:	bf00      	nop
   }

   //Return prefix length
   return i;
 8007508:	68fb      	ldr	r3, [r7, #12]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <ipv4UpdateInStats>:
 * @param[in] length Length of the incoming IP packet
 **/

void ipv4UpdateInStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7ff feeb 	bl	80072fc <ipv4IsBroadcastAddr>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCInMcastOctets, length);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInMcastOctets, length);
   }
}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <ipv4UpdateOutStats>:
 * @param[in] length Length of the outgoing IP packet
 **/

void ipv4UpdateOutStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fedb 	bl	80072fc <ipv4IsBroadcastAddr>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
   //for transmission
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutOctets, length);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutOctets, length);
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <ipv4UpdateErrorStats>:
 * @param[in] interface Underlying network interface
 * @param[in] error Status code describing the error
 **/

void ipv4UpdateErrorStats(NetInterface *interface, error_t error)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	807b      	strh	r3, [r7, #2]
   //Check error code
   switch(error)
 8007560:	887b      	ldrh	r3, [r7, #2]
 8007562:	3bd1      	subs	r3, #209	; 0xd1
 8007564:	2b1a      	cmp	r3, #26
 8007566:	d839      	bhi.n	80075dc <ipv4UpdateErrorStats+0x88>
 8007568:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <ipv4UpdateErrorStats+0x1c>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	080075dd 	.word	0x080075dd
 8007574:	080075dd 	.word	0x080075dd
 8007578:	080075dd 	.word	0x080075dd
 800757c:	080075dd 	.word	0x080075dd
 8007580:	080075dd 	.word	0x080075dd
 8007584:	080075dd 	.word	0x080075dd
 8007588:	080075dd 	.word	0x080075dd
 800758c:	080075dd 	.word	0x080075dd
 8007590:	080075dd 	.word	0x080075dd
 8007594:	080075dd 	.word	0x080075dd
 8007598:	080075dd 	.word	0x080075dd
 800759c:	080075dd 	.word	0x080075dd
 80075a0:	080075dd 	.word	0x080075dd
 80075a4:	080075dd 	.word	0x080075dd
 80075a8:	080075dd 	.word	0x080075dd
 80075ac:	080075dd 	.word	0x080075dd
 80075b0:	080075dd 	.word	0x080075dd
 80075b4:	080075dd 	.word	0x080075dd
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	080075dd 	.word	0x080075dd
 80075c0:	080075dd 	.word	0x080075dd
 80075c4:	080075dd 	.word	0x080075dd
 80075c8:	080075dd 	.word	0x080075dd
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	080075dd 	.word	0x080075dd
 80075d4:	080075dd 	.word	0x080075dd
 80075d8:	080075dd 	.word	0x080075dd
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInTruncatedPkts, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInTruncatedPkts, 1);
      break;
   default:
      //Just for sanity
      break;
 80075dc:	bf00      	nop
   }
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop

080075ec <chapStartAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapStartAuth(PppContext *context)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nStarting CHAP authentication...\r\n");
 80075f4:	f7f9 f819 	bl	800062a <osSuspendAllTasks>
 80075f8:	4b15      	ldr	r3, [pc, #84]	; (8007650 <chapStartAuth+0x64>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	2223      	movs	r2, #35	; 0x23
 8007600:	2101      	movs	r1, #1
 8007602:	4814      	ldr	r0, [pc, #80]	; (8007654 <chapStartAuth+0x68>)
 8007604:	f010 fdfe 	bl	8018204 <fwrite>
 8007608:	f7f9 f81a 	bl	8000640 <osResumeAllTasks>

   //Check whether the other end of the PPP link is being authenticated
   if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8007612:	f24c 2223 	movw	r2, #49699	; 0xc223
 8007616:	4293      	cmp	r3, r2
 8007618:	d10a      	bne.n	8007630 <chapStartAuth+0x44>
   {
      //Initialize restart counter
      context->chapFsm.restartCounter = CHAP_MAX_CHALLENGES;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2205      	movs	r2, #5
 800761e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
      //Send a Challenge packet
      chapSendChallenge(context);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa82 	bl	8007b2c <chapSendChallenge>
      //Switch to the Challenge-Sent state
      context->chapFsm.localState = CHAP_STATE_2_CHALLENGE_SENT;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   }

   //Check whether the other end of the PPP link is the authenticator
   if(context->peerConfig.authProtocol == PPP_PROTOCOL_CHAP)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8007636:	f24c 2223 	movw	r2, #49699	; 0xc223
 800763a:	4293      	cmp	r3, r2
 800763c:	d103      	bne.n	8007646 <chapStartAuth+0x5a>
   {
      //Switch to the Started state
      context->chapFsm.peerState = CHAP_STATE_1_STARTED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   }

   //Successful processing
   return NO_ERROR;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20000058 	.word	0x20000058
 8007654:	080195dc 	.word	0x080195dc

08007658 <chapAbortAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapAbortAuth(PppContext *context)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nAborting CHAP authentication...\r\n");
 8007660:	f7f8 ffe3 	bl	800062a <osSuspendAllTasks>
 8007664:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <chapAbortAuth+0x3c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	2223      	movs	r2, #35	; 0x23
 800766c:	2101      	movs	r1, #1
 800766e:	480a      	ldr	r0, [pc, #40]	; (8007698 <chapAbortAuth+0x40>)
 8007670:	f010 fdc8 	bl	8018204 <fwrite>
 8007674:	f7f8 ffe4 	bl	8000640 <osResumeAllTasks>

   //Abort CHAP authentication process
   context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   context->chapFsm.peerState = CHAP_STATE_0_INITIAL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

   //Successful processing
   return NO_ERROR;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20000058 	.word	0x20000058
 8007698:	08019600 	.word	0x08019600

0800769c <chapTick>:
 * @brief CHAP timer handler
 * @param[in] context PPP context
 **/

void chapTick(PppContext *context)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->chapFsm.localState == CHAP_STATE_2_CHALLENGE_SENT)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d127      	bne.n	80076fe <chapTick+0x62>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 80076ae:	f7f9 f876 	bl	800079e <osGetSystemTime>
 80076b2:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->chapFsm.timestamp) >= CHAP_RESTART_TIMER)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d91b      	bls.n	80076fe <chapTick+0x62>
      {
         //Debug message
         TRACE_INFO("\r\nCHAP Timeout event\r\n");
 80076c6:	f7f8 ffb0 	bl	800062a <osSuspendAllTasks>
 80076ca:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <chapTick+0x6c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2216      	movs	r2, #22
 80076d2:	2101      	movs	r1, #1
 80076d4:	480d      	ldr	r0, [pc, #52]	; (800770c <chapTick+0x70>)
 80076d6:	f010 fd95 	bl	8018204 <fwrite>
 80076da:	f7f8 ffb1 	bl	8000640 <osResumeAllTasks>

         //Check whether the restart counter is greater than zero
         if(context->chapFsm.restartCounter > 0)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <chapTick+0x54>
         {
            //Retransmit the Challenge packet
            chapSendChallenge(context);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa1f 	bl	8007b2c <chapSendChallenge>
            //Authentication failed
            lcpClose(context);
         }
      }
   }
}
 80076ee:	e006      	b.n	80076fe <chapTick+0x62>
            context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            lcpClose(context);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fa85 	bl	8008c08 <lcpClose>
}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000058 	.word	0x20000058
 800770c:	08019624 	.word	0x08019624

08007710 <chapProcessPacket>:
 * @param[in] length Length of the packet, in bytes
 **/

void chapProcessPacket(PppContext *context,
   const PppPacket *packet, size_t length)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming CHAP packet is valid
   if(length < sizeof(PppPacket))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b03      	cmp	r3, #3
 8007720:	d95a      	bls.n	80077d8 <chapProcessPacket+0xc8>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	885b      	ldrh	r3, [r3, #2]
 8007726:	b29b      	uxth	r3, r3
 8007728:	4618      	mov	r0, r3
 800772a:	f7f8 ff39 	bl	80005a0 <swapInt16>
 800772e:	4603      	mov	r3, r0
 8007730:	461a      	mov	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4293      	cmp	r3, r2
 8007736:	d351      	bcc.n	80077dc <chapProcessPacket+0xcc>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	885b      	ldrh	r3, [r3, #2]
 800773c:	b29b      	uxth	r3, r3
 800773e:	4618      	mov	r0, r3
 8007740:	f7f8 ff2e 	bl	80005a0 <swapInt16>
 8007744:	4603      	mov	r3, r0
 8007746:	2b03      	cmp	r3, #3
 8007748:	d94a      	bls.n	80077e0 <chapProcessPacket+0xd0>
      return;

   //Save the length of the CHAP packet
   length = ntohs(packet->length);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	b29b      	uxth	r3, r3
 8007750:	4618      	mov	r0, r3
 8007752:	f7f8 ff25 	bl	80005a0 <swapInt16>
 8007756:	4603      	mov	r3, r0
 8007758:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("CHAP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 800775a:	f7f8 ff66 	bl	800062a <osSuspendAllTasks>
 800775e:	4b24      	ldr	r3, [pc, #144]	; (80077f0 <chapProcessPacket+0xe0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	4923      	ldr	r1, [pc, #140]	; (80077f4 <chapProcessPacket+0xe4>)
 8007768:	4618      	mov	r0, r3
 800776a:	f010 fceb 	bl	8018144 <fiprintf>
 800776e:	f7f8 ff67 	bl	8000640 <osResumeAllTasks>
   //Dump CHAP packet contents for debugging purpose
   pppDumpPacket(packet, length, PPP_PROTOCOL_CHAP);

   //CHAP is done at initial link establishment, and could also be
   //requested after link establishment
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007778:	2b02      	cmp	r3, #2
 800777a:	d004      	beq.n	8007786 <chapProcessPacket+0x76>
      context->pppPhase != PPP_PHASE_NETWORK)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 8007782:	2b03      	cmp	r3, #3
 8007784:	d12e      	bne.n	80077e4 <chapProcessPacket+0xd4>
      //Any packets received during any other phase must be silently discarded
      return;
   }

   //Check CHAP code field
   switch(packet->code)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	3b01      	subs	r3, #1
 800778c:	2b03      	cmp	r3, #3
 800778e:	d82b      	bhi.n	80077e8 <chapProcessPacket+0xd8>
 8007790:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <chapProcessPacket+0x88>)
 8007792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007796:	bf00      	nop
 8007798:	080077a9 	.word	0x080077a9
 800779c:	080077b5 	.word	0x080077b5
 80077a0:	080077c1 	.word	0x080077c1
 80077a4:	080077cd 	.word	0x080077cd
   {
   //Challenge packet?
   case CHAP_CODE_CHALLENGE:
      //Process Challenge packet
      chapProcessChallenge(context, (ChapChallengePacket *) packet, length);
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	68b9      	ldr	r1, [r7, #8]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f823 	bl	80077f8 <chapProcessChallenge>
      break;
 80077b2:	e01a      	b.n	80077ea <chapProcessPacket+0xda>
   //Response packet?
   case CHAP_CODE_RESPONSE:
      //Process Response packet
      chapProcessResponse(context, (ChapResponsePacket *) packet, length);
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f889 	bl	80078d0 <chapProcessResponse>
      break;
 80077be:	e014      	b.n	80077ea <chapProcessPacket+0xda>
   //Success packet?
   case CHAP_CODE_SUCCESS:
      //Process Success packet
      chapProcessSuccess(context, (ChapSuccessPacket *) packet, length);
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f927 	bl	8007a18 <chapProcessSuccess>
      break;
 80077ca:	e00e      	b.n	80077ea <chapProcessPacket+0xda>
   //Failure packet?
   case CHAP_CODE_FAILURE:
      //Process Failure packet
      chapProcessFailure(context, (ChapFailurePacket *) packet, length);
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f971 	bl	8007ab8 <chapProcessFailure>
      break;
 80077d6:	e008      	b.n	80077ea <chapProcessPacket+0xda>
      return;
 80077d8:	bf00      	nop
 80077da:	e006      	b.n	80077ea <chapProcessPacket+0xda>
      return;
 80077dc:	bf00      	nop
 80077de:	e004      	b.n	80077ea <chapProcessPacket+0xda>
      return;
 80077e0:	bf00      	nop
 80077e2:	e002      	b.n	80077ea <chapProcessPacket+0xda>
      return;
 80077e4:	bf00      	nop
 80077e6:	e000      	b.n	80077ea <chapProcessPacket+0xda>
   //Unknown code field
   default:
      //Silently drop the incoming packet
      break;
 80077e8:	bf00      	nop
   }
}
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000058 	.word	0x20000058
 80077f4:	0801963c 	.word	0x0801963c

080077f8 <chapProcessChallenge>:
 * @return Error code
 **/

error_t chapProcessChallenge(PppContext *context,
   const ChapChallengePacket *challengePacket, size_t length)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b09e      	sub	sp, #120	; 0x78
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
   size_t n;
   Md5Context md5Context;

   //Debug message
   TRACE_INFO("\r\nCHAP Challenge packet received\r\n");
 8007804:	f7f8 ff11 	bl	800062a <osSuspendAllTasks>
 8007808:	4b2f      	ldr	r3, [pc, #188]	; (80078c8 <chapProcessChallenge+0xd0>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	2222      	movs	r2, #34	; 0x22
 8007810:	2101      	movs	r1, #1
 8007812:	482e      	ldr	r0, [pc, #184]	; (80078cc <chapProcessChallenge+0xd4>)
 8007814:	f010 fcf6 	bl	8018204 <fwrite>
 8007818:	f7f8 ff12 	bl	8000640 <osResumeAllTasks>

   //Make sure the Challenge packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_CHAP)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8007822:	f24c 2223 	movw	r2, #49699	; 0xc223
 8007826:	4293      	cmp	r3, r2
 8007828:	d001      	beq.n	800782e <chapProcessChallenge+0x36>
      return ERROR_FAILURE;
 800782a:	2301      	movs	r3, #1
 800782c:	e048      	b.n	80078c0 <chapProcessChallenge+0xc8>

   //Check the length of the packet
   if(length < sizeof(ChapChallengePacket))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d801      	bhi.n	8007838 <chapProcessChallenge+0x40>
      return ERROR_INVALID_LENGTH;
 8007834:	23eb      	movs	r3, #235	; 0xeb
 8007836:	e043      	b.n	80078c0 <chapProcessChallenge+0xc8>

   //Malformed Challenge packet?
   if(length < (sizeof(ChapChallengePacket) + challengePacket->valueSize))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	791b      	ldrb	r3, [r3, #4]
 800783c:	3305      	adds	r3, #5
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d201      	bcs.n	8007848 <chapProcessChallenge+0x50>
      return ERROR_INVALID_LENGTH;
 8007844:	23eb      	movs	r3, #235	; 0xeb
 8007846:	e03b      	b.n	80078c0 <chapProcessChallenge+0xc8>

   //Save the Identifier field
   context->chapFsm.peerIdentifier = challengePacket->identifier;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	785a      	ldrb	r2, [r3, #1]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

   //Retrieve the length of the password
   n = strlen(context->password);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3340      	adds	r3, #64	; 0x40
 8007856:	4618      	mov	r0, r3
 8007858:	f7f8 fcca 	bl	80001f0 <strlen>
 800785c:	6778      	str	r0, [r7, #116]	; 0x74

   //The response value is the one-way hash calculated over a stream
   //of octets consisting of the identifier, followed by the secret,
   //followed by the challenge value
   md5Init(&md5Context);
 800785e:	f107 0310 	add.w	r3, r7, #16
 8007862:	4618      	mov	r0, r3
 8007864:	f7f8 fff6 	bl	8000854 <md5Init>
   md5Update(&md5Context, &challengePacket->identifier, sizeof(uint8_t));
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	1c59      	adds	r1, r3, #1
 800786c:	f107 0310 	add.w	r3, r7, #16
 8007870:	2201      	movs	r2, #1
 8007872:	4618      	mov	r0, r3
 8007874:	f7f9 f816 	bl	80008a4 <md5Update>
   md5Update(&md5Context, context->password, n);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800787e:	f107 0310 	add.w	r3, r7, #16
 8007882:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007884:	4618      	mov	r0, r3
 8007886:	f7f9 f80d 	bl	80008a4 <md5Update>
   md5Update(&md5Context, challengePacket->value, challengePacket->valueSize);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	1d59      	adds	r1, r3, #5
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	791b      	ldrb	r3, [r3, #4]
 8007892:	461a      	mov	r2, r3
 8007894:	f107 0310 	add.w	r3, r7, #16
 8007898:	4618      	mov	r0, r3
 800789a:	f7f9 f803 	bl	80008a4 <md5Update>
   md5Final(&md5Context, NULL);
 800789e:	f107 0310 	add.w	r3, r7, #16
 80078a2:	2100      	movs	r1, #0
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7f9 f847 	bl	8000938 <md5Final>

   //Whenever a Challenge packet is received, the peer must send a Response packet
   chapSendResponse(context, md5Context.digest);
 80078aa:	f107 0310 	add.w	r3, r7, #16
 80078ae:	4619      	mov	r1, r3
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f9cf 	bl	8007c54 <chapSendResponse>

   //Switch to the Response-Sent state
   context->chapFsm.peerState = CHAP_STATE_4_RESPONSE_SENT;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2204      	movs	r2, #4
 80078ba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

   //Successful processing
   return NO_ERROR;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3778      	adds	r7, #120	; 0x78
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20000058 	.word	0x20000058
 80078cc:	08019664 	.word	0x08019664

080078d0 <chapProcessResponse>:
 * @return Error code
 **/

error_t chapProcessResponse(PppContext *context,
   const ChapResponsePacket *responsePacket, size_t length)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
   bool_t status;
   const uint8_t *p;

   //Debug message
   TRACE_INFO("\r\nCHAP Response packet received\r\n");
 80078dc:	f7f8 fea5 	bl	800062a <osSuspendAllTasks>
 80078e0:	4b4b      	ldr	r3, [pc, #300]	; (8007a10 <chapProcessResponse+0x140>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	2221      	movs	r2, #33	; 0x21
 80078e8:	2101      	movs	r1, #1
 80078ea:	484a      	ldr	r0, [pc, #296]	; (8007a14 <chapProcessResponse+0x144>)
 80078ec:	f010 fc8a 	bl	8018204 <fwrite>
 80078f0:	f7f8 fea6 	bl	8000640 <osResumeAllTasks>

   //Make sure the Response packet is acceptable
   if(context->localConfig.authProtocol != PPP_PROTOCOL_CHAP)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80078fa:	f24c 2223 	movw	r2, #49699	; 0xc223
 80078fe:	4293      	cmp	r3, r2
 8007900:	d001      	beq.n	8007906 <chapProcessResponse+0x36>
      return ERROR_FAILURE;
 8007902:	2301      	movs	r3, #1
 8007904:	e07f      	b.n	8007a06 <chapProcessResponse+0x136>

   //Check the length of the packet
   if(length < sizeof(ChapResponsePacket))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b04      	cmp	r3, #4
 800790a:	d801      	bhi.n	8007910 <chapProcessResponse+0x40>
      return ERROR_INVALID_LENGTH;
 800790c:	23eb      	movs	r3, #235	; 0xeb
 800790e:	e07a      	b.n	8007a06 <chapProcessResponse+0x136>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(responsePacket->identifier != context->chapFsm.localIdentifier)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	785a      	ldrb	r2, [r3, #1]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800791a:	429a      	cmp	r2, r3
 800791c:	d001      	beq.n	8007922 <chapProcessResponse+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800791e:	23d6      	movs	r3, #214	; 0xd6
 8007920:	e071      	b.n	8007a06 <chapProcessResponse+0x136>

   //Malformed Response packet?
   if(length < (sizeof(ChapResponsePacket) + responsePacket->valueSize))
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	791b      	ldrb	r3, [r3, #4]
 8007926:	3305      	adds	r3, #5
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	429a      	cmp	r2, r3
 800792c:	d201      	bcs.n	8007932 <chapProcessResponse+0x62>
      return ERROR_INVALID_LENGTH;
 800792e:	23eb      	movs	r3, #235	; 0xeb
 8007930:	e069      	b.n	8007a06 <chapProcessResponse+0x136>

   //The length of the response value depends upon the hash algorithm used
   if(responsePacket->valueSize != MD5_DIGEST_SIZE)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	791b      	ldrb	r3, [r3, #4]
 8007936:	2b10      	cmp	r3, #16
 8007938:	d001      	beq.n	800793e <chapProcessResponse+0x6e>
      return ERROR_INVALID_LENGTH;
 800793a:	23eb      	movs	r3, #235	; 0xeb
 800793c:	e063      	b.n	8007a06 <chapProcessResponse+0x136>

   //Retrieve the response value
   context->chapFsm.response = responsePacket->value;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	1d5a      	adds	r2, r3, #5
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

   //Point to the Name field
   p = responsePacket->value + responsePacket->valueSize;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	3305      	adds	r3, #5
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	7912      	ldrb	r2, [r2, #4]
 8007950:	4413      	add	r3, r2
 8007952:	613b      	str	r3, [r7, #16]
   //Retrieve the length of the Name field
   length -= sizeof(ChapResponsePacket) + responsePacket->valueSize;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	791b      	ldrb	r3, [r3, #4]
 8007958:	461a      	mov	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	3b05      	subs	r3, #5
 8007960:	607b      	str	r3, [r7, #4]

   //Limit the length of the string
   length = MIN(length, PPP_MAX_USERNAME_LEN);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b1f      	cmp	r3, #31
 8007966:	bf28      	it	cs
 8007968:	231f      	movcs	r3, #31
 800796a:	607b      	str	r3, [r7, #4]
   //Copy the name of the peer to be identified
   memcpy(context->peerName, p, length);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3360      	adds	r3, #96	; 0x60
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6939      	ldr	r1, [r7, #16]
 8007974:	4618      	mov	r0, r3
 8007976:	f010 fc87 	bl	8018288 <memcpy>
   //Properly terminate the string with a NULL character
   context->peerName[length] = '\0';
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4413      	add	r3, r2
 8007980:	3360      	adds	r3, #96	; 0x60
 8007982:	2200      	movs	r2, #0
 8007984:	701a      	strb	r2, [r3, #0]

   //Invoke user-defined callback, if any
   if(context->settings.authCallback != NULL)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <chapProcessResponse+0xd2>
   {
      //Perfom username and password verification
      status = context->settings.authCallback(context->interface,
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	6990      	ldr	r0, [r2, #24]
         context->peerName);
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	3260      	adds	r2, #96	; 0x60
      status = context->settings.authCallback(context->interface,
 800799a:	4611      	mov	r1, r2
 800799c:	4798      	blx	r3
 800799e:	6178      	str	r0, [r7, #20]
 80079a0:	e001      	b.n	80079a6 <chapProcessResponse+0xd6>
   }
   else
   {
      //Unable to perform authentication...
      status = FALSE;
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]
   }

   //Whenever a Response packet is received, the authenticator compares the
   //Response Value with its own calculation of the expected value. Based on
   //this comparison, the authenticator must send a Success or Failure packet
   if(status)
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d021      	beq.n	80079f0 <chapProcessResponse+0x120>
   {
      //Send a Success packet
      chapSendSuccess(context);
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f9b9 	bl	8007d24 <chapSendSuccess>

      //Switch to the Success-Sent state
      context->chapFsm.localState = CHAP_STATE_6_SUCCESS_SENT;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2206      	movs	r2, #6
 80079b6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      //The user has been successfully authenticated
      context->localAuthDone = TRUE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      //Check whether PPP authentication is complete
      if(context->localAuthDone && context->peerAuthDone)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01b      	beq.n	8007a04 <chapProcessResponse+0x134>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d016      	beq.n	8007a04 <chapProcessResponse+0x134>
      {
         //Check current PPP phase
         if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d111      	bne.n	8007a04 <chapProcessResponse+0x134>
         {
            //Advance to the Network phase
            context->pppPhase = PPP_PHASE_NETWORK;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2203      	movs	r2, #3
 80079e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
            //IPCP Open event
            ipcpOpen(context);
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fa33 	bl	8007e54 <ipcpOpen>
 80079ee:	e009      	b.n	8007a04 <chapProcessResponse+0x134>
      }
   }
   else
   {
      //Send a Failure packet
      chapSendFailure(context);
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 f9e3 	bl	8007dbc <chapSendFailure>

      //Switch to the Failure-Sent state
      context->chapFsm.localState = CHAP_STATE_8_FAILURE_SENT;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2208      	movs	r2, #8
 80079fa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      //The authenticator should take action to terminate the link
      lcpClose(context);
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f001 f902 	bl	8008c08 <lcpClose>
   }

   //Successful processing
   return NO_ERROR;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000058 	.word	0x20000058
 8007a14:	08019688 	.word	0x08019688

08007a18 <chapProcessSuccess>:
 * @return Error code
 **/

error_t chapProcessSuccess(PppContext *context,
   const ChapSuccessPacket *successPacket, size_t length)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nCHAP Success packet received\r\n");
 8007a24:	f7f8 fe01 	bl	800062a <osSuspendAllTasks>
 8007a28:	4b21      	ldr	r3, [pc, #132]	; (8007ab0 <chapProcessSuccess+0x98>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	2101      	movs	r1, #1
 8007a32:	4820      	ldr	r0, [pc, #128]	; (8007ab4 <chapProcessSuccess+0x9c>)
 8007a34:	f010 fbe6 	bl	8018204 <fwrite>
 8007a38:	f7f8 fe02 	bl	8000640 <osResumeAllTasks>

   //Make sure the Success packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_CHAP)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8007a42:	f24c 2223 	movw	r2, #49699	; 0xc223
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d001      	beq.n	8007a4e <chapProcessSuccess+0x36>
      return ERROR_FAILURE;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e02c      	b.n	8007aa8 <chapProcessSuccess+0x90>

   //Check the length of the packet
   if(length < sizeof(ChapSuccessPacket))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d801      	bhi.n	8007a58 <chapProcessSuccess+0x40>
      return ERROR_INVALID_LENGTH;
 8007a54:	23eb      	movs	r3, #235	; 0xeb
 8007a56:	e027      	b.n	8007aa8 <chapProcessSuccess+0x90>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(successPacket->identifier != context->chapFsm.peerIdentifier)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	785a      	ldrb	r2, [r3, #1]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d001      	beq.n	8007a6a <chapProcessSuccess+0x52>
      return ERROR_WRONG_IDENTIFIER;
 8007a66:	23d6      	movs	r3, #214	; 0xd6
 8007a68:	e01e      	b.n	8007aa8 <chapProcessSuccess+0x90>

   //Switch to the Success-Rcvd state
   context->chapFsm.peerState = CHAP_STATE_7_SUCCESS_RCVD;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2207      	movs	r2, #7
 8007a6e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   //The user name has been accepted by the authenticator
   context->peerAuthDone = TRUE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check whether PPP authentication is complete
   if(context->localAuthDone && context->peerAuthDone)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d010      	beq.n	8007aa6 <chapProcessSuccess+0x8e>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <chapProcessSuccess+0x8e>
   {
      //Check current PPP phase
      if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d106      	bne.n	8007aa6 <chapProcessSuccess+0x8e>
      {
         //Advance to the Network phase
         context->pppPhase = PPP_PHASE_NETWORK;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
         //IPCP Open event
         ipcpOpen(context);
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f9d7 	bl	8007e54 <ipcpOpen>
#endif
      }
   }

   //Successful processing
   return NO_ERROR;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20000058 	.word	0x20000058
 8007ab4:	080196ac 	.word	0x080196ac

08007ab8 <chapProcessFailure>:
 * @return Error code
 **/

error_t chapProcessFailure(PppContext *context,
   const ChapFailurePacket *failurePacket, size_t length)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nCHAP Failure packet received\r\n");
 8007ac4:	f7f8 fdb1 	bl	800062a <osSuspendAllTasks>
 8007ac8:	4b16      	ldr	r3, [pc, #88]	; (8007b24 <chapProcessFailure+0x6c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	4815      	ldr	r0, [pc, #84]	; (8007b28 <chapProcessFailure+0x70>)
 8007ad4:	f010 fb96 	bl	8018204 <fwrite>
 8007ad8:	f7f8 fdb2 	bl	8000640 <osResumeAllTasks>

   //Make sure the Failure packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_CHAP)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8007ae2:	f24c 2223 	movw	r2, #49699	; 0xc223
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d001      	beq.n	8007aee <chapProcessFailure+0x36>
      return ERROR_FAILURE;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e015      	b.n	8007b1a <chapProcessFailure+0x62>

   //Check the length of the packet
   if(length < sizeof(ChapFailurePacket))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d801      	bhi.n	8007af8 <chapProcessFailure+0x40>
      return ERROR_INVALID_LENGTH;
 8007af4:	23eb      	movs	r3, #235	; 0xeb
 8007af6:	e010      	b.n	8007b1a <chapProcessFailure+0x62>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(failurePacket->identifier != context->chapFsm.peerIdentifier)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	785a      	ldrb	r2, [r3, #1]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d001      	beq.n	8007b0a <chapProcessFailure+0x52>
      return ERROR_WRONG_IDENTIFIER;
 8007b06:	23d6      	movs	r3, #214	; 0xd6
 8007b08:	e007      	b.n	8007b1a <chapProcessFailure+0x62>

   //Switch to the Failure-Rcvd state
   context->chapFsm.peerState = CHAP_STATE_9_FAILURE_RCVD;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2209      	movs	r2, #9
 8007b0e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
   //Authentication failed
   lcpClose(context);
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f001 f878 	bl	8008c08 <lcpClose>

   //Successful processing
   return NO_ERROR;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000058 	.word	0x20000058
 8007b28:	080196d0 	.word	0x080196d0

08007b2c <chapSendChallenge>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapSendChallenge(PppContext *context)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   ChapChallengePacket *challengePacket;

   //Retrieve the length of the username
   n = strlen(context->username);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3320      	adds	r3, #32
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7f8 fb59 	bl	80001f0 <strlen>
 8007b3e:	61b8      	str	r0, [r7, #24]
   //Calculate the length of the Challenge packet
   length = sizeof(ChapChallengePacket) + MD5_DIGEST_SIZE + n;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	3315      	adds	r3, #21
 8007b44:	617b      	str	r3, [r7, #20]

   //Allocate a buffer memory to hold the Challenge packet
   buffer = pppAllocBuffer(length, &offset);
 8007b46:	f107 0308 	add.w	r3, r7, #8
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6978      	ldr	r0, [r7, #20]
 8007b4e:	f003 f8b3 	bl	800acb8 <pppAllocBuffer>
 8007b52:	6138      	str	r0, [r7, #16]
   //Failed to allocate memory?
   if(buffer == NULL)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <chapSendChallenge+0x32>
      return ERROR_OUT_OF_MEMORY;
 8007b5a:	2364      	movs	r3, #100	; 0x64
 8007b5c:	e072      	b.n	8007c44 <chapSendChallenge+0x118>

   //Point to the Challenge packet
   challengePacket = netBufferAt(buffer, offset);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4619      	mov	r1, r3
 8007b62:	6938      	ldr	r0, [r7, #16]
 8007b64:	f7fa fc23 	bl	80023ae <netBufferAt>
 8007b68:	60f8      	str	r0, [r7, #12]

   //Format packet header
   challengePacket->code = CHAP_CODE_CHALLENGE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	701a      	strb	r2, [r3, #0]
   challengePacket->identifier = ++context->chapFsm.localIdentifier;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8007b76:	3301      	adds	r3, #1
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	705a      	strb	r2, [r3, #1]
   challengePacket->length = htons(length);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7f8 fd06 	bl	80005a0 <swapInt16>
 8007b94:	4603      	mov	r3, r0
 8007b96:	461a      	mov	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	805a      	strh	r2, [r3, #2]
   challengePacket->valueSize = MD5_DIGEST_SIZE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2210      	movs	r2, #16
 8007ba0:	711a      	strb	r2, [r3, #4]

   //Make sure that the callback function has been registered
   if(context->settings.randCallback != NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d009      	beq.n	8007bbe <chapSendChallenge+0x92>
   {
      //Generate a random challenge value
      error = context->settings.randCallback(
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
         context->chapFsm.challenge, MD5_DIGEST_SIZE);
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	32e8      	adds	r2, #232	; 0xe8
      error = context->settings.randCallback(
 8007bb2:	2110      	movs	r1, #16
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	4603      	mov	r3, r0
 8007bba:	83fb      	strh	r3, [r7, #30]
 8007bbc:	e001      	b.n	8007bc2 <chapSendChallenge+0x96>
   }
   else
   {
      //Report an error
      error = ERROR_FAILURE;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	83fb      	strh	r3, [r7, #30]
   }

   //Check status code
   if(!error)
 8007bc2:	8bfb      	ldrh	r3, [r7, #30]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d139      	bne.n	8007c3c <chapSendChallenge+0x110>
   {
      //Copy the challenge value
      memcpy(challengePacket->value, context->chapFsm.challenge, MD5_DIGEST_SIZE);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	1d58      	adds	r0, r3, #5
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	33e8      	adds	r3, #232	; 0xe8
 8007bd0:	2210      	movs	r2, #16
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	f010 fb58 	bl	8018288 <memcpy>

      //The Name field is one or more octets representing the
      //identification of the system transmitting the packet
      memcpy(challengePacket->value + MD5_DIGEST_SIZE, context->username, n);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3305      	adds	r3, #5
 8007bdc:	f103 0010 	add.w	r0, r3, #16
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3320      	adds	r3, #32
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4619      	mov	r1, r3
 8007be8:	f010 fb4e 	bl	8018288 <memcpy>

      //Debug message
      TRACE_INFO("Sending CHAP Challenge packet (%" PRIuSIZE " bytes)...\r\n", length);
 8007bec:	f7f8 fd1d 	bl	800062a <osSuspendAllTasks>
 8007bf0:	4b16      	ldr	r3, [pc, #88]	; (8007c4c <chapSendChallenge+0x120>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4915      	ldr	r1, [pc, #84]	; (8007c50 <chapSendChallenge+0x124>)
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f010 faa2 	bl	8018144 <fiprintf>
 8007c00:	f7f8 fd1e 	bl	8000640 <osResumeAllTasks>
      //Dump packet contents for debugging purpose
      pppDumpPacket((PppPacket *) challengePacket, length, PPP_PROTOCOL_CHAP);

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6998      	ldr	r0, [r3, #24]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	f24c 2323 	movw	r3, #49699	; 0xc223
 8007c0e:	6939      	ldr	r1, [r7, #16]
 8007c10:	f002 fedc 	bl	800a9cc <pppSendFrame>
 8007c14:	4603      	mov	r3, r0
 8007c16:	83fb      	strh	r3, [r7, #30]

      //The restart counter is decremented each time a Challenge packet is sent
      if(context->chapFsm.restartCounter > 0)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d006      	beq.n	8007c30 <chapSendChallenge+0x104>
         context->chapFsm.restartCounter--;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c28:	1e5a      	subs	r2, r3, #1
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

      //Save the time at which the packet was sent
      context->chapFsm.timestamp = osGetSystemTime();
 8007c30:	f7f8 fdb5 	bl	800079e <osGetSystemTime>
 8007c34:	4602      	mov	r2, r0
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 8007c3c:	6938      	ldr	r0, [r7, #16]
 8007c3e:	f7fa fadf 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 8007c42:	8bfb      	ldrh	r3, [r7, #30]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3720      	adds	r7, #32
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20000058 	.word	0x20000058
 8007c50:	080196f4 	.word	0x080196f4

08007c54 <chapSendResponse>:
 * @param[in] value Response value
 * @return Error code
 **/

error_t chapSendResponse(PppContext *context, const uint8_t *value)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
   size_t offset;
   NetBuffer *buffer;
   ChapResponsePacket *responsePacket;

   //Retrieve the length of the username
   n = strlen(context->username);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3320      	adds	r3, #32
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7f8 fac4 	bl	80001f0 <strlen>
 8007c68:	61f8      	str	r0, [r7, #28]
   //Calculate the length of the Response packet
   length = sizeof(ChapResponsePacket) + MD5_DIGEST_SIZE + n;
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	3315      	adds	r3, #21
 8007c6e:	61bb      	str	r3, [r7, #24]

   //Allocate a buffer memory to hold the Response packet
   buffer = pppAllocBuffer(length, &offset);
 8007c70:	f107 0308 	add.w	r3, r7, #8
 8007c74:	4619      	mov	r1, r3
 8007c76:	69b8      	ldr	r0, [r7, #24]
 8007c78:	f003 f81e 	bl	800acb8 <pppAllocBuffer>
 8007c7c:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(buffer == NULL)
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <chapSendResponse+0x34>
      return ERROR_OUT_OF_MEMORY;
 8007c84:	2364      	movs	r3, #100	; 0x64
 8007c86:	e044      	b.n	8007d12 <chapSendResponse+0xbe>

   //Point to the Response packet
   responsePacket = netBufferAt(buffer, offset);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6978      	ldr	r0, [r7, #20]
 8007c8e:	f7fa fb8e 	bl	80023ae <netBufferAt>
 8007c92:	6138      	str	r0, [r7, #16]

   //Format packet header
   responsePacket->code = CHAP_CODE_RESPONSE;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2202      	movs	r2, #2
 8007c98:	701a      	strb	r2, [r3, #0]
   responsePacket->identifier = context->chapFsm.peerIdentifier;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	705a      	strb	r2, [r3, #1]
   responsePacket->length = htons(length);
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7f8 fc79 	bl	80005a0 <swapInt16>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	805a      	strh	r2, [r3, #2]
   responsePacket->valueSize = MD5_DIGEST_SIZE;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	2210      	movs	r2, #16
 8007cba:	711a      	strb	r2, [r3, #4]

   //Copy the Response value
   memcpy(responsePacket->value, value, MD5_DIGEST_SIZE);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3305      	adds	r3, #5
 8007cc0:	2210      	movs	r2, #16
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f010 fadf 	bl	8018288 <memcpy>

   //The Name field is one or more octets representing the
   //identification of the system transmitting the packet
   memcpy(responsePacket->value + MD5_DIGEST_SIZE, context->username, n);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	3305      	adds	r3, #5
 8007cce:	f103 0010 	add.w	r0, r3, #16
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3320      	adds	r3, #32
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f010 fad5 	bl	8018288 <memcpy>

   //Debug message
   TRACE_INFO("Sending CHAP Response packet (%" PRIuSIZE " bytes)...\r\n", length);
 8007cde:	f7f8 fca4 	bl	800062a <osSuspendAllTasks>
 8007ce2:	4b0e      	ldr	r3, [pc, #56]	; (8007d1c <chapSendResponse+0xc8>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	490d      	ldr	r1, [pc, #52]	; (8007d20 <chapSendResponse+0xcc>)
 8007cec:	4618      	mov	r0, r3
 8007cee:	f010 fa29 	bl	8018144 <fiprintf>
 8007cf2:	f7f8 fca5 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) responsePacket, length, PPP_PROTOCOL_CHAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6998      	ldr	r0, [r3, #24]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	f24c 2323 	movw	r3, #49699	; 0xc223
 8007d00:	6979      	ldr	r1, [r7, #20]
 8007d02:	f002 fe63 	bl	800a9cc <pppSendFrame>
 8007d06:	4603      	mov	r3, r0
 8007d08:	81fb      	strh	r3, [r7, #14]

   //Free previously allocated memory block
   netBufferFree(buffer);
 8007d0a:	6978      	ldr	r0, [r7, #20]
 8007d0c:	f7fa fa78 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 8007d10:	89fb      	ldrh	r3, [r7, #14]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3720      	adds	r7, #32
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000058 	.word	0x20000058
 8007d20:	08019724 	.word	0x08019724

08007d24 <chapSendSuccess>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapSendSuccess(PppContext *context)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppPacket *successPacket;

   //Retrieve the length of the Success packet
   length = sizeof(PppPacket);
 8007d2c:	2304      	movs	r3, #4
 8007d2e:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Success packet
   buffer = pppAllocBuffer(length, &offset);
 8007d30:	f107 030c 	add.w	r3, r7, #12
 8007d34:	4619      	mov	r1, r3
 8007d36:	69f8      	ldr	r0, [r7, #28]
 8007d38:	f002 ffbe 	bl	800acb8 <pppAllocBuffer>
 8007d3c:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <chapSendSuccess+0x24>
      return ERROR_OUT_OF_MEMORY;
 8007d44:	2364      	movs	r3, #100	; 0x64
 8007d46:	e030      	b.n	8007daa <chapSendSuccess+0x86>

   //Point to the Success packet
   successPacket = netBufferAt(buffer, offset);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	69b8      	ldr	r0, [r7, #24]
 8007d4e:	f7fa fb2e 	bl	80023ae <netBufferAt>
 8007d52:	6178      	str	r0, [r7, #20]

   //Format packet header
   successPacket->code = CHAP_CODE_SUCCESS;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2203      	movs	r2, #3
 8007d58:	701a      	strb	r2, [r3, #0]
   successPacket->identifier = context->chapFsm.localIdentifier;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	705a      	strb	r2, [r3, #1]
   successPacket->length = htons(length);
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7f8 fc19 	bl	80005a0 <swapInt16>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	461a      	mov	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending CHAP Success packet (%" PRIuSIZE " bytes)...\r\n", length);
 8007d76:	f7f8 fc58 	bl	800062a <osSuspendAllTasks>
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <chapSendSuccess+0x90>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	490d      	ldr	r1, [pc, #52]	; (8007db8 <chapSendSuccess+0x94>)
 8007d84:	4618      	mov	r0, r3
 8007d86:	f010 f9dd 	bl	8018144 <fiprintf>
 8007d8a:	f7f8 fc59 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) successPacket, length, PPP_PROTOCOL_CHAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6998      	ldr	r0, [r3, #24]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	f24c 2323 	movw	r3, #49699	; 0xc223
 8007d98:	69b9      	ldr	r1, [r7, #24]
 8007d9a:	f002 fe17 	bl	800a9cc <pppSendFrame>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 8007da2:	69b8      	ldr	r0, [r7, #24]
 8007da4:	f7fa fa2c 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 8007da8:	8a7b      	ldrh	r3, [r7, #18]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3720      	adds	r7, #32
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000058 	.word	0x20000058
 8007db8:	08019754 	.word	0x08019754

08007dbc <chapSendFailure>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t chapSendFailure(PppContext *context)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppPacket *failurePacket;

   //Retrieve the length of the Failure packet
   length = sizeof(PppPacket);
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Failure packet
   buffer = pppAllocBuffer(length, &offset);
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	4619      	mov	r1, r3
 8007dce:	69f8      	ldr	r0, [r7, #28]
 8007dd0:	f002 ff72 	bl	800acb8 <pppAllocBuffer>
 8007dd4:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <chapSendFailure+0x24>
      return ERROR_OUT_OF_MEMORY;
 8007ddc:	2364      	movs	r3, #100	; 0x64
 8007dde:	e030      	b.n	8007e42 <chapSendFailure+0x86>

   //Point to the Failure packet
   failurePacket = netBufferAt(buffer, offset);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4619      	mov	r1, r3
 8007de4:	69b8      	ldr	r0, [r7, #24]
 8007de6:	f7fa fae2 	bl	80023ae <netBufferAt>
 8007dea:	6178      	str	r0, [r7, #20]

   //Format packet header
   failurePacket->code = CHAP_CODE_FAILURE;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2204      	movs	r2, #4
 8007df0:	701a      	strb	r2, [r3, #0]
   failurePacket->identifier = context->chapFsm.localIdentifier;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	705a      	strb	r2, [r3, #1]
   failurePacket->length = htons(length);
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7f8 fbcd 	bl	80005a0 <swapInt16>
 8007e06:	4603      	mov	r3, r0
 8007e08:	461a      	mov	r2, r3
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending CHAP Failure packet (%" PRIuSIZE " bytes)...\r\n", length);
 8007e0e:	f7f8 fc0c 	bl	800062a <osSuspendAllTasks>
 8007e12:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <chapSendFailure+0x90>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	69fa      	ldr	r2, [r7, #28]
 8007e1a:	490d      	ldr	r1, [pc, #52]	; (8007e50 <chapSendFailure+0x94>)
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f010 f991 	bl	8018144 <fiprintf>
 8007e22:	f7f8 fc0d 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) failurePacket, length, PPP_PROTOCOL_CHAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_CHAP);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6998      	ldr	r0, [r3, #24]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	f24c 2323 	movw	r3, #49699	; 0xc223
 8007e30:	69b9      	ldr	r1, [r7, #24]
 8007e32:	f002 fdcb 	bl	800a9cc <pppSendFrame>
 8007e36:	4603      	mov	r3, r0
 8007e38:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 8007e3a:	69b8      	ldr	r0, [r7, #24]
 8007e3c:	f7fa f9e0 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 8007e40:	8a7b      	ldrh	r3, [r7, #18]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3720      	adds	r7, #32
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20000058 	.word	0x20000058
 8007e50:	08019780 	.word	0x08019780

08007e54 <ipcpOpen>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpOpen(PppContext *context)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nIPCP Open event\r\n");
 8007e5c:	f7f8 fbe5 	bl	800062a <osSuspendAllTasks>
 8007e60:	4b0e      	ldr	r3, [pc, #56]	; (8007e9c <ipcpOpen+0x48>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2213      	movs	r2, #19
 8007e68:	2101      	movs	r1, #1
 8007e6a:	480d      	ldr	r0, [pc, #52]	; (8007ea0 <ipcpOpen+0x4c>)
 8007e6c:	f010 f9ca 	bl	8018204 <fwrite>
 8007e70:	f7f8 fbe6 	bl	8000640 <osResumeAllTasks>

   //The link is administratively available for traffic
   pppOpenEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	33a0      	adds	r3, #160	; 0xa0
 8007e78:	4a0a      	ldr	r2, [pc, #40]	; (8007ea4 <ipcpOpen+0x50>)
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f002 ff9b 	bl	800adb8 <pppOpenEvent>
   //The lower layer is ready to carry packets
   pppUpEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	33a0      	adds	r3, #160	; 0xa0
 8007e86:	4a07      	ldr	r2, [pc, #28]	; (8007ea4 <ipcpOpen+0x50>)
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f002 ff2c 	bl	800ace8 <pppUpEvent>

   //Successful processing
   return NO_ERROR;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000058 	.word	0x20000058
 8007ea0:	080197ac 	.word	0x080197ac
 8007ea4:	0801a53c 	.word	0x0801a53c

08007ea8 <ipcpClose>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpClose(PppContext *context)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nIPCP Close event\r\n");
 8007eb0:	f7f8 fbbb 	bl	800062a <osSuspendAllTasks>
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <ipcpClose+0x48>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	2214      	movs	r2, #20
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	480d      	ldr	r0, [pc, #52]	; (8007ef4 <ipcpClose+0x4c>)
 8007ec0:	f010 f9a0 	bl	8018204 <fwrite>
 8007ec4:	f7f8 fbbc 	bl	8000640 <osResumeAllTasks>

   //The lower layer is no longer ready to carry packets
   pppDownEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	33a0      	adds	r3, #160	; 0xa0
 8007ecc:	4a0a      	ldr	r2, [pc, #40]	; (8007ef8 <ipcpClose+0x50>)
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f002 ff2d 	bl	800ad30 <pppDownEvent>
   //The link is no longer available for traffic
   pppCloseEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	33a0      	adds	r3, #160	; 0xa0
 8007eda:	4a07      	ldr	r2, [pc, #28]	; (8007ef8 <ipcpClose+0x50>)
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f002 ffae 	bl	800ae40 <pppCloseEvent>

   //Successful processing
   return NO_ERROR;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000058 	.word	0x20000058
 8007ef4:	080197c0 	.word	0x080197c0
 8007ef8:	0801a53c 	.word	0x0801a53c

08007efc <ipcpTick>:
 *
 * @param[in] context PPP context
 **/

void ipcpTick(PppContext *context)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->ipcpFsm.state >= PPP_STATE_4_CLOSING &&
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d923      	bls.n	8007f56 <ipcpTick+0x5a>
      context->ipcpFsm.state <= PPP_STATE_8_ACK_SENT)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   if(context->ipcpFsm.state >= PPP_STATE_4_CLOSING &&
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d81e      	bhi.n	8007f56 <ipcpTick+0x5a>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 8007f18:	f7f8 fc41 	bl	800079e <osGetSystemTime>
 8007f1c:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->ipcpFsm.timestamp) >= PPP_RESTART_TIMER)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d912      	bls.n	8007f56 <ipcpTick+0x5a>
      {
         //Debug message
         TRACE_INFO("\r\nIPCP Timeout event\r\n");
 8007f30:	f7f8 fb7b 	bl	800062a <osSuspendAllTasks>
 8007f34:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <ipcpTick+0x64>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	2216      	movs	r2, #22
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	4809      	ldr	r0, [pc, #36]	; (8007f64 <ipcpTick+0x68>)
 8007f40:	f010 f960 	bl	8018204 <fwrite>
 8007f44:	f7f8 fb7c 	bl	8000640 <osResumeAllTasks>

         //The restart timer is used to retransmit Configure-Request
         //and Terminate-Request packets
         pppTimeoutEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	33a0      	adds	r3, #160	; 0xa0
 8007f4c:	4a06      	ldr	r2, [pc, #24]	; (8007f68 <ipcpTick+0x6c>)
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f002 ffcf 	bl	800aef4 <pppTimeoutEvent>
      }
   }
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20000058 	.word	0x20000058
 8007f64:	080197d8 	.word	0x080197d8
 8007f68:	0801a53c 	.word	0x0801a53c

08007f6c <ipcpProcessPacket>:
 * @param[in]  packet IPCP packet received from the peer
 * @param[in] length Length of the packet, in bytes
 **/

void ipcpProcessPacket(PppContext *context, const PppPacket *packet, size_t length)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming IPCP packet is valid
   if(length < sizeof(PppPacket))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d967      	bls.n	800804e <ipcpProcessPacket+0xe2>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	885b      	ldrh	r3, [r3, #2]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7f8 fb0b 	bl	80005a0 <swapInt16>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d35e      	bcc.n	8008052 <ipcpProcessPacket+0xe6>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	885b      	ldrh	r3, [r3, #2]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7f8 fb00 	bl	80005a0 <swapInt16>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d957      	bls.n	8008056 <ipcpProcessPacket+0xea>
      return;

   //Save the length of the IPCP packet
   length = ntohs(packet->length);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7f8 faf7 	bl	80005a0 <swapInt16>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("IPCP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 8007fb6:	f7f8 fb38 	bl	800062a <osSuspendAllTasks>
 8007fba:	4b29      	ldr	r3, [pc, #164]	; (8008060 <ipcpProcessPacket+0xf4>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4928      	ldr	r1, [pc, #160]	; (8008064 <ipcpProcessPacket+0xf8>)
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f010 f8bd 	bl	8018144 <fiprintf>
 8007fca:	f7f8 fb39 	bl	8000640 <osResumeAllTasks>
   //Dump IPCP packet contents for debugging purpose
   pppDumpPacket(packet, length, PPP_PROTOCOL_IPCP);

   //Check IPCP code field
   switch(packet->code)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	2b06      	cmp	r3, #6
 8007fd6:	d834      	bhi.n	8008042 <ipcpProcessPacket+0xd6>
 8007fd8:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <ipcpProcessPacket+0x74>)
 8007fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fde:	bf00      	nop
 8007fe0:	08007ffd 	.word	0x08007ffd
 8007fe4:	08008007 	.word	0x08008007
 8007fe8:	08008011 	.word	0x08008011
 8007fec:	0800801b 	.word	0x0800801b
 8007ff0:	08008025 	.word	0x08008025
 8007ff4:	0800802f 	.word	0x0800802f
 8007ff8:	08008039 	.word	0x08008039
   {
   //Configure-Request packet?
   case PPP_CODE_CONFIGURE_REQ:
      //Process Configure-Request packet
      ipcpProcessConfigureReq(context, (PppConfigurePacket *) packet);
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 f832 	bl	8008068 <ipcpProcessConfigureReq>
      break;
 8008004:	e028      	b.n	8008058 <ipcpProcessPacket+0xec>
   //Configure-Ack packet?
   case PPP_CODE_CONFIGURE_ACK:
      //Process Configure-Ack packet
      ipcpProcessConfigureAck(context, (PppConfigurePacket *) packet);
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 f8b1 	bl	8008170 <ipcpProcessConfigureAck>
      break;
 800800e:	e023      	b.n	8008058 <ipcpProcessPacket+0xec>
   //Configure-Nak packet?
   case PPP_CODE_CONFIGURE_NAK:
      //Process Configure-Nak packet
      ipcpProcessConfigureNak(context, (PppConfigurePacket *) packet);
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f8d8 	bl	80081c8 <ipcpProcessConfigureNak>
      break;
 8008018:	e01e      	b.n	8008058 <ipcpProcessPacket+0xec>
   //Configure-Reject packet?
   case PPP_CODE_CONFIGURE_REJ:
      //Process Configure-Reject packet
      ipcpProcessConfigureReject(context, (PppConfigurePacket *) packet);
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 f961 	bl	80082e4 <ipcpProcessConfigureReject>
      break;
 8008022:	e019      	b.n	8008058 <ipcpProcessPacket+0xec>
   //Terminate-Request packet?
   case PPP_CODE_TERMINATE_REQ:
      //Process Terminate-Request packet
      ipcpProcessTerminateReq(context, (PppTerminatePacket *) packet);
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f9cc 	bl	80083c4 <ipcpProcessTerminateReq>
      break;
 800802c:	e014      	b.n	8008058 <ipcpProcessPacket+0xec>
   //Terminate-Ack packet?
   case PPP_CODE_TERMINATE_ACK:
      //Process Terminate-Ack packet
      ipcpProcessTerminateAck(context, (PppTerminatePacket *) packet);
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 f9eb 	bl	800840c <ipcpProcessTerminateAck>
      break;
 8008036:	e00f      	b.n	8008058 <ipcpProcessPacket+0xec>
   //Code-Reject packet?
   case PPP_CODE_CODE_REJ:
      //Process Code-Reject packet
      ipcpProcessCodeRej(context, (PppCodeRejPacket *) packet);
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 fa0a 	bl	8008454 <ipcpProcessCodeRej>
      break;
 8008040:	e00a      	b.n	8008058 <ipcpProcessPacket+0xec>
   //Unknown code field
   default:
      //The packet is un-interpretable
      ipcpProcessUnknownCode(context, packet);
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fa4b 	bl	80084e0 <ipcpProcessUnknownCode>
      break;
 800804a:	bf00      	nop
 800804c:	e004      	b.n	8008058 <ipcpProcessPacket+0xec>
      return;
 800804e:	bf00      	nop
 8008050:	e002      	b.n	8008058 <ipcpProcessPacket+0xec>
      return;
 8008052:	bf00      	nop
 8008054:	e000      	b.n	8008058 <ipcpProcessPacket+0xec>
      return;
 8008056:	bf00      	nop
   }
}
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000058 	.word	0x20000058
 8008064:	080197f0 	.word	0x080197f0

08008068 <ipcpProcessConfigureReq>:
 * @return Error code
 **/

error_t ipcpProcessConfigureReq(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	; 0x28
 800806c:	af02      	add	r7, sp, #8
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
   bool_t notRecognizable;
   bool_t notAcceptable;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Configure-Request event\r\n");
 8008072:	f7f8 fada 	bl	800062a <osSuspendAllTasks>
 8008076:	4b3b      	ldr	r3, [pc, #236]	; (8008164 <ipcpProcessConfigureReq+0xfc>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	2228      	movs	r2, #40	; 0x28
 800807e:	2101      	movs	r1, #1
 8008080:	4839      	ldr	r0, [pc, #228]	; (8008168 <ipcpProcessConfigureReq+0x100>)
 8008082:	f010 f8bf 	bl	8018204 <fwrite>
 8008086:	f7f8 fadb 	bl	8000640 <osResumeAllTasks>

   //Initialize variables
   error = NO_ERROR;
 800808a:	2300      	movs	r3, #0
 800808c:	83fb      	strh	r3, [r7, #30]
   notRecognizable = FALSE;
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]
   notAcceptable = FALSE;
 8008092:	2300      	movs	r3, #0
 8008094:	613b      	str	r3, [r7, #16]

   //Retrieve the length of the option list
   length = ntohs(configureReqPacket->length) - sizeof(PppConfigurePacket);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	885b      	ldrh	r3, [r3, #2]
 800809a:	b29b      	uxth	r3, r3
 800809c:	4618      	mov	r0, r3
 800809e:	f7f8 fa7f 	bl	80005a0 <swapInt16>
 80080a2:	4603      	mov	r3, r0
 80080a4:	3b04      	subs	r3, #4
 80080a6:	61bb      	str	r3, [r7, #24]
   //Point to the first option
   option = (PppOption *) configureReqPacket->options;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	3304      	adds	r3, #4
 80080ac:	60fb      	str	r3, [r7, #12]

   //Parse configuration options
   while(length > 0)
 80080ae:	e026      	b.n	80080fe <ipcpProcessConfigureReq+0x96>
   {
      //Parse current option
      error = ipcpParseOption(context, option, length, NULL);
 80080b0:	2300      	movs	r3, #0
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fd24 	bl	8008b04 <ipcpParseOption>
 80080bc:	4603      	mov	r3, r0
 80080be:	83fb      	strh	r3, [r7, #30]

      //Any error to report?
      if(error == ERROR_INVALID_TYPE)
 80080c0:	8bfb      	ldrh	r3, [r7, #30]
 80080c2:	2bef      	cmp	r3, #239	; 0xef
 80080c4:	d104      	bne.n	80080d0 <ipcpProcessConfigureReq+0x68>
      {
         //Option not recognizable
         notRecognizable = TRUE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
         //Catch error
         error = NO_ERROR;
 80080ca:	2300      	movs	r3, #0
 80080cc:	83fb      	strh	r3, [r7, #30]
 80080ce:	e00a      	b.n	80080e6 <ipcpProcessConfigureReq+0x7e>
      }
      else if(error == ERROR_INVALID_VALUE)
 80080d0:	8bfb      	ldrh	r3, [r7, #30]
 80080d2:	2bf0      	cmp	r3, #240	; 0xf0
 80080d4:	d104      	bne.n	80080e0 <ipcpProcessConfigureReq+0x78>
      {
         //Option not acceptable for configuration
         notAcceptable = TRUE;
 80080d6:	2301      	movs	r3, #1
 80080d8:	613b      	str	r3, [r7, #16]
         //Catch error
         error = NO_ERROR;
 80080da:	2300      	movs	r3, #0
 80080dc:	83fb      	strh	r3, [r7, #30]
 80080de:	e002      	b.n	80080e6 <ipcpProcessConfigureReq+0x7e>
      }
      else if(error)
 80080e0:	8bfb      	ldrh	r3, [r7, #30]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10f      	bne.n	8008106 <ipcpProcessConfigureReq+0x9e>
         //Malformed Configure-Request packet
         break;
      }

      //Remaining bytes to process
      length -= option->length;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	461a      	mov	r2, r3
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	461a      	mov	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
   while(length > 0)
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1d5      	bne.n	80080b0 <ipcpProcessConfigureReq+0x48>
 8008104:	e000      	b.n	8008108 <ipcpProcessConfigureReq+0xa0>
         break;
 8008106:	bf00      	nop
   }

   //Valid Configure-Request packet received from the peer?
   if(!error)
 8008108:	8bfb      	ldrh	r3, [r7, #30]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d125      	bne.n	800815a <ipcpProcessConfigureReq+0xf2>
   {
      //Check flags
      if(notRecognizable)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00a      	beq.n	800812a <ipcpProcessConfigureReq+0xc2>
      {
         //If some configuration options received in the Configure-Request are not
         //recognizable or not acceptable for negotiation, then the implementation
         //must transmit a Configure-Reject
         pppRcvConfigureReqEvent(context, &context->ipcpFsm, &ipcpCallbacks,
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800811a:	2304      	movs	r3, #4
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	4a12      	ldr	r2, [pc, #72]	; (800816c <ipcpProcessConfigureReq+0x104>)
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f002 ff38 	bl	800af98 <pppRcvConfigureReqEvent>
 8008128:	e017      	b.n	800815a <ipcpProcessConfigureReq+0xf2>
            configureReqPacket, PPP_CODE_CONFIGURE_REJ);
      }
      else if(notAcceptable)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <ipcpProcessConfigureReq+0xde>
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         pppRcvConfigureReqEvent(context, &context->ipcpFsm, &ipcpCallbacks,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8008136:	2303      	movs	r3, #3
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	4a0b      	ldr	r2, [pc, #44]	; (800816c <ipcpProcessConfigureReq+0x104>)
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f002 ff2a 	bl	800af98 <pppRcvConfigureReqEvent>
 8008144:	e009      	b.n	800815a <ipcpProcessConfigureReq+0xf2>
      else
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         pppRcvConfigureReqEvent(context, &context->ipcpFsm, &ipcpCallbacks,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800814c:	2302      	movs	r3, #2
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	4a06      	ldr	r2, [pc, #24]	; (800816c <ipcpProcessConfigureReq+0x104>)
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f002 ff1f 	bl	800af98 <pppRcvConfigureReqEvent>
            configureReqPacket, PPP_CODE_CONFIGURE_ACK);
      }
   }

   //Return status code
   return error;
 800815a:	8bfb      	ldrh	r3, [r7, #30]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3720      	adds	r7, #32
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	20000058 	.word	0x20000058
 8008168:	08019818 	.word	0x08019818
 800816c:	0801a53c 	.word	0x0801a53c

08008170 <ipcpProcessConfigureAck>:
 * @return Error code
 **/

error_t ipcpProcessConfigureAck(PppContext *context,
   const PppConfigurePacket *configureAckPacket)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Configure-Ack event\r\n");
 800817a:	f7f8 fa56 	bl	800062a <osSuspendAllTasks>
 800817e:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <ipcpProcessConfigureAck+0x4c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2224      	movs	r2, #36	; 0x24
 8008186:	2101      	movs	r1, #1
 8008188:	480d      	ldr	r0, [pc, #52]	; (80081c0 <ipcpProcessConfigureAck+0x50>)
 800818a:	f010 f83b 	bl	8018204 <fwrite>
 800818e:	f7f8 fa57 	bl	8000640 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureAckPacket->identifier != context->ipcpFsm.identifier)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	785a      	ldrb	r2, [r3, #1]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800819c:	429a      	cmp	r2, r3
 800819e:	d001      	beq.n	80081a4 <ipcpProcessConfigureAck+0x34>
      return ERROR_WRONG_IDENTIFIER;
 80081a0:	23d6      	movs	r3, #214	; 0xd6
 80081a2:	e007      	b.n	80081b4 <ipcpProcessConfigureAck+0x44>

   //A valid Configure-Ack packet has been received from the peer
   pppRcvConfigureAckEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	33a0      	adds	r3, #160	; 0xa0
 80081a8:	4a06      	ldr	r2, [pc, #24]	; (80081c4 <ipcpProcessConfigureAck+0x54>)
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f003 f819 	bl	800b1e4 <pppRcvConfigureAckEvent>

   //Successful processing
   return NO_ERROR;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20000058 	.word	0x20000058
 80081c0:	08019844 	.word	0x08019844
 80081c4:	0801a53c 	.word	0x0801a53c

080081c8 <ipcpProcessConfigureNak>:
 * @return Error code
 **/

error_t ipcpProcessConfigureNak(PppContext *context,
   const PppConfigurePacket *configureNakPacket)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("IPCP Receive-Configure-Nak event\r\n");
 80081d2:	f7f8 fa2a 	bl	800062a <osSuspendAllTasks>
 80081d6:	4b40      	ldr	r3, [pc, #256]	; (80082d8 <ipcpProcessConfigureNak+0x110>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	2222      	movs	r2, #34	; 0x22
 80081de:	2101      	movs	r1, #1
 80081e0:	483e      	ldr	r0, [pc, #248]	; (80082dc <ipcpProcessConfigureNak+0x114>)
 80081e2:	f010 f80f 	bl	8018204 <fwrite>
 80081e6:	f7f8 fa2b 	bl	8000640 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureNakPacket->identifier != context->ipcpFsm.identifier)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	785a      	ldrb	r2, [r3, #1]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d001      	beq.n	80081fc <ipcpProcessConfigureNak+0x34>
      return ERROR_WRONG_IDENTIFIER;
 80081f8:	23d6      	movs	r3, #214	; 0xd6
 80081fa:	e069      	b.n	80082d0 <ipcpProcessConfigureNak+0x108>

   //Retrieve the length of the option list
   length = ntohs(configureNakPacket->length) - sizeof(PppConfigurePacket);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	885b      	ldrh	r3, [r3, #2]
 8008200:	b29b      	uxth	r3, r3
 8008202:	4618      	mov	r0, r3
 8008204:	f7f8 f9cc 	bl	80005a0 <swapInt16>
 8008208:	4603      	mov	r3, r0
 800820a:	3b04      	subs	r3, #4
 800820c:	61fb      	str	r3, [r7, #28]
   //Point to the first option
   option = (PppOption *) configureNakPacket->options;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	3304      	adds	r3, #4
 8008212:	61bb      	str	r3, [r7, #24]

   //Parse configuration options
   while(length > 0)
 8008214:	e051      	b.n	80082ba <ipcpProcessConfigureNak+0xf2>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d801      	bhi.n	8008222 <ipcpProcessConfigureNak+0x5a>
         return ERROR_INVALID_LENGTH;
 800821e:	23eb      	movs	r3, #235	; 0xeb
 8008220:	e056      	b.n	80082d0 <ipcpProcessConfigureNak+0x108>
      if(option->length > length)
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	785b      	ldrb	r3, [r3, #1]
 8008226:	461a      	mov	r2, r3
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4293      	cmp	r3, r2
 800822c:	d201      	bcs.n	8008232 <ipcpProcessConfigureNak+0x6a>
         return ERROR_INVALID_LENGTH;
 800822e:	23eb      	movs	r3, #235	; 0xeb
 8008230:	e04e      	b.n	80082d0 <ipcpProcessConfigureNak+0x108>

      //IP-Address option?
      if(option->type == IPCP_OPTION_IP_ADDRESS)
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b03      	cmp	r3, #3
 8008238:	d10e      	bne.n	8008258 <ipcpProcessConfigureNak+0x90>
      {
         //Cast option
         IpcpIpAddressOption *ipAddressOption = (IpcpIpAddressOption *) option;
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	60fb      	str	r3, [r7, #12]

         //Check option length
         if(ipAddressOption->length != sizeof(IpcpIpAddressOption))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	2b06      	cmp	r3, #6
 8008244:	d001      	beq.n	800824a <ipcpProcessConfigureNak+0x82>
            return ERROR_INVALID_LENGTH;
 8008246:	23eb      	movs	r3, #235	; 0xeb
 8008248:	e042      	b.n	80082d0 <ipcpProcessConfigureNak+0x108>

         //Save IP address
         context->localConfig.ipAddr = ipAddressOption->ipAddr;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8008256:	e024      	b.n	80082a2 <ipcpProcessConfigureNak+0xda>
      }
      //Primary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_PRIMARY_DNS)
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b81      	cmp	r3, #129	; 0x81
 800825e:	d10e      	bne.n	800827e <ipcpProcessConfigureNak+0xb6>
      {
         //Cast option
         IpcpPrimaryDnsOption *primaryDns = (IpcpPrimaryDnsOption *) option;
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	613b      	str	r3, [r7, #16]

         //Check option length
         if(primaryDns->length != sizeof(IpcpPrimaryDnsOption))
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	2b06      	cmp	r3, #6
 800826a:	d001      	beq.n	8008270 <ipcpProcessConfigureNak+0xa8>
            return ERROR_INVALID_LENGTH;
 800826c:	23eb      	movs	r3, #235	; 0xeb
 800826e:	e02f      	b.n	80082d0 <ipcpProcessConfigureNak+0x108>

         //Save primary DNS server address
         context->localConfig.primaryDns = primaryDns->ipAddr;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800827c:	e011      	b.n	80082a2 <ipcpProcessConfigureNak+0xda>
      }
      //Secondary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_SECONDARY_DNS)
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b83      	cmp	r3, #131	; 0x83
 8008284:	d10d      	bne.n	80082a2 <ipcpProcessConfigureNak+0xda>
      {
         //Cast option
         IpcpSecondaryDnsOption *secondaryDns = (IpcpSecondaryDnsOption *) option;
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	617b      	str	r3, [r7, #20]

         //Check option length
         if(secondaryDns->length != sizeof(IpcpSecondaryDnsOption))
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	785b      	ldrb	r3, [r3, #1]
 800828e:	2b06      	cmp	r3, #6
 8008290:	d001      	beq.n	8008296 <ipcpProcessConfigureNak+0xce>
            return ERROR_INVALID_LENGTH;
 8008292:	23eb      	movs	r3, #235	; 0xeb
 8008294:	e01c      	b.n	80082d0 <ipcpProcessConfigureNak+0x108>

         //Save secondary DNS server address
         context->localConfig.secondaryDns = secondaryDns->ipAddr;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
      }

      //Remaining bytes to process
      length -= option->length;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	461a      	mov	r2, r3
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	61fb      	str	r3, [r7, #28]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	785b      	ldrb	r3, [r3, #1]
 80082b2:	461a      	mov	r2, r3
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	4413      	add	r3, r2
 80082b8:	61bb      	str	r3, [r7, #24]
   while(length > 0)
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1aa      	bne.n	8008216 <ipcpProcessConfigureNak+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	33a0      	adds	r3, #160	; 0xa0
 80082c4:	4a06      	ldr	r2, [pc, #24]	; (80082e0 <ipcpProcessConfigureNak+0x118>)
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f002 ffe1 	bl	800b290 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3720      	adds	r7, #32
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20000058 	.word	0x20000058
 80082dc:	0801986c 	.word	0x0801986c
 80082e0:	0801a53c 	.word	0x0801a53c

080082e4 <ipcpProcessConfigureReject>:
 * @return Error code
 **/

error_t ipcpProcessConfigureReject(PppContext *context,
   const PppConfigurePacket *configureRejPacket)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Configure-Reject event\r\n");
 80082ee:	f7f8 f99c 	bl	800062a <osSuspendAllTasks>
 80082f2:	4b31      	ldr	r3, [pc, #196]	; (80083b8 <ipcpProcessConfigureReject+0xd4>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	2227      	movs	r2, #39	; 0x27
 80082fa:	2101      	movs	r1, #1
 80082fc:	482f      	ldr	r0, [pc, #188]	; (80083bc <ipcpProcessConfigureReject+0xd8>)
 80082fe:	f00f ff81 	bl	8018204 <fwrite>
 8008302:	f7f8 f99d 	bl	8000640 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureRejPacket->identifier != context->ipcpFsm.identifier)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	785a      	ldrb	r2, [r3, #1]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008310:	429a      	cmp	r2, r3
 8008312:	d001      	beq.n	8008318 <ipcpProcessConfigureReject+0x34>
      return ERROR_WRONG_IDENTIFIER;
 8008314:	23d6      	movs	r3, #214	; 0xd6
 8008316:	e04b      	b.n	80083b0 <ipcpProcessConfigureReject+0xcc>

   //Retrieve the length of the option list
   length = ntohs(configureRejPacket->length) - sizeof(PppConfigurePacket);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	b29b      	uxth	r3, r3
 800831e:	4618      	mov	r0, r3
 8008320:	f7f8 f93e 	bl	80005a0 <swapInt16>
 8008324:	4603      	mov	r3, r0
 8008326:	3b04      	subs	r3, #4
 8008328:	60fb      	str	r3, [r7, #12]
   //Point to the first option
   option = (PppOption *) configureRejPacket->options;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	3304      	adds	r3, #4
 800832e:	60bb      	str	r3, [r7, #8]

   //Parse configuration options
   while(length > 0)
 8008330:	e033      	b.n	800839a <ipcpProcessConfigureReject+0xb6>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d801      	bhi.n	800833e <ipcpProcessConfigureReject+0x5a>
         return ERROR_INVALID_LENGTH;
 800833a:	23eb      	movs	r3, #235	; 0xeb
 800833c:	e038      	b.n	80083b0 <ipcpProcessConfigureReject+0xcc>
      if(option->length > length)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	785b      	ldrb	r3, [r3, #1]
 8008342:	461a      	mov	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4293      	cmp	r3, r2
 8008348:	d201      	bcs.n	800834e <ipcpProcessConfigureReject+0x6a>
         return ERROR_INVALID_LENGTH;
 800834a:	23eb      	movs	r3, #235	; 0xeb
 800834c:	e030      	b.n	80083b0 <ipcpProcessConfigureReject+0xcc>

      //IP-Address option?
      if(option->type == IPCP_OPTION_IP_ADDRESS)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b03      	cmp	r3, #3
 8008354:	d104      	bne.n	8008360 <ipcpProcessConfigureReject+0x7c>
      {
         //The option is not recognized by the peer
         context->localConfig.ipAddrRejected = TRUE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800835e:	e010      	b.n	8008382 <ipcpProcessConfigureReject+0x9e>
      }
      //Primary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_PRIMARY_DNS)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b81      	cmp	r3, #129	; 0x81
 8008366:	d104      	bne.n	8008372 <ipcpProcessConfigureReject+0x8e>
      {
         //The option is not recognized by the peer
         context->localConfig.primaryDnsRejected = TRUE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8008370:	e007      	b.n	8008382 <ipcpProcessConfigureReject+0x9e>
      }
      //Secondary-DNS-Server-Address option?
      else if(option->type == IPCP_OPTION_SECONDARY_DNS)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b83      	cmp	r3, #131	; 0x83
 8008378:	d103      	bne.n	8008382 <ipcpProcessConfigureReject+0x9e>
      {
         //The option is not recognized by the peer
         context->localConfig.secondaryDnsRejected = TRUE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
      }

      //Remaining bytes to process
      length -= option->length;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	461a      	mov	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	461a      	mov	r2, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	4413      	add	r3, r2
 8008398:	60bb      	str	r3, [r7, #8]
   while(length > 0)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1c8      	bne.n	8008332 <ipcpProcessConfigureReject+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	33a0      	adds	r3, #160	; 0xa0
 80083a4:	4a06      	ldr	r2, [pc, #24]	; (80083c0 <ipcpProcessConfigureReject+0xdc>)
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f002 ff71 	bl	800b290 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20000058 	.word	0x20000058
 80083bc:	08019890 	.word	0x08019890
 80083c0:	0801a53c 	.word	0x0801a53c

080083c4 <ipcpProcessTerminateReq>:
 * @return Error code
 **/

error_t ipcpProcessTerminateReq(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Terminate-Request event\r\n");
 80083ce:	f7f8 f92c 	bl	800062a <osSuspendAllTasks>
 80083d2:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <ipcpProcessTerminateReq+0x3c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	2228      	movs	r2, #40	; 0x28
 80083da:	2101      	movs	r1, #1
 80083dc:	4809      	ldr	r0, [pc, #36]	; (8008404 <ipcpProcessTerminateReq+0x40>)
 80083de:	f00f ff11 	bl	8018204 <fwrite>
 80083e2:	f7f8 f92d 	bl	8000640 <osResumeAllTasks>

   //The Terminate-Request indicates the desire of the peer to close the connection
   pppRcvTerminateReqEvent(context, &context->ipcpFsm,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	4a06      	ldr	r2, [pc, #24]	; (8008408 <ipcpProcessTerminateReq+0x44>)
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f002 ffa1 	bl	800b338 <pppRcvTerminateReqEvent>
      &ipcpCallbacks, terminateReqPacket);

   //Successful processing
   return NO_ERROR;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20000058 	.word	0x20000058
 8008404:	080198b8 	.word	0x080198b8
 8008408:	0801a53c 	.word	0x0801a53c

0800840c <ipcpProcessTerminateAck>:
 * @return Error code
 **/

error_t ipcpProcessTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateAckPacket)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Terminate-Ack event\r\n");
 8008416:	f7f8 f908 	bl	800062a <osSuspendAllTasks>
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <ipcpProcessTerminateAck+0x3c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	2224      	movs	r2, #36	; 0x24
 8008422:	2101      	movs	r1, #1
 8008424:	4809      	ldr	r0, [pc, #36]	; (800844c <ipcpProcessTerminateAck+0x40>)
 8008426:	f00f feed 	bl	8018204 <fwrite>
 800842a:	f7f8 f909 	bl	8000640 <osResumeAllTasks>

   //The Terminate-Ack packet is usually a response to a Terminate-Request
   //packet. This packet may also indicate that the peer is in Closed or
   //Stopped states, and serves to re-synchronize the link configuration
   pppRcvTerminateAckEvent(context, &context->ipcpFsm, &ipcpCallbacks);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	33a0      	adds	r3, #160	; 0xa0
 8008432:	4a07      	ldr	r2, [pc, #28]	; (8008450 <ipcpProcessTerminateAck+0x44>)
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f002 ffc6 	bl	800b3c8 <pppRcvTerminateAckEvent>

   //Successful processing
   return NO_ERROR;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000058 	.word	0x20000058
 800844c:	080198e4 	.word	0x080198e4
 8008450:	0801a53c 	.word	0x0801a53c

08008454 <ipcpProcessCodeRej>:
 * @return Error code
 **/

error_t ipcpProcessCodeRej(PppContext *context,
   const PppCodeRejPacket *codeRejPacket)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
   size_t length;
   PppPacket *packet;

   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Code-Reject event\r\n");
 800845e:	f7f8 f8e4 	bl	800062a <osSuspendAllTasks>
 8008462:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <ipcpProcessCodeRej+0x80>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	2222      	movs	r2, #34	; 0x22
 800846a:	2101      	movs	r1, #1
 800846c:	481a      	ldr	r0, [pc, #104]	; (80084d8 <ipcpProcessCodeRej+0x84>)
 800846e:	f00f fec9 	bl	8018204 <fwrite>
 8008472:	f7f8 f8e5 	bl	8000640 <osResumeAllTasks>

   //Point to the rejected packet
   packet = (PppPacket *) codeRejPacket->rejectedPacket;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	3304      	adds	r3, #4
 800847a:	60fb      	str	r3, [r7, #12]
   //Retrieve the length of the rejected packet
   length = ntohs(codeRejPacket->length) - sizeof(PppCodeRejPacket);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	885b      	ldrh	r3, [r3, #2]
 8008480:	b29b      	uxth	r3, r3
 8008482:	4618      	mov	r0, r3
 8008484:	f7f8 f88c 	bl	80005a0 <swapInt16>
 8008488:	4603      	mov	r3, r0
 800848a:	3b04      	subs	r3, #4
 800848c:	60bb      	str	r3, [r7, #8]

   //Make sure the length of the rejected packet is valid
   if(length < sizeof(PppPacket))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b03      	cmp	r3, #3
 8008492:	d801      	bhi.n	8008498 <ipcpProcessCodeRej+0x44>
      return ERROR_INVALID_LENGTH;
 8008494:	23eb      	movs	r3, #235	; 0xeb
 8008496:	e019      	b.n	80084cc <ipcpProcessCodeRej+0x78>

   //Check whether the rejected value is acceptable or catastrophic
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <ipcpProcessCodeRej+0x54>
      packet->code > PPP_CODE_CODE_REJ)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	781b      	ldrb	r3, [r3, #0]
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 80084a4:	2b07      	cmp	r3, #7
 80084a6:	d908      	bls.n	80084ba <ipcpProcessCodeRej+0x66>
   {
      //The RXJ+ event arises when the rejected value is acceptable, such
      //as a Code-Reject of an extended code, or a Protocol-Reject of a
      //NCP. These are within the scope of normal operation
      pppRcvCodeRejEvent(context, &context->ipcpFsm, &ipcpCallbacks, TRUE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 80084ae:	2301      	movs	r3, #1
 80084b0:	4a0a      	ldr	r2, [pc, #40]	; (80084dc <ipcpProcessCodeRej+0x88>)
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f002 ffe8 	bl	800b488 <pppRcvCodeRejEvent>
 80084b8:	e007      	b.n	80084ca <ipcpProcessCodeRej+0x76>
   else
   {
      //The RXJ- event arises when the rejected value is catastrophic, such
      //as a Code-Reject of Configure-Request! This event communicates an
      //unrecoverable error that terminates the connection
      pppRcvCodeRejEvent(context, &context->ipcpFsm, &ipcpCallbacks, FALSE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 80084c0:	2300      	movs	r3, #0
 80084c2:	4a06      	ldr	r2, [pc, #24]	; (80084dc <ipcpProcessCodeRej+0x88>)
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f002 ffdf 	bl	800b488 <pppRcvCodeRejEvent>
   }

   //Successful processing
   return NO_ERROR;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20000058 	.word	0x20000058
 80084d8:	0801990c 	.word	0x0801990c
 80084dc:	0801a53c 	.word	0x0801a53c

080084e0 <ipcpProcessUnknownCode>:
 * @return Error code
 **/

error_t ipcpProcessUnknownCode(PppContext *context,
   const PppPacket *packet)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nIPCP Receive-Unknown-Code event\r\n");
 80084ea:	f7f8 f89e 	bl	800062a <osSuspendAllTasks>
 80084ee:	4b0b      	ldr	r3, [pc, #44]	; (800851c <ipcpProcessUnknownCode+0x3c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2223      	movs	r2, #35	; 0x23
 80084f6:	2101      	movs	r1, #1
 80084f8:	4809      	ldr	r0, [pc, #36]	; (8008520 <ipcpProcessUnknownCode+0x40>)
 80084fa:	f00f fe83 	bl	8018204 <fwrite>
 80084fe:	f7f8 f89f 	bl	8000640 <osResumeAllTasks>

   //This event occurs when an un-interpretable packet is received from
   //the peer. A Code-Reject packet is sent in response
   pppRcvUnknownCodeEvent(context, &context->ipcpFsm, &ipcpCallbacks, packet);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	4a06      	ldr	r2, [pc, #24]	; (8008524 <ipcpProcessUnknownCode+0x44>)
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f002 ffa3 	bl	800b458 <pppRcvUnknownCodeEvent>

   //Successful processing
   return NO_ERROR;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20000058 	.word	0x20000058
 8008520:	08019930 	.word	0x08019930
 8008524:	0801a53c 	.word	0x0801a53c

08008528 <ipcpThisLayerUp>:
 * @brief This-Layer-Up callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerUp(PppContext *context)
{
 8008528:	b590      	push	{r4, r7, lr}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Debug message
   TRACE_INFO("IPCP This-Layer-Up callback\r\n");
 8008530:	f7f8 f87b 	bl	800062a <osSuspendAllTasks>
 8008534:	4b48      	ldr	r3, [pc, #288]	; (8008658 <ipcpThisLayerUp+0x130>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	221d      	movs	r2, #29
 800853c:	2101      	movs	r1, #1
 800853e:	4847      	ldr	r0, [pc, #284]	; (800865c <ipcpThisLayerUp+0x134>)
 8008540:	f00f fe60 	bl	8018204 <fwrite>
 8008544:	f7f8 f87c 	bl	8000640 <osResumeAllTasks>

   //Debug message
   TRACE_INFO("  Local IP Addr = %s\r\n", ipv4AddrToString(context->localConfig.ipAddr, NULL));
 8008548:	f7f8 f86f 	bl	800062a <osSuspendAllTasks>
 800854c:	4b42      	ldr	r3, [pc, #264]	; (8008658 <ipcpThisLayerUp+0x130>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68dc      	ldr	r4, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8008558:	2100      	movs	r1, #0
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe f99e 	bl	800689c <ipv4AddrToString>
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	493e      	ldr	r1, [pc, #248]	; (8008660 <ipcpThisLayerUp+0x138>)
 8008566:	4620      	mov	r0, r4
 8008568:	f00f fdec 	bl	8018144 <fiprintf>
 800856c:	f7f8 f868 	bl	8000640 <osResumeAllTasks>
   TRACE_INFO("  Peer IP Addr = %s\r\n", ipv4AddrToString(context->peerConfig.ipAddr, NULL));
 8008570:	f7f8 f85b 	bl	800062a <osSuspendAllTasks>
 8008574:	4b38      	ldr	r3, [pc, #224]	; (8008658 <ipcpThisLayerUp+0x130>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68dc      	ldr	r4, [r3, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008580:	2100      	movs	r1, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe f98a 	bl	800689c <ipv4AddrToString>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	4935      	ldr	r1, [pc, #212]	; (8008664 <ipcpThisLayerUp+0x13c>)
 800858e:	4620      	mov	r0, r4
 8008590:	f00f fdd8 	bl	8018144 <fiprintf>
 8008594:	f7f8 f854 	bl	8000640 <osResumeAllTasks>
   TRACE_INFO("  Primary DNS = %s\r\n", ipv4AddrToString(context->localConfig.primaryDns, NULL));
 8008598:	f7f8 f847 	bl	800062a <osSuspendAllTasks>
 800859c:	4b2e      	ldr	r3, [pc, #184]	; (8008658 <ipcpThisLayerUp+0x130>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68dc      	ldr	r4, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe f976 	bl	800689c <ipv4AddrToString>
 80085b0:	4603      	mov	r3, r0
 80085b2:	461a      	mov	r2, r3
 80085b4:	492c      	ldr	r1, [pc, #176]	; (8008668 <ipcpThisLayerUp+0x140>)
 80085b6:	4620      	mov	r0, r4
 80085b8:	f00f fdc4 	bl	8018144 <fiprintf>
 80085bc:	f7f8 f840 	bl	8000640 <osResumeAllTasks>
   TRACE_INFO("  Secondary DNS = %s\r\n", ipv4AddrToString(context->localConfig.secondaryDns, NULL));
 80085c0:	f7f8 f833 	bl	800062a <osSuspendAllTasks>
 80085c4:	4b24      	ldr	r3, [pc, #144]	; (8008658 <ipcpThisLayerUp+0x130>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68dc      	ldr	r4, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80085d0:	2100      	movs	r1, #0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe f962 	bl	800689c <ipv4AddrToString>
 80085d8:	4603      	mov	r3, r0
 80085da:	461a      	mov	r2, r3
 80085dc:	4923      	ldr	r1, [pc, #140]	; (800866c <ipcpThisLayerUp+0x144>)
 80085de:	4620      	mov	r0, r4
 80085e0:	f00f fdb0 	bl	8018144 <fiprintf>
 80085e4:	f7f8 f82c 	bl	8000640 <osResumeAllTasks>

   //Point to the underlying interface
   interface = context->interface;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	60fb      	str	r3, [r7, #12]

   //Update IPv4 configuration
   interface->ipv4Context.addrList[0].addr = context->localConfig.ipAddr;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   interface->ipv4Context.addrList[0].state = IPV4_ADDR_STATE_VALID;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2202      	movs	r2, #2
 80085fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
   interface->ipv4Context.addrList[0].defaultGateway = context->peerConfig.ipAddr;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

   //Update the list of DNS servers
   interface->ipv4Context.dnsServerList[0] = context->localConfig.primaryDns;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#if (IPV4_DNS_SERVER_LIST_SIZE >= 2)
   interface->ipv4Context.dnsServerList[1] = context->localConfig.secondaryDns;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif

   //All the outgoing traffic will be routed to the other end of the link
   interface->ipv4Context.addrList[0].subnetMask = IPCP_DEFAULT_SUBNET_MASK;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800862c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //Link is up
   interface->linkState = TRUE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	67da      	str	r2, [r3, #124]	; 0x7c

   //Disable interrupts
   interface->nicDriver->disableIrq(interface);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	4798      	blx	r3
   //Process link state change event
   nicNotifyLinkChange(interface);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7fa f98d 	bl	8002960 <nicNotifyLinkChange>
   //Re-enable interrupts
   interface->nicDriver->enableIrq(interface);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	4798      	blx	r3
}
 8008650:	bf00      	nop
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	bd90      	pop	{r4, r7, pc}
 8008658:	20000058 	.word	0x20000058
 800865c:	08019954 	.word	0x08019954
 8008660:	08019974 	.word	0x08019974
 8008664:	0801998c 	.word	0x0801998c
 8008668:	080199a4 	.word	0x080199a4
 800866c:	080199bc 	.word	0x080199bc

08008670 <ipcpThisLayerDown>:
 * @brief This-Layer-Down callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerDown(PppContext *context)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Debug message
   TRACE_INFO("IPCP This-Layer-Down callback\r\n");
 8008678:	f7f7 ffd7 	bl	800062a <osSuspendAllTasks>
 800867c:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <ipcpThisLayerDown+0x50>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	221f      	movs	r2, #31
 8008684:	2101      	movs	r1, #1
 8008686:	480f      	ldr	r0, [pc, #60]	; (80086c4 <ipcpThisLayerDown+0x54>)
 8008688:	f00f fdbc 	bl	8018204 <fwrite>
 800868c:	f7f7 ffd8 	bl	8000640 <osResumeAllTasks>

   //Point to the underlying interface
   interface = context->interface;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	60fb      	str	r3, [r7, #12]

   //Link is up
   interface->linkState = FALSE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	67da      	str	r2, [r3, #124]	; 0x7c

   //Disable interrupts
   interface->nicDriver->disableIrq(interface);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	4798      	blx	r3
   //Process link state change event
   nicNotifyLinkChange(interface);
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7fa f95a 	bl	8002960 <nicNotifyLinkChange>
   //Re-enable interrupts
   interface->nicDriver->enableIrq(interface);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	4798      	blx	r3
}
 80086b6:	bf00      	nop
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000058 	.word	0x20000058
 80086c4:	080199d4 	.word	0x080199d4

080086c8 <ipcpThisLayerStarted>:
 * @brief This-Layer-Started callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerStarted(PppContext *context)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("IPCP This-Layer-Started callback\r\n");
 80086d0:	f7f7 ffab 	bl	800062a <osSuspendAllTasks>
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <ipcpThisLayerStarted+0x28>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	2222      	movs	r2, #34	; 0x22
 80086dc:	2101      	movs	r1, #1
 80086de:	4805      	ldr	r0, [pc, #20]	; (80086f4 <ipcpThisLayerStarted+0x2c>)
 80086e0:	f00f fd90 	bl	8018204 <fwrite>
 80086e4:	f7f7 ffac 	bl	8000640 <osResumeAllTasks>
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20000058 	.word	0x20000058
 80086f4:	080199f4 	.word	0x080199f4

080086f8 <ipcpThisLayerFinished>:
 * @brief This-Layer-Finished callback function
 * @param[in] context PPP context
 **/

void ipcpThisLayerFinished(PppContext *context)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("IPCP This-Layer-Finished callback\r\n");
 8008700:	f7f7 ff93 	bl	800062a <osSuspendAllTasks>
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <ipcpThisLayerFinished+0x28>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2223      	movs	r2, #35	; 0x23
 800870c:	2101      	movs	r1, #1
 800870e:	4805      	ldr	r0, [pc, #20]	; (8008724 <ipcpThisLayerFinished+0x2c>)
 8008710:	f00f fd78 	bl	8018204 <fwrite>
 8008714:	f7f7 ff94 	bl	8000640 <osResumeAllTasks>
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20000058 	.word	0x20000058
 8008724:	08019a18 	.word	0x08019a18

08008728 <ipcpInitRestartCount>:
 * @param[in] context PPP context
 * @param[in] value Restart counter value
 **/

void ipcpInitRestartCount(PppContext *context, uint_t value)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Initialize-Restart-Count callback\r\n");
 8008732:	f7f7 ff7a 	bl	800062a <osSuspendAllTasks>
 8008736:	4b09      	ldr	r3, [pc, #36]	; (800875c <ipcpInitRestartCount+0x34>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	2228      	movs	r2, #40	; 0x28
 800873e:	2101      	movs	r1, #1
 8008740:	4807      	ldr	r0, [pc, #28]	; (8008760 <ipcpInitRestartCount+0x38>)
 8008742:	f00f fd5f 	bl	8018204 <fwrite>
 8008746:	f7f7 ff7b 	bl	8000640 <osResumeAllTasks>

   //Initialize restart counter
   context->ipcpFsm.restartCounter = value;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000058 	.word	0x20000058
 8008760:	08019a3c 	.word	0x08019a3c

08008764 <ipcpZeroRestartCount>:
 * @brief Zero-Restart-Count callback function
 * @param[in] context PPP context
 **/

void ipcpZeroRestartCount(PppContext *context)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("IPCP Zero-Restart-Count callback\r\n");
 800876c:	f7f7 ff5d 	bl	800062a <osSuspendAllTasks>
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <ipcpZeroRestartCount+0x3c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	2222      	movs	r2, #34	; 0x22
 8008778:	2101      	movs	r1, #1
 800877a:	480a      	ldr	r0, [pc, #40]	; (80087a4 <ipcpZeroRestartCount+0x40>)
 800877c:	f00f fd42 	bl	8018204 <fwrite>
 8008780:	f7f7 ff5e 	bl	8000640 <osResumeAllTasks>

   //Zero restart counter
   context->ipcpFsm.restartCounter = 0;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //The receiver of a Terminate-Request should wait for the peer to
   //disconnect, and must not disconnect until at least one Restart
   //time has passed after sending a Terminate-Ack
   context->ipcpFsm.timestamp = osGetSystemTime();
 800878c:	f7f8 f807 	bl	800079e <osGetSystemTime>
 8008790:	4602      	mov	r2, r0
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000058 	.word	0x20000058
 80087a4:	08019a68 	.word	0x08019a68

080087a8 <ipcpSendConfigureReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpSendConfigureReq(PppContext *context)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppConfigurePacket *configureReqPacket;

   //Debug message
   TRACE_INFO("IPCP Send-Configure-Request callback\r\n");
 80087b0:	f7f7 ff3b 	bl	800062a <osSuspendAllTasks>
 80087b4:	4b4e      	ldr	r3, [pc, #312]	; (80088f0 <ipcpSendConfigureReq+0x148>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	2226      	movs	r2, #38	; 0x26
 80087bc:	2101      	movs	r1, #1
 80087be:	484d      	ldr	r0, [pc, #308]	; (80088f4 <ipcpSendConfigureReq+0x14c>)
 80087c0:	f00f fd20 	bl	8018204 <fwrite>
 80087c4:	f7f7 ff3c 	bl	8000640 <osResumeAllTasks>

   //Allocate a buffer memory to hold the Configure-Request packet
   buffer = pppAllocBuffer(PPP_MAX_CONF_REQ_SIZE, &offset);
 80087c8:	f107 030c 	add.w	r3, r7, #12
 80087cc:	4619      	mov	r1, r3
 80087ce:	2080      	movs	r0, #128	; 0x80
 80087d0:	f002 fa72 	bl	800acb8 <pppAllocBuffer>
 80087d4:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(buffer == NULL)
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <ipcpSendConfigureReq+0x38>
      return ERROR_OUT_OF_MEMORY;
 80087dc:	2364      	movs	r3, #100	; 0x64
 80087de:	e083      	b.n	80088e8 <ipcpSendConfigureReq+0x140>

   //Point to the Configure-Request packet
   configureReqPacket = netBufferAt(buffer, offset);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4619      	mov	r1, r3
 80087e4:	69f8      	ldr	r0, [r7, #28]
 80087e6:	f7f9 fde2 	bl	80023ae <netBufferAt>
 80087ea:	61b8      	str	r0, [r7, #24]

   //Format packet header
   configureReqPacket->code = PPP_CODE_CONFIGURE_REQ;
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	2201      	movs	r2, #1
 80087f0:	701a      	strb	r2, [r3, #0]
   configureReqPacket->identifier = ++context->ipcpFsm.identifier;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80087f8:	3301      	adds	r3, #1
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	705a      	strb	r2, [r3, #1]
   configureReqPacket->length = sizeof(PppConfigurePacket);
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	2200      	movs	r2, #0
 8008810:	f042 0204 	orr.w	r2, r2, #4
 8008814:	709a      	strb	r2, [r3, #2]
 8008816:	2200      	movs	r2, #0
 8008818:	70da      	strb	r2, [r3, #3]

   //Make sure the IP-Address option has not been previously rejected
   if(!context->localConfig.ipAddrRejected)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008820:	2b00      	cmp	r3, #0
 8008822:	d107      	bne.n	8008834 <ipcpSendConfigureReq+0x8c>
   {
      //Add option
      pppAddOption(configureReqPacket, IPCP_OPTION_IP_ADDRESS,
         &context->localConfig.ipAddr, sizeof(Ipv4Addr));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f503 7296 	add.w	r2, r3, #300	; 0x12c
      pppAddOption(configureReqPacket, IPCP_OPTION_IP_ADDRESS,
 800882a:	2304      	movs	r3, #4
 800882c:	2103      	movs	r1, #3
 800882e:	69b8      	ldr	r0, [r7, #24]
 8008830:	f003 fcb6 	bl	800c1a0 <pppAddOption>
   }

   //Make sure the Primary-DNS-Server-Address option has not been
   //previously rejected
   if(!context->localConfig.primaryDnsRejected)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800883a:	2b00      	cmp	r3, #0
 800883c:	d107      	bne.n	800884e <ipcpSendConfigureReq+0xa6>
   {
      //Add option
      pppAddOption(configureReqPacket, IPCP_OPTION_PRIMARY_DNS,
         &context->localConfig.primaryDns, sizeof(Ipv4Addr));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f503 729a 	add.w	r2, r3, #308	; 0x134
      pppAddOption(configureReqPacket, IPCP_OPTION_PRIMARY_DNS,
 8008844:	2304      	movs	r3, #4
 8008846:	2181      	movs	r1, #129	; 0x81
 8008848:	69b8      	ldr	r0, [r7, #24]
 800884a:	f003 fca9 	bl	800c1a0 <pppAddOption>
   }

   //Make sure the Secondary-DNS-Server-Address option has not been
   //previously rejected
   if(!context->localConfig.secondaryDnsRejected)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008854:	2b00      	cmp	r3, #0
 8008856:	d107      	bne.n	8008868 <ipcpSendConfigureReq+0xc0>
   {
      //Add option
      pppAddOption(configureReqPacket, IPCP_OPTION_SECONDARY_DNS,
         &context->localConfig.secondaryDns, sizeof(Ipv4Addr));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f503 729e 	add.w	r2, r3, #316	; 0x13c
      pppAddOption(configureReqPacket, IPCP_OPTION_SECONDARY_DNS,
 800885e:	2304      	movs	r3, #4
 8008860:	2183      	movs	r1, #131	; 0x83
 8008862:	69b8      	ldr	r0, [r7, #24]
 8008864:	f003 fc9c 	bl	800c1a0 <pppAddOption>
   }

   //Save packet length
   length = configureReqPacket->length;
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	885b      	ldrh	r3, [r3, #2]
 800886c:	b29b      	uxth	r3, r3
 800886e:	617b      	str	r3, [r7, #20]
   //Convert length field to network byte order
   configureReqPacket->length = htons(length);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	b29b      	uxth	r3, r3
 8008874:	4618      	mov	r0, r3
 8008876:	f7f7 fe93 	bl	80005a0 <swapInt16>
 800887a:	4603      	mov	r3, r0
 800887c:	461a      	mov	r2, r3
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	805a      	strh	r2, [r3, #2]

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	4413      	add	r3, r2
 8008888:	4619      	mov	r1, r3
 800888a:	69f8      	ldr	r0, [r7, #28]
 800888c:	f7f9 fce9 	bl	8002262 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending Configure-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 8008890:	f7f7 fecb 	bl	800062a <osSuspendAllTasks>
 8008894:	4b16      	ldr	r3, [pc, #88]	; (80088f0 <ipcpSendConfigureReq+0x148>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	4916      	ldr	r1, [pc, #88]	; (80088f8 <ipcpSendConfigureReq+0x150>)
 800889e:	4618      	mov	r0, r3
 80088a0:	f00f fc50 	bl	8018144 <fiprintf>
 80088a4:	f7f7 fecc 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) configureReqPacket, length, PPP_PROTOCOL_IPCP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_IPCP);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6998      	ldr	r0, [r3, #24]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	f248 0321 	movw	r3, #32801	; 0x8021
 80088b2:	69f9      	ldr	r1, [r7, #28]
 80088b4:	f002 f88a 	bl	800a9cc <pppSendFrame>
 80088b8:	4603      	mov	r3, r0
 80088ba:	827b      	strh	r3, [r7, #18]

   //The restart counter is decremented each time a Configure-Request is sent
   if(context->ipcpFsm.restartCounter > 0)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d006      	beq.n	80088d4 <ipcpSendConfigureReq+0x12c>
      context->ipcpFsm.restartCounter--;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80088cc:	1e5a      	subs	r2, r3, #1
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //Save the time at which the packet was sent
   context->ipcpFsm.timestamp = osGetSystemTime();
 80088d4:	f7f7 ff63 	bl	800079e <osGetSystemTime>
 80088d8:	4602      	mov	r2, r0
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

   //Free previously allocated memory block
   netBufferFree(buffer);
 80088e0:	69f8      	ldr	r0, [r7, #28]
 80088e2:	f7f9 fc8d 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 80088e6:	8a7b      	ldrh	r3, [r7, #18]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3720      	adds	r7, #32
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20000058 	.word	0x20000058
 80088f4:	08019a8c 	.word	0x08019a8c
 80088f8:	08019ab4 	.word	0x08019ab4

080088fc <ipcpSendConfigureAck>:
 * @return Error code
 **/

error_t ipcpSendConfigureAck(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Configure-Ack callback\r\n");
 8008906:	f7f7 fe90 	bl	800062a <osSuspendAllTasks>
 800890a:	4b0b      	ldr	r3, [pc, #44]	; (8008938 <ipcpSendConfigureAck+0x3c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2222      	movs	r2, #34	; 0x22
 8008912:	2101      	movs	r1, #1
 8008914:	4809      	ldr	r0, [pc, #36]	; (800893c <ipcpSendConfigureAck+0x40>)
 8008916:	f00f fc75 	bl	8018204 <fwrite>
 800891a:	f7f7 fe91 	bl	8000640 <osResumeAllTasks>

   //Send Configure-Ack packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 800891e:	2302      	movs	r3, #2
 8008920:	f248 0221 	movw	r2, #32801	; 0x8021
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f003 f982 	bl	800bc30 <pppSendConfigureAckNak>
 800892c:	4603      	mov	r3, r0
      PPP_PROTOCOL_IPCP, PPP_CODE_CONFIGURE_ACK);
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000058 	.word	0x20000058
 800893c:	08019ae8 	.word	0x08019ae8

08008940 <ipcpSendConfigureNak>:
 * @return Error code
 **/

error_t ipcpSendConfigureNak(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Configure-Nak callback\r\n");
 800894a:	f7f7 fe6e 	bl	800062a <osSuspendAllTasks>
 800894e:	4b0b      	ldr	r3, [pc, #44]	; (800897c <ipcpSendConfigureNak+0x3c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	2222      	movs	r2, #34	; 0x22
 8008956:	2101      	movs	r1, #1
 8008958:	4809      	ldr	r0, [pc, #36]	; (8008980 <ipcpSendConfigureNak+0x40>)
 800895a:	f00f fc53 	bl	8018204 <fwrite>
 800895e:	f7f7 fe6f 	bl	8000640 <osResumeAllTasks>

   //Send Configure-Nak packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 8008962:	2303      	movs	r3, #3
 8008964:	f248 0221 	movw	r2, #32801	; 0x8021
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f003 f960 	bl	800bc30 <pppSendConfigureAckNak>
 8008970:	4603      	mov	r3, r0
      PPP_PROTOCOL_IPCP, PPP_CODE_CONFIGURE_NAK);
}
 8008972:	4618      	mov	r0, r3
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20000058 	.word	0x20000058
 8008980:	08019b0c 	.word	0x08019b0c

08008984 <ipcpSendConfigureRej>:
 * @return Error code
 **/

error_t ipcpSendConfigureRej(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Configure-Reject callback\r\n");
 800898e:	f7f7 fe4c 	bl	800062a <osSuspendAllTasks>
 8008992:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <ipcpSendConfigureRej+0x3c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2225      	movs	r2, #37	; 0x25
 800899a:	2101      	movs	r1, #1
 800899c:	4809      	ldr	r0, [pc, #36]	; (80089c4 <ipcpSendConfigureRej+0x40>)
 800899e:	f00f fc31 	bl	8018204 <fwrite>
 80089a2:	f7f7 fe4d 	bl	8000640 <osResumeAllTasks>

   //Send Configure-Reject packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 80089a6:	2304      	movs	r3, #4
 80089a8:	f248 0221 	movw	r2, #32801	; 0x8021
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f003 f93e 	bl	800bc30 <pppSendConfigureAckNak>
 80089b4:	4603      	mov	r3, r0
      PPP_PROTOCOL_IPCP, PPP_CODE_CONFIGURE_REJ);
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000058 	.word	0x20000058
 80089c4:	08019b30 	.word	0x08019b30

080089c8 <ipcpSendTerminateReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t ipcpSendTerminateReq(PppContext *context)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
   error_t error;

   //Debug message
   TRACE_INFO("IPCP Send-Terminate-Request callback\r\n");
 80089d0:	f7f7 fe2b 	bl	800062a <osSuspendAllTasks>
 80089d4:	4b19      	ldr	r3, [pc, #100]	; (8008a3c <ipcpSendTerminateReq+0x74>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	2226      	movs	r2, #38	; 0x26
 80089dc:	2101      	movs	r1, #1
 80089de:	4818      	ldr	r0, [pc, #96]	; (8008a40 <ipcpSendTerminateReq+0x78>)
 80089e0:	f00f fc10 	bl	8018204 <fwrite>
 80089e4:	f7f7 fe2c 	bl	8000640 <osResumeAllTasks>

   //On transmission, the Identifier field must be changed
   context->ipcpFsm.identifier++;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80089ee:	3301      	adds	r3, #1
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

   //Send Terminate-Request packet
   error = pppSendTerminateReq(context, context->ipcpFsm.identifier, PPP_PROTOCOL_IPCP);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80089fe:	f248 0221 	movw	r2, #32801	; 0x8021
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f003 f9e7 	bl	800bdd8 <pppSendTerminateReq>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	81fb      	strh	r3, [r7, #14]

   //The restart counter is decremented each time a Terminate-Request is sent
   if(context->ipcpFsm.restartCounter > 0)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d006      	beq.n	8008a26 <ipcpSendTerminateReq+0x5e>
      context->ipcpFsm.restartCounter--;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a1e:	1e5a      	subs	r2, r3, #1
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

   //Save the time at which the packet was sent
   context->ipcpFsm.timestamp = osGetSystemTime();
 8008a26:	f7f7 feba 	bl	800079e <osGetSystemTime>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

   //Return status code
   return error;
 8008a32:	89fb      	ldrh	r3, [r7, #14]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20000058 	.word	0x20000058
 8008a40:	08019b58 	.word	0x08019b58

08008a44 <ipcpSendTerminateAck>:
 * @return Error code
 **/

error_t ipcpSendTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
   uint8_t identifier;

   //Debug message
   TRACE_INFO("IPCP Send-Terminate-Ack callback\r\n");
 8008a4e:	f7f7 fdec 	bl	800062a <osSuspendAllTasks>
 8008a52:	4b14      	ldr	r3, [pc, #80]	; (8008aa4 <ipcpSendTerminateAck+0x60>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	2222      	movs	r2, #34	; 0x22
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	4812      	ldr	r0, [pc, #72]	; (8008aa8 <ipcpSendTerminateAck+0x64>)
 8008a5e:	f00f fbd1 	bl	8018204 <fwrite>
 8008a62:	f7f7 fded 	bl	8000640 <osResumeAllTasks>

   //Check whether this Terminate-Ack acknowledges the reception of a
   //Terminate-Request packet
   if(terminateReqPacket != NULL)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d003      	beq.n	8008a74 <ipcpSendTerminateAck+0x30>
   {
      //The Identifier field of the Terminate-Request is copied into the
      //Identifier field of the Terminate-Ack packet
      identifier = terminateReqPacket->identifier;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	73fb      	strb	r3, [r7, #15]
 8008a72:	e00b      	b.n	8008a8c <ipcpSendTerminateAck+0x48>
   }
   else
   {
      //This Terminate-Ack packet serves to synchronize the automatons
      identifier = ++context->ipcpFsm.identifier;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008a8a:	73fb      	strb	r3, [r7, #15]
   }

   //Send Terminate-Ack packet
   return pppSendTerminateAck(context, identifier, PPP_PROTOCOL_IPCP);
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	f248 0221 	movw	r2, #32801	; 0x8021
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f003 f9eb 	bl	800be70 <pppSendTerminateAck>
 8008a9a:	4603      	mov	r3, r0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20000058 	.word	0x20000058
 8008aa8:	08019b80 	.word	0x08019b80

08008aac <ipcpSendCodeRej>:
 * @param[in] packet Un-interpretable packet received from the peer
 * @return Error code
 **/

error_t ipcpSendCodeRej(PppContext *context, const PppPacket *packet)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("IPCP Send-Code-Reject callback\r\n");
 8008ab6:	f7f7 fdb8 	bl	800062a <osSuspendAllTasks>
 8008aba:	4b10      	ldr	r3, [pc, #64]	; (8008afc <ipcpSendCodeRej+0x50>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	480e      	ldr	r0, [pc, #56]	; (8008b00 <ipcpSendCodeRej+0x54>)
 8008ac6:	f00f fb9d 	bl	8018204 <fwrite>
 8008aca:	f7f7 fdb9 	bl	8000640 <osResumeAllTasks>

   //The Identifier field must be changed for each Code-Reject sent
   context->ipcpFsm.identifier++;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

   //Send Code-Reject packet
   return pppSendCodeRej(context, packet, context->ipcpFsm.identifier, PPP_PROTOCOL_IPCP);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8008ae4:	f248 0321 	movw	r3, #32801	; 0x8021
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f003 fa0c 	bl	800bf08 <pppSendCodeRej>
 8008af0:	4603      	mov	r3, r0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	20000058 	.word	0x20000058
 8008b00:	08019ba4 	.word	0x08019ba4

08008b04 <ipcpParseOption>:
 * @return Error code
 **/

error_t ipcpParseOption(PppContext *context, PppOption *option,
   size_t inPacketLen, PppConfigurePacket *outPacket)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
   error_t error;

   //Malformed IPCP packet?
   if(inPacketLen < sizeof(PppOption))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d801      	bhi.n	8008b1c <ipcpParseOption+0x18>
      return ERROR_INVALID_LENGTH;
 8008b18:	23eb      	movs	r3, #235	; 0xeb
 8008b1a:	e02f      	b.n	8008b7c <ipcpParseOption+0x78>

   //Check option length
   if(option->length < sizeof(PppOption))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d801      	bhi.n	8008b28 <ipcpParseOption+0x24>
      return ERROR_INVALID_LENGTH;
 8008b24:	23eb      	movs	r3, #235	; 0xeb
 8008b26:	e029      	b.n	8008b7c <ipcpParseOption+0x78>
   if(option->length > inPacketLen)
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	785b      	ldrb	r3, [r3, #1]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d201      	bcs.n	8008b38 <ipcpParseOption+0x34>
      return ERROR_INVALID_LENGTH;
 8008b34:	23eb      	movs	r3, #235	; 0xeb
 8008b36:	e021      	b.n	8008b7c <ipcpParseOption+0x78>

   //Check option type
   switch(option->type)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d107      	bne.n	8008b50 <ipcpParseOption+0x4c>
   {
   case IPCP_OPTION_IP_ADDRESS:
      //Check IP-Address option
      error = ipcpParseIpAddressOption(context, (IpcpIpAddressOption *) option, outPacket);
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	68b9      	ldr	r1, [r7, #8]
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 f81d 	bl	8008b84 <ipcpParseIpAddressOption>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	82fb      	strh	r3, [r7, #22]
      break;
 8008b4e:	e014      	b.n	8008b7a <ipcpParseOption+0x76>
   default:
      //If some configuration options received in the Configure-Request are not
      //recognizable or not acceptable for negotiation, then the implementation
      //must transmit a Configure-Reject
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_REJ)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00e      	beq.n	8008b74 <ipcpParseOption+0x70>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d10a      	bne.n	8008b74 <ipcpParseOption+0x70>
      {
         //The options field of the Configure-Reject packet is filled
         //with the unrecognized options from the Configure-Request
         pppAddOption(outPacket, option->type, option->data,
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	7819      	ldrb	r1, [r3, #0]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, option->type, option->data,
 8008b6a:	3b02      	subs	r3, #2
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	6838      	ldr	r0, [r7, #0]
 8008b70:	f003 fb16 	bl	800c1a0 <pppAddOption>
      }

      //The option is not acceptable for negotiation
      error = ERROR_INVALID_TYPE;
 8008b74:	23ef      	movs	r3, #239	; 0xef
 8008b76:	82fb      	strh	r3, [r7, #22]
      break;
 8008b78:	bf00      	nop
   }

   //Return status code
   return error;
 8008b7a:	8afb      	ldrh	r3, [r7, #22]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <ipcpParseIpAddressOption>:
 * @return Error code
 **/

error_t ipcpParseIpAddressOption(PppContext *context,
   IpcpIpAddressOption *option, PppConfigurePacket *outPacket)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(IpcpIpAddressOption))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	785b      	ldrb	r3, [r3, #1]
 8008b94:	2b06      	cmp	r3, #6
 8008b96:	d130      	bne.n	8008bfa <ipcpParseIpAddressOption+0x76>
   {
      //Check whether the option value is acceptable
      if(option->ipAddr != IPV4_UNSPECIFIED_ADDR)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d019      	beq.n	8008bd6 <ipcpParseIpAddressOption+0x52>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d013      	beq.n	8008bd0 <ipcpParseIpAddressOption+0x4c>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d10f      	bne.n	8008bd0 <ipcpParseIpAddressOption+0x4c>
         {
            //Save IP address
            context->peerConfig.ipAddr = option->ipAddr;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
               (void *) &option->ipAddr, option->length - sizeof(PppOption));
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	1c9a      	adds	r2, r3, #2
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
 8008bc4:	3b02      	subs	r3, #2
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2103      	movs	r1, #3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f003 fae8 	bl	800c1a0 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	82fb      	strh	r3, [r7, #22]
 8008bd4:	e013      	b.n	8008bfe <ipcpParseIpAddressOption+0x7a>
      }
      else
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <ipcpParseIpAddressOption+0x70>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d107      	bne.n	8008bf4 <ipcpParseIpAddressOption+0x70>
         {
            //The option must be modified to a value acceptable to the
            //Configure-Nak sender
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
               &context->peerConfig.ipAddr, sizeof(Ipv4Addr));
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f503 72ba 	add.w	r2, r3, #372	; 0x174
            pppAddOption(outPacket, IPCP_OPTION_IP_ADDRESS,
 8008bea:	2304      	movs	r3, #4
 8008bec:	2103      	movs	r1, #3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f003 fad6 	bl	800c1a0 <pppAddOption>
         }

         //The value is not acceptable
         error = ERROR_INVALID_VALUE;
 8008bf4:	23f0      	movs	r3, #240	; 0xf0
 8008bf6:	82fb      	strh	r3, [r7, #22]
 8008bf8:	e001      	b.n	8008bfe <ipcpParseIpAddressOption+0x7a>
      }
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 8008bfa:	23eb      	movs	r3, #235	; 0xeb
 8008bfc:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8008bfe:	8afb      	ldrh	r3, [r7, #22]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <lcpClose>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpClose(PppContext *context)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nLCP Close event\r\n");
 8008c10:	f7f7 fd0b 	bl	800062a <osSuspendAllTasks>
 8008c14:	4b0a      	ldr	r3, [pc, #40]	; (8008c40 <lcpClose+0x38>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	2213      	movs	r2, #19
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	4809      	ldr	r0, [pc, #36]	; (8008c44 <lcpClose+0x3c>)
 8008c20:	f00f faf0 	bl	8018204 <fwrite>
 8008c24:	f7f7 fd0c 	bl	8000640 <osResumeAllTasks>

   //The link is no longer available for traffic
   pppCloseEvent(context, &context->lcpFsm, &lcpCallbacks);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	338c      	adds	r3, #140	; 0x8c
 8008c2c:	4a06      	ldr	r2, [pc, #24]	; (8008c48 <lcpClose+0x40>)
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f002 f905 	bl	800ae40 <pppCloseEvent>

   //Successful processing
   return NO_ERROR;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	20000058 	.word	0x20000058
 8008c44:	08019bdc 	.word	0x08019bdc
 8008c48:	0801a574 	.word	0x0801a574

08008c4c <lcpTick>:
 *
 * @param[in] context PPP context
 **/

void lcpTick(PppContext *context)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->lcpFsm.state >= PPP_STATE_4_CLOSING &&
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d923      	bls.n	8008ca6 <lcpTick+0x5a>
      context->lcpFsm.state <= PPP_STATE_8_ACK_SENT)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   if(context->lcpFsm.state >= PPP_STATE_4_CLOSING &&
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d81e      	bhi.n	8008ca6 <lcpTick+0x5a>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 8008c68:	f7f7 fd99 	bl	800079e <osGetSystemTime>
 8008c6c:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->lcpFsm.timestamp) >= PPP_RESTART_TIMER)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d912      	bls.n	8008ca6 <lcpTick+0x5a>
      {
         //Debug message
         TRACE_INFO("\r\nLCP Timeout event\r\n");
 8008c80:	f7f7 fcd3 	bl	800062a <osSuspendAllTasks>
 8008c84:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <lcpTick+0x64>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	2215      	movs	r2, #21
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	4809      	ldr	r0, [pc, #36]	; (8008cb4 <lcpTick+0x68>)
 8008c90:	f00f fab8 	bl	8018204 <fwrite>
 8008c94:	f7f7 fcd4 	bl	8000640 <osResumeAllTasks>

         //The restart timer is used to retransmit Configure-Request
         //and Terminate-Request packets
         pppTimeoutEvent(context, &context->lcpFsm, &lcpCallbacks);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	338c      	adds	r3, #140	; 0x8c
 8008c9c:	4a06      	ldr	r2, [pc, #24]	; (8008cb8 <lcpTick+0x6c>)
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f002 f927 	bl	800aef4 <pppTimeoutEvent>
      }
   }
}
 8008ca6:	bf00      	nop
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000058 	.word	0x20000058
 8008cb4:	08019bf0 	.word	0x08019bf0
 8008cb8:	0801a574 	.word	0x0801a574

08008cbc <lcpProcessPacket>:
 * @param[in] packet LCP packet received from the peer
 * @param[in] length Length of the packet, in bytes
 **/

void lcpProcessPacket(PppContext *context, const PppPacket *packet, size_t length)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming LCP packet is valid
   if(length < sizeof(PppPacket))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	f240 8083 	bls.w	8008dd6 <lcpProcessPacket+0x11a>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	885b      	ldrh	r3, [r3, #2]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7f7 fc62 	bl	80005a0 <swapInt16>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d379      	bcc.n	8008dda <lcpProcessPacket+0x11e>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7f7 fc57 	bl	80005a0 <swapInt16>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d972      	bls.n	8008dde <lcpProcessPacket+0x122>
      return;

   //Save the length of the LCP packet
   length = ntohs(packet->length);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	885b      	ldrh	r3, [r3, #2]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7f7 fc4e 	bl	80005a0 <swapInt16>
 8008d04:	4603      	mov	r3, r0
 8008d06:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("LCP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 8008d08:	f7f7 fc8f 	bl	800062a <osSuspendAllTasks>
 8008d0c:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <lcpProcessPacket+0x12c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4935      	ldr	r1, [pc, #212]	; (8008dec <lcpProcessPacket+0x130>)
 8008d16:	4618      	mov	r0, r3
 8008d18:	f00f fa14 	bl	8018144 <fiprintf>
 8008d1c:	f7f7 fc90 	bl	8000640 <osResumeAllTasks>
   //Dump LCP packet contents for debugging purpose
   pppDumpPacket(packet, length, PPP_PROTOCOL_LCP);

   //Check LCP code field
   switch(packet->code)
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	2b0a      	cmp	r3, #10
 8008d28:	d84f      	bhi.n	8008dca <lcpProcessPacket+0x10e>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <lcpProcessPacket+0x74>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d5d 	.word	0x08008d5d
 8008d34:	08008d67 	.word	0x08008d67
 8008d38:	08008d71 	.word	0x08008d71
 8008d3c:	08008d7b 	.word	0x08008d7b
 8008d40:	08008d85 	.word	0x08008d85
 8008d44:	08008d8f 	.word	0x08008d8f
 8008d48:	08008d99 	.word	0x08008d99
 8008d4c:	08008da3 	.word	0x08008da3
 8008d50:	08008dad 	.word	0x08008dad
 8008d54:	08008db7 	.word	0x08008db7
 8008d58:	08008dc1 	.word	0x08008dc1
   {
   //Configure-Request packet?
   case PPP_CODE_CONFIGURE_REQ:
      //Process Configure-Request packet
      lcpProcessConfigureReq(context, (PppConfigurePacket *) packet);
 8008d5c:	68b9      	ldr	r1, [r7, #8]
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 f846 	bl	8008df0 <lcpProcessConfigureReq>
      break;
 8008d64:	e03c      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Configure-Ack packet?
   case PPP_CODE_CONFIGURE_ACK:
      //Process Configure-Ack packet
      lcpProcessConfigureAck(context, (PppConfigurePacket *) packet);
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 f8c5 	bl	8008ef8 <lcpProcessConfigureAck>
      break;
 8008d6e:	e037      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Configure-Nak packet?
   case PPP_CODE_CONFIGURE_NAK:
      //Process Configure-Nak packet
      lcpProcessConfigureNak(context, (PppConfigurePacket *) packet);
 8008d70:	68b9      	ldr	r1, [r7, #8]
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 f8ec 	bl	8008f50 <lcpProcessConfigureNak>
      break;
 8008d78:	e032      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Configure-Reject packet?
   case PPP_CODE_CONFIGURE_REJ:
      //Process Configure-Reject packet
      lcpProcessConfigureReject(context, (PppConfigurePacket *) packet);
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f9cb 	bl	8009118 <lcpProcessConfigureReject>
      break;
 8008d82:	e02d      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Terminate-Request packet?
   case PPP_CODE_TERMINATE_REQ:
      //Process Terminate-Request packet
      lcpProcessTerminateReq(context, (PppTerminatePacket *) packet);
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fa6c 	bl	8009264 <lcpProcessTerminateReq>
      break;
 8008d8c:	e028      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Terminate-Ack packet?
   case PPP_CODE_TERMINATE_ACK:
      //Process Terminate-Ack packet
      lcpProcessTerminateAck(context, (PppTerminatePacket *) packet);
 8008d8e:	68b9      	ldr	r1, [r7, #8]
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fa8b 	bl	80092ac <lcpProcessTerminateAck>
      break;
 8008d96:	e023      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Code-Reject packet?
   case PPP_CODE_CODE_REJ:
      //Process Code-Reject packet
      lcpProcessCodeRej(context, (PppCodeRejPacket *) packet);
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 faaa 	bl	80092f4 <lcpProcessCodeRej>
      break;
 8008da0:	e01e      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Protocol-Reject packet?
   case PPP_CODE_PROTOCOL_REJ:
      //Process Protocol-Reject packet
      lcpProcessProtocolRej(context, (PppProtocolRejPacket *) packet);
 8008da2:	68b9      	ldr	r1, [r7, #8]
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 faeb 	bl	8009380 <lcpProcessProtocolRej>
      break;
 8008daa:	e019      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Echo-Request packet?
   case PPP_CODE_ECHO_REQ:
      //Process Echo-Request packet
      lcpProcessEchoReq(context, (PppEchoPacket *) packet);
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 fb52 	bl	8009458 <lcpProcessEchoReq>
      break;
 8008db4:	e014      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Echo-Reply packet?
   case PPP_CODE_ECHO_REP:
      //Process Echo-Reply packet
      lcpProcessEchoRep(context, (PppEchoPacket *) packet);
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 fb71 	bl	80094a0 <lcpProcessEchoRep>
      break;
 8008dbe:	e00f      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Discard-Request packet?
   case PPP_CODE_DISCARD_REQ:
      //Process Discard-Request packet
      lcpProcessDiscardReq(context, (PppDiscardReqPacket *) packet);
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 fb86 	bl	80094d4 <lcpProcessDiscardReq>
      break;
 8008dc8:	e00a      	b.n	8008de0 <lcpProcessPacket+0x124>
   //Unknown code field
   default:
      //The packet is un-interpretable
      lcpProcessUnknownCode(context, packet);
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 fb9b 	bl	8009508 <lcpProcessUnknownCode>
      break;
 8008dd2:	bf00      	nop
 8008dd4:	e004      	b.n	8008de0 <lcpProcessPacket+0x124>
      return;
 8008dd6:	bf00      	nop
 8008dd8:	e002      	b.n	8008de0 <lcpProcessPacket+0x124>
      return;
 8008dda:	bf00      	nop
 8008ddc:	e000      	b.n	8008de0 <lcpProcessPacket+0x124>
      return;
 8008dde:	bf00      	nop
   }
}
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	20000058 	.word	0x20000058
 8008dec:	08019c08 	.word	0x08019c08

08008df0 <lcpProcessConfigureReq>:
 * @return Error code
 **/

error_t lcpProcessConfigureReq(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08a      	sub	sp, #40	; 0x28
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
   bool_t notRecognizable;
   bool_t notAcceptable;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Configure-Request event\r\n");
 8008dfa:	f7f7 fc16 	bl	800062a <osSuspendAllTasks>
 8008dfe:	4b3b      	ldr	r3, [pc, #236]	; (8008eec <lcpProcessConfigureReq+0xfc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	2227      	movs	r2, #39	; 0x27
 8008e06:	2101      	movs	r1, #1
 8008e08:	4839      	ldr	r0, [pc, #228]	; (8008ef0 <lcpProcessConfigureReq+0x100>)
 8008e0a:	f00f f9fb 	bl	8018204 <fwrite>
 8008e0e:	f7f7 fc17 	bl	8000640 <osResumeAllTasks>

   //Initialize variables
   error = NO_ERROR;
 8008e12:	2300      	movs	r3, #0
 8008e14:	83fb      	strh	r3, [r7, #30]
   notRecognizable = FALSE;
 8008e16:	2300      	movs	r3, #0
 8008e18:	617b      	str	r3, [r7, #20]
   notAcceptable = FALSE;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	613b      	str	r3, [r7, #16]

   //Retrieve the length of the option list
   length = ntohs(configureReqPacket->length) - sizeof(PppConfigurePacket);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	885b      	ldrh	r3, [r3, #2]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7f7 fbbb 	bl	80005a0 <swapInt16>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	3b04      	subs	r3, #4
 8008e2e:	61bb      	str	r3, [r7, #24]
   //Point to the first option
   option = (PppOption *) configureReqPacket->options;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	3304      	adds	r3, #4
 8008e34:	60fb      	str	r3, [r7, #12]

   //Parse configuration options
   while(length > 0)
 8008e36:	e026      	b.n	8008e86 <lcpProcessConfigureReq+0x96>
   {
      //Parse current option
      error = lcpParseOption(context, option, length, NULL);
 8008e38:	2300      	movs	r3, #0
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	68f9      	ldr	r1, [r7, #12]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fef2 	bl	8009c28 <lcpParseOption>
 8008e44:	4603      	mov	r3, r0
 8008e46:	83fb      	strh	r3, [r7, #30]

      //Any error to report?
      if(error == ERROR_INVALID_TYPE)
 8008e48:	8bfb      	ldrh	r3, [r7, #30]
 8008e4a:	2bef      	cmp	r3, #239	; 0xef
 8008e4c:	d104      	bne.n	8008e58 <lcpProcessConfigureReq+0x68>
      {
         //Option not recognizable
         notRecognizable = TRUE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	617b      	str	r3, [r7, #20]
         //Catch error
         error = NO_ERROR;
 8008e52:	2300      	movs	r3, #0
 8008e54:	83fb      	strh	r3, [r7, #30]
 8008e56:	e00a      	b.n	8008e6e <lcpProcessConfigureReq+0x7e>
      }
      else if(error == ERROR_INVALID_VALUE)
 8008e58:	8bfb      	ldrh	r3, [r7, #30]
 8008e5a:	2bf0      	cmp	r3, #240	; 0xf0
 8008e5c:	d104      	bne.n	8008e68 <lcpProcessConfigureReq+0x78>
      {
         //Option not acceptable for configuration
         notAcceptable = TRUE;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	613b      	str	r3, [r7, #16]
         //Catch error
         error = NO_ERROR;
 8008e62:	2300      	movs	r3, #0
 8008e64:	83fb      	strh	r3, [r7, #30]
 8008e66:	e002      	b.n	8008e6e <lcpProcessConfigureReq+0x7e>
      }
      else if(error)
 8008e68:	8bfb      	ldrh	r3, [r7, #30]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10f      	bne.n	8008e8e <lcpProcessConfigureReq+0x9e>
         //Malformed Configure-Request packet
         break;
      }

      //Remaining bytes to process
      length -= option->length;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	461a      	mov	r2, r3
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	61bb      	str	r3, [r7, #24]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]
   while(length > 0)
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1d5      	bne.n	8008e38 <lcpProcessConfigureReq+0x48>
 8008e8c:	e000      	b.n	8008e90 <lcpProcessConfigureReq+0xa0>
         break;
 8008e8e:	bf00      	nop
   }

   //Valid Configure-Request packet received from the peer?
   if(!error)
 8008e90:	8bfb      	ldrh	r3, [r7, #30]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d125      	bne.n	8008ee2 <lcpProcessConfigureReq+0xf2>
   {
      //Check flags
      if(notRecognizable)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <lcpProcessConfigureReq+0xc2>
      {
         //If some configuration options received in the Configure-Request are not
         //recognizable or not acceptable for negotiation, then the implementation
         //must transmit a Configure-Reject
         pppRcvConfigureReqEvent(context, &context->lcpFsm, &lcpCallbacks,
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8008ea2:	2304      	movs	r3, #4
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	4a12      	ldr	r2, [pc, #72]	; (8008ef4 <lcpProcessConfigureReq+0x104>)
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f002 f874 	bl	800af98 <pppRcvConfigureReqEvent>
 8008eb0:	e017      	b.n	8008ee2 <lcpProcessConfigureReq+0xf2>
            configureReqPacket, PPP_CODE_CONFIGURE_REJ);
      }
      else if(notAcceptable)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00a      	beq.n	8008ece <lcpProcessConfigureReq+0xde>
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         pppRcvConfigureReqEvent(context, &context->lcpFsm, &lcpCallbacks,
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	4a0b      	ldr	r2, [pc, #44]	; (8008ef4 <lcpProcessConfigureReq+0x104>)
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f002 f866 	bl	800af98 <pppRcvConfigureReqEvent>
 8008ecc:	e009      	b.n	8008ee2 <lcpProcessConfigureReq+0xf2>
      else
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         pppRcvConfigureReqEvent(context, &context->lcpFsm, &lcpCallbacks,
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	4a06      	ldr	r2, [pc, #24]	; (8008ef4 <lcpProcessConfigureReq+0x104>)
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f002 f85b 	bl	800af98 <pppRcvConfigureReqEvent>
            configureReqPacket, PPP_CODE_CONFIGURE_ACK);
      }
   }

   //Return status code
   return error;
 8008ee2:	8bfb      	ldrh	r3, [r7, #30]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	20000058 	.word	0x20000058
 8008ef0:	08019c2c 	.word	0x08019c2c
 8008ef4:	0801a574 	.word	0x0801a574

08008ef8 <lcpProcessConfigureAck>:
 * @return Error code
 **/

error_t lcpProcessConfigureAck(PppContext *context,
   const PppConfigurePacket *configureAckPacket)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Configure-Ack event\r\n");
 8008f02:	f7f7 fb92 	bl	800062a <osSuspendAllTasks>
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <lcpProcessConfigureAck+0x4c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	2223      	movs	r2, #35	; 0x23
 8008f0e:	2101      	movs	r1, #1
 8008f10:	480d      	ldr	r0, [pc, #52]	; (8008f48 <lcpProcessConfigureAck+0x50>)
 8008f12:	f00f f977 	bl	8018204 <fwrite>
 8008f16:	f7f7 fb93 	bl	8000640 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureAckPacket->identifier != context->lcpFsm.identifier)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	785a      	ldrb	r2, [r3, #1]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d001      	beq.n	8008f2c <lcpProcessConfigureAck+0x34>
      return ERROR_WRONG_IDENTIFIER;
 8008f28:	23d6      	movs	r3, #214	; 0xd6
 8008f2a:	e007      	b.n	8008f3c <lcpProcessConfigureAck+0x44>

   //A valid Configure-Ack packet has been received from the peer
   pppRcvConfigureAckEvent(context, &context->lcpFsm, &lcpCallbacks);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	338c      	adds	r3, #140	; 0x8c
 8008f30:	4a06      	ldr	r2, [pc, #24]	; (8008f4c <lcpProcessConfigureAck+0x54>)
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f002 f955 	bl	800b1e4 <pppRcvConfigureAckEvent>

   //Successful processing
   return NO_ERROR;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	20000058 	.word	0x20000058
 8008f48:	08019c54 	.word	0x08019c54
 8008f4c:	0801a574 	.word	0x0801a574

08008f50 <lcpProcessConfigureNak>:
 * @return Error code
 **/

error_t lcpProcessConfigureNak(PppContext *context,
   const PppConfigurePacket *configureNakPacket)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("LCP Receive-Configure-Nak event\r\n");
 8008f5a:	f7f7 fb66 	bl	800062a <osSuspendAllTasks>
 8008f5e:	4b6b      	ldr	r3, [pc, #428]	; (800910c <lcpProcessConfigureNak+0x1bc>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	2221      	movs	r2, #33	; 0x21
 8008f66:	2101      	movs	r1, #1
 8008f68:	4869      	ldr	r0, [pc, #420]	; (8009110 <lcpProcessConfigureNak+0x1c0>)
 8008f6a:	f00f f94b 	bl	8018204 <fwrite>
 8008f6e:	f7f7 fb67 	bl	8000640 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureNakPacket->identifier != context->lcpFsm.identifier)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	785a      	ldrb	r2, [r3, #1]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d001      	beq.n	8008f84 <lcpProcessConfigureNak+0x34>
      return ERROR_WRONG_IDENTIFIER;
 8008f80:	23d6      	movs	r3, #214	; 0xd6
 8008f82:	e0be      	b.n	8009102 <lcpProcessConfigureNak+0x1b2>

   //Retrieve the length of the option list
   length = ntohs(configureNakPacket->length) - sizeof(PppConfigurePacket);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	885b      	ldrh	r3, [r3, #2]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7f7 fb08 	bl	80005a0 <swapInt16>
 8008f90:	4603      	mov	r3, r0
 8008f92:	3b04      	subs	r3, #4
 8008f94:	61fb      	str	r3, [r7, #28]
   //Point to the first option
   option = (PppOption *) configureNakPacket->options;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	61bb      	str	r3, [r7, #24]

   //Parse configuration options
   while(length > 0)
 8008f9c:	e0a5      	b.n	80090ea <lcpProcessConfigureNak+0x19a>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	785b      	ldrb	r3, [r3, #1]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d801      	bhi.n	8008faa <lcpProcessConfigureNak+0x5a>
         return ERROR_INVALID_LENGTH;
 8008fa6:	23eb      	movs	r3, #235	; 0xeb
 8008fa8:	e0ab      	b.n	8009102 <lcpProcessConfigureNak+0x1b2>
      if(option->length > length)
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	785b      	ldrb	r3, [r3, #1]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d201      	bcs.n	8008fba <lcpProcessConfigureNak+0x6a>
         return ERROR_INVALID_LENGTH;
 8008fb6:	23eb      	movs	r3, #235	; 0xeb
 8008fb8:	e0a3      	b.n	8009102 <lcpProcessConfigureNak+0x1b2>

      //Maximum-Receive-Unit option?
      if(option->type == LCP_OPTION_MRU)
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d129      	bne.n	8009016 <lcpProcessConfigureNak+0xc6>
      {
         //Cast option
         LcpMruOption *mruOption = (LcpMruOption *) option;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	60fb      	str	r3, [r7, #12]

         //Check option length
         if(mruOption->length != sizeof(LcpMruOption))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d001      	beq.n	8008fd2 <lcpProcessConfigureNak+0x82>
            return ERROR_INVALID_LENGTH;
 8008fce:	23eb      	movs	r3, #235	; 0xeb
 8008fd0:	e097      	b.n	8009102 <lcpProcessConfigureNak+0x1b2>

         //Save value
         context->localConfig.mru = ntohs(mruOption->mru);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	885b      	ldrh	r3, [r3, #2]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7f7 fae1 	bl	80005a0 <swapInt16>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
         //Make sure the MRU is acceptable
         context->localConfig.mru = MAX(context->localConfig.mru, PPP_MIN_MRU);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	bf38      	it	cc
 8008ff2:	2320      	movcc	r3, #32
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
         context->localConfig.mru = MIN(context->localConfig.mru, PPP_MAX_MRU);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8009002:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009006:	4293      	cmp	r3, r2
 8009008:	bf28      	it	cs
 800900a:	4613      	movcs	r3, r2
 800900c:	b29a      	uxth	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 8009014:	e05d      	b.n	80090d2 <lcpProcessConfigureNak+0x182>
      }
      else if(option->type == LCP_OPTION_ACCM)
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d112      	bne.n	8009044 <lcpProcessConfigureNak+0xf4>
      {
         //Cast option
         LcpAccmOption *accmOption = (LcpAccmOption *) option;
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	613b      	str	r3, [r7, #16]

         //Check option length
         if(accmOption->length != sizeof(LcpAccmOption))
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b06      	cmp	r3, #6
 8009028:	d001      	beq.n	800902e <lcpProcessConfigureNak+0xde>
            return ERROR_INVALID_LENGTH;
 800902a:	23eb      	movs	r3, #235	; 0xeb
 800902c:	e069      	b.n	8009102 <lcpProcessConfigureNak+0x1b2>

         //Save value
         context->localConfig.accm = ntohl(accmOption->accm);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009034:	4618      	mov	r0, r3
 8009036:	f7f7 fac1 	bl	80005bc <swapInt32>
 800903a:	4602      	mov	r2, r0
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8009042:	e046      	b.n	80090d2 <lcpProcessConfigureNak+0x182>
      }
      //Authentication-Protocol option?
      else if(option->type == LCP_OPTION_AUTH_PROTOCOL)
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b03      	cmp	r3, #3
 800904a:	d142      	bne.n	80090d2 <lcpProcessConfigureNak+0x182>
      {
         //Cast option
         LcpAuthProtocolOption *authProtocolOption = (LcpAuthProtocolOption *) option;
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	617b      	str	r3, [r7, #20]

         //Check option length
         if(authProtocolOption->length < sizeof(LcpAuthProtocolOption))
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	2b03      	cmp	r3, #3
 8009056:	d801      	bhi.n	800905c <lcpProcessConfigureNak+0x10c>
            return ERROR_INVALID_LENGTH;
 8009058:	23eb      	movs	r3, #235	; 0xeb
 800905a:	e052      	b.n	8009102 <lcpProcessConfigureNak+0x1b2>

         //Check the value provided by the peer
         if(ntohs(authProtocolOption->protocol) == PPP_PROTOCOL_PAP)
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	b29b      	uxth	r3, r3
 8009062:	4618      	mov	r0, r3
 8009064:	f7f7 fa9c 	bl	80005a0 <swapInt16>
 8009068:	4603      	mov	r3, r0
 800906a:	461a      	mov	r2, r3
 800906c:	f24c 0323 	movw	r3, #49187	; 0xc023
 8009070:	429a      	cmp	r2, r3
 8009072:	d10b      	bne.n	800908c <lcpProcessConfigureNak+0x13c>
         {
#if (PAP_SUPPORT == ENABLED)
            //Manage authentication policy
            if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d028      	beq.n	80090d2 <lcpProcessConfigureNak+0x182>
            {
               //Select PAP authentication protocol
               context->localConfig.authProtocol = PPP_PROTOCOL_PAP;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f24c 0223 	movw	r2, #49187	; 0xc023
 8009086:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800908a:	e022      	b.n	80090d2 <lcpProcessConfigureNak+0x182>
            }
#endif
         }
         else if(ntohs(authProtocolOption->protocol) == PPP_PROTOCOL_CHAP)
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	b29b      	uxth	r3, r3
 8009092:	4618      	mov	r0, r3
 8009094:	f7f7 fa84 	bl	80005a0 <swapInt16>
 8009098:	4603      	mov	r3, r0
 800909a:	461a      	mov	r2, r3
 800909c:	f24c 2323 	movw	r3, #49699	; 0xc223
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d116      	bne.n	80090d2 <lcpProcessConfigureNak+0x182>
         {
#if (CHAP_SUPPORT == ENABLED)
            //Make sure that the length of the option is correct
            if(authProtocolOption->length > sizeof(LcpAuthProtocolOption))
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d912      	bls.n	80090d2 <lcpProcessConfigureNak+0x182>
            {
               //Check the algorithm identifier
               if(authProtocolOption->data[0] == CHAP_ALGO_ID_CHAP_MD5)
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	791b      	ldrb	r3, [r3, #4]
 80090b0:	2b05      	cmp	r3, #5
 80090b2:	d10e      	bne.n	80090d2 <lcpProcessConfigureNak+0x182>
               {
                  //Manage authentication policy
                  if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d008      	beq.n	80090d2 <lcpProcessConfigureNak+0x182>
                  {
                     //Select CHAP with MD5 authentication protocol
                     context->localConfig.authProtocol = PPP_PROTOCOL_CHAP;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f24c 2223 	movw	r2, #49699	; 0xc223
 80090c6:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                     context->localConfig.authAlgo = CHAP_ALGO_ID_CHAP_MD5;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2205      	movs	r2, #5
 80090ce:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
#endif
         }
      }

      //Remaining bytes to process
      length -= option->length;
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	785b      	ldrb	r3, [r3, #1]
 80090d6:	461a      	mov	r2, r3
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	1a9b      	subs	r3, r3, r2
 80090dc:	61fb      	str	r3, [r7, #28]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	461a      	mov	r2, r3
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	4413      	add	r3, r2
 80090e8:	61bb      	str	r3, [r7, #24]
   while(length > 0)
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f47f af56 	bne.w	8008f9e <lcpProcessConfigureNak+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->lcpFsm, &lcpCallbacks);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	338c      	adds	r3, #140	; 0x8c
 80090f6:	4a07      	ldr	r2, [pc, #28]	; (8009114 <lcpProcessConfigureNak+0x1c4>)
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f002 f8c8 	bl	800b290 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3720      	adds	r7, #32
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20000058 	.word	0x20000058
 8009110:	08019c78 	.word	0x08019c78
 8009114:	0801a574 	.word	0x0801a574

08009118 <lcpProcessConfigureReject>:
 * @return Error code
 **/

error_t lcpProcessConfigureReject(PppContext *context,
   const PppConfigurePacket *configureRejPacket)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
   size_t length;
   PppOption *option;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Configure-Reject event\r\n");
 8009122:	f7f7 fa82 	bl	800062a <osSuspendAllTasks>
 8009126:	4b4c      	ldr	r3, [pc, #304]	; (8009258 <lcpProcessConfigureReject+0x140>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	2226      	movs	r2, #38	; 0x26
 800912e:	2101      	movs	r1, #1
 8009130:	484a      	ldr	r0, [pc, #296]	; (800925c <lcpProcessConfigureReject+0x144>)
 8009132:	f00f f867 	bl	8018204 <fwrite>
 8009136:	f7f7 fa83 	bl	8000640 <osResumeAllTasks>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(configureRejPacket->identifier != context->lcpFsm.identifier)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	785a      	ldrb	r2, [r3, #1]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009144:	429a      	cmp	r2, r3
 8009146:	d001      	beq.n	800914c <lcpProcessConfigureReject+0x34>
      return ERROR_WRONG_IDENTIFIER;
 8009148:	23d6      	movs	r3, #214	; 0xd6
 800914a:	e081      	b.n	8009250 <lcpProcessConfigureReject+0x138>

   //Retrieve the length of the option list
   length = ntohs(configureRejPacket->length) - sizeof(PppConfigurePacket);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	885b      	ldrh	r3, [r3, #2]
 8009150:	b29b      	uxth	r3, r3
 8009152:	4618      	mov	r0, r3
 8009154:	f7f7 fa24 	bl	80005a0 <swapInt16>
 8009158:	4603      	mov	r3, r0
 800915a:	3b04      	subs	r3, #4
 800915c:	60fb      	str	r3, [r7, #12]
   //Point to the first option
   option = (PppOption *) configureRejPacket->options;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	3304      	adds	r3, #4
 8009162:	60bb      	str	r3, [r7, #8]

   //Parse configuration options
   while(length > 0)
 8009164:	e069      	b.n	800923a <lcpProcessConfigureReject+0x122>
   {
      //Check option length
      if(option->length < sizeof(PppOption))
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	785b      	ldrb	r3, [r3, #1]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d801      	bhi.n	8009172 <lcpProcessConfigureReject+0x5a>
         return ERROR_INVALID_LENGTH;
 800916e:	23eb      	movs	r3, #235	; 0xeb
 8009170:	e06e      	b.n	8009250 <lcpProcessConfigureReject+0x138>
      if(option->length > length)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	461a      	mov	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4293      	cmp	r3, r2
 800917c:	d201      	bcs.n	8009182 <lcpProcessConfigureReject+0x6a>
         return ERROR_INVALID_LENGTH;
 800917e:	23eb      	movs	r3, #235	; 0xeb
 8009180:	e066      	b.n	8009250 <lcpProcessConfigureReject+0x138>

      //Maximum-Receive-Unit option?
      if(option->type == LCP_OPTION_MRU)
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d109      	bne.n	800919e <lcpProcessConfigureReject+0x86>
      {
         //The option is not recognized by the peer
         context->localConfig.mruRejected = TRUE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
         //Restore default value
         context->localConfig.mru = PPP_DEFAULT_MRU;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009198:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800919c:	e041      	b.n	8009222 <lcpProcessConfigureReject+0x10a>
      }
      //Async-Control-Character-Map option?
      else if(option->type == LCP_OPTION_ACCM)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d109      	bne.n	80091ba <lcpProcessConfigureReject+0xa2>
      {
         //The option is not recognized by the peer
         context->localConfig.accmRejected = TRUE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
         //Restore default value
         context->localConfig.accm = PPP_DEFAULT_ACCM;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80091b8:	e033      	b.n	8009222 <lcpProcessConfigureReject+0x10a>
      }
      //Authentication-Protocol option?
      else if(option->type == LCP_OPTION_AUTH_PROTOCOL)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d109      	bne.n	80091d6 <lcpProcessConfigureReject+0xbe>
      {
         //This is an unrecoverable error that terminates the connection
         pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, FALSE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 80091c8:	2300      	movs	r3, #0
 80091ca:	4a25      	ldr	r2, [pc, #148]	; (8009260 <lcpProcessConfigureReject+0x148>)
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f002 f95b 	bl	800b488 <pppRcvCodeRejEvent>
         //Exit immediately
         return ERROR_FAILURE;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e03c      	b.n	8009250 <lcpProcessConfigureReject+0x138>
      }
      //Magic-Number option?
      else if(option->type == LCP_OPTION_MAGIC_NUMBER)
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b05      	cmp	r3, #5
 80091dc:	d108      	bne.n	80091f0 <lcpProcessConfigureReject+0xd8>
      {
         //The option is not recognized by the peer
         context->localConfig.magicNumberRejected = TRUE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
         //Restore default value
         context->localConfig.magicNumber = PPP_DEFAULT_MAGIC_NUMBER;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80091ee:	e018      	b.n	8009222 <lcpProcessConfigureReject+0x10a>
      }
      //Protocol-Field-Compression option?
      else if(option->type == LCP_OPTION_PFC)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b07      	cmp	r3, #7
 80091f6:	d108      	bne.n	800920a <lcpProcessConfigureReject+0xf2>
      {
         //The option is not recognized by the peer
         context->localConfig.pfcRejected = TRUE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
         //Restore default value
         context->localConfig.pfc = FALSE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8009208:	e00b      	b.n	8009222 <lcpProcessConfigureReject+0x10a>
      }
      //Address-and-Control-Field-Compression option?
      else if(option->type == LCP_OPTION_ACFC)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b08      	cmp	r3, #8
 8009210:	d107      	bne.n	8009222 <lcpProcessConfigureReject+0x10a>
      {
         //The option is not recognized by the peer
         context->localConfig.acfcRejected = TRUE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
         //Restore default value
         context->localConfig.acfc = FALSE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
      }

      //Remaining bytes to process
      length -= option->length;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	785b      	ldrb	r3, [r3, #1]
 8009226:	461a      	mov	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	785b      	ldrb	r3, [r3, #1]
 8009232:	461a      	mov	r2, r3
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4413      	add	r3, r2
 8009238:	60bb      	str	r3, [r7, #8]
   while(length > 0)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d192      	bne.n	8009166 <lcpProcessConfigureReject+0x4e>
   }

   //A valid Configure-Nak or Configure-Reject packet has been received from the peer
   pppRcvConfigureNakEvent(context, &context->lcpFsm, &lcpCallbacks);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	338c      	adds	r3, #140	; 0x8c
 8009244:	4a06      	ldr	r2, [pc, #24]	; (8009260 <lcpProcessConfigureReject+0x148>)
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f002 f821 	bl	800b290 <pppRcvConfigureNakEvent>

   //Successful processing
   return NO_ERROR;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	20000058 	.word	0x20000058
 800925c:	08019c9c 	.word	0x08019c9c
 8009260:	0801a574 	.word	0x0801a574

08009264 <lcpProcessTerminateReq>:
 * @return Error code
 **/

error_t lcpProcessTerminateReq(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Terminate-Request event\r\n");
 800926e:	f7f7 f9dc 	bl	800062a <osSuspendAllTasks>
 8009272:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <lcpProcessTerminateReq+0x3c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	2227      	movs	r2, #39	; 0x27
 800927a:	2101      	movs	r1, #1
 800927c:	4809      	ldr	r0, [pc, #36]	; (80092a4 <lcpProcessTerminateReq+0x40>)
 800927e:	f00e ffc1 	bl	8018204 <fwrite>
 8009282:	f7f7 f9dd 	bl	8000640 <osResumeAllTasks>

   //The Terminate-Request indicates the desire of the peer to close the connection
   pppRcvTerminateReqEvent(context, &context->lcpFsm,
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	4a06      	ldr	r2, [pc, #24]	; (80092a8 <lcpProcessTerminateReq+0x44>)
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f002 f851 	bl	800b338 <pppRcvTerminateReqEvent>
      &lcpCallbacks, terminateReqPacket);

   //Successful processing
   return NO_ERROR;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20000058 	.word	0x20000058
 80092a4:	08019cc4 	.word	0x08019cc4
 80092a8:	0801a574 	.word	0x0801a574

080092ac <lcpProcessTerminateAck>:
 * @return Error code
 **/

error_t lcpProcessTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateAckPacket)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Terminate-Ack event\r\n");
 80092b6:	f7f7 f9b8 	bl	800062a <osSuspendAllTasks>
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <lcpProcessTerminateAck+0x3c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2223      	movs	r2, #35	; 0x23
 80092c2:	2101      	movs	r1, #1
 80092c4:	4809      	ldr	r0, [pc, #36]	; (80092ec <lcpProcessTerminateAck+0x40>)
 80092c6:	f00e ff9d 	bl	8018204 <fwrite>
 80092ca:	f7f7 f9b9 	bl	8000640 <osResumeAllTasks>

   //The Terminate-Ack packet is usually a response to a Terminate-Request
   //packet. This packet may also indicate that the peer is in Closed or
   //Stopped states, and serves to re-synchronize the link configuration
   pppRcvTerminateAckEvent(context, &context->lcpFsm, &lcpCallbacks);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	338c      	adds	r3, #140	; 0x8c
 80092d2:	4a07      	ldr	r2, [pc, #28]	; (80092f0 <lcpProcessTerminateAck+0x44>)
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f002 f876 	bl	800b3c8 <pppRcvTerminateAckEvent>

   //Successful processing
   return NO_ERROR;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000058 	.word	0x20000058
 80092ec:	08019cec 	.word	0x08019cec
 80092f0:	0801a574 	.word	0x0801a574

080092f4 <lcpProcessCodeRej>:
 * @return Error code
 **/

error_t lcpProcessCodeRej(PppContext *context,
   const PppCodeRejPacket *codeRejPacket)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
   size_t length;
   PppPacket *packet;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Code-Reject event\r\n");
 80092fe:	f7f7 f994 	bl	800062a <osSuspendAllTasks>
 8009302:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <lcpProcessCodeRej+0x80>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	2221      	movs	r2, #33	; 0x21
 800930a:	2101      	movs	r1, #1
 800930c:	481a      	ldr	r0, [pc, #104]	; (8009378 <lcpProcessCodeRej+0x84>)
 800930e:	f00e ff79 	bl	8018204 <fwrite>
 8009312:	f7f7 f995 	bl	8000640 <osResumeAllTasks>

   //Point to the rejected packet
   packet = (PppPacket *) codeRejPacket->rejectedPacket;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	3304      	adds	r3, #4
 800931a:	60fb      	str	r3, [r7, #12]
   //Retrieve the length of the rejected packet
   length = ntohs(codeRejPacket->length) - sizeof(PppCodeRejPacket);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	b29b      	uxth	r3, r3
 8009322:	4618      	mov	r0, r3
 8009324:	f7f7 f93c 	bl	80005a0 <swapInt16>
 8009328:	4603      	mov	r3, r0
 800932a:	3b04      	subs	r3, #4
 800932c:	60bb      	str	r3, [r7, #8]

   //Make sure the length of the rejected packet is valid
   if(length < sizeof(PppPacket))
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d801      	bhi.n	8009338 <lcpProcessCodeRej+0x44>
      return ERROR_INVALID_LENGTH;
 8009334:	23eb      	movs	r3, #235	; 0xeb
 8009336:	e019      	b.n	800936c <lcpProcessCodeRej+0x78>

   //Check whether the rejected value is acceptable or catastrophic
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <lcpProcessCodeRej+0x54>
      packet->code > PPP_CODE_DISCARD_REQ)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	781b      	ldrb	r3, [r3, #0]
   if(packet->code < PPP_CODE_CONFIGURE_REQ ||
 8009344:	2b0b      	cmp	r3, #11
 8009346:	d908      	bls.n	800935a <lcpProcessCodeRej+0x66>
   {
      //The RXJ+ event arises when the rejected value is acceptable, such
      //as a Code-Reject of an extended code, or a Protocol-Reject of a
      //NCP. These are within the scope of normal operation
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, TRUE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800934e:	2301      	movs	r3, #1
 8009350:	4a0a      	ldr	r2, [pc, #40]	; (800937c <lcpProcessCodeRej+0x88>)
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f002 f898 	bl	800b488 <pppRcvCodeRejEvent>
 8009358:	e007      	b.n	800936a <lcpProcessCodeRej+0x76>
   else
   {
      //The RXJ- event arises when the rejected value is catastrophic, such
      //as a Code-Reject of Configure-Request! This event communicates an
      //unrecoverable error that terminates the connection
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, FALSE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8009360:	2300      	movs	r3, #0
 8009362:	4a06      	ldr	r2, [pc, #24]	; (800937c <lcpProcessCodeRej+0x88>)
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f002 f88f 	bl	800b488 <pppRcvCodeRejEvent>
   }

   //Successful processing
   return NO_ERROR;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	20000058 	.word	0x20000058
 8009378:	08019d10 	.word	0x08019d10
 800937c:	0801a574 	.word	0x0801a574

08009380 <lcpProcessProtocolRej>:
 * @return Error code
 **/

error_t lcpProcessProtocolRej(PppContext *context,
   const PppProtocolRejPacket *protocolRejPacket)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
   size_t length;
   uint16_t protocol;

   //Debug message
   TRACE_INFO("\r\nLCP Receive-Protocol-Reject event\r\n");
 800938a:	f7f7 f94e 	bl	800062a <osSuspendAllTasks>
 800938e:	4b2f      	ldr	r3, [pc, #188]	; (800944c <lcpProcessProtocolRej+0xcc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	2225      	movs	r2, #37	; 0x25
 8009396:	2101      	movs	r1, #1
 8009398:	482d      	ldr	r0, [pc, #180]	; (8009450 <lcpProcessProtocolRej+0xd0>)
 800939a:	f00e ff33 	bl	8018204 <fwrite>
 800939e:	f7f7 f94f 	bl	8000640 <osResumeAllTasks>

   //Retrieve the length of the packet
   length = ntohs(protocolRejPacket->length);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	885b      	ldrh	r3, [r3, #2]
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7f7 f8f9 	bl	80005a0 <swapInt16>
 80093ae:	4603      	mov	r3, r0
 80093b0:	60fb      	str	r3, [r7, #12]

   //Make sure the length of the Protocol-Reject packet is valid
   if(length < sizeof(PppProtocolRejPacket))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b05      	cmp	r3, #5
 80093b6:	d801      	bhi.n	80093bc <lcpProcessProtocolRej+0x3c>
      return ERROR_INVALID_LENGTH;
 80093b8:	23eb      	movs	r3, #235	; 0xeb
 80093ba:	e042      	b.n	8009442 <lcpProcessProtocolRej+0xc2>

   //Convert the Rejected-Protocol field to host byte order
   protocol = ntohs(protocolRejPacket->rejectedProtocol);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	889b      	ldrh	r3, [r3, #4]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7f7 f8ec 	bl	80005a0 <swapInt16>
 80093c8:	4603      	mov	r3, r0
 80093ca:	817b      	strh	r3, [r7, #10]

   //Check Rejected-Protocol field value
   switch(protocol)
 80093cc:	897b      	ldrh	r3, [r7, #10]
 80093ce:	f248 0221 	movw	r2, #32801	; 0x8021
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d01a      	beq.n	800940c <lcpProcessProtocolRej+0x8c>
 80093d6:	f248 0221 	movw	r2, #32801	; 0x8021
 80093da:	4293      	cmp	r3, r2
 80093dc:	dc04      	bgt.n	80093e8 <lcpProcessProtocolRej+0x68>
 80093de:	2b21      	cmp	r3, #33	; 0x21
 80093e0:	d014      	beq.n	800940c <lcpProcessProtocolRej+0x8c>
 80093e2:	2b57      	cmp	r3, #87	; 0x57
 80093e4:	d01f      	beq.n	8009426 <lcpProcessProtocolRej+0xa6>
      break;

   //Unknown protocol?
   default:
      //Just for sanity's sake...
      break;
 80093e6:	e02b      	b.n	8009440 <lcpProcessProtocolRej+0xc0>
   switch(protocol)
 80093e8:	f248 0257 	movw	r2, #32855	; 0x8057
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d01a      	beq.n	8009426 <lcpProcessProtocolRej+0xa6>
 80093f0:	f24c 0221 	movw	r2, #49185	; 0xc021
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d000      	beq.n	80093fa <lcpProcessProtocolRej+0x7a>
      break;
 80093f8:	e022      	b.n	8009440 <lcpProcessProtocolRej+0xc0>
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, FALSE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8009400:	2300      	movs	r3, #0
 8009402:	4a14      	ldr	r2, [pc, #80]	; (8009454 <lcpProcessProtocolRej+0xd4>)
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f002 f83f 	bl	800b488 <pppRcvCodeRejEvent>
      break;
 800940a:	e019      	b.n	8009440 <lcpProcessProtocolRej+0xc0>
      context->ipRejected = TRUE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, TRUE);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800941a:	2301      	movs	r3, #1
 800941c:	4a0d      	ldr	r2, [pc, #52]	; (8009454 <lcpProcessProtocolRej+0xd4>)
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f002 f832 	bl	800b488 <pppRcvCodeRejEvent>
      break;
 8009424:	e00c      	b.n	8009440 <lcpProcessProtocolRej+0xc0>
      context->ipv6Rejected = TRUE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
      pppRcvCodeRejEvent(context, &context->lcpFsm, &lcpCallbacks, TRUE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8009434:	2301      	movs	r3, #1
 8009436:	4a07      	ldr	r2, [pc, #28]	; (8009454 <lcpProcessProtocolRej+0xd4>)
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f002 f825 	bl	800b488 <pppRcvCodeRejEvent>
      break;
 800943e:	bf00      	nop
   }

   //Successful processing
   return NO_ERROR;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000058 	.word	0x20000058
 8009450:	08019d34 	.word	0x08019d34
 8009454:	0801a574 	.word	0x0801a574

08009458 <lcpProcessEchoReq>:
 * @return Error code
 **/

error_t lcpProcessEchoReq(PppContext *context,
   const PppEchoPacket *echoReqPacket)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Echo-Request event\r\n");
 8009462:	f7f7 f8e2 	bl	800062a <osSuspendAllTasks>
 8009466:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <lcpProcessEchoReq+0x3c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	2222      	movs	r2, #34	; 0x22
 800946e:	2101      	movs	r1, #1
 8009470:	4809      	ldr	r0, [pc, #36]	; (8009498 <lcpProcessEchoReq+0x40>)
 8009472:	f00e fec7 	bl	8018204 <fwrite>
 8009476:	f7f7 f8e3 	bl	8000640 <osResumeAllTasks>

   //An Echo-Reply packet is transmitted to acknowledge the
   //reception of the Echo-Request packet
   pppRcvEchoReqEvent(context, &context->lcpFsm,
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	4a06      	ldr	r2, [pc, #24]	; (800949c <lcpProcessEchoReq+0x44>)
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f002 f86f 	bl	800b568 <pppRcvEchoReqEvent>
      &lcpCallbacks, echoReqPacket);

   //Successful processing
   return NO_ERROR;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	20000058 	.word	0x20000058
 8009498:	08019d5c 	.word	0x08019d5c
 800949c:	0801a574 	.word	0x0801a574

080094a0 <lcpProcessEchoRep>:
 * @return Error code
 **/

error_t lcpProcessEchoRep(PppContext *context,
   const PppEchoPacket *echoRepPacket)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Echo-Reply event\r\n");
 80094aa:	f7f7 f8be 	bl	800062a <osSuspendAllTasks>
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <lcpProcessEchoRep+0x2c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2220      	movs	r2, #32
 80094b6:	2101      	movs	r1, #1
 80094b8:	4805      	ldr	r0, [pc, #20]	; (80094d0 <lcpProcessEchoRep+0x30>)
 80094ba:	f00e fea3 	bl	8018204 <fwrite>
 80094be:	f7f7 f8bf 	bl	8000640 <osResumeAllTasks>

   //Successful processing
   return NO_ERROR;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000058 	.word	0x20000058
 80094d0:	08019d80 	.word	0x08019d80

080094d4 <lcpProcessDiscardReq>:
 * @return Error code
 **/

error_t lcpProcessDiscardReq(PppContext *context,
   const PppDiscardReqPacket *discardReqPacket)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Discard-Request event\r\n");
 80094de:	f7f7 f8a4 	bl	800062a <osSuspendAllTasks>
 80094e2:	4b07      	ldr	r3, [pc, #28]	; (8009500 <lcpProcessDiscardReq+0x2c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	2225      	movs	r2, #37	; 0x25
 80094ea:	2101      	movs	r1, #1
 80094ec:	4805      	ldr	r0, [pc, #20]	; (8009504 <lcpProcessDiscardReq+0x30>)
 80094ee:	f00e fe89 	bl	8018204 <fwrite>
 80094f2:	f7f7 f8a5 	bl	8000640 <osResumeAllTasks>

   //The receiver must silently discard any Discard-Request that it receives
   return NO_ERROR;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20000058 	.word	0x20000058
 8009504:	08019da4 	.word	0x08019da4

08009508 <lcpProcessUnknownCode>:
 * @return Error code
 **/

error_t lcpProcessUnknownCode(PppContext *context,
   const PppPacket *packet)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Unknown-Code event\r\n");
 8009512:	f7f7 f88a 	bl	800062a <osSuspendAllTasks>
 8009516:	4b0b      	ldr	r3, [pc, #44]	; (8009544 <lcpProcessUnknownCode+0x3c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	2222      	movs	r2, #34	; 0x22
 800951e:	2101      	movs	r1, #1
 8009520:	4809      	ldr	r0, [pc, #36]	; (8009548 <lcpProcessUnknownCode+0x40>)
 8009522:	f00e fe6f 	bl	8018204 <fwrite>
 8009526:	f7f7 f88b 	bl	8000640 <osResumeAllTasks>

   //This event occurs when an un-interpretable packet is received from
   //the peer. A Code-Reject packet is sent in response
   pppRcvUnknownCodeEvent(context, &context->lcpFsm, &lcpCallbacks, packet);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	4a06      	ldr	r2, [pc, #24]	; (800954c <lcpProcessUnknownCode+0x44>)
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 ff8f 	bl	800b458 <pppRcvUnknownCodeEvent>

   //Successful processing
   return NO_ERROR;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20000058 	.word	0x20000058
 8009548:	08019dcc 	.word	0x08019dcc
 800954c:	0801a574 	.word	0x0801a574

08009550 <lcpProcessUnknownProtocol>:
 * @return Error code
 **/

error_t lcpProcessUnknownProtocol(PppContext *context,
   uint16_t protocol, const uint8_t *information, size_t length)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af02      	add	r7, sp, #8
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	607a      	str	r2, [r7, #4]
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	460b      	mov	r3, r1
 800955e:	817b      	strh	r3, [r7, #10]
   //Debug message
   TRACE_INFO("\r\nLCP Receive-Unknown-Protocol event\r\n");
 8009560:	f7f7 f863 	bl	800062a <osSuspendAllTasks>
 8009564:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <lcpProcessUnknownProtocol+0x60>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	2226      	movs	r2, #38	; 0x26
 800956c:	2101      	movs	r1, #1
 800956e:	4811      	ldr	r0, [pc, #68]	; (80095b4 <lcpProcessUnknownProtocol+0x64>)
 8009570:	f00e fe48 	bl	8018204 <fwrite>
 8009574:	f7f7 f864 	bl	8000640 <osResumeAllTasks>

   //The peer is attempting to use a protocol which is unsupported
   if(context->lcpFsm.state == PPP_STATE_9_OPENED)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800957e:	2b09      	cmp	r3, #9
 8009580:	d111      	bne.n	80095a6 <lcpProcessUnknownProtocol+0x56>
   {
      //The Identifier field must be changed for each Protocol-Reject sent
      context->lcpFsm.identifier++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009588:	3301      	adds	r3, #1
 800958a:	b2da      	uxtb	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

      //If the LCP automaton is in the Opened state, then this must be
      //reported back to the peer by transmitting a Protocol-Reject
      pppSendProtocolRej(context, context->lcpFsm.identifier,
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 8009598:	897a      	ldrh	r2, [r7, #10]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f002 fd1d 	bl	800bfe0 <pppSendProtocolRej>
         protocol, information, length);
   }

   //Successful processing
   return NO_ERROR;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000058 	.word	0x20000058
 80095b4:	08019df0 	.word	0x08019df0

080095b8 <lcpThisLayerUp>:
 * @brief This-Layer-Up callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerUp(PppContext *context)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Up callback\r\n");
 80095c0:	f7f7 f833 	bl	800062a <osSuspendAllTasks>
 80095c4:	4b32      	ldr	r3, [pc, #200]	; (8009690 <lcpThisLayerUp+0xd8>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	221c      	movs	r2, #28
 80095cc:	2101      	movs	r1, #1
 80095ce:	4831      	ldr	r0, [pc, #196]	; (8009694 <lcpThisLayerUp+0xdc>)
 80095d0:	f00e fe18 	bl	8018204 <fwrite>
 80095d4:	f7f7 f834 	bl	8000640 <osResumeAllTasks>

   //Check whether the other end of the PPP link is being authenticated
   if(context->localConfig.authProtocol != 0)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d004      	beq.n	80095ec <lcpThisLayerUp+0x34>
      context->localAuthDone = FALSE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80095ea:	e003      	b.n	80095f4 <lcpThisLayerUp+0x3c>
   else
      context->localAuthDone = TRUE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

   //Check whether the other end of the PPP link is the authenticator
   if(context->peerConfig.authProtocol != 0)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <lcpThisLayerUp+0x50>
      context->peerAuthDone = FALSE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009606:	e003      	b.n	8009610 <lcpThisLayerUp+0x58>
   else
      context->peerAuthDone = TRUE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if (PAP_SUPPORT == ENABLED)
   //PAP authentication required?
   if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP ||
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8009616:	f24c 0223 	movw	r2, #49187	; 0xc023
 800961a:	4293      	cmp	r3, r2
 800961c:	d006      	beq.n	800962c <lcpThisLayerUp+0x74>
      context->peerConfig.authProtocol == PPP_PROTOCOL_PAP)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
   if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP ||
 8009624:	f24c 0223 	movw	r2, #49187	; 0xc023
 8009628:	4293      	cmp	r3, r2
 800962a:	d106      	bne.n	800963a <lcpThisLayerUp+0x82>
   {
      //Advance to the Authentication phase
      context->pppPhase = PPP_PHASE_AUTHENTICATE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      //Start PAP authentication process
      papStartAuth(context);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fd51 	bl	800a0dc <papStartAuth>
   }
#endif
#if (CHAP_SUPPORT == ENABLED)
   //CHAP authentication required?
   if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP ||
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8009640:	f24c 2223 	movw	r2, #49699	; 0xc223
 8009644:	4293      	cmp	r3, r2
 8009646:	d006      	beq.n	8009656 <lcpThisLayerUp+0x9e>
      context->peerConfig.authProtocol == PPP_PROTOCOL_CHAP)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
   if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP ||
 800964e:	f24c 2223 	movw	r2, #49699	; 0xc223
 8009652:	4293      	cmp	r3, r2
 8009654:	d106      	bne.n	8009664 <lcpThisLayerUp+0xac>
   {
      //Advance to the Authentication phase
      context->pppPhase = PPP_PHASE_AUTHENTICATE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2202      	movs	r2, #2
 800965a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
      //Start CHAP authentication process
      chapStartAuth(context);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7fd ffc4 	bl	80075ec <chapStartAuth>
   }
#endif

   //Check whether PPP authentication is complete
   if(context->localAuthDone && context->peerAuthDone)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00b      	beq.n	8009686 <lcpThisLayerUp+0xce>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009674:	2b00      	cmp	r3, #0
 8009676:	d006      	beq.n	8009686 <lcpThisLayerUp+0xce>
   {
      //Advance to the Network phase
      context->pppPhase = PPP_PHASE_NETWORK;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2203      	movs	r2, #3
 800967c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
      //IPCP Open event
      ipcpOpen(context);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fe fbe7 	bl	8007e54 <ipcpOpen>
#if (IPV6_SUPPORT == ENABLED)
      //IPV6CP Open event
      ipv6cpOpen(context);
#endif
   }
}
 8009686:	bf00      	nop
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000058 	.word	0x20000058
 8009694:	08019e18 	.word	0x08019e18

08009698 <lcpThisLayerDown>:
 * @brief This-Layer-Down callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerDown(PppContext *context)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Down callback\r\n");
 80096a0:	f7f6 ffc3 	bl	800062a <osSuspendAllTasks>
 80096a4:	4b0d      	ldr	r3, [pc, #52]	; (80096dc <lcpThisLayerDown+0x44>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	221e      	movs	r2, #30
 80096ac:	2101      	movs	r1, #1
 80096ae:	480c      	ldr	r0, [pc, #48]	; (80096e0 <lcpThisLayerDown+0x48>)
 80096b0:	f00e fda8 	bl	8018204 <fwrite>
 80096b4:	f7f6 ffc4 	bl	8000640 <osResumeAllTasks>

   //Advance to the Terminate phase
   context->pppPhase = PPP_PHASE_TERMINATE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2204      	movs	r2, #4
 80096bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
   //IPCP Close event
   ipcpClose(context);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7fe fbf1 	bl	8007ea8 <ipcpClose>
   ipv6cpClose(context);
#endif

#if (PAP_SUPPORT == ENABLED)
   //Abort PAP authentication process
   papAbortAuth(context);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fd3e 	bl	800a148 <papAbortAuth>
#endif

#if (CHAP_SUPPORT == ENABLED)
   //Abort CHAP authentication process
   chapAbortAuth(context);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7fd ffc3 	bl	8007658 <chapAbortAuth>
#endif
}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000058 	.word	0x20000058
 80096e0:	08019e38 	.word	0x08019e38

080096e4 <lcpThisLayerStarted>:
 * @brief This-Layer-Started callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerStarted(PppContext *context)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Started callback\r\n");
 80096ec:	f7f6 ff9d 	bl	800062a <osSuspendAllTasks>
 80096f0:	4b06      	ldr	r3, [pc, #24]	; (800970c <lcpThisLayerStarted+0x28>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	2221      	movs	r2, #33	; 0x21
 80096f8:	2101      	movs	r1, #1
 80096fa:	4805      	ldr	r0, [pc, #20]	; (8009710 <lcpThisLayerStarted+0x2c>)
 80096fc:	f00e fd82 	bl	8018204 <fwrite>
 8009700:	f7f6 ff9e 	bl	8000640 <osResumeAllTasks>
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20000058 	.word	0x20000058
 8009710:	08019e58 	.word	0x08019e58

08009714 <lcpThisLayerFinished>:
 * @brief This-Layer-Finished callback function
 * @param[in] context PPP context
 **/

void lcpThisLayerFinished(PppContext *context)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP This-Layer-Finished callback\r\n");
 800971c:	f7f6 ff85 	bl	800062a <osSuspendAllTasks>
 8009720:	4b0f      	ldr	r3, [pc, #60]	; (8009760 <lcpThisLayerFinished+0x4c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2222      	movs	r2, #34	; 0x22
 8009728:	2101      	movs	r1, #1
 800972a:	480e      	ldr	r0, [pc, #56]	; (8009764 <lcpThisLayerFinished+0x50>)
 800972c:	f00e fd6a 	bl	8018204 <fwrite>
 8009730:	f7f6 ff86 	bl	8000640 <osResumeAllTasks>

   //The link is no longer available for traffic
   pppCloseEvent(context, &context->lcpFsm, &lcpCallbacks);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	338c      	adds	r3, #140	; 0x8c
 8009738:	4a0b      	ldr	r2, [pc, #44]	; (8009768 <lcpThisLayerFinished+0x54>)
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fb7f 	bl	800ae40 <pppCloseEvent>
   //The lower layer is no longer ready to carry packets
   pppDownEvent(context, &context->lcpFsm, &lcpCallbacks);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	338c      	adds	r3, #140	; 0x8c
 8009746:	4a08      	ldr	r2, [pc, #32]	; (8009768 <lcpThisLayerFinished+0x54>)
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 faf0 	bl	800ad30 <pppDownEvent>

   //Advance to the Link Dead phase
   context->pppPhase = PPP_PHASE_DEAD;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20000058 	.word	0x20000058
 8009764:	08019e7c 	.word	0x08019e7c
 8009768:	0801a574 	.word	0x0801a574

0800976c <lcpInitRestartCount>:
 * @param[in] context PPP context
 * @param[in] value Restart counter value
 **/

void lcpInitRestartCount(PppContext *context, uint_t value)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Initialize-Restart-Count callback\r\n");
 8009776:	f7f6 ff58 	bl	800062a <osSuspendAllTasks>
 800977a:	4b09      	ldr	r3, [pc, #36]	; (80097a0 <lcpInitRestartCount+0x34>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	2227      	movs	r2, #39	; 0x27
 8009782:	2101      	movs	r1, #1
 8009784:	4807      	ldr	r0, [pc, #28]	; (80097a4 <lcpInitRestartCount+0x38>)
 8009786:	f00e fd3d 	bl	8018204 <fwrite>
 800978a:	f7f6 ff59 	bl	8000640 <osResumeAllTasks>

   //Initialize restart counter
   context->lcpFsm.restartCounter = value;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000058 	.word	0x20000058
 80097a4:	08019ea0 	.word	0x08019ea0

080097a8 <lcpZeroRestartCount>:
 * @brief Zero-Restart-Count callback function
 * @param[in] context PPP context
 **/

void lcpZeroRestartCount(PppContext *context)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("LCP Zero-Restart-Count callback\r\n");
 80097b0:	f7f6 ff3b 	bl	800062a <osSuspendAllTasks>
 80097b4:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <lcpZeroRestartCount+0x3c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	2221      	movs	r2, #33	; 0x21
 80097bc:	2101      	movs	r1, #1
 80097be:	480a      	ldr	r0, [pc, #40]	; (80097e8 <lcpZeroRestartCount+0x40>)
 80097c0:	f00e fd20 	bl	8018204 <fwrite>
 80097c4:	f7f6 ff3c 	bl	8000640 <osResumeAllTasks>

   //Zero restart counter
   context->lcpFsm.restartCounter = 0;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   //The receiver of a Terminate-Request should wait for the peer to
   //disconnect, and must not disconnect until at least one Restart
   //time has passed after sending a Terminate-Ack
   context->lcpFsm.timestamp = osGetSystemTime();
 80097d0:	f7f6 ffe5 	bl	800079e <osGetSystemTime>
 80097d4:	4602      	mov	r2, r0
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000058 	.word	0x20000058
 80097e8:	08019ec8 	.word	0x08019ec8

080097ec <lcpSendConfigureReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpSendConfigureReq(PppContext *context)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08a      	sub	sp, #40	; 0x28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppConfigurePacket *configureReqPacket;

   //Debug message
   TRACE_INFO("LCP Send-Configure-Request callback\r\n");
 80097f4:	f7f6 ff19 	bl	800062a <osSuspendAllTasks>
 80097f8:	4b76      	ldr	r3, [pc, #472]	; (80099d4 <lcpSendConfigureReq+0x1e8>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	2225      	movs	r2, #37	; 0x25
 8009800:	2101      	movs	r1, #1
 8009802:	4875      	ldr	r0, [pc, #468]	; (80099d8 <lcpSendConfigureReq+0x1ec>)
 8009804:	f00e fcfe 	bl	8018204 <fwrite>
 8009808:	f7f6 ff1a 	bl	8000640 <osResumeAllTasks>

   //Allocate a buffer memory to hold the Configure-Request packet
   buffer = pppAllocBuffer(PPP_MAX_CONF_REQ_SIZE, &offset);
 800980c:	f107 0314 	add.w	r3, r7, #20
 8009810:	4619      	mov	r1, r3
 8009812:	2080      	movs	r0, #128	; 0x80
 8009814:	f001 fa50 	bl	800acb8 <pppAllocBuffer>
 8009818:	6278      	str	r0, [r7, #36]	; 0x24
   //Failed to allocate memory?
   if(buffer == NULL)
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	d101      	bne.n	8009824 <lcpSendConfigureReq+0x38>
      return ERROR_OUT_OF_MEMORY;
 8009820:	2364      	movs	r3, #100	; 0x64
 8009822:	e0d2      	b.n	80099ca <lcpSendConfigureReq+0x1de>

   //Point to the Configure-Request packet
   configureReqPacket = netBufferAt(buffer, offset);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	4619      	mov	r1, r3
 8009828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800982a:	f7f8 fdc0 	bl	80023ae <netBufferAt>
 800982e:	6238      	str	r0, [r7, #32]

   //Format packet header
   configureReqPacket->code = PPP_CODE_CONFIGURE_REQ;
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	2201      	movs	r2, #1
 8009834:	701a      	strb	r2, [r3, #0]
   configureReqPacket->identifier = ++context->lcpFsm.identifier;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800983c:	3301      	adds	r3, #1
 800983e:	b2da      	uxtb	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	705a      	strb	r2, [r3, #1]
   configureReqPacket->length = sizeof(PppConfigurePacket);
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	2200      	movs	r2, #0
 8009854:	f042 0204 	orr.w	r2, r2, #4
 8009858:	709a      	strb	r2, [r3, #2]
 800985a:	2200      	movs	r2, #0
 800985c:	70da      	strb	r2, [r3, #3]

   //Make sure the Maximum-Receive-Unit option has not been
   //previously rejected
   if(!context->localConfig.mruRejected)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10e      	bne.n	8009886 <lcpSendConfigureReq+0x9a>
   {
      //Convert MRU to network byte order
      uint16_t value = htons(context->localConfig.mru);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800986e:	4618      	mov	r0, r3
 8009870:	f7f6 fe96 	bl	80005a0 <swapInt16>
 8009874:	4603      	mov	r3, r0
 8009876:	827b      	strh	r3, [r7, #18]
      //Add option
      pppAddOption(configureReqPacket, LCP_OPTION_MRU, &value, sizeof(uint16_t));
 8009878:	f107 0212 	add.w	r2, r7, #18
 800987c:	2302      	movs	r3, #2
 800987e:	2101      	movs	r1, #1
 8009880:	6a38      	ldr	r0, [r7, #32]
 8009882:	f002 fc8d 	bl	800c1a0 <pppAddOption>
   }

   //Make sure the Async-Control-Character-Map option has not been
   //previously rejected
   if(!context->localConfig.accmRejected)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10e      	bne.n	80098ae <lcpSendConfigureReq+0xc2>
   {
      //Convert ACCM to network byte order
      uint32_t value = htonl(context->localConfig.accm);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009896:	4618      	mov	r0, r3
 8009898:	f7f6 fe90 	bl	80005bc <swapInt32>
 800989c:	4603      	mov	r3, r0
 800989e:	60fb      	str	r3, [r7, #12]
      //Add option
      pppAddOption(configureReqPacket, LCP_OPTION_ACCM, &value, sizeof(uint32_t));
 80098a0:	f107 020c 	add.w	r2, r7, #12
 80098a4:	2304      	movs	r3, #4
 80098a6:	2102      	movs	r1, #2
 80098a8:	6a38      	ldr	r0, [r7, #32]
 80098aa:	f002 fc79 	bl	800c1a0 <pppAddOption>
   }

   //Make sure the Authentication-Protocol option has not been
   //previously rejected
   if(!context->localConfig.authProtocolRejected)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d128      	bne.n	800990a <lcpSendConfigureReq+0x11e>
   {
      uint8_t value[3];

      //PAP authentication protocol?
      if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80098be:	f24c 0223 	movw	r2, #49187	; 0xc023
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d10b      	bne.n	80098de <lcpSendConfigureReq+0xf2>
      {
         //Format Authentication-Protocol option
         value[0] = MSB(PPP_PROTOCOL_PAP);
 80098c6:	23c0      	movs	r3, #192	; 0xc0
 80098c8:	723b      	strb	r3, [r7, #8]
         value[1] = LSB(PPP_PROTOCOL_PAP);
 80098ca:	2323      	movs	r3, #35	; 0x23
 80098cc:	727b      	strb	r3, [r7, #9]

         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_AUTH_PROTOCOL, &value, 2);
 80098ce:	f107 0208 	add.w	r2, r7, #8
 80098d2:	2302      	movs	r3, #2
 80098d4:	2103      	movs	r1, #3
 80098d6:	6a38      	ldr	r0, [r7, #32]
 80098d8:	f002 fc62 	bl	800c1a0 <pppAddOption>
 80098dc:	e015      	b.n	800990a <lcpSendConfigureReq+0x11e>
      }
      //CHAP authentication protocol?
      else if(context->localConfig.authProtocol == PPP_PROTOCOL_CHAP)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80098e4:	f24c 2223 	movw	r2, #49699	; 0xc223
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d10e      	bne.n	800990a <lcpSendConfigureReq+0x11e>
      {
         //Format Authentication-Protocol option
         value[0] = MSB(PPP_PROTOCOL_CHAP);
 80098ec:	23c2      	movs	r3, #194	; 0xc2
 80098ee:	723b      	strb	r3, [r7, #8]
         value[1] = LSB(PPP_PROTOCOL_CHAP);
 80098f0:	2323      	movs	r3, #35	; 0x23
 80098f2:	727b      	strb	r3, [r7, #9]
         value[2] = context->localConfig.authAlgo;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80098fa:	72bb      	strb	r3, [r7, #10]

         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_AUTH_PROTOCOL, &value, 3);
 80098fc:	f107 0208 	add.w	r2, r7, #8
 8009900:	2303      	movs	r3, #3
 8009902:	2103      	movs	r1, #3
 8009904:	6a38      	ldr	r0, [r7, #32]
 8009906:	f002 fc4b 	bl	800c1a0 <pppAddOption>
      }
   }

   //Make sure the Protocol-Field-Compression option has not been
   //previously rejected
   if(!context->localConfig.pfcRejected)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <lcpSendConfigureReq+0x13e>
   {
      //Check whether compression of the Protocol field is supported
      if(context->localConfig.pfc)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d005      	beq.n	800992a <lcpSendConfigureReq+0x13e>
      {
         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_PFC, NULL, 0);
 800991e:	2300      	movs	r3, #0
 8009920:	2200      	movs	r2, #0
 8009922:	2107      	movs	r1, #7
 8009924:	6a38      	ldr	r0, [r7, #32]
 8009926:	f002 fc3b 	bl	800c1a0 <pppAddOption>
      }
   }

   //Make sure the Address-and-Control-Field-Compression option has not been
   //previously rejected
   if(!context->localConfig.acfcRejected)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10a      	bne.n	800994a <lcpSendConfigureReq+0x15e>
   {
      //Check whether compression of the Address and Control fields is supported
      if(context->localConfig.acfc)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <lcpSendConfigureReq+0x15e>
      {
         //Add option
         pppAddOption(configureReqPacket, LCP_OPTION_ACFC, NULL, 0);
 800993e:	2300      	movs	r3, #0
 8009940:	2200      	movs	r2, #0
 8009942:	2108      	movs	r1, #8
 8009944:	6a38      	ldr	r0, [r7, #32]
 8009946:	f002 fc2b 	bl	800c1a0 <pppAddOption>
      }
   }

   //Save packet length
   length = configureReqPacket->length;
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	885b      	ldrh	r3, [r3, #2]
 800994e:	b29b      	uxth	r3, r3
 8009950:	61fb      	str	r3, [r7, #28]
   //Convert length field to network byte order
   configureReqPacket->length = htons(length);
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	b29b      	uxth	r3, r3
 8009956:	4618      	mov	r0, r3
 8009958:	f7f6 fe22 	bl	80005a0 <swapInt16>
 800995c:	4603      	mov	r3, r0
 800995e:	461a      	mov	r2, r3
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	805a      	strh	r2, [r3, #2]

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	4413      	add	r3, r2
 800996a:	4619      	mov	r1, r3
 800996c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800996e:	f7f8 fc78 	bl	8002262 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending Configure-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 8009972:	f7f6 fe5a 	bl	800062a <osSuspendAllTasks>
 8009976:	4b17      	ldr	r3, [pc, #92]	; (80099d4 <lcpSendConfigureReq+0x1e8>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	69fa      	ldr	r2, [r7, #28]
 800997e:	4917      	ldr	r1, [pc, #92]	; (80099dc <lcpSendConfigureReq+0x1f0>)
 8009980:	4618      	mov	r0, r3
 8009982:	f00e fbdf 	bl	8018144 <fiprintf>
 8009986:	f7f6 fe5b 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) configureReqPacket, length, PPP_PROTOCOL_LCP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_LCP);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6998      	ldr	r0, [r3, #24]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	f24c 0321 	movw	r3, #49185	; 0xc021
 8009994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009996:	f001 f819 	bl	800a9cc <pppSendFrame>
 800999a:	4603      	mov	r3, r0
 800999c:	837b      	strh	r3, [r7, #26]

   //The restart counter is decremented each time a Configure-Request is sent
   if(context->lcpFsm.restartCounter > 0)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d006      	beq.n	80099b6 <lcpSendConfigureReq+0x1ca>
      context->lcpFsm.restartCounter--;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099ae:	1e5a      	subs	r2, r3, #1
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   //Save the time at which the packet was sent
   context->lcpFsm.timestamp = osGetSystemTime();
 80099b6:	f7f6 fef2 	bl	800079e <osGetSystemTime>
 80099ba:	4602      	mov	r2, r0
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Free previously allocated memory block
   netBufferFree(buffer);
 80099c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099c4:	f7f8 fc1c 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 80099c8:	8b7b      	ldrh	r3, [r7, #26]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3728      	adds	r7, #40	; 0x28
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000058 	.word	0x20000058
 80099d8:	08019eec 	.word	0x08019eec
 80099dc:	08019f14 	.word	0x08019f14

080099e0 <lcpSendConfigureAck>:
 * @return Error code
 **/

error_t lcpSendConfigureAck(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Configure-Ack callback\r\n");
 80099ea:	f7f6 fe1e 	bl	800062a <osSuspendAllTasks>
 80099ee:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <lcpSendConfigureAck+0x3c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	2221      	movs	r2, #33	; 0x21
 80099f6:	2101      	movs	r1, #1
 80099f8:	4809      	ldr	r0, [pc, #36]	; (8009a20 <lcpSendConfigureAck+0x40>)
 80099fa:	f00e fc03 	bl	8018204 <fwrite>
 80099fe:	f7f6 fe1f 	bl	8000640 <osResumeAllTasks>

   //Send Configure-Ack packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 8009a02:	2302      	movs	r3, #2
 8009a04:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f002 f910 	bl	800bc30 <pppSendConfigureAckNak>
 8009a10:	4603      	mov	r3, r0
      PPP_PROTOCOL_LCP, PPP_CODE_CONFIGURE_ACK);
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000058 	.word	0x20000058
 8009a20:	08019f48 	.word	0x08019f48

08009a24 <lcpSendConfigureNak>:
 * @return Error code
 **/

error_t lcpSendConfigureNak(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Configure-Nak callback\r\n");
 8009a2e:	f7f6 fdfc 	bl	800062a <osSuspendAllTasks>
 8009a32:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <lcpSendConfigureNak+0x3c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	2221      	movs	r2, #33	; 0x21
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	4809      	ldr	r0, [pc, #36]	; (8009a64 <lcpSendConfigureNak+0x40>)
 8009a3e:	f00e fbe1 	bl	8018204 <fwrite>
 8009a42:	f7f6 fdfd 	bl	8000640 <osResumeAllTasks>

   //Send Configure-Nak packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 8009a46:	2303      	movs	r3, #3
 8009a48:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f002 f8ee 	bl	800bc30 <pppSendConfigureAckNak>
 8009a54:	4603      	mov	r3, r0
      PPP_PROTOCOL_LCP, PPP_CODE_CONFIGURE_NAK);
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000058 	.word	0x20000058
 8009a64:	08019f6c 	.word	0x08019f6c

08009a68 <lcpSendConfigureRej>:
 * @return Error code
 **/

error_t lcpSendConfigureRej(PppContext *context,
   const PppConfigurePacket *configureReqPacket)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Configure-Reject callback\r\n");
 8009a72:	f7f6 fdda 	bl	800062a <osSuspendAllTasks>
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <lcpSendConfigureRej+0x3c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	2224      	movs	r2, #36	; 0x24
 8009a7e:	2101      	movs	r1, #1
 8009a80:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <lcpSendConfigureRej+0x40>)
 8009a82:	f00e fbbf 	bl	8018204 <fwrite>
 8009a86:	f7f6 fddb 	bl	8000640 <osResumeAllTasks>

   //Send Configure-Reject packet
   return pppSendConfigureAckNak(context, configureReqPacket,
 8009a8a:	2304      	movs	r3, #4
 8009a8c:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f002 f8cc 	bl	800bc30 <pppSendConfigureAckNak>
 8009a98:	4603      	mov	r3, r0
      PPP_PROTOCOL_LCP, PPP_CODE_CONFIGURE_REJ);
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000058 	.word	0x20000058
 8009aa8:	08019f90 	.word	0x08019f90

08009aac <lcpSendTerminateReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t lcpSendTerminateReq(PppContext *context)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
   error_t error;

   //Debug message
   TRACE_INFO("LCP Send-Terminate-Request callback\r\n");
 8009ab4:	f7f6 fdb9 	bl	800062a <osSuspendAllTasks>
 8009ab8:	4b19      	ldr	r3, [pc, #100]	; (8009b20 <lcpSendTerminateReq+0x74>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	2225      	movs	r2, #37	; 0x25
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	4818      	ldr	r0, [pc, #96]	; (8009b24 <lcpSendTerminateReq+0x78>)
 8009ac4:	f00e fb9e 	bl	8018204 <fwrite>
 8009ac8:	f7f6 fdba 	bl	8000640 <osResumeAllTasks>

   //On transmission, the Identifier field must be changed
   context->lcpFsm.identifier++;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

   //Send Terminate-Request packet
   error = pppSendTerminateReq(context, context->lcpFsm.identifier, PPP_PROTOCOL_LCP);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009ae2:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f002 f975 	bl	800bdd8 <pppSendTerminateReq>
 8009aee:	4603      	mov	r3, r0
 8009af0:	81fb      	strh	r3, [r7, #14]

   //The restart counter is decremented each time a Terminate-Request is sent
   if(context->lcpFsm.restartCounter > 0)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d006      	beq.n	8009b0a <lcpSendTerminateReq+0x5e>
      context->lcpFsm.restartCounter--;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b02:	1e5a      	subs	r2, r3, #1
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   //Save the time at which the packet was sent
   context->lcpFsm.timestamp = osGetSystemTime();
 8009b0a:	f7f6 fe48 	bl	800079e <osGetSystemTime>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Return status code
   return error;
 8009b16:	89fb      	ldrh	r3, [r7, #14]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20000058 	.word	0x20000058
 8009b24:	08019fb8 	.word	0x08019fb8

08009b28 <lcpSendTerminateAck>:
 * @return Error code
 **/

error_t lcpSendTerminateAck(PppContext *context,
   const PppTerminatePacket *terminateReqPacket)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
   uint8_t identifier;

   //Debug message
   TRACE_INFO("LCP Send-Terminate-Ack callback\r\n");
 8009b32:	f7f6 fd7a 	bl	800062a <osSuspendAllTasks>
 8009b36:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <lcpSendTerminateAck+0x60>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	2221      	movs	r2, #33	; 0x21
 8009b3e:	2101      	movs	r1, #1
 8009b40:	4812      	ldr	r0, [pc, #72]	; (8009b8c <lcpSendTerminateAck+0x64>)
 8009b42:	f00e fb5f 	bl	8018204 <fwrite>
 8009b46:	f7f6 fd7b 	bl	8000640 <osResumeAllTasks>

   //Check whether this Terminate-Ack acknowledges the reception of a
   //Terminate-Request packet
   if(terminateReqPacket != NULL)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <lcpSendTerminateAck+0x30>
   {
      //The Identifier field of the Terminate-Request is copied into the
      //Identifier field of the Terminate-Ack packet
      identifier = terminateReqPacket->identifier;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	73fb      	strb	r3, [r7, #15]
 8009b56:	e00b      	b.n	8009b70 <lcpSendTerminateAck+0x48>
   }
   else
   {
      //This Terminate-Ack packet serves to synchronize the automatons
      identifier = ++context->lcpFsm.identifier;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009b5e:	3301      	adds	r3, #1
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009b6e:	73fb      	strb	r3, [r7, #15]
   }

   //Send Terminate-Ack packet
   return pppSendTerminateAck(context, identifier, PPP_PROTOCOL_LCP);
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f002 f979 	bl	800be70 <pppSendTerminateAck>
 8009b7e:	4603      	mov	r3, r0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20000058 	.word	0x20000058
 8009b8c:	08019fe0 	.word	0x08019fe0

08009b90 <lcpSendCodeRej>:
 * @param[in] packet Un-interpretable packet received from the peer
 * @return Error code
 **/

error_t lcpSendCodeRej(PppContext *context, const PppPacket *packet)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Code-Reject callback\r\n");
 8009b9a:	f7f6 fd46 	bl	800062a <osSuspendAllTasks>
 8009b9e:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <lcpSendCodeRej+0x50>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	221f      	movs	r2, #31
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	480e      	ldr	r0, [pc, #56]	; (8009be4 <lcpSendCodeRej+0x54>)
 8009baa:	f00e fb2b 	bl	8018204 <fwrite>
 8009bae:	f7f6 fd47 	bl	8000640 <osResumeAllTasks>

   //The Identifier field must be changed for each Code-Reject sent
   context->lcpFsm.identifier++;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009bb8:	3301      	adds	r3, #1
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

   //Send Code-Reject packet
   return pppSendCodeRej(context, packet, context->lcpFsm.identifier, PPP_PROTOCOL_LCP);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8009bc8:	f24c 0321 	movw	r3, #49185	; 0xc021
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f002 f99a 	bl	800bf08 <pppSendCodeRej>
 8009bd4:	4603      	mov	r3, r0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000058 	.word	0x20000058
 8009be4:	0801a004 	.word	0x0801a004

08009be8 <lcpSendEchoRep>:
 * @param[in] echoReqPacket Echo-Request packet received from the peer
 * @return Error code
 **/

error_t lcpSendEchoRep(PppContext *context, const PppEchoPacket *echoReqPacket)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
   //Debug message
   TRACE_INFO("LCP Send-Echo-Reply callback\r\n");
 8009bf2:	f7f6 fd1a 	bl	800062a <osSuspendAllTasks>
 8009bf6:	4b0a      	ldr	r3, [pc, #40]	; (8009c20 <lcpSendEchoRep+0x38>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	221e      	movs	r2, #30
 8009bfe:	2101      	movs	r1, #1
 8009c00:	4808      	ldr	r0, [pc, #32]	; (8009c24 <lcpSendEchoRep+0x3c>)
 8009c02:	f00e faff 	bl	8018204 <fwrite>
 8009c06:	f7f6 fd1b 	bl	8000640 <osResumeAllTasks>

   //Send Echo-Reply packet
   return pppSendEchoRep(context, echoReqPacket, PPP_PROTOCOL_LCP);
 8009c0a:	f24c 0221 	movw	r2, #49185	; 0xc021
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f002 fa51 	bl	800c0b8 <pppSendEchoRep>
 8009c16:	4603      	mov	r3, r0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20000058 	.word	0x20000058
 8009c24:	0801a024 	.word	0x0801a024

08009c28 <lcpParseOption>:
 * @return Error code
 **/

error_t lcpParseOption(PppContext *context, PppOption *option,
   size_t inPacketLen, PppConfigurePacket *outPacket)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
   error_t error;

   //Malformed LCP packet?
   if(inPacketLen < sizeof(PppOption))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d801      	bhi.n	8009c40 <lcpParseOption+0x18>
      return ERROR_INVALID_LENGTH;
 8009c3c:	23eb      	movs	r3, #235	; 0xeb
 8009c3e:	e06b      	b.n	8009d18 <lcpParseOption+0xf0>

   //Check option length
   if(option->length < sizeof(PppOption))
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	785b      	ldrb	r3, [r3, #1]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d801      	bhi.n	8009c4c <lcpParseOption+0x24>
      return ERROR_INVALID_LENGTH;
 8009c48:	23eb      	movs	r3, #235	; 0xeb
 8009c4a:	e065      	b.n	8009d18 <lcpParseOption+0xf0>
   if(option->length > inPacketLen)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	461a      	mov	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d201      	bcs.n	8009c5c <lcpParseOption+0x34>
      return ERROR_INVALID_LENGTH;
 8009c58:	23eb      	movs	r3, #235	; 0xeb
 8009c5a:	e05d      	b.n	8009d18 <lcpParseOption+0xf0>

   //Check option type
   switch(option->type)
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	2b07      	cmp	r3, #7
 8009c64:	d842      	bhi.n	8009cec <lcpParseOption+0xc4>
 8009c66:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <lcpParseOption+0x44>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009c8d 	.word	0x08009c8d
 8009c70:	08009c9d 	.word	0x08009c9d
 8009c74:	08009cad 	.word	0x08009cad
 8009c78:	08009ced 	.word	0x08009ced
 8009c7c:	08009cbd 	.word	0x08009cbd
 8009c80:	08009ced 	.word	0x08009ced
 8009c84:	08009ccd 	.word	0x08009ccd
 8009c88:	08009cdd 	.word	0x08009cdd
   {
   case LCP_OPTION_MRU:
      //Check Maximum-Receive-Unit option
      error = lcpParseMruOption(context, (LcpMruOption *) option, outPacket);
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 f845 	bl	8009d20 <lcpParseMruOption>
 8009c96:	4603      	mov	r3, r0
 8009c98:	82fb      	strh	r3, [r7, #22]
      break;
 8009c9a:	e03c      	b.n	8009d16 <lcpParseOption+0xee>
   case LCP_OPTION_ACCM:
      //Check Async-Control-Character-Map option
      error = lcpParseAccmOption(context, (LcpAccmOption *) option, outPacket);
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 f88d 	bl	8009dc0 <lcpParseAccmOption>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	82fb      	strh	r3, [r7, #22]
      break;
 8009caa:	e034      	b.n	8009d16 <lcpParseOption+0xee>
   case LCP_OPTION_AUTH_PROTOCOL:
      //Check Authentication-Protocol option
      error = lcpParseAuthProtocolOption(context, (LcpAuthProtocolOption *) option, outPacket);
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	68b9      	ldr	r1, [r7, #8]
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 f8b4 	bl	8009e1e <lcpParseAuthProtocolOption>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	82fb      	strh	r3, [r7, #22]
      break;
 8009cba:	e02c      	b.n	8009d16 <lcpParseOption+0xee>
   case LCP_OPTION_MAGIC_NUMBER:
      //Check Magic-Number option
      error = lcpParseMagicNumberOption(context, (LcpMagicNumberOption *) option, outPacket);
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	68b9      	ldr	r1, [r7, #8]
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 f992 	bl	8009fea <lcpParseMagicNumberOption>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	82fb      	strh	r3, [r7, #22]
      break;
 8009cca:	e024      	b.n	8009d16 <lcpParseOption+0xee>
   case LCP_OPTION_PFC:
      //Check Protocol-Field-Compression option
      error = lcpParsePfcOption(context, (LcpPfcOption *) option, outPacket);
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f9b9 	bl	800a048 <lcpParsePfcOption>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	82fb      	strh	r3, [r7, #22]
      break;
 8009cda:	e01c      	b.n	8009d16 <lcpParseOption+0xee>
   case LCP_OPTION_ACFC:
      //Check Address-and-Control-Field-Compression option
      error = lcpParseAcfcOption(context, (LcpAcfcOption *) option, outPacket);
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f9d6 	bl	800a092 <lcpParseAcfcOption>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	82fb      	strh	r3, [r7, #22]
      break;
 8009cea:	e014      	b.n	8009d16 <lcpParseOption+0xee>
   default:
      //If some configuration options received in the Configure-Request are not
      //recognizable or not acceptable for negotiation, then the implementation
      //must transmit a Configure-Reject
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_REJ)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00e      	beq.n	8009d10 <lcpParseOption+0xe8>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d10a      	bne.n	8009d10 <lcpParseOption+0xe8>
      {
         //The options field of the Configure-Reject packet is filled
         //with the unrecognized options from the Configure-Request
         pppAddOption(outPacket, option->type, option->data,
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	7819      	ldrb	r1, [r3, #0]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, option->type, option->data,
 8009d06:	3b02      	subs	r3, #2
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	6838      	ldr	r0, [r7, #0]
 8009d0c:	f002 fa48 	bl	800c1a0 <pppAddOption>
      }

      //The option is not acceptable for negotiation
      error = ERROR_INVALID_TYPE;
 8009d10:	23ef      	movs	r3, #239	; 0xef
 8009d12:	82fb      	strh	r3, [r7, #22]
      break;
 8009d14:	bf00      	nop
   }

   //Return status code
   return error;
 8009d16:	8afb      	ldrh	r3, [r7, #22]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <lcpParseMruOption>:
 * @return Error code
 **/

error_t lcpParseMruOption(PppContext *context,
   LcpMruOption *option, PppConfigurePacket *outPacket)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
   error_t error;
   uint16_t value;

   //Check length field
   if(option->length == sizeof(LcpMruOption))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	785b      	ldrb	r3, [r3, #1]
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	d13e      	bne.n	8009db2 <lcpParseMruOption+0x92>
   {
      //Check whether the option value is acceptable
      if(ntohs(option->mru) >= PPP_MIN_MRU)
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	885b      	ldrh	r3, [r3, #2]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7f6 fc30 	bl	80005a0 <swapInt16>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b1f      	cmp	r3, #31
 8009d44:	d91e      	bls.n	8009d84 <lcpParseMruOption+0x64>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d018      	beq.n	8009d7e <lcpParseMruOption+0x5e>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d114      	bne.n	8009d7e <lcpParseMruOption+0x5e>
         {
            //Save Maximum-Receive-Unit option
            context->peerConfig.mru = ntohl(option->mru);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	885b      	ldrh	r3, [r3, #2]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7f6 fc2e 	bl	80005bc <swapInt32>
 8009d60:	4603      	mov	r3, r0
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, LCP_OPTION_MRU, (void *) &option->mru,
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	1c9a      	adds	r2, r3, #2
               option->length - sizeof(PppOption));
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, LCP_OPTION_MRU, (void *) &option->mru,
 8009d72:	3b02      	subs	r3, #2
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2101      	movs	r1, #1
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f002 fa11 	bl	800c1a0 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	82fb      	strh	r3, [r7, #22]
 8009d82:	e018      	b.n	8009db6 <lcpParseMruOption+0x96>
      }
      else
      {
         //If all configuration options are recognizable, but some values are not
         //acceptable, then the implementation must transmit a Configure-Nak
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d010      	beq.n	8009dac <lcpParseMruOption+0x8c>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d10c      	bne.n	8009dac <lcpParseMruOption+0x8c>
         {
            //Use default value
            value = htons(PPP_DEFAULT_MRU);
 8009d92:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009d96:	f7f6 fc03 	bl	80005a0 <swapInt16>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	82bb      	strh	r3, [r7, #20]

            //The option must be modified to a value acceptable to the
            //Configure-Nak sender
            pppAddOption(outPacket, LCP_OPTION_MRU, &value, sizeof(uint16_t));
 8009d9e:	f107 0214 	add.w	r2, r7, #20
 8009da2:	2302      	movs	r3, #2
 8009da4:	2101      	movs	r1, #1
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f002 f9fa 	bl	800c1a0 <pppAddOption>
         }

         //The value is not acceptable
         error = ERROR_INVALID_VALUE;
 8009dac:	23f0      	movs	r3, #240	; 0xf0
 8009dae:	82fb      	strh	r3, [r7, #22]
 8009db0:	e001      	b.n	8009db6 <lcpParseMruOption+0x96>
      }
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 8009db2:	23eb      	movs	r3, #235	; 0xeb
 8009db4:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8009db6:	8afb      	ldrh	r3, [r7, #22]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <lcpParseAccmOption>:
 * @return Error code
 **/

error_t lcpParseAccmOption(PppContext *context,
   LcpAccmOption *option, PppConfigurePacket *outPacket)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpAccmOption))
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	2b06      	cmp	r3, #6
 8009dd2:	d11d      	bne.n	8009e10 <lcpParseAccmOption+0x50>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d017      	beq.n	8009e0a <lcpParseAccmOption+0x4a>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d113      	bne.n	8009e0a <lcpParseAccmOption+0x4a>
      {
         //Save Async-Control-Character-Map option
         context->peerConfig.accm = ntohl(option->accm);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7f6 fbe7 	bl	80005bc <swapInt32>
 8009dee:	4602      	mov	r2, r0
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_ACCM, (void *) &option->accm,
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, LCP_OPTION_ACCM, (void *) &option->accm,
 8009dfe:	3b02      	subs	r3, #2
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2102      	movs	r1, #2
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f002 f9cb 	bl	800c1a0 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	82fb      	strh	r3, [r7, #22]
 8009e0e:	e001      	b.n	8009e14 <lcpParseAccmOption+0x54>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 8009e10:	23eb      	movs	r3, #235	; 0xeb
 8009e12:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8009e14:	8afb      	ldrh	r3, [r7, #22]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <lcpParseAuthProtocolOption>:
 * @return Error code
 **/

error_t lcpParseAuthProtocolOption(PppContext *context,
   LcpAuthProtocolOption *option, PppConfigurePacket *outPacket)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b086      	sub	sp, #24
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	607a      	str	r2, [r7, #4]
   error_t error;
   uint8_t value[3];

   //Assume an error condition...
   error = ERROR_INVALID_LENGTH;
 8009e2a:	23eb      	movs	r3, #235	; 0xeb
 8009e2c:	82fb      	strh	r3, [r7, #22]

   //Check the length of the option
   if(option->length >= sizeof(LcpAuthProtocolOption))
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	785b      	ldrb	r3, [r3, #1]
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d924      	bls.n	8009e80 <lcpParseAuthProtocolOption+0x62>
   {
      //The Authentication-Protocol option for PAP must be exactly 4 bytes
      if(ntohs(option->protocol) == PPP_PROTOCOL_PAP)
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	885b      	ldrh	r3, [r3, #2]
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7f6 fbaf 	bl	80005a0 <swapInt16>
 8009e42:	4603      	mov	r3, r0
 8009e44:	461a      	mov	r2, r3
 8009e46:	f24c 0323 	movw	r3, #49187	; 0xc023
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d106      	bne.n	8009e5c <lcpParseAuthProtocolOption+0x3e>
      {
         if(option->length == 4)
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	785b      	ldrb	r3, [r3, #1]
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d114      	bne.n	8009e80 <lcpParseAuthProtocolOption+0x62>
            error = NO_ERROR;
 8009e56:	2300      	movs	r3, #0
 8009e58:	82fb      	strh	r3, [r7, #22]
 8009e5a:	e011      	b.n	8009e80 <lcpParseAuthProtocolOption+0x62>
      }
      //The Authentication-Protocol option for CHAP must be exactly 5 bytes
      else if(ntohs(option->protocol) == PPP_PROTOCOL_CHAP)
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	885b      	ldrh	r3, [r3, #2]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f6 fb9c 	bl	80005a0 <swapInt16>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f24c 2323 	movw	r3, #49699	; 0xc223
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d105      	bne.n	8009e80 <lcpParseAuthProtocolOption+0x62>
      {
         if(option->length == 5)
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b05      	cmp	r3, #5
 8009e7a:	d101      	bne.n	8009e80 <lcpParseAuthProtocolOption+0x62>
            error = NO_ERROR;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Make sure the length field is valid
   if(!error)
 8009e80:	8afb      	ldrh	r3, [r7, #22]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f040 80ac 	bne.w	8009fe0 <lcpParseAuthProtocolOption+0x1c2>
   {
      //PAP authentication protocol?
      if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP &&
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d025      	beq.n	8009ee0 <lcpParseAuthProtocolOption+0xc2>
         ntohs(option->protocol) == PPP_PROTOCOL_PAP)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	885b      	ldrh	r3, [r3, #2]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7f6 fb80 	bl	80005a0 <swapInt16>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	461a      	mov	r2, r3
      if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP &&
 8009ea4:	f24c 0323 	movw	r3, #49187	; 0xc023
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d119      	bne.n	8009ee0 <lcpParseAuthProtocolOption+0xc2>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d013      	beq.n	8009eda <lcpParseAuthProtocolOption+0xbc>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d10f      	bne.n	8009eda <lcpParseAuthProtocolOption+0xbc>
         {
            //Save the authentication protocol to be used
            context->peerConfig.authProtocol = PPP_PROTOCOL_PAP;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f24c 0223 	movw	r2, #49187	; 0xc023
 8009ec0:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	7819      	ldrb	r1, [r3, #0]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	1c9a      	adds	r2, r3, #2
               option->length - sizeof(PppOption));
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 8009ed0:	3b02      	subs	r3, #2
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f002 f963 	bl	800c1a0 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 8009eda:	2300      	movs	r3, #0
 8009edc:	82fb      	strh	r3, [r7, #22]
 8009ede:	e07f      	b.n	8009fe0 <lcpParseAuthProtocolOption+0x1c2>
      }
      //CHAP with MD5 authentication protocol?
      else if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5 &&
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f003 0302 	and.w	r3, r3, #2
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d02d      	beq.n	8009f48 <lcpParseAuthProtocolOption+0x12a>
         ntohs(option->protocol) == PPP_PROTOCOL_CHAP &&
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	885b      	ldrh	r3, [r3, #2]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7f6 fb54 	bl	80005a0 <swapInt16>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	461a      	mov	r2, r3
      else if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5 &&
 8009efc:	f24c 2323 	movw	r3, #49699	; 0xc223
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d121      	bne.n	8009f48 <lcpParseAuthProtocolOption+0x12a>
         option->data[0] == CHAP_ALGO_ID_CHAP_MD5)
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	791b      	ldrb	r3, [r3, #4]
         ntohs(option->protocol) == PPP_PROTOCOL_CHAP &&
 8009f08:	2b05      	cmp	r3, #5
 8009f0a:	d11d      	bne.n	8009f48 <lcpParseAuthProtocolOption+0x12a>
      {
         //If every configuration option received in the Configure-Request is
         //recognizable and all values are acceptable, then the implementation
         //must transmit a Configure-Ack
         if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d017      	beq.n	8009f42 <lcpParseAuthProtocolOption+0x124>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d113      	bne.n	8009f42 <lcpParseAuthProtocolOption+0x124>
         {
            //Save the authentication protocol to be used
            context->peerConfig.authProtocol = PPP_PROTOCOL_CHAP;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f24c 2223 	movw	r2, #49699	; 0xc223
 8009f20:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
            context->peerConfig.authAlgo = CHAP_ALGO_ID_CHAP_MD5;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2205      	movs	r2, #5
 8009f28:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

            //The options field of the Configure-Ack packet contains the
            //configuration options that the sender is acknowledging
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	7819      	ldrb	r1, [r3, #0]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	1c9a      	adds	r2, r3, #2
               option->length - sizeof(PppOption));
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	785b      	ldrb	r3, [r3, #1]
            pppAddOption(outPacket, option->type, (void *) &option->protocol,
 8009f38:	3b02      	subs	r3, #2
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f002 f92f 	bl	800c1a0 <pppAddOption>
         }

         //The value is acceptable
         error = NO_ERROR;
 8009f42:	2300      	movs	r3, #0
 8009f44:	82fb      	strh	r3, [r7, #22]
 8009f46:	e04b      	b.n	8009fe0 <lcpParseAuthProtocolOption+0x1c2>
      }
      else
      {
         //PAP authentication protocol allowed?
         if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_PAP)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d014      	beq.n	8009f7e <lcpParseAuthProtocolOption+0x160>
         {
            //If all configuration options are recognizable, but some values are not
            //acceptable, then the implementation must transmit a Configure-Nak
            if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00e      	beq.n	8009f78 <lcpParseAuthProtocolOption+0x15a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d10a      	bne.n	8009f78 <lcpParseAuthProtocolOption+0x15a>
            {
               //Format Authentication-Protocol option
               value[0] = MSB(PPP_PROTOCOL_PAP);
 8009f62:	23c0      	movs	r3, #192	; 0xc0
 8009f64:	743b      	strb	r3, [r7, #16]
               value[1] = LSB(PPP_PROTOCOL_PAP);
 8009f66:	2323      	movs	r3, #35	; 0x23
 8009f68:	747b      	strb	r3, [r7, #17]

               //The option must be modified to a value acceptable to the
               //Configure-Nak sender
               pppAddOption(outPacket, LCP_OPTION_AUTH_PROTOCOL, value, 2);
 8009f6a:	f107 0210 	add.w	r2, r7, #16
 8009f6e:	2302      	movs	r3, #2
 8009f70:	2103      	movs	r1, #3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f002 f914 	bl	800c1a0 <pppAddOption>
            }

            //The value is not acceptable
            error = ERROR_INVALID_VALUE;
 8009f78:	23f0      	movs	r3, #240	; 0xf0
 8009f7a:	82fb      	strh	r3, [r7, #22]
 8009f7c:	e030      	b.n	8009fe0 <lcpParseAuthProtocolOption+0x1c2>
         }
         //CHAP with MD5 authentication protocol allowed?
         else if(context->settings.authProtocol & PPP_AUTH_PROTOCOL_CHAP_MD5)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d016      	beq.n	8009fb8 <lcpParseAuthProtocolOption+0x19a>
         {
            //If all configuration options are recognizable, but some values are not
            //acceptable, then the implementation must transmit a Configure-Nak
            if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_NAK)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d010      	beq.n	8009fb2 <lcpParseAuthProtocolOption+0x194>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b03      	cmp	r3, #3
 8009f96:	d10c      	bne.n	8009fb2 <lcpParseAuthProtocolOption+0x194>
            {
               //Format Authentication-Protocol option
               value[0] = MSB(PPP_PROTOCOL_CHAP);
 8009f98:	23c2      	movs	r3, #194	; 0xc2
 8009f9a:	743b      	strb	r3, [r7, #16]
               value[1] = LSB(PPP_PROTOCOL_CHAP);
 8009f9c:	2323      	movs	r3, #35	; 0x23
 8009f9e:	747b      	strb	r3, [r7, #17]
               value[2] = CHAP_ALGO_ID_CHAP_MD5;
 8009fa0:	2305      	movs	r3, #5
 8009fa2:	74bb      	strb	r3, [r7, #18]

               //The option must be modified to a value acceptable to the
               //Configure-Nak sender
               pppAddOption(outPacket, LCP_OPTION_AUTH_PROTOCOL, value, 3);
 8009fa4:	f107 0210 	add.w	r2, r7, #16
 8009fa8:	2303      	movs	r3, #3
 8009faa:	2103      	movs	r1, #3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f002 f8f7 	bl	800c1a0 <pppAddOption>
            }

            //The value is not acceptable
            error = ERROR_INVALID_VALUE;
 8009fb2:	23f0      	movs	r3, #240	; 0xf0
 8009fb4:	82fb      	strh	r3, [r7, #22]
 8009fb6:	e013      	b.n	8009fe0 <lcpParseAuthProtocolOption+0x1c2>
         else
         {
            //If some configuration options received in the Configure-Request are not
            //recognizable or not acceptable for negotiation, then the implementation
            //must transmit a Configure-Reject
            if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_REJ)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00e      	beq.n	8009fdc <lcpParseAuthProtocolOption+0x1be>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d10a      	bne.n	8009fdc <lcpParseAuthProtocolOption+0x1be>
            {
               //The options field of the Configure-Reject packet is filled
               //with the unrecognized options from the Configure-Request
               pppAddOption(outPacket, option->type, (void *) &option->protocol,
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	7819      	ldrb	r1, [r3, #0]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	1c9a      	adds	r2, r3, #2
                  option->length - sizeof(PppOption));
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	785b      	ldrb	r3, [r3, #1]
               pppAddOption(outPacket, option->type, (void *) &option->protocol,
 8009fd2:	3b02      	subs	r3, #2
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f002 f8e2 	bl	800c1a0 <pppAddOption>
            }

            //The option is not acceptable for negotiation
            error = ERROR_INVALID_TYPE;
 8009fdc:	23ef      	movs	r3, #239	; 0xef
 8009fde:	82fb      	strh	r3, [r7, #22]
         }
      }
   }

   //Return status code
   return error;
 8009fe0:	8afb      	ldrh	r3, [r7, #22]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <lcpParseMagicNumberOption>:
 * @return Error code
 **/

error_t lcpParseMagicNumberOption(PppContext *context,
   LcpMagicNumberOption *option, PppConfigurePacket *outPacket)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b086      	sub	sp, #24
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpMagicNumberOption))
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	785b      	ldrb	r3, [r3, #1]
 8009ffa:	2b06      	cmp	r3, #6
 8009ffc:	d11d      	bne.n	800a03a <lcpParseMagicNumberOption+0x50>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d017      	beq.n	800a034 <lcpParseMagicNumberOption+0x4a>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d113      	bne.n	800a034 <lcpParseMagicNumberOption+0x4a>
      {
         //Save Magic-Number option
         context->peerConfig.magicNumber = ntohl(option->magicNumber);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a012:	4618      	mov	r0, r3
 800a014:	f7f6 fad2 	bl	80005bc <swapInt32>
 800a018:	4602      	mov	r2, r0
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_MAGIC_NUMBER, (void *) &option->magicNumber,
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	1c9a      	adds	r2, r3, #2
            option->length - sizeof(PppOption));
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	785b      	ldrb	r3, [r3, #1]
         pppAddOption(outPacket, LCP_OPTION_MAGIC_NUMBER, (void *) &option->magicNumber,
 800a028:	3b02      	subs	r3, #2
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2105      	movs	r1, #5
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f002 f8b6 	bl	800c1a0 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800a034:	2300      	movs	r3, #0
 800a036:	82fb      	strh	r3, [r7, #22]
 800a038:	e001      	b.n	800a03e <lcpParseMagicNumberOption+0x54>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800a03a:	23eb      	movs	r3, #235	; 0xeb
 800a03c:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800a03e:	8afb      	ldrh	r3, [r7, #22]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <lcpParsePfcOption>:
 * @return Error code
 **/

error_t lcpParsePfcOption(PppContext *context,
   LcpPfcOption *option, PppConfigurePacket *outPacket)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpPfcOption))
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	785b      	ldrb	r3, [r3, #1]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d113      	bne.n	800a084 <lcpParsePfcOption+0x3c>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00d      	beq.n	800a07e <lcpParsePfcOption+0x36>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	2b02      	cmp	r3, #2
 800a068:	d109      	bne.n	800a07e <lcpParsePfcOption+0x36>
      {
         //Save Protocol-Field-Compression option
         context->peerConfig.pfc = TRUE;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_PFC, NULL, 0);
 800a072:	2300      	movs	r3, #0
 800a074:	2200      	movs	r2, #0
 800a076:	2107      	movs	r1, #7
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f002 f891 	bl	800c1a0 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800a07e:	2300      	movs	r3, #0
 800a080:	82fb      	strh	r3, [r7, #22]
 800a082:	e001      	b.n	800a088 <lcpParsePfcOption+0x40>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800a084:	23eb      	movs	r3, #235	; 0xeb
 800a086:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800a088:	8afb      	ldrh	r3, [r7, #22]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <lcpParseAcfcOption>:
 * @return Error code
 **/

error_t lcpParseAcfcOption(PppContext *context,
   LcpAcfcOption *option, PppConfigurePacket *outPacket)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b086      	sub	sp, #24
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
   error_t error;

   //Check length field
   if(option->length == sizeof(LcpAcfcOption))
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	785b      	ldrb	r3, [r3, #1]
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d113      	bne.n	800a0ce <lcpParseAcfcOption+0x3c>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      if(outPacket != NULL && outPacket->code == PPP_CODE_CONFIGURE_ACK)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00d      	beq.n	800a0c8 <lcpParseAcfcOption+0x36>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d109      	bne.n	800a0c8 <lcpParseAcfcOption+0x36>
      {
         //Save Address-and-Control-Field-Compression option
         context->peerConfig.acfc = TRUE;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

         //The options field of the Configure-Ack packet contains the
         //configuration options that the sender is acknowledging
         pppAddOption(outPacket, LCP_OPTION_ACFC, NULL, 0);
 800a0bc:	2300      	movs	r3, #0
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2108      	movs	r1, #8
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f002 f86c 	bl	800c1a0 <pppAddOption>
      }

      //The value is acceptable
      error = NO_ERROR;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	82fb      	strh	r3, [r7, #22]
 800a0cc:	e001      	b.n	800a0d2 <lcpParseAcfcOption+0x40>
   }
   else
   {
      //Invalid length field
      error = ERROR_INVALID_LENGTH;
 800a0ce:	23eb      	movs	r3, #235	; 0xeb
 800a0d0:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 800a0d2:	8afb      	ldrh	r3, [r7, #22]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <papStartAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t papStartAuth(PppContext *context)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nStarting PAP authentication...\r\n");
 800a0e4:	f7f6 faa1 	bl	800062a <osSuspendAllTasks>
 800a0e8:	4b15      	ldr	r3, [pc, #84]	; (800a140 <papStartAuth+0x64>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	2222      	movs	r2, #34	; 0x22
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	4814      	ldr	r0, [pc, #80]	; (800a144 <papStartAuth+0x68>)
 800a0f4:	f00e f886 	bl	8018204 <fwrite>
 800a0f8:	f7f6 faa2 	bl	8000640 <osResumeAllTasks>

   //Check whether the other end of the PPP link is being authenticated
   if(context->localConfig.authProtocol == PPP_PROTOCOL_PAP)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800a102:	f24c 0223 	movw	r2, #49187	; 0xc023
 800a106:	4293      	cmp	r3, r2
 800a108:	d103      	bne.n	800a112 <papStartAuth+0x36>
   {
      //Switch to the Started state
      context->papFsm.localState = PAP_STATE_1_STARTED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   }

   //Check whether the other end of the PPP link is the authenticator
   if(context->peerConfig.authProtocol == PPP_PROTOCOL_PAP)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800a118:	f24c 0223 	movw	r2, #49187	; 0xc023
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d10a      	bne.n	800a136 <papStartAuth+0x5a>
   {
      //Initialize restart counter
      context->papFsm.restartCounter = PAP_MAX_REQUESTS;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2205      	movs	r2, #5
 800a124:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      //Send Authenticate-Request packet
      papSendAuthReq(context);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f9ff 	bl	800a52c <papSendAuthReq>
      //Switch to the Req-Sent state
      context->papFsm.peerState = PAP_STATE_2_REQ_SENT;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2202      	movs	r2, #2
 800a132:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   }

   //Successful processing
   return NO_ERROR;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20000058 	.word	0x20000058
 800a144:	0801a044 	.word	0x0801a044

0800a148 <papAbortAuth>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t papAbortAuth(PppContext *context)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nAborting PAP authentication...\r\n");
 800a150:	f7f6 fa6b 	bl	800062a <osSuspendAllTasks>
 800a154:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <papAbortAuth+0x3c>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2222      	movs	r2, #34	; 0x22
 800a15c:	2101      	movs	r1, #1
 800a15e:	480a      	ldr	r0, [pc, #40]	; (800a188 <papAbortAuth+0x40>)
 800a160:	f00e f850 	bl	8018204 <fwrite>
 800a164:	f7f6 fa6c 	bl	8000640 <osResumeAllTasks>

   //Abort PAP authentication process
   context->papFsm.localState = PAP_STATE_0_INITIAL;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

   //Successful processing
   return NO_ERROR;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000058 	.word	0x20000058
 800a188:	0801a068 	.word	0x0801a068

0800a18c <papTick>:
 *
 * @param[in] context PPP context
 **/

void papTick(PppContext *context)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
   //Check whether the restart timer is running
   if(context->papFsm.peerState == PAP_STATE_2_REQ_SENT)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d127      	bne.n	800a1ee <papTick+0x62>
   {
      //Get current time
      systime_t time = osGetSystemTime();
 800a19e:	f7f6 fafe 	bl	800079e <osGetSystemTime>
 800a1a2:	60f8      	str	r0, [r7, #12]

      //Check restart timer
      if((time - context->papFsm.timestamp) >= PAP_RESTART_TIMER)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d91b      	bls.n	800a1ee <papTick+0x62>
      {
         //Debug message
         TRACE_INFO("\r\nPAP Timeout event\r\n");
 800a1b6:	f7f6 fa38 	bl	800062a <osSuspendAllTasks>
 800a1ba:	4b0f      	ldr	r3, [pc, #60]	; (800a1f8 <papTick+0x6c>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	2215      	movs	r2, #21
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	480d      	ldr	r0, [pc, #52]	; (800a1fc <papTick+0x70>)
 800a1c6:	f00e f81d 	bl	8018204 <fwrite>
 800a1ca:	f7f6 fa39 	bl	8000640 <osResumeAllTasks>

         //Check whether the restart counter is greater than zero
         if(context->papFsm.restartCounter > 0)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d003      	beq.n	800a1e0 <papTick+0x54>
         {
            //Retransmit the Authenticate-Request packet
            papSendAuthReq(context);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f9a7 	bl	800a52c <papSendAuthReq>
            //Authentication failed
            lcpClose(context);
         }
      }
   }
}
 800a1de:	e006      	b.n	800a1ee <papTick+0x62>
            context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
            lcpClose(context);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7fe fd0d 	bl	8008c08 <lcpClose>
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000058 	.word	0x20000058
 800a1fc:	0801a08c 	.word	0x0801a08c

0800a200 <papProcessPacket>:
 * @param[in] length Length of the packet, in bytes
 **/

void papProcessPacket(PppContext *context,
   const PppPacket *packet, size_t length)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
   //Ensure the length of the incoming PAP packet is valid
   if(length < sizeof(PppPacket))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d94c      	bls.n	800a2ac <papProcessPacket+0xac>
      return;

   //Check the length field
   if(ntohs(packet->length) > length)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	885b      	ldrh	r3, [r3, #2]
 800a216:	b29b      	uxth	r3, r3
 800a218:	4618      	mov	r0, r3
 800a21a:	f7f6 f9c1 	bl	80005a0 <swapInt16>
 800a21e:	4603      	mov	r3, r0
 800a220:	461a      	mov	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4293      	cmp	r3, r2
 800a226:	d343      	bcc.n	800a2b0 <papProcessPacket+0xb0>
      return;
   if(ntohs(packet->length) < sizeof(PppPacket))
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	885b      	ldrh	r3, [r3, #2]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	4618      	mov	r0, r3
 800a230:	f7f6 f9b6 	bl	80005a0 <swapInt16>
 800a234:	4603      	mov	r3, r0
 800a236:	2b03      	cmp	r3, #3
 800a238:	d93c      	bls.n	800a2b4 <papProcessPacket+0xb4>
      return;

   //Save the length of the PAP packet
   length = ntohs(packet->length);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	885b      	ldrh	r3, [r3, #2]
 800a23e:	b29b      	uxth	r3, r3
 800a240:	4618      	mov	r0, r3
 800a242:	f7f6 f9ad 	bl	80005a0 <swapInt16>
 800a246:	4603      	mov	r3, r0
 800a248:	607b      	str	r3, [r7, #4]

   //Debug message
   TRACE_INFO("PAP packet received (%" PRIuSIZE " bytes)...\r\n", length);
 800a24a:	f7f6 f9ee 	bl	800062a <osSuspendAllTasks>
 800a24e:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <papProcessPacket+0xc0>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	491b      	ldr	r1, [pc, #108]	; (800a2c4 <papProcessPacket+0xc4>)
 800a258:	4618      	mov	r0, r3
 800a25a:	f00d ff73 	bl	8018144 <fiprintf>
 800a25e:	f7f6 f9ef 	bl	8000640 <osResumeAllTasks>
   pppDumpPacket(packet, length, PPP_PROTOCOL_PAP);

   //Because the Authenticate-Ack might be lost, the authenticator must
   //allow repeated Authenticate-Request packets after completing the
   //Authentication phase
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d004      	beq.n	800a276 <papProcessPacket+0x76>
      context->pppPhase != PPP_PHASE_NETWORK)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   if(context->pppPhase != PPP_PHASE_AUTHENTICATE &&
 800a272:	2b03      	cmp	r3, #3
 800a274:	d120      	bne.n	800a2b8 <papProcessPacket+0xb8>
      //Any packets received during any other phase must be silently discarded
      return;
   }

   //Check PAP code field
   switch(packet->code)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d00a      	beq.n	800a294 <papProcessPacket+0x94>
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d00e      	beq.n	800a2a0 <papProcessPacket+0xa0>
 800a282:	2b01      	cmp	r3, #1
 800a284:	d000      	beq.n	800a288 <papProcessPacket+0x88>
      papProcessAuthNak(context, (PapAuthNakPacket *) packet, length);
      break;
   //Unknown code field
   default:
      //Silently drop the incoming packet
      break;
 800a286:	e018      	b.n	800a2ba <papProcessPacket+0xba>
      papProcessAuthReq(context, (PapAuthReqPacket *) packet, length);
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 f81b 	bl	800a2c8 <papProcessAuthReq>
      break;
 800a292:	e012      	b.n	800a2ba <papProcessPacket+0xba>
      papProcessAuthAck(context, (PapAuthAckPacket *) packet, length);
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 f8bd 	bl	800a418 <papProcessAuthAck>
      break;
 800a29e:	e00c      	b.n	800a2ba <papProcessPacket+0xba>
      papProcessAuthNak(context, (PapAuthNakPacket *) packet, length);
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 f907 	bl	800a4b8 <papProcessAuthNak>
      break;
 800a2aa:	e006      	b.n	800a2ba <papProcessPacket+0xba>
      return;
 800a2ac:	bf00      	nop
 800a2ae:	e004      	b.n	800a2ba <papProcessPacket+0xba>
      return;
 800a2b0:	bf00      	nop
 800a2b2:	e002      	b.n	800a2ba <papProcessPacket+0xba>
      return;
 800a2b4:	bf00      	nop
 800a2b6:	e000      	b.n	800a2ba <papProcessPacket+0xba>
      return;
 800a2b8:	bf00      	nop
   }
}
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	20000058 	.word	0x20000058
 800a2c4:	0801a0a4 	.word	0x0801a0a4

0800a2c8 <papProcessAuthReq>:
 * @return Error code
 **/

error_t papProcessAuthReq(PppContext *context,
   const PapAuthReqPacket *authReqPacket, size_t length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
   bool_t status;
   size_t usernameLen;
   const uint8_t *p;

   //Debug message
   TRACE_INFO("\r\nPAP Authenticate-Request packet received\r\n");
 800a2d4:	f7f6 f9a9 	bl	800062a <osSuspendAllTasks>
 800a2d8:	4b4d      	ldr	r3, [pc, #308]	; (800a410 <papProcessAuthReq+0x148>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	222c      	movs	r2, #44	; 0x2c
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	484c      	ldr	r0, [pc, #304]	; (800a414 <papProcessAuthReq+0x14c>)
 800a2e4:	f00d ff8e 	bl	8018204 <fwrite>
 800a2e8:	f7f6 f9aa 	bl	8000640 <osResumeAllTasks>

   //Make sure the Authenticate-Request packet is acceptable
   if(context->localConfig.authProtocol != PPP_PROTOCOL_PAP)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800a2f2:	f24c 0223 	movw	r2, #49187	; 0xc023
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d001      	beq.n	800a2fe <papProcessAuthReq+0x36>
      return ERROR_FAILURE;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e083      	b.n	800a406 <papProcessAuthReq+0x13e>

   //Check the length of the packet
   if(length < sizeof(PapAuthReqPacket))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b04      	cmp	r3, #4
 800a302:	d801      	bhi.n	800a308 <papProcessAuthReq+0x40>
      return ERROR_INVALID_LENGTH;
 800a304:	23eb      	movs	r3, #235	; 0xeb
 800a306:	e07e      	b.n	800a406 <papProcessAuthReq+0x13e>

   //Retrieve the length of the Peer-ID field
   usernameLen = authReqPacket->peerIdLength;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	791b      	ldrb	r3, [r3, #4]
 800a30c:	61bb      	str	r3, [r7, #24]

   //Malformed Authenticate-Request packet?
   if(length < (sizeof(PapAuthReqPacket) + 1 + usernameLen))
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	3306      	adds	r3, #6
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	429a      	cmp	r2, r3
 800a316:	d201      	bcs.n	800a31c <papProcessAuthReq+0x54>
      return ERROR_INVALID_LENGTH;
 800a318:	23eb      	movs	r3, #235	; 0xeb
 800a31a:	e074      	b.n	800a406 <papProcessAuthReq+0x13e>

   //Limit the length of the string
   usernameLen = MIN(usernameLen, PPP_MAX_USERNAME_LEN);
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	2b1f      	cmp	r3, #31
 800a320:	bf28      	it	cs
 800a322:	231f      	movcs	r3, #31
 800a324:	61bb      	str	r3, [r7, #24]
   //Copy the name of the peer to be identified
   memcpy(context->peerName, authReqPacket->peerId, usernameLen);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	3305      	adds	r3, #5
 800a330:	69ba      	ldr	r2, [r7, #24]
 800a332:	4619      	mov	r1, r3
 800a334:	f00d ffa8 	bl	8018288 <memcpy>
   //Properly terminate the string with a NULL character
   context->peerName[usernameLen] = '\0';
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	4413      	add	r3, r2
 800a33e:	3360      	adds	r3, #96	; 0x60
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]

   //Point to the Passwd-Length field
   p = authReqPacket->peerId + usernameLen;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	1d5a      	adds	r2, r3, #5
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	4413      	add	r3, r2
 800a34c:	617b      	str	r3, [r7, #20]

   //Save the length of Password field
   context->papFsm.passwordLen = p[0];
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   //Point to the Password field
   context->papFsm.password = p + 1;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

   //Malformed Authenticate-Request packet?
   if(length < (sizeof(PapAuthReqPacket) + 1 + usernameLen + context->papFsm.passwordLen))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	4413      	add	r3, r2
 800a36e:	3306      	adds	r3, #6
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	429a      	cmp	r2, r3
 800a374:	d201      	bcs.n	800a37a <papProcessAuthReq+0xb2>
      return ERROR_INVALID_LENGTH;
 800a376:	23eb      	movs	r3, #235	; 0xeb
 800a378:	e045      	b.n	800a406 <papProcessAuthReq+0x13e>

   //Invoke user-defined callback, if any
   if(context->settings.authCallback != NULL)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d009      	beq.n	800a396 <papProcessAuthReq+0xce>
   {
      //Perfom username and password verification
      status = context->settings.authCallback(context->interface,
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	6990      	ldr	r0, [r2, #24]
         context->peerName);
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	3260      	adds	r2, #96	; 0x60
      status = context->settings.authCallback(context->interface,
 800a38e:	4611      	mov	r1, r2
 800a390:	4798      	blx	r3
 800a392:	61f8      	str	r0, [r7, #28]
 800a394:	e001      	b.n	800a39a <papProcessAuthReq+0xd2>
   }
   else
   {
      //Unable to perform authentication...
      status = FALSE;
 800a396:	2300      	movs	r3, #0
 800a398:	61fb      	str	r3, [r7, #28]
   }

   //Successful authentication?
   if(status)
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d024      	beq.n	800a3ea <papProcessAuthReq+0x122>
   {
      //If the Peer-ID/Password pair received in the Authenticate-Request
      //is both recognizable and acceptable, then the authenticator must
      //transmit an Authenticate-Ack packet
      papSendAuthAck(context, authReqPacket->identifier);
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	785b      	ldrb	r3, [r3, #1]
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 f958 	bl	800a65c <papSendAuthAck>

      //Switch to the Ack-Sent state
      context->papFsm.localState = PAP_STATE_4_ACK_SENT;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2204      	movs	r2, #4
 800a3b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      //The user has been successfully authenticated
      context->localAuthDone = TRUE;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      //Check whether PPP authentication is complete
      if(context->localAuthDone && context->peerAuthDone)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01e      	beq.n	800a404 <papProcessAuthReq+0x13c>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d019      	beq.n	800a404 <papProcessAuthReq+0x13c>
      {
         //Check current PPP phase
         if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d114      	bne.n	800a404 <papProcessAuthReq+0x13c>
         {
            //Advance to the Network phase
            context->pppPhase = PPP_PHASE_NETWORK;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2203      	movs	r2, #3
 800a3de:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
            //IPCP Open event
            ipcpOpen(context);
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f7fd fd36 	bl	8007e54 <ipcpOpen>
 800a3e8:	e00c      	b.n	800a404 <papProcessAuthReq+0x13c>
   else
   {
      //If the Peer-ID/Password pair received in the Authenticate-Request
      //is not recognizable or acceptable, then the authenticator must
      //transmit an Authenticate-Nak packet
      papSendAuthNak(context, authReqPacket->identifier);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	785b      	ldrb	r3, [r3, #1]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 f981 	bl	800a6f8 <papSendAuthNak>

      //Switch to the Nak-Sent state
      context->papFsm.localState = PAP_STATE_6_NAK_SENT;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2206      	movs	r2, #6
 800a3fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      //The authenticator should take action to terminate the link
      lcpClose(context);
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f7fe fc02 	bl	8008c08 <lcpClose>
   }

   //Successful processing
   return NO_ERROR;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3720      	adds	r7, #32
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20000058 	.word	0x20000058
 800a414:	0801a0c8 	.word	0x0801a0c8

0800a418 <papProcessAuthAck>:
 * @return Error code
 **/

error_t papProcessAuthAck(PppContext *context,
   const PapAuthAckPacket *authAckPacket, size_t length)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nPAP Authenticate-Ack packet received\r\n");
 800a424:	f7f6 f901 	bl	800062a <osSuspendAllTasks>
 800a428:	4b21      	ldr	r3, [pc, #132]	; (800a4b0 <papProcessAuthAck+0x98>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	2228      	movs	r2, #40	; 0x28
 800a430:	2101      	movs	r1, #1
 800a432:	4820      	ldr	r0, [pc, #128]	; (800a4b4 <papProcessAuthAck+0x9c>)
 800a434:	f00d fee6 	bl	8018204 <fwrite>
 800a438:	f7f6 f902 	bl	8000640 <osResumeAllTasks>

   //Make sure the Authenticate-Ack packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_PAP)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800a442:	f24c 0223 	movw	r2, #49187	; 0xc023
 800a446:	4293      	cmp	r3, r2
 800a448:	d001      	beq.n	800a44e <papProcessAuthAck+0x36>
      return ERROR_FAILURE;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e02c      	b.n	800a4a8 <papProcessAuthAck+0x90>

   //Check the length of the packet
   if(length < sizeof(PapAuthAckPacket))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b04      	cmp	r3, #4
 800a452:	d801      	bhi.n	800a458 <papProcessAuthAck+0x40>
      return ERROR_INVALID_LENGTH;
 800a454:	23eb      	movs	r3, #235	; 0xeb
 800a456:	e027      	b.n	800a4a8 <papProcessAuthAck+0x90>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(authAckPacket->identifier != context->papFsm.identifier)
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	785a      	ldrb	r2, [r3, #1]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a462:	429a      	cmp	r2, r3
 800a464:	d001      	beq.n	800a46a <papProcessAuthAck+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800a466:	23d6      	movs	r3, #214	; 0xd6
 800a468:	e01e      	b.n	800a4a8 <papProcessAuthAck+0x90>

   //Switch to the Ack-Rcvd state
   context->papFsm.peerState = PAP_STATE_5_ACK_RCVD;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2205      	movs	r2, #5
 800a46e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   //The user name has been accepted by the authenticator
   context->peerAuthDone = TRUE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check whether PPP authentication is complete
   if(context->localAuthDone && context->peerAuthDone)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a480:	2b00      	cmp	r3, #0
 800a482:	d010      	beq.n	800a4a6 <papProcessAuthAck+0x8e>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00b      	beq.n	800a4a6 <papProcessAuthAck+0x8e>
   {
      //Check current PPP phase
      if(context->pppPhase == PPP_PHASE_AUTHENTICATE)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a494:	2b02      	cmp	r3, #2
 800a496:	d106      	bne.n	800a4a6 <papProcessAuthAck+0x8e>
      {
         //Advance to the Network phase
         context->pppPhase = PPP_PHASE_NETWORK;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2203      	movs	r2, #3
 800a49c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (IPV4_SUPPORT == ENABLED)
         //IPCP Open event
         ipcpOpen(context);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7fd fcd7 	bl	8007e54 <ipcpOpen>
#endif
      }
   }

   //Successful processing
   return NO_ERROR;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	20000058 	.word	0x20000058
 800a4b4:	0801a0f8 	.word	0x0801a0f8

0800a4b8 <papProcessAuthNak>:
 * @return Error code
 **/

error_t papProcessAuthNak(PppContext *context,
   const PapAuthNakPacket *authNakPacket, size_t length)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_INFO("\r\nPAP Authenticate-Nak packet received\r\n");
 800a4c4:	f7f6 f8b1 	bl	800062a <osSuspendAllTasks>
 800a4c8:	4b16      	ldr	r3, [pc, #88]	; (800a524 <papProcessAuthNak+0x6c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	2228      	movs	r2, #40	; 0x28
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	4815      	ldr	r0, [pc, #84]	; (800a528 <papProcessAuthNak+0x70>)
 800a4d4:	f00d fe96 	bl	8018204 <fwrite>
 800a4d8:	f7f6 f8b2 	bl	8000640 <osResumeAllTasks>

   //Make sure the Authenticate-Nak packet is acceptable
   if(context->peerConfig.authProtocol != PPP_PROTOCOL_PAP)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800a4e2:	f24c 0223 	movw	r2, #49187	; 0xc023
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d001      	beq.n	800a4ee <papProcessAuthNak+0x36>
      return ERROR_FAILURE;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e015      	b.n	800a51a <papProcessAuthNak+0x62>

   //Check the length of the packet
   if(length < sizeof(PapAuthNakPacket))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b04      	cmp	r3, #4
 800a4f2:	d801      	bhi.n	800a4f8 <papProcessAuthNak+0x40>
      return ERROR_INVALID_LENGTH;
 800a4f4:	23eb      	movs	r3, #235	; 0xeb
 800a4f6:	e010      	b.n	800a51a <papProcessAuthNak+0x62>

   //When a packet is received with an invalid Identifier field, the
   //packet is silently discarded without affecting the automaton
   if(authNakPacket->identifier != context->papFsm.identifier)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	785a      	ldrb	r2, [r3, #1]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a502:	429a      	cmp	r2, r3
 800a504:	d001      	beq.n	800a50a <papProcessAuthNak+0x52>
      return ERROR_WRONG_IDENTIFIER;
 800a506:	23d6      	movs	r3, #214	; 0xd6
 800a508:	e007      	b.n	800a51a <papProcessAuthNak+0x62>

   //Switch to the Nak-Rcvd state
   context->papFsm.peerState = PAP_STATE_7_NAK_RCVD;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2207      	movs	r2, #7
 800a50e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   //Authentication failed
   lcpClose(context);
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f7fe fb78 	bl	8008c08 <lcpClose>

   //Successful processing
   return NO_ERROR;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000058 	.word	0x20000058
 800a528:	0801a124 	.word	0x0801a124

0800a52c <papSendAuthReq>:
 * @param[in] context PPP context
 * @return Error code
 **/

error_t papSendAuthReq(PppContext *context)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b08a      	sub	sp, #40	; 0x28
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
   uint8_t *p;
   NetBuffer *buffer;
   PapAuthReqPacket *authReqPacket;

   //Get the length of the user name
   usernameLen = strlen(context->username);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3320      	adds	r3, #32
 800a538:	4618      	mov	r0, r3
 800a53a:	f7f5 fe59 	bl	80001f0 <strlen>
 800a53e:	6278      	str	r0, [r7, #36]	; 0x24
   //Get the length of the password
   passwordLen = strlen(context->password);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3340      	adds	r3, #64	; 0x40
 800a544:	4618      	mov	r0, r3
 800a546:	f7f5 fe53 	bl	80001f0 <strlen>
 800a54a:	6238      	str	r0, [r7, #32]

   //Calculate the length of the Authenticate-Request packet
   length = sizeof(PapAuthReqPacket) + 1 + usernameLen + passwordLen;
 800a54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	4413      	add	r3, r2
 800a552:	3306      	adds	r3, #6
 800a554:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the packet
   buffer = pppAllocBuffer(length, &offset);
 800a556:	f107 0308 	add.w	r3, r7, #8
 800a55a:	4619      	mov	r1, r3
 800a55c:	69f8      	ldr	r0, [r7, #28]
 800a55e:	f000 fbab 	bl	800acb8 <pppAllocBuffer>
 800a562:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <papSendAuthReq+0x42>
      return ERROR_OUT_OF_MEMORY;
 800a56a:	2364      	movs	r3, #100	; 0x64
 800a56c:	e06e      	b.n	800a64c <papSendAuthReq+0x120>

   //Point to the Authenticate-Request packet
   authReqPacket = netBufferAt(buffer, offset);
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	4619      	mov	r1, r3
 800a572:	69b8      	ldr	r0, [r7, #24]
 800a574:	f7f7 ff1b 	bl	80023ae <netBufferAt>
 800a578:	6178      	str	r0, [r7, #20]

   //Format packet header
   authReqPacket->code = PAP_CODE_AUTH_REQ;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2201      	movs	r2, #1
 800a57e:	701a      	strb	r2, [r3, #0]
   authReqPacket->identifier = ++context->papFsm.identifier;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a586:	3301      	adds	r3, #1
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	705a      	strb	r2, [r3, #1]
   authReqPacket->length = htons(length);
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7f5 fffe 	bl	80005a0 <swapInt16>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	805a      	strh	r2, [r3, #2]

   //The Peer-ID-Length field indicates the length of Peer-ID field
   authReqPacket->peerIdLength = usernameLen;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	711a      	strb	r2, [r3, #4]
   //Append Peer-ID
   memcpy(authReqPacket->peerId, context->username, usernameLen);
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	1d58      	adds	r0, r3, #5
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3320      	adds	r3, #32
 800a5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5be:	4619      	mov	r1, r3
 800a5c0:	f00d fe62 	bl	8018288 <memcpy>

   //Point to the Passwd-Length field
   p = authReqPacket->peerId + usernameLen;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	1d5a      	adds	r2, r3, #5
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	4413      	add	r3, r2
 800a5cc:	613b      	str	r3, [r7, #16]
   //The Passwd-Length field indicates the length of Password field
   p[0] = passwordLen;
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	701a      	strb	r2, [r3, #0]

   //Append Password
   memcpy(p + 1, context->password, passwordLen);
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	1c58      	adds	r0, r3, #1
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3340      	adds	r3, #64	; 0x40
 800a5de:	6a3a      	ldr	r2, [r7, #32]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	f00d fe51 	bl	8018288 <memcpy>

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	69b8      	ldr	r0, [r7, #24]
 800a5f0:	f7f7 fe37 	bl	8002262 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending PAP Authenticate-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800a5f4:	f7f6 f819 	bl	800062a <osSuspendAllTasks>
 800a5f8:	4b16      	ldr	r3, [pc, #88]	; (800a654 <papSendAuthReq+0x128>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	4915      	ldr	r1, [pc, #84]	; (800a658 <papSendAuthReq+0x12c>)
 800a602:	4618      	mov	r0, r3
 800a604:	f00d fd9e 	bl	8018144 <fiprintf>
 800a608:	f7f6 f81a 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) authReqPacket, length, PPP_PROTOCOL_PAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_PAP);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6998      	ldr	r0, [r3, #24]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	f24c 0323 	movw	r3, #49187	; 0xc023
 800a616:	69b9      	ldr	r1, [r7, #24]
 800a618:	f000 f9d8 	bl	800a9cc <pppSendFrame>
 800a61c:	4603      	mov	r3, r0
 800a61e:	81fb      	strh	r3, [r7, #14]

   //The restart counter is decremented each time a Authenticate-Request is sent
   if(context->papFsm.restartCounter > 0)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d006      	beq.n	800a638 <papSendAuthReq+0x10c>
      context->papFsm.restartCounter--;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a630:	1e5a      	subs	r2, r3, #1
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

   //Save the time at which the packet was sent
   context->papFsm.timestamp = osGetSystemTime();
 800a638:	f7f6 f8b1 	bl	800079e <osGetSystemTime>
 800a63c:	4602      	mov	r2, r0
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

   //Free previously allocated memory block
   netBufferFree(buffer);
 800a644:	69b8      	ldr	r0, [r7, #24]
 800a646:	f7f7 fddb 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 800a64a:	89fb      	ldrh	r3, [r7, #14]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3728      	adds	r7, #40	; 0x28
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20000058 	.word	0x20000058
 800a658:	0801a150 	.word	0x0801a150

0800a65c <papSendAuthAck>:
 * @param[in] identifier Identifier field
 * @return Error code
 **/

error_t papSendAuthAck(PppContext *context, uint8_t identifier)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
   size_t offset;
   NetBuffer *buffer;
   PapAuthAckPacket *authAckPacket;

   //Retrieve the length of the Authenticate-Ack packet
   length = sizeof(PapAuthAckPacket);
 800a668:	2305      	movs	r3, #5
 800a66a:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Authenticate-Ack packet
   buffer = pppAllocBuffer(length, &offset);
 800a66c:	f107 030c 	add.w	r3, r7, #12
 800a670:	4619      	mov	r1, r3
 800a672:	69f8      	ldr	r0, [r7, #28]
 800a674:	f000 fb20 	bl	800acb8 <pppAllocBuffer>
 800a678:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d101      	bne.n	800a684 <papSendAuthAck+0x28>
      return ERROR_OUT_OF_MEMORY;
 800a680:	2364      	movs	r3, #100	; 0x64
 800a682:	e031      	b.n	800a6e8 <papSendAuthAck+0x8c>

   //Point to the Authenticate-Ack packet
   authAckPacket = netBufferAt(buffer, offset);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4619      	mov	r1, r3
 800a688:	69b8      	ldr	r0, [r7, #24]
 800a68a:	f7f7 fe90 	bl	80023ae <netBufferAt>
 800a68e:	6178      	str	r0, [r7, #20]

   //Format packet header
   authAckPacket->code = PAP_CODE_AUTH_ACK;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	2202      	movs	r2, #2
 800a694:	701a      	strb	r2, [r3, #0]
   authAckPacket->identifier = identifier;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	78fa      	ldrb	r2, [r7, #3]
 800a69a:	705a      	strb	r2, [r3, #1]
   authAckPacket->length = htons(length);
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7f5 ff7d 	bl	80005a0 <swapInt16>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	805a      	strh	r2, [r3, #2]

   //The Message field is zero or more octets, and its contents are
   //implementation dependent
   authAckPacket->msgLength = 0;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	711a      	strb	r2, [r3, #4]

   //Debug message
   TRACE_INFO("Sending PAP Authenticate-Ack packet (%" PRIuSIZE " bytes)...\r\n", length);
 800a6b4:	f7f5 ffb9 	bl	800062a <osSuspendAllTasks>
 800a6b8:	4b0d      	ldr	r3, [pc, #52]	; (800a6f0 <papSendAuthAck+0x94>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	69fa      	ldr	r2, [r7, #28]
 800a6c0:	490c      	ldr	r1, [pc, #48]	; (800a6f4 <papSendAuthAck+0x98>)
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f00d fd3e 	bl	8018144 <fiprintf>
 800a6c8:	f7f5 ffba 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) authAckPacket, length, PPP_PROTOCOL_PAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_PAP);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6998      	ldr	r0, [r3, #24]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	f24c 0323 	movw	r3, #49187	; 0xc023
 800a6d6:	69b9      	ldr	r1, [r7, #24]
 800a6d8:	f000 f978 	bl	800a9cc <pppSendFrame>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800a6e0:	69b8      	ldr	r0, [r7, #24]
 800a6e2:	f7f7 fd8d 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 800a6e6:	8a7b      	ldrh	r3, [r7, #18]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3720      	adds	r7, #32
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20000058 	.word	0x20000058
 800a6f4:	0801a188 	.word	0x0801a188

0800a6f8 <papSendAuthNak>:
 * @param[in] identifier Identifier field
 * @return Error code
 **/

error_t papSendAuthNak(PppContext *context, uint8_t identifier)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b088      	sub	sp, #32
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
   size_t offset;
   NetBuffer *buffer;
   PapAuthNakPacket *authNakPacket;

   //Retrieve the length of the Authenticate-Nak packet
   length = sizeof(PapAuthNakPacket);
 800a704:	2305      	movs	r3, #5
 800a706:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Authenticate-Nak packet
   buffer = pppAllocBuffer(length, &offset);
 800a708:	f107 030c 	add.w	r3, r7, #12
 800a70c:	4619      	mov	r1, r3
 800a70e:	69f8      	ldr	r0, [r7, #28]
 800a710:	f000 fad2 	bl	800acb8 <pppAllocBuffer>
 800a714:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <papSendAuthNak+0x28>
      return ERROR_OUT_OF_MEMORY;
 800a71c:	2364      	movs	r3, #100	; 0x64
 800a71e:	e031      	b.n	800a784 <papSendAuthNak+0x8c>

   //Point to the Authenticate-Nak packet
   authNakPacket = netBufferAt(buffer, offset);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4619      	mov	r1, r3
 800a724:	69b8      	ldr	r0, [r7, #24]
 800a726:	f7f7 fe42 	bl	80023ae <netBufferAt>
 800a72a:	6178      	str	r0, [r7, #20]

   //Format packet header
   authNakPacket->code = PAP_CODE_AUTH_NAK;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2203      	movs	r2, #3
 800a730:	701a      	strb	r2, [r3, #0]
   authNakPacket->identifier = identifier;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	78fa      	ldrb	r2, [r7, #3]
 800a736:	705a      	strb	r2, [r3, #1]
   authNakPacket->length = htons(length);
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7f5 ff2f 	bl	80005a0 <swapInt16>
 800a742:	4603      	mov	r3, r0
 800a744:	461a      	mov	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	805a      	strh	r2, [r3, #2]

   //The Message field is zero or more octets, and its contents are
   //implementation dependent
   authNakPacket->msgLength = 0;
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	2200      	movs	r2, #0
 800a74e:	711a      	strb	r2, [r3, #4]

   //Debug message
   TRACE_INFO("Sending PAP Authenticate-Nak packet (%" PRIuSIZE " bytes)...\r\n", length);
 800a750:	f7f5 ff6b 	bl	800062a <osSuspendAllTasks>
 800a754:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <papSendAuthNak+0x94>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	490c      	ldr	r1, [pc, #48]	; (800a790 <papSendAuthNak+0x98>)
 800a75e:	4618      	mov	r0, r3
 800a760:	f00d fcf0 	bl	8018144 <fiprintf>
 800a764:	f7f5 ff6c 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) authNakPacket, length, PPP_PROTOCOL_PAP);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_PAP);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6998      	ldr	r0, [r3, #24]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	f24c 0323 	movw	r3, #49187	; 0xc023
 800a772:	69b9      	ldr	r1, [r7, #24]
 800a774:	f000 f92a 	bl	800a9cc <pppSendFrame>
 800a778:	4603      	mov	r3, r0
 800a77a:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800a77c:	69b8      	ldr	r0, [r7, #24]
 800a77e:	f7f7 fd3f 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 800a782:	8a7b      	ldrh	r3, [r7, #18]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3720      	adds	r7, #32
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20000058 	.word	0x20000058
 800a790:	0801a1bc 	.word	0x0801a1bc

0800a794 <pppGetDefaultSettings>:
 * @brief Initialize settings with default values
 * @param[out] settings Structure that contains PPP settings
 **/

void pppGetDefaultSettings(PppSettings *settings)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
   //Use default interface
   settings->interface = netGetDefaultInterface();
 800a79c:	f7f7 fc86 	bl	80020ac <netGetDefaultInterface>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	601a      	str	r2, [r3, #0]

   //Default MRU
   settings->mru = PPP_DEFAULT_MRU;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a7ac:	809a      	strh	r2, [r3, #4]
   //Default async control character map
   settings->accm = PPP_DEFAULT_ACCM;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7b4:	609a      	str	r2, [r3, #8]
   //Allowed authentication protocols
   settings->authProtocol = PPP_AUTH_PROTOCOL_PAP | PPP_AUTH_PROTOCOL_CHAP_MD5;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2203      	movs	r2, #3
 800a7ba:	60da      	str	r2, [r3, #12]

   //Random data generation callback function
   settings->randCallback = NULL;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	611a      	str	r2, [r3, #16]
   //PPP authentication callback function
   settings->authCallback = NULL;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	615a      	str	r2, [r3, #20]
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <pppInit>:
 * @param[in] settings PPP specific settings
 * @return Error code
 **/

error_t pppInit(PppContext *context, const PppSettings *settings)
{
 800a7d0:	b5b0      	push	{r4, r5, r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
   error_t error;
   NetInterface *interface;

   //Debug message
   TRACE_INFO("PPP initialization\r\n");
 800a7da:	f7f5 ff26 	bl	800062a <osSuspendAllTasks>
 800a7de:	4b27      	ldr	r3, [pc, #156]	; (800a87c <pppInit+0xac>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	2214      	movs	r2, #20
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	4825      	ldr	r0, [pc, #148]	; (800a880 <pppInit+0xb0>)
 800a7ea:	f00d fd0b 	bl	8018204 <fwrite>
 800a7ee:	f7f5 ff27 	bl	8000640 <osResumeAllTasks>

   //Underlying network interface
   interface = settings->interface;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	60fb      	str	r3, [r7, #12]

   //Initialize PPP context
   memset(context, 0, sizeof(PppContext));
 800a7f8:	f243 7294 	movw	r2, #14228	; 0x3794
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f00d fd66 	bl	80182d0 <memset>

   //Save user settings
   context->settings = *settings;
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	4614      	mov	r4, r2
 800a80a:	461d      	mov	r5, r3
 800a80c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a80e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a810:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a814:	e884 0003 	stmia.w	r4, {r0, r1}
   //CHAP with MD5 authentication is not supported
   context->settings.authProtocol &= ~PPP_AUTH_PROTOCOL_CHAP_MD5;
#endif

   //Attach the PPP context to the network interface
   interface->pppContext = context;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

   //Initialize structure
   context->interface = interface;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	619a      	str	r2, [r3, #24]
   context->timeout = INFINITE_DELAY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a82c:	61da      	str	r2, [r3, #28]

   //Initialize PPP finite state machine
   context->pppPhase = PPP_PHASE_DEAD;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
   context->lcpFsm.state = PPP_STATE_0_INITIAL;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

#if (IPV4_SUPPORT == ENABLED)
   //Initialize IPCP finite state machine
   context->ipcpFsm.state = PPP_STATE_0_INITIAL;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   context->ipv6cpFsm.state = PPP_STATE_0_INITIAL;
#endif

#if (PAP_SUPPORT == ENABLED)
   //Initialize PAP finite state machine
   context->papFsm.localState = PAP_STATE_0_INITIAL;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
   context->papFsm.peerState = PAP_STATE_0_INITIAL;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

#if (CHAP_SUPPORT == ENABLED)
   //Initialize CHAP finite state machine
   context->chapFsm.localState = CHAP_STATE_0_INITIAL;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
   context->chapFsm.peerState = CHAP_STATE_0_INITIAL;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
#endif

   //Attach PPP HDLC driver
   error = netSetDriver(interface, &pppHdlcDriver);
 800a866:	4907      	ldr	r1, [pc, #28]	; (800a884 <pppInit+0xb4>)
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f7f7 f949 	bl	8001b00 <netSetDriver>
 800a86e:	4603      	mov	r3, r0
 800a870:	817b      	strh	r3, [r7, #10]

   //Return status code
   return error;
 800a872:	897b      	ldrh	r3, [r7, #10]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bdb0      	pop	{r4, r5, r7, pc}
 800a87c:	20000058 	.word	0x20000058
 800a880:	0801a1f0 	.word	0x0801a1f0
 800a884:	0801a7ac 	.word	0x0801a7ac

0800a888 <pppTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void pppTick(NetInterface *interface)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
   PppContext *context;

   //PPP driver?
   if(interface->nicDriver->type == NIC_TYPE_PPP)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b02      	cmp	r3, #2
 800a898:	d10f      	bne.n	800a8ba <pppTick+0x32>
   {
      //Point to the PPP context
      context = interface->pppContext;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a8a0:	60fb      	str	r3, [r7, #12]

      //Handle LCP retransmission timer
      lcpTick(context);
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f7fe f9d2 	bl	8008c4c <lcpTick>

#if (IPV4_SUPPORT == ENABLED)
      //Handle IPCP retransmission timer
      ipcpTick(context);
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f7fd fb27 	bl	8007efc <ipcpTick>
      ipv6cpTick(context);
#endif

#if (PAP_SUPPORT == ENABLED)
      //Handle PAP timer
      papTick(context);
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7ff fc6c 	bl	800a18c <papTick>
#endif

#if (CHAP_SUPPORT == ENABLED)
      //Handle CHAP timer
      chapTick(context);
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f7fc fef1 	bl	800769c <chapTick>
#endif
   }
}
 800a8ba:	bf00      	nop
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <pppProcessFrame>:
 * @param[in] frame Incoming PPP frame to process
 * @param[in] length Total frame length
 **/

void pppProcessFrame(NetInterface *interface, uint8_t *frame, size_t length)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
#if (IPV6_SUPPORT == ENABLED)
   NetBuffer1 buffer;
#endif

   //Point to the PPP context
   context = interface->pppContext;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a8d6:	61fb      	str	r3, [r7, #28]

   //Check the length of the PPP frame
   if(length < PPP_FCS_SIZE)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d96b      	bls.n	800a9b6 <pppProcessFrame+0xf2>

   //Debug message
   TRACE_DEBUG("PPP frame received (%" PRIuSIZE " bytes)...\r\n", length);

   //The value of the residue is 0x0F47 when no FCS errors are detected
   if(pppCalcFcs(frame, length) != 0x0F47)
 800a8de:	6879      	ldr	r1, [r7, #4]
 800a8e0:	68b8      	ldr	r0, [r7, #8]
 800a8e2:	f000 f953 	bl	800ab8c <pppCalcFcs>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	f640 7347 	movw	r3, #3911	; 0xf47
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d00c      	beq.n	800a90c <pppProcessFrame+0x48>
   {
      //Debug message
      TRACE_WARNING("Wrong FCS detected!\r\n");
 800a8f2:	f7f5 fe9a 	bl	800062a <osSuspendAllTasks>
 800a8f6:	4b33      	ldr	r3, [pc, #204]	; (800a9c4 <pppProcessFrame+0x100>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	2215      	movs	r2, #21
 800a8fe:	2101      	movs	r1, #1
 800a900:	4831      	ldr	r0, [pc, #196]	; (800a9c8 <pppProcessFrame+0x104>)
 800a902:	f00d fc7f 	bl	8018204 <fwrite>
 800a906:	f7f5 fe9b 	bl	8000640 <osResumeAllTasks>
      //Drop the received frame
      return;
 800a90a:	e057      	b.n	800a9bc <pppProcessFrame+0xf8>
   }

   //Calculate the length of PPP frame excluding the FCS field
   length -= PPP_FCS_SIZE;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3b02      	subs	r3, #2
 800a910:	607b      	str	r3, [r7, #4]

   //Decompress the frame header
   n = pppParseFrameHeader(frame, length, &protocol);
 800a912:	f107 0316 	add.w	r3, r7, #22
 800a916:	461a      	mov	r2, r3
 800a918:	6879      	ldr	r1, [r7, #4]
 800a91a:	68b8      	ldr	r0, [r7, #8]
 800a91c:	f000 f8e1 	bl	800aae2 <pppParseFrameHeader>
 800a920:	61b8      	str	r0, [r7, #24]
   //Malformed PPP frame?
   if(!n)
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d048      	beq.n	800a9ba <pppProcessFrame+0xf6>
      return;

   //Point to the payload field
   frame += n;
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	4413      	add	r3, r2
 800a92e:	60bb      	str	r3, [r7, #8]
   length -= n;
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	607b      	str	r3, [r7, #4]

   //Check protocol field
   switch(protocol)
 800a938:	8afb      	ldrh	r3, [r7, #22]
 800a93a:	f24c 0221 	movw	r2, #49185	; 0xc021
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <pppProcessFrame+0xa6>
 800a942:	f24c 0221 	movw	r2, #49185	; 0xc021
 800a946:	4293      	cmp	r3, r2
 800a948:	dc06      	bgt.n	800a958 <pppProcessFrame+0x94>
 800a94a:	2b21      	cmp	r3, #33	; 0x21
 800a94c:	d019      	beq.n	800a982 <pppProcessFrame+0xbe>
 800a94e:	f248 0221 	movw	r2, #32801	; 0x8021
 800a952:	4293      	cmp	r3, r2
 800a954:	d00f      	beq.n	800a976 <pppProcessFrame+0xb2>
 800a956:	e026      	b.n	800a9a6 <pppProcessFrame+0xe2>
 800a958:	f24c 0223 	movw	r2, #49187	; 0xc023
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d016      	beq.n	800a98e <pppProcessFrame+0xca>
 800a960:	f24c 2223 	movw	r2, #49699	; 0xc223
 800a964:	4293      	cmp	r3, r2
 800a966:	d018      	beq.n	800a99a <pppProcessFrame+0xd6>
 800a968:	e01d      	b.n	800a9a6 <pppProcessFrame+0xe2>
   {
   //Link control protocol?
   case PPP_PROTOCOL_LCP:
      //Process incoming LCP packet
      lcpProcessPacket(context, (PppPacket *) frame, length);
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	68b9      	ldr	r1, [r7, #8]
 800a96e:	69f8      	ldr	r0, [r7, #28]
 800a970:	f7fe f9a4 	bl	8008cbc <lcpProcessPacket>
      break;
 800a974:	e022      	b.n	800a9bc <pppProcessFrame+0xf8>

#if (IPV4_SUPPORT == ENABLED)
   //IP control protocol?
   case PPP_PROTOCOL_IPCP:
      //Process incoming IPCP packet
      ipcpProcessPacket(context, (PppPacket *) frame, length);
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	68b9      	ldr	r1, [r7, #8]
 800a97a:	69f8      	ldr	r0, [r7, #28]
 800a97c:	f7fd faf6 	bl	8007f6c <ipcpProcessPacket>
      break;
 800a980:	e01c      	b.n	800a9bc <pppProcessFrame+0xf8>
   //IP protocol?
   case PPP_PROTOCOL_IP:
      //Process incoming IPv4 packet
      ipv4ProcessPacket(interface, (Ipv4Header *) frame, length);
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7fb fd59 	bl	800643e <ipv4ProcessPacket>
      break;
 800a98c:	e016      	b.n	800a9bc <pppProcessFrame+0xf8>

#if (PAP_SUPPORT == ENABLED)
   //PAP protocol?
   case PPP_PROTOCOL_PAP:
      //Process incoming PAP packet
      papProcessPacket(context, (PppPacket *) frame, length);
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	68b9      	ldr	r1, [r7, #8]
 800a992:	69f8      	ldr	r0, [r7, #28]
 800a994:	f7ff fc34 	bl	800a200 <papProcessPacket>
      break;
 800a998:	e010      	b.n	800a9bc <pppProcessFrame+0xf8>

#if (CHAP_SUPPORT == ENABLED)
   //CHAP protocol?
   case PPP_PROTOCOL_CHAP:
      //Process incoming CHAP packet
      chapProcessPacket(context, (PppPacket *) frame, length);
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	69f8      	ldr	r0, [r7, #28]
 800a9a0:	f7fc feb6 	bl	8007710 <chapProcessPacket>
      break;
 800a9a4:	e00a      	b.n	800a9bc <pppProcessFrame+0xf8>
#endif

   //Unknown protocol field
   default:
      //The peer is attempting to use a protocol which is unsupported
      lcpProcessUnknownProtocol(context, protocol, frame, length);
 800a9a6:	8af9      	ldrh	r1, [r7, #22]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	69f8      	ldr	r0, [r7, #28]
 800a9ae:	f7fe fdcf 	bl	8009550 <lcpProcessUnknownProtocol>
      break;
 800a9b2:	bf00      	nop
 800a9b4:	e002      	b.n	800a9bc <pppProcessFrame+0xf8>
      return;
 800a9b6:	bf00      	nop
 800a9b8:	e000      	b.n	800a9bc <pppProcessFrame+0xf8>
      return;
 800a9ba:	bf00      	nop
   }
}
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20000058 	.word	0x20000058
 800a9c8:	0801a208 	.word	0x0801a208

0800a9cc <pppSendFrame>:
 * @return Error code
 **/

error_t pppSendFrame(NetInterface *interface,
   NetBuffer *buffer, size_t offset, uint16_t protocol)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	807b      	strh	r3, [r7, #2]
   uint16_t fcs;
   uint8_t *p;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a9e0:	61fb      	str	r3, [r7, #28]

   //Check whether the Protocol field can be compressed
   if(context->peerConfig.pfc && MSB(protocol) == 0)
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d017      	beq.n	800aa1c <pppSendFrame+0x50>
 800a9ec:	887b      	ldrh	r3, [r7, #2]
 800a9ee:	0a1b      	lsrs	r3, r3, #8
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d111      	bne.n	800aa1c <pppSendFrame+0x50>
   {
      //Is there enough space in the buffer to store the compressed
      //Protocol field?
      if(offset < 1)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <pppSendFrame+0x36>
         return ERROR_FAILURE;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e06b      	b.n	800aada <pppSendFrame+0x10e>

      //Make room for the Protocol field
      offset--;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	3b01      	subs	r3, #1
 800aa06:	607b      	str	r3, [r7, #4]
      //Move backward
      p = netBufferAt(buffer, offset);
 800aa08:	6879      	ldr	r1, [r7, #4]
 800aa0a:	68b8      	ldr	r0, [r7, #8]
 800aa0c:	f7f7 fccf 	bl	80023ae <netBufferAt>
 800aa10:	61b8      	str	r0, [r7, #24]
      //Compress the Protocol field
      p[0] = LSB(protocol);
 800aa12:	887b      	ldrh	r3, [r7, #2]
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	701a      	strb	r2, [r3, #0]
 800aa1a:	e017      	b.n	800aa4c <pppSendFrame+0x80>
   }
   else
   {
      //Is there enough space in the buffer to store the uncompressed
      //Protocol field?
      if(offset < 2)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d801      	bhi.n	800aa26 <pppSendFrame+0x5a>
         return ERROR_FAILURE;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e059      	b.n	800aada <pppSendFrame+0x10e>

      //Make room for the Protocol field
      offset -= 2;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	3b02      	subs	r3, #2
 800aa2a:	607b      	str	r3, [r7, #4]
      //Move backward
      p = netBufferAt(buffer, offset);
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	68b8      	ldr	r0, [r7, #8]
 800aa30:	f7f7 fcbd 	bl	80023ae <netBufferAt>
 800aa34:	61b8      	str	r0, [r7, #24]
      //Do not compress the Protocol field
      p[0] = MSB(protocol);
 800aa36:	887b      	ldrh	r3, [r7, #2]
 800aa38:	0a1b      	lsrs	r3, r3, #8
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	701a      	strb	r2, [r3, #0]
      p[1] = LSB(protocol);
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	3301      	adds	r3, #1
 800aa46:	887a      	ldrh	r2, [r7, #2]
 800aa48:	b2d2      	uxtb	r2, r2
 800aa4a:	701a      	strb	r2, [r3, #0]
   }

   //Check whether the Address and Control fields can be compressed
   if(context->peerConfig.acfc && protocol != PPP_PROTOCOL_LCP)
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d004      	beq.n	800aa60 <pppSendFrame+0x94>
 800aa56:	887b      	ldrh	r3, [r7, #2]
 800aa58:	f24c 0221 	movw	r2, #49185	; 0xc021
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d113      	bne.n	800aa88 <pppSendFrame+0xbc>
   }
   else
   {
      //Is there enough space in the buffer to store the uncompressed
      //Address and Control fields?
      if(offset < 2)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d801      	bhi.n	800aa6a <pppSendFrame+0x9e>
         return ERROR_FAILURE;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e037      	b.n	800aada <pppSendFrame+0x10e>

      //Make room for the Address and Control fields
      offset -= 2;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	3b02      	subs	r3, #2
 800aa6e:	607b      	str	r3, [r7, #4]
      //Move backward
      p = netBufferAt(buffer, offset);
 800aa70:	6879      	ldr	r1, [r7, #4]
 800aa72:	68b8      	ldr	r0, [r7, #8]
 800aa74:	f7f7 fc9b 	bl	80023ae <netBufferAt>
 800aa78:	61b8      	str	r0, [r7, #24]
      //Do not compress the Address and Control fields
      p[0] = PPP_ADDR_FIELD;
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	22ff      	movs	r2, #255	; 0xff
 800aa7e:	701a      	strb	r2, [r3, #0]
      p[1] = PPP_CTRL_FIELD;
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	3301      	adds	r3, #1
 800aa84:	2203      	movs	r2, #3
 800aa86:	701a      	strb	r2, [r3, #0]
   }

   //Retrieve the length of the frame
   length = netBufferGetLength(buffer) - offset;
 800aa88:	68b8      	ldr	r0, [r7, #8]
 800aa8a:	f7f7 fbc8 	bl	800221e <netBufferGetLength>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	617b      	str	r3, [r7, #20]

   //Compute FCS over the header and payload
   fcs = pppCalcFcsEx(buffer, offset, length);
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	6879      	ldr	r1, [r7, #4]
 800aa9a:	68b8      	ldr	r0, [r7, #8]
 800aa9c:	f000 f8a2 	bl	800abe4 <pppCalcFcsEx>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	823b      	strh	r3, [r7, #16]
   //The FCS is transmitted least significant octet first
   fcs = htole16(fcs);
 800aaa4:	8a3b      	ldrh	r3, [r7, #16]
 800aaa6:	823b      	strh	r3, [r7, #16]

   //Append the calculated FCS value
   error = netBufferAppend(buffer, &fcs, PPP_FCS_SIZE);
 800aaa8:	f107 0310 	add.w	r3, r7, #16
 800aaac:	2202      	movs	r2, #2
 800aaae:	4619      	mov	r1, r3
 800aab0:	68b8      	ldr	r0, [r7, #8]
 800aab2:	f7f7 fe14 	bl	80026de <netBufferAppend>
 800aab6:	4603      	mov	r3, r0
 800aab8:	827b      	strh	r3, [r7, #18]
   //Any error to report?
   if(error)
 800aaba:	8a7b      	ldrh	r3, [r7, #18]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <pppSendFrame+0xf8>
      return error;
 800aac0:	8a7b      	ldrh	r3, [r7, #18]
 800aac2:	e00a      	b.n	800aada <pppSendFrame+0x10e>

   //Adjust frame length
   length += PPP_FCS_SIZE;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	3302      	adds	r3, #2
 800aac8:	617b      	str	r3, [r7, #20]
   //Debug message
   TRACE_DEBUG("Sending PPP frame (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG("  Protocol = 0x%04" PRIX16 "\r\n", protocol);

   //Send the resulting frame over the specified link
   error = nicSendPacket(interface, buffer, offset);
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	68b9      	ldr	r1, [r7, #8]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7f7 fed9 	bl	8002886 <nicSendPacket>
 800aad4:	4603      	mov	r3, r0
 800aad6:	827b      	strh	r3, [r7, #18]
   //Return status code
   return error;
 800aad8:	8a7b      	ldrh	r3, [r7, #18]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3720      	adds	r7, #32
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <pppParseFrameHeader>:
 * @return If the PPP header was successfully parsed, the function returns the size
 *   of the PPP header, in bytes. If a parsing error occurred, zero is returned
 **/

size_t pppParseFrameHeader(const uint8_t *frame, size_t length, uint16_t *protocol)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b087      	sub	sp, #28
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	60f8      	str	r0, [r7, #12]
 800aaea:	60b9      	str	r1, [r7, #8]
 800aaec:	607a      	str	r2, [r7, #4]
   size_t n;

   //Size of the PPP header, in bytes
   n = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	617b      	str	r3, [r7, #20]

   //On reception, the Address and Control fields are decompressed by
   //examining the first two octets
   if(length >= 2)
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d90a      	bls.n	800ab0e <pppParseFrameHeader+0x2c>
   {
      //If they contain the values 0xff and 0x03, they are assumed to be
      //the Address and Control fields. If not, it is assumed that the
      //fields were compressed and were not transmitted
      if(frame[0] == PPP_ADDR_FIELD && frame[1] == PPP_CTRL_FIELD)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	2bff      	cmp	r3, #255	; 0xff
 800aafe:	d106      	bne.n	800ab0e <pppParseFrameHeader+0x2c>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3301      	adds	r3, #1
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d101      	bne.n	800ab0e <pppParseFrameHeader+0x2c>
      {
         //Move to the Protocol field
         n = 2;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	617b      	str	r3, [r7, #20]
      }
   }

   //Check the length of the PPP frame
   if(length >= (n + 1))
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	3301      	adds	r3, #1
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d32f      	bcc.n	800ab78 <pppParseFrameHeader+0x96>
   {
      //PPP Protocol field numbers are chosen such that some values may be
      //compressed into a single octet form which is clearly distinguishable
      //from the two octet form
      if(frame[n] & 0x01)
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00a      	beq.n	800ab3e <pppParseFrameHeader+0x5c>
      {
         //The presence of a binary 1 as the LSB marks the last octet of
         //the Protocol field
         *protocol = frame[n];
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	801a      	strh	r2, [r3, #0]

         //Update the length of the header
         n++;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	e01e      	b.n	800ab7c <pppParseFrameHeader+0x9a>
      }
      else
      {
         //Check the length of the PPP frame
         if(length >= (n + 2))
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	3302      	adds	r3, #2
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d314      	bcc.n	800ab72 <pppParseFrameHeader+0x90>
         {
            //The Protocol field is not compressed
            *protocol = (frame[n] << 8) | frame[n + 1];
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	021b      	lsls	r3, r3, #8
 800ab52:	b21a      	sxth	r2, r3
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	3301      	adds	r3, #1
 800ab58:	68f9      	ldr	r1, [r7, #12]
 800ab5a:	440b      	add	r3, r1
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	b21b      	sxth	r3, r3
 800ab60:	4313      	orrs	r3, r2
 800ab62:	b21b      	sxth	r3, r3
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	801a      	strh	r2, [r3, #0]

            //Update the length of the header
            n += 2;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	3302      	adds	r3, #2
 800ab6e:	617b      	str	r3, [r7, #20]
 800ab70:	e004      	b.n	800ab7c <pppParseFrameHeader+0x9a>
         }
         else
         {
            //Malformed PPP frame
            n = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	617b      	str	r3, [r7, #20]
 800ab76:	e001      	b.n	800ab7c <pppParseFrameHeader+0x9a>
      }
   }
   else
   {
      //Malformed PPP frame
      n = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]
   }

   //Return the size of the PPP header, in bytes
   return n;
 800ab7c:	697b      	ldr	r3, [r7, #20]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
	...

0800ab8c <pppCalcFcs>:
 * @param[in] length Number of bytes to process
 * @return Resulting FCS value
 **/

uint16_t pppCalcFcs(const uint8_t *data, size_t length)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
   size_t i;
   uint16_t fcs;

   //FCS preset value
   fcs = 0xFFFF;
 800ab96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab9a:	817b      	strh	r3, [r7, #10]

   //Loop through data
   for(i = 0; i < length; i++)
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60fb      	str	r3, [r7, #12]
 800aba0:	e011      	b.n	800abc6 <pppCalcFcs+0x3a>
   {
      //The message is processed byte by byte
      fcs = (fcs >> 8) ^ fcsTable[(fcs & 0xFF) ^ data[i]];
 800aba2:	897b      	ldrh	r3, [r7, #10]
 800aba4:	0a1b      	lsrs	r3, r3, #8
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	897b      	ldrh	r3, [r7, #10]
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	4401      	add	r1, r0
 800abb2:	7809      	ldrb	r1, [r1, #0]
 800abb4:	404b      	eors	r3, r1
 800abb6:	490a      	ldr	r1, [pc, #40]	; (800abe0 <pppCalcFcs+0x54>)
 800abb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800abbc:	4053      	eors	r3, r2
 800abbe:	817b      	strh	r3, [r7, #10]
   for(i = 0; i < length; i++)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3301      	adds	r3, #1
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d3e9      	bcc.n	800aba2 <pppCalcFcs+0x16>
   }

   //Return 1's complement value
   return ~fcs;
 800abce:	897b      	ldrh	r3, [r7, #10]
 800abd0:	43db      	mvns	r3, r3
 800abd2:	b29b      	uxth	r3, r3
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	0801a5ac 	.word	0x0801a5ac

0800abe4 <pppCalcFcsEx>:
 * @param[in] length Number of bytes to process
 * @return Resulting FCS value
 **/

uint16_t pppCalcFcsEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b089      	sub	sp, #36	; 0x24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
   uint_t n;
   uint16_t fcs;
   uint8_t *p;

   //FCS preset value
   fcs = 0xFFFF;
 800abf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abf4:	82fb      	strh	r3, [r7, #22]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 800abf6:	2300      	movs	r3, #0
 800abf8:	61fb      	str	r3, [r7, #28]
 800abfa:	e04a      	b.n	800ac92 <pppCalcFcsEx+0xae>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	3301      	adds	r3, #1
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	4413      	add	r3, r2
 800ac06:	889b      	ldrh	r3, [r3, #4]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d233      	bcs.n	800ac78 <pppCalcFcsEx+0x94>
      {
         //Point to the first data byte
         p = (uint8_t *) buffer->chunk[i].address + offset;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	69fa      	ldr	r2, [r7, #28]
 800ac14:	3201      	adds	r2, #1
 800ac16:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	613b      	str	r3, [r7, #16]
         //Compute the number of bytes to process
         n = MIN(buffer->chunk[i].length - offset, length);
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	3301      	adds	r3, #1
 800ac26:	00db      	lsls	r3, r3, #3
 800ac28:	4413      	add	r3, r2
 800ac2a:	889b      	ldrh	r3, [r3, #4]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	4293      	cmp	r3, r2
 800ac36:	bf28      	it	cs
 800ac38:	4613      	movcs	r3, r2
 800ac3a:	61bb      	str	r3, [r7, #24]
         //Adjust byte counter
         length -= n;
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	607b      	str	r3, [r7, #4]

         //Process current chunk
         while(n > 0)
 800ac44:	e012      	b.n	800ac6c <pppCalcFcsEx+0x88>
         {
            //The message is processed byte by byte
            fcs = (fcs >> 8) ^ fcsTable[(fcs & 0xFF) ^ *p];
 800ac46:	8afb      	ldrh	r3, [r7, #22]
 800ac48:	0a1b      	lsrs	r3, r3, #8
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	8afb      	ldrh	r3, [r7, #22]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	6939      	ldr	r1, [r7, #16]
 800ac52:	7809      	ldrb	r1, [r1, #0]
 800ac54:	404b      	eors	r3, r1
 800ac56:	4917      	ldr	r1, [pc, #92]	; (800acb4 <pppCalcFcsEx+0xd0>)
 800ac58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ac5c:	4053      	eors	r3, r2
 800ac5e:	82fb      	strh	r3, [r7, #22]

            //Next byte
            p++;
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	3301      	adds	r3, #1
 800ac64:	613b      	str	r3, [r7, #16]
            n--;
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	61bb      	str	r3, [r7, #24]
         while(n > 0)
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1e9      	bne.n	800ac46 <pppCalcFcsEx+0x62>
         }

         //Process the next block from the start
         offset = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60bb      	str	r3, [r7, #8]
 800ac76:	e009      	b.n	800ac8c <pppCalcFcsEx+0xa8>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	4413      	add	r3, r2
 800ac82:	889b      	ldrh	r3, [r3, #4]
 800ac84:	461a      	mov	r2, r3
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	1a9b      	subs	r3, r3, r2
 800ac8a:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	61fb      	str	r3, [r7, #28]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69fa      	ldr	r2, [r7, #28]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d202      	bcs.n	800aca2 <pppCalcFcsEx+0xbe>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1ac      	bne.n	800abfc <pppCalcFcsEx+0x18>
      }
   }

   //Return 1's complement value
   return ~fcs;
 800aca2:	8afb      	ldrh	r3, [r7, #22]
 800aca4:	43db      	mvns	r3, r3
 800aca6:	b29b      	uxth	r3, r3
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3724      	adds	r7, #36	; 0x24
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	0801a5ac 	.word	0x0801a5ac

0800acb8 <pppAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *pppAllocBuffer(size_t length, size_t *offset)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;

   //Allocate a buffer to hold the Ethernet header and the payload
   buffer = netBufferAlloc(length + PPP_FRAME_HEADER_SIZE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3304      	adds	r3, #4
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7f7 fa67 	bl	800219a <netBufferAlloc>
 800accc:	60f8      	str	r0, [r7, #12]
   //Failed to allocate buffer?
   if(buffer == NULL)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d101      	bne.n	800acd8 <pppAllocBuffer+0x20>
      return NULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	e003      	b.n	800ace0 <pppAllocBuffer+0x28>

   //Offset to the first byte of the payload
   *offset = PPP_FRAME_HEADER_SIZE;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2204      	movs	r2, #4
 800acdc:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 800acde:	68fb      	ldr	r3, [r7, #12]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <pppUpEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppUpEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <pppUpEvent+0x1a>
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d005      	beq.n	800ad0c <pppUpEvent+0x24>
      break;
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800ad00:	e012      	b.n	800ad28 <pppUpEvent+0x40>
      pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800ad02:	2102      	movs	r1, #2
 800ad04:	68b8      	ldr	r0, [r7, #8]
 800ad06:	f000 fc4d 	bl	800b5a4 <pppChangeState>
      break;
 800ad0a:	e00d      	b.n	800ad28 <pppUpEvent+0x40>
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	210a      	movs	r1, #10
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	4798      	blx	r3
      callbacks->sendConfigureReq(context);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	4798      	blx	r3
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800ad1e:	2106      	movs	r1, #6
 800ad20:	68b8      	ldr	r0, [r7, #8]
 800ad22:	f000 fc3f 	bl	800b5a4 <pppChangeState>
      break;
 800ad26:	bf00      	nop
   }
}
 800ad28:	bf00      	nop
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <pppDownEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppDownEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3b02      	subs	r3, #2
 800ad42:	2b07      	cmp	r3, #7
 800ad44:	d833      	bhi.n	800adae <pppDownEvent+0x7e>
 800ad46:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <pppDownEvent+0x1c>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800ad6d 	.word	0x0800ad6d
 800ad50:	0800ad77 	.word	0x0800ad77
 800ad54:	0800ad89 	.word	0x0800ad89
 800ad58:	0800ad93 	.word	0x0800ad93
 800ad5c:	0800ad93 	.word	0x0800ad93
 800ad60:	0800ad93 	.word	0x0800ad93
 800ad64:	0800ad93 	.word	0x0800ad93
 800ad68:	0800ad9d 	.word	0x0800ad9d
   {
   case PPP_STATE_2_CLOSED:
      //Switch to the Initial state
      pppChangeState(fsm, PPP_STATE_0_INITIAL);
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	68b8      	ldr	r0, [r7, #8]
 800ad70:	f000 fc18 	bl	800b5a4 <pppChangeState>
      break;
 800ad74:	e01c      	b.n	800adb0 <pppDownEvent+0x80>
   case PPP_STATE_3_STOPPED:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800ad76:	2101      	movs	r1, #1
 800ad78:	68b8      	ldr	r0, [r7, #8]
 800ad7a:	f000 fc13 	bl	800b5a4 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Starting state. The lower layer is needed for the link
      callbacks->thisLayerStarted(context);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	4798      	blx	r3
      break;
 800ad86:	e013      	b.n	800adb0 <pppDownEvent+0x80>
   case PPP_STATE_4_CLOSING:
      //Switch to the Initial state
      pppChangeState(fsm, PPP_STATE_0_INITIAL);
 800ad88:	2100      	movs	r1, #0
 800ad8a:	68b8      	ldr	r0, [r7, #8]
 800ad8c:	f000 fc0a 	bl	800b5a4 <pppChangeState>
      break;
 800ad90:	e00e      	b.n	800adb0 <pppDownEvent+0x80>
   case PPP_STATE_5_STOPPING:
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800ad92:	2101      	movs	r1, #1
 800ad94:	68b8      	ldr	r0, [r7, #8]
 800ad96:	f000 fc05 	bl	800b5a4 <pppChangeState>
      break;
 800ad9a:	e009      	b.n	800adb0 <pppDownEvent+0x80>
   case PPP_STATE_9_OPENED:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	68b8      	ldr	r0, [r7, #8]
 800ada0:	f000 fc00 	bl	800b5a4 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	4798      	blx	r3
      break;
 800adac:	e000      	b.n	800adb0 <pppDownEvent+0x80>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800adae:	bf00      	nop
   }
}
 800adb0:	bf00      	nop
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <pppOpenEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppOpenEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b09      	cmp	r3, #9
 800adca:	d833      	bhi.n	800ae34 <pppOpenEvent+0x7c>
 800adcc:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <pppOpenEvent+0x1c>)
 800adce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add2:	bf00      	nop
 800add4:	0800adfd 	.word	0x0800adfd
 800add8:	0800ae35 	.word	0x0800ae35
 800addc:	0800ae0f 	.word	0x0800ae0f
 800ade0:	0800ae35 	.word	0x0800ae35
 800ade4:	0800ae2b 	.word	0x0800ae2b
 800ade8:	0800ae35 	.word	0x0800ae35
 800adec:	0800ae35 	.word	0x0800ae35
 800adf0:	0800ae35 	.word	0x0800ae35
 800adf4:	0800ae35 	.word	0x0800ae35
 800adf8:	0800ae35 	.word	0x0800ae35
   {
   case PPP_STATE_0_INITIAL:
      //Switch to the Starting state
      pppChangeState(fsm, PPP_STATE_1_STARTING);
 800adfc:	2101      	movs	r1, #1
 800adfe:	68b8      	ldr	r0, [r7, #8]
 800ae00:	f000 fbd0 	bl	800b5a4 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Starting state. The lower layer is needed for the link
      callbacks->thisLayerStarted(context);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	4798      	blx	r3
      break;
 800ae0c:	e013      	b.n	800ae36 <pppOpenEvent+0x7e>
   case PPP_STATE_1_STARTING:
      //Stay in current state
      break;
   case PPP_STATE_2_CLOSED:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	210a      	movs	r1, #10
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	4798      	blx	r3
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800ae20:	2106      	movs	r1, #6
 800ae22:	68b8      	ldr	r0, [r7, #8]
 800ae24:	f000 fbbe 	bl	800b5a4 <pppChangeState>
      break;
 800ae28:	e005      	b.n	800ae36 <pppOpenEvent+0x7e>
   case PPP_STATE_3_STOPPED:
      //Stay in current state
      break;
   case PPP_STATE_4_CLOSING:
      //Switch to the Stopping state
      pppChangeState(fsm, PPP_STATE_5_STOPPING);
 800ae2a:	2105      	movs	r1, #5
 800ae2c:	68b8      	ldr	r0, [r7, #8]
 800ae2e:	f000 fbb9 	bl	800b5a4 <pppChangeState>
      break;
 800ae32:	e000      	b.n	800ae36 <pppOpenEvent+0x7e>
      break;
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800ae34:	bf00      	nop
   }
}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop

0800ae40 <pppCloseEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppCloseEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b09      	cmp	r3, #9
 800ae52:	d84a      	bhi.n	800aeea <pppCloseEvent+0xaa>
 800ae54:	a201      	add	r2, pc, #4	; (adr r2, 800ae5c <pppCloseEvent+0x1c>)
 800ae56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5a:	bf00      	nop
 800ae5c:	0800aeeb 	.word	0x0800aeeb
 800ae60:	0800ae85 	.word	0x0800ae85
 800ae64:	0800aeeb 	.word	0x0800aeeb
 800ae68:	0800ae97 	.word	0x0800ae97
 800ae6c:	0800aeeb 	.word	0x0800aeeb
 800ae70:	0800aea1 	.word	0x0800aea1
 800ae74:	0800aeab 	.word	0x0800aeab
 800ae78:	0800aeab 	.word	0x0800aeab
 800ae7c:	0800aeab 	.word	0x0800aeab
 800ae80:	0800aec7 	.word	0x0800aec7
   case PPP_STATE_0_INITIAL:
      //Stay in current state
      break;
   case PPP_STATE_1_STARTING:
      //Switch to the Initial state
      pppChangeState(fsm, PPP_STATE_0_INITIAL);
 800ae84:	2100      	movs	r1, #0
 800ae86:	68b8      	ldr	r0, [r7, #8]
 800ae88:	f000 fb8c 	bl	800b5a4 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Initial, Closed or Stopped states. The lower layer is no longer
      //needed for the link
      callbacks->thisLayerFinished(context);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	4798      	blx	r3
      break;
 800ae94:	e02a      	b.n	800aeec <pppCloseEvent+0xac>
   case PPP_STATE_2_CLOSED:
      //Stay in current state
      break;
   case PPP_STATE_3_STOPPED:
      //Switch to the Closed state
      pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800ae96:	2102      	movs	r1, #2
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f000 fb83 	bl	800b5a4 <pppChangeState>
      break;
 800ae9e:	e025      	b.n	800aeec <pppCloseEvent+0xac>
   case PPP_STATE_4_CLOSING:
      //Stay in current state
      break;
   case PPP_STATE_5_STOPPING:
      //Switch to the Closing state
      pppChangeState(fsm, PPP_STATE_4_CLOSING);
 800aea0:	2104      	movs	r1, #4
 800aea2:	68b8      	ldr	r0, [r7, #8]
 800aea4:	f000 fb7e 	bl	800b5a4 <pppChangeState>
      break;
 800aea8:	e020      	b.n	800aeec <pppCloseEvent+0xac>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_TERMINATE);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	2102      	movs	r1, #2
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	4798      	blx	r3
      //Send Terminate-Request packet
      callbacks->sendTerminateReq(context);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	4798      	blx	r3
      //Switch to the Closing state
      pppChangeState(fsm, PPP_STATE_4_CLOSING);
 800aebc:	2104      	movs	r1, #4
 800aebe:	68b8      	ldr	r0, [r7, #8]
 800aec0:	f000 fb70 	bl	800b5a4 <pppChangeState>
      break;
 800aec4:	e012      	b.n	800aeec <pppCloseEvent+0xac>
   case PPP_STATE_9_OPENED:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_TERMINATE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	2102      	movs	r1, #2
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	4798      	blx	r3
      //Send Terminate-Request packet
      callbacks->sendTerminateReq(context);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	4798      	blx	r3
      //Switch to the Closing state
      pppChangeState(fsm, PPP_STATE_4_CLOSING);
 800aed8:	2104      	movs	r1, #4
 800aeda:	68b8      	ldr	r0, [r7, #8]
 800aedc:	f000 fb62 	bl	800b5a4 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	4798      	blx	r3
      break;
 800aee8:	e000      	b.n	800aeec <pppCloseEvent+0xac>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800aeea:	bf00      	nop
   }
}
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <pppTimeoutEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppTimeoutEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
   //The restart counter is greater than zero (TO+ event)
   if(fsm->restartCounter > 0)
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d024      	beq.n	800af52 <pppTimeoutEvent+0x5e>
   {
      //Check current state
      switch(fsm->state)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3b04      	subs	r3, #4
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d83a      	bhi.n	800af88 <pppTimeoutEvent+0x94>
 800af12:	a201      	add	r2, pc, #4	; (adr r2, 800af18 <pppTimeoutEvent+0x24>)
 800af14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af18:	0800af2d 	.word	0x0800af2d
 800af1c:	0800af2d 	.word	0x0800af2d
 800af20:	0800af37 	.word	0x0800af37
 800af24:	0800af37 	.word	0x0800af37
 800af28:	0800af49 	.word	0x0800af49
      {
      case PPP_STATE_4_CLOSING:
      case PPP_STATE_5_STOPPING:
         //Send Terminate-Request packet
         callbacks->sendTerminateReq(context);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	4798      	blx	r3
         //Stay in current state
         break;
 800af34:	e02b      	b.n	800af8e <pppTimeoutEvent+0x9a>
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
         //Send Configuration-Request packet
         callbacks->sendConfigureReq(context);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800af3e:	2106      	movs	r1, #6
 800af40:	68b8      	ldr	r0, [r7, #8]
 800af42:	f000 fb2f 	bl	800b5a4 <pppChangeState>
         break;
 800af46:	e022      	b.n	800af8e <pppTimeoutEvent+0x9a>
      case PPP_STATE_8_ACK_SENT:
         //Send Configuration-Request packet
         callbacks->sendConfigureReq(context);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	4798      	blx	r3
         //Stay in current state
         break;
 800af50:	e01d      	b.n	800af8e <pppTimeoutEvent+0x9a>
   }
   //The restart counter is not greater than zero (TO- event)
   else
   {
      //Check current state
      switch(fsm->state)
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b04      	cmp	r3, #4
 800af58:	d004      	beq.n	800af64 <pppTimeoutEvent+0x70>
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d316      	bcc.n	800af8c <pppTimeoutEvent+0x98>
 800af5e:	2b08      	cmp	r3, #8
 800af60:	d814      	bhi.n	800af8c <pppTimeoutEvent+0x98>
 800af62:	e008      	b.n	800af76 <pppTimeoutEvent+0x82>
      {
      case PPP_STATE_4_CLOSING:
         //Switch to the Closed state
         pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800af64:	2102      	movs	r1, #2
 800af66:	68b8      	ldr	r0, [r7, #8]
 800af68:	f000 fb1c 	bl	800b5a4 <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	4798      	blx	r3
         break;
 800af74:	e00b      	b.n	800af8e <pppTimeoutEvent+0x9a>
      case PPP_STATE_5_STOPPING:
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
      case PPP_STATE_8_ACK_SENT:
         //Switch to the Stopped state
         pppChangeState(fsm, PPP_STATE_3_STOPPED);
 800af76:	2103      	movs	r1, #3
 800af78:	68b8      	ldr	r0, [r7, #8]
 800af7a:	f000 fb13 	bl	800b5a4 <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	4798      	blx	r3
         break;
 800af86:	e002      	b.n	800af8e <pppTimeoutEvent+0x9a>
         break;
 800af88:	bf00      	nop
 800af8a:	e000      	b.n	800af8e <pppTimeoutEvent+0x9a>
      default:
         //This event cannot occur in a properly implemented automaton.
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
 800af8c:	bf00      	nop
      }
   }
}
 800af8e:	bf00      	nop
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop

0800af98 <pppRcvConfigureReqEvent>:
 * @param[in] code Tells whether the configuration options are acceptable
 **/

void pppRcvConfigureReqEvent(PppContext *context, PppFsm *fsm, const PppCallbacks *callbacks,
   const PppConfigurePacket *configureReqPacket, PppCode code)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
   //Check whether the configuration options are acceptable
   if(code == PPP_CODE_CONFIGURE_ACK)
 800afa6:	7e3b      	ldrb	r3, [r7, #24]
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	d162      	bne.n	800b072 <pppRcvConfigureReqEvent+0xda>
   {
      //If every configuration option received in the Configure-Request is
      //recognizable and all values are acceptable, then the implementation
      //must transmit a Configure-Ack
      switch(fsm->state)
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3b02      	subs	r3, #2
 800afb2:	2b07      	cmp	r3, #7
 800afb4:	f200 810b 	bhi.w	800b1ce <pppRcvConfigureReqEvent+0x236>
 800afb8:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <pppRcvConfigureReqEvent+0x28>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800afe1 	.word	0x0800afe1
 800afc4:	0800afed 	.word	0x0800afed
 800afc8:	0800b1cf 	.word	0x0800b1cf
 800afcc:	0800b1cf 	.word	0x0800b1cf
 800afd0:	0800b013 	.word	0x0800b013
 800afd4:	0800b027 	.word	0x0800b027
 800afd8:	0800b043 	.word	0x0800b043
 800afdc:	0800b04f 	.word	0x0800b04f
      {
      case PPP_STATE_2_CLOSED:
         //Send Terminate-Ack packet
         callbacks->sendTerminateAck(context, NULL);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	2100      	movs	r1, #0
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	4798      	blx	r3
         //Stay in current state
         break;
 800afea:	e0f7      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_3_STOPPED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	210a      	movs	r1, #10
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	4798      	blx	r3
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	4798      	blx	r3
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	4798      	blx	r3
         //Switch to the Ack-Sent state
         pppChangeState(fsm, PPP_STATE_8_ACK_SENT);
 800b008:	2108      	movs	r1, #8
 800b00a:	68b8      	ldr	r0, [r7, #8]
 800b00c:	f000 faca 	bl	800b5a4 <pppChangeState>
         break;
 800b010:	e0e4      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_5_STOPPING:
         //Stay in current state
         break;
      case PPP_STATE_6_REQ_SENT:
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	69db      	ldr	r3, [r3, #28]
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	4798      	blx	r3
         //Switch to the Ack-Sent state
         pppChangeState(fsm, PPP_STATE_8_ACK_SENT);
 800b01c:	2108      	movs	r1, #8
 800b01e:	68b8      	ldr	r0, [r7, #8]
 800b020:	f000 fac0 	bl	800b5a4 <pppChangeState>
         break;
 800b024:	e0da      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_7_ACK_RCVD:
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	4798      	blx	r3
         //Switch to the Opened state
         pppChangeState(fsm, PPP_STATE_9_OPENED);
 800b030:	2109      	movs	r1, #9
 800b032:	68b8      	ldr	r0, [r7, #8]
 800b034:	f000 fab6 	bl	800b5a4 <pppChangeState>
         //Indicate to the upper layers that the automaton is entering the
         //Opened state. The link is available for network traffic
         callbacks->thisLayerUp(context);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	4798      	blx	r3
         break;
 800b040:	e0cc      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_8_ACK_SENT:
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	4798      	blx	r3
         //Stay in current state
         break;
 800b04c:	e0c6      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_9_OPENED:
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	4798      	blx	r3
         //Send Configure-Ack packet
         callbacks->sendConfigureAck(context, configureReqPacket);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	4798      	blx	r3
         //Switch to the Ack-Sent state
         pppChangeState(fsm, PPP_STATE_8_ACK_SENT);
 800b060:	2108      	movs	r1, #8
 800b062:	68b8      	ldr	r0, [r7, #8]
 800b064:	f000 fa9e 	bl	800b5a4 <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	4798      	blx	r3
         break;
 800b070:	e0b4      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
      }
   }
   else if(code == PPP_CODE_CONFIGURE_NAK)
 800b072:	7e3b      	ldrb	r3, [r7, #24]
 800b074:	2b03      	cmp	r3, #3
 800b076:	d154      	bne.n	800b122 <pppRcvConfigureReqEvent+0x18a>
   {
      //If all configuration options are recognizable, but some values are not
      //acceptable, then the implementation must transmit a Configure-Nak
      switch(fsm->state)
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3b02      	subs	r3, #2
 800b07e:	2b07      	cmp	r3, #7
 800b080:	f200 80a7 	bhi.w	800b1d2 <pppRcvConfigureReqEvent+0x23a>
 800b084:	a201      	add	r2, pc, #4	; (adr r2, 800b08c <pppRcvConfigureReqEvent+0xf4>)
 800b086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08a:	bf00      	nop
 800b08c:	0800b0ad 	.word	0x0800b0ad
 800b090:	0800b0b9 	.word	0x0800b0b9
 800b094:	0800b1d3 	.word	0x0800b1d3
 800b098:	0800b1d3 	.word	0x0800b1d3
 800b09c:	0800b0df 	.word	0x0800b0df
 800b0a0:	0800b0df 	.word	0x0800b0df
 800b0a4:	0800b0eb 	.word	0x0800b0eb
 800b0a8:	0800b0ff 	.word	0x0800b0ff
      {
      case PPP_STATE_2_CLOSED:
         //Send Terminate-Ack packet
         callbacks->sendTerminateAck(context, NULL);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	4798      	blx	r3
         //Stay in current state
         break;
 800b0b6:	e091      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_3_STOPPED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	210a      	movs	r1, #10
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	4798      	blx	r3
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	699b      	ldr	r3, [r3, #24]
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	4798      	blx	r3
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b0d4:	2106      	movs	r1, #6
 800b0d6:	68b8      	ldr	r0, [r7, #8]
 800b0d8:	f000 fa64 	bl	800b5a4 <pppChangeState>
         break;
 800b0dc:	e07e      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
         //Stay in current state
         break;
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	4798      	blx	r3
         //Stay in current state
         break;
 800b0e8:	e078      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_8_ACK_SENT:
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b0f4:	2106      	movs	r1, #6
 800b0f6:	68b8      	ldr	r0, [r7, #8]
 800b0f8:	f000 fa54 	bl	800b5a4 <pppChangeState>
         break;
 800b0fc:	e06e      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_9_OPENED:
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	4798      	blx	r3
         //Send Configure-Nak packet
         callbacks->sendConfigureNak(context, configureReqPacket);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b110:	2106      	movs	r1, #6
 800b112:	68b8      	ldr	r0, [r7, #8]
 800b114:	f000 fa46 	bl	800b5a4 <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	4798      	blx	r3
         break;
 800b120:	e05c      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
      }
   }
   else if(code == PPP_CODE_CONFIGURE_REJ)
 800b122:	7e3b      	ldrb	r3, [r7, #24]
 800b124:	2b04      	cmp	r3, #4
 800b126:	d156      	bne.n	800b1d6 <pppRcvConfigureReqEvent+0x23e>
   {
      //If some configuration options received in the Configure-Request are not
      //recognizable or not acceptable for negotiation, then the implementation
      //must transmit a Configure-Reject
      switch(fsm->state)
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3b02      	subs	r3, #2
 800b12e:	2b07      	cmp	r3, #7
 800b130:	d853      	bhi.n	800b1da <pppRcvConfigureReqEvent+0x242>
 800b132:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <pppRcvConfigureReqEvent+0x1a0>)
 800b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b138:	0800b159 	.word	0x0800b159
 800b13c:	0800b165 	.word	0x0800b165
 800b140:	0800b1db 	.word	0x0800b1db
 800b144:	0800b1db 	.word	0x0800b1db
 800b148:	0800b18b 	.word	0x0800b18b
 800b14c:	0800b18b 	.word	0x0800b18b
 800b150:	0800b197 	.word	0x0800b197
 800b154:	0800b1ab 	.word	0x0800b1ab
      {
      case PPP_STATE_2_CLOSED:
         //Send Terminate-Ack packet
         callbacks->sendTerminateAck(context, NULL);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15c:	2100      	movs	r1, #0
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	4798      	blx	r3
         //Stay in current state
         break;
 800b162:	e03b      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_3_STOPPED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	210a      	movs	r1, #10
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	4798      	blx	r3
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	4798      	blx	r3
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b180:	2106      	movs	r1, #6
 800b182:	68b8      	ldr	r0, [r7, #8]
 800b184:	f000 fa0e 	bl	800b5a4 <pppChangeState>
         break;
 800b188:	e028      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
         //Stay in current state
         break;
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	6839      	ldr	r1, [r7, #0]
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	4798      	blx	r3
         //Stay in current state
         break;
 800b194:	e022      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_8_ACK_SENT:
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b1a0:	2106      	movs	r1, #6
 800b1a2:	68b8      	ldr	r0, [r7, #8]
 800b1a4:	f000 f9fe 	bl	800b5a4 <pppChangeState>
         break;
 800b1a8:	e018      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
      case PPP_STATE_9_OPENED:
         //Send Configure-Request packet
         callbacks->sendConfigureReq(context);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	4798      	blx	r3
         //Send Configure-Reject packet
         callbacks->sendConfigureRej(context, configureReqPacket);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	4798      	blx	r3
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b1bc:	2106      	movs	r1, #6
 800b1be:	68b8      	ldr	r0, [r7, #8]
 800b1c0:	f000 f9f0 	bl	800b5a4 <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	4798      	blx	r3
         break;
 800b1cc:	e006      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
         break;
 800b1ce:	bf00      	nop
 800b1d0:	e004      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
         break;
 800b1d2:	bf00      	nop
 800b1d4:	e002      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
         //This event cannot occur in a properly implemented automaton.
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
      }
   }
 800b1d6:	bf00      	nop
 800b1d8:	e000      	b.n	800b1dc <pppRcvConfigureReqEvent+0x244>
         break;
 800b1da:	bf00      	nop
}
 800b1dc:	bf00      	nop
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <pppRcvConfigureAckEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppRcvConfigureAckEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3b02      	subs	r3, #2
 800b1f6:	2b07      	cmp	r3, #7
 800b1f8:	d845      	bhi.n	800b286 <pppRcvConfigureAckEvent+0xa2>
 800b1fa:	a201      	add	r2, pc, #4	; (adr r2, 800b200 <pppRcvConfigureAckEvent+0x1c>)
 800b1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b200:	0800b221 	.word	0x0800b221
 800b204:	0800b221 	.word	0x0800b221
 800b208:	0800b287 	.word	0x0800b287
 800b20c:	0800b287 	.word	0x0800b287
 800b210:	0800b22d 	.word	0x0800b22d
 800b214:	0800b23f 	.word	0x0800b23f
 800b218:	0800b251 	.word	0x0800b251
 800b21c:	0800b26d 	.word	0x0800b26d
   {
   case PPP_STATE_2_CLOSED:
   case PPP_STATE_3_STOPPED:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, NULL);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b224:	2100      	movs	r1, #0
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	4798      	blx	r3
      //Stay in current state
      break;
 800b22a:	e02d      	b.n	800b288 <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_5_STOPPING:
      //Stay in current state
      break;
   case PPP_STATE_6_REQ_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	210a      	movs	r1, #10
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	4798      	blx	r3
      //Switch to the Ack-Rcvd state
      fsm->state = PPP_STATE_7_ACK_RCVD;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2207      	movs	r2, #7
 800b23a:	601a      	str	r2, [r3, #0]
      break;
 800b23c:	e024      	b.n	800b288 <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_7_ACK_RCVD:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b246:	2106      	movs	r1, #6
 800b248:	68b8      	ldr	r0, [r7, #8]
 800b24a:	f000 f9ab 	bl	800b5a4 <pppChangeState>
      break;
 800b24e:	e01b      	b.n	800b288 <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_8_ACK_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	210a      	movs	r1, #10
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	4798      	blx	r3
      //Switch to the Opened state
      pppChangeState(fsm, PPP_STATE_9_OPENED);
 800b25a:	2109      	movs	r1, #9
 800b25c:	68b8      	ldr	r0, [r7, #8]
 800b25e:	f000 f9a1 	bl	800b5a4 <pppChangeState>
      //Indicate to the upper layers that the automaton is entering the
      //Opened state. The link is available for network traffic
      callbacks->thisLayerUp(context);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	4798      	blx	r3
      break;
 800b26a:	e00d      	b.n	800b288 <pppRcvConfigureAckEvent+0xa4>
   case PPP_STATE_9_OPENED:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b274:	2106      	movs	r1, #6
 800b276:	68b8      	ldr	r0, [r7, #8]
 800b278:	f000 f994 	bl	800b5a4 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	4798      	blx	r3
      break;
 800b284:	e000      	b.n	800b288 <pppRcvConfigureAckEvent+0xa4>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800b286:	bf00      	nop
   }
}
 800b288:	bf00      	nop
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <pppRcvConfigureNakEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppRcvConfigureNakEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3b02      	subs	r3, #2
 800b2a2:	2b07      	cmp	r3, #7
 800b2a4:	d842      	bhi.n	800b32c <pppRcvConfigureNakEvent+0x9c>
 800b2a6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <pppRcvConfigureNakEvent+0x1c>)
 800b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ac:	0800b2cd 	.word	0x0800b2cd
 800b2b0:	0800b2cd 	.word	0x0800b2cd
 800b2b4:	0800b32d 	.word	0x0800b32d
 800b2b8:	0800b32d 	.word	0x0800b32d
 800b2bc:	0800b2d9 	.word	0x0800b2d9
 800b2c0:	0800b2ed 	.word	0x0800b2ed
 800b2c4:	0800b2ff 	.word	0x0800b2ff
 800b2c8:	0800b313 	.word	0x0800b313
   {
   case PPP_STATE_2_CLOSED:
   case PPP_STATE_3_STOPPED:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, NULL);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	4798      	blx	r3
      //Stay in current state
      break;
 800b2d6:	e02a      	b.n	800b32e <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_5_STOPPING:
      //Stay in current state
      break;
   case PPP_STATE_6_REQ_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	210a      	movs	r1, #10
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	4798      	blx	r3
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	699b      	ldr	r3, [r3, #24]
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	4798      	blx	r3
      //Stay in current state
      break;
 800b2ea:	e020      	b.n	800b32e <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_7_ACK_RCVD:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b2f4:	2106      	movs	r1, #6
 800b2f6:	68b8      	ldr	r0, [r7, #8]
 800b2f8:	f000 f954 	bl	800b5a4 <pppChangeState>
      break;
 800b2fc:	e017      	b.n	800b32e <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_8_ACK_SENT:
      //Initialize restart counter
      callbacks->initRestartCount(context, PPP_MAX_CONFIGURE);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	210a      	movs	r1, #10
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	4798      	blx	r3
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	4798      	blx	r3
      //Stay in current state
      break;
 800b310:	e00d      	b.n	800b32e <pppRcvConfigureNakEvent+0x9e>
   case PPP_STATE_9_OPENED:
      //Send Configure-Request packet
      callbacks->sendConfigureReq(context);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b31a:	2106      	movs	r1, #6
 800b31c:	68b8      	ldr	r0, [r7, #8]
 800b31e:	f000 f941 	bl	800b5a4 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	4798      	blx	r3
      break;
 800b32a:	e000      	b.n	800b32e <pppRcvConfigureNakEvent+0x9e>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800b32c:	bf00      	nop
   }
}
 800b32e:	bf00      	nop
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop

0800b338 <pppRcvTerminateReqEvent>:
 * @param[in] terminateReqPacket Terminate-Request packet received from the peer
 **/

void pppRcvTerminateReqEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, const PppTerminatePacket *terminateReqPacket)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	603b      	str	r3, [r7, #0]
   //Check current state
   switch(fsm->state)
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3b02      	subs	r3, #2
 800b34c:	2b07      	cmp	r3, #7
 800b34e:	d835      	bhi.n	800b3bc <pppRcvTerminateReqEvent+0x84>
 800b350:	a201      	add	r2, pc, #4	; (adr r2, 800b358 <pppRcvTerminateReqEvent+0x20>)
 800b352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b356:	bf00      	nop
 800b358:	0800b379 	.word	0x0800b379
 800b35c:	0800b379 	.word	0x0800b379
 800b360:	0800b379 	.word	0x0800b379
 800b364:	0800b379 	.word	0x0800b379
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	0800b385 	.word	0x0800b385
 800b370:	0800b385 	.word	0x0800b385
 800b374:	0800b399 	.word	0x0800b399
   case PPP_STATE_2_CLOSED:
   case PPP_STATE_3_STOPPED:
   case PPP_STATE_4_CLOSING:
   case PPP_STATE_5_STOPPING:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, terminateReqPacket);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	6839      	ldr	r1, [r7, #0]
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	4798      	blx	r3
      //Stay in current state
      break;
 800b382:	e01c      	b.n	800b3be <pppRcvTerminateReqEvent+0x86>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, terminateReqPacket);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b38e:	2106      	movs	r1, #6
 800b390:	68b8      	ldr	r0, [r7, #8]
 800b392:	f000 f907 	bl	800b5a4 <pppChangeState>
      break;
 800b396:	e012      	b.n	800b3be <pppRcvTerminateReqEvent+0x86>
   case PPP_STATE_9_OPENED:
      //Zero restart counter
      callbacks->zeroRestartCount(context);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	4798      	blx	r3
      //Send Terminate-Ack packet
      callbacks->sendTerminateAck(context, terminateReqPacket);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	4798      	blx	r3
      //Switch to the Stopping state
      pppChangeState(fsm, PPP_STATE_5_STOPPING);
 800b3aa:	2105      	movs	r1, #5
 800b3ac:	68b8      	ldr	r0, [r7, #8]
 800b3ae:	f000 f8f9 	bl	800b5a4 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	4798      	blx	r3
      break;
 800b3ba:	e000      	b.n	800b3be <pppRcvTerminateReqEvent+0x86>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800b3bc:	bf00      	nop
   }
}
 800b3be:	bf00      	nop
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop

0800b3c8 <pppRcvTerminateAckEvent>:
 * @param[in] callbacks FSM actions
 **/

void pppRcvTerminateAckEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
   //Check current state
   switch(fsm->state)
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3b02      	subs	r3, #2
 800b3da:	2b07      	cmp	r3, #7
 800b3dc:	d836      	bhi.n	800b44c <pppRcvTerminateAckEvent+0x84>
 800b3de:	a201      	add	r2, pc, #4	; (adr r2, 800b3e4 <pppRcvTerminateAckEvent+0x1c>)
 800b3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e4:	0800b44d 	.word	0x0800b44d
 800b3e8:	0800b44d 	.word	0x0800b44d
 800b3ec:	0800b405 	.word	0x0800b405
 800b3f0:	0800b417 	.word	0x0800b417
 800b3f4:	0800b429 	.word	0x0800b429
 800b3f8:	0800b429 	.word	0x0800b429
 800b3fc:	0800b44d 	.word	0x0800b44d
 800b400:	0800b433 	.word	0x0800b433
   case PPP_STATE_3_STOPPED:
      //Stay in current state
      break;
   case PPP_STATE_4_CLOSING:
      //Switch to the Closed state
      pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800b404:	2102      	movs	r1, #2
 800b406:	68b8      	ldr	r0, [r7, #8]
 800b408:	f000 f8cc 	bl	800b5a4 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Initial, Closed or Stopped states. The lower layer is no longer
      //needed for the link
      callbacks->thisLayerFinished(context);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	4798      	blx	r3
      break;
 800b414:	e01b      	b.n	800b44e <pppRcvTerminateAckEvent+0x86>
   case PPP_STATE_5_STOPPING:
      //Switch to the Stopped state
      pppChangeState(fsm, PPP_STATE_3_STOPPED);
 800b416:	2103      	movs	r1, #3
 800b418:	68b8      	ldr	r0, [r7, #8]
 800b41a:	f000 f8c3 	bl	800b5a4 <pppChangeState>
      //Indicate to the lower layers that the automaton is entering the
      //Initial, Closed or Stopped states. The lower layer is no longer
      //needed for the link
      callbacks->thisLayerFinished(context);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	4798      	blx	r3
      break;
 800b426:	e012      	b.n	800b44e <pppRcvTerminateAckEvent+0x86>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b428:	2106      	movs	r1, #6
 800b42a:	68b8      	ldr	r0, [r7, #8]
 800b42c:	f000 f8ba 	bl	800b5a4 <pppChangeState>
      break;
 800b430:	e00d      	b.n	800b44e <pppRcvTerminateAckEvent+0x86>
   case PPP_STATE_8_ACK_SENT:
      //Stay in current state
      break;
   case PPP_STATE_9_OPENED:
      //Send Configure-Req packet
      callbacks->sendConfigureReq(context);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	4798      	blx	r3
      //Switch to the Req-Sent state
      pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b43a:	2106      	movs	r1, #6
 800b43c:	68b8      	ldr	r0, [r7, #8]
 800b43e:	f000 f8b1 	bl	800b5a4 <pppChangeState>
      //Indicate to the upper layers that the automaton is leaving the Opened
      //state. The link is no longer available for network traffic
      callbacks->thisLayerDown(context);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	4798      	blx	r3
      break;
 800b44a:	e000      	b.n	800b44e <pppRcvTerminateAckEvent+0x86>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800b44c:	bf00      	nop
   }
}
 800b44e:	bf00      	nop
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop

0800b458 <pppRcvUnknownCodeEvent>:
 * @param[in] packet Un-interpretable packet received from the peer
 **/

void pppRcvUnknownCodeEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, const PppPacket *packet)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	603b      	str	r3, [r7, #0]
   //Check current state
   switch(fsm->state)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	3b02      	subs	r3, #2
 800b46c:	2b07      	cmp	r3, #7
 800b46e:	d805      	bhi.n	800b47c <pppRcvUnknownCodeEvent+0x24>
   case PPP_STATE_6_REQ_SENT:
   case PPP_STATE_7_ACK_RCVD:
   case PPP_STATE_8_ACK_SENT:
   case PPP_STATE_9_OPENED:
      //Send Reject-Code packet
      callbacks->sendCodeRej(context, packet);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b474:	6839      	ldr	r1, [r7, #0]
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	4798      	blx	r3
      //Stay in current state
      break;
 800b47a:	e000      	b.n	800b47e <pppRcvUnknownCodeEvent+0x26>
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800b47c:	bf00      	nop
   }
}
 800b47e:	bf00      	nop
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <pppRcvCodeRejEvent>:
 *   is acceptable or catastrophic
 **/

void pppRcvCodeRejEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, bool_t acceptable)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	603b      	str	r3, [r7, #0]
   //Check whether the rejected value is acceptable or catastrophic
   if(acceptable)
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01c      	beq.n	800b4d6 <pppRcvCodeRejEvent+0x4e>
   {
      //The RXJ+ event arises when the rejected value is acceptable, such
      //as a Code-Reject of an extended code, or a Protocol-Reject of a
      //NCP. These are within the scope of normal operation
      switch(fsm->state)
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3b02      	subs	r3, #2
 800b4a2:	2b07      	cmp	r3, #7
 800b4a4:	d859      	bhi.n	800b55a <pppRcvCodeRejEvent+0xd2>
 800b4a6:	a201      	add	r2, pc, #4	; (adr r2, 800b4ac <pppRcvCodeRejEvent+0x24>)
 800b4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ac:	0800b55b 	.word	0x0800b55b
 800b4b0:	0800b55b 	.word	0x0800b55b
 800b4b4:	0800b55b 	.word	0x0800b55b
 800b4b8:	0800b55b 	.word	0x0800b55b
 800b4bc:	0800b55b 	.word	0x0800b55b
 800b4c0:	0800b4cd 	.word	0x0800b4cd
 800b4c4:	0800b55b 	.word	0x0800b55b
 800b4c8:	0800b55b 	.word	0x0800b55b
      case PPP_STATE_6_REQ_SENT:
         //Stay in current state
         break;
      case PPP_STATE_7_ACK_RCVD:
         //Switch to the Req-Sent state
         pppChangeState(fsm, PPP_STATE_6_REQ_SENT);
 800b4cc:	2106      	movs	r1, #6
 800b4ce:	68b8      	ldr	r0, [r7, #8]
 800b4d0:	f000 f868 	bl	800b5a4 <pppChangeState>
         break;
 800b4d4:	e044      	b.n	800b560 <pppRcvCodeRejEvent+0xd8>
   {
      //The RXJ- event arises when the rejected value is catastrophic,
      //such as a Code-Reject of Configure-Request, or a Protocol-Reject
      //of LCP! This event communicates an unrecoverable error that
      //terminates the connection
      switch(fsm->state)
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3b02      	subs	r3, #2
 800b4dc:	2b07      	cmp	r3, #7
 800b4de:	d83e      	bhi.n	800b55e <pppRcvCodeRejEvent+0xd6>
 800b4e0:	a201      	add	r2, pc, #4	; (adr r2, 800b4e8 <pppRcvCodeRejEvent+0x60>)
 800b4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e6:	bf00      	nop
 800b4e8:	0800b509 	.word	0x0800b509
 800b4ec:	0800b509 	.word	0x0800b509
 800b4f0:	0800b513 	.word	0x0800b513
 800b4f4:	0800b525 	.word	0x0800b525
 800b4f8:	0800b525 	.word	0x0800b525
 800b4fc:	0800b525 	.word	0x0800b525
 800b500:	0800b525 	.word	0x0800b525
 800b504:	0800b537 	.word	0x0800b537
      case PPP_STATE_2_CLOSED:
      case PPP_STATE_3_STOPPED:
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	4798      	blx	r3
         //Stay in current state
         break;
 800b510:	e026      	b.n	800b560 <pppRcvCodeRejEvent+0xd8>
      case PPP_STATE_4_CLOSING:
         //Switch to the Closed state
         pppChangeState(fsm, PPP_STATE_2_CLOSED);
 800b512:	2102      	movs	r1, #2
 800b514:	68b8      	ldr	r0, [r7, #8]
 800b516:	f000 f845 	bl	800b5a4 <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	4798      	blx	r3
         break;
 800b522:	e01d      	b.n	800b560 <pppRcvCodeRejEvent+0xd8>
      case PPP_STATE_5_STOPPING:
      case PPP_STATE_6_REQ_SENT:
      case PPP_STATE_7_ACK_RCVD:
      case PPP_STATE_8_ACK_SENT:
         //Switch to the Stopped state
         pppChangeState(fsm, PPP_STATE_3_STOPPED);
 800b524:	2103      	movs	r1, #3
 800b526:	68b8      	ldr	r0, [r7, #8]
 800b528:	f000 f83c 	bl	800b5a4 <pppChangeState>
         //Indicate to the lower layers that the automaton is entering the
         //Initial, Closed or Stopped states. The lower layer is no longer
         //needed for the link
         callbacks->thisLayerFinished(context);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	4798      	blx	r3
         break;
 800b534:	e014      	b.n	800b560 <pppRcvCodeRejEvent+0xd8>
      case PPP_STATE_9_OPENED:
         //Initialize restart counter
         callbacks->initRestartCount(context, PPP_MAX_TERMINATE);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	2102      	movs	r1, #2
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	4798      	blx	r3
         //Send Terminate-Req packet
         callbacks->sendTerminateReq(context);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	4798      	blx	r3
         //Switch to the Stopping state
         pppChangeState(fsm, PPP_STATE_5_STOPPING);
 800b548:	2105      	movs	r1, #5
 800b54a:	68b8      	ldr	r0, [r7, #8]
 800b54c:	f000 f82a 	bl	800b5a4 <pppChangeState>
         //Indicate to the upper layers that the automaton is leaving the Opened
         //state. The link is no longer available for network traffic
         callbacks->thisLayerDown(context);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	4798      	blx	r3
         break;
 800b558:	e002      	b.n	800b560 <pppRcvCodeRejEvent+0xd8>
         break;
 800b55a:	bf00      	nop
 800b55c:	e000      	b.n	800b560 <pppRcvCodeRejEvent+0xd8>
      default:
         //This event cannot occur in a properly implemented automaton.
         //No transition is taken, and the implementation should not
         //reset or freeze
         break;
 800b55e:	bf00      	nop
      }
   }
}
 800b560:	bf00      	nop
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <pppRcvEchoReqEvent>:
 * @param[in] echoReqPacket Echo-Request packet received from the peer
 **/

void pppRcvEchoReqEvent(PppContext *context, PppFsm *fsm,
   const PppCallbacks *callbacks, const PppEchoPacket *echoReqPacket)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
 800b574:	603b      	str	r3, [r7, #0]
   //Check current state
   switch(fsm->state)
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d30a      	bcc.n	800b594 <pppRcvEchoReqEvent+0x2c>
 800b57e:	2b08      	cmp	r3, #8
 800b580:	d90a      	bls.n	800b598 <pppRcvEchoReqEvent+0x30>
 800b582:	2b09      	cmp	r3, #9
 800b584:	d000      	beq.n	800b588 <pppRcvEchoReqEvent+0x20>
      break;
   default:
      //This event cannot occur in a properly implemented automaton.
      //No transition is taken, and the implementation should not
      //reset or freeze
      break;
 800b586:	e005      	b.n	800b594 <pppRcvEchoReqEvent+0x2c>
      callbacks->sendEchoRep(context, echoReqPacket);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	4798      	blx	r3
      break;
 800b592:	e002      	b.n	800b59a <pppRcvEchoReqEvent+0x32>
      break;
 800b594:	bf00      	nop
 800b596:	e000      	b.n	800b59a <pppRcvEchoReqEvent+0x32>
      break;
 800b598:	bf00      	nop
   }
}
 800b59a:	bf00      	nop
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <pppChangeState>:
 * @param[in,out] fsm Finite state machine
 * @param[in] newState New PPP state to switch to
 **/

void pppChangeState(PppFsm *fsm, PppState newState)
{
 800b5a4:	b590      	push	{r4, r7, lr}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	70fb      	strb	r3, [r7, #3]
      "ACK_SENT", //8
      "OPENED"    //9
   };

   //Sanity check
   if(fsm->state < arraysize(stateLabel) && newState < arraysize(stateLabel))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b09      	cmp	r3, #9
 800b5b6:	d81c      	bhi.n	800b5f2 <pppChangeState+0x4e>
 800b5b8:	78fb      	ldrb	r3, [r7, #3]
 800b5ba:	2b09      	cmp	r3, #9
 800b5bc:	d819      	bhi.n	800b5f2 <pppChangeState+0x4e>
   {
      //Debug message
      TRACE_INFO("PPP FSM: %s (%u) -> %s (%u)\r\n", stateLabel[fsm->state],
 800b5be:	f7f5 f834 	bl	800062a <osSuspendAllTasks>
 800b5c2:	4b0f      	ldr	r3, [pc, #60]	; (800b600 <pppChangeState+0x5c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68d8      	ldr	r0, [r3, #12]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a0d      	ldr	r2, [pc, #52]	; (800b604 <pppChangeState+0x60>)
 800b5ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681c      	ldr	r4, [r3, #0]
 800b5d6:	78fb      	ldrb	r3, [r7, #3]
 800b5d8:	4a0a      	ldr	r2, [pc, #40]	; (800b604 <pppChangeState+0x60>)
 800b5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5de:	78fa      	ldrb	r2, [r7, #3]
 800b5e0:	9201      	str	r2, [sp, #4]
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	4623      	mov	r3, r4
 800b5e6:	460a      	mov	r2, r1
 800b5e8:	4907      	ldr	r1, [pc, #28]	; (800b608 <pppChangeState+0x64>)
 800b5ea:	f00c fdab 	bl	8018144 <fiprintf>
 800b5ee:	f7f5 f827 	bl	8000640 <osResumeAllTasks>
         fsm->state, stateLabel[newState], newState);
   }
#endif

   //Switch to the new state
   fsm->state = newState;
 800b5f2:	78fa      	ldrb	r2, [r7, #3]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	601a      	str	r2, [r3, #0]
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd90      	pop	{r4, r7, pc}
 800b600:	20000058 	.word	0x20000058
 800b604:	20000000 	.word	0x20000000
 800b608:	0801a220 	.word	0x0801a220

0800b60c <pppHdlcDriverInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppHdlcDriverInit(NetInterface *interface)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
   PppContext *context;

   //Debug message
   TRACE_INFO("Initializing PPP HDLC driver...\r\n");
 800b614:	f7f5 f809 	bl	800062a <osSuspendAllTasks>
 800b618:	4b22      	ldr	r3, [pc, #136]	; (800b6a4 <pppHdlcDriverInit+0x98>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	2221      	movs	r2, #33	; 0x21
 800b620:	2101      	movs	r1, #1
 800b622:	4821      	ldr	r0, [pc, #132]	; (800b6a8 <pppHdlcDriverInit+0x9c>)
 800b624:	f00c fdee 	bl	8018204 <fwrite>
 800b628:	f7f5 f80a 	bl	8000640 <osResumeAllTasks>

   //Point to the PPP context
   context = interface->pppContext;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b632:	60fb      	str	r3, [r7, #12]

   //Initialize variables
   context->txBufferLen = 0;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800b63a:	3318      	adds	r3, #24
 800b63c:	2200      	movs	r2, #0
 800b63e:	601a      	str	r2, [r3, #0]
   context->txWriteIndex = 0;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800b646:	331c      	adds	r3, #28
 800b648:	2200      	movs	r2, #0
 800b64a:	601a      	str	r2, [r3, #0]
   context->txReadIndex = 0;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b652:	2200      	movs	r2, #0
 800b654:	601a      	str	r2, [r3, #0]
   context->rxBufferLen = 0;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800b65c:	3304      	adds	r3, #4
 800b65e:	2200      	movs	r2, #0
 800b660:	601a      	str	r2, [r3, #0]
   context->rxWriteIndex = 0;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800b668:	3308      	adds	r3, #8
 800b66a:	2200      	movs	r2, #0
 800b66c:	601a      	str	r2, [r3, #0]
   context->rxReadIndex = 0;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800b674:	330c      	adds	r3, #12
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]
   context->rxFrameCount = 0;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800b680:	3310      	adds	r3, #16
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]

   //Initialize UART
   interface->uartDriver->init();
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4798      	blx	r3

   //Accept any packets from the upper layer
   osSetEvent(&interface->nicTxEvent);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3370      	adds	r3, #112	; 0x70
 800b692:	4618      	mov	r0, r3
 800b694:	f7f5 f810 	bl	80006b8 <osSetEvent>

   //Successful initialization
   return NO_ERROR;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000058 	.word	0x20000058
 800b6a8:	0801a2a4 	.word	0x0801a2a4

0800b6ac <pppHdlcDriverTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverTick(NetInterface *interface)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <pppHdlcDriverEnableIrq>:
 * @brief Enable interrupts
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverEnableIrq(NetInterface *interface)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
   //Enable UART interrupts
   interface->uartDriver->enableIrq();
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	4798      	blx	r3
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <pppHdlcDriverDisableIrq>:
 * @brief Disable interrupts
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverDisableIrq(NetInterface *interface)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
   //USART interrupts are always enabled
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <pppHdlcDriverEventHandler>:
 * @brief PPP HDLC driver event handler
 * @param[in] interface Underlying network interface
 **/

void pppHdlcDriverEventHandler(NetInterface *interface)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b6fa:	60fb      	str	r3, [r7, #12]

   //Check PPP state
   if(interface->pppContext->pppPhase != PPP_PHASE_DEAD)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b702:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b706:	2b00      	cmp	r3, #0
 800b708:	d017      	beq.n	800b73a <pppHdlcDriverEventHandler+0x4e>
   {
      //Process all pending packets
      while(context->rxFrameCount > 0)
 800b70a:	e00f      	b.n	800b72c <pppHdlcDriverEventHandler+0x40>
      {
         //Read incoming packet
         pppHdlcDriverReceivePacket(interface);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f8e9 	bl	800b8e4 <pppHdlcDriverReceivePacket>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b712:	b672      	cpsid	i

         //Enter critical section
         __disable_irq();
         //Decrement frame counter
         context->rxFrameCount--;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800b71a:	3310      	adds	r3, #16
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	1e5a      	subs	r2, r3, #1
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800b726:	3310      	adds	r3, #16
 800b728:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b72a:	b662      	cpsie	i
      while(context->rxFrameCount > 0)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800b732:	3310      	adds	r3, #16
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1e8      	bne.n	800b70c <pppHdlcDriverEventHandler+0x20>
         //Exit critical section
         __enable_irq();
      }
   }
}
 800b73a:	bf00      	nop
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <pppHdlcDriverSendPacket>:
 * @return Error code
 **/

error_t pppHdlcDriverSendPacket(NetInterface *interface,
   const NetBuffer *buffer, size_t offset)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b08c      	sub	sp, #48	; 0x30
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	607a      	str	r2, [r7, #4]
   uint16_t protocol;
   uint32_t accm;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b754:	623b      	str	r3, [r7, #32]

   //Point to the beginning of the frame
   p = netBufferAt(buffer, offset);
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	68b8      	ldr	r0, [r7, #8]
 800b75a:	f7f6 fe28 	bl	80023ae <netBufferAt>
 800b75e:	61f8      	str	r0, [r7, #28]

   //Parse the PPP frame header
   pppParseFrameHeader(p, PPP_FRAME_HEADER_SIZE, &protocol);
 800b760:	f107 0316 	add.w	r3, r7, #22
 800b764:	461a      	mov	r2, r3
 800b766:	2104      	movs	r1, #4
 800b768:	69f8      	ldr	r0, [r7, #28]
 800b76a:	f7ff f9ba 	bl	800aae2 <pppParseFrameHeader>

   //Check Protocol field
   if(protocol == PPP_PROTOCOL_IP || protocol == PPP_PROTOCOL_IPV6)
 800b76e:	8afb      	ldrh	r3, [r7, #22]
 800b770:	2b21      	cmp	r3, #33	; 0x21
 800b772:	d002      	beq.n	800b77a <pppHdlcDriverSendPacket+0x38>
 800b774:	8afb      	ldrh	r3, [r7, #22]
 800b776:	2b57      	cmp	r3, #87	; 0x57
 800b778:	d104      	bne.n	800b784 <pppHdlcDriverSendPacket+0x42>
   {
      //Use the ACCM value that has been negotiated
      accm = context->peerConfig.accm;
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b780:	627b      	str	r3, [r7, #36]	; 0x24
 800b782:	e002      	b.n	800b78a <pppHdlcDriverSendPacket+0x48>
   }
   else
   {
      //Use default ACCM mapping
      accm = PPP_DEFAULT_ACCM;
 800b784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
   }

   //Send flag
   pppHdlcDriverWriteTxQueue(context, PPP_FLAG_CHAR);
 800b78a:	217e      	movs	r1, #126	; 0x7e
 800b78c:	6a38      	ldr	r0, [r7, #32]
 800b78e:	f000 f920 	bl	800b9d2 <pppHdlcDriverWriteTxQueue>

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 800b792:	2300      	movs	r3, #0
 800b794:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b796:	e084      	b.n	800b8a2 <pppHdlcDriverSendPacket+0x160>
   {
      //Is there any data to copy from the current chunk?
      if(offset < buffer->chunk[i].length)
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79c:	3301      	adds	r3, #1
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	4413      	add	r3, r2
 800b7a2:	889b      	ldrh	r3, [r3, #4]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d26d      	bcs.n	800b888 <pppHdlcDriverSendPacket+0x146>
      {
         //Point to the first byte to be read
         p = (uint8_t *) buffer->chunk[i].address + offset;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7b0:	3201      	adds	r2, #1
 800b7b2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	61fb      	str	r3, [r7, #28]
         //Compute the number of bytes to copy at a time
         n = buffer->chunk[i].length - offset;
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	4413      	add	r3, r2
 800b7c6:	889b      	ldrh	r3, [r3, #4]
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	61bb      	str	r3, [r7, #24]

         //Copy data to TX queue
         for(j = 0; j < n; j++)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7d4:	e051      	b.n	800b87a <pppHdlcDriverSendPacket+0x138>
         {
            if(p[j] < PPP_MASK_CHAR)
 800b7d6:	69fa      	ldr	r2, [r7, #28]
 800b7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7da:	4413      	add	r3, r2
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2b1f      	cmp	r3, #31
 800b7e0:	d824      	bhi.n	800b82c <pppHdlcDriverSendPacket+0xea>
            {
               //Check whether the character is flagged
               if(accm & (1 << p[j]))
 800b7e2:	69fa      	ldr	r2, [r7, #28]
 800b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e6:	4413      	add	r3, r2
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	4093      	lsls	r3, r2
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00f      	beq.n	800b81a <pppHdlcDriverSendPacket+0xd8>
               {
                  pppHdlcDriverWriteTxQueue(context, PPP_ESC_CHAR);
 800b7fa:	217d      	movs	r1, #125	; 0x7d
 800b7fc:	6a38      	ldr	r0, [r7, #32]
 800b7fe:	f000 f8e8 	bl	800b9d2 <pppHdlcDriverWriteTxQueue>
                  pppHdlcDriverWriteTxQueue(context, p[j] ^ PPP_MASK_CHAR);
 800b802:	69fa      	ldr	r2, [r7, #28]
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	4413      	add	r3, r2
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	f083 0320 	eor.w	r3, r3, #32
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	4619      	mov	r1, r3
 800b812:	6a38      	ldr	r0, [r7, #32]
 800b814:	f000 f8dd 	bl	800b9d2 <pppHdlcDriverWriteTxQueue>
 800b818:	e02c      	b.n	800b874 <pppHdlcDriverSendPacket+0x132>
               }
               else
               {
                  //Enqueue current character
                  pppHdlcDriverWriteTxQueue(context, p[j]);
 800b81a:	69fa      	ldr	r2, [r7, #28]
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	4413      	add	r3, r2
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	4619      	mov	r1, r3
 800b824:	6a38      	ldr	r0, [r7, #32]
 800b826:	f000 f8d4 	bl	800b9d2 <pppHdlcDriverWriteTxQueue>
 800b82a:	e023      	b.n	800b874 <pppHdlcDriverSendPacket+0x132>
               }
            }
            else if(p[j] == PPP_ESC_CHAR || p[j] == PPP_FLAG_CHAR)
 800b82c:	69fa      	ldr	r2, [r7, #28]
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	4413      	add	r3, r2
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b7d      	cmp	r3, #125	; 0x7d
 800b836:	d005      	beq.n	800b844 <pppHdlcDriverSendPacket+0x102>
 800b838:	69fa      	ldr	r2, [r7, #28]
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	4413      	add	r3, r2
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b7e      	cmp	r3, #126	; 0x7e
 800b842:	d10f      	bne.n	800b864 <pppHdlcDriverSendPacket+0x122>
            {
               pppHdlcDriverWriteTxQueue(context, PPP_ESC_CHAR);
 800b844:	217d      	movs	r1, #125	; 0x7d
 800b846:	6a38      	ldr	r0, [r7, #32]
 800b848:	f000 f8c3 	bl	800b9d2 <pppHdlcDriverWriteTxQueue>
               pppHdlcDriverWriteTxQueue(context, p[j] ^ PPP_MASK_CHAR);
 800b84c:	69fa      	ldr	r2, [r7, #28]
 800b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b850:	4413      	add	r3, r2
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	f083 0320 	eor.w	r3, r3, #32
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	4619      	mov	r1, r3
 800b85c:	6a38      	ldr	r0, [r7, #32]
 800b85e:	f000 f8b8 	bl	800b9d2 <pppHdlcDriverWriteTxQueue>
 800b862:	e007      	b.n	800b874 <pppHdlcDriverSendPacket+0x132>
            }
            else
            {
               //Enqueue current character
               pppHdlcDriverWriteTxQueue(context, p[j]);
 800b864:	69fa      	ldr	r2, [r7, #28]
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	4413      	add	r3, r2
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	4619      	mov	r1, r3
 800b86e:	6a38      	ldr	r0, [r7, #32]
 800b870:	f000 f8af 	bl	800b9d2 <pppHdlcDriverWriteTxQueue>
         for(j = 0; j < n; j++)
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	3301      	adds	r3, #1
 800b878:	62bb      	str	r3, [r7, #40]	; 0x28
 800b87a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d3a9      	bcc.n	800b7d6 <pppHdlcDriverSendPacket+0x94>
            }
         }

         //Process the next block from the start
         offset = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	607b      	str	r3, [r7, #4]
 800b886:	e009      	b.n	800b89c <pppHdlcDriverSendPacket+0x15a>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88c:	3301      	adds	r3, #1
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	4413      	add	r3, r2
 800b892:	889b      	ldrh	r3, [r3, #4]
 800b894:	461a      	mov	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	1a9b      	subs	r3, r3, r2
 800b89a:	607b      	str	r3, [r7, #4]
   for(i = 0; i < buffer->chunkCount; i++)
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89e:	3301      	adds	r3, #1
 800b8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	f4ff af75 	bcc.w	800b798 <pppHdlcDriverSendPacket+0x56>
      }
   }

   //Send flag
   pppHdlcDriverWriteTxQueue(context, PPP_FLAG_CHAR);
 800b8ae:	217e      	movs	r1, #126	; 0x7e
 800b8b0:	6a38      	ldr	r0, [r7, #32]
 800b8b2:	f000 f88e 	bl	800b9d2 <pppHdlcDriverWriteTxQueue>

   //Start transferring data
   interface->uartDriver->startTx();
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	4798      	blx	r3

   //Check whether the TX queue is available for writing
   if(context->txBufferLen <= (PPP_TX_BUFFER_SIZE - 3006))
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800b8c4:	3318      	adds	r3, #24
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f240 4242 	movw	r2, #1090	; 0x442
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d804      	bhi.n	800b8da <pppHdlcDriverSendPacket+0x198>
   {
      //The transmitter can accept another packet
      osSetEvent(&interface->nicTxEvent);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3370      	adds	r3, #112	; 0x70
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f4 feef 	bl	80006b8 <osSetEvent>
   }

   //Data successfully written
   return NO_ERROR;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3730      	adds	r7, #48	; 0x30
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <pppHdlcDriverReceivePacket>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppHdlcDriverReceivePacket(NetInterface *interface)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
   bool_t escFlag;
   uint32_t accm;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b8f2:	617b      	str	r3, [r7, #20]
   //Retrieve ACCM
   accm = context->localConfig.accm;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800b8fa:	613b      	str	r3, [r7, #16]

   //Length of the original PPP frame
   n = 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	61fb      	str	r3, [r7, #28]
   //This flag tells whether the next character is escaped
   escFlag = FALSE;
 800b900:	2300      	movs	r3, #0
 800b902:	61bb      	str	r3, [r7, #24]

   //The receiver must reverse the octet stuffing procedure
   while(n < PPP_MAX_FRAME_SIZE && context->rxBufferLen > 0)
 800b904:	e03c      	b.n	800b980 <pppHdlcDriverReceivePacket+0x9c>
   {
      //Read a single character
      c = pppHdlcDriverReadRxQueue(context);
 800b906:	6978      	ldr	r0, [r7, #20]
 800b908:	f000 f89f 	bl	800ba4a <pppHdlcDriverReadRxQueue>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73fb      	strb	r3, [r7, #15]

      if(c < PPP_MASK_CHAR)
 800b910:	7bfb      	ldrb	r3, [r7, #15]
 800b912:	2b1f      	cmp	r3, #31
 800b914:	d811      	bhi.n	800b93a <pppHdlcDriverReceivePacket+0x56>
      {
         //Check whether the character is flagged
         if(accm & (1 << c))
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	2201      	movs	r2, #1
 800b91a:	fa02 f303 	lsl.w	r3, r2, r3
 800b91e:	461a      	mov	r2, r3
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	4013      	ands	r3, r2
 800b924:	2b00      	cmp	r3, #0
 800b926:	d12b      	bne.n	800b980 <pppHdlcDriverReceivePacket+0x9c>
            //The extra characters must be removed from the incoming data stream
         }
         else
         {
            //Copy current character
            context->frame[n++] = c;
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	61fa      	str	r2, [r7, #28]
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	4413      	add	r3, r2
 800b932:	7bfa      	ldrb	r2, [r7, #15]
 800b934:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800b938:	e022      	b.n	800b980 <pppHdlcDriverReceivePacket+0x9c>
         }
      }
      else if(c == PPP_ESC_CHAR)
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
 800b93c:	2b7d      	cmp	r3, #125	; 0x7d
 800b93e:	d102      	bne.n	800b946 <pppHdlcDriverReceivePacket+0x62>
      {
         //All occurrences of 0x7D indicate that the next character is escaped
         escFlag = TRUE;
 800b940:	2301      	movs	r3, #1
 800b942:	61bb      	str	r3, [r7, #24]
 800b944:	e01c      	b.n	800b980 <pppHdlcDriverReceivePacket+0x9c>
      }
      else if(c == PPP_FLAG_CHAR)
 800b946:	7bfb      	ldrb	r3, [r7, #15]
 800b948:	2b7e      	cmp	r3, #126	; 0x7e
 800b94a:	d026      	beq.n	800b99a <pppHdlcDriverReceivePacket+0xb6>
      {
         //0x7E flag found
         break;
      }
      else if(escFlag)
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00e      	beq.n	800b970 <pppHdlcDriverReceivePacket+0x8c>
      {
         //The character is XOR'ed with 0x20
         context->frame[n++] = c ^ PPP_MASK_CHAR;
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	1c5a      	adds	r2, r3, #1
 800b956:	61fa      	str	r2, [r7, #28]
 800b958:	7bfa      	ldrb	r2, [r7, #15]
 800b95a:	f082 0220 	eor.w	r2, r2, #32
 800b95e:	b2d1      	uxtb	r1, r2
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	4413      	add	r3, r2
 800b964:	460a      	mov	r2, r1
 800b966:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
         escFlag = FALSE;
 800b96a:	2300      	movs	r3, #0
 800b96c:	61bb      	str	r3, [r7, #24]
 800b96e:	e007      	b.n	800b980 <pppHdlcDriverReceivePacket+0x9c>
      }
      else
      {
         //Copy current character
         context->frame[n++] = c;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	61fa      	str	r2, [r7, #28]
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	4413      	add	r3, r2
 800b97a:	7bfa      	ldrb	r2, [r7, #15]
 800b97c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
   while(n < PPP_MAX_FRAME_SIZE && context->rxBufferLen > 0)
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	f240 52e1 	movw	r2, #1505	; 0x5e1
 800b986:	4293      	cmp	r3, r2
 800b988:	d808      	bhi.n	800b99c <pppHdlcDriverReceivePacket+0xb8>
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800b990:	3304      	adds	r3, #4
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1b6      	bne.n	800b906 <pppHdlcDriverReceivePacket+0x22>
 800b998:	e000      	b.n	800b99c <pppHdlcDriverReceivePacket+0xb8>
         break;
 800b99a:	bf00      	nop
      }
   }

   //Check whether a valid PPP frame has been received
   if(n > 0)
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d007      	beq.n	800b9b2 <pppHdlcDriverReceivePacket+0xce>
      //Debug message
      TRACE_DEBUG("PPP frame received (%" PRIuSIZE " bytes)...\r\n", n);
      TRACE_DEBUG_ARRAY("  ", context->frame, n);

      //Pass the packet to the upper layer
      nicProcessPacket(interface, context->frame, n);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800b9a8:	69fa      	ldr	r2, [r7, #28]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7f6 ffb2 	bl	8002916 <nicProcessPacket>
   }

   //Successful read operation
   return NO_ERROR;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3720      	adds	r7, #32
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <pppHdlcDriverUpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t pppHdlcDriverUpdateMacAddrFilter(NetInterface *interface)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
   //Not implemented
   return NO_ERROR;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	370c      	adds	r7, #12
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <pppHdlcDriverWriteTxQueue>:
 * @param[in] context Pointer to the PPP context
 * @param[in] c Character to be written
 **/

void pppHdlcDriverWriteTxQueue(PppContext *context, uint8_t c)
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b083      	sub	sp, #12
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	460b      	mov	r3, r1
 800b9dc:	70fb      	strb	r3, [r7, #3]
   //Enqueue the character
   context->txBuffer[context->txWriteIndex] = c;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800b9e4:	331c      	adds	r3, #28
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	78fa      	ldrb	r2, [r7, #3]
 800b9ee:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

   //Increment index and wrap around if necessary
   if(++context->txWriteIndex >= PPP_TX_BUFFER_SIZE)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800b9f8:	331c      	adds	r3, #28
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	1c5a      	adds	r2, r3, #1
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800ba04:	331c      	adds	r3, #28
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800ba0e:	331c      	adds	r3, #28
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba16:	d305      	bcc.n	800ba24 <pppHdlcDriverWriteTxQueue+0x52>
      context->txWriteIndex = 0;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800ba1e:	331c      	adds	r3, #28
 800ba20:	2200      	movs	r2, #0
 800ba22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba24:	b672      	cpsid	i

   //Enter critical section
   __disable_irq();
   //Update the length of the queue
   context->txBufferLen++;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800ba2c:	3318      	adds	r3, #24
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800ba38:	3318      	adds	r3, #24
 800ba3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ba3c:	b662      	cpsie	i
   //Exit critical section
   __enable_irq();
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <pppHdlcDriverReadRxQueue>:
 * @param[in] context Pointer to the PPP context
 * @return Character read from the queue
 **/

uint8_t pppHdlcDriverReadRxQueue(PppContext *context)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b085      	sub	sp, #20
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
   uint8_t c;

   //Read a single character
   c = context->rxBuffer[context->rxReadIndex];
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800ba58:	330c      	adds	r3, #12
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800ba64:	3304      	adds	r3, #4
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	73fb      	strb	r3, [r7, #15]

   //Increment index and wrap around if necessary
   if(++context->rxReadIndex >= PPP_RX_BUFFER_SIZE)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800ba70:	330c      	adds	r3, #12
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800ba7c:	330c      	adds	r3, #12
 800ba7e:	601a      	str	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800ba86:	330c      	adds	r3, #12
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba8e:	d305      	bcc.n	800ba9c <pppHdlcDriverReadRxQueue+0x52>
      context->rxReadIndex = 0;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800ba96:	330c      	adds	r3, #12
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba9c:	b672      	cpsid	i

   //Enter critical section
   __disable_irq();
   //Update the length of the queue
   context->rxBufferLen--;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800baa4:	3304      	adds	r3, #4
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	1e5a      	subs	r2, r3, #1
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bab0:	3304      	adds	r3, #4
 800bab2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800bab4:	b662      	cpsie	i
   //Exit critical section
   __enable_irq();

   //Return the character that has been read
   return c;
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <pppHdlcDriverReadTxQueue>:
 * @param[out] c Character read from the queue
 * @return TRUE if a context switch is required
 **/

bool_t pppHdlcDriverReadTxQueue(NetInterface *interface, int_t *c)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
   bool_t flag;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bad4:	60bb      	str	r3, [r7, #8]
   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 800bad6:	2300      	movs	r3, #0
 800bad8:	60fb      	str	r3, [r7, #12]

   //Any data pending in the TX queue?
   if(context->txBufferLen > 0)
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800bae0:	3318      	adds	r3, #24
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d03a      	beq.n	800bb5e <pppHdlcDriverReadTxQueue+0x9a>
   {
      //Read a single character
      *c = context->txBuffer[context->txReadIndex];
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	4413      	add	r3, r2
 800baf4:	f893 3776 	ldrb.w	r3, [r3, #1910]	; 0x776
 800baf8:	461a      	mov	r2, r3
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	601a      	str	r2, [r3, #0]

      //Increment index and wrap around if necessary
      if(++context->txReadIndex >= PPP_TX_BUFFER_SIZE)
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb1c:	d304      	bcc.n	800bb28 <pppHdlcDriverReadTxQueue+0x64>
         context->txReadIndex = 0;
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]

      //Update the length of the queue
      context->txBufferLen--;
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800bb2e:	3318      	adds	r3, #24
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	1e5a      	subs	r2, r3, #1
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800bb3a:	3318      	adds	r3, #24
 800bb3c:	601a      	str	r2, [r3, #0]

      //Check whether the TX is available for writing
      if(context->txBufferLen == (PPP_TX_BUFFER_SIZE - 3006))
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800bb44:	3318      	adds	r3, #24
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f240 4242 	movw	r2, #1090	; 0x442
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d10a      	bne.n	800bb66 <pppHdlcDriverReadTxQueue+0xa2>
      {
         flag = osSetEventFromIsr(&interface->nicTxEvent);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3370      	adds	r3, #112	; 0x70
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7f4 fddf 	bl	8000718 <osSetEventFromIsr>
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	e003      	b.n	800bb66 <pppHdlcDriverReadTxQueue+0xa2>
      }
   }
   else
   {
      //The TX queue is empty
      *c = EOF;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb64:	601a      	str	r2, [r3, #0]
   }

   //The return value tells whether a context switch is required
   return flag;
 800bb66:	68fb      	ldr	r3, [r7, #12]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <pppHdlcDriverWriteRxQueue>:
 * @param[in] c Character to be written
 * @return TRUE if a context switch is required
 **/

bool_t pppHdlcDriverWriteRxQueue(NetInterface *interface, uint8_t c)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	70fb      	strb	r3, [r7, #3]
   bool_t flag;
   PppContext *context;

   //Point to the PPP context
   context = interface->pppContext;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bb82:	60bb      	str	r3, [r7, #8]
   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 800bb84:	2300      	movs	r3, #0
 800bb86:	60fb      	str	r3, [r7, #12]

   //Make sure the RX queue is not full
   if(context->rxBufferLen < PPP_RX_BUFFER_SIZE)
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bb8e:	3304      	adds	r3, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb96:	d244      	bcs.n	800bc22 <pppHdlcDriverWriteRxQueue+0xb2>
   {
      //Enqueue the character
      context->rxBuffer[context->rxWriteIndex] = c;
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bb9e:	3308      	adds	r3, #8
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68ba      	ldr	r2, [r7, #8]
 800bba4:	4413      	add	r3, r2
 800bba6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800bbaa:	3304      	adds	r3, #4
 800bbac:	78fa      	ldrb	r2, [r7, #3]
 800bbae:	701a      	strb	r2, [r3, #0]

      //Increment index and wrap around if necessary
      if(++context->rxWriteIndex >= PPP_RX_BUFFER_SIZE)
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	1c5a      	adds	r2, r3, #1
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bbcc:	3308      	adds	r3, #8
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbd4:	d305      	bcc.n	800bbe2 <pppHdlcDriverWriteRxQueue+0x72>
         context->rxWriteIndex = 0;
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bbdc:	3308      	adds	r3, #8
 800bbde:	2200      	movs	r2, #0
 800bbe0:	601a      	str	r2, [r3, #0]

      //Update the length of the queue
      context->rxBufferLen++;
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bbe8:	3304      	adds	r3, #4
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	1c5a      	adds	r2, r3, #1
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	601a      	str	r2, [r3, #0]

      //0x7E flag found?
      if(c == PPP_FLAG_CHAR)
 800bbf8:	78fb      	ldrb	r3, [r7, #3]
 800bbfa:	2b7e      	cmp	r3, #126	; 0x7e
 800bbfc:	d111      	bne.n	800bc22 <pppHdlcDriverWriteRxQueue+0xb2>
      {
         //Increment frame counter
         context->rxFrameCount++;
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bc04:	3310      	adds	r3, #16
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	1c5a      	adds	r2, r3, #1
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	f503 535e 	add.w	r3, r3, #14208	; 0x3780
 800bc10:	3310      	adds	r3, #16
 800bc12:	601a      	str	r2, [r3, #0]

         //A complete HDLC frame has been received
         interface->nicEvent = TRUE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	675a      	str	r2, [r3, #116]	; 0x74
         //Notify the TCP/IP stack of the event
         flag = osSetEventFromIsr(&netEvent);
 800bc1a:	4804      	ldr	r0, [pc, #16]	; (800bc2c <pppHdlcDriverWriteRxQueue+0xbc>)
 800bc1c:	f7f4 fd7c 	bl	8000718 <osSetEventFromIsr>
 800bc20:	60f8      	str	r0, [r7, #12]
      }
   }

   //The return value tells whether a context switch is required
   return flag;
 800bc22:	68fb      	ldr	r3, [r7, #12]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	20001a90 	.word	0x20001a90

0800bc30 <pppSendConfigureAckNak>:
 * @return Error code
 **/

error_t pppSendConfigureAckNak(PppContext *context,
   const PppConfigurePacket *configureReqPacket, PppProtocol protocol, PppCode code)
{
 800bc30:	b590      	push	{r4, r7, lr}
 800bc32:	b08b      	sub	sp, #44	; 0x2c
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	460b      	mov	r3, r1
 800bc40:	80fb      	strh	r3, [r7, #6]
 800bc42:	4613      	mov	r3, r2
 800bc44:	717b      	strb	r3, [r7, #5]
   NetBuffer *buffer;
   PppConfigurePacket *configureAckNakPacket;
   PppOption *option;

   //Initialize status code
   error = NO_ERROR;
 800bc46:	2300      	movs	r3, #0
 800bc48:	83fb      	strh	r3, [r7, #30]
   //Retrieve the length of the Configure-Request packet
   length = ntohs(configureReqPacket->length);
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	885b      	ldrh	r3, [r3, #2]
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7f4 fca5 	bl	80005a0 <swapInt16>
 800bc56:	4603      	mov	r3, r0
 800bc58:	627b      	str	r3, [r7, #36]	; 0x24

   //Allocate a buffer memory to hold the Configure-Ack, Nak or Reject packet
   buffer = pppAllocBuffer(length, &offset);
 800bc5a:	f107 0310 	add.w	r3, r7, #16
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc62:	f7ff f829 	bl	800acb8 <pppAllocBuffer>
 800bc66:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <pppSendConfigureAckNak+0x42>
      return ERROR_OUT_OF_MEMORY;
 800bc6e:	2364      	movs	r3, #100	; 0x64
 800bc70:	e0a5      	b.n	800bdbe <pppSendConfigureAckNak+0x18e>

   //Point to the beginning of the packet
   configureAckNakPacket = netBufferAt(buffer, offset);
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	4619      	mov	r1, r3
 800bc76:	69b8      	ldr	r0, [r7, #24]
 800bc78:	f7f6 fb99 	bl	80023ae <netBufferAt>
 800bc7c:	6178      	str	r0, [r7, #20]

   //Format packet header
   configureAckNakPacket->code = code;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	797a      	ldrb	r2, [r7, #5]
 800bc82:	701a      	strb	r2, [r3, #0]
   configureAckNakPacket->identifier = configureReqPacket->identifier;
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	785a      	ldrb	r2, [r3, #1]
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	705a      	strb	r2, [r3, #1]
   configureAckNakPacket->length = sizeof(PppConfigurePacket);
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f042 0204 	orr.w	r2, r2, #4
 800bc94:	709a      	strb	r2, [r3, #2]
 800bc96:	2200      	movs	r2, #0
 800bc98:	70da      	strb	r2, [r3, #3]

   //Retrieve the length of the option list
   length -= sizeof(PppConfigurePacket);
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9c:	3b04      	subs	r3, #4
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
   //Point to the first option
   option = (PppOption *) configureReqPacket->options;
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	3304      	adds	r3, #4
 800bca4:	623b      	str	r3, [r7, #32]

   //Parse configuration options
   while(length > 0)
 800bca6:	e022      	b.n	800bcee <pppSendConfigureAckNak+0xbe>
   {
      //LCP protocol?
      if(protocol == PPP_PROTOCOL_LCP)
 800bca8:	88fb      	ldrh	r3, [r7, #6]
 800bcaa:	f24c 0221 	movw	r2, #49185	; 0xc021
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d106      	bne.n	800bcc0 <pppSendConfigureAckNak+0x90>
      {
         //Parse LCP option
         lcpParseOption(context, option, length, configureAckNakPacket);
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb6:	6a39      	ldr	r1, [r7, #32]
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f7fd ffb5 	bl	8009c28 <lcpParseOption>
 800bcbe:	e00a      	b.n	800bcd6 <pppSendConfigureAckNak+0xa6>
      }
#if (IPV4_SUPPORT == ENABLED)
      //IPCP protocol?
      else if(protocol == PPP_PROTOCOL_IPCP)
 800bcc0:	88fb      	ldrh	r3, [r7, #6]
 800bcc2:	f248 0221 	movw	r2, #32801	; 0x8021
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d105      	bne.n	800bcd6 <pppSendConfigureAckNak+0xa6>
      {
         //Parse IPCP option
         ipcpParseOption(context, option, length, configureAckNakPacket);
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcce:	6a39      	ldr	r1, [r7, #32]
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f7fc ff17 	bl	8008b04 <ipcpParseOption>
         ipv6cpParseOption(context, option, length, configureAckNakPacket);
      }
#endif

      //Remaining bytes to process
      length -= option->length;
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	785b      	ldrb	r3, [r3, #1]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcde:	1a9b      	subs	r3, r3, r2
 800bce0:	627b      	str	r3, [r7, #36]	; 0x24
      //Jump to the next option
      option = (PppOption *) ((uint8_t *) option + option->length);
 800bce2:	6a3b      	ldr	r3, [r7, #32]
 800bce4:	785b      	ldrb	r3, [r3, #1]
 800bce6:	461a      	mov	r2, r3
 800bce8:	6a3b      	ldr	r3, [r7, #32]
 800bcea:	4413      	add	r3, r2
 800bcec:	623b      	str	r3, [r7, #32]
   while(length > 0)
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1d9      	bne.n	800bca8 <pppSendConfigureAckNak+0x78>
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + configureAckNakPacket->length);
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	885b      	ldrh	r3, [r3, #2]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	4413      	add	r3, r2
 800bd00:	4619      	mov	r1, r3
 800bd02:	69b8      	ldr	r0, [r7, #24]
 800bd04:	f7f6 faad 	bl	8002262 <netBufferSetLength>
   //Convert length field to network byte order
   configureAckNakPacket->length = htons(configureAckNakPacket->length);
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	885b      	ldrh	r3, [r3, #2]
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7f4 fc46 	bl	80005a0 <swapInt16>
 800bd14:	4603      	mov	r3, r0
 800bd16:	461a      	mov	r2, r3
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	805a      	strh	r2, [r3, #2]

   //Debug message
   if(code == PPP_CODE_CONFIGURE_ACK)
 800bd1c:	797b      	ldrb	r3, [r7, #5]
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d113      	bne.n	800bd4a <pppSendConfigureAckNak+0x11a>
   {
      TRACE_INFO("Sending Configure-Ack packet (%" PRIuSIZE " bytes)...\r\n",
 800bd22:	f7f4 fc82 	bl	800062a <osSuspendAllTasks>
 800bd26:	4b28      	ldr	r3, [pc, #160]	; (800bdc8 <pppSendConfigureAckNak+0x198>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68dc      	ldr	r4, [r3, #12]
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	885b      	ldrh	r3, [r3, #2]
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7f4 fc34 	bl	80005a0 <swapInt16>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	4923      	ldr	r1, [pc, #140]	; (800bdcc <pppSendConfigureAckNak+0x19c>)
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f00c fa00 	bl	8018144 <fiprintf>
 800bd44:	f7f4 fc7c 	bl	8000640 <osResumeAllTasks>
 800bd48:	e02c      	b.n	800bda4 <pppSendConfigureAckNak+0x174>
         ntohs(configureAckNakPacket->length));
   }
   else if(code == PPP_CODE_CONFIGURE_NAK)
 800bd4a:	797b      	ldrb	r3, [r7, #5]
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d113      	bne.n	800bd78 <pppSendConfigureAckNak+0x148>
   {
      TRACE_INFO("Sending Configure-Nak packet (%" PRIuSIZE " bytes)...\r\n",
 800bd50:	f7f4 fc6b 	bl	800062a <osSuspendAllTasks>
 800bd54:	4b1c      	ldr	r3, [pc, #112]	; (800bdc8 <pppSendConfigureAckNak+0x198>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68dc      	ldr	r4, [r3, #12]
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	885b      	ldrh	r3, [r3, #2]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f4 fc1d 	bl	80005a0 <swapInt16>
 800bd66:	4603      	mov	r3, r0
 800bd68:	461a      	mov	r2, r3
 800bd6a:	4919      	ldr	r1, [pc, #100]	; (800bdd0 <pppSendConfigureAckNak+0x1a0>)
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f00c f9e9 	bl	8018144 <fiprintf>
 800bd72:	f7f4 fc65 	bl	8000640 <osResumeAllTasks>
 800bd76:	e015      	b.n	800bda4 <pppSendConfigureAckNak+0x174>
         ntohs(configureAckNakPacket->length));
   }
   else if(code == PPP_CODE_CONFIGURE_REJ)
 800bd78:	797b      	ldrb	r3, [r7, #5]
 800bd7a:	2b04      	cmp	r3, #4
 800bd7c:	d112      	bne.n	800bda4 <pppSendConfigureAckNak+0x174>
   {
      TRACE_INFO("Sending Configure-Reject packet (%" PRIuSIZE " bytes)...\r\n",
 800bd7e:	f7f4 fc54 	bl	800062a <osSuspendAllTasks>
 800bd82:	4b11      	ldr	r3, [pc, #68]	; (800bdc8 <pppSendConfigureAckNak+0x198>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68dc      	ldr	r4, [r3, #12]
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	885b      	ldrh	r3, [r3, #2]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7f4 fc06 	bl	80005a0 <swapInt16>
 800bd94:	4603      	mov	r3, r0
 800bd96:	461a      	mov	r2, r3
 800bd98:	490e      	ldr	r1, [pc, #56]	; (800bdd4 <pppSendConfigureAckNak+0x1a4>)
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f00c f9d2 	bl	8018144 <fiprintf>
 800bda0:	f7f4 fc4e 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) configureAckNakPacket,
      ntohs(configureAckNakPacket->length), protocol);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, protocol);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6998      	ldr	r0, [r3, #24]
 800bda8:	693a      	ldr	r2, [r7, #16]
 800bdaa:	88fb      	ldrh	r3, [r7, #6]
 800bdac:	69b9      	ldr	r1, [r7, #24]
 800bdae:	f7fe fe0d 	bl	800a9cc <pppSendFrame>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	83fb      	strh	r3, [r7, #30]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800bdb6:	69b8      	ldr	r0, [r7, #24]
 800bdb8:	f7f6 fa22 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 800bdbc:	8bfb      	ldrh	r3, [r7, #30]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	372c      	adds	r7, #44	; 0x2c
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd90      	pop	{r4, r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20000058 	.word	0x20000058
 800bdcc:	0801a2d8 	.word	0x0801a2d8
 800bdd0:	0801a308 	.word	0x0801a308
 800bdd4:	0801a338 	.word	0x0801a338

0800bdd8 <pppSendTerminateReq>:
 * @return Error code
 **/

error_t pppSendTerminateReq(PppContext *context,
   uint8_t identifier, PppProtocol protocol)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b088      	sub	sp, #32
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
 800bde4:	4613      	mov	r3, r2
 800bde6:	803b      	strh	r3, [r7, #0]
   size_t offset;
   NetBuffer *buffer;
   PppTerminatePacket *terminateReqPacket;

   //Length of the Terminate-Request packet
   length = sizeof(PppTerminatePacket);
 800bde8:	2304      	movs	r3, #4
 800bdea:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Terminate-Request packet
   buffer = pppAllocBuffer(length, &offset);
 800bdec:	f107 030c 	add.w	r3, r7, #12
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	69f8      	ldr	r0, [r7, #28]
 800bdf4:	f7fe ff60 	bl	800acb8 <pppAllocBuffer>
 800bdf8:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <pppSendTerminateReq+0x2c>
      return ERROR_OUT_OF_MEMORY;
 800be00:	2364      	movs	r3, #100	; 0x64
 800be02:	e02d      	b.n	800be60 <pppSendTerminateReq+0x88>

   //Point to the Terminate-Request packet
   terminateReqPacket = netBufferAt(buffer, offset);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	4619      	mov	r1, r3
 800be08:	69b8      	ldr	r0, [r7, #24]
 800be0a:	f7f6 fad0 	bl	80023ae <netBufferAt>
 800be0e:	6178      	str	r0, [r7, #20]

   //Format packet header
   terminateReqPacket->code = PPP_CODE_TERMINATE_REQ;
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	2205      	movs	r2, #5
 800be14:	701a      	strb	r2, [r3, #0]
   terminateReqPacket->identifier = identifier;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	78fa      	ldrb	r2, [r7, #3]
 800be1a:	705a      	strb	r2, [r3, #1]
   terminateReqPacket->length = htons(length);
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	b29b      	uxth	r3, r3
 800be20:	4618      	mov	r0, r3
 800be22:	f7f4 fbbd 	bl	80005a0 <swapInt16>
 800be26:	4603      	mov	r3, r0
 800be28:	461a      	mov	r2, r3
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending Terminate-Request packet (%" PRIuSIZE " bytes)...\r\n", length);
 800be2e:	f7f4 fbfc 	bl	800062a <osSuspendAllTasks>
 800be32:	4b0d      	ldr	r3, [pc, #52]	; (800be68 <pppSendTerminateReq+0x90>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	69fa      	ldr	r2, [r7, #28]
 800be3a:	490c      	ldr	r1, [pc, #48]	; (800be6c <pppSendTerminateReq+0x94>)
 800be3c:	4618      	mov	r0, r3
 800be3e:	f00c f981 	bl	8018144 <fiprintf>
 800be42:	f7f4 fbfd 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) terminateReqPacket, length, protocol);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, protocol);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6998      	ldr	r0, [r3, #24]
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	883b      	ldrh	r3, [r7, #0]
 800be4e:	69b9      	ldr	r1, [r7, #24]
 800be50:	f7fe fdbc 	bl	800a9cc <pppSendFrame>
 800be54:	4603      	mov	r3, r0
 800be56:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800be58:	69b8      	ldr	r0, [r7, #24]
 800be5a:	f7f6 f9d1 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 800be5e:	8a7b      	ldrh	r3, [r7, #18]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3720      	adds	r7, #32
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20000058 	.word	0x20000058
 800be6c:	0801a368 	.word	0x0801a368

0800be70 <pppSendTerminateAck>:
 * @return Error code
 **/

error_t pppSendTerminateAck(PppContext *context,
   uint8_t identifier, PppProtocol protocol)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b088      	sub	sp, #32
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
 800be7c:	4613      	mov	r3, r2
 800be7e:	803b      	strh	r3, [r7, #0]
   size_t offset;
   NetBuffer *buffer;
   PppTerminatePacket *terminateAckPacket;

   //Length of the Terminate-Ack packet
   length = sizeof(PppTerminatePacket);
 800be80:	2304      	movs	r3, #4
 800be82:	61fb      	str	r3, [r7, #28]

   //Allocate a buffer memory to hold the Terminate-Ack packet
   buffer = pppAllocBuffer(length, &offset);
 800be84:	f107 030c 	add.w	r3, r7, #12
 800be88:	4619      	mov	r1, r3
 800be8a:	69f8      	ldr	r0, [r7, #28]
 800be8c:	f7fe ff14 	bl	800acb8 <pppAllocBuffer>
 800be90:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <pppSendTerminateAck+0x2c>
      return ERROR_OUT_OF_MEMORY;
 800be98:	2364      	movs	r3, #100	; 0x64
 800be9a:	e02d      	b.n	800bef8 <pppSendTerminateAck+0x88>

   //Point to the Terminate-Ack packet
   terminateAckPacket = netBufferAt(buffer, offset);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4619      	mov	r1, r3
 800bea0:	69b8      	ldr	r0, [r7, #24]
 800bea2:	f7f6 fa84 	bl	80023ae <netBufferAt>
 800bea6:	6178      	str	r0, [r7, #20]

   //Format packet header
   terminateAckPacket->code = PPP_CODE_TERMINATE_ACK;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	2206      	movs	r2, #6
 800beac:	701a      	strb	r2, [r3, #0]
   terminateAckPacket->identifier = identifier;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	78fa      	ldrb	r2, [r7, #3]
 800beb2:	705a      	strb	r2, [r3, #1]
   terminateAckPacket->length = htons(length);
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	4618      	mov	r0, r3
 800beba:	f7f4 fb71 	bl	80005a0 <swapInt16>
 800bebe:	4603      	mov	r3, r0
 800bec0:	461a      	mov	r2, r3
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	805a      	strh	r2, [r3, #2]

   //Debug message
   TRACE_INFO("Sending Terminate-Ack packet (%" PRIuSIZE " bytes)...\r\n", length);
 800bec6:	f7f4 fbb0 	bl	800062a <osSuspendAllTasks>
 800beca:	4b0d      	ldr	r3, [pc, #52]	; (800bf00 <pppSendTerminateAck+0x90>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	69fa      	ldr	r2, [r7, #28]
 800bed2:	490c      	ldr	r1, [pc, #48]	; (800bf04 <pppSendTerminateAck+0x94>)
 800bed4:	4618      	mov	r0, r3
 800bed6:	f00c f935 	bl	8018144 <fiprintf>
 800beda:	f7f4 fbb1 	bl	8000640 <osResumeAllTasks>
   //Dump packet contents for debugging purpose
   pppDumpPacket((PppPacket *) terminateAckPacket, length, protocol);

   //Send PPP frame
   error = pppSendFrame(context->interface, buffer, offset, protocol);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6998      	ldr	r0, [r3, #24]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	883b      	ldrh	r3, [r7, #0]
 800bee6:	69b9      	ldr	r1, [r7, #24]
 800bee8:	f7fe fd70 	bl	800a9cc <pppSendFrame>
 800beec:	4603      	mov	r3, r0
 800beee:	827b      	strh	r3, [r7, #18]

   //Free previously allocated memory block
   netBufferFree(buffer);
 800bef0:	69b8      	ldr	r0, [r7, #24]
 800bef2:	f7f6 f985 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 800bef6:	8a7b      	ldrh	r3, [r7, #18]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3720      	adds	r7, #32
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	20000058 	.word	0x20000058
 800bf04:	0801a39c 	.word	0x0801a39c

0800bf08 <pppSendCodeRej>:
 * @return Error code
 **/

error_t pppSendCodeRej(PppContext *context, const PppPacket *packet,
   uint8_t identifier, PppProtocol protocol)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08a      	sub	sp, #40	; 0x28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4611      	mov	r1, r2
 800bf14:	461a      	mov	r2, r3
 800bf16:	460b      	mov	r3, r1
 800bf18:	71fb      	strb	r3, [r7, #7]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	80bb      	strh	r3, [r7, #4]
   size_t offset;
   NetBuffer *buffer;
   PppCodeRejPacket *codeRejPacket;

   //Calculate the length of the Code-Reject packet
   length = ntohs(packet->length) + sizeof(PppCodeRejPacket);
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	885b      	ldrh	r3, [r3, #2]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7f4 fb3b 	bl	80005a0 <swapInt16>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	623b      	str	r3, [r7, #32]

   //The rejected packet must be truncated to comply with
   //the peer's established MRU
   length = MIN(length, context->peerConfig.mru);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bf36:	461a      	mov	r2, r3
 800bf38:	6a3b      	ldr	r3, [r7, #32]
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	bf28      	it	cs
 800bf3e:	4613      	movcs	r3, r2
 800bf40:	623b      	str	r3, [r7, #32]

   //Allocate a buffer memory to hold the Code-Reject packet
   buffer = pppAllocBuffer(sizeof(PppCodeRejPacket), &offset);
 800bf42:	f107 0314 	add.w	r3, r7, #20
 800bf46:	4619      	mov	r1, r3
 800bf48:	2004      	movs	r0, #4
 800bf4a:	f7fe feb5 	bl	800acb8 <pppAllocBuffer>
 800bf4e:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(buffer == NULL)
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d101      	bne.n	800bf5a <pppSendCodeRej+0x52>
      return ERROR_OUT_OF_MEMORY;
 800bf56:	2364      	movs	r3, #100	; 0x64
 800bf58:	e039      	b.n	800bfce <pppSendCodeRej+0xc6>

   //Point to the Code-Reject packet
   codeRejPacket = netBufferAt(buffer, offset);
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	69f8      	ldr	r0, [r7, #28]
 800bf60:	f7f6 fa25 	bl	80023ae <netBufferAt>
 800bf64:	61b8      	str	r0, [r7, #24]

   //Format packet header
   codeRejPacket->code = PPP_CODE_CODE_REJ;
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	2207      	movs	r2, #7
 800bf6a:	701a      	strb	r2, [r3, #0]
   codeRejPacket->identifier = identifier;
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	79fa      	ldrb	r2, [r7, #7]
 800bf70:	705a      	strb	r2, [r3, #1]
   codeRejPacket->length = htons(length);
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7f4 fb12 	bl	80005a0 <swapInt16>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	805a      	strh	r2, [r3, #2]

   //The Rejected-Packet field contains a copy of the packet which is being rejected
   error = netBufferAppend(buffer, packet, length - sizeof(PppCodeRejPacket));
 800bf84:	6a3b      	ldr	r3, [r7, #32]
 800bf86:	3b04      	subs	r3, #4
 800bf88:	461a      	mov	r2, r3
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	69f8      	ldr	r0, [r7, #28]
 800bf8e:	f7f6 fba6 	bl	80026de <netBufferAppend>
 800bf92:	4603      	mov	r3, r0
 800bf94:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 800bf96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d114      	bne.n	800bfc6 <pppSendCodeRej+0xbe>
   {
      //Debug message
      TRACE_INFO("Sending Code-Reject packet (%" PRIuSIZE " bytes)...\r\n", length);
 800bf9c:	f7f4 fb45 	bl	800062a <osSuspendAllTasks>
 800bfa0:	4b0d      	ldr	r3, [pc, #52]	; (800bfd8 <pppSendCodeRej+0xd0>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	6a3a      	ldr	r2, [r7, #32]
 800bfa8:	490c      	ldr	r1, [pc, #48]	; (800bfdc <pppSendCodeRej+0xd4>)
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f00c f8ca 	bl	8018144 <fiprintf>
 800bfb0:	f7f4 fb46 	bl	8000640 <osResumeAllTasks>

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, protocol);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6998      	ldr	r0, [r3, #24]
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	88bb      	ldrh	r3, [r7, #4]
 800bfbc:	69f9      	ldr	r1, [r7, #28]
 800bfbe:	f7fe fd05 	bl	800a9cc <pppSendFrame>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	84fb      	strh	r3, [r7, #38]	; 0x26
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800bfc6:	69f8      	ldr	r0, [r7, #28]
 800bfc8:	f7f6 f91a 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 800bfcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3728      	adds	r7, #40	; 0x28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20000058 	.word	0x20000058
 800bfdc:	0801a3cc 	.word	0x0801a3cc

0800bfe0 <pppSendProtocolRej>:
 * @return Error code
 **/

error_t pppSendProtocolRej(PppContext *context, uint8_t identifier,
   uint16_t protocol, const uint8_t *information, size_t length)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	607b      	str	r3, [r7, #4]
 800bfea:	460b      	mov	r3, r1
 800bfec:	72fb      	strb	r3, [r7, #11]
 800bfee:	4613      	mov	r3, r2
 800bff0:	813b      	strh	r3, [r7, #8]
   size_t offset;
   NetBuffer *buffer;
   PppProtocolRejPacket *protocolRejPacket;

   //Calculate the length of the Protocol-Reject packet
   length += sizeof(PppProtocolRejPacket);
 800bff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff4:	3306      	adds	r3, #6
 800bff6:	62bb      	str	r3, [r7, #40]	; 0x28

   //The Rejected-Information must be truncated to comply with
   //the peer's established MRU
   length = MIN(length, context->peerConfig.mru);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bffe:	461a      	mov	r2, r3
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	4293      	cmp	r3, r2
 800c004:	bf28      	it	cs
 800c006:	4613      	movcs	r3, r2
 800c008:	62bb      	str	r3, [r7, #40]	; 0x28

   //Allocate a buffer memory to hold the Protocol-Reject packet
   buffer = pppAllocBuffer(sizeof(PppProtocolRejPacket), &offset);
 800c00a:	f107 0310 	add.w	r3, r7, #16
 800c00e:	4619      	mov	r1, r3
 800c010:	2006      	movs	r0, #6
 800c012:	f7fe fe51 	bl	800acb8 <pppAllocBuffer>
 800c016:	61b8      	str	r0, [r7, #24]
   //Failed to allocate memory?
   if(buffer == NULL)
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <pppSendProtocolRej+0x42>
      return ERROR_OUT_OF_MEMORY;
 800c01e:	2364      	movs	r3, #100	; 0x64
 800c020:	e042      	b.n	800c0a8 <pppSendProtocolRej+0xc8>

   //Point to the Protocol-Reject packet
   protocolRejPacket = netBufferAt(buffer, offset);
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	4619      	mov	r1, r3
 800c026:	69b8      	ldr	r0, [r7, #24]
 800c028:	f7f6 f9c1 	bl	80023ae <netBufferAt>
 800c02c:	6178      	str	r0, [r7, #20]

   //Format packet header
   protocolRejPacket->code = PPP_CODE_PROTOCOL_REJ;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2208      	movs	r2, #8
 800c032:	701a      	strb	r2, [r3, #0]
   protocolRejPacket->identifier = identifier;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	7afa      	ldrb	r2, [r7, #11]
 800c038:	705a      	strb	r2, [r3, #1]
   protocolRejPacket->length = htons(length);
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	4618      	mov	r0, r3
 800c040:	f7f4 faae 	bl	80005a0 <swapInt16>
 800c044:	4603      	mov	r3, r0
 800c046:	461a      	mov	r2, r3
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	805a      	strh	r2, [r3, #2]
   protocolRejPacket->rejectedProtocol = htons(protocol);
 800c04c:	893b      	ldrh	r3, [r7, #8]
 800c04e:	4618      	mov	r0, r3
 800c050:	f7f4 faa6 	bl	80005a0 <swapInt16>
 800c054:	4603      	mov	r3, r0
 800c056:	461a      	mov	r2, r3
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	809a      	strh	r2, [r3, #4]

   //The Rejected-Information field contains a copy of the
   //packet which is being rejected
   error = netBufferAppend(buffer, information,
 800c05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05e:	3b06      	subs	r3, #6
 800c060:	461a      	mov	r2, r3
 800c062:	6879      	ldr	r1, [r7, #4]
 800c064:	69b8      	ldr	r0, [r7, #24]
 800c066:	f7f6 fb3a 	bl	80026de <netBufferAppend>
 800c06a:	4603      	mov	r3, r0
 800c06c:	83fb      	strh	r3, [r7, #30]
      length - sizeof(PppProtocolRejPacket));

   //Check status code
   if(!error)
 800c06e:	8bfb      	ldrh	r3, [r7, #30]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d115      	bne.n	800c0a0 <pppSendProtocolRej+0xc0>
   {
      //Debug message
      TRACE_INFO("Sending Protocol-Reject packet (%" PRIuSIZE " bytes)...\r\n", length);
 800c074:	f7f4 fad9 	bl	800062a <osSuspendAllTasks>
 800c078:	4b0d      	ldr	r3, [pc, #52]	; (800c0b0 <pppSendProtocolRej+0xd0>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c080:	490c      	ldr	r1, [pc, #48]	; (800c0b4 <pppSendProtocolRej+0xd4>)
 800c082:	4618      	mov	r0, r3
 800c084:	f00c f85e 	bl	8018144 <fiprintf>
 800c088:	f7f4 fada 	bl	8000640 <osResumeAllTasks>

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, PPP_PROTOCOL_LCP);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6998      	ldr	r0, [r3, #24]
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	f24c 0321 	movw	r3, #49185	; 0xc021
 800c096:	69b9      	ldr	r1, [r7, #24]
 800c098:	f7fe fc98 	bl	800a9cc <pppSendFrame>
 800c09c:	4603      	mov	r3, r0
 800c09e:	83fb      	strh	r3, [r7, #30]
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800c0a0:	69b8      	ldr	r0, [r7, #24]
 800c0a2:	f7f6 f8ad 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 800c0a6:	8bfb      	ldrh	r3, [r7, #30]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3720      	adds	r7, #32
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	20000058 	.word	0x20000058
 800c0b4:	0801a3f8 	.word	0x0801a3f8

0800c0b8 <pppSendEchoRep>:
 * @return Error code
 **/

error_t pppSendEchoRep(PppContext *context,
   const PppEchoPacket *echoReqPacket, PppProtocol protocol)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b08a      	sub	sp, #40	; 0x28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	80fb      	strh	r3, [r7, #6]
   size_t offset;
   NetBuffer *buffer;
   PppEchoPacket *echoRepPacket;

   //Retrieve the length of the Echo-Request packet
   length = ntohs(echoReqPacket->length);
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	885b      	ldrh	r3, [r3, #2]
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f4 fa67 	bl	80005a0 <swapInt16>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	623b      	str	r3, [r7, #32]

   //Make sure the length is valid
   if(length < sizeof(PppEchoPacket))
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	2b07      	cmp	r3, #7
 800c0da:	d801      	bhi.n	800c0e0 <pppSendEchoRep+0x28>
      return ERROR_INVALID_LENGTH;
 800c0dc:	23eb      	movs	r3, #235	; 0xeb
 800c0de:	e056      	b.n	800c18e <pppSendEchoRep+0xd6>
   if(length > context->peerConfig.mru)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d901      	bls.n	800c0f2 <pppSendEchoRep+0x3a>
      return ERROR_INVALID_LENGTH;
 800c0ee:	23eb      	movs	r3, #235	; 0xeb
 800c0f0:	e04d      	b.n	800c18e <pppSendEchoRep+0xd6>

   //Allocate a buffer memory to hold the Echo-Reply packet
   buffer = pppAllocBuffer(sizeof(PppEchoPacket), &offset);
 800c0f2:	f107 0314 	add.w	r3, r7, #20
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	2008      	movs	r0, #8
 800c0fa:	f7fe fddd 	bl	800acb8 <pppAllocBuffer>
 800c0fe:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(buffer == NULL)
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <pppSendEchoRep+0x52>
      return ERROR_OUT_OF_MEMORY;
 800c106:	2364      	movs	r3, #100	; 0x64
 800c108:	e041      	b.n	800c18e <pppSendEchoRep+0xd6>

   //Point to the Echo-Reply packet
   echoRepPacket = netBufferAt(buffer, offset);
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	4619      	mov	r1, r3
 800c10e:	69f8      	ldr	r0, [r7, #28]
 800c110:	f7f6 f94d 	bl	80023ae <netBufferAt>
 800c114:	61b8      	str	r0, [r7, #24]

   //Format packet header
   echoRepPacket->code = PPP_CODE_ECHO_REP;
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	220a      	movs	r2, #10
 800c11a:	701a      	strb	r2, [r3, #0]
   echoRepPacket->identifier = echoReqPacket->identifier;
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	785a      	ldrb	r2, [r3, #1]
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	705a      	strb	r2, [r3, #1]
   echoRepPacket->length = htons(length);
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	b29b      	uxth	r3, r3
 800c128:	4618      	mov	r0, r3
 800c12a:	f7f4 fa39 	bl	80005a0 <swapInt16>
 800c12e:	4603      	mov	r3, r0
 800c130:	461a      	mov	r2, r3
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	805a      	strh	r2, [r3, #2]
   echoRepPacket->magicNumber = context->localConfig.magicNumber;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	605a      	str	r2, [r3, #4]

   //The data field of the Echo-Request packet is copied into the data
   //field of the Echo-Reply packet
   error = netBufferAppend(buffer, echoReqPacket->data, length - sizeof(PppEchoPacket));
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f103 0108 	add.w	r1, r3, #8
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	3b08      	subs	r3, #8
 800c14a:	461a      	mov	r2, r3
 800c14c:	69f8      	ldr	r0, [r7, #28]
 800c14e:	f7f6 fac6 	bl	80026de <netBufferAppend>
 800c152:	4603      	mov	r3, r0
 800c154:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 800c156:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d114      	bne.n	800c186 <pppSendEchoRep+0xce>
   {
      //Debug message
      TRACE_INFO("Sending Echo-Reply packet (%" PRIuSIZE " bytes)...\r\n", length);
 800c15c:	f7f4 fa65 	bl	800062a <osSuspendAllTasks>
 800c160:	4b0d      	ldr	r3, [pc, #52]	; (800c198 <pppSendEchoRep+0xe0>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	6a3a      	ldr	r2, [r7, #32]
 800c168:	490c      	ldr	r1, [pc, #48]	; (800c19c <pppSendEchoRep+0xe4>)
 800c16a:	4618      	mov	r0, r3
 800c16c:	f00b ffea 	bl	8018144 <fiprintf>
 800c170:	f7f4 fa66 	bl	8000640 <osResumeAllTasks>

      //Send PPP frame
      error = pppSendFrame(context->interface, buffer, offset, protocol);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6998      	ldr	r0, [r3, #24]
 800c178:	697a      	ldr	r2, [r7, #20]
 800c17a:	88fb      	ldrh	r3, [r7, #6]
 800c17c:	69f9      	ldr	r1, [r7, #28]
 800c17e:	f7fe fc25 	bl	800a9cc <pppSendFrame>
 800c182:	4603      	mov	r3, r0
 800c184:	84fb      	strh	r3, [r7, #38]	; 0x26
   }

   //Free previously allocated memory block
   netBufferFree(buffer);
 800c186:	69f8      	ldr	r0, [r7, #28]
 800c188:	f7f6 f83a 	bl	8002200 <netBufferFree>
   //Return status code
   return error;
 800c18c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3728      	adds	r7, #40	; 0x28
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20000058 	.word	0x20000058
 800c19c:	0801a428 	.word	0x0801a428

0800c1a0 <pppAddOption>:
 * @return Error code
 **/

error_t pppAddOption(PppConfigurePacket *packet, uint8_t optionType,
   const void *optionValue, uint8_t optionLen)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	607a      	str	r2, [r7, #4]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	72fb      	strb	r3, [r7, #11]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	72bb      	strb	r3, [r7, #10]
   PppOption *option;

   //Make sure the length is valid
   if(optionLen > (UINT8_MAX - sizeof(PppOption)))
 800c1b4:	7abb      	ldrb	r3, [r7, #10]
 800c1b6:	2bfd      	cmp	r3, #253	; 0xfd
 800c1b8:	d901      	bls.n	800c1be <pppAddOption+0x1e>
      return ERROR_INVALID_LENGTH;
 800c1ba:	23eb      	movs	r3, #235	; 0xeb
 800c1bc:	e021      	b.n	800c202 <pppAddOption+0x62>

   //Point to the end of the Configure packet
   option = (PppOption *) ((uint8_t *) packet + packet->length);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	885b      	ldrh	r3, [r3, #2]
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	617b      	str	r3, [r7, #20]

   //Write specified option at current location
   option->type = optionType;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	7afa      	ldrb	r2, [r7, #11]
 800c1d0:	701a      	strb	r2, [r3, #0]
   option->length = optionLen + sizeof(PppOption);
 800c1d2:	7abb      	ldrb	r3, [r7, #10]
 800c1d4:	3302      	adds	r3, #2
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	705a      	strb	r2, [r3, #1]
   //Copy option data
   memcpy(option->data, optionValue, optionLen);
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	3302      	adds	r3, #2
 800c1e0:	7aba      	ldrb	r2, [r7, #10]
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f00c f84f 	bl	8018288 <memcpy>

   //Update the length of the Configure packet
   packet->length += optionLen + sizeof(PppOption);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	885b      	ldrh	r3, [r3, #2]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	7abb      	ldrb	r3, [r7, #10]
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	4413      	add	r3, r2
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	3302      	adds	r3, #2
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	805a      	strh	r2, [r3, #2]

   //Successful processing
   return NO_ERROR;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b082      	sub	sp, #8
 800c20e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c214:	2003      	movs	r0, #3
 800c216:	f000 f95b 	bl	800c4d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c21a:	200f      	movs	r0, #15
 800c21c:	f000 f80e 	bl	800c23c <HAL_InitTick>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	71fb      	strb	r3, [r7, #7]
 800c22a:	e001      	b.n	800c230 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800c22c:	f00b f92a 	bl	8017484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c230:	79fb      	ldrb	r3, [r7, #7]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
	...

0800c23c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800c248:	4b16      	ldr	r3, [pc, #88]	; (800c2a4 <HAL_InitTick+0x68>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d022      	beq.n	800c296 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800c250:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <HAL_InitTick+0x6c>)
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	4b13      	ldr	r3, [pc, #76]	; (800c2a4 <HAL_InitTick+0x68>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c25c:	fbb1 f3f3 	udiv	r3, r1, r3
 800c260:	fbb2 f3f3 	udiv	r3, r2, r3
 800c264:	4618      	mov	r0, r3
 800c266:	f000 f968 	bl	800c53a <HAL_SYSTICK_Config>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10f      	bne.n	800c290 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b0f      	cmp	r3, #15
 800c274:	d809      	bhi.n	800c28a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c276:	2200      	movs	r2, #0
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c27e:	f000 f932 	bl	800c4e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c282:	4a0a      	ldr	r2, [pc, #40]	; (800c2ac <HAL_InitTick+0x70>)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	e007      	b.n	800c29a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	73fb      	strb	r3, [r7, #15]
 800c28e:	e004      	b.n	800c29a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	73fb      	strb	r3, [r7, #15]
 800c294:	e001      	b.n	800c29a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	2000002c 	.word	0x2000002c
 800c2a8:	20000054 	.word	0x20000054
 800c2ac:	20000028 	.word	0x20000028

0800c2b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c2b4:	4b05      	ldr	r3, [pc, #20]	; (800c2cc <HAL_IncTick+0x1c>)
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <HAL_IncTick+0x20>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4413      	add	r3, r2
 800c2be:	4a03      	ldr	r2, [pc, #12]	; (800c2cc <HAL_IncTick+0x1c>)
 800c2c0:	6013      	str	r3, [r2, #0]
}
 800c2c2:	bf00      	nop
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	20003868 	.word	0x20003868
 800c2d0:	2000002c 	.word	0x2000002c

0800c2d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	af00      	add	r7, sp, #0
  return uwTick;
 800c2d8:	4b03      	ldr	r3, [pc, #12]	; (800c2e8 <HAL_GetTick+0x14>)
 800c2da:	681b      	ldr	r3, [r3, #0]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	20003868 	.word	0x20003868

0800c2ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c2f4:	f7ff ffee 	bl	800c2d4 <HAL_GetTick>
 800c2f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c304:	d004      	beq.n	800c310 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800c306:	4b09      	ldr	r3, [pc, #36]	; (800c32c <HAL_Delay+0x40>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	4413      	add	r3, r2
 800c30e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c310:	bf00      	nop
 800c312:	f7ff ffdf 	bl	800c2d4 <HAL_GetTick>
 800c316:	4602      	mov	r2, r0
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d8f7      	bhi.n	800c312 <HAL_Delay+0x26>
  {
  }
}
 800c322:	bf00      	nop
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	2000002c 	.word	0x2000002c

0800c330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f003 0307 	and.w	r3, r3, #7
 800c33e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c340:	4b0c      	ldr	r3, [pc, #48]	; (800c374 <__NVIC_SetPriorityGrouping+0x44>)
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c34c:	4013      	ands	r3, r2
 800c34e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c35c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c362:	4a04      	ldr	r2, [pc, #16]	; (800c374 <__NVIC_SetPriorityGrouping+0x44>)
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	60d3      	str	r3, [r2, #12]
}
 800c368:	bf00      	nop
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	e000ed00 	.word	0xe000ed00

0800c378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c378:	b480      	push	{r7}
 800c37a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c37c:	4b04      	ldr	r3, [pc, #16]	; (800c390 <__NVIC_GetPriorityGrouping+0x18>)
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	0a1b      	lsrs	r3, r3, #8
 800c382:	f003 0307 	and.w	r3, r3, #7
}
 800c386:	4618      	mov	r0, r3
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	e000ed00 	.word	0xe000ed00

0800c394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	4603      	mov	r3, r0
 800c39c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c39e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	db0b      	blt.n	800c3be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3a6:	79fb      	ldrb	r3, [r7, #7]
 800c3a8:	f003 021f 	and.w	r2, r3, #31
 800c3ac:	4907      	ldr	r1, [pc, #28]	; (800c3cc <__NVIC_EnableIRQ+0x38>)
 800c3ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3b2:	095b      	lsrs	r3, r3, #5
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	fa00 f202 	lsl.w	r2, r0, r2
 800c3ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c3be:	bf00      	nop
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	e000e100 	.word	0xe000e100

0800c3d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	6039      	str	r1, [r7, #0]
 800c3da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	db0a      	blt.n	800c3fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	490c      	ldr	r1, [pc, #48]	; (800c41c <__NVIC_SetPriority+0x4c>)
 800c3ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ee:	0112      	lsls	r2, r2, #4
 800c3f0:	b2d2      	uxtb	r2, r2
 800c3f2:	440b      	add	r3, r1
 800c3f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c3f8:	e00a      	b.n	800c410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	4908      	ldr	r1, [pc, #32]	; (800c420 <__NVIC_SetPriority+0x50>)
 800c400:	79fb      	ldrb	r3, [r7, #7]
 800c402:	f003 030f 	and.w	r3, r3, #15
 800c406:	3b04      	subs	r3, #4
 800c408:	0112      	lsls	r2, r2, #4
 800c40a:	b2d2      	uxtb	r2, r2
 800c40c:	440b      	add	r3, r1
 800c40e:	761a      	strb	r2, [r3, #24]
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	e000e100 	.word	0xe000e100
 800c420:	e000ed00 	.word	0xe000ed00

0800c424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c424:	b480      	push	{r7}
 800c426:	b089      	sub	sp, #36	; 0x24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f003 0307 	and.w	r3, r3, #7
 800c436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	f1c3 0307 	rsb	r3, r3, #7
 800c43e:	2b04      	cmp	r3, #4
 800c440:	bf28      	it	cs
 800c442:	2304      	movcs	r3, #4
 800c444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	3304      	adds	r3, #4
 800c44a:	2b06      	cmp	r3, #6
 800c44c:	d902      	bls.n	800c454 <NVIC_EncodePriority+0x30>
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	3b03      	subs	r3, #3
 800c452:	e000      	b.n	800c456 <NVIC_EncodePriority+0x32>
 800c454:	2300      	movs	r3, #0
 800c456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	fa02 f303 	lsl.w	r3, r2, r3
 800c462:	43da      	mvns	r2, r3
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	401a      	ands	r2, r3
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c46c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	fa01 f303 	lsl.w	r3, r1, r3
 800c476:	43d9      	mvns	r1, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c47c:	4313      	orrs	r3, r2
         );
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3724      	adds	r7, #36	; 0x24
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
	...

0800c48c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	3b01      	subs	r3, #1
 800c498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c49c:	d301      	bcc.n	800c4a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e00f      	b.n	800c4c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c4a2:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <SysTick_Config+0x40>)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c4aa:	210f      	movs	r1, #15
 800c4ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4b0:	f7ff ff8e 	bl	800c3d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c4b4:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <SysTick_Config+0x40>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c4ba:	4b04      	ldr	r3, [pc, #16]	; (800c4cc <SysTick_Config+0x40>)
 800c4bc:	2207      	movs	r2, #7
 800c4be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	e000e010 	.word	0xe000e010

0800c4d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7ff ff29 	bl	800c330 <__NVIC_SetPriorityGrouping>
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b086      	sub	sp, #24
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	60b9      	str	r1, [r7, #8]
 800c4f0:	607a      	str	r2, [r7, #4]
 800c4f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c4f8:	f7ff ff3e 	bl	800c378 <__NVIC_GetPriorityGrouping>
 800c4fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	68b9      	ldr	r1, [r7, #8]
 800c502:	6978      	ldr	r0, [r7, #20]
 800c504:	f7ff ff8e 	bl	800c424 <NVIC_EncodePriority>
 800c508:	4602      	mov	r2, r0
 800c50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c50e:	4611      	mov	r1, r2
 800c510:	4618      	mov	r0, r3
 800c512:	f7ff ff5d 	bl	800c3d0 <__NVIC_SetPriority>
}
 800c516:	bf00      	nop
 800c518:	3718      	adds	r7, #24
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b082      	sub	sp, #8
 800c522:	af00      	add	r7, sp, #0
 800c524:	4603      	mov	r3, r0
 800c526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7ff ff31 	bl	800c394 <__NVIC_EnableIRQ>
}
 800c532:	bf00      	nop
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b082      	sub	sp, #8
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff ffa2 	bl	800c48c <SysTick_Config>
 800c548:	4603      	mov	r3, r0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
	...

0800c554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c554:	b480      	push	{r7}
 800c556:	b087      	sub	sp, #28
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c55e:	2300      	movs	r3, #0
 800c560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c562:	e166      	b.n	800c832 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	2101      	movs	r1, #1
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	fa01 f303 	lsl.w	r3, r1, r3
 800c570:	4013      	ands	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	f000 8158 	beq.w	800c82c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d003      	beq.n	800c58c <HAL_GPIO_Init+0x38>
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	2b12      	cmp	r3, #18
 800c58a:	d123      	bne.n	800c5d4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	08da      	lsrs	r2, r3, #3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3208      	adds	r2, #8
 800c594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c598:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f003 0307 	and.w	r3, r3, #7
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	220f      	movs	r2, #15
 800c5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5a8:	43db      	mvns	r3, r3
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	691a      	ldr	r2, [r3, #16]
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	08da      	lsrs	r2, r3, #3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3208      	adds	r2, #8
 800c5ce:	6939      	ldr	r1, [r7, #16]
 800c5d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	005b      	lsls	r3, r3, #1
 800c5de:	2203      	movs	r2, #3
 800c5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5e4:	43db      	mvns	r3, r3
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	f003 0203 	and.w	r2, r3, #3
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d00b      	beq.n	800c628 <HAL_GPIO_Init+0xd4>
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	2b02      	cmp	r3, #2
 800c616:	d007      	beq.n	800c628 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c61c:	2b11      	cmp	r3, #17
 800c61e:	d003      	beq.n	800c628 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	2b12      	cmp	r3, #18
 800c626:	d130      	bne.n	800c68a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	2203      	movs	r2, #3
 800c634:	fa02 f303 	lsl.w	r3, r2, r3
 800c638:	43db      	mvns	r3, r3
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	4013      	ands	r3, r2
 800c63e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	68da      	ldr	r2, [r3, #12]
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	005b      	lsls	r3, r3, #1
 800c648:	fa02 f303 	lsl.w	r3, r2, r3
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	4313      	orrs	r3, r2
 800c650:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	693a      	ldr	r2, [r7, #16]
 800c656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c65e:	2201      	movs	r2, #1
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	fa02 f303 	lsl.w	r3, r2, r3
 800c666:	43db      	mvns	r3, r3
 800c668:	693a      	ldr	r2, [r7, #16]
 800c66a:	4013      	ands	r3, r2
 800c66c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	091b      	lsrs	r3, r3, #4
 800c674:	f003 0201 	and.w	r2, r3, #1
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	fa02 f303 	lsl.w	r3, r2, r3
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	4313      	orrs	r3, r2
 800c682:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	005b      	lsls	r3, r3, #1
 800c694:	2203      	movs	r2, #3
 800c696:	fa02 f303 	lsl.w	r3, r2, r3
 800c69a:	43db      	mvns	r3, r3
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	4013      	ands	r3, r2
 800c6a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	689a      	ldr	r2, [r3, #8]
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	005b      	lsls	r3, r3, #1
 800c6aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ae:	693a      	ldr	r2, [r7, #16]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 80b2 	beq.w	800c82c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6c8:	4b61      	ldr	r3, [pc, #388]	; (800c850 <HAL_GPIO_Init+0x2fc>)
 800c6ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6cc:	4a60      	ldr	r2, [pc, #384]	; (800c850 <HAL_GPIO_Init+0x2fc>)
 800c6ce:	f043 0301 	orr.w	r3, r3, #1
 800c6d2:	6613      	str	r3, [r2, #96]	; 0x60
 800c6d4:	4b5e      	ldr	r3, [pc, #376]	; (800c850 <HAL_GPIO_Init+0x2fc>)
 800c6d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	60bb      	str	r3, [r7, #8]
 800c6de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800c6e0:	4a5c      	ldr	r2, [pc, #368]	; (800c854 <HAL_GPIO_Init+0x300>)
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	089b      	lsrs	r3, r3, #2
 800c6e6:	3302      	adds	r3, #2
 800c6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f003 0303 	and.w	r3, r3, #3
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	220f      	movs	r2, #15
 800c6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fc:	43db      	mvns	r3, r3
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	4013      	ands	r3, r2
 800c702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c70a:	d02b      	beq.n	800c764 <HAL_GPIO_Init+0x210>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a52      	ldr	r2, [pc, #328]	; (800c858 <HAL_GPIO_Init+0x304>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d025      	beq.n	800c760 <HAL_GPIO_Init+0x20c>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a51      	ldr	r2, [pc, #324]	; (800c85c <HAL_GPIO_Init+0x308>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d01f      	beq.n	800c75c <HAL_GPIO_Init+0x208>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a50      	ldr	r2, [pc, #320]	; (800c860 <HAL_GPIO_Init+0x30c>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d019      	beq.n	800c758 <HAL_GPIO_Init+0x204>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a4f      	ldr	r2, [pc, #316]	; (800c864 <HAL_GPIO_Init+0x310>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d013      	beq.n	800c754 <HAL_GPIO_Init+0x200>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a4e      	ldr	r2, [pc, #312]	; (800c868 <HAL_GPIO_Init+0x314>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d00d      	beq.n	800c750 <HAL_GPIO_Init+0x1fc>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a4d      	ldr	r2, [pc, #308]	; (800c86c <HAL_GPIO_Init+0x318>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d007      	beq.n	800c74c <HAL_GPIO_Init+0x1f8>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a4c      	ldr	r2, [pc, #304]	; (800c870 <HAL_GPIO_Init+0x31c>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d101      	bne.n	800c748 <HAL_GPIO_Init+0x1f4>
 800c744:	2307      	movs	r3, #7
 800c746:	e00e      	b.n	800c766 <HAL_GPIO_Init+0x212>
 800c748:	2308      	movs	r3, #8
 800c74a:	e00c      	b.n	800c766 <HAL_GPIO_Init+0x212>
 800c74c:	2306      	movs	r3, #6
 800c74e:	e00a      	b.n	800c766 <HAL_GPIO_Init+0x212>
 800c750:	2305      	movs	r3, #5
 800c752:	e008      	b.n	800c766 <HAL_GPIO_Init+0x212>
 800c754:	2304      	movs	r3, #4
 800c756:	e006      	b.n	800c766 <HAL_GPIO_Init+0x212>
 800c758:	2303      	movs	r3, #3
 800c75a:	e004      	b.n	800c766 <HAL_GPIO_Init+0x212>
 800c75c:	2302      	movs	r3, #2
 800c75e:	e002      	b.n	800c766 <HAL_GPIO_Init+0x212>
 800c760:	2301      	movs	r3, #1
 800c762:	e000      	b.n	800c766 <HAL_GPIO_Init+0x212>
 800c764:	2300      	movs	r3, #0
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	f002 0203 	and.w	r2, r2, #3
 800c76c:	0092      	lsls	r2, r2, #2
 800c76e:	4093      	lsls	r3, r2
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	4313      	orrs	r3, r2
 800c774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c776:	4937      	ldr	r1, [pc, #220]	; (800c854 <HAL_GPIO_Init+0x300>)
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	089b      	lsrs	r3, r3, #2
 800c77c:	3302      	adds	r3, #2
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c784:	4b3b      	ldr	r3, [pc, #236]	; (800c874 <HAL_GPIO_Init+0x320>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	43db      	mvns	r3, r3
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	4013      	ands	r3, r2
 800c792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d003      	beq.n	800c7a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c7a8:	4a32      	ldr	r2, [pc, #200]	; (800c874 <HAL_GPIO_Init+0x320>)
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c7ae:	4b31      	ldr	r3, [pc, #196]	; (800c874 <HAL_GPIO_Init+0x320>)
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	43db      	mvns	r3, r3
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d003      	beq.n	800c7d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c7d2:	4a28      	ldr	r2, [pc, #160]	; (800c874 <HAL_GPIO_Init+0x320>)
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c7d8:	4b26      	ldr	r3, [pc, #152]	; (800c874 <HAL_GPIO_Init+0x320>)
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	43db      	mvns	r3, r3
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d003      	beq.n	800c7fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c7fc:	4a1d      	ldr	r2, [pc, #116]	; (800c874 <HAL_GPIO_Init+0x320>)
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c802:	4b1c      	ldr	r3, [pc, #112]	; (800c874 <HAL_GPIO_Init+0x320>)
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	43db      	mvns	r3, r3
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	4013      	ands	r3, r2
 800c810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	4313      	orrs	r3, r2
 800c824:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c826:	4a13      	ldr	r2, [pc, #76]	; (800c874 <HAL_GPIO_Init+0x320>)
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	3301      	adds	r3, #1
 800c830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	fa22 f303 	lsr.w	r3, r2, r3
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f47f ae91 	bne.w	800c564 <HAL_GPIO_Init+0x10>
  }
}
 800c842:	bf00      	nop
 800c844:	371c      	adds	r7, #28
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	40021000 	.word	0x40021000
 800c854:	40010000 	.word	0x40010000
 800c858:	48000400 	.word	0x48000400
 800c85c:	48000800 	.word	0x48000800
 800c860:	48000c00 	.word	0x48000c00
 800c864:	48001000 	.word	0x48001000
 800c868:	48001400 	.word	0x48001400
 800c86c:	48001800 	.word	0x48001800
 800c870:	48001c00 	.word	0x48001c00
 800c874:	40010400 	.word	0x40010400

0800c878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	460b      	mov	r3, r1
 800c882:	807b      	strh	r3, [r7, #2]
 800c884:	4613      	mov	r3, r2
 800c886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c888:	787b      	ldrb	r3, [r7, #1]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d003      	beq.n	800c896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c88e:	887a      	ldrh	r2, [r7, #2]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c894:	e002      	b.n	800c89c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c896:	887a      	ldrh	r2, [r7, #2]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c89c:	bf00      	nop
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	695a      	ldr	r2, [r3, #20]
 800c8b8:	887b      	ldrh	r3, [r7, #2]
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d003      	beq.n	800c8c8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c8c0:	887a      	ldrh	r2, [r7, #2]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800c8c6:	e002      	b.n	800c8ce <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c8c8:	887a      	ldrh	r2, [r7, #2]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	619a      	str	r2, [r3, #24]
}
 800c8ce:	bf00      	nop
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800c8da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8dc:	b08f      	sub	sp, #60	; 0x3c
 800c8de:	af0a      	add	r7, sp, #40	; 0x28
 800c8e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d101      	bne.n	800c8ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e054      	b.n	800c996 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d106      	bne.n	800c90c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f00b f94c 	bl	8017ba4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2203      	movs	r2, #3
 800c910:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d102      	bne.n	800c926 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f003 fc60 	bl	80101f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	603b      	str	r3, [r7, #0]
 800c936:	687e      	ldr	r6, [r7, #4]
 800c938:	466d      	mov	r5, sp
 800c93a:	f106 0410 	add.w	r4, r6, #16
 800c93e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c946:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c94a:	e885 0003 	stmia.w	r5, {r0, r1}
 800c94e:	1d33      	adds	r3, r6, #4
 800c950:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c952:	6838      	ldr	r0, [r7, #0]
 800c954:	f003 fbe9 	bl	801012a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2101      	movs	r1, #1
 800c95e:	4618      	mov	r0, r3
 800c960:	f003 fc57 	bl	8010212 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	603b      	str	r3, [r7, #0]
 800c96a:	687e      	ldr	r6, [r7, #4]
 800c96c:	466d      	mov	r5, sp
 800c96e:	f106 0410 	add.w	r4, r6, #16
 800c972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c97a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c97e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c982:	1d33      	adds	r3, r6, #4
 800c984:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c986:	6838      	ldr	r0, [r7, #0]
 800c988:	f003 fd66 	bl	8010458 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c99e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800c99e:	b590      	push	{r4, r7, lr}
 800c9a0:	b089      	sub	sp, #36	; 0x24
 800c9a2:	af04      	add	r7, sp, #16
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	4608      	mov	r0, r1
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	70fb      	strb	r3, [r7, #3]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	70bb      	strb	r3, [r7, #2]
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d101      	bne.n	800c9c6 <HAL_HCD_HC_Init+0x28>
 800c9c2:	2302      	movs	r3, #2
 800c9c4:	e07f      	b.n	800cac6 <HAL_HCD_HC_Init+0x128>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800c9ce:	78fa      	ldrb	r2, [r7, #3]
 800c9d0:	6879      	ldr	r1, [r7, #4]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	4413      	add	r3, r2
 800c9d8:	00db      	lsls	r3, r3, #3
 800c9da:	440b      	add	r3, r1
 800c9dc:	333d      	adds	r3, #61	; 0x3d
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800c9e2:	78fa      	ldrb	r2, [r7, #3]
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	00db      	lsls	r3, r3, #3
 800c9ee:	440b      	add	r3, r1
 800c9f0:	3338      	adds	r3, #56	; 0x38
 800c9f2:	787a      	ldrb	r2, [r7, #1]
 800c9f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800c9f6:	78fa      	ldrb	r2, [r7, #3]
 800c9f8:	6879      	ldr	r1, [r7, #4]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4413      	add	r3, r2
 800ca00:	00db      	lsls	r3, r3, #3
 800ca02:	440b      	add	r3, r1
 800ca04:	3340      	adds	r3, #64	; 0x40
 800ca06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ca08:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800ca0a:	78fa      	ldrb	r2, [r7, #3]
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	00db      	lsls	r3, r3, #3
 800ca16:	440b      	add	r3, r1
 800ca18:	3339      	adds	r3, #57	; 0x39
 800ca1a:	78fa      	ldrb	r2, [r7, #3]
 800ca1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800ca1e:	78fa      	ldrb	r2, [r7, #3]
 800ca20:	6879      	ldr	r1, [r7, #4]
 800ca22:	4613      	mov	r3, r2
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	4413      	add	r3, r2
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	440b      	add	r3, r1
 800ca2c:	333f      	adds	r3, #63	; 0x3f
 800ca2e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800ca32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800ca34:	78fa      	ldrb	r2, [r7, #3]
 800ca36:	78bb      	ldrb	r3, [r7, #2]
 800ca38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca3c:	b2d8      	uxtb	r0, r3
 800ca3e:	6879      	ldr	r1, [r7, #4]
 800ca40:	4613      	mov	r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4413      	add	r3, r2
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	440b      	add	r3, r1
 800ca4a:	333a      	adds	r3, #58	; 0x3a
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800ca50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	da0a      	bge.n	800ca6e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800ca58:	78fa      	ldrb	r2, [r7, #3]
 800ca5a:	6879      	ldr	r1, [r7, #4]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	440b      	add	r3, r1
 800ca66:	333b      	adds	r3, #59	; 0x3b
 800ca68:	2201      	movs	r2, #1
 800ca6a:	701a      	strb	r2, [r3, #0]
 800ca6c:	e009      	b.n	800ca82 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800ca6e:	78fa      	ldrb	r2, [r7, #3]
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	4613      	mov	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4413      	add	r3, r2
 800ca78:	00db      	lsls	r3, r3, #3
 800ca7a:	440b      	add	r3, r1
 800ca7c:	333b      	adds	r3, #59	; 0x3b
 800ca7e:	2200      	movs	r2, #0
 800ca80:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800ca82:	78fa      	ldrb	r2, [r7, #3]
 800ca84:	6879      	ldr	r1, [r7, #4]
 800ca86:	4613      	mov	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	00db      	lsls	r3, r3, #3
 800ca8e:	440b      	add	r3, r1
 800ca90:	333c      	adds	r3, #60	; 0x3c
 800ca92:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ca96:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6818      	ldr	r0, [r3, #0]
 800ca9c:	787c      	ldrb	r4, [r7, #1]
 800ca9e:	78ba      	ldrb	r2, [r7, #2]
 800caa0:	78f9      	ldrb	r1, [r7, #3]
 800caa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800caa4:	9302      	str	r3, [sp, #8]
 800caa6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800caaa:	9301      	str	r3, [sp, #4]
 800caac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	4623      	mov	r3, r4
 800cab4:	f003 fe14 	bl	80106e0 <USB_HC_Init>
 800cab8:	4603      	mov	r3, r0
 800caba:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd90      	pop	{r4, r7, pc}

0800cace <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	460b      	mov	r3, r1
 800cad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800cada:	2300      	movs	r3, #0
 800cadc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d101      	bne.n	800caec <HAL_HCD_HC_Halt+0x1e>
 800cae8:	2302      	movs	r3, #2
 800caea:	e00f      	b.n	800cb0c <HAL_HCD_HC_Halt+0x3e>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	78fa      	ldrb	r2, [r7, #3]
 800cafa:	4611      	mov	r1, r2
 800cafc:	4618      	mov	r0, r3
 800cafe:	f003 fff2 	bl	8010ae6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	4608      	mov	r0, r1
 800cb1e:	4611      	mov	r1, r2
 800cb20:	461a      	mov	r2, r3
 800cb22:	4603      	mov	r3, r0
 800cb24:	70fb      	strb	r3, [r7, #3]
 800cb26:	460b      	mov	r3, r1
 800cb28:	70bb      	strb	r3, [r7, #2]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800cb2e:	78fa      	ldrb	r2, [r7, #3]
 800cb30:	6879      	ldr	r1, [r7, #4]
 800cb32:	4613      	mov	r3, r2
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	00db      	lsls	r3, r3, #3
 800cb3a:	440b      	add	r3, r1
 800cb3c:	333b      	adds	r3, #59	; 0x3b
 800cb3e:	78ba      	ldrb	r2, [r7, #2]
 800cb40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800cb42:	78fa      	ldrb	r2, [r7, #3]
 800cb44:	6879      	ldr	r1, [r7, #4]
 800cb46:	4613      	mov	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	00db      	lsls	r3, r3, #3
 800cb4e:	440b      	add	r3, r1
 800cb50:	333f      	adds	r3, #63	; 0x3f
 800cb52:	787a      	ldrb	r2, [r7, #1]
 800cb54:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800cb56:	7c3b      	ldrb	r3, [r7, #16]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10a      	bne.n	800cb72 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800cb5c:	78fa      	ldrb	r2, [r7, #3]
 800cb5e:	6879      	ldr	r1, [r7, #4]
 800cb60:	4613      	mov	r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	00db      	lsls	r3, r3, #3
 800cb68:	440b      	add	r3, r1
 800cb6a:	3342      	adds	r3, #66	; 0x42
 800cb6c:	2203      	movs	r2, #3
 800cb6e:	701a      	strb	r2, [r3, #0]
 800cb70:	e009      	b.n	800cb86 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800cb72:	78fa      	ldrb	r2, [r7, #3]
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	4613      	mov	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	440b      	add	r3, r1
 800cb80:	3342      	adds	r3, #66	; 0x42
 800cb82:	2202      	movs	r2, #2
 800cb84:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800cb86:	787b      	ldrb	r3, [r7, #1]
 800cb88:	2b03      	cmp	r3, #3
 800cb8a:	f200 80d6 	bhi.w	800cd3a <HAL_HCD_HC_SubmitRequest+0x226>
 800cb8e:	a201      	add	r2, pc, #4	; (adr r2, 800cb94 <HAL_HCD_HC_SubmitRequest+0x80>)
 800cb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb94:	0800cba5 	.word	0x0800cba5
 800cb98:	0800cd25 	.word	0x0800cd25
 800cb9c:	0800cc11 	.word	0x0800cc11
 800cba0:	0800cc9b 	.word	0x0800cc9b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800cba4:	7c3b      	ldrb	r3, [r7, #16]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	f040 80c9 	bne.w	800cd3e <HAL_HCD_HC_SubmitRequest+0x22a>
 800cbac:	78bb      	ldrb	r3, [r7, #2]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f040 80c5 	bne.w	800cd3e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 800cbb4:	8b3b      	ldrh	r3, [r7, #24]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d109      	bne.n	800cbce <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800cbba:	78fa      	ldrb	r2, [r7, #3]
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	440b      	add	r3, r1
 800cbc8:	3351      	adds	r3, #81	; 0x51
 800cbca:	2201      	movs	r2, #1
 800cbcc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800cbce:	78fa      	ldrb	r2, [r7, #3]
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4413      	add	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	440b      	add	r3, r1
 800cbdc:	3351      	adds	r3, #81	; 0x51
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10a      	bne.n	800cbfa <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800cbe4:	78fa      	ldrb	r2, [r7, #3]
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4413      	add	r3, r2
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	440b      	add	r3, r1
 800cbf2:	3342      	adds	r3, #66	; 0x42
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800cbf8:	e0a1      	b.n	800cd3e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800cbfa:	78fa      	ldrb	r2, [r7, #3]
 800cbfc:	6879      	ldr	r1, [r7, #4]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	4413      	add	r3, r2
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	440b      	add	r3, r1
 800cc08:	3342      	adds	r3, #66	; 0x42
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	701a      	strb	r2, [r3, #0]
      break;
 800cc0e:	e096      	b.n	800cd3e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800cc10:	78bb      	ldrb	r3, [r7, #2]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d120      	bne.n	800cc58 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800cc16:	78fa      	ldrb	r2, [r7, #3]
 800cc18:	6879      	ldr	r1, [r7, #4]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4413      	add	r3, r2
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	440b      	add	r3, r1
 800cc24:	3351      	adds	r3, #81	; 0x51
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d10a      	bne.n	800cc42 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800cc2c:	78fa      	ldrb	r2, [r7, #3]
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	4613      	mov	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	00db      	lsls	r3, r3, #3
 800cc38:	440b      	add	r3, r1
 800cc3a:	3342      	adds	r3, #66	; 0x42
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800cc40:	e07e      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800cc42:	78fa      	ldrb	r2, [r7, #3]
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	4613      	mov	r3, r2
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	440b      	add	r3, r1
 800cc50:	3342      	adds	r3, #66	; 0x42
 800cc52:	2202      	movs	r2, #2
 800cc54:	701a      	strb	r2, [r3, #0]
      break;
 800cc56:	e073      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800cc58:	78fa      	ldrb	r2, [r7, #3]
 800cc5a:	6879      	ldr	r1, [r7, #4]
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4413      	add	r3, r2
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	440b      	add	r3, r1
 800cc66:	3350      	adds	r3, #80	; 0x50
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d10a      	bne.n	800cc84 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800cc6e:	78fa      	ldrb	r2, [r7, #3]
 800cc70:	6879      	ldr	r1, [r7, #4]
 800cc72:	4613      	mov	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	440b      	add	r3, r1
 800cc7c:	3342      	adds	r3, #66	; 0x42
 800cc7e:	2200      	movs	r2, #0
 800cc80:	701a      	strb	r2, [r3, #0]
      break;
 800cc82:	e05d      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800cc84:	78fa      	ldrb	r2, [r7, #3]
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	4413      	add	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	440b      	add	r3, r1
 800cc92:	3342      	adds	r3, #66	; 0x42
 800cc94:	2202      	movs	r2, #2
 800cc96:	701a      	strb	r2, [r3, #0]
      break;
 800cc98:	e052      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800cc9a:	78bb      	ldrb	r3, [r7, #2]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d120      	bne.n	800cce2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800cca0:	78fa      	ldrb	r2, [r7, #3]
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	4613      	mov	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	440b      	add	r3, r1
 800ccae:	3351      	adds	r3, #81	; 0x51
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10a      	bne.n	800cccc <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800ccb6:	78fa      	ldrb	r2, [r7, #3]
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	00db      	lsls	r3, r3, #3
 800ccc2:	440b      	add	r3, r1
 800ccc4:	3342      	adds	r3, #66	; 0x42
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800ccca:	e039      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800cccc:	78fa      	ldrb	r2, [r7, #3]
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	440b      	add	r3, r1
 800ccda:	3342      	adds	r3, #66	; 0x42
 800ccdc:	2202      	movs	r2, #2
 800ccde:	701a      	strb	r2, [r3, #0]
      break;
 800cce0:	e02e      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800cce2:	78fa      	ldrb	r2, [r7, #3]
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	00db      	lsls	r3, r3, #3
 800ccee:	440b      	add	r3, r1
 800ccf0:	3350      	adds	r3, #80	; 0x50
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10a      	bne.n	800cd0e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800ccf8:	78fa      	ldrb	r2, [r7, #3]
 800ccfa:	6879      	ldr	r1, [r7, #4]
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	4413      	add	r3, r2
 800cd02:	00db      	lsls	r3, r3, #3
 800cd04:	440b      	add	r3, r1
 800cd06:	3342      	adds	r3, #66	; 0x42
 800cd08:	2200      	movs	r2, #0
 800cd0a:	701a      	strb	r2, [r3, #0]
      break;
 800cd0c:	e018      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800cd0e:	78fa      	ldrb	r2, [r7, #3]
 800cd10:	6879      	ldr	r1, [r7, #4]
 800cd12:	4613      	mov	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4413      	add	r3, r2
 800cd18:	00db      	lsls	r3, r3, #3
 800cd1a:	440b      	add	r3, r1
 800cd1c:	3342      	adds	r3, #66	; 0x42
 800cd1e:	2202      	movs	r2, #2
 800cd20:	701a      	strb	r2, [r3, #0]
      break;
 800cd22:	e00d      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800cd24:	78fa      	ldrb	r2, [r7, #3]
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	4613      	mov	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	00db      	lsls	r3, r3, #3
 800cd30:	440b      	add	r3, r1
 800cd32:	3342      	adds	r3, #66	; 0x42
 800cd34:	2200      	movs	r2, #0
 800cd36:	701a      	strb	r2, [r3, #0]
      break;
 800cd38:	e002      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800cd3a:	bf00      	nop
 800cd3c:	e000      	b.n	800cd40 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800cd3e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800cd40:	78fa      	ldrb	r2, [r7, #3]
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	4613      	mov	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	440b      	add	r3, r1
 800cd4e:	3344      	adds	r3, #68	; 0x44
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800cd54:	78fa      	ldrb	r2, [r7, #3]
 800cd56:	8b39      	ldrh	r1, [r7, #24]
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	00db      	lsls	r3, r3, #3
 800cd62:	4403      	add	r3, r0
 800cd64:	3348      	adds	r3, #72	; 0x48
 800cd66:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800cd68:	78fa      	ldrb	r2, [r7, #3]
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	00db      	lsls	r3, r3, #3
 800cd74:	440b      	add	r3, r1
 800cd76:	335c      	adds	r3, #92	; 0x5c
 800cd78:	2200      	movs	r2, #0
 800cd7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800cd7c:	78fa      	ldrb	r2, [r7, #3]
 800cd7e:	6879      	ldr	r1, [r7, #4]
 800cd80:	4613      	mov	r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	00db      	lsls	r3, r3, #3
 800cd88:	440b      	add	r3, r1
 800cd8a:	334c      	adds	r3, #76	; 0x4c
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800cd90:	78fa      	ldrb	r2, [r7, #3]
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	440b      	add	r3, r1
 800cd9e:	3339      	adds	r3, #57	; 0x39
 800cda0:	78fa      	ldrb	r2, [r7, #3]
 800cda2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800cda4:	78fa      	ldrb	r2, [r7, #3]
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4413      	add	r3, r2
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	440b      	add	r3, r1
 800cdb2:	335d      	adds	r3, #93	; 0x5d
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6818      	ldr	r0, [r3, #0]
 800cdbc:	78fa      	ldrb	r2, [r7, #3]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	00db      	lsls	r3, r3, #3
 800cdc6:	3338      	adds	r3, #56	; 0x38
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	4413      	add	r3, r2
 800cdcc:	4619      	mov	r1, r3
 800cdce:	f003 fd79 	bl	80108c4 <USB_HC_StartXfer>
 800cdd2:	4603      	mov	r3, r0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f003 faed 	bl	80103d2 <USB_GetMode>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	f040 80f1 	bne.w	800cfe2 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f003 fad1 	bl	80103ac <USB_ReadInterrupts>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f000 80e7 	beq.w	800cfe0 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f003 fac8 	bl	80103ac <USB_ReadInterrupts>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce26:	d104      	bne.n	800ce32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ce30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4618      	mov	r0, r3
 800ce38:	f003 fab8 	bl	80103ac <USB_ReadInterrupts>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce46:	d104      	bne.n	800ce52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ce50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f003 faa8 	bl	80103ac <USB_ReadInterrupts>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce66:	d104      	bne.n	800ce72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ce70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f003 fa98 	bl	80103ac <USB_ReadInterrupts>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	f003 0302 	and.w	r3, r3, #2
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d103      	bne.n	800ce8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f003 fa8a 	bl	80103ac <USB_ReadInterrupts>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cea2:	d117      	bne.n	800ced4 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ceb2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ceb6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f00a fef5 	bl	8017ca8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2101      	movs	r1, #1
 800cec4:	4618      	mov	r0, r3
 800cec6:	f003 fb45 	bl	8010554 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ced2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4618      	mov	r0, r3
 800ceda:	f003 fa67 	bl	80103ac <USB_ReadInterrupts>
 800cede:	4603      	mov	r3, r0
 800cee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cee8:	d102      	bne.n	800cef0 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f001 f870 	bl	800dfd0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4618      	mov	r0, r3
 800cef6:	f003 fa59 	bl	80103ac <USB_ReadInterrupts>
 800cefa:	4603      	mov	r3, r0
 800cefc:	f003 0308 	and.w	r3, r3, #8
 800cf00:	2b08      	cmp	r3, #8
 800cf02:	d106      	bne.n	800cf12 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f00a feb3 	bl	8017c70 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2208      	movs	r2, #8
 800cf10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f003 fa48 	bl	80103ac <USB_ReadInterrupts>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf26:	d138      	bne.n	800cf9a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f003 fdc9 	bl	8010ac4 <USB_HC_ReadInterrupt>
 800cf32:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800cf34:	2300      	movs	r3, #0
 800cf36:	617b      	str	r3, [r7, #20]
 800cf38:	e025      	b.n	800cf86 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f003 030f 	and.w	r3, r3, #15
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	fa22 f303 	lsr.w	r3, r2, r3
 800cf46:	f003 0301 	and.w	r3, r3, #1
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d018      	beq.n	800cf80 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	015a      	lsls	r2, r3, #5
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	4413      	add	r3, r2
 800cf56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf64:	d106      	bne.n	800cf74 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 f8ba 	bl	800d0e6 <HCD_HC_IN_IRQHandler>
 800cf72:	e005      	b.n	800cf80 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fc26 	bl	800d7cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	3301      	adds	r3, #1
 800cf84:	617b      	str	r3, [r7, #20]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	697a      	ldr	r2, [r7, #20]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d3d4      	bcc.n	800cf3a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cf98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f003 fa04 	bl	80103ac <USB_ReadInterrupts>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	f003 0310 	and.w	r3, r3, #16
 800cfaa:	2b10      	cmp	r3, #16
 800cfac:	d101      	bne.n	800cfb2 <HAL_HCD_IRQHandler+0x1d6>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e000      	b.n	800cfb4 <HAL_HCD_IRQHandler+0x1d8>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d014      	beq.n	800cfe2 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	699a      	ldr	r2, [r3, #24]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f022 0210 	bic.w	r2, r2, #16
 800cfc6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 ff55 	bl	800de78 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	699a      	ldr	r2, [r3, #24]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f042 0210 	orr.w	r2, r2, #16
 800cfdc:	619a      	str	r2, [r3, #24]
 800cfde:	e000      	b.n	800cfe2 <HAL_HCD_IRQHandler+0x206>
      return;
 800cfe0:	bf00      	nop
    }
  }
}
 800cfe2:	3718      	adds	r7, #24
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d101      	bne.n	800cffe <HAL_HCD_Start+0x16>
 800cffa:	2302      	movs	r3, #2
 800cffc:	e013      	b.n	800d026 <HAL_HCD_Start+0x3e>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f003 f8df 	bl	80101ce <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2101      	movs	r1, #1
 800d016:	4618      	mov	r0, r3
 800d018:	f003 fb00 	bl	801061c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b082      	sub	sp, #8
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d101      	bne.n	800d044 <HAL_HCD_Stop+0x16>
 800d040:	2302      	movs	r3, #2
 800d042:	e00d      	b.n	800d060 <HAL_HCD_Stop+0x32>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4618      	mov	r0, r3
 800d052:	f003 fe47 	bl	8010ce4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4618      	mov	r0, r3
 800d076:	f003 faa7 	bl	80105c8 <USB_ResetPort>
 800d07a:	4603      	mov	r3, r0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800d090:	78fa      	ldrb	r2, [r7, #3]
 800d092:	6879      	ldr	r1, [r7, #4]
 800d094:	4613      	mov	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	4413      	add	r3, r2
 800d09a:	00db      	lsls	r3, r3, #3
 800d09c:	440b      	add	r3, r1
 800d09e:	335c      	adds	r3, #92	; 0x5c
 800d0a0:	781b      	ldrb	r3, [r3, #0]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	370c      	adds	r7, #12
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b082      	sub	sp, #8
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f003 fafe 	bl	80106bc <USB_GetCurrentFrame>
 800d0c0:	4603      	mov	r3, r0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b082      	sub	sp, #8
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f003 fad9 	bl	801068e <USB_GetHostSpeed>
 800d0dc:	4603      	mov	r3, r0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b086      	sub	sp, #24
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800d0fc:	78fb      	ldrb	r3, [r7, #3]
 800d0fe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	015a      	lsls	r2, r3, #5
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	4413      	add	r3, r2
 800d108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	f003 0304 	and.w	r3, r3, #4
 800d112:	2b04      	cmp	r3, #4
 800d114:	d119      	bne.n	800d14a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	015a      	lsls	r2, r3, #5
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	4413      	add	r3, r2
 800d11e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d122:	461a      	mov	r2, r3
 800d124:	2304      	movs	r3, #4
 800d126:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	015a      	lsls	r2, r3, #5
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	4413      	add	r3, r2
 800d130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	0151      	lsls	r1, r2, #5
 800d13a:	693a      	ldr	r2, [r7, #16]
 800d13c:	440a      	add	r2, r1
 800d13e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d142:	f043 0302 	orr.w	r3, r3, #2
 800d146:	60d3      	str	r3, [r2, #12]
 800d148:	e095      	b.n	800d276 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	015a      	lsls	r2, r3, #5
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	4413      	add	r3, r2
 800d152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	f003 0320 	and.w	r3, r3, #32
 800d15c:	2b20      	cmp	r3, #32
 800d15e:	d109      	bne.n	800d174 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	015a      	lsls	r2, r3, #5
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	4413      	add	r3, r2
 800d168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d16c:	461a      	mov	r2, r3
 800d16e:	2320      	movs	r3, #32
 800d170:	6093      	str	r3, [r2, #8]
 800d172:	e080      	b.n	800d276 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	015a      	lsls	r2, r3, #5
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	4413      	add	r3, r2
 800d17c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	f003 0308 	and.w	r3, r3, #8
 800d186:	2b08      	cmp	r3, #8
 800d188:	d134      	bne.n	800d1f4 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	015a      	lsls	r2, r3, #5
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	4413      	add	r3, r2
 800d192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	0151      	lsls	r1, r2, #5
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	440a      	add	r2, r1
 800d1a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1a4:	f043 0302 	orr.w	r3, r3, #2
 800d1a8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800d1aa:	6879      	ldr	r1, [r7, #4]
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	440b      	add	r3, r1
 800d1b8:	335d      	adds	r3, #93	; 0x5d
 800d1ba:	2205      	movs	r2, #5
 800d1bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	015a      	lsls	r2, r3, #5
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	2310      	movs	r3, #16
 800d1ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	015a      	lsls	r2, r3, #5
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1dc:	461a      	mov	r2, r3
 800d1de:	2308      	movs	r3, #8
 800d1e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	b2d2      	uxtb	r2, r2
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f003 fc7a 	bl	8010ae6 <USB_HC_Halt>
 800d1f2:	e040      	b.n	800d276 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d20a:	d134      	bne.n	800d276 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	015a      	lsls	r2, r3, #5
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	4413      	add	r3, r2
 800d214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	0151      	lsls	r1, r2, #5
 800d21e:	693a      	ldr	r2, [r7, #16]
 800d220:	440a      	add	r2, r1
 800d222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d226:	f043 0302 	orr.w	r3, r3, #2
 800d22a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	b2d2      	uxtb	r2, r2
 800d234:	4611      	mov	r1, r2
 800d236:	4618      	mov	r0, r3
 800d238:	f003 fc55 	bl	8010ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	015a      	lsls	r2, r3, #5
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	4413      	add	r3, r2
 800d244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d248:	461a      	mov	r2, r3
 800d24a:	2310      	movs	r3, #16
 800d24c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800d24e:	6879      	ldr	r1, [r7, #4]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	4613      	mov	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4413      	add	r3, r2
 800d258:	00db      	lsls	r3, r3, #3
 800d25a:	440b      	add	r3, r1
 800d25c:	335d      	adds	r3, #93	; 0x5d
 800d25e:	2208      	movs	r2, #8
 800d260:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	015a      	lsls	r2, r3, #5
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	4413      	add	r3, r2
 800d26a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d26e:	461a      	mov	r2, r3
 800d270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d274:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	015a      	lsls	r2, r3, #5
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	4413      	add	r3, r2
 800d27e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d28c:	d122      	bne.n	800d2d4 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	015a      	lsls	r2, r3, #5
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	4413      	add	r3, r2
 800d296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	0151      	lsls	r1, r2, #5
 800d2a0:	693a      	ldr	r2, [r7, #16]
 800d2a2:	440a      	add	r2, r1
 800d2a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2a8:	f043 0302 	orr.w	r3, r3, #2
 800d2ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	b2d2      	uxtb	r2, r2
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f003 fc14 	bl	8010ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	015a      	lsls	r2, r3, #5
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800d2d2:	e277      	b.n	800d7c4 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	015a      	lsls	r2, r3, #5
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	4413      	add	r3, r2
 800d2dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	f040 80a1 	bne.w	800d42e <HCD_HC_IN_IRQHandler+0x348>
    hhcd->hc[ch_num].state = HC_XFRC;
 800d2ec:	6879      	ldr	r1, [r7, #4]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	00db      	lsls	r3, r3, #3
 800d2f8:	440b      	add	r3, r1
 800d2fa:	335d      	adds	r3, #93	; 0x5d
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	00db      	lsls	r3, r3, #3
 800d30c:	440b      	add	r3, r1
 800d30e:	3358      	adds	r3, #88	; 0x58
 800d310:	2200      	movs	r2, #0
 800d312:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	015a      	lsls	r2, r3, #5
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	4413      	add	r3, r2
 800d31c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d320:	461a      	mov	r2, r3
 800d322:	2301      	movs	r3, #1
 800d324:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800d326:	6879      	ldr	r1, [r7, #4]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	4613      	mov	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4413      	add	r3, r2
 800d330:	00db      	lsls	r3, r3, #3
 800d332:	440b      	add	r3, r1
 800d334:	333f      	adds	r3, #63	; 0x3f
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00a      	beq.n	800d352 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800d33c:	6879      	ldr	r1, [r7, #4]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	4613      	mov	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4413      	add	r3, r2
 800d346:	00db      	lsls	r3, r3, #3
 800d348:	440b      	add	r3, r1
 800d34a:	333f      	adds	r3, #63	; 0x3f
 800d34c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d121      	bne.n	800d396 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	015a      	lsls	r2, r3, #5
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	4413      	add	r3, r2
 800d35a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	0151      	lsls	r1, r2, #5
 800d364:	693a      	ldr	r2, [r7, #16]
 800d366:	440a      	add	r2, r1
 800d368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d36c:	f043 0302 	orr.w	r3, r3, #2
 800d370:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	b2d2      	uxtb	r2, r2
 800d37a:	4611      	mov	r1, r2
 800d37c:	4618      	mov	r0, r3
 800d37e:	f003 fbb2 	bl	8010ae6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	015a      	lsls	r2, r3, #5
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	4413      	add	r3, r2
 800d38a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d38e:	461a      	mov	r2, r3
 800d390:	2310      	movs	r3, #16
 800d392:	6093      	str	r3, [r2, #8]
 800d394:	e034      	b.n	800d400 <HCD_HC_IN_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800d396:	6879      	ldr	r1, [r7, #4]
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	4613      	mov	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4413      	add	r3, r2
 800d3a0:	00db      	lsls	r3, r3, #3
 800d3a2:	440b      	add	r3, r1
 800d3a4:	333f      	adds	r3, #63	; 0x3f
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2b03      	cmp	r3, #3
 800d3aa:	d129      	bne.n	800d400 <HCD_HC_IN_IRQHandler+0x31a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	015a      	lsls	r2, r3, #5
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	0151      	lsls	r1, r2, #5
 800d3be:	693a      	ldr	r2, [r7, #16]
 800d3c0:	440a      	add	r2, r1
 800d3c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d3ca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	4413      	add	r3, r2
 800d3d6:	00db      	lsls	r3, r3, #3
 800d3d8:	440b      	add	r3, r1
 800d3da:	335c      	adds	r3, #92	; 0x5c
 800d3dc:	2201      	movs	r2, #1
 800d3de:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	b2d8      	uxtb	r0, r3
 800d3e4:	6879      	ldr	r1, [r7, #4]
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	00db      	lsls	r3, r3, #3
 800d3f0:	440b      	add	r3, r1
 800d3f2:	335c      	adds	r3, #92	; 0x5c
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	4601      	mov	r1, r0
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f00a fc62 	bl	8017cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800d400:	6879      	ldr	r1, [r7, #4]
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	4613      	mov	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	4413      	add	r3, r2
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	440b      	add	r3, r1
 800d40e:	3350      	adds	r3, #80	; 0x50
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	f083 0301 	eor.w	r3, r3, #1
 800d416:	b2d8      	uxtb	r0, r3
 800d418:	6879      	ldr	r1, [r7, #4]
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	4613      	mov	r3, r2
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	4413      	add	r3, r2
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	440b      	add	r3, r1
 800d426:	3350      	adds	r3, #80	; 0x50
 800d428:	4602      	mov	r2, r0
 800d42a:	701a      	strb	r2, [r3, #0]
}
 800d42c:	e1ca      	b.n	800d7c4 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	015a      	lsls	r2, r3, #5
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	4413      	add	r3, r2
 800d436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	f003 0302 	and.w	r3, r3, #2
 800d440:	2b02      	cmp	r3, #2
 800d442:	f040 80f1 	bne.w	800d628 <HCD_HC_IN_IRQHandler+0x542>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	015a      	lsls	r2, r3, #5
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	4413      	add	r3, r2
 800d44e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	0151      	lsls	r1, r2, #5
 800d458:	693a      	ldr	r2, [r7, #16]
 800d45a:	440a      	add	r2, r1
 800d45c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d460:	f023 0302 	bic.w	r3, r3, #2
 800d464:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800d466:	6879      	ldr	r1, [r7, #4]
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	4613      	mov	r3, r2
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	4413      	add	r3, r2
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	440b      	add	r3, r1
 800d474:	335d      	adds	r3, #93	; 0x5d
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d10a      	bne.n	800d492 <HCD_HC_IN_IRQHandler+0x3ac>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800d47c:	6879      	ldr	r1, [r7, #4]
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	00db      	lsls	r3, r3, #3
 800d488:	440b      	add	r3, r1
 800d48a:	335c      	adds	r3, #92	; 0x5c
 800d48c:	2201      	movs	r2, #1
 800d48e:	701a      	strb	r2, [r3, #0]
 800d490:	e0b0      	b.n	800d5f4 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800d492:	6879      	ldr	r1, [r7, #4]
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	4613      	mov	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	4413      	add	r3, r2
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	440b      	add	r3, r1
 800d4a0:	335d      	adds	r3, #93	; 0x5d
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b05      	cmp	r3, #5
 800d4a6:	d10a      	bne.n	800d4be <HCD_HC_IN_IRQHandler+0x3d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800d4a8:	6879      	ldr	r1, [r7, #4]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4413      	add	r3, r2
 800d4b2:	00db      	lsls	r3, r3, #3
 800d4b4:	440b      	add	r3, r1
 800d4b6:	335c      	adds	r3, #92	; 0x5c
 800d4b8:	2205      	movs	r2, #5
 800d4ba:	701a      	strb	r2, [r3, #0]
 800d4bc:	e09a      	b.n	800d5f4 <HCD_HC_IN_IRQHandler+0x50e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800d4be:	6879      	ldr	r1, [r7, #4]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	4413      	add	r3, r2
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	440b      	add	r3, r1
 800d4cc:	335d      	adds	r3, #93	; 0x5d
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b06      	cmp	r3, #6
 800d4d2:	d00a      	beq.n	800d4ea <HCD_HC_IN_IRQHandler+0x404>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	440b      	add	r3, r1
 800d4e2:	335d      	adds	r3, #93	; 0x5d
 800d4e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800d4e6:	2b08      	cmp	r3, #8
 800d4e8:	d156      	bne.n	800d598 <HCD_HC_IN_IRQHandler+0x4b2>
      hhcd->hc[ch_num].ErrCnt++;
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4413      	add	r3, r2
 800d4f4:	00db      	lsls	r3, r3, #3
 800d4f6:	440b      	add	r3, r1
 800d4f8:	3358      	adds	r3, #88	; 0x58
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	1c59      	adds	r1, r3, #1
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	4613      	mov	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	4413      	add	r3, r2
 800d508:	00db      	lsls	r3, r3, #3
 800d50a:	4403      	add	r3, r0
 800d50c:	3358      	adds	r3, #88	; 0x58
 800d50e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800d510:	6879      	ldr	r1, [r7, #4]
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	4613      	mov	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	4413      	add	r3, r2
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	440b      	add	r3, r1
 800d51e:	3358      	adds	r3, #88	; 0x58
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b03      	cmp	r3, #3
 800d524:	d914      	bls.n	800d550 <HCD_HC_IN_IRQHandler+0x46a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800d526:	6879      	ldr	r1, [r7, #4]
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	4613      	mov	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4413      	add	r3, r2
 800d530:	00db      	lsls	r3, r3, #3
 800d532:	440b      	add	r3, r1
 800d534:	3358      	adds	r3, #88	; 0x58
 800d536:	2200      	movs	r2, #0
 800d538:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800d53a:	6879      	ldr	r1, [r7, #4]
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	4613      	mov	r3, r2
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	4413      	add	r3, r2
 800d544:	00db      	lsls	r3, r3, #3
 800d546:	440b      	add	r3, r1
 800d548:	335c      	adds	r3, #92	; 0x5c
 800d54a:	2204      	movs	r2, #4
 800d54c:	701a      	strb	r2, [r3, #0]
 800d54e:	e009      	b.n	800d564 <HCD_HC_IN_IRQHandler+0x47e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	4613      	mov	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	00db      	lsls	r3, r3, #3
 800d55c:	440b      	add	r3, r1
 800d55e:	335c      	adds	r3, #92	; 0x5c
 800d560:	2202      	movs	r2, #2
 800d562:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	015a      	lsls	r2, r3, #5
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	4413      	add	r3, r2
 800d56c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d57a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d582:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	015a      	lsls	r2, r3, #5
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	4413      	add	r3, r2
 800d58c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d590:	461a      	mov	r2, r3
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	6013      	str	r3, [r2, #0]
 800d596:	e02d      	b.n	800d5f4 <HCD_HC_IN_IRQHandler+0x50e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	4613      	mov	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	440b      	add	r3, r1
 800d5a6:	335d      	adds	r3, #93	; 0x5d
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b03      	cmp	r3, #3
 800d5ac:	d122      	bne.n	800d5f4 <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4413      	add	r3, r2
 800d5b8:	00db      	lsls	r3, r3, #3
 800d5ba:	440b      	add	r3, r1
 800d5bc:	335c      	adds	r3, #92	; 0x5c
 800d5be:	2202      	movs	r2, #2
 800d5c0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	015a      	lsls	r2, r3, #5
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d5d8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5e0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	015a      	lsls	r2, r3, #5
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	015a      	lsls	r2, r3, #5
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d600:	461a      	mov	r2, r3
 800d602:	2302      	movs	r3, #2
 800d604:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	b2d8      	uxtb	r0, r3
 800d60a:	6879      	ldr	r1, [r7, #4]
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	4613      	mov	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	4413      	add	r3, r2
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	440b      	add	r3, r1
 800d618:	335c      	adds	r3, #92	; 0x5c
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	461a      	mov	r2, r3
 800d61e:	4601      	mov	r1, r0
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f00a fb4f 	bl	8017cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800d626:	e0cd      	b.n	800d7c4 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d63a:	2b80      	cmp	r3, #128	; 0x80
 800d63c:	d13e      	bne.n	800d6bc <HCD_HC_IN_IRQHandler+0x5d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	015a      	lsls	r2, r3, #5
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	4413      	add	r3, r2
 800d646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	0151      	lsls	r1, r2, #5
 800d650:	693a      	ldr	r2, [r7, #16]
 800d652:	440a      	add	r2, r1
 800d654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d658:	f043 0302 	orr.w	r3, r3, #2
 800d65c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800d65e:	6879      	ldr	r1, [r7, #4]
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	4613      	mov	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4413      	add	r3, r2
 800d668:	00db      	lsls	r3, r3, #3
 800d66a:	440b      	add	r3, r1
 800d66c:	3358      	adds	r3, #88	; 0x58
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	1c59      	adds	r1, r3, #1
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	4613      	mov	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	00db      	lsls	r3, r3, #3
 800d67e:	4403      	add	r3, r0
 800d680:	3358      	adds	r3, #88	; 0x58
 800d682:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800d684:	6879      	ldr	r1, [r7, #4]
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	4613      	mov	r3, r2
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	4413      	add	r3, r2
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	440b      	add	r3, r1
 800d692:	335d      	adds	r3, #93	; 0x5d
 800d694:	2206      	movs	r2, #6
 800d696:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	b2d2      	uxtb	r2, r2
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f003 fa1f 	bl	8010ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	015a      	lsls	r2, r3, #5
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	2380      	movs	r3, #128	; 0x80
 800d6b8:	6093      	str	r3, [r2, #8]
}
 800d6ba:	e083      	b.n	800d7c4 <HCD_HC_IN_IRQHandler+0x6de>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	015a      	lsls	r2, r3, #5
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	f003 0310 	and.w	r3, r3, #16
 800d6ce:	2b10      	cmp	r3, #16
 800d6d0:	d178      	bne.n	800d7c4 <HCD_HC_IN_IRQHandler+0x6de>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800d6d2:	6879      	ldr	r1, [r7, #4]
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	4413      	add	r3, r2
 800d6dc:	00db      	lsls	r3, r3, #3
 800d6de:	440b      	add	r3, r1
 800d6e0:	333f      	adds	r3, #63	; 0x3f
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d122      	bne.n	800d72e <HCD_HC_IN_IRQHandler+0x648>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	4413      	add	r3, r2
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	440b      	add	r3, r1
 800d6f6:	3358      	adds	r3, #88	; 0x58
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	015a      	lsls	r2, r3, #5
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	4413      	add	r3, r2
 800d704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	0151      	lsls	r1, r2, #5
 800d70e:	693a      	ldr	r2, [r7, #16]
 800d710:	440a      	add	r2, r1
 800d712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d716:	f043 0302 	orr.w	r3, r3, #2
 800d71a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	b2d2      	uxtb	r2, r2
 800d724:	4611      	mov	r1, r2
 800d726:	4618      	mov	r0, r3
 800d728:	f003 f9dd 	bl	8010ae6 <USB_HC_Halt>
 800d72c:	e041      	b.n	800d7b2 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800d72e:	6879      	ldr	r1, [r7, #4]
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	4613      	mov	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4413      	add	r3, r2
 800d738:	00db      	lsls	r3, r3, #3
 800d73a:	440b      	add	r3, r1
 800d73c:	333f      	adds	r3, #63	; 0x3f
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00a      	beq.n	800d75a <HCD_HC_IN_IRQHandler+0x674>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800d744:	6879      	ldr	r1, [r7, #4]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	4613      	mov	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	00db      	lsls	r3, r3, #3
 800d750:	440b      	add	r3, r1
 800d752:	333f      	adds	r3, #63	; 0x3f
 800d754:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800d756:	2b02      	cmp	r3, #2
 800d758:	d12b      	bne.n	800d7b2 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800d75a:	6879      	ldr	r1, [r7, #4]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	4613      	mov	r3, r2
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	4413      	add	r3, r2
 800d764:	00db      	lsls	r3, r3, #3
 800d766:	440b      	add	r3, r1
 800d768:	3358      	adds	r3, #88	; 0x58
 800d76a:	2200      	movs	r2, #0
 800d76c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	4613      	mov	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4413      	add	r3, r2
 800d778:	00db      	lsls	r3, r3, #3
 800d77a:	440b      	add	r3, r1
 800d77c:	335d      	adds	r3, #93	; 0x5d
 800d77e:	2203      	movs	r2, #3
 800d780:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	015a      	lsls	r2, r3, #5
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	4413      	add	r3, r2
 800d78a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	0151      	lsls	r1, r2, #5
 800d794:	693a      	ldr	r2, [r7, #16]
 800d796:	440a      	add	r2, r1
 800d798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d79c:	f043 0302 	orr.w	r3, r3, #2
 800d7a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	b2d2      	uxtb	r2, r2
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f003 f99a 	bl	8010ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	015a      	lsls	r2, r3, #5
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7be:	461a      	mov	r2, r3
 800d7c0:	2310      	movs	r3, #16
 800d7c2:	6093      	str	r3, [r2, #8]
}
 800d7c4:	bf00      	nop
 800d7c6:	3718      	adds	r7, #24
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b086      	sub	sp, #24
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800d7e2:	78fb      	ldrb	r3, [r7, #3]
 800d7e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	015a      	lsls	r2, r3, #5
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	f003 0304 	and.w	r3, r3, #4
 800d7f8:	2b04      	cmp	r3, #4
 800d7fa:	d119      	bne.n	800d830 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	015a      	lsls	r2, r3, #5
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	4413      	add	r3, r2
 800d804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d808:	461a      	mov	r2, r3
 800d80a:	2304      	movs	r3, #4
 800d80c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	015a      	lsls	r2, r3, #5
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	4413      	add	r3, r2
 800d816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	0151      	lsls	r1, r2, #5
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	440a      	add	r2, r1
 800d824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d828:	f043 0302 	orr.w	r3, r3, #2
 800d82c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800d82e:	e31e      	b.n	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	015a      	lsls	r2, r3, #5
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	4413      	add	r3, r2
 800d838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	f003 0320 	and.w	r3, r3, #32
 800d842:	2b20      	cmp	r3, #32
 800d844:	d141      	bne.n	800d8ca <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	015a      	lsls	r2, r3, #5
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	4413      	add	r3, r2
 800d84e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d852:	461a      	mov	r2, r3
 800d854:	2320      	movs	r3, #32
 800d856:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800d858:	6879      	ldr	r1, [r7, #4]
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	4613      	mov	r3, r2
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	4413      	add	r3, r2
 800d862:	00db      	lsls	r3, r3, #3
 800d864:	440b      	add	r3, r1
 800d866:	333d      	adds	r3, #61	; 0x3d
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	f040 82ff 	bne.w	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800d870:	6879      	ldr	r1, [r7, #4]
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	4613      	mov	r3, r2
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	440b      	add	r3, r1
 800d87e:	333d      	adds	r3, #61	; 0x3d
 800d880:	2200      	movs	r2, #0
 800d882:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	4613      	mov	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	440b      	add	r3, r1
 800d892:	335c      	adds	r3, #92	; 0x5c
 800d894:	2202      	movs	r2, #2
 800d896:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	015a      	lsls	r2, r3, #5
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	4413      	add	r3, r2
 800d8a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	0151      	lsls	r1, r2, #5
 800d8aa:	693a      	ldr	r2, [r7, #16]
 800d8ac:	440a      	add	r2, r1
 800d8ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8b2:	f043 0302 	orr.w	r3, r3, #2
 800d8b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	b2d2      	uxtb	r2, r2
 800d8c0:	4611      	mov	r1, r2
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f003 f90f 	bl	8010ae6 <USB_HC_Halt>
}
 800d8c8:	e2d1      	b.n	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	015a      	lsls	r2, r3, #5
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8dc:	2b40      	cmp	r3, #64	; 0x40
 800d8de:	d13f      	bne.n	800d960 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800d8e0:	6879      	ldr	r1, [r7, #4]
 800d8e2:	68fa      	ldr	r2, [r7, #12]
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4413      	add	r3, r2
 800d8ea:	00db      	lsls	r3, r3, #3
 800d8ec:	440b      	add	r3, r1
 800d8ee:	335d      	adds	r3, #93	; 0x5d
 800d8f0:	2204      	movs	r2, #4
 800d8f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4413      	add	r3, r2
 800d8fe:	00db      	lsls	r3, r3, #3
 800d900:	440b      	add	r3, r1
 800d902:	333d      	adds	r3, #61	; 0x3d
 800d904:	2201      	movs	r2, #1
 800d906:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800d908:	6879      	ldr	r1, [r7, #4]
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	4613      	mov	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	4413      	add	r3, r2
 800d912:	00db      	lsls	r3, r3, #3
 800d914:	440b      	add	r3, r1
 800d916:	3358      	adds	r3, #88	; 0x58
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	015a      	lsls	r2, r3, #5
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	4413      	add	r3, r2
 800d924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	0151      	lsls	r1, r2, #5
 800d92e:	693a      	ldr	r2, [r7, #16]
 800d930:	440a      	add	r2, r1
 800d932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d936:	f043 0302 	orr.w	r3, r3, #2
 800d93a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	b2d2      	uxtb	r2, r2
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f003 f8cd 	bl	8010ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	015a      	lsls	r2, r3, #5
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	4413      	add	r3, r2
 800d954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d958:	461a      	mov	r2, r3
 800d95a:	2340      	movs	r3, #64	; 0x40
 800d95c:	6093      	str	r3, [r2, #8]
}
 800d95e:	e286      	b.n	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	4413      	add	r3, r2
 800d968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d976:	d122      	bne.n	800d9be <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	015a      	lsls	r2, r3, #5
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	4413      	add	r3, r2
 800d980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	0151      	lsls	r1, r2, #5
 800d98a:	693a      	ldr	r2, [r7, #16]
 800d98c:	440a      	add	r2, r1
 800d98e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d992:	f043 0302 	orr.w	r3, r3, #2
 800d996:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	b2d2      	uxtb	r2, r2
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f003 f89f 	bl	8010ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	015a      	lsls	r2, r3, #5
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9ba:	6093      	str	r3, [r2, #8]
}
 800d9bc:	e257      	b.n	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	015a      	lsls	r2, r3, #5
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d135      	bne.n	800da40 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800d9d4:	6879      	ldr	r1, [r7, #4]
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	00db      	lsls	r3, r3, #3
 800d9e0:	440b      	add	r3, r1
 800d9e2:	3358      	adds	r3, #88	; 0x58
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	015a      	lsls	r2, r3, #5
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	0151      	lsls	r1, r2, #5
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	440a      	add	r2, r1
 800d9fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da02:	f043 0302 	orr.w	r3, r3, #2
 800da06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	b2d2      	uxtb	r2, r2
 800da10:	4611      	mov	r1, r2
 800da12:	4618      	mov	r0, r3
 800da14:	f003 f867 	bl	8010ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	015a      	lsls	r2, r3, #5
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	4413      	add	r3, r2
 800da20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da24:	461a      	mov	r2, r3
 800da26:	2301      	movs	r3, #1
 800da28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800da2a:	6879      	ldr	r1, [r7, #4]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	4613      	mov	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4413      	add	r3, r2
 800da34:	00db      	lsls	r3, r3, #3
 800da36:	440b      	add	r3, r1
 800da38:	335d      	adds	r3, #93	; 0x5d
 800da3a:	2201      	movs	r2, #1
 800da3c:	701a      	strb	r2, [r3, #0]
}
 800da3e:	e216      	b.n	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	015a      	lsls	r2, r3, #5
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	4413      	add	r3, r2
 800da48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	f003 0308 	and.w	r3, r3, #8
 800da52:	2b08      	cmp	r3, #8
 800da54:	d12b      	bne.n	800daae <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	015a      	lsls	r2, r3, #5
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	4413      	add	r3, r2
 800da5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da62:	461a      	mov	r2, r3
 800da64:	2308      	movs	r3, #8
 800da66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	015a      	lsls	r2, r3, #5
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	4413      	add	r3, r2
 800da70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	0151      	lsls	r1, r2, #5
 800da7a:	693a      	ldr	r2, [r7, #16]
 800da7c:	440a      	add	r2, r1
 800da7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da82:	f043 0302 	orr.w	r3, r3, #2
 800da86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	b2d2      	uxtb	r2, r2
 800da90:	4611      	mov	r1, r2
 800da92:	4618      	mov	r0, r3
 800da94:	f003 f827 	bl	8010ae6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800da98:	6879      	ldr	r1, [r7, #4]
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	4613      	mov	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	00db      	lsls	r3, r3, #3
 800daa4:	440b      	add	r3, r1
 800daa6:	335d      	adds	r3, #93	; 0x5d
 800daa8:	2205      	movs	r2, #5
 800daaa:	701a      	strb	r2, [r3, #0]
}
 800daac:	e1df      	b.n	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	015a      	lsls	r2, r3, #5
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	4413      	add	r3, r2
 800dab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	f003 0310 	and.w	r3, r3, #16
 800dac0:	2b10      	cmp	r3, #16
 800dac2:	d135      	bne.n	800db30 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800dac4:	6879      	ldr	r1, [r7, #4]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	4613      	mov	r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	4413      	add	r3, r2
 800dace:	00db      	lsls	r3, r3, #3
 800dad0:	440b      	add	r3, r1
 800dad2:	3358      	adds	r3, #88	; 0x58
 800dad4:	2200      	movs	r2, #0
 800dad6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800dad8:	6879      	ldr	r1, [r7, #4]
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	4613      	mov	r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	4413      	add	r3, r2
 800dae2:	00db      	lsls	r3, r3, #3
 800dae4:	440b      	add	r3, r1
 800dae6:	335d      	adds	r3, #93	; 0x5d
 800dae8:	2203      	movs	r2, #3
 800daea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	015a      	lsls	r2, r3, #5
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	4413      	add	r3, r2
 800daf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	0151      	lsls	r1, r2, #5
 800dafe:	693a      	ldr	r2, [r7, #16]
 800db00:	440a      	add	r2, r1
 800db02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db06:	f043 0302 	orr.w	r3, r3, #2
 800db0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68fa      	ldr	r2, [r7, #12]
 800db12:	b2d2      	uxtb	r2, r2
 800db14:	4611      	mov	r1, r2
 800db16:	4618      	mov	r0, r3
 800db18:	f002 ffe5 	bl	8010ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	015a      	lsls	r2, r3, #5
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	4413      	add	r3, r2
 800db24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db28:	461a      	mov	r2, r3
 800db2a:	2310      	movs	r3, #16
 800db2c:	6093      	str	r3, [r2, #8]
}
 800db2e:	e19e      	b.n	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	015a      	lsls	r2, r3, #5
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	4413      	add	r3, r2
 800db38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db3c:	689b      	ldr	r3, [r3, #8]
 800db3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db42:	2b80      	cmp	r3, #128	; 0x80
 800db44:	d12b      	bne.n	800db9e <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	015a      	lsls	r2, r3, #5
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	4413      	add	r3, r2
 800db4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	0151      	lsls	r1, r2, #5
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	440a      	add	r2, r1
 800db5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db60:	f043 0302 	orr.w	r3, r3, #2
 800db64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	b2d2      	uxtb	r2, r2
 800db6e:	4611      	mov	r1, r2
 800db70:	4618      	mov	r0, r3
 800db72:	f002 ffb8 	bl	8010ae6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800db76:	6879      	ldr	r1, [r7, #4]
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	4613      	mov	r3, r2
 800db7c:	009b      	lsls	r3, r3, #2
 800db7e:	4413      	add	r3, r2
 800db80:	00db      	lsls	r3, r3, #3
 800db82:	440b      	add	r3, r1
 800db84:	335d      	adds	r3, #93	; 0x5d
 800db86:	2206      	movs	r2, #6
 800db88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	015a      	lsls	r2, r3, #5
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	4413      	add	r3, r2
 800db92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db96:	461a      	mov	r2, r3
 800db98:	2380      	movs	r3, #128	; 0x80
 800db9a:	6093      	str	r3, [r2, #8]
}
 800db9c:	e167      	b.n	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	015a      	lsls	r2, r3, #5
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	4413      	add	r3, r2
 800dba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbb4:	d135      	bne.n	800dc22 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	015a      	lsls	r2, r3, #5
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	0151      	lsls	r1, r2, #5
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	440a      	add	r2, r1
 800dbcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbd0:	f043 0302 	orr.w	r3, r3, #2
 800dbd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	b2d2      	uxtb	r2, r2
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f002 ff80 	bl	8010ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	015a      	lsls	r2, r3, #5
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	4413      	add	r3, r2
 800dbee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	2310      	movs	r3, #16
 800dbf6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc04:	461a      	mov	r2, r3
 800dc06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800dc0c:	6879      	ldr	r1, [r7, #4]
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	4613      	mov	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	00db      	lsls	r3, r3, #3
 800dc18:	440b      	add	r3, r1
 800dc1a:	335d      	adds	r3, #93	; 0x5d
 800dc1c:	2208      	movs	r2, #8
 800dc1e:	701a      	strb	r2, [r3, #0]
}
 800dc20:	e125      	b.n	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	015a      	lsls	r2, r3, #5
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	4413      	add	r3, r2
 800dc2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	f003 0302 	and.w	r3, r3, #2
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	f040 811a 	bne.w	800de6e <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	015a      	lsls	r2, r3, #5
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	4413      	add	r3, r2
 800dc42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	68fa      	ldr	r2, [r7, #12]
 800dc4a:	0151      	lsls	r1, r2, #5
 800dc4c:	693a      	ldr	r2, [r7, #16]
 800dc4e:	440a      	add	r2, r1
 800dc50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc54:	f023 0302 	bic.w	r3, r3, #2
 800dc58:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4413      	add	r3, r2
 800dc64:	00db      	lsls	r3, r3, #3
 800dc66:	440b      	add	r3, r1
 800dc68:	335d      	adds	r3, #93	; 0x5d
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d137      	bne.n	800dce0 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800dc70:	6879      	ldr	r1, [r7, #4]
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	4613      	mov	r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4413      	add	r3, r2
 800dc7a:	00db      	lsls	r3, r3, #3
 800dc7c:	440b      	add	r3, r1
 800dc7e:	335c      	adds	r3, #92	; 0x5c
 800dc80:	2201      	movs	r2, #1
 800dc82:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800dc84:	6879      	ldr	r1, [r7, #4]
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	4413      	add	r3, r2
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	440b      	add	r3, r1
 800dc92:	333f      	adds	r3, #63	; 0x3f
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d00b      	beq.n	800dcb2 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4413      	add	r3, r2
 800dca4:	00db      	lsls	r3, r3, #3
 800dca6:	440b      	add	r3, r1
 800dca8:	333f      	adds	r3, #63	; 0x3f
 800dcaa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800dcac:	2b03      	cmp	r3, #3
 800dcae:	f040 80c5 	bne.w	800de3c <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800dcb2:	6879      	ldr	r1, [r7, #4]
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	009b      	lsls	r3, r3, #2
 800dcba:	4413      	add	r3, r2
 800dcbc:	00db      	lsls	r3, r3, #3
 800dcbe:	440b      	add	r3, r1
 800dcc0:	3351      	adds	r3, #81	; 0x51
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	f083 0301 	eor.w	r3, r3, #1
 800dcc8:	b2d8      	uxtb	r0, r3
 800dcca:	6879      	ldr	r1, [r7, #4]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4413      	add	r3, r2
 800dcd4:	00db      	lsls	r3, r3, #3
 800dcd6:	440b      	add	r3, r1
 800dcd8:	3351      	adds	r3, #81	; 0x51
 800dcda:	4602      	mov	r2, r0
 800dcdc:	701a      	strb	r2, [r3, #0]
 800dcde:	e0ad      	b.n	800de3c <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800dce0:	6879      	ldr	r1, [r7, #4]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	4613      	mov	r3, r2
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	4413      	add	r3, r2
 800dcea:	00db      	lsls	r3, r3, #3
 800dcec:	440b      	add	r3, r1
 800dcee:	335d      	adds	r3, #93	; 0x5d
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	d10a      	bne.n	800dd0c <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800dcf6:	6879      	ldr	r1, [r7, #4]
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4413      	add	r3, r2
 800dd00:	00db      	lsls	r3, r3, #3
 800dd02:	440b      	add	r3, r1
 800dd04:	335c      	adds	r3, #92	; 0x5c
 800dd06:	2202      	movs	r2, #2
 800dd08:	701a      	strb	r2, [r3, #0]
 800dd0a:	e097      	b.n	800de3c <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	4613      	mov	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	4413      	add	r3, r2
 800dd16:	00db      	lsls	r3, r3, #3
 800dd18:	440b      	add	r3, r1
 800dd1a:	335d      	adds	r3, #93	; 0x5d
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	2b04      	cmp	r3, #4
 800dd20:	d10a      	bne.n	800dd38 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800dd22:	6879      	ldr	r1, [r7, #4]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	4613      	mov	r3, r2
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	4413      	add	r3, r2
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	440b      	add	r3, r1
 800dd30:	335c      	adds	r3, #92	; 0x5c
 800dd32:	2202      	movs	r2, #2
 800dd34:	701a      	strb	r2, [r3, #0]
 800dd36:	e081      	b.n	800de3c <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800dd38:	6879      	ldr	r1, [r7, #4]
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	00db      	lsls	r3, r3, #3
 800dd44:	440b      	add	r3, r1
 800dd46:	335d      	adds	r3, #93	; 0x5d
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b05      	cmp	r3, #5
 800dd4c:	d10a      	bne.n	800dd64 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800dd4e:	6879      	ldr	r1, [r7, #4]
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	4613      	mov	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	00db      	lsls	r3, r3, #3
 800dd5a:	440b      	add	r3, r1
 800dd5c:	335c      	adds	r3, #92	; 0x5c
 800dd5e:	2205      	movs	r2, #5
 800dd60:	701a      	strb	r2, [r3, #0]
 800dd62:	e06b      	b.n	800de3c <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800dd64:	6879      	ldr	r1, [r7, #4]
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	4613      	mov	r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4413      	add	r3, r2
 800dd6e:	00db      	lsls	r3, r3, #3
 800dd70:	440b      	add	r3, r1
 800dd72:	335d      	adds	r3, #93	; 0x5d
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	2b06      	cmp	r3, #6
 800dd78:	d00a      	beq.n	800dd90 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800dd7a:	6879      	ldr	r1, [r7, #4]
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	4613      	mov	r3, r2
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	4413      	add	r3, r2
 800dd84:	00db      	lsls	r3, r3, #3
 800dd86:	440b      	add	r3, r1
 800dd88:	335d      	adds	r3, #93	; 0x5d
 800dd8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800dd8c:	2b08      	cmp	r3, #8
 800dd8e:	d155      	bne.n	800de3c <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800dd90:	6879      	ldr	r1, [r7, #4]
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	4613      	mov	r3, r2
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	00db      	lsls	r3, r3, #3
 800dd9c:	440b      	add	r3, r1
 800dd9e:	3358      	adds	r3, #88	; 0x58
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	1c59      	adds	r1, r3, #1
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	00db      	lsls	r3, r3, #3
 800ddb0:	4403      	add	r3, r0
 800ddb2:	3358      	adds	r3, #88	; 0x58
 800ddb4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800ddb6:	6879      	ldr	r1, [r7, #4]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	4413      	add	r3, r2
 800ddc0:	00db      	lsls	r3, r3, #3
 800ddc2:	440b      	add	r3, r1
 800ddc4:	3358      	adds	r3, #88	; 0x58
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b03      	cmp	r3, #3
 800ddca:	d914      	bls.n	800ddf6 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800ddcc:	6879      	ldr	r1, [r7, #4]
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	4413      	add	r3, r2
 800ddd6:	00db      	lsls	r3, r3, #3
 800ddd8:	440b      	add	r3, r1
 800ddda:	3358      	adds	r3, #88	; 0x58
 800dddc:	2200      	movs	r2, #0
 800ddde:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800dde0:	6879      	ldr	r1, [r7, #4]
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	4613      	mov	r3, r2
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	4413      	add	r3, r2
 800ddea:	00db      	lsls	r3, r3, #3
 800ddec:	440b      	add	r3, r1
 800ddee:	335c      	adds	r3, #92	; 0x5c
 800ddf0:	2204      	movs	r2, #4
 800ddf2:	701a      	strb	r2, [r3, #0]
 800ddf4:	e009      	b.n	800de0a <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	4413      	add	r3, r2
 800de00:	00db      	lsls	r3, r3, #3
 800de02:	440b      	add	r3, r1
 800de04:	335c      	adds	r3, #92	; 0x5c
 800de06:	2202      	movs	r2, #2
 800de08:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	015a      	lsls	r2, r3, #5
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	4413      	add	r3, r2
 800de12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800de20:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de28:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	015a      	lsls	r2, r3, #5
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	4413      	add	r3, r2
 800de32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de36:	461a      	mov	r2, r3
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	015a      	lsls	r2, r3, #5
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	4413      	add	r3, r2
 800de44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de48:	461a      	mov	r2, r3
 800de4a:	2302      	movs	r3, #2
 800de4c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	b2d8      	uxtb	r0, r3
 800de52:	6879      	ldr	r1, [r7, #4]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	4613      	mov	r3, r2
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	440b      	add	r3, r1
 800de60:	335c      	adds	r3, #92	; 0x5c
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	461a      	mov	r2, r3
 800de66:	4601      	mov	r1, r0
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f009 ff2b 	bl	8017cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800de6e:	bf00      	nop
 800de70:	3718      	adds	r7, #24
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
	...

0800de78 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b08a      	sub	sp, #40	; 0x28
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de88:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	6a1b      	ldr	r3, [r3, #32]
 800de90:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	f003 030f 	and.w	r3, r3, #15
 800de98:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	0c5b      	lsrs	r3, r3, #17
 800de9e:	f003 030f 	and.w	r3, r3, #15
 800dea2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	091b      	lsrs	r3, r3, #4
 800dea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800deac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	d003      	beq.n	800debc <HCD_RXQLVL_IRQHandler+0x44>
 800deb4:	2b05      	cmp	r3, #5
 800deb6:	f000 8082 	beq.w	800dfbe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800deba:	e083      	b.n	800dfc4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d07f      	beq.n	800dfc2 <HCD_RXQLVL_IRQHandler+0x14a>
 800dec2:	6879      	ldr	r1, [r7, #4]
 800dec4:	69ba      	ldr	r2, [r7, #24]
 800dec6:	4613      	mov	r3, r2
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	4413      	add	r3, r2
 800decc:	00db      	lsls	r3, r3, #3
 800dece:	440b      	add	r3, r1
 800ded0:	3344      	adds	r3, #68	; 0x44
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d074      	beq.n	800dfc2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6818      	ldr	r0, [r3, #0]
 800dedc:	6879      	ldr	r1, [r7, #4]
 800dede:	69ba      	ldr	r2, [r7, #24]
 800dee0:	4613      	mov	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4413      	add	r3, r2
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	440b      	add	r3, r1
 800deea:	3344      	adds	r3, #68	; 0x44
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	693a      	ldr	r2, [r7, #16]
 800def0:	b292      	uxth	r2, r2
 800def2:	4619      	mov	r1, r3
 800def4:	f002 fa31 	bl	801035a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800def8:	6879      	ldr	r1, [r7, #4]
 800defa:	69ba      	ldr	r2, [r7, #24]
 800defc:	4613      	mov	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4413      	add	r3, r2
 800df02:	00db      	lsls	r3, r3, #3
 800df04:	440b      	add	r3, r1
 800df06:	3344      	adds	r3, #68	; 0x44
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	18d1      	adds	r1, r2, r3
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	69ba      	ldr	r2, [r7, #24]
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	4403      	add	r3, r0
 800df1c:	3344      	adds	r3, #68	; 0x44
 800df1e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800df20:	6879      	ldr	r1, [r7, #4]
 800df22:	69ba      	ldr	r2, [r7, #24]
 800df24:	4613      	mov	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4413      	add	r3, r2
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	440b      	add	r3, r1
 800df2e:	334c      	adds	r3, #76	; 0x4c
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	18d1      	adds	r1, r2, r3
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	69ba      	ldr	r2, [r7, #24]
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	4403      	add	r3, r0
 800df44:	334c      	adds	r3, #76	; 0x4c
 800df46:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	015a      	lsls	r2, r3, #5
 800df4c:	6a3b      	ldr	r3, [r7, #32]
 800df4e:	4413      	add	r3, r2
 800df50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df54:	691a      	ldr	r2, [r3, #16]
 800df56:	4b1d      	ldr	r3, [pc, #116]	; (800dfcc <HCD_RXQLVL_IRQHandler+0x154>)
 800df58:	4013      	ands	r3, r2
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d031      	beq.n	800dfc2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	015a      	lsls	r2, r3, #5
 800df62:	6a3b      	ldr	r3, [r7, #32]
 800df64:	4413      	add	r3, r2
 800df66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800df74:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df7c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	015a      	lsls	r2, r3, #5
 800df82:	6a3b      	ldr	r3, [r7, #32]
 800df84:	4413      	add	r3, r2
 800df86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df8a:	461a      	mov	r2, r3
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800df90:	6879      	ldr	r1, [r7, #4]
 800df92:	69ba      	ldr	r2, [r7, #24]
 800df94:	4613      	mov	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4413      	add	r3, r2
 800df9a:	00db      	lsls	r3, r3, #3
 800df9c:	440b      	add	r3, r1
 800df9e:	3350      	adds	r3, #80	; 0x50
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	f083 0301 	eor.w	r3, r3, #1
 800dfa6:	b2d8      	uxtb	r0, r3
 800dfa8:	6879      	ldr	r1, [r7, #4]
 800dfaa:	69ba      	ldr	r2, [r7, #24]
 800dfac:	4613      	mov	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	4413      	add	r3, r2
 800dfb2:	00db      	lsls	r3, r3, #3
 800dfb4:	440b      	add	r3, r1
 800dfb6:	3350      	adds	r3, #80	; 0x50
 800dfb8:	4602      	mov	r2, r0
 800dfba:	701a      	strb	r2, [r3, #0]
      break;
 800dfbc:	e001      	b.n	800dfc2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800dfbe:	bf00      	nop
 800dfc0:	e000      	b.n	800dfc4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800dfc2:	bf00      	nop
  }
}
 800dfc4:	bf00      	nop
 800dfc6:	3728      	adds	r7, #40	; 0x28
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	1ff80000 	.word	0x1ff80000

0800dfd0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800dffc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f003 0302 	and.w	r3, r3, #2
 800e004:	2b02      	cmp	r3, #2
 800e006:	d113      	bne.n	800e030 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f003 0301 	and.w	r3, r3, #1
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d10a      	bne.n	800e028 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	699a      	ldr	r2, [r3, #24]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800e020:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f009 fe32 	bl	8017c8c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	f043 0302 	orr.w	r3, r3, #2
 800e02e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f003 0308 	and.w	r3, r3, #8
 800e036:	2b08      	cmp	r3, #8
 800e038:	d147      	bne.n	800e0ca <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	f043 0308 	orr.w	r3, r3, #8
 800e040:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f003 0304 	and.w	r3, r3, #4
 800e048:	2b04      	cmp	r3, #4
 800e04a:	d129      	bne.n	800e0a0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	699b      	ldr	r3, [r3, #24]
 800e050:	2b02      	cmp	r3, #2
 800e052:	d113      	bne.n	800e07c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800e05a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e05e:	d106      	bne.n	800e06e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2102      	movs	r1, #2
 800e066:	4618      	mov	r0, r3
 800e068:	f002 fa74 	bl	8010554 <USB_InitFSLSPClkSel>
 800e06c:	e011      	b.n	800e092 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2101      	movs	r1, #1
 800e074:	4618      	mov	r0, r3
 800e076:	f002 fa6d 	bl	8010554 <USB_InitFSLSPClkSel>
 800e07a:	e00a      	b.n	800e092 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d106      	bne.n	800e092 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e08a:	461a      	mov	r2, r3
 800e08c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e090:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f009 fe28 	bl	8017ce8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f009 fdf7 	bl	8017c8c <HAL_HCD_Connect_Callback>
 800e09e:	e014      	b.n	800e0ca <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f009 fe2f 	bl	8017d04 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	693a      	ldr	r2, [r7, #16]
 800e0b0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e0b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e0b8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	699a      	ldr	r2, [r3, #24]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e0c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f003 0320 	and.w	r3, r3, #32
 800e0d0:	2b20      	cmp	r3, #32
 800e0d2:	d103      	bne.n	800e0dc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	f043 0320 	orr.w	r3, r3, #32
 800e0da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	6013      	str	r3, [r2, #0]
}
 800e0e8:	bf00      	nop
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e0f4:	4b05      	ldr	r3, [pc, #20]	; (800e10c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a04      	ldr	r2, [pc, #16]	; (800e10c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e0fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0fe:	6013      	str	r3, [r2, #0]
}
 800e100:	bf00      	nop
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	40007000 	.word	0x40007000

0800e110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e110:	b480      	push	{r7}
 800e112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800e114:	4b04      	ldr	r3, [pc, #16]	; (800e128 <HAL_PWREx_GetVoltageRange+0x18>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	40007000 	.word	0x40007000

0800e12c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b085      	sub	sp, #20
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e13a:	d130      	bne.n	800e19e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800e13c:	4b23      	ldr	r3, [pc, #140]	; (800e1cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e148:	d038      	beq.n	800e1bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e14a:	4b20      	ldr	r3, [pc, #128]	; (800e1cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e152:	4a1e      	ldr	r2, [pc, #120]	; (800e1cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e15a:	4b1d      	ldr	r3, [pc, #116]	; (800e1d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2232      	movs	r2, #50	; 0x32
 800e160:	fb02 f303 	mul.w	r3, r2, r3
 800e164:	4a1b      	ldr	r2, [pc, #108]	; (800e1d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e166:	fba2 2303 	umull	r2, r3, r2, r3
 800e16a:	0c9b      	lsrs	r3, r3, #18
 800e16c:	3301      	adds	r3, #1
 800e16e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e170:	e002      	b.n	800e178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	3b01      	subs	r3, #1
 800e176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e178:	4b14      	ldr	r3, [pc, #80]	; (800e1cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e184:	d102      	bne.n	800e18c <HAL_PWREx_ControlVoltageScaling+0x60>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1f2      	bne.n	800e172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e18c:	4b0f      	ldr	r3, [pc, #60]	; (800e1cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e18e:	695b      	ldr	r3, [r3, #20]
 800e190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e198:	d110      	bne.n	800e1bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800e19a:	2303      	movs	r3, #3
 800e19c:	e00f      	b.n	800e1be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800e19e:	4b0b      	ldr	r3, [pc, #44]	; (800e1cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e1a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1aa:	d007      	beq.n	800e1bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e1ac:	4b07      	ldr	r3, [pc, #28]	; (800e1cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e1b4:	4a05      	ldr	r2, [pc, #20]	; (800e1cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e1b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e1ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3714      	adds	r7, #20
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	40007000 	.word	0x40007000
 800e1d0:	20000054 	.word	0x20000054
 800e1d4:	431bde83 	.word	0x431bde83

0800e1d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800e1dc:	4b05      	ldr	r3, [pc, #20]	; (800e1f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	4a04      	ldr	r2, [pc, #16]	; (800e1f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800e1e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e1e6:	6053      	str	r3, [r2, #4]
}
 800e1e8:	bf00      	nop
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	40007000 	.word	0x40007000

0800e1f8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800e1fc:	4b05      	ldr	r3, [pc, #20]	; (800e214 <HAL_PWREx_EnableVddIO2+0x1c>)
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	4a04      	ldr	r2, [pc, #16]	; (800e214 <HAL_PWREx_EnableVddIO2+0x1c>)
 800e202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e206:	6053      	str	r3, [r2, #4]
}
 800e208:	bf00      	nop
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	40007000 	.word	0x40007000

0800e218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b088      	sub	sp, #32
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	e3db      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e22a:	4ba4      	ldr	r3, [pc, #656]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	f003 030c 	and.w	r3, r3, #12
 800e232:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e234:	4ba1      	ldr	r3, [pc, #644]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	f003 0303 	and.w	r3, r3, #3
 800e23c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f003 0310 	and.w	r3, r3, #16
 800e246:	2b00      	cmp	r3, #0
 800e248:	f000 80e1 	beq.w	800e40e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d007      	beq.n	800e262 <HAL_RCC_OscConfig+0x4a>
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	2b0c      	cmp	r3, #12
 800e256:	f040 8088 	bne.w	800e36a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	f040 8084 	bne.w	800e36a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e262:	4b96      	ldr	r3, [pc, #600]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 0302 	and.w	r3, r3, #2
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d005      	beq.n	800e27a <HAL_RCC_OscConfig+0x62>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	e3b3      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a1a      	ldr	r2, [r3, #32]
 800e27e:	4b8f      	ldr	r3, [pc, #572]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f003 0308 	and.w	r3, r3, #8
 800e286:	2b00      	cmp	r3, #0
 800e288:	d004      	beq.n	800e294 <HAL_RCC_OscConfig+0x7c>
 800e28a:	4b8c      	ldr	r3, [pc, #560]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e292:	e005      	b.n	800e2a0 <HAL_RCC_OscConfig+0x88>
 800e294:	4b89      	ldr	r3, [pc, #548]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e29a:	091b      	lsrs	r3, r3, #4
 800e29c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d223      	bcs.n	800e2ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6a1b      	ldr	r3, [r3, #32]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f000 fd47 	bl	800ed3c <RCC_SetFlashLatencyFromMSIRange>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d001      	beq.n	800e2b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	e394      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e2b8:	4b80      	ldr	r3, [pc, #512]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a7f      	ldr	r2, [pc, #508]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e2be:	f043 0308 	orr.w	r3, r3, #8
 800e2c2:	6013      	str	r3, [r2, #0]
 800e2c4:	4b7d      	ldr	r3, [pc, #500]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6a1b      	ldr	r3, [r3, #32]
 800e2d0:	497a      	ldr	r1, [pc, #488]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e2d6:	4b79      	ldr	r3, [pc, #484]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	69db      	ldr	r3, [r3, #28]
 800e2e2:	021b      	lsls	r3, r3, #8
 800e2e4:	4975      	ldr	r1, [pc, #468]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	604b      	str	r3, [r1, #4]
 800e2ea:	e022      	b.n	800e332 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e2ec:	4b73      	ldr	r3, [pc, #460]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a72      	ldr	r2, [pc, #456]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e2f2:	f043 0308 	orr.w	r3, r3, #8
 800e2f6:	6013      	str	r3, [r2, #0]
 800e2f8:	4b70      	ldr	r3, [pc, #448]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a1b      	ldr	r3, [r3, #32]
 800e304:	496d      	ldr	r1, [pc, #436]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e306:	4313      	orrs	r3, r2
 800e308:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e30a:	4b6c      	ldr	r3, [pc, #432]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	69db      	ldr	r3, [r3, #28]
 800e316:	021b      	lsls	r3, r3, #8
 800e318:	4968      	ldr	r1, [pc, #416]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e31a:	4313      	orrs	r3, r2
 800e31c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6a1b      	ldr	r3, [r3, #32]
 800e322:	4618      	mov	r0, r3
 800e324:	f000 fd0a 	bl	800ed3c <RCC_SetFlashLatencyFromMSIRange>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d001      	beq.n	800e332 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e357      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e332:	f000 fc41 	bl	800ebb8 <HAL_RCC_GetSysClockFreq>
 800e336:	4601      	mov	r1, r0
 800e338:	4b60      	ldr	r3, [pc, #384]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	091b      	lsrs	r3, r3, #4
 800e33e:	f003 030f 	and.w	r3, r3, #15
 800e342:	4a5f      	ldr	r2, [pc, #380]	; (800e4c0 <HAL_RCC_OscConfig+0x2a8>)
 800e344:	5cd3      	ldrb	r3, [r2, r3]
 800e346:	f003 031f 	and.w	r3, r3, #31
 800e34a:	fa21 f303 	lsr.w	r3, r1, r3
 800e34e:	4a5d      	ldr	r2, [pc, #372]	; (800e4c4 <HAL_RCC_OscConfig+0x2ac>)
 800e350:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800e352:	4b5d      	ldr	r3, [pc, #372]	; (800e4c8 <HAL_RCC_OscConfig+0x2b0>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4618      	mov	r0, r3
 800e358:	f7fd ff70 	bl	800c23c <HAL_InitTick>
 800e35c:	4603      	mov	r3, r0
 800e35e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800e360:	7bfb      	ldrb	r3, [r7, #15]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d052      	beq.n	800e40c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800e366:	7bfb      	ldrb	r3, [r7, #15]
 800e368:	e33b      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	699b      	ldr	r3, [r3, #24]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d032      	beq.n	800e3d8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e372:	4b52      	ldr	r3, [pc, #328]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a51      	ldr	r2, [pc, #324]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e378:	f043 0301 	orr.w	r3, r3, #1
 800e37c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e37e:	f7fd ffa9 	bl	800c2d4 <HAL_GetTick>
 800e382:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e384:	e008      	b.n	800e398 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e386:	f7fd ffa5 	bl	800c2d4 <HAL_GetTick>
 800e38a:	4602      	mov	r2, r0
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	2b02      	cmp	r3, #2
 800e392:	d901      	bls.n	800e398 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800e394:	2303      	movs	r3, #3
 800e396:	e324      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e398:	4b48      	ldr	r3, [pc, #288]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f003 0302 	and.w	r3, r3, #2
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d0f0      	beq.n	800e386 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e3a4:	4b45      	ldr	r3, [pc, #276]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a44      	ldr	r2, [pc, #272]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e3aa:	f043 0308 	orr.w	r3, r3, #8
 800e3ae:	6013      	str	r3, [r2, #0]
 800e3b0:	4b42      	ldr	r3, [pc, #264]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6a1b      	ldr	r3, [r3, #32]
 800e3bc:	493f      	ldr	r1, [pc, #252]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e3c2:	4b3e      	ldr	r3, [pc, #248]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	69db      	ldr	r3, [r3, #28]
 800e3ce:	021b      	lsls	r3, r3, #8
 800e3d0:	493a      	ldr	r1, [pc, #232]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	604b      	str	r3, [r1, #4]
 800e3d6:	e01a      	b.n	800e40e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e3d8:	4b38      	ldr	r3, [pc, #224]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a37      	ldr	r2, [pc, #220]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e3de:	f023 0301 	bic.w	r3, r3, #1
 800e3e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e3e4:	f7fd ff76 	bl	800c2d4 <HAL_GetTick>
 800e3e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800e3ea:	e008      	b.n	800e3fe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e3ec:	f7fd ff72 	bl	800c2d4 <HAL_GetTick>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	1ad3      	subs	r3, r2, r3
 800e3f6:	2b02      	cmp	r3, #2
 800e3f8:	d901      	bls.n	800e3fe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800e3fa:	2303      	movs	r3, #3
 800e3fc:	e2f1      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800e3fe:	4b2f      	ldr	r3, [pc, #188]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f003 0302 	and.w	r3, r3, #2
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1f0      	bne.n	800e3ec <HAL_RCC_OscConfig+0x1d4>
 800e40a:	e000      	b.n	800e40e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e40c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f003 0301 	and.w	r3, r3, #1
 800e416:	2b00      	cmp	r3, #0
 800e418:	d074      	beq.n	800e504 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	2b08      	cmp	r3, #8
 800e41e:	d005      	beq.n	800e42c <HAL_RCC_OscConfig+0x214>
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	2b0c      	cmp	r3, #12
 800e424:	d10e      	bne.n	800e444 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	2b03      	cmp	r3, #3
 800e42a:	d10b      	bne.n	800e444 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e42c:	4b23      	ldr	r3, [pc, #140]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e434:	2b00      	cmp	r3, #0
 800e436:	d064      	beq.n	800e502 <HAL_RCC_OscConfig+0x2ea>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d160      	bne.n	800e502 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	e2ce      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e44c:	d106      	bne.n	800e45c <HAL_RCC_OscConfig+0x244>
 800e44e:	4b1b      	ldr	r3, [pc, #108]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a1a      	ldr	r2, [pc, #104]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e458:	6013      	str	r3, [r2, #0]
 800e45a:	e01d      	b.n	800e498 <HAL_RCC_OscConfig+0x280>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e464:	d10c      	bne.n	800e480 <HAL_RCC_OscConfig+0x268>
 800e466:	4b15      	ldr	r3, [pc, #84]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a14      	ldr	r2, [pc, #80]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e46c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e470:	6013      	str	r3, [r2, #0]
 800e472:	4b12      	ldr	r3, [pc, #72]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a11      	ldr	r2, [pc, #68]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e47c:	6013      	str	r3, [r2, #0]
 800e47e:	e00b      	b.n	800e498 <HAL_RCC_OscConfig+0x280>
 800e480:	4b0e      	ldr	r3, [pc, #56]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4a0d      	ldr	r2, [pc, #52]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e48a:	6013      	str	r3, [r2, #0]
 800e48c:	4b0b      	ldr	r3, [pc, #44]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a0a      	ldr	r2, [pc, #40]	; (800e4bc <HAL_RCC_OscConfig+0x2a4>)
 800e492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d01c      	beq.n	800e4da <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4a0:	f7fd ff18 	bl	800c2d4 <HAL_GetTick>
 800e4a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e4a6:	e011      	b.n	800e4cc <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e4a8:	f7fd ff14 	bl	800c2d4 <HAL_GetTick>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	1ad3      	subs	r3, r2, r3
 800e4b2:	2b64      	cmp	r3, #100	; 0x64
 800e4b4:	d90a      	bls.n	800e4cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800e4b6:	2303      	movs	r3, #3
 800e4b8:	e293      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
 800e4ba:	bf00      	nop
 800e4bc:	40021000 	.word	0x40021000
 800e4c0:	0801a7ec 	.word	0x0801a7ec
 800e4c4:	20000054 	.word	0x20000054
 800e4c8:	20000028 	.word	0x20000028
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e4cc:	4bae      	ldr	r3, [pc, #696]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d0e7      	beq.n	800e4a8 <HAL_RCC_OscConfig+0x290>
 800e4d8:	e014      	b.n	800e504 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4da:	f7fd fefb 	bl	800c2d4 <HAL_GetTick>
 800e4de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e4e0:	e008      	b.n	800e4f4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e4e2:	f7fd fef7 	bl	800c2d4 <HAL_GetTick>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	2b64      	cmp	r3, #100	; 0x64
 800e4ee:	d901      	bls.n	800e4f4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800e4f0:	2303      	movs	r3, #3
 800e4f2:	e276      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e4f4:	4ba4      	ldr	r3, [pc, #656]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1f0      	bne.n	800e4e2 <HAL_RCC_OscConfig+0x2ca>
 800e500:	e000      	b.n	800e504 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e502:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f003 0302 	and.w	r3, r3, #2
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d060      	beq.n	800e5d2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	2b04      	cmp	r3, #4
 800e514:	d005      	beq.n	800e522 <HAL_RCC_OscConfig+0x30a>
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	2b0c      	cmp	r3, #12
 800e51a:	d119      	bne.n	800e550 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d116      	bne.n	800e550 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e522:	4b99      	ldr	r3, [pc, #612]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d005      	beq.n	800e53a <HAL_RCC_OscConfig+0x322>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d101      	bne.n	800e53a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800e536:	2301      	movs	r3, #1
 800e538:	e253      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e53a:	4b93      	ldr	r3, [pc, #588]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	691b      	ldr	r3, [r3, #16]
 800e546:	061b      	lsls	r3, r3, #24
 800e548:	498f      	ldr	r1, [pc, #572]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e54a:	4313      	orrs	r3, r2
 800e54c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e54e:	e040      	b.n	800e5d2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d023      	beq.n	800e5a0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e558:	4b8b      	ldr	r3, [pc, #556]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a8a      	ldr	r2, [pc, #552]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e55e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e564:	f7fd feb6 	bl	800c2d4 <HAL_GetTick>
 800e568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e56a:	e008      	b.n	800e57e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e56c:	f7fd feb2 	bl	800c2d4 <HAL_GetTick>
 800e570:	4602      	mov	r2, r0
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	2b02      	cmp	r3, #2
 800e578:	d901      	bls.n	800e57e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800e57a:	2303      	movs	r3, #3
 800e57c:	e231      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e57e:	4b82      	ldr	r3, [pc, #520]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e586:	2b00      	cmp	r3, #0
 800e588:	d0f0      	beq.n	800e56c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e58a:	4b7f      	ldr	r3, [pc, #508]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	691b      	ldr	r3, [r3, #16]
 800e596:	061b      	lsls	r3, r3, #24
 800e598:	497b      	ldr	r1, [pc, #492]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e59a:	4313      	orrs	r3, r2
 800e59c:	604b      	str	r3, [r1, #4]
 800e59e:	e018      	b.n	800e5d2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e5a0:	4b79      	ldr	r3, [pc, #484]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a78      	ldr	r2, [pc, #480]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e5a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5ac:	f7fd fe92 	bl	800c2d4 <HAL_GetTick>
 800e5b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e5b2:	e008      	b.n	800e5c6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e5b4:	f7fd fe8e 	bl	800c2d4 <HAL_GetTick>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	1ad3      	subs	r3, r2, r3
 800e5be:	2b02      	cmp	r3, #2
 800e5c0:	d901      	bls.n	800e5c6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	e20d      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e5c6:	4b70      	ldr	r3, [pc, #448]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1f0      	bne.n	800e5b4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f003 0308 	and.w	r3, r3, #8
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d03c      	beq.n	800e658 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	695b      	ldr	r3, [r3, #20]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d01c      	beq.n	800e620 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e5e6:	4b68      	ldr	r3, [pc, #416]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e5e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5ec:	4a66      	ldr	r2, [pc, #408]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e5ee:	f043 0301 	orr.w	r3, r3, #1
 800e5f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5f6:	f7fd fe6d 	bl	800c2d4 <HAL_GetTick>
 800e5fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e5fc:	e008      	b.n	800e610 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e5fe:	f7fd fe69 	bl	800c2d4 <HAL_GetTick>
 800e602:	4602      	mov	r2, r0
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	1ad3      	subs	r3, r2, r3
 800e608:	2b02      	cmp	r3, #2
 800e60a:	d901      	bls.n	800e610 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800e60c:	2303      	movs	r3, #3
 800e60e:	e1e8      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e610:	4b5d      	ldr	r3, [pc, #372]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e616:	f003 0302 	and.w	r3, r3, #2
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d0ef      	beq.n	800e5fe <HAL_RCC_OscConfig+0x3e6>
 800e61e:	e01b      	b.n	800e658 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e620:	4b59      	ldr	r3, [pc, #356]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e626:	4a58      	ldr	r2, [pc, #352]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e628:	f023 0301 	bic.w	r3, r3, #1
 800e62c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e630:	f7fd fe50 	bl	800c2d4 <HAL_GetTick>
 800e634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e636:	e008      	b.n	800e64a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e638:	f7fd fe4c 	bl	800c2d4 <HAL_GetTick>
 800e63c:	4602      	mov	r2, r0
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	2b02      	cmp	r3, #2
 800e644:	d901      	bls.n	800e64a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800e646:	2303      	movs	r3, #3
 800e648:	e1cb      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e64a:	4b4f      	ldr	r3, [pc, #316]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e64c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e650:	f003 0302 	and.w	r3, r3, #2
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1ef      	bne.n	800e638 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 0304 	and.w	r3, r3, #4
 800e660:	2b00      	cmp	r3, #0
 800e662:	f000 80a5 	beq.w	800e7b0 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e666:	2300      	movs	r3, #0
 800e668:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800e66a:	4b47      	ldr	r3, [pc, #284]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e66e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10d      	bne.n	800e692 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e676:	4b44      	ldr	r3, [pc, #272]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e67a:	4a43      	ldr	r2, [pc, #268]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e67c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e680:	6593      	str	r3, [r2, #88]	; 0x58
 800e682:	4b41      	ldr	r3, [pc, #260]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e68a:	60bb      	str	r3, [r7, #8]
 800e68c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e68e:	2301      	movs	r3, #1
 800e690:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e692:	4b3e      	ldr	r3, [pc, #248]	; (800e78c <HAL_RCC_OscConfig+0x574>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d118      	bne.n	800e6d0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e69e:	4b3b      	ldr	r3, [pc, #236]	; (800e78c <HAL_RCC_OscConfig+0x574>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4a3a      	ldr	r2, [pc, #232]	; (800e78c <HAL_RCC_OscConfig+0x574>)
 800e6a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e6aa:	f7fd fe13 	bl	800c2d4 <HAL_GetTick>
 800e6ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e6b0:	e008      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e6b2:	f7fd fe0f 	bl	800c2d4 <HAL_GetTick>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d901      	bls.n	800e6c4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800e6c0:	2303      	movs	r3, #3
 800e6c2:	e18e      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e6c4:	4b31      	ldr	r3, [pc, #196]	; (800e78c <HAL_RCC_OscConfig+0x574>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d0f0      	beq.n	800e6b2 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d108      	bne.n	800e6ea <HAL_RCC_OscConfig+0x4d2>
 800e6d8:	4b2b      	ldr	r3, [pc, #172]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6de:	4a2a      	ldr	r2, [pc, #168]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e6e0:	f043 0301 	orr.w	r3, r3, #1
 800e6e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e6e8:	e024      	b.n	800e734 <HAL_RCC_OscConfig+0x51c>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	2b05      	cmp	r3, #5
 800e6f0:	d110      	bne.n	800e714 <HAL_RCC_OscConfig+0x4fc>
 800e6f2:	4b25      	ldr	r3, [pc, #148]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6f8:	4a23      	ldr	r2, [pc, #140]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e6fa:	f043 0304 	orr.w	r3, r3, #4
 800e6fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e702:	4b21      	ldr	r3, [pc, #132]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e708:	4a1f      	ldr	r2, [pc, #124]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e70a:	f043 0301 	orr.w	r3, r3, #1
 800e70e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e712:	e00f      	b.n	800e734 <HAL_RCC_OscConfig+0x51c>
 800e714:	4b1c      	ldr	r3, [pc, #112]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e71a:	4a1b      	ldr	r2, [pc, #108]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e71c:	f023 0301 	bic.w	r3, r3, #1
 800e720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e724:	4b18      	ldr	r3, [pc, #96]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e72a:	4a17      	ldr	r2, [pc, #92]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e72c:	f023 0304 	bic.w	r3, r3, #4
 800e730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d016      	beq.n	800e76a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e73c:	f7fd fdca 	bl	800c2d4 <HAL_GetTick>
 800e740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e742:	e00a      	b.n	800e75a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e744:	f7fd fdc6 	bl	800c2d4 <HAL_GetTick>
 800e748:	4602      	mov	r2, r0
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e752:	4293      	cmp	r3, r2
 800e754:	d901      	bls.n	800e75a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800e756:	2303      	movs	r3, #3
 800e758:	e143      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e75a:	4b0b      	ldr	r3, [pc, #44]	; (800e788 <HAL_RCC_OscConfig+0x570>)
 800e75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e760:	f003 0302 	and.w	r3, r3, #2
 800e764:	2b00      	cmp	r3, #0
 800e766:	d0ed      	beq.n	800e744 <HAL_RCC_OscConfig+0x52c>
 800e768:	e019      	b.n	800e79e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e76a:	f7fd fdb3 	bl	800c2d4 <HAL_GetTick>
 800e76e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e770:	e00e      	b.n	800e790 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e772:	f7fd fdaf 	bl	800c2d4 <HAL_GetTick>
 800e776:	4602      	mov	r2, r0
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e780:	4293      	cmp	r3, r2
 800e782:	d905      	bls.n	800e790 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800e784:	2303      	movs	r3, #3
 800e786:	e12c      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
 800e788:	40021000 	.word	0x40021000
 800e78c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e790:	4b96      	ldr	r3, [pc, #600]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e796:	f003 0302 	and.w	r3, r3, #2
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1e9      	bne.n	800e772 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e79e:	7ffb      	ldrb	r3, [r7, #31]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d105      	bne.n	800e7b0 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e7a4:	4b91      	ldr	r3, [pc, #580]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7a8:	4a90      	ldr	r2, [pc, #576]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e7aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f003 0320 	and.w	r3, r3, #32
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d03c      	beq.n	800e836 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d01c      	beq.n	800e7fe <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e7c4:	4b89      	ldr	r3, [pc, #548]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e7c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e7ca:	4a88      	ldr	r2, [pc, #544]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e7cc:	f043 0301 	orr.w	r3, r3, #1
 800e7d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7d4:	f7fd fd7e 	bl	800c2d4 <HAL_GetTick>
 800e7d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e7da:	e008      	b.n	800e7ee <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e7dc:	f7fd fd7a 	bl	800c2d4 <HAL_GetTick>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d901      	bls.n	800e7ee <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800e7ea:	2303      	movs	r3, #3
 800e7ec:	e0f9      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e7ee:	4b7f      	ldr	r3, [pc, #508]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e7f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e7f4:	f003 0302 	and.w	r3, r3, #2
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d0ef      	beq.n	800e7dc <HAL_RCC_OscConfig+0x5c4>
 800e7fc:	e01b      	b.n	800e836 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e7fe:	4b7b      	ldr	r3, [pc, #492]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e804:	4a79      	ldr	r2, [pc, #484]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e806:	f023 0301 	bic.w	r3, r3, #1
 800e80a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e80e:	f7fd fd61 	bl	800c2d4 <HAL_GetTick>
 800e812:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e814:	e008      	b.n	800e828 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e816:	f7fd fd5d 	bl	800c2d4 <HAL_GetTick>
 800e81a:	4602      	mov	r2, r0
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	2b02      	cmp	r3, #2
 800e822:	d901      	bls.n	800e828 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800e824:	2303      	movs	r3, #3
 800e826:	e0dc      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e828:	4b70      	ldr	r3, [pc, #448]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e82a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b00      	cmp	r3, #0
 800e834:	d1ef      	bne.n	800e816 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f000 80d0 	beq.w	800e9e0 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	2b0c      	cmp	r3, #12
 800e844:	f000 808d 	beq.w	800e962 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e84c:	2b02      	cmp	r3, #2
 800e84e:	d15a      	bne.n	800e906 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e850:	4b66      	ldr	r3, [pc, #408]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a65      	ldr	r2, [pc, #404]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e85a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e85c:	f7fd fd3a 	bl	800c2d4 <HAL_GetTick>
 800e860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e862:	e008      	b.n	800e876 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e864:	f7fd fd36 	bl	800c2d4 <HAL_GetTick>
 800e868:	4602      	mov	r2, r0
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	2b02      	cmp	r3, #2
 800e870:	d901      	bls.n	800e876 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800e872:	2303      	movs	r3, #3
 800e874:	e0b5      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e876:	4b5d      	ldr	r3, [pc, #372]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d1f0      	bne.n	800e864 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e882:	4b5a      	ldr	r3, [pc, #360]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e884:	68da      	ldr	r2, [r3, #12]
 800e886:	4b5a      	ldr	r3, [pc, #360]	; (800e9f0 <HAL_RCC_OscConfig+0x7d8>)
 800e888:	4013      	ands	r3, r2
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e892:	3a01      	subs	r2, #1
 800e894:	0112      	lsls	r2, r2, #4
 800e896:	4311      	orrs	r1, r2
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e89c:	0212      	lsls	r2, r2, #8
 800e89e:	4311      	orrs	r1, r2
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e8a4:	0852      	lsrs	r2, r2, #1
 800e8a6:	3a01      	subs	r2, #1
 800e8a8:	0552      	lsls	r2, r2, #21
 800e8aa:	4311      	orrs	r1, r2
 800e8ac:	687a      	ldr	r2, [r7, #4]
 800e8ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e8b0:	0852      	lsrs	r2, r2, #1
 800e8b2:	3a01      	subs	r2, #1
 800e8b4:	0652      	lsls	r2, r2, #25
 800e8b6:	4311      	orrs	r1, r2
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e8bc:	06d2      	lsls	r2, r2, #27
 800e8be:	430a      	orrs	r2, r1
 800e8c0:	494a      	ldr	r1, [pc, #296]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e8c6:	4b49      	ldr	r3, [pc, #292]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a48      	ldr	r2, [pc, #288]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e8cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e8d0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e8d2:	4b46      	ldr	r3, [pc, #280]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	4a45      	ldr	r2, [pc, #276]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e8d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e8dc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8de:	f7fd fcf9 	bl	800c2d4 <HAL_GetTick>
 800e8e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e8e4:	e008      	b.n	800e8f8 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e8e6:	f7fd fcf5 	bl	800c2d4 <HAL_GetTick>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	2b02      	cmp	r3, #2
 800e8f2:	d901      	bls.n	800e8f8 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	e074      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e8f8:	4b3c      	ldr	r3, [pc, #240]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d0f0      	beq.n	800e8e6 <HAL_RCC_OscConfig+0x6ce>
 800e904:	e06c      	b.n	800e9e0 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e906:	4b39      	ldr	r3, [pc, #228]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a38      	ldr	r2, [pc, #224]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e90c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e910:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800e912:	4b36      	ldr	r3, [pc, #216]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d105      	bne.n	800e92a <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800e91e:	4b33      	ldr	r3, [pc, #204]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	4a32      	ldr	r2, [pc, #200]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e924:	f023 0303 	bic.w	r3, r3, #3
 800e928:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800e92a:	4b30      	ldr	r3, [pc, #192]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	4a2f      	ldr	r2, [pc, #188]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e930:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800e934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e938:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e93a:	f7fd fccb 	bl	800c2d4 <HAL_GetTick>
 800e93e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e940:	e008      	b.n	800e954 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e942:	f7fd fcc7 	bl	800c2d4 <HAL_GetTick>
 800e946:	4602      	mov	r2, r0
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	2b02      	cmp	r3, #2
 800e94e:	d901      	bls.n	800e954 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800e950:	2303      	movs	r3, #3
 800e952:	e046      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e954:	4b25      	ldr	r3, [pc, #148]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1f0      	bne.n	800e942 <HAL_RCC_OscConfig+0x72a>
 800e960:	e03e      	b.n	800e9e0 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e966:	2b01      	cmp	r3, #1
 800e968:	d101      	bne.n	800e96e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	e039      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800e96e:	4b1f      	ldr	r3, [pc, #124]	; (800e9ec <HAL_RCC_OscConfig+0x7d4>)
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	f003 0203 	and.w	r2, r3, #3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e97e:	429a      	cmp	r2, r3
 800e980:	d12c      	bne.n	800e9dc <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98c:	3b01      	subs	r3, #1
 800e98e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e990:	429a      	cmp	r2, r3
 800e992:	d123      	bne.n	800e9dc <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d11b      	bne.n	800e9dc <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ae:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d113      	bne.n	800e9dc <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9be:	085b      	lsrs	r3, r3, #1
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d109      	bne.n	800e9dc <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9d2:	085b      	lsrs	r3, r3, #1
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d001      	beq.n	800e9e0 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	e000      	b.n	800e9e2 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3720      	adds	r7, #32
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	40021000 	.word	0x40021000
 800e9f0:	019d808c 	.word	0x019d808c

0800e9f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d101      	bne.n	800ea08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ea04:	2301      	movs	r3, #1
 800ea06:	e0c8      	b.n	800eb9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ea08:	4b66      	ldr	r3, [pc, #408]	; (800eba4 <HAL_RCC_ClockConfig+0x1b0>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f003 0307 	and.w	r3, r3, #7
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d910      	bls.n	800ea38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ea16:	4b63      	ldr	r3, [pc, #396]	; (800eba4 <HAL_RCC_ClockConfig+0x1b0>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f023 0207 	bic.w	r2, r3, #7
 800ea1e:	4961      	ldr	r1, [pc, #388]	; (800eba4 <HAL_RCC_ClockConfig+0x1b0>)
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ea26:	4b5f      	ldr	r3, [pc, #380]	; (800eba4 <HAL_RCC_ClockConfig+0x1b0>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f003 0307 	and.w	r3, r3, #7
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d001      	beq.n	800ea38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	e0b0      	b.n	800eb9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f003 0301 	and.w	r3, r3, #1
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d04c      	beq.n	800eade <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	2b03      	cmp	r3, #3
 800ea4a:	d107      	bne.n	800ea5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ea4c:	4b56      	ldr	r3, [pc, #344]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d121      	bne.n	800ea9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e09e      	b.n	800eb9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	2b02      	cmp	r3, #2
 800ea62:	d107      	bne.n	800ea74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ea64:	4b50      	ldr	r3, [pc, #320]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d115      	bne.n	800ea9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ea70:	2301      	movs	r3, #1
 800ea72:	e092      	b.n	800eb9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d107      	bne.n	800ea8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ea7c:	4b4a      	ldr	r3, [pc, #296]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f003 0302 	and.w	r3, r3, #2
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d109      	bne.n	800ea9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	e086      	b.n	800eb9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ea8c:	4b46      	ldr	r3, [pc, #280]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d101      	bne.n	800ea9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	e07e      	b.n	800eb9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ea9c:	4b42      	ldr	r3, [pc, #264]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	f023 0203 	bic.w	r2, r3, #3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	493f      	ldr	r1, [pc, #252]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eaae:	f7fd fc11 	bl	800c2d4 <HAL_GetTick>
 800eab2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eab4:	e00a      	b.n	800eacc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eab6:	f7fd fc0d 	bl	800c2d4 <HAL_GetTick>
 800eaba:	4602      	mov	r2, r0
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d901      	bls.n	800eacc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800eac8:	2303      	movs	r3, #3
 800eaca:	e066      	b.n	800eb9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eacc:	4b36      	ldr	r3, [pc, #216]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	f003 020c 	and.w	r2, r3, #12
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	009b      	lsls	r3, r3, #2
 800eada:	429a      	cmp	r2, r3
 800eadc:	d1eb      	bne.n	800eab6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f003 0302 	and.w	r3, r3, #2
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d008      	beq.n	800eafc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eaea:	4b2f      	ldr	r3, [pc, #188]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	492c      	ldr	r1, [pc, #176]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800eafc:	4b29      	ldr	r3, [pc, #164]	; (800eba4 <HAL_RCC_ClockConfig+0x1b0>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f003 0307 	and.w	r3, r3, #7
 800eb04:	683a      	ldr	r2, [r7, #0]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d210      	bcs.n	800eb2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb0a:	4b26      	ldr	r3, [pc, #152]	; (800eba4 <HAL_RCC_ClockConfig+0x1b0>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f023 0207 	bic.w	r2, r3, #7
 800eb12:	4924      	ldr	r1, [pc, #144]	; (800eba4 <HAL_RCC_ClockConfig+0x1b0>)
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	4313      	orrs	r3, r2
 800eb18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb1a:	4b22      	ldr	r3, [pc, #136]	; (800eba4 <HAL_RCC_ClockConfig+0x1b0>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f003 0307 	and.w	r3, r3, #7
 800eb22:	683a      	ldr	r2, [r7, #0]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d001      	beq.n	800eb2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e036      	b.n	800eb9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f003 0304 	and.w	r3, r3, #4
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d008      	beq.n	800eb4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eb38:	4b1b      	ldr	r3, [pc, #108]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	4918      	ldr	r1, [pc, #96]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800eb46:	4313      	orrs	r3, r2
 800eb48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f003 0308 	and.w	r3, r3, #8
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d009      	beq.n	800eb6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800eb56:	4b14      	ldr	r3, [pc, #80]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	691b      	ldr	r3, [r3, #16]
 800eb62:	00db      	lsls	r3, r3, #3
 800eb64:	4910      	ldr	r1, [pc, #64]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800eb66:	4313      	orrs	r3, r2
 800eb68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800eb6a:	f000 f825 	bl	800ebb8 <HAL_RCC_GetSysClockFreq>
 800eb6e:	4601      	mov	r1, r0
 800eb70:	4b0d      	ldr	r3, [pc, #52]	; (800eba8 <HAL_RCC_ClockConfig+0x1b4>)
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	091b      	lsrs	r3, r3, #4
 800eb76:	f003 030f 	and.w	r3, r3, #15
 800eb7a:	4a0c      	ldr	r2, [pc, #48]	; (800ebac <HAL_RCC_ClockConfig+0x1b8>)
 800eb7c:	5cd3      	ldrb	r3, [r2, r3]
 800eb7e:	f003 031f 	and.w	r3, r3, #31
 800eb82:	fa21 f303 	lsr.w	r3, r1, r3
 800eb86:	4a0a      	ldr	r2, [pc, #40]	; (800ebb0 <HAL_RCC_ClockConfig+0x1bc>)
 800eb88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800eb8a:	4b0a      	ldr	r3, [pc, #40]	; (800ebb4 <HAL_RCC_ClockConfig+0x1c0>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fd fb54 	bl	800c23c <HAL_InitTick>
 800eb94:	4603      	mov	r3, r0
 800eb96:	72fb      	strb	r3, [r7, #11]

  return status;
 800eb98:	7afb      	ldrb	r3, [r7, #11]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	40022000 	.word	0x40022000
 800eba8:	40021000 	.word	0x40021000
 800ebac:	0801a7ec 	.word	0x0801a7ec
 800ebb0:	20000054 	.word	0x20000054
 800ebb4:	20000028 	.word	0x20000028

0800ebb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b089      	sub	sp, #36	; 0x24
 800ebbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	61fb      	str	r3, [r7, #28]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ebc6:	4b3d      	ldr	r3, [pc, #244]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x104>)
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	f003 030c 	and.w	r3, r3, #12
 800ebce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ebd0:	4b3a      	ldr	r3, [pc, #232]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x104>)
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	f003 0303 	and.w	r3, r3, #3
 800ebd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d005      	beq.n	800ebec <HAL_RCC_GetSysClockFreq+0x34>
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	2b0c      	cmp	r3, #12
 800ebe4:	d121      	bne.n	800ec2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d11e      	bne.n	800ec2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ebec:	4b33      	ldr	r3, [pc, #204]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x104>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f003 0308 	and.w	r3, r3, #8
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d107      	bne.n	800ec08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ebf8:	4b30      	ldr	r3, [pc, #192]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x104>)
 800ebfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ebfe:	0a1b      	lsrs	r3, r3, #8
 800ec00:	f003 030f 	and.w	r3, r3, #15
 800ec04:	61fb      	str	r3, [r7, #28]
 800ec06:	e005      	b.n	800ec14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ec08:	4b2c      	ldr	r3, [pc, #176]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x104>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	091b      	lsrs	r3, r3, #4
 800ec0e:	f003 030f 	and.w	r3, r3, #15
 800ec12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ec14:	4a2a      	ldr	r2, [pc, #168]	; (800ecc0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d10d      	bne.n	800ec40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ec28:	e00a      	b.n	800ec40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	2b04      	cmp	r3, #4
 800ec2e:	d102      	bne.n	800ec36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ec30:	4b24      	ldr	r3, [pc, #144]	; (800ecc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ec32:	61bb      	str	r3, [r7, #24]
 800ec34:	e004      	b.n	800ec40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	2b08      	cmp	r3, #8
 800ec3a:	d101      	bne.n	800ec40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ec3c:	4b22      	ldr	r3, [pc, #136]	; (800ecc8 <HAL_RCC_GetSysClockFreq+0x110>)
 800ec3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	2b0c      	cmp	r3, #12
 800ec44:	d133      	bne.n	800ecae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ec46:	4b1d      	ldr	r3, [pc, #116]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x104>)
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	f003 0303 	and.w	r3, r3, #3
 800ec4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	2b02      	cmp	r3, #2
 800ec54:	d002      	beq.n	800ec5c <HAL_RCC_GetSysClockFreq+0xa4>
 800ec56:	2b03      	cmp	r3, #3
 800ec58:	d003      	beq.n	800ec62 <HAL_RCC_GetSysClockFreq+0xaa>
 800ec5a:	e005      	b.n	800ec68 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ec5c:	4b19      	ldr	r3, [pc, #100]	; (800ecc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ec5e:	617b      	str	r3, [r7, #20]
      break;
 800ec60:	e005      	b.n	800ec6e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ec62:	4b19      	ldr	r3, [pc, #100]	; (800ecc8 <HAL_RCC_GetSysClockFreq+0x110>)
 800ec64:	617b      	str	r3, [r7, #20]
      break;
 800ec66:	e002      	b.n	800ec6e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	617b      	str	r3, [r7, #20]
      break;
 800ec6c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ec6e:	4b13      	ldr	r3, [pc, #76]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x104>)
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	091b      	lsrs	r3, r3, #4
 800ec74:	f003 0307 	and.w	r3, r3, #7
 800ec78:	3301      	adds	r3, #1
 800ec7a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ec7c:	4b0f      	ldr	r3, [pc, #60]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x104>)
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	0a1b      	lsrs	r3, r3, #8
 800ec82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec86:	697a      	ldr	r2, [r7, #20]
 800ec88:	fb02 f203 	mul.w	r2, r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec92:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ec94:	4b09      	ldr	r3, [pc, #36]	; (800ecbc <HAL_RCC_GetSysClockFreq+0x104>)
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	0e5b      	lsrs	r3, r3, #25
 800ec9a:	f003 0303 	and.w	r3, r3, #3
 800ec9e:	3301      	adds	r3, #1
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800eca4:	697a      	ldr	r2, [r7, #20]
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ecae:	69bb      	ldr	r3, [r7, #24]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3724      	adds	r7, #36	; 0x24
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	40021000 	.word	0x40021000
 800ecc0:	0801a804 	.word	0x0801a804
 800ecc4:	00f42400 	.word	0x00f42400
 800ecc8:	007a1200 	.word	0x007a1200

0800eccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eccc:	b480      	push	{r7}
 800ecce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ecd0:	4b03      	ldr	r3, [pc, #12]	; (800ece0 <HAL_RCC_GetHCLKFreq+0x14>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop
 800ece0:	20000054 	.word	0x20000054

0800ece4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ece8:	f7ff fff0 	bl	800eccc <HAL_RCC_GetHCLKFreq>
 800ecec:	4601      	mov	r1, r0
 800ecee:	4b06      	ldr	r3, [pc, #24]	; (800ed08 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	0a1b      	lsrs	r3, r3, #8
 800ecf4:	f003 0307 	and.w	r3, r3, #7
 800ecf8:	4a04      	ldr	r2, [pc, #16]	; (800ed0c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ecfa:	5cd3      	ldrb	r3, [r2, r3]
 800ecfc:	f003 031f 	and.w	r3, r3, #31
 800ed00:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	40021000 	.word	0x40021000
 800ed0c:	0801a7fc 	.word	0x0801a7fc

0800ed10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ed14:	f7ff ffda 	bl	800eccc <HAL_RCC_GetHCLKFreq>
 800ed18:	4601      	mov	r1, r0
 800ed1a:	4b06      	ldr	r3, [pc, #24]	; (800ed34 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	0adb      	lsrs	r3, r3, #11
 800ed20:	f003 0307 	and.w	r3, r3, #7
 800ed24:	4a04      	ldr	r2, [pc, #16]	; (800ed38 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ed26:	5cd3      	ldrb	r3, [r2, r3]
 800ed28:	f003 031f 	and.w	r3, r3, #31
 800ed2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	40021000 	.word	0x40021000
 800ed38:	0801a7fc 	.word	0x0801a7fc

0800ed3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ed44:	2300      	movs	r3, #0
 800ed46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ed48:	4b2a      	ldr	r3, [pc, #168]	; (800edf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ed4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d003      	beq.n	800ed5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ed54:	f7ff f9dc 	bl	800e110 <HAL_PWREx_GetVoltageRange>
 800ed58:	6178      	str	r0, [r7, #20]
 800ed5a:	e014      	b.n	800ed86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ed5c:	4b25      	ldr	r3, [pc, #148]	; (800edf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ed5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed60:	4a24      	ldr	r2, [pc, #144]	; (800edf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ed62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed66:	6593      	str	r3, [r2, #88]	; 0x58
 800ed68:	4b22      	ldr	r3, [pc, #136]	; (800edf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ed6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed70:	60fb      	str	r3, [r7, #12]
 800ed72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ed74:	f7ff f9cc 	bl	800e110 <HAL_PWREx_GetVoltageRange>
 800ed78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ed7a:	4b1e      	ldr	r3, [pc, #120]	; (800edf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ed7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed7e:	4a1d      	ldr	r2, [pc, #116]	; (800edf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ed80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ed84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed8c:	d10b      	bne.n	800eda6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2b80      	cmp	r3, #128	; 0x80
 800ed92:	d919      	bls.n	800edc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2ba0      	cmp	r3, #160	; 0xa0
 800ed98:	d902      	bls.n	800eda0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	613b      	str	r3, [r7, #16]
 800ed9e:	e013      	b.n	800edc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800eda0:	2301      	movs	r3, #1
 800eda2:	613b      	str	r3, [r7, #16]
 800eda4:	e010      	b.n	800edc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2b80      	cmp	r3, #128	; 0x80
 800edaa:	d902      	bls.n	800edb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800edac:	2303      	movs	r3, #3
 800edae:	613b      	str	r3, [r7, #16]
 800edb0:	e00a      	b.n	800edc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2b80      	cmp	r3, #128	; 0x80
 800edb6:	d102      	bne.n	800edbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800edb8:	2302      	movs	r3, #2
 800edba:	613b      	str	r3, [r7, #16]
 800edbc:	e004      	b.n	800edc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2b70      	cmp	r3, #112	; 0x70
 800edc2:	d101      	bne.n	800edc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800edc4:	2301      	movs	r3, #1
 800edc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800edc8:	4b0b      	ldr	r3, [pc, #44]	; (800edf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f023 0207 	bic.w	r2, r3, #7
 800edd0:	4909      	ldr	r1, [pc, #36]	; (800edf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800edd8:	4b07      	ldr	r3, [pc, #28]	; (800edf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f003 0307 	and.w	r3, r3, #7
 800ede0:	693a      	ldr	r2, [r7, #16]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d001      	beq.n	800edea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800ede6:	2301      	movs	r3, #1
 800ede8:	e000      	b.n	800edec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3718      	adds	r7, #24
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	40021000 	.word	0x40021000
 800edf8:	40022000 	.word	0x40022000

0800edfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ee04:	2300      	movs	r3, #0
 800ee06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ee08:	2300      	movs	r3, #0
 800ee0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d03f      	beq.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee20:	d01c      	beq.n	800ee5c <HAL_RCCEx_PeriphCLKConfig+0x60>
 800ee22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee26:	d802      	bhi.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00e      	beq.n	800ee4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800ee2c:	e01f      	b.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800ee2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee32:	d003      	beq.n	800ee3c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800ee34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ee38:	d01c      	beq.n	800ee74 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800ee3a:	e018      	b.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ee3c:	4b85      	ldr	r3, [pc, #532]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	4a84      	ldr	r2, [pc, #528]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ee42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ee48:	e015      	b.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	2100      	movs	r1, #0
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 fadb 	bl	800f40c <RCCEx_PLLSAI1_Config>
 800ee56:	4603      	mov	r3, r0
 800ee58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ee5a:	e00c      	b.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	3320      	adds	r3, #32
 800ee60:	2100      	movs	r1, #0
 800ee62:	4618      	mov	r0, r3
 800ee64:	f000 fbc2 	bl	800f5ec <RCCEx_PLLSAI2_Config>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ee6c:	e003      	b.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	74fb      	strb	r3, [r7, #19]
      break;
 800ee72:	e000      	b.n	800ee76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800ee74:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ee76:	7cfb      	ldrb	r3, [r7, #19]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d10b      	bne.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ee7c:	4b75      	ldr	r3, [pc, #468]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ee7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee8a:	4972      	ldr	r1, [pc, #456]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ee92:	e001      	b.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee94:	7cfb      	ldrb	r3, [r7, #19]
 800ee96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d03f      	beq.n	800ef24 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eeac:	d01c      	beq.n	800eee8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800eeae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eeb2:	d802      	bhi.n	800eeba <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00e      	beq.n	800eed6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800eeb8:	e01f      	b.n	800eefa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800eeba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eebe:	d003      	beq.n	800eec8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800eec0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800eec4:	d01c      	beq.n	800ef00 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800eec6:	e018      	b.n	800eefa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800eec8:	4b62      	ldr	r3, [pc, #392]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	4a61      	ldr	r2, [pc, #388]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800eece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eed2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800eed4:	e015      	b.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3304      	adds	r3, #4
 800eeda:	2100      	movs	r1, #0
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 fa95 	bl	800f40c <RCCEx_PLLSAI1_Config>
 800eee2:	4603      	mov	r3, r0
 800eee4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800eee6:	e00c      	b.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	3320      	adds	r3, #32
 800eeec:	2100      	movs	r1, #0
 800eeee:	4618      	mov	r0, r3
 800eef0:	f000 fb7c 	bl	800f5ec <RCCEx_PLLSAI2_Config>
 800eef4:	4603      	mov	r3, r0
 800eef6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800eef8:	e003      	b.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eefa:	2301      	movs	r3, #1
 800eefc:	74fb      	strb	r3, [r7, #19]
      break;
 800eefe:	e000      	b.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ef00:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ef02:	7cfb      	ldrb	r3, [r7, #19]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d10b      	bne.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ef08:	4b52      	ldr	r3, [pc, #328]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ef0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef16:	494f      	ldr	r1, [pc, #316]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ef1e:	e001      	b.n	800ef24 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef20:	7cfb      	ldrb	r3, [r7, #19]
 800ef22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f000 80a0 	beq.w	800f072 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ef32:	2300      	movs	r3, #0
 800ef34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ef36:	4b47      	ldr	r3, [pc, #284]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ef38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d101      	bne.n	800ef46 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800ef42:	2301      	movs	r3, #1
 800ef44:	e000      	b.n	800ef48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800ef46:	2300      	movs	r3, #0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00d      	beq.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ef4c:	4b41      	ldr	r3, [pc, #260]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ef4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef50:	4a40      	ldr	r2, [pc, #256]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ef52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef56:	6593      	str	r3, [r2, #88]	; 0x58
 800ef58:	4b3e      	ldr	r3, [pc, #248]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ef5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef60:	60bb      	str	r3, [r7, #8]
 800ef62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ef64:	2301      	movs	r3, #1
 800ef66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ef68:	4b3b      	ldr	r3, [pc, #236]	; (800f058 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a3a      	ldr	r2, [pc, #232]	; (800f058 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800ef6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ef74:	f7fd f9ae 	bl	800c2d4 <HAL_GetTick>
 800ef78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ef7a:	e009      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ef7c:	f7fd f9aa 	bl	800c2d4 <HAL_GetTick>
 800ef80:	4602      	mov	r2, r0
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	2b02      	cmp	r3, #2
 800ef88:	d902      	bls.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800ef8a:	2303      	movs	r3, #3
 800ef8c:	74fb      	strb	r3, [r7, #19]
        break;
 800ef8e:	e005      	b.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ef90:	4b31      	ldr	r3, [pc, #196]	; (800f058 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d0ef      	beq.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800ef9c:	7cfb      	ldrb	r3, [r7, #19]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d15c      	bne.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800efa2:	4b2c      	ldr	r3, [pc, #176]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800efa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d01f      	beq.n	800eff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800efba:	697a      	ldr	r2, [r7, #20]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d019      	beq.n	800eff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800efc0:	4b24      	ldr	r3, [pc, #144]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800efc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800efcc:	4b21      	ldr	r3, [pc, #132]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800efce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efd2:	4a20      	ldr	r2, [pc, #128]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800efd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800efd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800efdc:	4b1d      	ldr	r3, [pc, #116]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800efde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efe2:	4a1c      	ldr	r2, [pc, #112]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800efe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800efe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800efec:	4a19      	ldr	r2, [pc, #100]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	f003 0301 	and.w	r3, r3, #1
 800effa:	2b00      	cmp	r3, #0
 800effc:	d016      	beq.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800effe:	f7fd f969 	bl	800c2d4 <HAL_GetTick>
 800f002:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f004:	e00b      	b.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f006:	f7fd f965 	bl	800c2d4 <HAL_GetTick>
 800f00a:	4602      	mov	r2, r0
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	f241 3288 	movw	r2, #5000	; 0x1388
 800f014:	4293      	cmp	r3, r2
 800f016:	d902      	bls.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800f018:	2303      	movs	r3, #3
 800f01a:	74fb      	strb	r3, [r7, #19]
            break;
 800f01c:	e006      	b.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f01e:	4b0d      	ldr	r3, [pc, #52]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f024:	f003 0302 	and.w	r3, r3, #2
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0ec      	beq.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800f02c:	7cfb      	ldrb	r3, [r7, #19]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10c      	bne.n	800f04c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f032:	4b08      	ldr	r3, [pc, #32]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f042:	4904      	ldr	r1, [pc, #16]	; (800f054 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800f044:	4313      	orrs	r3, r2
 800f046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800f04a:	e009      	b.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f04c:	7cfb      	ldrb	r3, [r7, #19]
 800f04e:	74bb      	strb	r3, [r7, #18]
 800f050:	e006      	b.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800f052:	bf00      	nop
 800f054:	40021000 	.word	0x40021000
 800f058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f05c:	7cfb      	ldrb	r3, [r7, #19]
 800f05e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f060:	7c7b      	ldrb	r3, [r7, #17]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d105      	bne.n	800f072 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f066:	4ba6      	ldr	r3, [pc, #664]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f06a:	4aa5      	ldr	r2, [pc, #660]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f06c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f003 0301 	and.w	r3, r3, #1
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00a      	beq.n	800f094 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f07e:	4ba0      	ldr	r3, [pc, #640]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f084:	f023 0203 	bic.w	r2, r3, #3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f08c:	499c      	ldr	r1, [pc, #624]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f08e:	4313      	orrs	r3, r2
 800f090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f003 0302 	and.w	r3, r3, #2
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00a      	beq.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f0a0:	4b97      	ldr	r3, [pc, #604]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0a6:	f023 020c 	bic.w	r2, r3, #12
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0ae:	4994      	ldr	r1, [pc, #592]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f003 0304 	and.w	r3, r3, #4
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00a      	beq.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f0c2:	4b8f      	ldr	r3, [pc, #572]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d0:	498b      	ldr	r1, [pc, #556]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f003 0308 	and.w	r3, r3, #8
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00a      	beq.n	800f0fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f0e4:	4b86      	ldr	r3, [pc, #536]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f2:	4983      	ldr	r1, [pc, #524]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f003 0310 	and.w	r3, r3, #16
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00a      	beq.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f106:	4b7e      	ldr	r3, [pc, #504]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f10c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f114:	497a      	ldr	r1, [pc, #488]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f116:	4313      	orrs	r3, r2
 800f118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f003 0320 	and.w	r3, r3, #32
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00a      	beq.n	800f13e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f128:	4b75      	ldr	r3, [pc, #468]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f12e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f136:	4972      	ldr	r1, [pc, #456]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f138:	4313      	orrs	r3, r2
 800f13a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00a      	beq.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f14a:	4b6d      	ldr	r3, [pc, #436]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f158:	4969      	ldr	r1, [pc, #420]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f15a:	4313      	orrs	r3, r2
 800f15c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00a      	beq.n	800f182 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f16c:	4b64      	ldr	r3, [pc, #400]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f17a:	4961      	ldr	r1, [pc, #388]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f17c:	4313      	orrs	r3, r2
 800f17e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00a      	beq.n	800f1a4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f18e:	4b5c      	ldr	r3, [pc, #368]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f194:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f19c:	4958      	ldr	r1, [pc, #352]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00a      	beq.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f1b0:	4b53      	ldr	r3, [pc, #332]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1be:	4950      	ldr	r1, [pc, #320]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00a      	beq.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f1d2:	4b4b      	ldr	r3, [pc, #300]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1e0:	4947      	ldr	r1, [pc, #284]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00a      	beq.n	800f20a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f1f4:	4b42      	ldr	r3, [pc, #264]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f1f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f1fa:	f023 0203 	bic.w	r2, r3, #3
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f202:	493f      	ldr	r1, [pc, #252]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f204:	4313      	orrs	r3, r2
 800f206:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f212:	2b00      	cmp	r3, #0
 800f214:	d028      	beq.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f216:	4b3a      	ldr	r3, [pc, #232]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f21c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f224:	4936      	ldr	r1, [pc, #216]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f226:	4313      	orrs	r3, r2
 800f228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f234:	d106      	bne.n	800f244 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f236:	4b32      	ldr	r3, [pc, #200]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	4a31      	ldr	r2, [pc, #196]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f23c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f240:	60d3      	str	r3, [r2, #12]
 800f242:	e011      	b.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f24c:	d10c      	bne.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	3304      	adds	r3, #4
 800f252:	2101      	movs	r1, #1
 800f254:	4618      	mov	r0, r3
 800f256:	f000 f8d9 	bl	800f40c <RCCEx_PLLSAI1_Config>
 800f25a:	4603      	mov	r3, r0
 800f25c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800f25e:	7cfb      	ldrb	r3, [r7, #19]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d001      	beq.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800f264:	7cfb      	ldrb	r3, [r7, #19]
 800f266:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f270:	2b00      	cmp	r3, #0
 800f272:	d028      	beq.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f274:	4b22      	ldr	r3, [pc, #136]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f27a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f282:	491f      	ldr	r1, [pc, #124]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f284:	4313      	orrs	r3, r2
 800f286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f28e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f292:	d106      	bne.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f294:	4b1a      	ldr	r3, [pc, #104]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	4a19      	ldr	r2, [pc, #100]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f29a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f29e:	60d3      	str	r3, [r2, #12]
 800f2a0:	e011      	b.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f2aa:	d10c      	bne.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	2101      	movs	r1, #1
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 f8aa 	bl	800f40c <RCCEx_PLLSAI1_Config>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f2bc:	7cfb      	ldrb	r3, [r7, #19]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d001      	beq.n	800f2c6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 800f2c2:	7cfb      	ldrb	r3, [r7, #19]
 800f2c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d02a      	beq.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f2d2:	4b0b      	ldr	r3, [pc, #44]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2e0:	4907      	ldr	r1, [pc, #28]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f2f0:	d108      	bne.n	800f304 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f2f2:	4b03      	ldr	r3, [pc, #12]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	4a02      	ldr	r2, [pc, #8]	; (800f300 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f2f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f2fc:	60d3      	str	r3, [r2, #12]
 800f2fe:	e013      	b.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800f300:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f30c:	d10c      	bne.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	3304      	adds	r3, #4
 800f312:	2101      	movs	r1, #1
 800f314:	4618      	mov	r0, r3
 800f316:	f000 f879 	bl	800f40c <RCCEx_PLLSAI1_Config>
 800f31a:	4603      	mov	r3, r0
 800f31c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f31e:	7cfb      	ldrb	r3, [r7, #19]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d001      	beq.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 800f324:	7cfb      	ldrb	r3, [r7, #19]
 800f326:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f330:	2b00      	cmp	r3, #0
 800f332:	d02f      	beq.n	800f394 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f334:	4b2c      	ldr	r3, [pc, #176]	; (800f3e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f33a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f342:	4929      	ldr	r1, [pc, #164]	; (800f3e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f344:	4313      	orrs	r3, r2
 800f346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f34e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f352:	d10d      	bne.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	3304      	adds	r3, #4
 800f358:	2102      	movs	r1, #2
 800f35a:	4618      	mov	r0, r3
 800f35c:	f000 f856 	bl	800f40c <RCCEx_PLLSAI1_Config>
 800f360:	4603      	mov	r3, r0
 800f362:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f364:	7cfb      	ldrb	r3, [r7, #19]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d014      	beq.n	800f394 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800f36a:	7cfb      	ldrb	r3, [r7, #19]
 800f36c:	74bb      	strb	r3, [r7, #18]
 800f36e:	e011      	b.n	800f394 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f378:	d10c      	bne.n	800f394 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	3320      	adds	r3, #32
 800f37e:	2102      	movs	r1, #2
 800f380:	4618      	mov	r0, r3
 800f382:	f000 f933 	bl	800f5ec <RCCEx_PLLSAI2_Config>
 800f386:	4603      	mov	r3, r0
 800f388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f38a:	7cfb      	ldrb	r3, [r7, #19]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d001      	beq.n	800f394 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800f390:	7cfb      	ldrb	r3, [r7, #19]
 800f392:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d00b      	beq.n	800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f3a0:	4b11      	ldr	r3, [pc, #68]	; (800f3e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3b0:	490d      	ldr	r1, [pc, #52]	; (800f3e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00b      	beq.n	800f3dc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f3c4:	4b08      	ldr	r3, [pc, #32]	; (800f3e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3d4:	4904      	ldr	r1, [pc, #16]	; (800f3e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800f3dc:	7cbb      	ldrb	r3, [r7, #18]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3718      	adds	r7, #24
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	40021000 	.word	0x40021000

0800f3ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800f3f0:	4b05      	ldr	r3, [pc, #20]	; (800f408 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a04      	ldr	r2, [pc, #16]	; (800f408 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800f3f6:	f043 0304 	orr.w	r3, r3, #4
 800f3fa:	6013      	str	r3, [r2, #0]
}
 800f3fc:	bf00      	nop
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	40021000 	.word	0x40021000

0800f40c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f416:	2300      	movs	r3, #0
 800f418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800f41a:	4b73      	ldr	r3, [pc, #460]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f003 0303 	and.w	r3, r3, #3
 800f422:	2b00      	cmp	r3, #0
 800f424:	d018      	beq.n	800f458 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800f426:	4b70      	ldr	r3, [pc, #448]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	f003 0203 	and.w	r2, r3, #3
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	429a      	cmp	r2, r3
 800f434:	d10d      	bne.n	800f452 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
       ||
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d009      	beq.n	800f452 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800f43e:	4b6a      	ldr	r3, [pc, #424]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	091b      	lsrs	r3, r3, #4
 800f444:	f003 0307 	and.w	r3, r3, #7
 800f448:	1c5a      	adds	r2, r3, #1
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	685b      	ldr	r3, [r3, #4]
       ||
 800f44e:	429a      	cmp	r2, r3
 800f450:	d044      	beq.n	800f4dc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800f452:	2301      	movs	r3, #1
 800f454:	73fb      	strb	r3, [r7, #15]
 800f456:	e041      	b.n	800f4dc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2b02      	cmp	r3, #2
 800f45e:	d00c      	beq.n	800f47a <RCCEx_PLLSAI1_Config+0x6e>
 800f460:	2b03      	cmp	r3, #3
 800f462:	d013      	beq.n	800f48c <RCCEx_PLLSAI1_Config+0x80>
 800f464:	2b01      	cmp	r3, #1
 800f466:	d120      	bne.n	800f4aa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800f468:	4b5f      	ldr	r3, [pc, #380]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f003 0302 	and.w	r3, r3, #2
 800f470:	2b00      	cmp	r3, #0
 800f472:	d11d      	bne.n	800f4b0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800f474:	2301      	movs	r3, #1
 800f476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f478:	e01a      	b.n	800f4b0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800f47a:	4b5b      	ldr	r3, [pc, #364]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f482:	2b00      	cmp	r3, #0
 800f484:	d116      	bne.n	800f4b4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f48a:	e013      	b.n	800f4b4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800f48c:	4b56      	ldr	r3, [pc, #344]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f494:	2b00      	cmp	r3, #0
 800f496:	d10f      	bne.n	800f4b8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800f498:	4b53      	ldr	r3, [pc, #332]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d109      	bne.n	800f4b8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f4a8:	e006      	b.n	800f4b8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800f4ae:	e004      	b.n	800f4ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 800f4b0:	bf00      	nop
 800f4b2:	e002      	b.n	800f4ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 800f4b4:	bf00      	nop
 800f4b6:	e000      	b.n	800f4ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 800f4b8:	bf00      	nop
    }

    if(status == HAL_OK)
 800f4ba:	7bfb      	ldrb	r3, [r7, #15]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d10d      	bne.n	800f4dc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800f4c0:	4b49      	ldr	r3, [pc, #292]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6819      	ldr	r1, [r3, #0]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	011b      	lsls	r3, r3, #4
 800f4d4:	430b      	orrs	r3, r1
 800f4d6:	4944      	ldr	r1, [pc, #272]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800f4dc:	7bfb      	ldrb	r3, [r7, #15]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d17c      	bne.n	800f5dc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800f4e2:	4b41      	ldr	r3, [pc, #260]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4a40      	ldr	r2, [pc, #256]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f4e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f4ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4ee:	f7fc fef1 	bl	800c2d4 <HAL_GetTick>
 800f4f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800f4f4:	e009      	b.n	800f50a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f4f6:	f7fc feed 	bl	800c2d4 <HAL_GetTick>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	2b02      	cmp	r3, #2
 800f502:	d902      	bls.n	800f50a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800f504:	2303      	movs	r3, #3
 800f506:	73fb      	strb	r3, [r7, #15]
        break;
 800f508:	e005      	b.n	800f516 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800f50a:	4b37      	ldr	r3, [pc, #220]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f512:	2b00      	cmp	r3, #0
 800f514:	d1ef      	bne.n	800f4f6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d15f      	bne.n	800f5dc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d110      	bne.n	800f544 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f522:	4b31      	ldr	r3, [pc, #196]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800f52a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	6892      	ldr	r2, [r2, #8]
 800f532:	0211      	lsls	r1, r2, #8
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	68d2      	ldr	r2, [r2, #12]
 800f538:	06d2      	lsls	r2, r2, #27
 800f53a:	430a      	orrs	r2, r1
 800f53c:	492a      	ldr	r1, [pc, #168]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f53e:	4313      	orrs	r3, r2
 800f540:	610b      	str	r3, [r1, #16]
 800f542:	e027      	b.n	800f594 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2b01      	cmp	r3, #1
 800f548:	d112      	bne.n	800f570 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f54a:	4b27      	ldr	r3, [pc, #156]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800f552:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800f556:	687a      	ldr	r2, [r7, #4]
 800f558:	6892      	ldr	r2, [r2, #8]
 800f55a:	0211      	lsls	r1, r2, #8
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	6912      	ldr	r2, [r2, #16]
 800f560:	0852      	lsrs	r2, r2, #1
 800f562:	3a01      	subs	r2, #1
 800f564:	0552      	lsls	r2, r2, #21
 800f566:	430a      	orrs	r2, r1
 800f568:	491f      	ldr	r1, [pc, #124]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f56a:	4313      	orrs	r3, r2
 800f56c:	610b      	str	r3, [r1, #16]
 800f56e:	e011      	b.n	800f594 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f570:	4b1d      	ldr	r3, [pc, #116]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f572:	691b      	ldr	r3, [r3, #16]
 800f574:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800f578:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	6892      	ldr	r2, [r2, #8]
 800f580:	0211      	lsls	r1, r2, #8
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	6952      	ldr	r2, [r2, #20]
 800f586:	0852      	lsrs	r2, r2, #1
 800f588:	3a01      	subs	r2, #1
 800f58a:	0652      	lsls	r2, r2, #25
 800f58c:	430a      	orrs	r2, r1
 800f58e:	4916      	ldr	r1, [pc, #88]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f590:	4313      	orrs	r3, r2
 800f592:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800f594:	4b14      	ldr	r3, [pc, #80]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4a13      	ldr	r2, [pc, #76]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f59a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f59e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5a0:	f7fc fe98 	bl	800c2d4 <HAL_GetTick>
 800f5a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f5a6:	e009      	b.n	800f5bc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f5a8:	f7fc fe94 	bl	800c2d4 <HAL_GetTick>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	2b02      	cmp	r3, #2
 800f5b4:	d902      	bls.n	800f5bc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	73fb      	strb	r3, [r7, #15]
          break;
 800f5ba:	e005      	b.n	800f5c8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f5bc:	4b0a      	ldr	r3, [pc, #40]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d0ef      	beq.n	800f5a8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800f5c8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d106      	bne.n	800f5dc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800f5ce:	4b06      	ldr	r3, [pc, #24]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f5d0:	691a      	ldr	r2, [r3, #16]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	699b      	ldr	r3, [r3, #24]
 800f5d6:	4904      	ldr	r1, [pc, #16]	; (800f5e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800f5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	40021000 	.word	0x40021000

0800f5ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800f5fa:	4b68      	ldr	r3, [pc, #416]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	f003 0303 	and.w	r3, r3, #3
 800f602:	2b00      	cmp	r3, #0
 800f604:	d018      	beq.n	800f638 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800f606:	4b65      	ldr	r3, [pc, #404]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	f003 0203 	and.w	r2, r3, #3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	429a      	cmp	r2, r3
 800f614:	d10d      	bne.n	800f632 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
       ||
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d009      	beq.n	800f632 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800f61e:	4b5f      	ldr	r3, [pc, #380]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	091b      	lsrs	r3, r3, #4
 800f624:	f003 0307 	and.w	r3, r3, #7
 800f628:	1c5a      	adds	r2, r3, #1
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	685b      	ldr	r3, [r3, #4]
       ||
 800f62e:	429a      	cmp	r2, r3
 800f630:	d044      	beq.n	800f6bc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800f632:	2301      	movs	r3, #1
 800f634:	73fb      	strb	r3, [r7, #15]
 800f636:	e041      	b.n	800f6bc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	2b02      	cmp	r3, #2
 800f63e:	d00c      	beq.n	800f65a <RCCEx_PLLSAI2_Config+0x6e>
 800f640:	2b03      	cmp	r3, #3
 800f642:	d013      	beq.n	800f66c <RCCEx_PLLSAI2_Config+0x80>
 800f644:	2b01      	cmp	r3, #1
 800f646:	d120      	bne.n	800f68a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800f648:	4b54      	ldr	r3, [pc, #336]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f003 0302 	and.w	r3, r3, #2
 800f650:	2b00      	cmp	r3, #0
 800f652:	d11d      	bne.n	800f690 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800f654:	2301      	movs	r3, #1
 800f656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f658:	e01a      	b.n	800f690 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800f65a:	4b50      	ldr	r3, [pc, #320]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f662:	2b00      	cmp	r3, #0
 800f664:	d116      	bne.n	800f694 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f66a:	e013      	b.n	800f694 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800f66c:	4b4b      	ldr	r3, [pc, #300]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f674:	2b00      	cmp	r3, #0
 800f676:	d10f      	bne.n	800f698 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800f678:	4b48      	ldr	r3, [pc, #288]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f680:	2b00      	cmp	r3, #0
 800f682:	d109      	bne.n	800f698 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800f684:	2301      	movs	r3, #1
 800f686:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f688:	e006      	b.n	800f698 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800f68a:	2301      	movs	r3, #1
 800f68c:	73fb      	strb	r3, [r7, #15]
      break;
 800f68e:	e004      	b.n	800f69a <RCCEx_PLLSAI2_Config+0xae>
      break;
 800f690:	bf00      	nop
 800f692:	e002      	b.n	800f69a <RCCEx_PLLSAI2_Config+0xae>
      break;
 800f694:	bf00      	nop
 800f696:	e000      	b.n	800f69a <RCCEx_PLLSAI2_Config+0xae>
      break;
 800f698:	bf00      	nop
    }

    if(status == HAL_OK)
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d10d      	bne.n	800f6bc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800f6a0:	4b3e      	ldr	r3, [pc, #248]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6819      	ldr	r1, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	3b01      	subs	r3, #1
 800f6b2:	011b      	lsls	r3, r3, #4
 800f6b4:	430b      	orrs	r3, r1
 800f6b6:	4939      	ldr	r1, [pc, #228]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800f6bc:	7bfb      	ldrb	r3, [r7, #15]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d166      	bne.n	800f790 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800f6c2:	4b36      	ldr	r3, [pc, #216]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4a35      	ldr	r2, [pc, #212]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f6c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f6cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f6ce:	f7fc fe01 	bl	800c2d4 <HAL_GetTick>
 800f6d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800f6d4:	e009      	b.n	800f6ea <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800f6d6:	f7fc fdfd 	bl	800c2d4 <HAL_GetTick>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	2b02      	cmp	r3, #2
 800f6e2:	d902      	bls.n	800f6ea <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800f6e4:	2303      	movs	r3, #3
 800f6e6:	73fb      	strb	r3, [r7, #15]
        break;
 800f6e8:	e005      	b.n	800f6f6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800f6ea:	4b2c      	ldr	r3, [pc, #176]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1ef      	bne.n	800f6d6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800f6f6:	7bfb      	ldrb	r3, [r7, #15]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d149      	bne.n	800f790 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d110      	bne.n	800f724 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800f702:	4b26      	ldr	r3, [pc, #152]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f704:	695b      	ldr	r3, [r3, #20]
 800f706:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800f70a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	6892      	ldr	r2, [r2, #8]
 800f712:	0211      	lsls	r1, r2, #8
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	68d2      	ldr	r2, [r2, #12]
 800f718:	06d2      	lsls	r2, r2, #27
 800f71a:	430a      	orrs	r2, r1
 800f71c:	491f      	ldr	r1, [pc, #124]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f71e:	4313      	orrs	r3, r2
 800f720:	614b      	str	r3, [r1, #20]
 800f722:	e011      	b.n	800f748 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800f724:	4b1d      	ldr	r3, [pc, #116]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f726:	695b      	ldr	r3, [r3, #20]
 800f728:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800f72c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	6892      	ldr	r2, [r2, #8]
 800f734:	0211      	lsls	r1, r2, #8
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	6912      	ldr	r2, [r2, #16]
 800f73a:	0852      	lsrs	r2, r2, #1
 800f73c:	3a01      	subs	r2, #1
 800f73e:	0652      	lsls	r2, r2, #25
 800f740:	430a      	orrs	r2, r1
 800f742:	4916      	ldr	r1, [pc, #88]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f744:	4313      	orrs	r3, r2
 800f746:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800f748:	4b14      	ldr	r3, [pc, #80]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a13      	ldr	r2, [pc, #76]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f74e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f752:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f754:	f7fc fdbe 	bl	800c2d4 <HAL_GetTick>
 800f758:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800f75a:	e009      	b.n	800f770 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800f75c:	f7fc fdba 	bl	800c2d4 <HAL_GetTick>
 800f760:	4602      	mov	r2, r0
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	1ad3      	subs	r3, r2, r3
 800f766:	2b02      	cmp	r3, #2
 800f768:	d902      	bls.n	800f770 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800f76a:	2303      	movs	r3, #3
 800f76c:	73fb      	strb	r3, [r7, #15]
          break;
 800f76e:	e005      	b.n	800f77c <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800f770:	4b0a      	ldr	r3, [pc, #40]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d0ef      	beq.n	800f75c <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 800f77c:	7bfb      	ldrb	r3, [r7, #15]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d106      	bne.n	800f790 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800f782:	4b06      	ldr	r3, [pc, #24]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f784:	695a      	ldr	r2, [r3, #20]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	695b      	ldr	r3, [r3, #20]
 800f78a:	4904      	ldr	r1, [pc, #16]	; (800f79c <RCCEx_PLLSAI2_Config+0x1b0>)
 800f78c:	4313      	orrs	r3, r2
 800f78e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800f790:	7bfb      	ldrb	r3, [r7, #15]
}
 800f792:	4618      	mov	r0, r3
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	40021000 	.word	0x40021000

0800f7a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d101      	bne.n	800f7b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	e040      	b.n	800f834 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d106      	bne.n	800f7c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f007 fe86 	bl	80174d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2224      	movs	r2, #36	; 0x24
 800f7cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f022 0201 	bic.w	r2, r2, #1
 800f7dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 f82c 	bl	800f83c <UART_SetConfig>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d101      	bne.n	800f7ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e022      	b.n	800f834 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d002      	beq.n	800f7fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 fb68 	bl	800fecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	685a      	ldr	r2, [r3, #4]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f80a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	689a      	ldr	r2, [r3, #8]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f81a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f042 0201 	orr.w	r2, r2, #1
 800f82a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 fbef 	bl	8010010 <UART_CheckIdleState>
 800f832:	4603      	mov	r3, r0
}
 800f834:	4618      	mov	r0, r3
 800f836:	3708      	adds	r7, #8
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f83c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f840:	b088      	sub	sp, #32
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f846:	2300      	movs	r3, #0
 800f848:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f84a:	2300      	movs	r3, #0
 800f84c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800f84e:	2300      	movs	r3, #0
 800f850:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	689a      	ldr	r2, [r3, #8]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	691b      	ldr	r3, [r3, #16]
 800f85a:	431a      	orrs	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	695b      	ldr	r3, [r3, #20]
 800f860:	431a      	orrs	r2, r3
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	69db      	ldr	r3, [r3, #28]
 800f866:	4313      	orrs	r3, r2
 800f868:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	4bac      	ldr	r3, [pc, #688]	; (800fb24 <UART_SetConfig+0x2e8>)
 800f872:	4013      	ands	r3, r2
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	6812      	ldr	r2, [r2, #0]
 800f878:	69f9      	ldr	r1, [r7, #28]
 800f87a:	430b      	orrs	r3, r1
 800f87c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	68da      	ldr	r2, [r3, #12]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	430a      	orrs	r2, r1
 800f892:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	4aa2      	ldr	r2, [pc, #648]	; (800fb28 <UART_SetConfig+0x2ec>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d004      	beq.n	800f8ae <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6a1b      	ldr	r3, [r3, #32]
 800f8a8:	69fa      	ldr	r2, [r7, #28]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	689b      	ldr	r3, [r3, #8]
 800f8b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	69fa      	ldr	r2, [r7, #28]
 800f8be:	430a      	orrs	r2, r1
 800f8c0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4a99      	ldr	r2, [pc, #612]	; (800fb2c <UART_SetConfig+0x2f0>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d121      	bne.n	800f910 <UART_SetConfig+0xd4>
 800f8cc:	4b98      	ldr	r3, [pc, #608]	; (800fb30 <UART_SetConfig+0x2f4>)
 800f8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8d2:	f003 0303 	and.w	r3, r3, #3
 800f8d6:	2b03      	cmp	r3, #3
 800f8d8:	d816      	bhi.n	800f908 <UART_SetConfig+0xcc>
 800f8da:	a201      	add	r2, pc, #4	; (adr r2, 800f8e0 <UART_SetConfig+0xa4>)
 800f8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e0:	0800f8f1 	.word	0x0800f8f1
 800f8e4:	0800f8fd 	.word	0x0800f8fd
 800f8e8:	0800f8f7 	.word	0x0800f8f7
 800f8ec:	0800f903 	.word	0x0800f903
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	76fb      	strb	r3, [r7, #27]
 800f8f4:	e0e8      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f8f6:	2302      	movs	r3, #2
 800f8f8:	76fb      	strb	r3, [r7, #27]
 800f8fa:	e0e5      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f8fc:	2304      	movs	r3, #4
 800f8fe:	76fb      	strb	r3, [r7, #27]
 800f900:	e0e2      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f902:	2308      	movs	r3, #8
 800f904:	76fb      	strb	r3, [r7, #27]
 800f906:	e0df      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f908:	2310      	movs	r3, #16
 800f90a:	76fb      	strb	r3, [r7, #27]
 800f90c:	bf00      	nop
 800f90e:	e0db      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	4a87      	ldr	r2, [pc, #540]	; (800fb34 <UART_SetConfig+0x2f8>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d134      	bne.n	800f984 <UART_SetConfig+0x148>
 800f91a:	4b85      	ldr	r3, [pc, #532]	; (800fb30 <UART_SetConfig+0x2f4>)
 800f91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f920:	f003 030c 	and.w	r3, r3, #12
 800f924:	2b0c      	cmp	r3, #12
 800f926:	d829      	bhi.n	800f97c <UART_SetConfig+0x140>
 800f928:	a201      	add	r2, pc, #4	; (adr r2, 800f930 <UART_SetConfig+0xf4>)
 800f92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f92e:	bf00      	nop
 800f930:	0800f965 	.word	0x0800f965
 800f934:	0800f97d 	.word	0x0800f97d
 800f938:	0800f97d 	.word	0x0800f97d
 800f93c:	0800f97d 	.word	0x0800f97d
 800f940:	0800f971 	.word	0x0800f971
 800f944:	0800f97d 	.word	0x0800f97d
 800f948:	0800f97d 	.word	0x0800f97d
 800f94c:	0800f97d 	.word	0x0800f97d
 800f950:	0800f96b 	.word	0x0800f96b
 800f954:	0800f97d 	.word	0x0800f97d
 800f958:	0800f97d 	.word	0x0800f97d
 800f95c:	0800f97d 	.word	0x0800f97d
 800f960:	0800f977 	.word	0x0800f977
 800f964:	2300      	movs	r3, #0
 800f966:	76fb      	strb	r3, [r7, #27]
 800f968:	e0ae      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f96a:	2302      	movs	r3, #2
 800f96c:	76fb      	strb	r3, [r7, #27]
 800f96e:	e0ab      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f970:	2304      	movs	r3, #4
 800f972:	76fb      	strb	r3, [r7, #27]
 800f974:	e0a8      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f976:	2308      	movs	r3, #8
 800f978:	76fb      	strb	r3, [r7, #27]
 800f97a:	e0a5      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f97c:	2310      	movs	r3, #16
 800f97e:	76fb      	strb	r3, [r7, #27]
 800f980:	bf00      	nop
 800f982:	e0a1      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a6b      	ldr	r2, [pc, #428]	; (800fb38 <UART_SetConfig+0x2fc>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d120      	bne.n	800f9d0 <UART_SetConfig+0x194>
 800f98e:	4b68      	ldr	r3, [pc, #416]	; (800fb30 <UART_SetConfig+0x2f4>)
 800f990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f994:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f998:	2b10      	cmp	r3, #16
 800f99a:	d00f      	beq.n	800f9bc <UART_SetConfig+0x180>
 800f99c:	2b10      	cmp	r3, #16
 800f99e:	d802      	bhi.n	800f9a6 <UART_SetConfig+0x16a>
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d005      	beq.n	800f9b0 <UART_SetConfig+0x174>
 800f9a4:	e010      	b.n	800f9c8 <UART_SetConfig+0x18c>
 800f9a6:	2b20      	cmp	r3, #32
 800f9a8:	d005      	beq.n	800f9b6 <UART_SetConfig+0x17a>
 800f9aa:	2b30      	cmp	r3, #48	; 0x30
 800f9ac:	d009      	beq.n	800f9c2 <UART_SetConfig+0x186>
 800f9ae:	e00b      	b.n	800f9c8 <UART_SetConfig+0x18c>
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	76fb      	strb	r3, [r7, #27]
 800f9b4:	e088      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f9b6:	2302      	movs	r3, #2
 800f9b8:	76fb      	strb	r3, [r7, #27]
 800f9ba:	e085      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f9bc:	2304      	movs	r3, #4
 800f9be:	76fb      	strb	r3, [r7, #27]
 800f9c0:	e082      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f9c2:	2308      	movs	r3, #8
 800f9c4:	76fb      	strb	r3, [r7, #27]
 800f9c6:	e07f      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f9c8:	2310      	movs	r3, #16
 800f9ca:	76fb      	strb	r3, [r7, #27]
 800f9cc:	bf00      	nop
 800f9ce:	e07b      	b.n	800fac8 <UART_SetConfig+0x28c>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a59      	ldr	r2, [pc, #356]	; (800fb3c <UART_SetConfig+0x300>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d120      	bne.n	800fa1c <UART_SetConfig+0x1e0>
 800f9da:	4b55      	ldr	r3, [pc, #340]	; (800fb30 <UART_SetConfig+0x2f4>)
 800f9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f9e4:	2b40      	cmp	r3, #64	; 0x40
 800f9e6:	d00f      	beq.n	800fa08 <UART_SetConfig+0x1cc>
 800f9e8:	2b40      	cmp	r3, #64	; 0x40
 800f9ea:	d802      	bhi.n	800f9f2 <UART_SetConfig+0x1b6>
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d005      	beq.n	800f9fc <UART_SetConfig+0x1c0>
 800f9f0:	e010      	b.n	800fa14 <UART_SetConfig+0x1d8>
 800f9f2:	2b80      	cmp	r3, #128	; 0x80
 800f9f4:	d005      	beq.n	800fa02 <UART_SetConfig+0x1c6>
 800f9f6:	2bc0      	cmp	r3, #192	; 0xc0
 800f9f8:	d009      	beq.n	800fa0e <UART_SetConfig+0x1d2>
 800f9fa:	e00b      	b.n	800fa14 <UART_SetConfig+0x1d8>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	76fb      	strb	r3, [r7, #27]
 800fa00:	e062      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa02:	2302      	movs	r3, #2
 800fa04:	76fb      	strb	r3, [r7, #27]
 800fa06:	e05f      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa08:	2304      	movs	r3, #4
 800fa0a:	76fb      	strb	r3, [r7, #27]
 800fa0c:	e05c      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa0e:	2308      	movs	r3, #8
 800fa10:	76fb      	strb	r3, [r7, #27]
 800fa12:	e059      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa14:	2310      	movs	r3, #16
 800fa16:	76fb      	strb	r3, [r7, #27]
 800fa18:	bf00      	nop
 800fa1a:	e055      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a47      	ldr	r2, [pc, #284]	; (800fb40 <UART_SetConfig+0x304>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d124      	bne.n	800fa70 <UART_SetConfig+0x234>
 800fa26:	4b42      	ldr	r3, [pc, #264]	; (800fb30 <UART_SetConfig+0x2f4>)
 800fa28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa34:	d012      	beq.n	800fa5c <UART_SetConfig+0x220>
 800fa36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa3a:	d802      	bhi.n	800fa42 <UART_SetConfig+0x206>
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d007      	beq.n	800fa50 <UART_SetConfig+0x214>
 800fa40:	e012      	b.n	800fa68 <UART_SetConfig+0x22c>
 800fa42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa46:	d006      	beq.n	800fa56 <UART_SetConfig+0x21a>
 800fa48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa4c:	d009      	beq.n	800fa62 <UART_SetConfig+0x226>
 800fa4e:	e00b      	b.n	800fa68 <UART_SetConfig+0x22c>
 800fa50:	2300      	movs	r3, #0
 800fa52:	76fb      	strb	r3, [r7, #27]
 800fa54:	e038      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa56:	2302      	movs	r3, #2
 800fa58:	76fb      	strb	r3, [r7, #27]
 800fa5a:	e035      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa5c:	2304      	movs	r3, #4
 800fa5e:	76fb      	strb	r3, [r7, #27]
 800fa60:	e032      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa62:	2308      	movs	r3, #8
 800fa64:	76fb      	strb	r3, [r7, #27]
 800fa66:	e02f      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa68:	2310      	movs	r3, #16
 800fa6a:	76fb      	strb	r3, [r7, #27]
 800fa6c:	bf00      	nop
 800fa6e:	e02b      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a2c      	ldr	r2, [pc, #176]	; (800fb28 <UART_SetConfig+0x2ec>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d124      	bne.n	800fac4 <UART_SetConfig+0x288>
 800fa7a:	4b2d      	ldr	r3, [pc, #180]	; (800fb30 <UART_SetConfig+0x2f4>)
 800fa7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fa84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa88:	d012      	beq.n	800fab0 <UART_SetConfig+0x274>
 800fa8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa8e:	d802      	bhi.n	800fa96 <UART_SetConfig+0x25a>
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d007      	beq.n	800faa4 <UART_SetConfig+0x268>
 800fa94:	e012      	b.n	800fabc <UART_SetConfig+0x280>
 800fa96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa9a:	d006      	beq.n	800faaa <UART_SetConfig+0x26e>
 800fa9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800faa0:	d009      	beq.n	800fab6 <UART_SetConfig+0x27a>
 800faa2:	e00b      	b.n	800fabc <UART_SetConfig+0x280>
 800faa4:	2300      	movs	r3, #0
 800faa6:	76fb      	strb	r3, [r7, #27]
 800faa8:	e00e      	b.n	800fac8 <UART_SetConfig+0x28c>
 800faaa:	2302      	movs	r3, #2
 800faac:	76fb      	strb	r3, [r7, #27]
 800faae:	e00b      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fab0:	2304      	movs	r3, #4
 800fab2:	76fb      	strb	r3, [r7, #27]
 800fab4:	e008      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fab6:	2308      	movs	r3, #8
 800fab8:	76fb      	strb	r3, [r7, #27]
 800faba:	e005      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fabc:	2310      	movs	r3, #16
 800fabe:	76fb      	strb	r3, [r7, #27]
 800fac0:	bf00      	nop
 800fac2:	e001      	b.n	800fac8 <UART_SetConfig+0x28c>
 800fac4:	2310      	movs	r3, #16
 800fac6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a16      	ldr	r2, [pc, #88]	; (800fb28 <UART_SetConfig+0x2ec>)
 800face:	4293      	cmp	r3, r2
 800fad0:	f040 80fa 	bne.w	800fcc8 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fad4:	7efb      	ldrb	r3, [r7, #27]
 800fad6:	2b08      	cmp	r3, #8
 800fad8:	d836      	bhi.n	800fb48 <UART_SetConfig+0x30c>
 800fada:	a201      	add	r2, pc, #4	; (adr r2, 800fae0 <UART_SetConfig+0x2a4>)
 800fadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae0:	0800fb05 	.word	0x0800fb05
 800fae4:	0800fb49 	.word	0x0800fb49
 800fae8:	0800fb0d 	.word	0x0800fb0d
 800faec:	0800fb49 	.word	0x0800fb49
 800faf0:	0800fb13 	.word	0x0800fb13
 800faf4:	0800fb49 	.word	0x0800fb49
 800faf8:	0800fb49 	.word	0x0800fb49
 800fafc:	0800fb49 	.word	0x0800fb49
 800fb00:	0800fb1b 	.word	0x0800fb1b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800fb04:	f7ff f8ee 	bl	800ece4 <HAL_RCC_GetPCLK1Freq>
 800fb08:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb0a:	e020      	b.n	800fb4e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800fb0c:	4b0d      	ldr	r3, [pc, #52]	; (800fb44 <UART_SetConfig+0x308>)
 800fb0e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb10:	e01d      	b.n	800fb4e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800fb12:	f7ff f851 	bl	800ebb8 <HAL_RCC_GetSysClockFreq>
 800fb16:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb18:	e019      	b.n	800fb4e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800fb1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb1e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb20:	e015      	b.n	800fb4e <UART_SetConfig+0x312>
 800fb22:	bf00      	nop
 800fb24:	efff69f3 	.word	0xefff69f3
 800fb28:	40008000 	.word	0x40008000
 800fb2c:	40013800 	.word	0x40013800
 800fb30:	40021000 	.word	0x40021000
 800fb34:	40004400 	.word	0x40004400
 800fb38:	40004800 	.word	0x40004800
 800fb3c:	40004c00 	.word	0x40004c00
 800fb40:	40005000 	.word	0x40005000
 800fb44:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	74fb      	strb	r3, [r7, #19]
        break;
 800fb4c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f000 81ac 	beq.w	800feae <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	685a      	ldr	r2, [r3, #4]
 800fb5a:	4613      	mov	r3, r2
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	4413      	add	r3, r2
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d305      	bcc.n	800fb72 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d902      	bls.n	800fb78 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800fb72:	2301      	movs	r3, #1
 800fb74:	74fb      	strb	r3, [r7, #19]
 800fb76:	e19a      	b.n	800feae <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800fb78:	7efb      	ldrb	r3, [r7, #27]
 800fb7a:	2b08      	cmp	r3, #8
 800fb7c:	f200 8091 	bhi.w	800fca2 <UART_SetConfig+0x466>
 800fb80:	a201      	add	r2, pc, #4	; (adr r2, 800fb88 <UART_SetConfig+0x34c>)
 800fb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb86:	bf00      	nop
 800fb88:	0800fbad 	.word	0x0800fbad
 800fb8c:	0800fca3 	.word	0x0800fca3
 800fb90:	0800fbf9 	.word	0x0800fbf9
 800fb94:	0800fca3 	.word	0x0800fca3
 800fb98:	0800fc2d 	.word	0x0800fc2d
 800fb9c:	0800fca3 	.word	0x0800fca3
 800fba0:	0800fca3 	.word	0x0800fca3
 800fba4:	0800fca3 	.word	0x0800fca3
 800fba8:	0800fc79 	.word	0x0800fc79
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800fbac:	f7ff f89a 	bl	800ece4 <HAL_RCC_GetPCLK1Freq>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	f04f 0200 	mov.w	r2, #0
 800fbb8:	f04f 0300 	mov.w	r3, #0
 800fbbc:	f04f 0400 	mov.w	r4, #0
 800fbc0:	0214      	lsls	r4, r2, #8
 800fbc2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800fbc6:	020b      	lsls	r3, r1, #8
 800fbc8:	687a      	ldr	r2, [r7, #4]
 800fbca:	6852      	ldr	r2, [r2, #4]
 800fbcc:	0852      	lsrs	r2, r2, #1
 800fbce:	4611      	mov	r1, r2
 800fbd0:	f04f 0200 	mov.w	r2, #0
 800fbd4:	eb13 0b01 	adds.w	fp, r3, r1
 800fbd8:	eb44 0c02 	adc.w	ip, r4, r2
 800fbdc:	4658      	mov	r0, fp
 800fbde:	4661      	mov	r1, ip
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	f04f 0400 	mov.w	r4, #0
 800fbe8:	461a      	mov	r2, r3
 800fbea:	4623      	mov	r3, r4
 800fbec:	f7f0 fb58 	bl	80002a0 <__aeabi_uldivmod>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800fbf6:	e057      	b.n	800fca8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	085b      	lsrs	r3, r3, #1
 800fbfe:	f04f 0400 	mov.w	r4, #0
 800fc02:	49b1      	ldr	r1, [pc, #708]	; (800fec8 <UART_SetConfig+0x68c>)
 800fc04:	f04f 0200 	mov.w	r2, #0
 800fc08:	eb13 0b01 	adds.w	fp, r3, r1
 800fc0c:	eb44 0c02 	adc.w	ip, r4, r2
 800fc10:	4658      	mov	r0, fp
 800fc12:	4661      	mov	r1, ip
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	f04f 0400 	mov.w	r4, #0
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	4623      	mov	r3, r4
 800fc20:	f7f0 fb3e 	bl	80002a0 <__aeabi_uldivmod>
 800fc24:	4603      	mov	r3, r0
 800fc26:	460c      	mov	r4, r1
 800fc28:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800fc2a:	e03d      	b.n	800fca8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800fc2c:	f7fe ffc4 	bl	800ebb8 <HAL_RCC_GetSysClockFreq>
 800fc30:	4603      	mov	r3, r0
 800fc32:	4619      	mov	r1, r3
 800fc34:	f04f 0200 	mov.w	r2, #0
 800fc38:	f04f 0300 	mov.w	r3, #0
 800fc3c:	f04f 0400 	mov.w	r4, #0
 800fc40:	0214      	lsls	r4, r2, #8
 800fc42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800fc46:	020b      	lsls	r3, r1, #8
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	6852      	ldr	r2, [r2, #4]
 800fc4c:	0852      	lsrs	r2, r2, #1
 800fc4e:	4611      	mov	r1, r2
 800fc50:	f04f 0200 	mov.w	r2, #0
 800fc54:	eb13 0b01 	adds.w	fp, r3, r1
 800fc58:	eb44 0c02 	adc.w	ip, r4, r2
 800fc5c:	4658      	mov	r0, fp
 800fc5e:	4661      	mov	r1, ip
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	f04f 0400 	mov.w	r4, #0
 800fc68:	461a      	mov	r2, r3
 800fc6a:	4623      	mov	r3, r4
 800fc6c:	f7f0 fb18 	bl	80002a0 <__aeabi_uldivmod>
 800fc70:	4603      	mov	r3, r0
 800fc72:	460c      	mov	r4, r1
 800fc74:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800fc76:	e017      	b.n	800fca8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	085b      	lsrs	r3, r3, #1
 800fc7e:	f04f 0400 	mov.w	r4, #0
 800fc82:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800fc86:	f144 0100 	adc.w	r1, r4, #0
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	f04f 0400 	mov.w	r4, #0
 800fc92:	461a      	mov	r2, r3
 800fc94:	4623      	mov	r3, r4
 800fc96:	f7f0 fb03 	bl	80002a0 <__aeabi_uldivmod>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	460c      	mov	r4, r1
 800fc9e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800fca0:	e002      	b.n	800fca8 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800fca2:	2301      	movs	r3, #1
 800fca4:	74fb      	strb	r3, [r7, #19]
            break;
 800fca6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fcae:	d308      	bcc.n	800fcc2 <UART_SetConfig+0x486>
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fcb6:	d204      	bcs.n	800fcc2 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	60da      	str	r2, [r3, #12]
 800fcc0:	e0f5      	b.n	800feae <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	74fb      	strb	r3, [r7, #19]
 800fcc6:	e0f2      	b.n	800feae <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	69db      	ldr	r3, [r3, #28]
 800fccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcd0:	d17f      	bne.n	800fdd2 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800fcd2:	7efb      	ldrb	r3, [r7, #27]
 800fcd4:	2b08      	cmp	r3, #8
 800fcd6:	d85c      	bhi.n	800fd92 <UART_SetConfig+0x556>
 800fcd8:	a201      	add	r2, pc, #4	; (adr r2, 800fce0 <UART_SetConfig+0x4a4>)
 800fcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcde:	bf00      	nop
 800fce0:	0800fd05 	.word	0x0800fd05
 800fce4:	0800fd23 	.word	0x0800fd23
 800fce8:	0800fd41 	.word	0x0800fd41
 800fcec:	0800fd93 	.word	0x0800fd93
 800fcf0:	0800fd5d 	.word	0x0800fd5d
 800fcf4:	0800fd93 	.word	0x0800fd93
 800fcf8:	0800fd93 	.word	0x0800fd93
 800fcfc:	0800fd93 	.word	0x0800fd93
 800fd00:	0800fd7b 	.word	0x0800fd7b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800fd04:	f7fe ffee 	bl	800ece4 <HAL_RCC_GetPCLK1Freq>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	005a      	lsls	r2, r3, #1
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	085b      	lsrs	r3, r3, #1
 800fd12:	441a      	add	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fd20:	e03a      	b.n	800fd98 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800fd22:	f7fe fff5 	bl	800ed10 <HAL_RCC_GetPCLK2Freq>
 800fd26:	4603      	mov	r3, r0
 800fd28:	005a      	lsls	r2, r3, #1
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	085b      	lsrs	r3, r3, #1
 800fd30:	441a      	add	r2, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fd3e:	e02b      	b.n	800fd98 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	085b      	lsrs	r3, r3, #1
 800fd46:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800fd4a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	6852      	ldr	r2, [r2, #4]
 800fd52:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fd5a:	e01d      	b.n	800fd98 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800fd5c:	f7fe ff2c 	bl	800ebb8 <HAL_RCC_GetSysClockFreq>
 800fd60:	4603      	mov	r3, r0
 800fd62:	005a      	lsls	r2, r3, #1
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	685b      	ldr	r3, [r3, #4]
 800fd68:	085b      	lsrs	r3, r3, #1
 800fd6a:	441a      	add	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fd78:	e00e      	b.n	800fd98 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	085b      	lsrs	r3, r3, #1
 800fd80:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fd90:	e002      	b.n	800fd98 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	74fb      	strb	r3, [r7, #19]
        break;
 800fd96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	2b0f      	cmp	r3, #15
 800fd9c:	d916      	bls.n	800fdcc <UART_SetConfig+0x590>
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fda4:	d212      	bcs.n	800fdcc <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	f023 030f 	bic.w	r3, r3, #15
 800fdae:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	085b      	lsrs	r3, r3, #1
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	f003 0307 	and.w	r3, r3, #7
 800fdba:	b29a      	uxth	r2, r3
 800fdbc:	897b      	ldrh	r3, [r7, #10]
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	897a      	ldrh	r2, [r7, #10]
 800fdc8:	60da      	str	r2, [r3, #12]
 800fdca:	e070      	b.n	800feae <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	74fb      	strb	r3, [r7, #19]
 800fdd0:	e06d      	b.n	800feae <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800fdd2:	7efb      	ldrb	r3, [r7, #27]
 800fdd4:	2b08      	cmp	r3, #8
 800fdd6:	d859      	bhi.n	800fe8c <UART_SetConfig+0x650>
 800fdd8:	a201      	add	r2, pc, #4	; (adr r2, 800fde0 <UART_SetConfig+0x5a4>)
 800fdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdde:	bf00      	nop
 800fde0:	0800fe05 	.word	0x0800fe05
 800fde4:	0800fe21 	.word	0x0800fe21
 800fde8:	0800fe3d 	.word	0x0800fe3d
 800fdec:	0800fe8d 	.word	0x0800fe8d
 800fdf0:	0800fe59 	.word	0x0800fe59
 800fdf4:	0800fe8d 	.word	0x0800fe8d
 800fdf8:	0800fe8d 	.word	0x0800fe8d
 800fdfc:	0800fe8d 	.word	0x0800fe8d
 800fe00:	0800fe75 	.word	0x0800fe75
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800fe04:	f7fe ff6e 	bl	800ece4 <HAL_RCC_GetPCLK1Freq>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	085b      	lsrs	r3, r3, #1
 800fe10:	441a      	add	r2, r3
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fe1e:	e038      	b.n	800fe92 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800fe20:	f7fe ff76 	bl	800ed10 <HAL_RCC_GetPCLK2Freq>
 800fe24:	4602      	mov	r2, r0
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	085b      	lsrs	r3, r3, #1
 800fe2c:	441a      	add	r2, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fe3a:	e02a      	b.n	800fe92 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	085b      	lsrs	r3, r3, #1
 800fe42:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800fe46:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	6852      	ldr	r2, [r2, #4]
 800fe4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fe56:	e01c      	b.n	800fe92 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800fe58:	f7fe feae 	bl	800ebb8 <HAL_RCC_GetSysClockFreq>
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	085b      	lsrs	r3, r3, #1
 800fe64:	441a      	add	r2, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fe72:	e00e      	b.n	800fe92 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	085b      	lsrs	r3, r3, #1
 800fe7a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800fe8a:	e002      	b.n	800fe92 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	74fb      	strb	r3, [r7, #19]
        break;
 800fe90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	2b0f      	cmp	r3, #15
 800fe96:	d908      	bls.n	800feaa <UART_SetConfig+0x66e>
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe9e:	d204      	bcs.n	800feaa <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	60da      	str	r2, [r3, #12]
 800fea8:	e001      	b.n	800feae <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800feaa:	2301      	movs	r3, #1
 800feac:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2200      	movs	r2, #0
 800feb2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800feba:	7cfb      	ldrb	r3, [r7, #19]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3720      	adds	r7, #32
 800fec0:	46bd      	mov	sp, r7
 800fec2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800fec6:	bf00      	nop
 800fec8:	f4240000 	.word	0xf4240000

0800fecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed8:	f003 0301 	and.w	r3, r3, #1
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d00a      	beq.n	800fef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	430a      	orrs	r2, r1
 800fef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefa:	f003 0302 	and.w	r3, r3, #2
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00a      	beq.n	800ff18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	430a      	orrs	r2, r1
 800ff16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1c:	f003 0304 	and.w	r3, r3, #4
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00a      	beq.n	800ff3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	430a      	orrs	r2, r1
 800ff38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3e:	f003 0308 	and.w	r3, r3, #8
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00a      	beq.n	800ff5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	430a      	orrs	r2, r1
 800ff5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff60:	f003 0310 	and.w	r3, r3, #16
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00a      	beq.n	800ff7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	689b      	ldr	r3, [r3, #8]
 800ff6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	430a      	orrs	r2, r1
 800ff7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff82:	f003 0320 	and.w	r3, r3, #32
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00a      	beq.n	800ffa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	430a      	orrs	r2, r1
 800ff9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d01a      	beq.n	800ffe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	430a      	orrs	r2, r1
 800ffc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffca:	d10a      	bne.n	800ffe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	430a      	orrs	r2, r1
 800ffe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00a      	beq.n	8010004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	430a      	orrs	r2, r1
 8010002:	605a      	str	r2, [r3, #4]
  }
}
 8010004:	bf00      	nop
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b086      	sub	sp, #24
 8010014:	af02      	add	r7, sp, #8
 8010016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801001e:	f7fc f959 	bl	800c2d4 <HAL_GetTick>
 8010022:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f003 0308 	and.w	r3, r3, #8
 801002e:	2b08      	cmp	r3, #8
 8010030:	d10e      	bne.n	8010050 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010032:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 f82a 	bl	801009a <UART_WaitOnFlagUntilTimeout>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d001      	beq.n	8010050 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801004c:	2303      	movs	r3, #3
 801004e:	e020      	b.n	8010092 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f003 0304 	and.w	r3, r3, #4
 801005a:	2b04      	cmp	r3, #4
 801005c:	d10e      	bne.n	801007c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801005e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010062:	9300      	str	r3, [sp, #0]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2200      	movs	r2, #0
 8010068:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f000 f814 	bl	801009a <UART_WaitOnFlagUntilTimeout>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d001      	beq.n	801007c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010078:	2303      	movs	r3, #3
 801007a:	e00a      	b.n	8010092 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2220      	movs	r2, #32
 8010080:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2220      	movs	r2, #32
 8010086:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8010090:	2300      	movs	r3, #0
}
 8010092:	4618      	mov	r0, r3
 8010094:	3710      	adds	r7, #16
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}

0801009a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801009a:	b580      	push	{r7, lr}
 801009c:	b084      	sub	sp, #16
 801009e:	af00      	add	r7, sp, #0
 80100a0:	60f8      	str	r0, [r7, #12]
 80100a2:	60b9      	str	r1, [r7, #8]
 80100a4:	603b      	str	r3, [r7, #0]
 80100a6:	4613      	mov	r3, r2
 80100a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100aa:	e02a      	b.n	8010102 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100ac:	69bb      	ldr	r3, [r7, #24]
 80100ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100b2:	d026      	beq.n	8010102 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100b4:	f7fc f90e 	bl	800c2d4 <HAL_GetTick>
 80100b8:	4602      	mov	r2, r0
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	1ad3      	subs	r3, r2, r3
 80100be:	69ba      	ldr	r2, [r7, #24]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d302      	bcc.n	80100ca <UART_WaitOnFlagUntilTimeout+0x30>
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d11b      	bne.n	8010102 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80100d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	689a      	ldr	r2, [r3, #8]
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f022 0201 	bic.w	r2, r2, #1
 80100e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2220      	movs	r2, #32
 80100ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2220      	movs	r2, #32
 80100f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2200      	movs	r2, #0
 80100fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80100fe:	2303      	movs	r3, #3
 8010100:	e00f      	b.n	8010122 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	69da      	ldr	r2, [r3, #28]
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	4013      	ands	r3, r2
 801010c:	68ba      	ldr	r2, [r7, #8]
 801010e:	429a      	cmp	r2, r3
 8010110:	bf0c      	ite	eq
 8010112:	2301      	moveq	r3, #1
 8010114:	2300      	movne	r3, #0
 8010116:	b2db      	uxtb	r3, r3
 8010118:	461a      	mov	r2, r3
 801011a:	79fb      	ldrb	r3, [r7, #7]
 801011c:	429a      	cmp	r2, r3
 801011e:	d0c5      	beq.n	80100ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010120:	2300      	movs	r3, #0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3710      	adds	r7, #16
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801012a:	b084      	sub	sp, #16
 801012c:	b580      	push	{r7, lr}
 801012e:	b084      	sub	sp, #16
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	f107 001c 	add.w	r0, r7, #28
 8010138:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013e:	2b01      	cmp	r3, #1
 8010140:	d122      	bne.n	8010188 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010146:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8010156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801016a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801016c:	2b01      	cmp	r3, #1
 801016e:	d105      	bne.n	801017c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 f937 	bl	80103f0 <USB_CoreReset>
 8010182:	4603      	mov	r3, r0
 8010184:	73fb      	strb	r3, [r7, #15]
 8010186:	e01a      	b.n	80101be <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 f92b 	bl	80103f0 <USB_CoreReset>
 801019a:	4603      	mov	r3, r0
 801019c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801019e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d106      	bne.n	80101b2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	639a      	str	r2, [r3, #56]	; 0x38
 80101b0:	e005      	b.n	80101be <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80101be:	7bfb      	ldrb	r3, [r7, #15]
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80101ca:	b004      	add	sp, #16
 80101cc:	4770      	bx	lr

080101ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80101ce:	b480      	push	{r7}
 80101d0:	b083      	sub	sp, #12
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	f043 0201 	orr.w	r2, r3, #1
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	f023 0201 	bic.w	r2, r3, #1
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr

08010212 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8010212:	b580      	push	{r7, lr}
 8010214:	b082      	sub	sp, #8
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	460b      	mov	r3, r1
 801021c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801022a:	78fb      	ldrb	r3, [r7, #3]
 801022c:	2b01      	cmp	r3, #1
 801022e:	d106      	bne.n	801023e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	68db      	ldr	r3, [r3, #12]
 8010234:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	60da      	str	r2, [r3, #12]
 801023c:	e00b      	b.n	8010256 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801023e:	78fb      	ldrb	r3, [r7, #3]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d106      	bne.n	8010252 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	60da      	str	r2, [r3, #12]
 8010250:	e001      	b.n	8010256 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010252:	2301      	movs	r3, #1
 8010254:	e003      	b.n	801025e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010256:	2032      	movs	r0, #50	; 0x32
 8010258:	f7fc f848 	bl	800c2ec <HAL_Delay>

  return HAL_OK;
 801025c:	2300      	movs	r3, #0
}
 801025e:	4618      	mov	r0, r3
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
	...

08010268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010272:	2300      	movs	r3, #0
 8010274:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	019b      	lsls	r3, r3, #6
 801027a:	f043 0220 	orr.w	r2, r3, #32
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	3301      	adds	r3, #1
 8010286:	60fb      	str	r3, [r7, #12]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	4a09      	ldr	r2, [pc, #36]	; (80102b0 <USB_FlushTxFifo+0x48>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d901      	bls.n	8010294 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010290:	2303      	movs	r3, #3
 8010292:	e006      	b.n	80102a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	691b      	ldr	r3, [r3, #16]
 8010298:	f003 0320 	and.w	r3, r3, #32
 801029c:	2b20      	cmp	r3, #32
 801029e:	d0f0      	beq.n	8010282 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80102a0:	2300      	movs	r3, #0
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3714      	adds	r7, #20
 80102a6:	46bd      	mov	sp, r7
 80102a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ac:	4770      	bx	lr
 80102ae:	bf00      	nop
 80102b0:	00030d40 	.word	0x00030d40

080102b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b085      	sub	sp, #20
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80102bc:	2300      	movs	r3, #0
 80102be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2210      	movs	r2, #16
 80102c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	3301      	adds	r3, #1
 80102ca:	60fb      	str	r3, [r7, #12]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	4a09      	ldr	r2, [pc, #36]	; (80102f4 <USB_FlushRxFifo+0x40>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d901      	bls.n	80102d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80102d4:	2303      	movs	r3, #3
 80102d6:	e006      	b.n	80102e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	691b      	ldr	r3, [r3, #16]
 80102dc:	f003 0310 	and.w	r3, r3, #16
 80102e0:	2b10      	cmp	r3, #16
 80102e2:	d0f0      	beq.n	80102c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80102e4:	2300      	movs	r3, #0
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	00030d40 	.word	0x00030d40

080102f8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b089      	sub	sp, #36	; 0x24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	4611      	mov	r1, r2
 8010304:	461a      	mov	r2, r3
 8010306:	460b      	mov	r3, r1
 8010308:	71fb      	strb	r3, [r7, #7]
 801030a:	4613      	mov	r3, r2
 801030c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8010316:	88bb      	ldrh	r3, [r7, #4]
 8010318:	3303      	adds	r3, #3
 801031a:	089b      	lsrs	r3, r3, #2
 801031c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 801031e:	2300      	movs	r3, #0
 8010320:	61bb      	str	r3, [r7, #24]
 8010322:	e00f      	b.n	8010344 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010324:	79fb      	ldrb	r3, [r7, #7]
 8010326:	031a      	lsls	r2, r3, #12
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	4413      	add	r3, r2
 801032c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010330:	461a      	mov	r2, r3
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	6013      	str	r3, [r2, #0]
    pSrc++;
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	3304      	adds	r3, #4
 801033c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	3301      	adds	r3, #1
 8010342:	61bb      	str	r3, [r7, #24]
 8010344:	69ba      	ldr	r2, [r7, #24]
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	429a      	cmp	r2, r3
 801034a:	d3eb      	bcc.n	8010324 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3724      	adds	r7, #36	; 0x24
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801035a:	b480      	push	{r7}
 801035c:	b089      	sub	sp, #36	; 0x24
 801035e:	af00      	add	r7, sp, #0
 8010360:	60f8      	str	r0, [r7, #12]
 8010362:	60b9      	str	r1, [r7, #8]
 8010364:	4613      	mov	r3, r2
 8010366:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010370:	88fb      	ldrh	r3, [r7, #6]
 8010372:	3303      	adds	r3, #3
 8010374:	089b      	lsrs	r3, r3, #2
 8010376:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010378:	2300      	movs	r3, #0
 801037a:	61bb      	str	r3, [r7, #24]
 801037c:	e00b      	b.n	8010396 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	601a      	str	r2, [r3, #0]
    pDest++;
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	3304      	adds	r3, #4
 801038e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	3301      	adds	r3, #1
 8010394:	61bb      	str	r3, [r7, #24]
 8010396:	69ba      	ldr	r2, [r7, #24]
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	429a      	cmp	r2, r3
 801039c:	d3ef      	bcc.n	801037e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801039e:	69fb      	ldr	r3, [r7, #28]
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3724      	adds	r7, #36	; 0x24
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80103ac:	b480      	push	{r7}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	695b      	ldr	r3, [r3, #20]
 80103b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	699b      	ldr	r3, [r3, #24]
 80103be:	68fa      	ldr	r2, [r7, #12]
 80103c0:	4013      	ands	r3, r2
 80103c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80103c4:	68fb      	ldr	r3, [r7, #12]
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3714      	adds	r7, #20
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr

080103d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80103d2:	b480      	push	{r7}
 80103d4:	b083      	sub	sp, #12
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	695b      	ldr	r3, [r3, #20]
 80103de:	f003 0301 	and.w	r3, r3, #1
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	370c      	adds	r7, #12
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
	...

080103f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b085      	sub	sp, #20
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80103f8:	2300      	movs	r3, #0
 80103fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	3301      	adds	r3, #1
 8010400:	60fb      	str	r3, [r7, #12]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	4a13      	ldr	r2, [pc, #76]	; (8010454 <USB_CoreReset+0x64>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d901      	bls.n	801040e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801040a:	2303      	movs	r3, #3
 801040c:	e01b      	b.n	8010446 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	2b00      	cmp	r3, #0
 8010414:	daf2      	bge.n	80103fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010416:	2300      	movs	r3, #0
 8010418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	691b      	ldr	r3, [r3, #16]
 801041e:	f043 0201 	orr.w	r2, r3, #1
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	3301      	adds	r3, #1
 801042a:	60fb      	str	r3, [r7, #12]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	4a09      	ldr	r2, [pc, #36]	; (8010454 <USB_CoreReset+0x64>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d901      	bls.n	8010438 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010434:	2303      	movs	r3, #3
 8010436:	e006      	b.n	8010446 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	691b      	ldr	r3, [r3, #16]
 801043c:	f003 0301 	and.w	r3, r3, #1
 8010440:	2b01      	cmp	r3, #1
 8010442:	d0f0      	beq.n	8010426 <USB_CoreReset+0x36>

  return HAL_OK;
 8010444:	2300      	movs	r3, #0
}
 8010446:	4618      	mov	r0, r3
 8010448:	3714      	adds	r7, #20
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	00030d40 	.word	0x00030d40

08010458 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010458:	b084      	sub	sp, #16
 801045a:	b580      	push	{r7, lr}
 801045c:	b084      	sub	sp, #16
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
 8010462:	f107 001c 	add.w	r0, r7, #28
 8010466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010474:	461a      	mov	r2, r3
 8010476:	2300      	movs	r3, #0
 8010478:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801047e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801048a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80104a0:	f023 0304 	bic.w	r3, r3, #4
 80104a4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80104a6:	2110      	movs	r1, #16
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff fedd 	bl	8010268 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7ff ff00 	bl	80102b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80104b4:	2300      	movs	r3, #0
 80104b6:	60fb      	str	r3, [r7, #12]
 80104b8:	e015      	b.n	80104e6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	015a      	lsls	r2, r3, #5
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	4413      	add	r3, r2
 80104c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104c6:	461a      	mov	r2, r3
 80104c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104cc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	015a      	lsls	r2, r3, #5
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	4413      	add	r3, r2
 80104d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80104da:	461a      	mov	r2, r3
 80104dc:	2300      	movs	r3, #0
 80104de:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	3301      	adds	r3, #1
 80104e4:	60fb      	str	r3, [r7, #12]
 80104e6:	6a3b      	ldr	r3, [r7, #32]
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d3e5      	bcc.n	80104ba <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80104ee:	2101      	movs	r1, #1
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 f893 	bl	801061c <USB_DriveVbus>

  HAL_Delay(200U);
 80104f6:	20c8      	movs	r0, #200	; 0xc8
 80104f8:	f7fb fef8 	bl	800c2ec <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010508:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2280      	movs	r2, #128	; 0x80
 801050e:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	4a0d      	ldr	r2, [pc, #52]	; (8010548 <USB_HostInit+0xf0>)
 8010514:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4a0c      	ldr	r2, [pc, #48]	; (801054c <USB_HostInit+0xf4>)
 801051a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	699b      	ldr	r3, [r3, #24]
 8010522:	f043 0210 	orr.w	r2, r3, #16
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	699a      	ldr	r2, [r3, #24]
 801052e:	4b08      	ldr	r3, [pc, #32]	; (8010550 <USB_HostInit+0xf8>)
 8010530:	4313      	orrs	r3, r2
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8010536:	2300      	movs	r3, #0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3710      	adds	r7, #16
 801053c:	46bd      	mov	sp, r7
 801053e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010542:	b004      	add	sp, #16
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	00600080 	.word	0x00600080
 801054c:	004000e0 	.word	0x004000e0
 8010550:	a3200008 	.word	0xa3200008

08010554 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010554:	b480      	push	{r7}
 8010556:	b085      	sub	sp, #20
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	460b      	mov	r3, r1
 801055e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010572:	f023 0303 	bic.w	r3, r3, #3
 8010576:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	78fb      	ldrb	r3, [r7, #3]
 8010582:	f003 0303 	and.w	r3, r3, #3
 8010586:	68f9      	ldr	r1, [r7, #12]
 8010588:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801058c:	4313      	orrs	r3, r2
 801058e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010590:	78fb      	ldrb	r3, [r7, #3]
 8010592:	2b01      	cmp	r3, #1
 8010594:	d107      	bne.n	80105a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801059c:	461a      	mov	r2, r3
 801059e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80105a2:	6053      	str	r3, [r2, #4]
 80105a4:	e009      	b.n	80105ba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80105a6:	78fb      	ldrb	r3, [r7, #3]
 80105a8:	2b02      	cmp	r3, #2
 80105aa:	d106      	bne.n	80105ba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80105b2:	461a      	mov	r2, r3
 80105b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80105b8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3714      	adds	r7, #20
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80105d4:	2300      	movs	r3, #0
 80105d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80105e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	68fa      	ldr	r2, [r7, #12]
 80105ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80105f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80105f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80105f8:	2064      	movs	r0, #100	; 0x64
 80105fa:	f7fb fe77 	bl	800c2ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801060a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 801060c:	200a      	movs	r0, #10
 801060e:	f7fb fe6d 	bl	800c2ec <HAL_Delay>

  return HAL_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 801061c:	b480      	push	{r7}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	460b      	mov	r3, r1
 8010626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801062c:	2300      	movs	r3, #0
 801062e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010640:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010648:	2b00      	cmp	r3, #0
 801064a:	d109      	bne.n	8010660 <USB_DriveVbus+0x44>
 801064c:	78fb      	ldrb	r3, [r7, #3]
 801064e:	2b01      	cmp	r3, #1
 8010650:	d106      	bne.n	8010660 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801065a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801065e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801066a:	d109      	bne.n	8010680 <USB_DriveVbus+0x64>
 801066c:	78fb      	ldrb	r3, [r7, #3]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d106      	bne.n	8010680 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	68fa      	ldr	r2, [r7, #12]
 8010676:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801067a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801067e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	3714      	adds	r7, #20
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr

0801068e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801068e:	b480      	push	{r7}
 8010690:	b085      	sub	sp, #20
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801069a:	2300      	movs	r3, #0
 801069c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	0c5b      	lsrs	r3, r3, #17
 80106ac:	f003 0303 	and.w	r3, r3, #3
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3714      	adds	r7, #20
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80106bc:	b480      	push	{r7}
 80106be:	b085      	sub	sp, #20
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	b29b      	uxth	r3, r3
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3714      	adds	r7, #20
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr
	...

080106e0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b087      	sub	sp, #28
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	4608      	mov	r0, r1
 80106ea:	4611      	mov	r1, r2
 80106ec:	461a      	mov	r2, r3
 80106ee:	4603      	mov	r3, r0
 80106f0:	70fb      	strb	r3, [r7, #3]
 80106f2:	460b      	mov	r3, r1
 80106f4:	70bb      	strb	r3, [r7, #2]
 80106f6:	4613      	mov	r3, r2
 80106f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80106fa:	2300      	movs	r3, #0
 80106fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8010702:	78fb      	ldrb	r3, [r7, #3]
 8010704:	015a      	lsls	r2, r3, #5
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	4413      	add	r3, r2
 801070a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801070e:	461a      	mov	r2, r3
 8010710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010714:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8010716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801071a:	2b03      	cmp	r3, #3
 801071c:	d867      	bhi.n	80107ee <USB_HC_Init+0x10e>
 801071e:	a201      	add	r2, pc, #4	; (adr r2, 8010724 <USB_HC_Init+0x44>)
 8010720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010724:	08010735 	.word	0x08010735
 8010728:	080107b1 	.word	0x080107b1
 801072c:	08010735 	.word	0x08010735
 8010730:	08010773 	.word	0x08010773
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010734:	78fb      	ldrb	r3, [r7, #3]
 8010736:	015a      	lsls	r2, r3, #5
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	4413      	add	r3, r2
 801073c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010740:	461a      	mov	r2, r3
 8010742:	f240 439d 	movw	r3, #1181	; 0x49d
 8010746:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8010748:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801074c:	2b00      	cmp	r3, #0
 801074e:	da51      	bge.n	80107f4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010750:	78fb      	ldrb	r3, [r7, #3]
 8010752:	015a      	lsls	r2, r3, #5
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	4413      	add	r3, r2
 8010758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	78fa      	ldrb	r2, [r7, #3]
 8010760:	0151      	lsls	r1, r2, #5
 8010762:	68ba      	ldr	r2, [r7, #8]
 8010764:	440a      	add	r2, r1
 8010766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801076a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801076e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8010770:	e040      	b.n	80107f4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010772:	78fb      	ldrb	r3, [r7, #3]
 8010774:	015a      	lsls	r2, r3, #5
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	4413      	add	r3, r2
 801077a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801077e:	461a      	mov	r2, r3
 8010780:	f240 639d 	movw	r3, #1693	; 0x69d
 8010784:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010786:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801078a:	2b00      	cmp	r3, #0
 801078c:	da34      	bge.n	80107f8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 801078e:	78fb      	ldrb	r3, [r7, #3]
 8010790:	015a      	lsls	r2, r3, #5
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	4413      	add	r3, r2
 8010796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801079a:	68db      	ldr	r3, [r3, #12]
 801079c:	78fa      	ldrb	r2, [r7, #3]
 801079e:	0151      	lsls	r1, r2, #5
 80107a0:	68ba      	ldr	r2, [r7, #8]
 80107a2:	440a      	add	r2, r1
 80107a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80107a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80107ac:	60d3      	str	r3, [r2, #12]
      }

      break;
 80107ae:	e023      	b.n	80107f8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80107b0:	78fb      	ldrb	r3, [r7, #3]
 80107b2:	015a      	lsls	r2, r3, #5
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	4413      	add	r3, r2
 80107b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80107bc:	461a      	mov	r2, r3
 80107be:	f240 2325 	movw	r3, #549	; 0x225
 80107c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80107c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	da17      	bge.n	80107fc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80107cc:	78fb      	ldrb	r3, [r7, #3]
 80107ce:	015a      	lsls	r2, r3, #5
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	4413      	add	r3, r2
 80107d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	78fa      	ldrb	r2, [r7, #3]
 80107dc:	0151      	lsls	r1, r2, #5
 80107de:	68ba      	ldr	r2, [r7, #8]
 80107e0:	440a      	add	r2, r1
 80107e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80107e6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80107ea:	60d3      	str	r3, [r2, #12]
      }
      break;
 80107ec:	e006      	b.n	80107fc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	75fb      	strb	r3, [r7, #23]
      break;
 80107f2:	e004      	b.n	80107fe <USB_HC_Init+0x11e>
      break;
 80107f4:	bf00      	nop
 80107f6:	e002      	b.n	80107fe <USB_HC_Init+0x11e>
      break;
 80107f8:	bf00      	nop
 80107fa:	e000      	b.n	80107fe <USB_HC_Init+0x11e>
      break;
 80107fc:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010804:	699a      	ldr	r2, [r3, #24]
 8010806:	78fb      	ldrb	r3, [r7, #3]
 8010808:	f003 030f 	and.w	r3, r3, #15
 801080c:	2101      	movs	r1, #1
 801080e:	fa01 f303 	lsl.w	r3, r1, r3
 8010812:	68b9      	ldr	r1, [r7, #8]
 8010814:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010818:	4313      	orrs	r3, r2
 801081a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	699b      	ldr	r3, [r3, #24]
 8010820:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8010828:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801082c:	2b00      	cmp	r3, #0
 801082e:	da03      	bge.n	8010838 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8010830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010834:	613b      	str	r3, [r7, #16]
 8010836:	e001      	b.n	801083c <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8010838:	2300      	movs	r3, #0
 801083a:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 801083c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010840:	2b02      	cmp	r3, #2
 8010842:	d103      	bne.n	801084c <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8010844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010848:	60fb      	str	r3, [r7, #12]
 801084a:	e001      	b.n	8010850 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801084c:	2300      	movs	r3, #0
 801084e:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010850:	787b      	ldrb	r3, [r7, #1]
 8010852:	059b      	lsls	r3, r3, #22
 8010854:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010858:	78bb      	ldrb	r3, [r7, #2]
 801085a:	02db      	lsls	r3, r3, #11
 801085c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010860:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010862:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010866:	049b      	lsls	r3, r3, #18
 8010868:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801086c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801086e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010870:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010874:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801087a:	78fb      	ldrb	r3, [r7, #3]
 801087c:	0159      	lsls	r1, r3, #5
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	440b      	add	r3, r1
 8010882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010886:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801088c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 801088e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010892:	2b03      	cmp	r3, #3
 8010894:	d10f      	bne.n	80108b6 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8010896:	78fb      	ldrb	r3, [r7, #3]
 8010898:	015a      	lsls	r2, r3, #5
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	4413      	add	r3, r2
 801089e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	78fa      	ldrb	r2, [r7, #3]
 80108a6:	0151      	lsls	r1, r2, #5
 80108a8:	68ba      	ldr	r2, [r7, #8]
 80108aa:	440a      	add	r2, r1
 80108ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80108b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80108b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80108b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	371c      	adds	r7, #28
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr

080108c4 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b088      	sub	sp, #32
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	785b      	ldrb	r3, [r3, #1]
 80108d6:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80108d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108dc:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	691b      	ldr	r3, [r3, #16]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d018      	beq.n	8010918 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	691b      	ldr	r3, [r3, #16]
 80108ea:	683a      	ldr	r2, [r7, #0]
 80108ec:	8912      	ldrh	r2, [r2, #8]
 80108ee:	4413      	add	r3, r2
 80108f0:	3b01      	subs	r3, #1
 80108f2:	683a      	ldr	r2, [r7, #0]
 80108f4:	8912      	ldrh	r2, [r2, #8]
 80108f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80108fa:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80108fc:	8bfa      	ldrh	r2, [r7, #30]
 80108fe:	8a7b      	ldrh	r3, [r7, #18]
 8010900:	429a      	cmp	r2, r3
 8010902:	d90b      	bls.n	801091c <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8010904:	8a7b      	ldrh	r3, [r7, #18]
 8010906:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8010908:	8bfb      	ldrh	r3, [r7, #30]
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	8912      	ldrh	r2, [r2, #8]
 801090e:	fb02 f203 	mul.w	r2, r2, r3
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	611a      	str	r2, [r3, #16]
 8010916:	e001      	b.n	801091c <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8010918:	2301      	movs	r3, #1
 801091a:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	78db      	ldrb	r3, [r3, #3]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d006      	beq.n	8010932 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8010924:	8bfb      	ldrh	r3, [r7, #30]
 8010926:	683a      	ldr	r2, [r7, #0]
 8010928:	8912      	ldrh	r2, [r2, #8]
 801092a:	fb02 f203 	mul.w	r2, r2, r3
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	691b      	ldr	r3, [r3, #16]
 8010936:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801093a:	8bfb      	ldrh	r3, [r7, #30]
 801093c:	04d9      	lsls	r1, r3, #19
 801093e:	4b5f      	ldr	r3, [pc, #380]	; (8010abc <USB_HC_StartXfer+0x1f8>)
 8010940:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8010942:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	7a9b      	ldrb	r3, [r3, #10]
 8010948:	075b      	lsls	r3, r3, #29
 801094a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801094e:	6979      	ldr	r1, [r7, #20]
 8010950:	0148      	lsls	r0, r1, #5
 8010952:	69b9      	ldr	r1, [r7, #24]
 8010954:	4401      	add	r1, r0
 8010956:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 801095a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801095c:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801095e:	69bb      	ldr	r3, [r7, #24]
 8010960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010964:	689b      	ldr	r3, [r3, #8]
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	bf0c      	ite	eq
 801096e:	2301      	moveq	r3, #1
 8010970:	2300      	movne	r3, #0
 8010972:	b2db      	uxtb	r3, r3
 8010974:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	015a      	lsls	r2, r3, #5
 801097a:	69bb      	ldr	r3, [r7, #24]
 801097c:	4413      	add	r3, r2
 801097e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	697a      	ldr	r2, [r7, #20]
 8010986:	0151      	lsls	r1, r2, #5
 8010988:	69ba      	ldr	r2, [r7, #24]
 801098a:	440a      	add	r2, r1
 801098c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010990:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010994:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	015a      	lsls	r2, r3, #5
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	4413      	add	r3, r2
 801099e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	7c7b      	ldrb	r3, [r7, #17]
 80109a6:	075b      	lsls	r3, r3, #29
 80109a8:	6979      	ldr	r1, [r7, #20]
 80109aa:	0148      	lsls	r0, r1, #5
 80109ac:	69b9      	ldr	r1, [r7, #24]
 80109ae:	4401      	add	r1, r0
 80109b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80109b4:	4313      	orrs	r3, r2
 80109b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	015a      	lsls	r2, r3, #5
 80109bc:	69bb      	ldr	r3, [r7, #24]
 80109be:	4413      	add	r3, r2
 80109c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a3e      	ldr	r2, [pc, #248]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 80109c8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80109ca:	4b3d      	ldr	r3, [pc, #244]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80109d2:	4a3b      	ldr	r2, [pc, #236]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 80109d4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	78db      	ldrb	r3, [r3, #3]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d006      	beq.n	80109ec <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80109de:	4b38      	ldr	r3, [pc, #224]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80109e6:	4a36      	ldr	r2, [pc, #216]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 80109e8:	6013      	str	r3, [r2, #0]
 80109ea:	e005      	b.n	80109f8 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80109ec:	4b34      	ldr	r3, [pc, #208]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80109f4:	4a32      	ldr	r2, [pc, #200]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 80109f6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80109f8:	4b31      	ldr	r3, [pc, #196]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010a00:	4a2f      	ldr	r2, [pc, #188]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 8010a02:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	015a      	lsls	r2, r3, #5
 8010a08:	69bb      	ldr	r3, [r7, #24]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010a10:	461a      	mov	r2, r3
 8010a12:	4b2b      	ldr	r3, [pc, #172]	; (8010ac0 <USB_HC_StartXfer+0x1fc>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	78db      	ldrb	r3, [r3, #3]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d148      	bne.n	8010ab2 <USB_HC_StartXfer+0x1ee>
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	691b      	ldr	r3, [r3, #16]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d044      	beq.n	8010ab2 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	79db      	ldrb	r3, [r3, #7]
 8010a2c:	2b03      	cmp	r3, #3
 8010a2e:	d831      	bhi.n	8010a94 <USB_HC_StartXfer+0x1d0>
 8010a30:	a201      	add	r2, pc, #4	; (adr r2, 8010a38 <USB_HC_StartXfer+0x174>)
 8010a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a36:	bf00      	nop
 8010a38:	08010a49 	.word	0x08010a49
 8010a3c:	08010a6d 	.word	0x08010a6d
 8010a40:	08010a49 	.word	0x08010a49
 8010a44:	08010a6d 	.word	0x08010a6d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	691b      	ldr	r3, [r3, #16]
 8010a4c:	3303      	adds	r3, #3
 8010a4e:	089b      	lsrs	r3, r3, #2
 8010a50:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8010a52:	89fa      	ldrh	r2, [r7, #14]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d91c      	bls.n	8010a98 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	699b      	ldr	r3, [r3, #24]
 8010a62:	f043 0220 	orr.w	r2, r3, #32
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	619a      	str	r2, [r3, #24]
          }
          break;
 8010a6a:	e015      	b.n	8010a98 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	691b      	ldr	r3, [r3, #16]
 8010a70:	3303      	adds	r3, #3
 8010a72:	089b      	lsrs	r3, r3, #2
 8010a74:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8010a76:	89fa      	ldrh	r2, [r7, #14]
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010a7e:	691b      	ldr	r3, [r3, #16]
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d90a      	bls.n	8010a9c <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	699b      	ldr	r3, [r3, #24]
 8010a8a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	619a      	str	r2, [r3, #24]
          }
          break;
 8010a92:	e003      	b.n	8010a9c <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8010a94:	bf00      	nop
 8010a96:	e002      	b.n	8010a9e <USB_HC_StartXfer+0x1da>
          break;
 8010a98:	bf00      	nop
 8010a9a:	e000      	b.n	8010a9e <USB_HC_StartXfer+0x1da>
          break;
 8010a9c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	68d9      	ldr	r1, [r3, #12]
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	785a      	ldrb	r2, [r3, #1]
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	691b      	ldr	r3, [r3, #16]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f7ff fc23 	bl	80102f8 <USB_WritePacket>
    }

  return HAL_OK;
 8010ab2:	2300      	movs	r3, #0
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3720      	adds	r7, #32
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	1ff80000 	.word	0x1ff80000
 8010ac0:	20000140 	.word	0x20000140

08010ac4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010ad6:	695b      	ldr	r3, [r3, #20]
 8010ad8:	b29b      	uxth	r3, r3
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3714      	adds	r7, #20
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr

08010ae6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8010ae6:	b480      	push	{r7}
 8010ae8:	b087      	sub	sp, #28
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	460b      	mov	r3, r1
 8010af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8010af6:	78fb      	ldrb	r3, [r7, #3]
 8010af8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8010afa:	2300      	movs	r3, #0
 8010afc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	015a      	lsls	r2, r3, #5
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	4413      	add	r3, r2
 8010b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	0c9b      	lsrs	r3, r3, #18
 8010b0e:	f003 0303 	and.w	r3, r3, #3
 8010b12:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d002      	beq.n	8010b20 <USB_HC_Halt+0x3a>
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	2b02      	cmp	r3, #2
 8010b1e:	d16c      	bne.n	8010bfa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	015a      	lsls	r2, r3, #5
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	4413      	add	r3, r2
 8010b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	0151      	lsls	r1, r2, #5
 8010b32:	693a      	ldr	r2, [r7, #16]
 8010b34:	440a      	add	r2, r1
 8010b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010b3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010b3e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d143      	bne.n	8010bd4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	015a      	lsls	r2, r3, #5
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	4413      	add	r3, r2
 8010b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	0151      	lsls	r1, r2, #5
 8010b5e:	693a      	ldr	r2, [r7, #16]
 8010b60:	440a      	add	r2, r1
 8010b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	015a      	lsls	r2, r3, #5
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	4413      	add	r3, r2
 8010b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	68fa      	ldr	r2, [r7, #12]
 8010b7c:	0151      	lsls	r1, r2, #5
 8010b7e:	693a      	ldr	r2, [r7, #16]
 8010b80:	440a      	add	r2, r1
 8010b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	015a      	lsls	r2, r3, #5
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	4413      	add	r3, r2
 8010b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	68fa      	ldr	r2, [r7, #12]
 8010b9c:	0151      	lsls	r1, r2, #5
 8010b9e:	693a      	ldr	r2, [r7, #16]
 8010ba0:	440a      	add	r2, r1
 8010ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010ba6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010baa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	617b      	str	r3, [r7, #20]
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010bb8:	d81d      	bhi.n	8010bf6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	015a      	lsls	r2, r3, #5
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	4413      	add	r3, r2
 8010bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010bd0:	d0ec      	beq.n	8010bac <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8010bd2:	e080      	b.n	8010cd6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	015a      	lsls	r2, r3, #5
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	4413      	add	r3, r2
 8010bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	0151      	lsls	r1, r2, #5
 8010be6:	693a      	ldr	r2, [r7, #16]
 8010be8:	440a      	add	r2, r1
 8010bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bf2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8010bf4:	e06f      	b.n	8010cd6 <USB_HC_Halt+0x1f0>
          break;
 8010bf6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8010bf8:	e06d      	b.n	8010cd6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	015a      	lsls	r2, r3, #5
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	4413      	add	r3, r2
 8010c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	0151      	lsls	r1, r2, #5
 8010c0c:	693a      	ldr	r2, [r7, #16]
 8010c0e:	440a      	add	r2, r1
 8010c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010c14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010c18:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010c20:	691b      	ldr	r3, [r3, #16]
 8010c22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d143      	bne.n	8010cb2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	015a      	lsls	r2, r3, #5
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	4413      	add	r3, r2
 8010c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	0151      	lsls	r1, r2, #5
 8010c3c:	693a      	ldr	r2, [r7, #16]
 8010c3e:	440a      	add	r2, r1
 8010c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c48:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	015a      	lsls	r2, r3, #5
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	4413      	add	r3, r2
 8010c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	68fa      	ldr	r2, [r7, #12]
 8010c5a:	0151      	lsls	r1, r2, #5
 8010c5c:	693a      	ldr	r2, [r7, #16]
 8010c5e:	440a      	add	r2, r1
 8010c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010c68:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	015a      	lsls	r2, r3, #5
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	4413      	add	r3, r2
 8010c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	0151      	lsls	r1, r2, #5
 8010c7c:	693a      	ldr	r2, [r7, #16]
 8010c7e:	440a      	add	r2, r1
 8010c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010c84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010c88:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	617b      	str	r3, [r7, #20]
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010c96:	d81d      	bhi.n	8010cd4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	015a      	lsls	r2, r3, #5
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010cae:	d0ec      	beq.n	8010c8a <USB_HC_Halt+0x1a4>
 8010cb0:	e011      	b.n	8010cd6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	015a      	lsls	r2, r3, #5
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	4413      	add	r3, r2
 8010cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	0151      	lsls	r1, r2, #5
 8010cc4:	693a      	ldr	r2, [r7, #16]
 8010cc6:	440a      	add	r2, r1
 8010cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010ccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010cd0:	6013      	str	r3, [r2, #0]
 8010cd2:	e000      	b.n	8010cd6 <USB_HC_Halt+0x1f0>
          break;
 8010cd4:	bf00      	nop
    }
  }

  return HAL_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	371c      	adds	r7, #28
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr

08010ce4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b086      	sub	sp, #24
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7ff fa7b 	bl	80101f0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8010cfa:	2110      	movs	r1, #16
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f7ff fab3 	bl	8010268 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f7ff fad6 	bl	80102b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8010d08:	2300      	movs	r3, #0
 8010d0a:	613b      	str	r3, [r7, #16]
 8010d0c:	e01f      	b.n	8010d4e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	4413      	add	r3, r2
 8010d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010d34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	015a      	lsls	r2, r3, #5
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	4413      	add	r3, r2
 8010d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d42:	461a      	mov	r2, r3
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	613b      	str	r3, [r7, #16]
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	2b0f      	cmp	r3, #15
 8010d52:	d9dc      	bls.n	8010d0e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010d54:	2300      	movs	r3, #0
 8010d56:	613b      	str	r3, [r7, #16]
 8010d58:	e034      	b.n	8010dc4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	015a      	lsls	r2, r3, #5
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	4413      	add	r3, r2
 8010d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010d78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010d80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	015a      	lsls	r2, r3, #5
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	4413      	add	r3, r2
 8010d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d8e:	461a      	mov	r2, r3
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	3301      	adds	r3, #1
 8010d98:	617b      	str	r3, [r7, #20]
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010da0:	d80c      	bhi.n	8010dbc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	015a      	lsls	r2, r3, #5
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	4413      	add	r3, r2
 8010daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010db8:	d0ec      	beq.n	8010d94 <USB_StopHost+0xb0>
 8010dba:	e000      	b.n	8010dbe <USB_StopHost+0xda>
        break;
 8010dbc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	613b      	str	r3, [r7, #16]
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	2b0f      	cmp	r3, #15
 8010dc8:	d9c7      	bls.n	8010d5a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010dde:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7ff f9f4 	bl	80101ce <USB_EnableGlobalInt>

  return HAL_OK;
 8010de6:	2300      	movs	r3, #0
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3718      	adds	r7, #24
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8010df0:	b590      	push	{r4, r7, lr}
 8010df2:	b08b      	sub	sp, #44	; 0x2c
 8010df4:	af04      	add	r7, sp, #16
 8010df6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8010df8:	2302      	movs	r3, #2
 8010dfa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef out_status, in_status ;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8010e00:	2300      	movs	r3, #0
 8010e02:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8010e04:	2300      	movs	r3, #0
 8010e06:	2201      	movs	r2, #1
 8010e08:	2101      	movs	r1, #1
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f001 ffec 	bl	8012de8 <USBH_FindInterface>
 8010e10:	4603      	mov	r3, r0
 8010e12:	747b      	strb	r3, [r7, #17]

  if(interface == 0xFFU) /* Not Valid Interface */
 8010e14:	7c7b      	ldrb	r3, [r7, #17]
 8010e16:	2bff      	cmp	r3, #255	; 0xff
 8010e18:	d102      	bne.n	8010e20 <USBH_AUDIO_InterfaceInit+0x30>
  {
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    status = USBH_FAIL;
 8010e1a:	2302      	movs	r3, #2
 8010e1c:	75fb      	strb	r3, [r7, #23]
 8010e1e:	e1a0      	b.n	8011162 <USBH_AUDIO_InterfaceInit+0x372>
  }
  else
  {


    phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc (sizeof(AUDIO_HandleTypeDef));
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f8d3 4448 	ldr.w	r4, [r3, #1096]	; 0x448
 8010e26:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8010e2a:	f007 fa1d 	bl	8018268 <malloc>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	61e3      	str	r3, [r4, #28]
    AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8010e38:	69db      	ldr	r3, [r3, #28]
 8010e3a:	60fb      	str	r3, [r7, #12]
    USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8010e3c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8010e40:	2100      	movs	r1, #0
 8010e42:	68f8      	ldr	r0, [r7, #12]
 8010e44:	f007 fa44 	bl	80182d0 <memset>


    /* 1st Step:  Find Audio Interfaces */
    out_status = USBH_AUDIO_FindAudioStreamingIN (phost);
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f000 fc4c 	bl	80116e6 <USBH_AUDIO_FindAudioStreamingIN>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	72fb      	strb	r3, [r7, #11]

    in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f000 fd06 	bl	8011864 <USBH_AUDIO_FindAudioStreamingOUT>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	72bb      	strb	r3, [r7, #10]

    if((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8010e5c:	7afb      	ldrb	r3, [r7, #11]
 8010e5e:	2b02      	cmp	r3, #2
 8010e60:	d103      	bne.n	8010e6a <USBH_AUDIO_InterfaceInit+0x7a>
 8010e62:	7abb      	ldrb	r3, [r7, #10]
 8010e64:	2b02      	cmp	r3, #2
 8010e66:	f000 817c 	beq.w	8011162 <USBH_AUDIO_InterfaceInit+0x372>
      USBH_DbgLog ("%s class configuration not supported.", phost->pActiveClass->Name);
    }
    else
    {
      /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior*/
      for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	75bb      	strb	r3, [r7, #22]
 8010e6e:	e0c6      	b.n	8010ffe <USBH_AUDIO_InterfaceInit+0x20e>
      {
        if( AUDIO_Handle->stream_out[index].valid == 1U)
 8010e70:	7dba      	ldrb	r2, [r7, #22]
 8010e72:	68f9      	ldr	r1, [r7, #12]
 8010e74:	4613      	mov	r3, r2
 8010e76:	009b      	lsls	r3, r3, #2
 8010e78:	4413      	add	r3, r2
 8010e7a:	005b      	lsls	r3, r3, #1
 8010e7c:	440b      	add	r3, r1
 8010e7e:	333e      	adds	r3, #62	; 0x3e
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d156      	bne.n	8010f34 <USBH_AUDIO_InterfaceInit+0x144>
        {
          if(ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8010e86:	7dba      	ldrb	r2, [r7, #22]
 8010e88:	68f9      	ldr	r1, [r7, #12]
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	4413      	add	r3, r2
 8010e90:	005b      	lsls	r3, r3, #1
 8010e92:	440b      	add	r3, r1
 8010e94:	333a      	adds	r3, #58	; 0x3a
 8010e96:	881b      	ldrh	r3, [r3, #0]
 8010e98:	8aba      	ldrh	r2, [r7, #20]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d24a      	bcs.n	8010f34 <USBH_AUDIO_InterfaceInit+0x144>
          {
            ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8010e9e:	7dba      	ldrb	r2, [r7, #22]
 8010ea0:	68f9      	ldr	r1, [r7, #12]
 8010ea2:	4613      	mov	r3, r2
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	4413      	add	r3, r2
 8010ea8:	005b      	lsls	r3, r3, #1
 8010eaa:	440b      	add	r3, r1
 8010eac:	333a      	adds	r3, #58	; 0x3a
 8010eae:	881b      	ldrh	r3, [r3, #0]
 8010eb0:	82bb      	strh	r3, [r7, #20]
            AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8010eb2:	7dba      	ldrb	r2, [r7, #22]
 8010eb4:	68f9      	ldr	r1, [r7, #12]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	009b      	lsls	r3, r3, #2
 8010eba:	4413      	add	r3, r2
 8010ebc:	005b      	lsls	r3, r3, #1
 8010ebe:	440b      	add	r3, r1
 8010ec0:	333d      	adds	r3, #61	; 0x3d
 8010ec2:	781a      	ldrb	r2, [r3, #0]
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
            AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8010eca:	7dba      	ldrb	r2, [r7, #22]
 8010ecc:	68f9      	ldr	r1, [r7, #12]
 8010ece:	4613      	mov	r3, r2
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	4413      	add	r3, r2
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	440b      	add	r3, r1
 8010ed8:	333c      	adds	r3, #60	; 0x3c
 8010eda:	781a      	ldrb	r2, [r3, #0]
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
            AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8010ee2:	7dba      	ldrb	r2, [r7, #22]
 8010ee4:	68f9      	ldr	r1, [r7, #12]
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	4413      	add	r3, r2
 8010eec:	005b      	lsls	r3, r3, #1
 8010eee:	440b      	add	r3, r1
 8010ef0:	3338      	adds	r3, #56	; 0x38
 8010ef2:	781a      	ldrb	r2, [r3, #0]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
            AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8010efa:	7dba      	ldrb	r2, [r7, #22]
 8010efc:	68f9      	ldr	r1, [r7, #12]
 8010efe:	4613      	mov	r3, r2
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	005b      	lsls	r3, r3, #1
 8010f06:	440b      	add	r3, r1
 8010f08:	333a      	adds	r3, #58	; 0x3a
 8010f0a:	881a      	ldrh	r2, [r3, #0]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
            AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8010f12:	7dba      	ldrb	r2, [r7, #22]
 8010f14:	68f9      	ldr	r1, [r7, #12]
 8010f16:	4613      	mov	r3, r2
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	4413      	add	r3, r2
 8010f1c:	005b      	lsls	r3, r3, #1
 8010f1e:	440b      	add	r3, r1
 8010f20:	3340      	adds	r3, #64	; 0x40
 8010f22:	881b      	ldrh	r3, [r3, #0]
 8010f24:	b2da      	uxtb	r2, r3
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            AUDIO_Handle->headphone.supported = 1U;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
          }
        }

        if( AUDIO_Handle->stream_in[index].valid == 1U)
 8010f34:	7dba      	ldrb	r2, [r7, #22]
 8010f36:	68f9      	ldr	r1, [r7, #12]
 8010f38:	4613      	mov	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	4413      	add	r3, r2
 8010f3e:	005b      	lsls	r3, r3, #1
 8010f40:	440b      	add	r3, r1
 8010f42:	330c      	adds	r3, #12
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d156      	bne.n	8010ff8 <USBH_AUDIO_InterfaceInit+0x208>
        {
          if(ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8010f4a:	7dba      	ldrb	r2, [r7, #22]
 8010f4c:	68f9      	ldr	r1, [r7, #12]
 8010f4e:	4613      	mov	r3, r2
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	4413      	add	r3, r2
 8010f54:	005b      	lsls	r3, r3, #1
 8010f56:	440b      	add	r3, r1
 8010f58:	3308      	adds	r3, #8
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	8a7a      	ldrh	r2, [r7, #18]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d24a      	bcs.n	8010ff8 <USBH_AUDIO_InterfaceInit+0x208>
          {
            ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8010f62:	7dba      	ldrb	r2, [r7, #22]
 8010f64:	68f9      	ldr	r1, [r7, #12]
 8010f66:	4613      	mov	r3, r2
 8010f68:	009b      	lsls	r3, r3, #2
 8010f6a:	4413      	add	r3, r2
 8010f6c:	005b      	lsls	r3, r3, #1
 8010f6e:	440b      	add	r3, r1
 8010f70:	3308      	adds	r3, #8
 8010f72:	881b      	ldrh	r3, [r3, #0]
 8010f74:	827b      	strh	r3, [r7, #18]
            AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8010f76:	7dba      	ldrb	r2, [r7, #22]
 8010f78:	68f9      	ldr	r1, [r7, #12]
 8010f7a:	4613      	mov	r3, r2
 8010f7c:	009b      	lsls	r3, r3, #2
 8010f7e:	4413      	add	r3, r2
 8010f80:	005b      	lsls	r3, r3, #1
 8010f82:	440b      	add	r3, r1
 8010f84:	330b      	adds	r3, #11
 8010f86:	781a      	ldrb	r2, [r3, #0]
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
            AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8010f8e:	7dba      	ldrb	r2, [r7, #22]
 8010f90:	68f9      	ldr	r1, [r7, #12]
 8010f92:	4613      	mov	r3, r2
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4413      	add	r3, r2
 8010f98:	005b      	lsls	r3, r3, #1
 8010f9a:	440b      	add	r3, r1
 8010f9c:	330a      	adds	r3, #10
 8010f9e:	781a      	ldrb	r2, [r3, #0]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
            AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8010fa6:	7dba      	ldrb	r2, [r7, #22]
 8010fa8:	68f9      	ldr	r1, [r7, #12]
 8010faa:	4613      	mov	r3, r2
 8010fac:	009b      	lsls	r3, r3, #2
 8010fae:	4413      	add	r3, r2
 8010fb0:	005b      	lsls	r3, r3, #1
 8010fb2:	440b      	add	r3, r1
 8010fb4:	3306      	adds	r3, #6
 8010fb6:	781a      	ldrb	r2, [r3, #0]
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
            AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8010fbe:	7dba      	ldrb	r2, [r7, #22]
 8010fc0:	68f9      	ldr	r1, [r7, #12]
 8010fc2:	4613      	mov	r3, r2
 8010fc4:	009b      	lsls	r3, r3, #2
 8010fc6:	4413      	add	r3, r2
 8010fc8:	005b      	lsls	r3, r3, #1
 8010fca:	440b      	add	r3, r1
 8010fcc:	3308      	adds	r3, #8
 8010fce:	881a      	ldrh	r2, [r3, #0]
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
            AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8010fd6:	7dba      	ldrb	r2, [r7, #22]
 8010fd8:	68f9      	ldr	r1, [r7, #12]
 8010fda:	4613      	mov	r3, r2
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	4413      	add	r3, r2
 8010fe0:	005b      	lsls	r3, r3, #1
 8010fe2:	440b      	add	r3, r1
 8010fe4:	3340      	adds	r3, #64	; 0x40
 8010fe6:	881b      	ldrh	r3, [r3, #0]
 8010fe8:	b2da      	uxtb	r2, r3
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
            AUDIO_Handle->microphone.supported = 1U;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
      for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8010ff8:	7dbb      	ldrb	r3, [r7, #22]
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	75bb      	strb	r3, [r7, #22]
 8010ffe:	7dbb      	ldrb	r3, [r7, #22]
 8011000:	2b04      	cmp	r3, #4
 8011002:	f67f af35 	bls.w	8010e70 <USBH_AUDIO_InterfaceInit+0x80>
          }
        }
      }

      if(USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f000 fceb 	bl	80119e2 <USBH_AUDIO_FindHIDControl>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d103      	bne.n	801101a <USBH_AUDIO_InterfaceInit+0x22a>
      {
        AUDIO_Handle->control.supported = 1U;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2201      	movs	r2, #1
 8011016:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
      }

      /* 3rd Step:  Find and Parse Audio interfaces */
      USBH_AUDIO_ParseCSDescriptors (phost);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fd60 	bl	8011ae0 <USBH_AUDIO_ParseCSDescriptors>


      /* 4th Step:  Open the Audio streaming pipes*/
      if(AUDIO_Handle->headphone.supported == 1U)
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8011026:	2b01      	cmp	r3, #1
 8011028:	d12e      	bne.n	8011088 <USBH_AUDIO_InterfaceInit+0x298>
      {
        USBH_AUDIO_BuildHeadphonePath (phost);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 ff98 	bl	8011f60 <USBH_AUDIO_BuildHeadphonePath>

        AUDIO_Handle->headphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8011036:	4619      	mov	r1, r3
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f003 f9e9 	bl	8014410 <USBH_AllocPipe>
 801103e:	4603      	mov	r3, r0
 8011040:	461a      	mov	r2, r3
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011060:	68fa      	ldr	r2, [r7, #12]
 8011062:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8011066:	9202      	str	r2, [sp, #8]
 8011068:	2201      	movs	r2, #1
 801106a:	9201      	str	r2, [sp, #4]
 801106c:	9300      	str	r3, [sp, #0]
 801106e:	4623      	mov	r3, r4
 8011070:	4602      	mov	r2, r0
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f003 f99d 	bl	80143b2 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

        USBH_LL_SetToggle (phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 801107e:	2200      	movs	r2, #0
 8011080:	4619      	mov	r1, r3
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f006 ffa7 	bl	8017fd6 <USBH_LL_SetToggle>

      }

      if(AUDIO_Handle->microphone.supported == 1U)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 801108e:	2b01      	cmp	r3, #1
 8011090:	d12e      	bne.n	80110f0 <USBH_AUDIO_InterfaceInit+0x300>
      {
        USBH_AUDIO_BuildMicrophonePath (phost);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f000 fedc 	bl	8011e50 <USBH_AUDIO_BuildMicrophonePath>
        AUDIO_Handle->microphone.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 801109e:	4619      	mov	r1, r3
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f003 f9b5 	bl	8014410 <USBH_AllocPipe>
 80110a6:	4603      	mov	r3, r0
 80110a8:	461a      	mov	r2, r3
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 80110ce:	9202      	str	r2, [sp, #8]
 80110d0:	2201      	movs	r2, #1
 80110d2:	9201      	str	r2, [sp, #4]
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	4623      	mov	r3, r4
 80110d8:	4602      	mov	r2, r0
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f003 f969 	bl	80143b2 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

        USBH_LL_SetToggle (phost,  AUDIO_Handle->microphone.Pipe, 0U);
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80110e6:	2200      	movs	r2, #0
 80110e8:	4619      	mov	r1, r3
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f006 ff73 	bl	8017fd6 <USBH_LL_SetToggle>
      }

      if(AUDIO_Handle->control.supported == 1U)
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d12b      	bne.n	8011152 <USBH_AUDIO_InterfaceInit+0x362>
      {
        AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8011100:	4619      	mov	r1, r3
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f003 f984 	bl	8014410 <USBH_AllocPipe>
 8011108:	4603      	mov	r3, r0
 801110a:	461a      	mov	r2, r3
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

        /* Open pipe for IN endpoint */
        USBH_OpenPipe  (phost,
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801112a:	68fa      	ldr	r2, [r7, #12]
 801112c:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8011130:	9202      	str	r2, [sp, #8]
 8011132:	2203      	movs	r2, #3
 8011134:	9201      	str	r2, [sp, #4]
 8011136:	9300      	str	r3, [sp, #0]
 8011138:	4623      	mov	r3, r4
 801113a:	4602      	mov	r2, r0
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f003 f938 	bl	80143b2 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

        USBH_LL_SetToggle (phost,  AUDIO_Handle->control.Pipe, 0U);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8011148:	2200      	movs	r2, #0
 801114a:	4619      	mov	r1, r3
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f006 ff42 	bl	8017fd6 <USBH_LL_SetToggle>

      }

      AUDIO_Handle->req_state     = AUDIO_REQ_INIT;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2201      	movs	r2, #1
 8011156:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2201      	movs	r2, #1
 801115c:	70da      	strb	r2, [r3, #3]

      status = USBH_OK;
 801115e:	2300      	movs	r3, #0
 8011160:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8011162:	7dfb      	ldrb	r3, [r7, #23]
}
 8011164:	4618      	mov	r0, r3
 8011166:	371c      	adds	r7, #28
 8011168:	46bd      	mov	sp, r7
 801116a:	bd90      	pop	{r4, r7, pc}

0801116c <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b084      	sub	sp, #16
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801117a:	69db      	ldr	r3, [r3, #28]
 801117c:	60fb      	str	r3, [r7, #12]

  if(AUDIO_Handle->microphone.Pipe != 0x00U)
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8011184:	2b00      	cmp	r3, #0
 8011186:	d011      	beq.n	80111ac <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe  (phost, AUDIO_Handle->microphone.Pipe);
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 801118e:	4619      	mov	r1, r3
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f003 f92d 	bl	80143f0 <USBH_ClosePipe>
    USBH_FreePipe  (phost, AUDIO_Handle->microphone.Pipe);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 801119c:	4619      	mov	r1, r3
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f003 f955 	bl	801444e <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2200      	movs	r2, #0
 80111a8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if( AUDIO_Handle->headphone.Pipe != 0x00U)
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d011      	beq.n	80111da <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80111bc:	4619      	mov	r1, r3
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f003 f916 	bl	80143f0 <USBH_ClosePipe>
    USBH_FreePipe  (phost,  AUDIO_Handle->headphone.Pipe);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80111ca:	4619      	mov	r1, r3
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f003 f93e 	bl	801444e <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2200      	movs	r2, #0
 80111d6:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if( AUDIO_Handle->control.Pipe != 0x00U)
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d011      	beq.n	8011208 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80111ea:	4619      	mov	r1, r3
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f003 f8ff 	bl	80143f0 <USBH_ClosePipe>
    USBH_FreePipe  (phost,  AUDIO_Handle->control.Pipe);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80111f8:	4619      	mov	r1, r3
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f003 f927 	bl	801444e <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2200      	movs	r2, #0
 8011204:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if(phost->pActiveClass->pData)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801120e:	69db      	ldr	r3, [r3, #28]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00b      	beq.n	801122c <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free (phost->pActiveClass->pData);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801121a:	69db      	ldr	r3, [r3, #28]
 801121c:	4618      	mov	r0, r3
 801121e:	f007 f82b 	bl	8018278 <free>
    phost->pActiveClass->pData = 0U;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8011228:	2200      	movs	r2, #0
 801122a:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 801122c:	2300      	movs	r3, #0
}
 801122e:	4618      	mov	r0, r3
 8011230:	3710      	adds	r7, #16
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}
	...

08011238 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b086      	sub	sp, #24
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8011246:	69db      	ldr	r3, [r3, #28]
 8011248:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 801124a:	2301      	movs	r3, #1
 801124c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 801124e:	2301      	movs	r3, #1
 8011250:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	3b01      	subs	r3, #1
 8011258:	2b06      	cmp	r3, #6
 801125a:	f200 80ed 	bhi.w	8011438 <USBH_AUDIO_ClassRequest+0x200>
 801125e:	a201      	add	r2, pc, #4	; (adr r2, 8011264 <USBH_AUDIO_ClassRequest+0x2c>)
 8011260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011264:	08011281 	.word	0x08011281
 8011268:	08011405 	.word	0x08011405
 801126c:	08011281 	.word	0x08011281
 8011270:	080112d3 	.word	0x080112d3
 8011274:	0801135d 	.word	0x0801135d
 8011278:	080113b1 	.word	0x080113b1
 801127c:	08011349 	.word	0x08011349
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if(AUDIO_Handle->microphone.supported == 1U)
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8011286:	2b01      	cmp	r3, #1
 8011288:	d111      	bne.n	80112ae <USBH_AUDIO_ClassRequest+0x76>
    {
      req_status = USBH_SetInterface(phost,
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8011290:	2200      	movs	r2, #0
 8011292:	4619      	mov	r1, r3
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f002 fb57 	bl	8013948 <USBH_SetInterface>
 801129a:	4603      	mov	r3, r0
 801129c:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if(req_status == USBH_OK)
 801129e:	7bfb      	ldrb	r3, [r7, #15]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	f040 80cb 	bne.w	801143c <USBH_AUDIO_ClassRequest+0x204>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	2204      	movs	r2, #4
 80112aa:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80112ac:	e0c6      	b.n	801143c <USBH_AUDIO_ClassRequest+0x204>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	2204      	movs	r2, #4
 80112b2:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2202      	movs	r2, #2
 80112b8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80112c8:	2200      	movs	r2, #0
 80112ca:	4619      	mov	r1, r3
 80112cc:	f003 fae2 	bl	8014894 <osMessagePut>
    break;
 80112d0:	e0b4      	b.n	801143c <USBH_AUDIO_ClassRequest+0x204>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if(AUDIO_Handle->headphone.supported == 1U)
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d120      	bne.n	801131e <USBH_AUDIO_ClassRequest+0xe6>
    {
      req_status = USBH_SetInterface(phost,
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80112e2:	2200      	movs	r2, #0
 80112e4:	4619      	mov	r1, r3
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f002 fb2e 	bl	8013948 <USBH_SetInterface>
 80112ec:	4603      	mov	r3, r0
 80112ee:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if(req_status == USBH_OK)
 80112f0:	7bfb      	ldrb	r3, [r7, #15]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f040 80a4 	bne.w	8011440 <USBH_AUDIO_ClassRequest+0x208>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	2207      	movs	r2, #7
 80112fc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	2206      	movs	r2, #6
 8011302:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 801131c:	e090      	b.n	8011440 <USBH_AUDIO_ClassRequest+0x208>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	2207      	movs	r2, #7
 8011322:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	2206      	movs	r2, #6
 8011328:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2202      	movs	r2, #2
 801132e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801133e:	2200      	movs	r2, #0
 8011340:	4619      	mov	r1, r3
 8011342:	f003 faa7 	bl	8014894 <osMessagePut>
    break;
 8011346:	e07b      	b.n	8011440 <USBH_AUDIO_ClassRequest+0x208>

  case AUDIO_REQ_CS_REQUESTS:
    if(USBH_AUDIO_HandleCSRequest (phost) == USBH_OK)
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f000 f955 	bl	80115f8 <USBH_AUDIO_HandleCSRequest>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d177      	bne.n	8011444 <USBH_AUDIO_ClassRequest+0x20c>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	2205      	movs	r2, #5
 8011358:	701a      	strb	r2, [r3, #0]
    }
    break;
 801135a:	e073      	b.n	8011444 <USBH_AUDIO_ClassRequest+0x20c>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if(AUDIO_Handle->microphone.supported == 1U)
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8011362:	2b01      	cmp	r3, #1
 8011364:	d112      	bne.n	801138c <USBH_AUDIO_ClassRequest+0x154>
    {
      req_status = USBH_SetInterface(phost,
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8011372:	461a      	mov	r2, r3
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f002 fae7 	bl	8013948 <USBH_SetInterface>
 801137a:	4603      	mov	r3, r0
 801137c:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if(req_status == USBH_OK)
 801137e:	7bfb      	ldrb	r3, [r7, #15]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d161      	bne.n	8011448 <USBH_AUDIO_ClassRequest+0x210>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	2206      	movs	r2, #6
 8011388:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 801138a:	e05d      	b.n	8011448 <USBH_AUDIO_ClassRequest+0x210>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	2206      	movs	r2, #6
 8011390:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2202      	movs	r2, #2
 8011396:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80113a6:	2200      	movs	r2, #0
 80113a8:	4619      	mov	r1, r3
 80113aa:	f003 fa73 	bl	8014894 <osMessagePut>
    break;
 80113ae:	e04b      	b.n	8011448 <USBH_AUDIO_ClassRequest+0x210>
  case AUDIO_REQ_SET_OUT_INTERFACE:
   if(AUDIO_Handle->headphone.supported == 1U)
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d112      	bne.n	80113e0 <USBH_AUDIO_ClassRequest+0x1a8>
    {
      req_status = USBH_SetInterface(phost,
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80113c6:	461a      	mov	r2, r3
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f002 fabd 	bl	8013948 <USBH_SetInterface>
 80113ce:	4603      	mov	r3, r0
 80113d0:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if(req_status == USBH_OK)
 80113d2:	7bfb      	ldrb	r3, [r7, #15]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d139      	bne.n	801144c <USBH_AUDIO_ClassRequest+0x214>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	2202      	movs	r2, #2
 80113dc:	701a      	strb	r2, [r3, #0]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
   }
   break;
 80113de:	e035      	b.n	801144c <USBH_AUDIO_ClassRequest+0x214>
     AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	2202      	movs	r2, #2
 80113e4:	701a      	strb	r2, [r3, #0]
     phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2202      	movs	r2, #2
 80113ea:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80113fa:	2200      	movs	r2, #0
 80113fc:	4619      	mov	r1, r3
 80113fe:	f003 fa49 	bl	8014894 <osMessagePut>
   break;
 8011402:	e023      	b.n	801144c <USBH_AUDIO_ClassRequest+0x214>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	2201      	movs	r2, #1
 8011408:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8011410:	2102      	movs	r1, #2
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	4798      	blx	r3
    status  = USBH_OK;
 8011416:	2300      	movs	r3, #0
 8011418:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2204      	movs	r2, #4
 801141e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801142e:	2200      	movs	r2, #0
 8011430:	4619      	mov	r1, r3
 8011432:	f003 fa2f 	bl	8014894 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8011436:	e00a      	b.n	801144e <USBH_AUDIO_ClassRequest+0x216>

  default:
    break;
 8011438:	bf00      	nop
 801143a:	e008      	b.n	801144e <USBH_AUDIO_ClassRequest+0x216>
    break;
 801143c:	bf00      	nop
 801143e:	e006      	b.n	801144e <USBH_AUDIO_ClassRequest+0x216>
    break;
 8011440:	bf00      	nop
 8011442:	e004      	b.n	801144e <USBH_AUDIO_ClassRequest+0x216>
    break;
 8011444:	bf00      	nop
 8011446:	e002      	b.n	801144e <USBH_AUDIO_ClassRequest+0x216>
    break;
 8011448:	bf00      	nop
 801144a:	e000      	b.n	801144e <USBH_AUDIO_ClassRequest+0x216>
   break;
 801144c:	bf00      	nop
  }
  return status;
 801144e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011450:	4618      	mov	r0, r3
 8011452:	3718      	adds	r7, #24
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <USBH_AUDIO_CSRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b088      	sub	sp, #32
 801145c:	af02      	add	r7, sp, #8
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	460b      	mov	r3, r1
 8011462:	70fb      	strb	r3, [r7, #3]
 8011464:	4613      	mov	r3, r2
 8011466:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801146e:	69db      	ldr	r3, [r3, #28]
 8011470:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011472:	2301      	movs	r3, #1
 8011474:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8011476:	2301      	movs	r3, #1
 8011478:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	785b      	ldrb	r3, [r3, #1]
 801147e:	3b04      	subs	r3, #4
 8011480:	2b04      	cmp	r3, #4
 8011482:	f200 80aa 	bhi.w	80115da <USBH_AUDIO_CSRequest+0x182>
 8011486:	a201      	add	r2, pc, #4	; (adr r2, 801148c <USBH_AUDIO_CSRequest+0x34>)
 8011488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801148c:	080114e9 	.word	0x080114e9
 8011490:	0801152f 	.word	0x0801152f
 8011494:	080114a1 	.word	0x080114a1
 8011498:	0801158f 	.word	0x0801158f
 801149c:	080115d5 	.word	0x080115d5
  {
  case AUDIO_REQ_GET_VOLUME:
    req_status = USBH_AC_GetCur(phost,
 80114a0:	78fa      	ldrb	r2, [r7, #3]
 80114a2:	2302      	movs	r3, #2
 80114a4:	9301      	str	r3, [sp, #4]
 80114a6:	78bb      	ldrb	r3, [r7, #2]
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	2302      	movs	r3, #2
 80114ac:	2106      	movs	r1, #6
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f000 fe88 	bl	80121c4 <USBH_AC_GetCur>
 80114b4:	4603      	mov	r3, r0
 80114b6:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);               /* length   */
    if(req_status != USBH_BUSY)
 80114b8:	7bfb      	ldrb	r3, [r7, #15]
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	f000 808f 	beq.w	80115de <USBH_AUDIO_CSRequest+0x186>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	2204      	movs	r2, #4
 80114c4:	705a      	strb	r2, [r3, #1]
      VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80114d2:	3302      	adds	r3, #2
 80114d4:	881b      	ldrh	r3, [r3, #0]
 80114d6:	021b      	lsls	r3, r3, #8
 80114d8:	b29b      	uxth	r3, r3
 80114da:	4313      	orrs	r3, r2
 80114dc:	817b      	strh	r3, [r7, #10]
      AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 80114de:	897a      	ldrh	r2, [r7, #10]
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    }
    break;
 80114e6:	e07a      	b.n	80115de <USBH_AUDIO_CSRequest+0x186>

  case AUDIO_REQ_GET_MIN_VOLUME:
    req_status = USBH_AC_GetMin(phost,
 80114e8:	78fa      	ldrb	r2, [r7, #3]
 80114ea:	2302      	movs	r3, #2
 80114ec:	9301      	str	r3, [sp, #4]
 80114ee:	78bb      	ldrb	r3, [r7, #2]
 80114f0:	9300      	str	r3, [sp, #0]
 80114f2:	2302      	movs	r3, #2
 80114f4:	2106      	movs	r1, #6
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f001 f820 	bl	801253c <USBH_AC_GetMin>
 80114fc:	4603      	mov	r3, r0
 80114fe:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);               /* length   */
    if(req_status != USBH_BUSY)
 8011500:	7bfb      	ldrb	r3, [r7, #15]
 8011502:	2b01      	cmp	r3, #1
 8011504:	d06d      	beq.n	80115e2 <USBH_AUDIO_CSRequest+0x18a>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	2205      	movs	r2, #5
 801150a:	705a      	strb	r2, [r3, #1]
      VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8011518:	3302      	adds	r3, #2
 801151a:	881b      	ldrh	r3, [r3, #0]
 801151c:	021b      	lsls	r3, r3, #8
 801151e:	b29b      	uxth	r3, r3
 8011520:	4313      	orrs	r3, r2
 8011522:	817b      	strh	r3, [r7, #10]
      AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8011524:	897a      	ldrh	r2, [r7, #10]
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    }
    break;
 801152c:	e059      	b.n	80115e2 <USBH_AUDIO_CSRequest+0x18a>

  case AUDIO_REQ_GET_MAX_VOLUME:
    req_status = USBH_AC_GetMax(phost,
 801152e:	78fa      	ldrb	r2, [r7, #3]
 8011530:	2302      	movs	r3, #2
 8011532:	9301      	str	r3, [sp, #4]
 8011534:	78bb      	ldrb	r3, [r7, #2]
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	2302      	movs	r3, #2
 801153a:	2106      	movs	r1, #6
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f000 fed5 	bl	80122ec <USBH_AC_GetMax>
 8011542:	4603      	mov	r3, r0
 8011544:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);               /* length   */
    if(req_status != USBH_BUSY)
 8011546:	7bfb      	ldrb	r3, [r7, #15]
 8011548:	2b01      	cmp	r3, #1
 801154a:	d04c      	beq.n	80115e6 <USBH_AUDIO_CSRequest+0x18e>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	2207      	movs	r2, #7
 8011550:	705a      	strb	r2, [r3, #1]
      VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801155e:	3302      	adds	r3, #2
 8011560:	881b      	ldrh	r3, [r3, #0]
 8011562:	021b      	lsls	r3, r3, #8
 8011564:	b29b      	uxth	r3, r3
 8011566:	4313      	orrs	r3, r2
 8011568:	817b      	strh	r3, [r7, #10]
      AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 801156a:	897a      	ldrh	r2, [r7, #10]
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

      if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801157e:	429a      	cmp	r2, r3
 8011580:	d231      	bcs.n	80115e6 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8011588:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
      }
    }
    break;
 801158c:	e02b      	b.n	80115e6 <USBH_AUDIO_CSRequest+0x18e>

  case AUDIO_REQ_GET_RESOLUTION:
    req_status = USBH_AC_GetRes(phost,
 801158e:	78fa      	ldrb	r2, [r7, #3]
 8011590:	2302      	movs	r3, #2
 8011592:	9301      	str	r3, [sp, #4]
 8011594:	78bb      	ldrb	r3, [r7, #2]
 8011596:	9300      	str	r3, [sp, #0]
 8011598:	2302      	movs	r3, #2
 801159a:	2106      	movs	r1, #6
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f000 ff39 	bl	8012414 <USBH_AC_GetRes>
 80115a2:	4603      	mov	r3, r0
 80115a4:	73fb      	strb	r3, [r7, #15]
                                UAC_FEATURE_UNIT,     /* subtype  */
                                feature,              /* feature  */
                                VOLUME_CONTROL,       /* Selector */
                                channel,              /* channel  */
                                0x02U);                /* length   */
    if(req_status != USBH_BUSY)
 80115a6:	7bfb      	ldrb	r3, [r7, #15]
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d01e      	beq.n	80115ea <USBH_AUDIO_CSRequest+0x192>
    {
      AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	2208      	movs	r2, #8
 80115b0:	705a      	strb	r2, [r3, #1]
      ResolutionCtl =LE16(&AUDIO_Handle->mem[0]);
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80115be:	3302      	adds	r3, #2
 80115c0:	881b      	ldrh	r3, [r3, #0]
 80115c2:	021b      	lsls	r3, r3, #8
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	4313      	orrs	r3, r2
 80115c8:	81bb      	strh	r3, [r7, #12]
      AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 80115ca:	89ba      	ldrh	r2, [r7, #12]
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    }
    break;
 80115d2:	e00a      	b.n	80115ea <USBH_AUDIO_CSRequest+0x192>


  case AUDIO_REQ_CS_IDLE:
    status = USBH_OK;
 80115d4:	2300      	movs	r3, #0
 80115d6:	75fb      	strb	r3, [r7, #23]
    break;
 80115d8:	e008      	b.n	80115ec <USBH_AUDIO_CSRequest+0x194>

  default:
    break;
 80115da:	bf00      	nop
 80115dc:	e006      	b.n	80115ec <USBH_AUDIO_CSRequest+0x194>
    break;
 80115de:	bf00      	nop
 80115e0:	e004      	b.n	80115ec <USBH_AUDIO_CSRequest+0x194>
    break;
 80115e2:	bf00      	nop
 80115e4:	e002      	b.n	80115ec <USBH_AUDIO_CSRequest+0x194>
    break;
 80115e6:	bf00      	nop
 80115e8:	e000      	b.n	80115ec <USBH_AUDIO_CSRequest+0x194>
    break;
 80115ea:	bf00      	nop
  }
  return status;
 80115ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3718      	adds	r7, #24
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop

080115f8 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8011600:	2301      	movs	r3, #1
 8011602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8011604:	2301      	movs	r3, #1
 8011606:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801160e:	69db      	ldr	r3, [r3, #28]
 8011610:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 801161e:	461a      	mov	r2, r3
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f7ff ff19 	bl	8011458 <USBH_AUDIO_CSRequest>
 8011626:	4603      	mov	r3, r0
 8011628:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if(cs_status != USBH_BUSY)
 801162a:	7bbb      	ldrb	r3, [r7, #14]
 801162c:	2b01      	cmp	r3, #1
 801162e:	d02a      	beq.n	8011686 <USBH_AUDIO_HandleCSRequest+0x8e>
  {

    if(AUDIO_Handle->temp_channels == 1U)
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8011636:	2b01      	cmp	r3, #1
 8011638:	d10c      	bne.n	8011654 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
        AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = 0U;
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	2200      	movs	r2, #0
 801164a:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        status = USBH_OK;
 801164e:	2300      	movs	r3, #0
 8011650:	73fb      	strb	r3, [r7, #15]
 8011652:	e007      	b.n	8011664 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 801165a:	3b01      	subs	r3, #1
 801165c:	b2da      	uxtb	r2, r3
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	2206      	movs	r2, #6
 8011668:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_URB_EVENT;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2202      	movs	r2, #2
 801166e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801167e:	2200      	movs	r2, #0
 8011680:	4619      	mov	r1, r3
 8011682:	f003 f907 	bl	8014894 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8011686:	7bfb      	ldrb	r3, [r7, #15]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process (USBH_HandleTypeDef *phost)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011698:	2301      	movs	r3, #1
 801169a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80116a2:	69db      	ldr	r3, [r3, #28]
 80116a4:	60bb      	str	r3, [r7, #8]

  if(AUDIO_Handle->headphone.supported == 1U)
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d102      	bne.n	80116b6 <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream (phost);
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f001 f8c1 	bl	8012838 <USBH_AUDIO_OutputStream>
  }

  if(AUDIO_Handle->microphone.supported == 1U)
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d102      	bne.n	80116c6 <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream (phost);
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f000 fff7 	bl	80126b4 <USBH_AUDIO_InputStream>
  }

  return status;
 80116c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3710      	adds	r7, #16
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess (USBH_HandleTypeDef *phost)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b083      	sub	sp, #12
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80116d8:	2300      	movs	r3, #0
}
 80116da:	4618      	mov	r0, r3
 80116dc:	370c      	adds	r7, #12
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr

080116e6 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 80116e6:	b480      	push	{r7}
 80116e8:	b085      	sub	sp, #20
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 80116ee:	2302      	movs	r3, #2
 80116f0:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80116f8:	69db      	ldr	r3, [r3, #28]
 80116fa:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80116fc:	2300      	movs	r3, #0
 80116fe:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8011700:	2300      	movs	r3, #0
 8011702:	73fb      	strb	r3, [r7, #15]
 8011704:	e09e      	b.n	8011844 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 8011706:	7bfb      	ldrb	r3, [r7, #15]
 8011708:	687a      	ldr	r2, [r7, #4]
 801170a:	211a      	movs	r1, #26
 801170c:	fb01 f303 	mul.w	r3, r1, r3
 8011710:	4413      	add	r3, r2
 8011712:	f203 3343 	addw	r3, r3, #835	; 0x343
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	2b01      	cmp	r3, #1
 801171a:	f040 8090 	bne.w	801183e <USBH_AUDIO_FindAudioStreamingIN+0x158>
       (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 801171e:	7bfb      	ldrb	r3, [r7, #15]
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	211a      	movs	r1, #26
 8011724:	fb01 f303 	mul.w	r3, r1, r3
 8011728:	4413      	add	r3, r2
 801172a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 801172e:	781b      	ldrb	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 8011730:	2b02      	cmp	r3, #2
 8011732:	f040 8084 	bne.w	801183e <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8011736:	7bfb      	ldrb	r3, [r7, #15]
 8011738:	687a      	ldr	r2, [r7, #4]
 801173a:	211a      	movs	r1, #26
 801173c:	fb01 f303 	mul.w	r3, r1, r3
 8011740:	4413      	add	r3, r2
 8011742:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	b25b      	sxtb	r3, r3
 801174a:	2b00      	cmp	r3, #0
 801174c:	da77      	bge.n	801183e <USBH_AUDIO_FindAudioStreamingIN+0x158>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 801174e:	7bfb      	ldrb	r3, [r7, #15]
 8011750:	687a      	ldr	r2, [r7, #4]
 8011752:	211a      	movs	r1, #26
 8011754:	fb01 f303 	mul.w	r3, r1, r3
 8011758:	4413      	add	r3, r2
 801175a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 801175e:	881b      	ldrh	r3, [r3, #0]
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8011760:	2b00      	cmp	r3, #0
 8011762:	d06c      	beq.n	801183e <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011764:	7bfb      	ldrb	r3, [r7, #15]
 8011766:	7bba      	ldrb	r2, [r7, #14]
 8011768:	6879      	ldr	r1, [r7, #4]
 801176a:	201a      	movs	r0, #26
 801176c:	fb00 f303 	mul.w	r3, r0, r3
 8011770:	440b      	add	r3, r1
 8011772:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8011776:	7818      	ldrb	r0, [r3, #0]
 8011778:	68b9      	ldr	r1, [r7, #8]
 801177a:	4613      	mov	r3, r2
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	4413      	add	r3, r2
 8011780:	005b      	lsls	r3, r3, #1
 8011782:	440b      	add	r3, r1
 8011784:	3306      	adds	r3, #6
 8011786:	4602      	mov	r2, r0
 8011788:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801178a:	7bfb      	ldrb	r3, [r7, #15]
 801178c:	7bba      	ldrb	r2, [r7, #14]
 801178e:	6879      	ldr	r1, [r7, #4]
 8011790:	201a      	movs	r0, #26
 8011792:	fb00 f303 	mul.w	r3, r0, r3
 8011796:	440b      	add	r3, r1
 8011798:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 801179c:	8818      	ldrh	r0, [r3, #0]
 801179e:	68b9      	ldr	r1, [r7, #8]
 80117a0:	4613      	mov	r3, r2
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	4413      	add	r3, r2
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	440b      	add	r3, r1
 80117aa:	3308      	adds	r3, #8
 80117ac:	4602      	mov	r2, r0
 80117ae:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	7bba      	ldrb	r2, [r7, #14]
 80117b4:	6879      	ldr	r1, [r7, #4]
 80117b6:	201a      	movs	r0, #26
 80117b8:	fb00 f303 	mul.w	r3, r0, r3
 80117bc:	440b      	add	r3, r1
 80117be:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80117c2:	7818      	ldrb	r0, [r3, #0]
 80117c4:	68b9      	ldr	r1, [r7, #8]
 80117c6:	4613      	mov	r3, r2
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	4413      	add	r3, r2
 80117cc:	005b      	lsls	r3, r3, #1
 80117ce:	440b      	add	r3, r1
 80117d0:	330b      	adds	r3, #11
 80117d2:	4602      	mov	r2, r0
 80117d4:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 80117d6:	7bfb      	ldrb	r3, [r7, #15]
 80117d8:	7bba      	ldrb	r2, [r7, #14]
 80117da:	6879      	ldr	r1, [r7, #4]
 80117dc:	201a      	movs	r0, #26
 80117de:	fb00 f303 	mul.w	r3, r0, r3
 80117e2:	440b      	add	r3, r1
 80117e4:	f203 3341 	addw	r3, r3, #833	; 0x341
 80117e8:	7818      	ldrb	r0, [r3, #0]
 80117ea:	68b9      	ldr	r1, [r7, #8]
 80117ec:	4613      	mov	r3, r2
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	4413      	add	r3, r2
 80117f2:	005b      	lsls	r3, r3, #1
 80117f4:	440b      	add	r3, r1
 80117f6:	330a      	adds	r3, #10
 80117f8:	4602      	mov	r2, r0
 80117fa:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80117fc:	7bfb      	ldrb	r3, [r7, #15]
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	211a      	movs	r1, #26
 8011802:	fb01 f303 	mul.w	r3, r1, r3
 8011806:	4413      	add	r3, r2
 8011808:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	7bba      	ldrb	r2, [r7, #14]
 8011810:	b298      	uxth	r0, r3
 8011812:	68b9      	ldr	r1, [r7, #8]
 8011814:	4613      	mov	r3, r2
 8011816:	009b      	lsls	r3, r3, #2
 8011818:	4413      	add	r3, r2
 801181a:	005b      	lsls	r3, r3, #1
 801181c:	440b      	add	r3, r1
 801181e:	330e      	adds	r3, #14
 8011820:	4602      	mov	r2, r0
 8011822:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8011824:	7bba      	ldrb	r2, [r7, #14]
 8011826:	68b9      	ldr	r1, [r7, #8]
 8011828:	4613      	mov	r3, r2
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	4413      	add	r3, r2
 801182e:	005b      	lsls	r3, r3, #1
 8011830:	440b      	add	r3, r1
 8011832:	330c      	adds	r3, #12
 8011834:	2201      	movs	r2, #1
 8011836:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8011838:	7bbb      	ldrb	r3, [r7, #14]
 801183a:	3301      	adds	r3, #1
 801183c:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 801183e:	7bfb      	ldrb	r3, [r7, #15]
 8011840:	3301      	adds	r3, #1
 8011842:	73fb      	strb	r3, [r7, #15]
 8011844:	7bfb      	ldrb	r3, [r7, #15]
 8011846:	2b09      	cmp	r3, #9
 8011848:	f67f af5d 	bls.w	8011706 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if(alt_settings > 0U)
 801184c:	7bbb      	ldrb	r3, [r7, #14]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d001      	beq.n	8011856 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
     status = USBH_OK;
 8011852:	2300      	movs	r3, #0
 8011854:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8011856:	7b7b      	ldrb	r3, [r7, #13]
}
 8011858:	4618      	mov	r0, r3
 801185a:	3714      	adds	r7, #20
 801185c:	46bd      	mov	sp, r7
 801185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011862:	4770      	bx	lr

08011864 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8011864:	b480      	push	{r7}
 8011866:	b085      	sub	sp, #20
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 801186c:	2302      	movs	r3, #2
 801186e:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8011876:	69db      	ldr	r3, [r3, #28]
 8011878:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 801187a:	2300      	movs	r3, #0
 801187c:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 801187e:	2300      	movs	r3, #0
 8011880:	73fb      	strb	r3, [r7, #15]
 8011882:	e09e      	b.n	80119c2 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 8011884:	7bfb      	ldrb	r3, [r7, #15]
 8011886:	687a      	ldr	r2, [r7, #4]
 8011888:	211a      	movs	r1, #26
 801188a:	fb01 f303 	mul.w	r3, r1, r3
 801188e:	4413      	add	r3, r2
 8011890:	f203 3343 	addw	r3, r3, #835	; 0x343
 8011894:	781b      	ldrb	r3, [r3, #0]
 8011896:	2b01      	cmp	r3, #1
 8011898:	f040 8090 	bne.w	80119bc <USBH_AUDIO_FindAudioStreamingOUT+0x158>
       (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 801189c:	7bfb      	ldrb	r3, [r7, #15]
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	211a      	movs	r1, #26
 80118a2:	fb01 f303 	mul.w	r3, r1, r3
 80118a6:	4413      	add	r3, r2
 80118a8:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80118ac:	781b      	ldrb	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS)&&
 80118ae:	2b02      	cmp	r3, #2
 80118b0:	f040 8084 	bne.w	80119bc <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if(((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 80118b4:	7bfb      	ldrb	r3, [r7, #15]
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	211a      	movs	r1, #26
 80118ba:	fb01 f303 	mul.w	r3, r1, r3
 80118be:	4413      	add	r3, r2
 80118c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80118c4:	781b      	ldrb	r3, [r3, #0]
 80118c6:	b25b      	sxtb	r3, r3
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	db77      	blt.n	80119bc <USBH_AUDIO_FindAudioStreamingOUT+0x158>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80118cc:	7bfb      	ldrb	r3, [r7, #15]
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	211a      	movs	r1, #26
 80118d2:	fb01 f303 	mul.w	r3, r1, r3
 80118d6:	4413      	add	r3, r2
 80118d8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80118dc:	881b      	ldrh	r3, [r3, #0]
      if(((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d06c      	beq.n	80119bc <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80118e2:	7bfb      	ldrb	r3, [r7, #15]
 80118e4:	7bba      	ldrb	r2, [r7, #14]
 80118e6:	6879      	ldr	r1, [r7, #4]
 80118e8:	201a      	movs	r0, #26
 80118ea:	fb00 f303 	mul.w	r3, r0, r3
 80118ee:	440b      	add	r3, r1
 80118f0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80118f4:	7818      	ldrb	r0, [r3, #0]
 80118f6:	68b9      	ldr	r1, [r7, #8]
 80118f8:	4613      	mov	r3, r2
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	4413      	add	r3, r2
 80118fe:	005b      	lsls	r3, r3, #1
 8011900:	440b      	add	r3, r1
 8011902:	3338      	adds	r3, #56	; 0x38
 8011904:	4602      	mov	r2, r0
 8011906:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011908:	7bfb      	ldrb	r3, [r7, #15]
 801190a:	7bba      	ldrb	r2, [r7, #14]
 801190c:	6879      	ldr	r1, [r7, #4]
 801190e:	201a      	movs	r0, #26
 8011910:	fb00 f303 	mul.w	r3, r0, r3
 8011914:	440b      	add	r3, r1
 8011916:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 801191a:	8818      	ldrh	r0, [r3, #0]
 801191c:	68b9      	ldr	r1, [r7, #8]
 801191e:	4613      	mov	r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	4413      	add	r3, r2
 8011924:	005b      	lsls	r3, r3, #1
 8011926:	440b      	add	r3, r1
 8011928:	333a      	adds	r3, #58	; 0x3a
 801192a:	4602      	mov	r2, r0
 801192c:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 801192e:	7bfb      	ldrb	r3, [r7, #15]
 8011930:	7bba      	ldrb	r2, [r7, #14]
 8011932:	6879      	ldr	r1, [r7, #4]
 8011934:	201a      	movs	r0, #26
 8011936:	fb00 f303 	mul.w	r3, r0, r3
 801193a:	440b      	add	r3, r1
 801193c:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8011940:	7818      	ldrb	r0, [r3, #0]
 8011942:	68b9      	ldr	r1, [r7, #8]
 8011944:	4613      	mov	r3, r2
 8011946:	009b      	lsls	r3, r3, #2
 8011948:	4413      	add	r3, r2
 801194a:	005b      	lsls	r3, r3, #1
 801194c:	440b      	add	r3, r1
 801194e:	333d      	adds	r3, #61	; 0x3d
 8011950:	4602      	mov	r2, r0
 8011952:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8011954:	7bfb      	ldrb	r3, [r7, #15]
 8011956:	7bba      	ldrb	r2, [r7, #14]
 8011958:	6879      	ldr	r1, [r7, #4]
 801195a:	201a      	movs	r0, #26
 801195c:	fb00 f303 	mul.w	r3, r0, r3
 8011960:	440b      	add	r3, r1
 8011962:	f203 3341 	addw	r3, r3, #833	; 0x341
 8011966:	7818      	ldrb	r0, [r3, #0]
 8011968:	68b9      	ldr	r1, [r7, #8]
 801196a:	4613      	mov	r3, r2
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4413      	add	r3, r2
 8011970:	005b      	lsls	r3, r3, #1
 8011972:	440b      	add	r3, r1
 8011974:	333c      	adds	r3, #60	; 0x3c
 8011976:	4602      	mov	r2, r0
 8011978:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 801197a:	7bfb      	ldrb	r3, [r7, #15]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	211a      	movs	r1, #26
 8011980:	fb01 f303 	mul.w	r3, r1, r3
 8011984:	4413      	add	r3, r2
 8011986:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	7bba      	ldrb	r2, [r7, #14]
 801198e:	b298      	uxth	r0, r3
 8011990:	68b9      	ldr	r1, [r7, #8]
 8011992:	4613      	mov	r3, r2
 8011994:	009b      	lsls	r3, r3, #2
 8011996:	4413      	add	r3, r2
 8011998:	005b      	lsls	r3, r3, #1
 801199a:	440b      	add	r3, r1
 801199c:	3340      	adds	r3, #64	; 0x40
 801199e:	4602      	mov	r2, r0
 80119a0:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 80119a2:	7bba      	ldrb	r2, [r7, #14]
 80119a4:	68b9      	ldr	r1, [r7, #8]
 80119a6:	4613      	mov	r3, r2
 80119a8:	009b      	lsls	r3, r3, #2
 80119aa:	4413      	add	r3, r2
 80119ac:	005b      	lsls	r3, r3, #1
 80119ae:	440b      	add	r3, r1
 80119b0:	333e      	adds	r3, #62	; 0x3e
 80119b2:	2201      	movs	r2, #1
 80119b4:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80119b6:	7bbb      	ldrb	r3, [r7, #14]
 80119b8:	3301      	adds	r3, #1
 80119ba:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80119bc:	7bfb      	ldrb	r3, [r7, #15]
 80119be:	3301      	adds	r3, #1
 80119c0:	73fb      	strb	r3, [r7, #15]
 80119c2:	7bfb      	ldrb	r3, [r7, #15]
 80119c4:	2b09      	cmp	r3, #9
 80119c6:	f67f af5d 	bls.w	8011884 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if(alt_settings > 0U)
 80119ca:	7bbb      	ldrb	r3, [r7, #14]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d001      	beq.n	80119d4 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
     status = USBH_OK;
 80119d0:	2300      	movs	r3, #0
 80119d2:	737b      	strb	r3, [r7, #13]
  }

  return status;
 80119d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3714      	adds	r7, #20
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr

080119e2 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 80119e2:	b580      	push	{r7, lr}
 80119e4:	b084      	sub	sp, #16
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 80119ea:	2302      	movs	r3, #2
 80119ec:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80119f4:	69db      	ldr	r3, [r3, #28]
 80119f6:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 80119f8:	23ff      	movs	r3, #255	; 0xff
 80119fa:	2201      	movs	r2, #1
 80119fc:	2101      	movs	r1, #1
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f001 f9f2 	bl	8012de8 <USBH_FindInterface>
 8011a04:	4603      	mov	r3, r0
 8011a06:	73fb      	strb	r3, [r7, #15]
  if(interface == 0xFFU)
 8011a08:	7bfb      	ldrb	r3, [r7, #15]
 8011a0a:	2bff      	cmp	r3, #255	; 0xff
 8011a0c:	d101      	bne.n	8011a12 <USBH_AUDIO_FindHIDControl+0x30>
  {
    return USBH_FAIL;
 8011a0e:	2302      	movs	r3, #2
 8011a10:	e062      	b.n	8011ad8 <USBH_AUDIO_FindHIDControl+0xf6>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8011a12:	2300      	movs	r3, #0
 8011a14:	73fb      	strb	r3, [r7, #15]
 8011a16:	e05b      	b.n	8011ad0 <USBH_AUDIO_FindHIDControl+0xee>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8011a18:	7bfb      	ldrb	r3, [r7, #15]
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	211a      	movs	r1, #26
 8011a1e:	fb01 f303 	mul.w	r3, r1, r3
 8011a22:	4413      	add	r3, r2
 8011a24:	f203 3343 	addw	r3, r3, #835	; 0x343
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	2b03      	cmp	r3, #3
 8011a2c:	d14d      	bne.n	8011aca <USBH_AUDIO_FindHIDControl+0xe8>
       (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8011a2e:	7bfb      	ldrb	r3, [r7, #15]
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	211a      	movs	r1, #26
 8011a34:	fb01 f303 	mul.w	r3, r1, r3
 8011a38:	4413      	add	r3, r2
 8011a3a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8011a3e:	881b      	ldrh	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d042      	beq.n	8011aca <USBH_AUDIO_FindHIDControl+0xe8>
    {
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8011a44:	7bfb      	ldrb	r3, [r7, #15]
 8011a46:	687a      	ldr	r2, [r7, #4]
 8011a48:	211a      	movs	r1, #26
 8011a4a:	fb01 f303 	mul.w	r3, r1, r3
 8011a4e:	4413      	add	r3, r2
 8011a50:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	b25b      	sxtb	r3, r3
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	da36      	bge.n	8011aca <USBH_AUDIO_FindHIDControl+0xe8>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011a5c:	7bfb      	ldrb	r3, [r7, #15]
 8011a5e:	687a      	ldr	r2, [r7, #4]
 8011a60:	211a      	movs	r1, #26
 8011a62:	fb01 f303 	mul.w	r3, r1, r3
 8011a66:	4413      	add	r3, r2
 8011a68:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8011a6c:	781a      	ldrb	r2, [r3, #0]
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011a74:	7bfb      	ldrb	r3, [r7, #15]
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	211a      	movs	r1, #26
 8011a7a:	fb01 f303 	mul.w	r3, r1, r3
 8011a7e:	4413      	add	r3, r2
 8011a80:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8011a84:	881a      	ldrh	r2, [r3, #0]
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8011a8c:	7bfb      	ldrb	r3, [r7, #15]
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	211a      	movs	r1, #26
 8011a92:	fb01 f303 	mul.w	r3, r1, r3
 8011a96:	4413      	add	r3, r2
 8011a98:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8011a9c:	781a      	ldrb	r2, [r3, #0]
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8011aa4:	7bfb      	ldrb	r3, [r7, #15]
 8011aa6:	687a      	ldr	r2, [r7, #4]
 8011aa8:	211a      	movs	r1, #26
 8011aaa:	fb01 f303 	mul.w	r3, r1, r3
 8011aae:	4413      	add	r3, r2
 8011ab0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8011ab4:	781a      	ldrb	r2, [r3, #0]
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	2201      	movs	r2, #1
 8011ac0:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	73bb      	strb	r3, [r7, #14]
        break;
 8011ac8:	e005      	b.n	8011ad6 <USBH_AUDIO_FindHIDControl+0xf4>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8011aca:	7bfb      	ldrb	r3, [r7, #15]
 8011acc:	3301      	adds	r3, #1
 8011ace:	73fb      	strb	r3, [r7, #15]
 8011ad0:	7bfb      	ldrb	r3, [r7, #15]
 8011ad2:	2b09      	cmp	r3, #9
 8011ad4:	d9a0      	bls.n	8011a18 <USBH_AUDIO_FindHIDControl+0x36>
      }
    }
  }

  return status;
 8011ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3710      	adds	r7, #16
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}

08011ae0 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b086      	sub	sp, #24
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	74fb      	strb	r3, [r7, #19]
  uint8_t                       itf_number = 0U;
 8011aec:	2300      	movs	r3, #0
 8011aee:	74bb      	strb	r3, [r7, #18]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle =  (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8011af6:	69db      	ldr	r3, [r3, #28]
 8011af8:	60fb      	str	r3, [r7, #12]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	331c      	adds	r3, #28
 8011afe:	617b      	str	r3, [r7, #20]
  ptr = USB_LEN_CFG_DESC;
 8011b00:	2309      	movs	r3, #9
 8011b02:	813b      	strh	r3, [r7, #8]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2200      	movs	r2, #0
 8011b08:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	2200      	movs	r2, #0
 8011b18:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while(ptr < phost->device.CfgDesc.wTotalLength)
 8011b24:	e034      	b.n	8011b90 <USBH_AUDIO_ParseCSDescriptors+0xb0>
  {
    pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8011b26:	f107 0308 	add.w	r3, r7, #8
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	6978      	ldr	r0, [r7, #20]
 8011b2e:	f002 f8f7 	bl	8013d20 <USBH_GetNextDesc>
 8011b32:	6178      	str	r0, [r7, #20]

    switch (pdesc->bDescriptorType)
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	785b      	ldrb	r3, [r3, #1]
 8011b38:	2b04      	cmp	r3, #4
 8011b3a:	d002      	beq.n	8011b42 <USBH_AUDIO_ParseCSDescriptors+0x62>
 8011b3c:	2b24      	cmp	r3, #36	; 0x24
 8011b3e:	d00f      	beq.n	8011b60 <USBH_AUDIO_ParseCSDescriptors+0x80>
 8011b40:	e025      	b.n	8011b8e <USBH_AUDIO_ParseCSDescriptors+0xae>
    {

    case USB_DESC_TYPE_INTERFACE:
      itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	789b      	ldrb	r3, [r3, #2]
 8011b46:	74bb      	strb	r3, [r7, #18]
      alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	78db      	ldrb	r3, [r3, #3]
 8011b4c:	72fb      	strb	r3, [r7, #11]
      itf_index = USBH_FindInterfaceIndex (phost, itf_number, alt_setting);
 8011b4e:	7afa      	ldrb	r2, [r7, #11]
 8011b50:	7cbb      	ldrb	r3, [r7, #18]
 8011b52:	4619      	mov	r1, r3
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f001 f98d 	bl	8012e74 <USBH_FindInterfaceIndex>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	74fb      	strb	r3, [r7, #19]
      break;
 8011b5e:	e017      	b.n	8011b90 <USBH_AUDIO_ParseCSDescriptors+0xb0>

    case USB_DESC_TYPE_CS_INTERFACE:
      if(itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8011b66:	7cba      	ldrb	r2, [r7, #18]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d811      	bhi.n	8011b90 <USBH_AUDIO_ParseCSDescriptors+0xb0>
      {

        ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8011b72:	7cfb      	ldrb	r3, [r7, #19]
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	211a      	movs	r1, #26
 8011b78:	fb01 f303 	mul.w	r3, r1, r3
 8011b7c:	4413      	add	r3, r2
 8011b7e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	697a      	ldr	r2, [r7, #20]
 8011b86:	4619      	mov	r1, r3
 8011b88:	f000 f80e 	bl	8011ba8 <ParseCSDescriptors>
                           phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                           (uint8_t *)(void *)pdesc);
      }
      break;
 8011b8c:	e000      	b.n	8011b90 <USBH_AUDIO_ParseCSDescriptors+0xb0>

    default:
      break;
 8011b8e:	bf00      	nop
  while(ptr < phost->device.CfgDesc.wTotalLength)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8b3 2336 	ldrh.w	r2, [r3, #822]	; 0x336
 8011b96:	893b      	ldrh	r3, [r7, #8]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d8c4      	bhi.n	8011b26 <USBH_AUDIO_ParseCSDescriptors+0x46>
    }
  }
  return USBH_OK;
 8011b9c:	2300      	movs	r3, #0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3718      	adds	r7, #24
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
	...

08011ba8 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                      uint8_t ac_subclass,
                                      uint8_t *pdesc)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b085      	sub	sp, #20
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	60f8      	str	r0, [r7, #12]
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	607a      	str	r2, [r7, #4]
 8011bb4:	72fb      	strb	r3, [r7, #11]
  if(ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8011bb6:	7afb      	ldrb	r3, [r7, #11]
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d163      	bne.n	8011c84 <ParseCSDescriptors+0xdc>
  {
    switch(pdesc[2])
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	3302      	adds	r3, #2
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	3b01      	subs	r3, #1
 8011bc4:	2b05      	cmp	r3, #5
 8011bc6:	f200 8081 	bhi.w	8011ccc <ParseCSDescriptors+0x124>
 8011bca:	a201      	add	r2, pc, #4	; (adr r2, 8011bd0 <ParseCSDescriptors+0x28>)
 8011bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bd0:	08011be9 	.word	0x08011be9
 8011bd4:	08011bf1 	.word	0x08011bf1
 8011bd8:	08011c0d 	.word	0x08011c0d
 8011bdc:	08011c67 	.word	0x08011c67
 8011be0:	08011c49 	.word	0x08011c49
 8011be4:	08011c2b 	.word	0x08011c2b
    {
    case UAC_HEADER:
      class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	601a      	str	r2, [r3, #0]
      break;
 8011bee:	e070      	b.n	8011cd2 <ParseCSDescriptors+0x12a>

    case UAC_INPUT_TERMINAL:
      class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef*)(void *)pdesc;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8011bf6:	1c5a      	adds	r2, r3, #1
 8011bf8:	b291      	uxth	r1, r2
 8011bfa:	68fa      	ldr	r2, [r7, #12]
 8011bfc:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8011c00:	68fa      	ldr	r2, [r7, #12]
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	4413      	add	r3, r2
 8011c06:	687a      	ldr	r2, [r7, #4]
 8011c08:	605a      	str	r2, [r3, #4]
      break;
 8011c0a:	e062      	b.n	8011cd2 <ParseCSDescriptors+0x12a>

    case UAC_OUTPUT_TERMINAL:
      class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef*)(void *)pdesc;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8011c12:	1c5a      	adds	r2, r3, #1
 8011c14:	b291      	uxth	r1, r2
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8011c1c:	68fa      	ldr	r2, [r7, #12]
 8011c1e:	3304      	adds	r3, #4
 8011c20:	009b      	lsls	r3, r3, #2
 8011c22:	4413      	add	r3, r2
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	605a      	str	r2, [r3, #4]
      break;
 8011c28:	e053      	b.n	8011cd2 <ParseCSDescriptors+0x12a>

    case UAC_FEATURE_UNIT:
      class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef*)(void *)pdesc;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8011c30:	1c5a      	adds	r2, r3, #1
 8011c32:	b291      	uxth	r1, r2
 8011c34:	68fa      	ldr	r2, [r7, #12]
 8011c36:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 8011c3a:	68fa      	ldr	r2, [r7, #12]
 8011c3c:	3308      	adds	r3, #8
 8011c3e:	009b      	lsls	r3, r3, #2
 8011c40:	4413      	add	r3, r2
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	605a      	str	r2, [r3, #4]
      break;
 8011c46:	e044      	b.n	8011cd2 <ParseCSDescriptors+0x12a>

    case UAC_SELECTOR_UNIT:
      class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef*)(void *)pdesc;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8011c4e:	1c5a      	adds	r2, r3, #1
 8011c50:	b291      	uxth	r1, r2
 8011c52:	68fa      	ldr	r2, [r7, #12]
 8011c54:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	3310      	adds	r3, #16
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	4413      	add	r3, r2
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	605a      	str	r2, [r3, #4]
      break;
 8011c64:	e035      	b.n	8011cd2 <ParseCSDescriptors+0x12a>

    case UAC_MIXER_UNIT:
      class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef*)(void *)pdesc;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8011c6c:	1c5a      	adds	r2, r3, #1
 8011c6e:	b291      	uxth	r1, r2
 8011c70:	68fa      	ldr	r2, [r7, #12]
 8011c72:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 8011c76:	68fa      	ldr	r2, [r7, #12]
 8011c78:	330c      	adds	r3, #12
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	4413      	add	r3, r2
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	605a      	str	r2, [r3, #4]
      break;
 8011c82:	e026      	b.n	8011cd2 <ParseCSDescriptors+0x12a>
      break;
    }
  }
  else
  {
    if(ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8011c84:	7afb      	ldrb	r3, [r7, #11]
 8011c86:	2b02      	cmp	r3, #2
 8011c88:	d122      	bne.n	8011cd0 <ParseCSDescriptors+0x128>
    {
      switch(pdesc[2])
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	3302      	adds	r3, #2
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d002      	beq.n	8011c9a <ParseCSDescriptors+0xf2>
 8011c94:	2b02      	cmp	r3, #2
 8011c96:	d00a      	beq.n	8011cae <ParseCSDescriptors+0x106>
        break;
      case UAC_FORMAT_TYPE:
        class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef*)(void *)pdesc;
        break;
      default:
        break;
 8011c98:	e01b      	b.n	8011cd2 <ParseCSDescriptors+0x12a>
        class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef*)(void *)pdesc;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	330a      	adds	r3, #10
 8011ca4:	00db      	lsls	r3, r3, #3
 8011ca6:	4413      	add	r3, r2
 8011ca8:	687a      	ldr	r2, [r7, #4]
 8011caa:	605a      	str	r2, [r3, #4]
        break;
 8011cac:	e011      	b.n	8011cd2 <ParseCSDescriptors+0x12a>
        class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef*)(void *)pdesc;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8011cb4:	1c5a      	adds	r2, r3, #1
 8011cb6:	b291      	uxth	r1, r2
 8011cb8:	68fa      	ldr	r2, [r7, #12]
 8011cba:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8011cbe:	68fa      	ldr	r2, [r7, #12]
 8011cc0:	330a      	adds	r3, #10
 8011cc2:	00db      	lsls	r3, r3, #3
 8011cc4:	4413      	add	r3, r2
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	609a      	str	r2, [r3, #8]
        break;
 8011cca:	e002      	b.n	8011cd2 <ParseCSDescriptors+0x12a>
      break;
 8011ccc:	bf00      	nop
 8011cce:	e000      	b.n	8011cd2 <ParseCSDescriptors+0x12a>
      }
    }
 8011cd0:	bf00      	nop
  }

  return USBH_OK;
 8011cd2:	2300      	movs	r3, #0
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3714      	adds	r7, #20
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b085      	sub	sp, #20
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8011cf2:	69db      	ldr	r3, [r3, #28]
 8011cf4:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	73fb      	strb	r3, [r7, #15]
 8011cfa:	e01b      	b.n	8011d34 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if(AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8011cfc:	7bfb      	ldrb	r3, [r7, #15]
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	3322      	adds	r3, #34	; 0x22
 8011d02:	009b      	lsls	r3, r3, #2
 8011d04:	4413      	add	r3, r2
 8011d06:	689b      	ldr	r3, [r3, #8]
 8011d08:	791b      	ldrb	r3, [r3, #4]
 8011d0a:	78fa      	ldrb	r2, [r7, #3]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d10e      	bne.n	8011d2e <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8011d10:	7bfb      	ldrb	r3, [r7, #15]
 8011d12:	68ba      	ldr	r2, [r7, #8]
 8011d14:	3322      	adds	r3, #34	; 0x22
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	4413      	add	r3, r2
 8011d1a:	689b      	ldr	r3, [r3, #8]
 8011d1c:	78db      	ldrb	r3, [r3, #3]
 8011d1e:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8011d20:	78fb      	ldrb	r3, [r7, #3]
 8011d22:	041a      	lsls	r2, r3, #16
 8011d24:	7bfb      	ldrb	r3, [r7, #15]
 8011d26:	4313      	orrs	r3, r2
 8011d28:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8011d2c:	e089      	b.n	8011e42 <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8011d2e:	7bfb      	ldrb	r3, [r7, #15]
 8011d30:	3301      	adds	r3, #1
 8011d32:	73fb      	strb	r3, [r7, #15]
 8011d34:	7bfb      	ldrb	r3, [r7, #15]
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d3dc      	bcc.n	8011cfc <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8011d42:	2300      	movs	r3, #0
 8011d44:	73fb      	strb	r3, [r7, #15]
 8011d46:	e026      	b.n	8011d96 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID)||
 8011d48:	7bfb      	ldrb	r3, [r7, #15]
 8011d4a:	68ba      	ldr	r2, [r7, #8]
 8011d4c:	3326      	adds	r3, #38	; 0x26
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4413      	add	r3, r2
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	795b      	ldrb	r3, [r3, #5]
 8011d56:	78fa      	ldrb	r2, [r7, #3]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d009      	beq.n	8011d70 <USBH_AUDIO_FindLinkedUnit+0x90>
       (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8011d5c:	7bfb      	ldrb	r3, [r7, #15]
 8011d5e:	68ba      	ldr	r2, [r7, #8]
 8011d60:	3326      	adds	r3, #38	; 0x26
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	4413      	add	r3, r2
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	799b      	ldrb	r3, [r3, #6]
    if((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID)||
 8011d6a:	78fa      	ldrb	r2, [r7, #3]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d10f      	bne.n	8011d90 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8011d70:	7bfb      	ldrb	r3, [r7, #15]
 8011d72:	68ba      	ldr	r2, [r7, #8]
 8011d74:	3326      	adds	r3, #38	; 0x26
 8011d76:	009b      	lsls	r3, r3, #2
 8011d78:	4413      	add	r3, r2
 8011d7a:	689b      	ldr	r3, [r3, #8]
 8011d7c:	78db      	ldrb	r3, [r3, #3]
 8011d7e:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8011d80:	78fb      	ldrb	r3, [r7, #3]
 8011d82:	041b      	lsls	r3, r3, #16
 8011d84:	461a      	mov	r2, r3
 8011d86:	7bfb      	ldrb	r3, [r7, #15]
 8011d88:	4313      	orrs	r3, r2
 8011d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011d8e:	e058      	b.n	8011e42 <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8011d90:	7bfb      	ldrb	r3, [r7, #15]
 8011d92:	3301      	adds	r3, #1
 8011d94:	73fb      	strb	r3, [r7, #15]
 8011d96:	7bfb      	ldrb	r3, [r7, #15]
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d3d1      	bcc.n	8011d48 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8011da4:	2300      	movs	r3, #0
 8011da6:	73fb      	strb	r3, [r7, #15]
 8011da8:	e01c      	b.n	8011de4 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if(AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8011daa:	7bfb      	ldrb	r3, [r7, #15]
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	332a      	adds	r3, #42	; 0x2a
 8011db0:	009b      	lsls	r3, r3, #2
 8011db2:	4413      	add	r3, r2
 8011db4:	689b      	ldr	r3, [r3, #8]
 8011db6:	795b      	ldrb	r3, [r3, #5]
 8011db8:	78fa      	ldrb	r2, [r7, #3]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d10f      	bne.n	8011dde <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8011dbe:	7bfb      	ldrb	r3, [r7, #15]
 8011dc0:	68ba      	ldr	r2, [r7, #8]
 8011dc2:	332a      	adds	r3, #42	; 0x2a
 8011dc4:	009b      	lsls	r3, r3, #2
 8011dc6:	4413      	add	r3, r2
 8011dc8:	689b      	ldr	r3, [r3, #8]
 8011dca:	78db      	ldrb	r3, [r3, #3]
 8011dcc:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8011dce:	78fb      	ldrb	r3, [r7, #3]
 8011dd0:	041b      	lsls	r3, r3, #16
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	7bfb      	ldrb	r3, [r7, #15]
 8011dd6:	4313      	orrs	r3, r2
 8011dd8:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8011ddc:	e031      	b.n	8011e42 <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8011dde:	7bfb      	ldrb	r3, [r7, #15]
 8011de0:	3301      	adds	r3, #1
 8011de2:	73fb      	strb	r3, [r7, #15]
 8011de4:	7bfb      	ldrb	r3, [r7, #15]
 8011de6:	b29a      	uxth	r2, r3
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d3db      	bcc.n	8011daa <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for(Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8011df2:	2300      	movs	r3, #0
 8011df4:	73fb      	strb	r3, [r7, #15]
 8011df6:	e01c      	b.n	8011e32 <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8011df8:	7bfb      	ldrb	r3, [r7, #15]
 8011dfa:	68ba      	ldr	r2, [r7, #8]
 8011dfc:	331e      	adds	r3, #30
 8011dfe:	009b      	lsls	r3, r3, #2
 8011e00:	4413      	add	r3, r2
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	79db      	ldrb	r3, [r3, #7]
 8011e06:	78fa      	ldrb	r2, [r7, #3]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d10f      	bne.n	8011e2c <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8011e0c:	7bfb      	ldrb	r3, [r7, #15]
 8011e0e:	68ba      	ldr	r2, [r7, #8]
 8011e10:	331e      	adds	r3, #30
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4413      	add	r3, r2
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	78db      	ldrb	r3, [r3, #3]
 8011e1a:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8011e1c:	78fb      	ldrb	r3, [r7, #3]
 8011e1e:	041b      	lsls	r3, r3, #16
 8011e20:	461a      	mov	r2, r3
 8011e22:	7bfb      	ldrb	r3, [r7, #15]
 8011e24:	4313      	orrs	r3, r2
 8011e26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011e2a:	e00a      	b.n	8011e42 <USBH_AUDIO_FindLinkedUnit+0x162>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8011e2c:	7bfb      	ldrb	r3, [r7, #15]
 8011e2e:	3301      	adds	r3, #1
 8011e30:	73fb      	strb	r3, [r7, #15]
 8011e32:	7bfb      	ldrb	r3, [r7, #15]
 8011e34:	b29a      	uxth	r2, r3
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d3db      	bcc.n	8011df8 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8011e40:	2300      	movs	r3, #0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3714      	adds	r7, #20
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr
	...

08011e50 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b086      	sub	sp, #24
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8011e66:	69db      	ldr	r3, [r3, #28]
 8011e68:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	75bb      	strb	r3, [r7, #22]
 8011e6e:	e02c      	b.n	8011eca <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8011e70:	7dbb      	ldrb	r3, [r7, #22]
 8011e72:	693a      	ldr	r2, [r7, #16]
 8011e74:	331a      	adds	r3, #26
 8011e76:	009b      	lsls	r3, r3, #2
 8011e78:	4413      	add	r3, r2
 8011e7a:	689b      	ldr	r3, [r3, #8]
 8011e7c:	791b      	ldrb	r3, [r3, #4]
 8011e7e:	4619      	mov	r1, r3
 8011e80:	7dbb      	ldrb	r3, [r7, #22]
 8011e82:	693a      	ldr	r2, [r7, #16]
 8011e84:	331a      	adds	r3, #26
 8011e86:	009b      	lsls	r3, r3, #2
 8011e88:	4413      	add	r3, r2
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	795b      	ldrb	r3, [r3, #5]
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	021b      	lsls	r3, r3, #8
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	430b      	orrs	r3, r1
 8011e96:	f240 2201 	movw	r2, #513	; 0x201
 8011e9a:	4293      	cmp	r3, r2
 8011e9c:	d112      	bne.n	8011ec4 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8011e9e:	7dbb      	ldrb	r3, [r7, #22]
 8011ea0:	693a      	ldr	r2, [r7, #16]
 8011ea2:	331a      	adds	r3, #26
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	4413      	add	r3, r2
 8011ea8:	689b      	ldr	r3, [r3, #8]
 8011eaa:	78db      	ldrb	r3, [r3, #3]
 8011eac:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8011eae:	7dbb      	ldrb	r3, [r7, #22]
 8011eb0:	693a      	ldr	r2, [r7, #16]
 8011eb2:	331a      	adds	r3, #26
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	4413      	add	r3, r2
 8011eb8:	689b      	ldr	r3, [r3, #8]
 8011eba:	79da      	ldrb	r2, [r3, #7]
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8011ec2:	e009      	b.n	8011ed8 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8011ec4:	7dbb      	ldrb	r3, [r7, #22]
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	75bb      	strb	r3, [r7, #22]
 8011eca:	7dbb      	ldrb	r3, [r7, #22]
 8011ecc:	b29a      	uxth	r2, r3
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d3cb      	bcc.n	8011e70 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8011ed8:	7dfb      	ldrb	r3, [r7, #23]
 8011eda:	4619      	mov	r1, r3
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f7ff feff 	bl	8011ce0 <USBH_AUDIO_FindLinkedUnit>
 8011ee2:	60f8      	str	r0, [r7, #12]

    if (!value)
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d101      	bne.n	8011eee <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 8011eea:	2302      	movs	r3, #2
 8011eec:	e034      	b.n	8011f58 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	0a1b      	lsrs	r3, r3, #8
 8011ef6:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	0c1b      	lsrs	r3, r3, #16
 8011efc:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8011efe:	7abb      	ldrb	r3, [r7, #10]
 8011f00:	3b03      	subs	r3, #3
 8011f02:	2b03      	cmp	r3, #3
 8011f04:	d81e      	bhi.n	8011f44 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8011f06:	a201      	add	r2, pc, #4	; (adr r2, 8011f0c <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8011f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f0c:	08011f3b 	.word	0x08011f3b
 8011f10:	08011f27 	.word	0x08011f27
 8011f14:	08011f31 	.word	0x08011f31
 8011f18:	08011f1d 	.word	0x08011f1d
    {
    case UAC_FEATURE_UNIT:
      AUDIO_Handle->microphone.asociated_feature = Index;
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	7afa      	ldrb	r2, [r7, #11]
 8011f20:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
      break;
 8011f24:	e011      	b.n	8011f4a <USBH_AUDIO_BuildMicrophonePath+0xfa>

    case UAC_MIXER_UNIT:
      AUDIO_Handle->microphone.asociated_mixer = Index;
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	7afa      	ldrb	r2, [r7, #11]
 8011f2a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
      break;
 8011f2e:	e00c      	b.n	8011f4a <USBH_AUDIO_BuildMicrophonePath+0xfa>

    case UAC_SELECTOR_UNIT:
      AUDIO_Handle->microphone.asociated_selector = Index;
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	7afa      	ldrb	r2, [r7, #11]
 8011f34:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
      break;
 8011f38:	e007      	b.n	8011f4a <USBH_AUDIO_BuildMicrophonePath+0xfa>

    case UAC_OUTPUT_TERMINAL:
      AUDIO_Handle->microphone.asociated_terminal = Index;
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	7afa      	ldrb	r2, [r7, #11]
 8011f3e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
      break;
 8011f42:	e002      	b.n	8011f4a <USBH_AUDIO_BuildMicrophonePath+0xfa>

    default:
      ret = USBH_FAIL;
 8011f44:	2302      	movs	r3, #2
 8011f46:	757b      	strb	r3, [r7, #21]
      break;
 8011f48:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8011f4a:	7abb      	ldrb	r3, [r7, #10]
 8011f4c:	2b03      	cmp	r3, #3
 8011f4e:	d002      	beq.n	8011f56 <USBH_AUDIO_BuildMicrophonePath+0x106>
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d1c0      	bne.n	8011ed8 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 8011f56:	7d7b      	ldrb	r3, [r7, #21]
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3718      	adds	r7, #24
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b086      	sub	sp, #24
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8011f76:	69db      	ldr	r3, [r3, #28]
 8011f78:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	757b      	strb	r3, [r7, #21]
 8011f7e:	e02c      	b.n	8011fda <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if(LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 8011f80:	7d7b      	ldrb	r3, [r7, #21]
 8011f82:	693a      	ldr	r2, [r7, #16]
 8011f84:	331a      	adds	r3, #26
 8011f86:	009b      	lsls	r3, r3, #2
 8011f88:	4413      	add	r3, r2
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	791b      	ldrb	r3, [r3, #4]
 8011f8e:	4619      	mov	r1, r3
 8011f90:	7d7b      	ldrb	r3, [r7, #21]
 8011f92:	693a      	ldr	r2, [r7, #16]
 8011f94:	331a      	adds	r3, #26
 8011f96:	009b      	lsls	r3, r3, #2
 8011f98:	4413      	add	r3, r2
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	795b      	ldrb	r3, [r3, #5]
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	021b      	lsls	r3, r3, #8
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	430b      	orrs	r3, r1
 8011fa6:	f240 1201 	movw	r2, #257	; 0x101
 8011faa:	4293      	cmp	r3, r2
 8011fac:	d112      	bne.n	8011fd4 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8011fae:	7d7b      	ldrb	r3, [r7, #21]
 8011fb0:	693a      	ldr	r2, [r7, #16]
 8011fb2:	331a      	adds	r3, #26
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	4413      	add	r3, r2
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	78db      	ldrb	r3, [r3, #3]
 8011fbc:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8011fbe:	7d7b      	ldrb	r3, [r7, #21]
 8011fc0:	693a      	ldr	r2, [r7, #16]
 8011fc2:	331a      	adds	r3, #26
 8011fc4:	009b      	lsls	r3, r3, #2
 8011fc6:	4413      	add	r3, r2
 8011fc8:	689b      	ldr	r3, [r3, #8]
 8011fca:	79da      	ldrb	r2, [r3, #7]
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8011fd2:	e009      	b.n	8011fe8 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for(terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8011fd4:	7d7b      	ldrb	r3, [r7, #21]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	757b      	strb	r3, [r7, #21]
 8011fda:	7d7b      	ldrb	r3, [r7, #21]
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d3cb      	bcc.n	8011f80 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for(Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8011fe8:	2300      	movs	r3, #0
 8011fea:	75bb      	strb	r3, [r7, #22]
 8011fec:	e011      	b.n	8012012 <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if(AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8011fee:	7dbb      	ldrb	r3, [r7, #22]
 8011ff0:	693a      	ldr	r2, [r7, #16]
 8011ff2:	3317      	adds	r3, #23
 8011ff4:	00db      	lsls	r3, r3, #3
 8011ff6:	4413      	add	r3, r2
 8011ff8:	689b      	ldr	r3, [r3, #8]
 8011ffa:	78db      	ldrb	r3, [r3, #3]
 8011ffc:	7dfa      	ldrb	r2, [r7, #23]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d104      	bne.n	801200c <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	7dba      	ldrb	r2, [r7, #22]
 8012006:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 801200a:	e009      	b.n	8012020 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for(Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 801200c:	7dbb      	ldrb	r3, [r7, #22]
 801200e:	3301      	adds	r3, #1
 8012010:	75bb      	strb	r3, [r7, #22]
 8012012:	7dbb      	ldrb	r3, [r7, #22]
 8012014:	b29a      	uxth	r2, r3
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 801201c:	429a      	cmp	r2, r3
 801201e:	d3e6      	bcc.n	8011fee <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8012020:	7dfb      	ldrb	r3, [r7, #23]
 8012022:	4619      	mov	r1, r3
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f7ff fe5b 	bl	8011ce0 <USBH_AUDIO_FindLinkedUnit>
 801202a:	60f8      	str	r0, [r7, #12]

    if (!value)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d101      	bne.n	8012036 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8012032:	2302      	movs	r3, #2
 8012034:	e04d      	b.n	80120d2 <USBH_AUDIO_BuildHeadphonePath+0x172>
    }

    Index = (uint8_t)(value & 0xFFU);
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	0a1b      	lsrs	r3, r3, #8
 801203e:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	0c1b      	lsrs	r3, r3, #16
 8012044:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8012046:	7afb      	ldrb	r3, [r7, #11]
 8012048:	3b03      	subs	r3, #3
 801204a:	2b03      	cmp	r3, #3
 801204c:	d836      	bhi.n	80120bc <USBH_AUDIO_BuildHeadphonePath+0x15c>
 801204e:	a201      	add	r2, pc, #4	; (adr r2, 8012054 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8012050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012054:	08012083 	.word	0x08012083
 8012058:	0801206f 	.word	0x0801206f
 801205c:	08012079 	.word	0x08012079
 8012060:	08012065 	.word	0x08012065
    {
    case UAC_FEATURE_UNIT:
      AUDIO_Handle->headphone.asociated_feature = Index;
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	7dba      	ldrb	r2, [r7, #22]
 8012068:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
      break;
 801206c:	e02a      	b.n	80120c4 <USBH_AUDIO_BuildHeadphonePath+0x164>

    case UAC_MIXER_UNIT:
      AUDIO_Handle->headphone.asociated_mixer = Index;
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	7dba      	ldrb	r2, [r7, #22]
 8012072:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
      break;
 8012076:	e025      	b.n	80120c4 <USBH_AUDIO_BuildHeadphonePath+0x164>

    case UAC_SELECTOR_UNIT:
      AUDIO_Handle->headphone.asociated_selector = Index;
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	7dba      	ldrb	r2, [r7, #22]
 801207c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      break;
 8012080:	e020      	b.n	80120c4 <USBH_AUDIO_BuildHeadphonePath+0x164>

    case UAC_OUTPUT_TERMINAL:
      AUDIO_Handle->headphone.asociated_terminal = Index;
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	7dba      	ldrb	r2, [r7, #22]
 8012086:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
      if(LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 801208a:	7dbb      	ldrb	r3, [r7, #22]
 801208c:	693a      	ldr	r2, [r7, #16]
 801208e:	331e      	adds	r3, #30
 8012090:	009b      	lsls	r3, r3, #2
 8012092:	4413      	add	r3, r2
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	791b      	ldrb	r3, [r3, #4]
 8012098:	4619      	mov	r1, r3
 801209a:	7dbb      	ldrb	r3, [r7, #22]
 801209c:	693a      	ldr	r2, [r7, #16]
 801209e:	331e      	adds	r3, #30
 80120a0:	009b      	lsls	r3, r3, #2
 80120a2:	4413      	add	r3, r2
 80120a4:	689b      	ldr	r3, [r3, #8]
 80120a6:	795b      	ldrb	r3, [r3, #5]
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	021b      	lsls	r3, r3, #8
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	430b      	orrs	r3, r1
 80120b0:	f240 1203 	movw	r2, #259	; 0x103
 80120b4:	4293      	cmp	r3, r2
 80120b6:	d004      	beq.n	80120c2 <USBH_AUDIO_BuildHeadphonePath+0x162>
      {
        return  USBH_OK;
 80120b8:	2300      	movs	r3, #0
 80120ba:	e00a      	b.n	80120d2 <USBH_AUDIO_BuildHeadphonePath+0x172>
      }
      break;

    default:
      ret = USBH_FAIL;
 80120bc:	2302      	movs	r3, #2
 80120be:	753b      	strb	r3, [r7, #20]
      break;
 80120c0:	e000      	b.n	80120c4 <USBH_AUDIO_BuildHeadphonePath+0x164>
      break;
 80120c2:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80120c4:	7afb      	ldrb	r3, [r7, #11]
 80120c6:	2b03      	cmp	r3, #3
 80120c8:	d002      	beq.n	80120d0 <USBH_AUDIO_BuildHeadphonePath+0x170>
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d1a7      	bne.n	8012020 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 80120d0:	7d3b      	ldrb	r3, [r7, #20]
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3718      	adds	r7, #24
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop

080120dc <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b086      	sub	sp, #24
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	4608      	mov	r0, r1
 80120e6:	4611      	mov	r1, r2
 80120e8:	461a      	mov	r2, r3
 80120ea:	4603      	mov	r3, r0
 80120ec:	70fb      	strb	r3, [r7, #3]
 80120ee:	460b      	mov	r3, r1
 80120f0:	70bb      	strb	r3, [r7, #2]
 80120f2:	4613      	mov	r3, r2
 80120f4:	707b      	strb	r3, [r7, #1]
  uint16_t wValue,wIndex,wLength;
  uint8_t UnitID,InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80120fc:	69db      	ldr	r3, [r3, #28]
 80120fe:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8012100:	2300      	movs	r3, #0
 8012102:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8012104:	78fb      	ldrb	r3, [r7, #3]
 8012106:	2b02      	cmp	r3, #2
 8012108:	d002      	beq.n	8012110 <USBH_AC_SetCur+0x34>
 801210a:	2b06      	cmp	r3, #6
 801210c:	d018      	beq.n	8012140 <USBH_AC_SetCur+0x64>
 801210e:	e035      	b.n	801217c <USBH_AC_SetCur+0xa0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012114:	78db      	ldrb	r3, [r3, #3]
 8012116:	72fb      	strb	r3, [r7, #11]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8012118:	2300      	movs	r3, #0
 801211a:	72bb      	strb	r3, [r7, #10]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 801211c:	7afb      	ldrb	r3, [r7, #11]
 801211e:	b29b      	uxth	r3, r3
 8012120:	021b      	lsls	r3, r3, #8
 8012122:	b29a      	uxth	r2, r3
 8012124:	7abb      	ldrb	r3, [r7, #10]
 8012126:	b29b      	uxth	r3, r3
 8012128:	4313      	orrs	r3, r2
 801212a:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 801212c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012130:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	2200      	movs	r2, #0
 8012136:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 801213a:	2301      	movs	r3, #1
 801213c:	827b      	strh	r3, [r7, #18]
    break;
 801213e:	e020      	b.n	8012182 <USBH_AC_SetCur+0xa6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8012140:	78bb      	ldrb	r3, [r7, #2]
 8012142:	68fa      	ldr	r2, [r7, #12]
 8012144:	3322      	adds	r3, #34	; 0x22
 8012146:	009b      	lsls	r3, r3, #2
 8012148:	4413      	add	r3, r2
 801214a:	689b      	ldr	r3, [r3, #8]
 801214c:	78db      	ldrb	r3, [r3, #3]
 801214e:	72fb      	strb	r3, [r7, #11]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8012150:	2300      	movs	r3, #0
 8012152:	72bb      	strb	r3, [r7, #10]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8012154:	7afb      	ldrb	r3, [r7, #11]
 8012156:	b29b      	uxth	r3, r3
 8012158:	021b      	lsls	r3, r3, #8
 801215a:	b29a      	uxth	r2, r3
 801215c:	7abb      	ldrb	r3, [r7, #10]
 801215e:	b29b      	uxth	r3, r3
 8012160:	4313      	orrs	r3, r2
 8012162:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8012164:	787b      	ldrb	r3, [r7, #1]
 8012166:	b29b      	uxth	r3, r3
 8012168:	021b      	lsls	r3, r3, #8
 801216a:	b29a      	uxth	r2, r3
 801216c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012170:	b29b      	uxth	r3, r3
 8012172:	4313      	orrs	r3, r2
 8012174:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 8012176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012178:	827b      	strh	r3, [r7, #18]
    break;
 801217a:	e002      	b.n	8012182 <USBH_AC_SetCur+0xa6>

  default:
    ret = USBH_FAIL;
 801217c:	2302      	movs	r3, #2
 801217e:	747b      	strb	r3, [r7, #17]
    break;
 8012180:	bf00      	nop
  }

  if (ret != USBH_OK)
 8012182:	7c7b      	ldrb	r3, [r7, #17]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d001      	beq.n	801218c <USBH_AC_SetCur+0xb0>
  {
    return ret;
 8012188:	7c7b      	ldrb	r3, [r7, #17]
 801218a:	e017      	b.n	80121bc <USBH_AC_SetCur+0xe0>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2221      	movs	r2, #33	; 0x21
 8012190:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2201      	movs	r2, #1
 8012196:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	8afa      	ldrh	r2, [r7, #22]
 801219c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	8aba      	ldrh	r2, [r7, #20]
 80121a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	8a7a      	ldrh	r2, [r7, #18]
 80121a8:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80121b0:	8a7a      	ldrh	r2, [r7, #18]
 80121b2:	4619      	mov	r1, r3
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f001 fdce 	bl	8013d56 <USBH_CtlReq>
 80121ba:	4603      	mov	r3, r0
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3718      	adds	r7, #24
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b086      	sub	sp, #24
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	4608      	mov	r0, r1
 80121ce:	4611      	mov	r1, r2
 80121d0:	461a      	mov	r2, r3
 80121d2:	4603      	mov	r3, r0
 80121d4:	70fb      	strb	r3, [r7, #3]
 80121d6:	460b      	mov	r3, r1
 80121d8:	70bb      	strb	r3, [r7, #2]
 80121da:	4613      	mov	r3, r2
 80121dc:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80121de:	2300      	movs	r3, #0
 80121e0:	82fb      	strh	r3, [r7, #22]
 80121e2:	2300      	movs	r3, #0
 80121e4:	82bb      	strh	r3, [r7, #20]
 80121e6:	2300      	movs	r3, #0
 80121e8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80121ea:	2300      	movs	r3, #0
 80121ec:	743b      	strb	r3, [r7, #16]
 80121ee:	2300      	movs	r3, #0
 80121f0:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80121f8:	69db      	ldr	r3, [r3, #28]
 80121fa:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80121fc:	2300      	movs	r3, #0
 80121fe:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8012200:	78fb      	ldrb	r3, [r7, #3]
 8012202:	2b03      	cmp	r3, #3
 8012204:	d039      	beq.n	801227a <USBH_AC_GetCur+0xb6>
 8012206:	2b06      	cmp	r3, #6
 8012208:	d019      	beq.n	801223e <USBH_AC_GetCur+0x7a>
 801220a:	2b02      	cmp	r3, #2
 801220c:	d14a      	bne.n	80122a4 <USBH_AC_GetCur+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012212:	78db      	ldrb	r3, [r3, #3]
 8012214:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8012216:	2300      	movs	r3, #0
 8012218:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 801221a:	7c3b      	ldrb	r3, [r7, #16]
 801221c:	b29b      	uxth	r3, r3
 801221e:	021b      	lsls	r3, r3, #8
 8012220:	b29a      	uxth	r2, r3
 8012222:	7bfb      	ldrb	r3, [r7, #15]
 8012224:	b29b      	uxth	r3, r3
 8012226:	4313      	orrs	r3, r2
 8012228:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 801222a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801222e:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	2200      	movs	r2, #0
 8012234:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8012238:	2301      	movs	r3, #1
 801223a:	827b      	strh	r3, [r7, #18]
    break;
 801223c:	e035      	b.n	80122aa <USBH_AC_GetCur+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 801223e:	78bb      	ldrb	r3, [r7, #2]
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	3322      	adds	r3, #34	; 0x22
 8012244:	009b      	lsls	r3, r3, #2
 8012246:	4413      	add	r3, r2
 8012248:	689b      	ldr	r3, [r3, #8]
 801224a:	78db      	ldrb	r3, [r3, #3]
 801224c:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801224e:	2300      	movs	r3, #0
 8012250:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012252:	7c3b      	ldrb	r3, [r7, #16]
 8012254:	b29b      	uxth	r3, r3
 8012256:	021b      	lsls	r3, r3, #8
 8012258:	b29a      	uxth	r2, r3
 801225a:	7bfb      	ldrb	r3, [r7, #15]
 801225c:	b29b      	uxth	r3, r3
 801225e:	4313      	orrs	r3, r2
 8012260:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8012262:	787b      	ldrb	r3, [r7, #1]
 8012264:	b29b      	uxth	r3, r3
 8012266:	021b      	lsls	r3, r3, #8
 8012268:	b29a      	uxth	r2, r3
 801226a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801226e:	b29b      	uxth	r3, r3
 8012270:	4313      	orrs	r3, r2
 8012272:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 8012274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012276:	827b      	strh	r3, [r7, #18]
    break;
 8012278:	e017      	b.n	80122aa <USBH_AC_GetCur+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012280:	78db      	ldrb	r3, [r3, #3]
 8012282:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8012284:	2300      	movs	r3, #0
 8012286:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012288:	7c3b      	ldrb	r3, [r7, #16]
 801228a:	b29b      	uxth	r3, r3
 801228c:	021b      	lsls	r3, r3, #8
 801228e:	b29a      	uxth	r2, r3
 8012290:	7bfb      	ldrb	r3, [r7, #15]
 8012292:	b29b      	uxth	r3, r3
 8012294:	4313      	orrs	r3, r2
 8012296:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8012298:	f44f 7380 	mov.w	r3, #256	; 0x100
 801229c:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 801229e:	2301      	movs	r3, #1
 80122a0:	827b      	strh	r3, [r7, #18]
    break;
 80122a2:	e002      	b.n	80122aa <USBH_AC_GetCur+0xe6>

  default:
    ret = USBH_FAIL;
 80122a4:	2302      	movs	r3, #2
 80122a6:	747b      	strb	r3, [r7, #17]
    break;
 80122a8:	bf00      	nop
  }

  if (ret != USBH_OK)
 80122aa:	7c7b      	ldrb	r3, [r7, #17]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d001      	beq.n	80122b4 <USBH_AC_GetCur+0xf0>
  {
    return ret;
 80122b0:	7c7b      	ldrb	r3, [r7, #17]
 80122b2:	e017      	b.n	80122e4 <USBH_AC_GetCur+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	22a1      	movs	r2, #161	; 0xa1
 80122b8:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2281      	movs	r2, #129	; 0x81
 80122be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	8afa      	ldrh	r2, [r7, #22]
 80122c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	8aba      	ldrh	r2, [r7, #20]
 80122ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	8a7a      	ldrh	r2, [r7, #18]
 80122d0:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem) , wLength ));
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80122d8:	8a7a      	ldrh	r2, [r7, #18]
 80122da:	4619      	mov	r1, r3
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f001 fd3a 	bl	8013d56 <USBH_CtlReq>
 80122e2:	4603      	mov	r3, r0
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3718      	adds	r7, #24
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b086      	sub	sp, #24
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	4608      	mov	r0, r1
 80122f6:	4611      	mov	r1, r2
 80122f8:	461a      	mov	r2, r3
 80122fa:	4603      	mov	r3, r0
 80122fc:	70fb      	strb	r3, [r7, #3]
 80122fe:	460b      	mov	r3, r1
 8012300:	70bb      	strb	r3, [r7, #2]
 8012302:	4613      	mov	r3, r2
 8012304:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8012306:	2300      	movs	r3, #0
 8012308:	82fb      	strh	r3, [r7, #22]
 801230a:	2300      	movs	r3, #0
 801230c:	82bb      	strh	r3, [r7, #20]
 801230e:	2300      	movs	r3, #0
 8012310:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8012312:	2300      	movs	r3, #0
 8012314:	743b      	strb	r3, [r7, #16]
 8012316:	2300      	movs	r3, #0
 8012318:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012320:	69db      	ldr	r3, [r3, #28]
 8012322:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8012328:	78fb      	ldrb	r3, [r7, #3]
 801232a:	2b03      	cmp	r3, #3
 801232c:	d039      	beq.n	80123a2 <USBH_AC_GetMax+0xb6>
 801232e:	2b06      	cmp	r3, #6
 8012330:	d019      	beq.n	8012366 <USBH_AC_GetMax+0x7a>
 8012332:	2b02      	cmp	r3, #2
 8012334:	d14a      	bne.n	80123cc <USBH_AC_GetMax+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801233a:	78db      	ldrb	r3, [r3, #3]
 801233c:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801233e:	2300      	movs	r3, #0
 8012340:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012342:	7c3b      	ldrb	r3, [r7, #16]
 8012344:	b29b      	uxth	r3, r3
 8012346:	021b      	lsls	r3, r3, #8
 8012348:	b29a      	uxth	r2, r3
 801234a:	7bfb      	ldrb	r3, [r7, #15]
 801234c:	b29b      	uxth	r3, r3
 801234e:	4313      	orrs	r3, r2
 8012350:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8012352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012356:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	2200      	movs	r2, #0
 801235c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8012360:	2301      	movs	r3, #1
 8012362:	827b      	strh	r3, [r7, #18]
    break;
 8012364:	e035      	b.n	80123d2 <USBH_AC_GetMax+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8012366:	78bb      	ldrb	r3, [r7, #2]
 8012368:	68ba      	ldr	r2, [r7, #8]
 801236a:	3322      	adds	r3, #34	; 0x22
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	4413      	add	r3, r2
 8012370:	689b      	ldr	r3, [r3, #8]
 8012372:	78db      	ldrb	r3, [r3, #3]
 8012374:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8012376:	2300      	movs	r3, #0
 8012378:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 801237a:	7c3b      	ldrb	r3, [r7, #16]
 801237c:	b29b      	uxth	r3, r3
 801237e:	021b      	lsls	r3, r3, #8
 8012380:	b29a      	uxth	r2, r3
 8012382:	7bfb      	ldrb	r3, [r7, #15]
 8012384:	b29b      	uxth	r3, r3
 8012386:	4313      	orrs	r3, r2
 8012388:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 801238a:	787b      	ldrb	r3, [r7, #1]
 801238c:	b29b      	uxth	r3, r3
 801238e:	021b      	lsls	r3, r3, #8
 8012390:	b29a      	uxth	r2, r3
 8012392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012396:	b29b      	uxth	r3, r3
 8012398:	4313      	orrs	r3, r2
 801239a:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 801239c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801239e:	827b      	strh	r3, [r7, #18]
    break;
 80123a0:	e017      	b.n	80123d2 <USBH_AC_GetMax+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80123a8:	78db      	ldrb	r3, [r3, #3]
 80123aa:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 80123ac:	2300      	movs	r3, #0
 80123ae:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80123b0:	7c3b      	ldrb	r3, [r7, #16]
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	021b      	lsls	r3, r3, #8
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	7bfb      	ldrb	r3, [r7, #15]
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	4313      	orrs	r3, r2
 80123be:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U) ;
 80123c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123c4:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 80123c6:	2301      	movs	r3, #1
 80123c8:	827b      	strh	r3, [r7, #18]
    break;
 80123ca:	e002      	b.n	80123d2 <USBH_AC_GetMax+0xe6>

  default:
    ret = USBH_FAIL;
 80123cc:	2302      	movs	r3, #2
 80123ce:	747b      	strb	r3, [r7, #17]
    break;
 80123d0:	bf00      	nop
  }

  if (ret != USBH_OK)
 80123d2:	7c7b      	ldrb	r3, [r7, #17]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d001      	beq.n	80123dc <USBH_AC_GetMax+0xf0>
  {
    return ret;
 80123d8:	7c7b      	ldrb	r3, [r7, #17]
 80123da:	e017      	b.n	801240c <USBH_AC_GetMax+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	22a1      	movs	r2, #161	; 0xa1
 80123e0:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2283      	movs	r2, #131	; 0x83
 80123e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	8afa      	ldrh	r2, [r7, #22]
 80123ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	8aba      	ldrh	r2, [r7, #20]
 80123f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	8a7a      	ldrh	r2, [r7, #18]
 80123f8:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8012400:	8a7a      	ldrh	r2, [r7, #18]
 8012402:	4619      	mov	r1, r3
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f001 fca6 	bl	8013d56 <USBH_CtlReq>
 801240a:	4603      	mov	r3, r0

}
 801240c:	4618      	mov	r0, r3
 801240e:	3718      	adds	r7, #24
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b086      	sub	sp, #24
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	4608      	mov	r0, r1
 801241e:	4611      	mov	r1, r2
 8012420:	461a      	mov	r2, r3
 8012422:	4603      	mov	r3, r0
 8012424:	70fb      	strb	r3, [r7, #3]
 8012426:	460b      	mov	r3, r1
 8012428:	70bb      	strb	r3, [r7, #2]
 801242a:	4613      	mov	r3, r2
 801242c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 801242e:	2300      	movs	r3, #0
 8012430:	82fb      	strh	r3, [r7, #22]
 8012432:	2300      	movs	r3, #0
 8012434:	82bb      	strh	r3, [r7, #20]
 8012436:	2300      	movs	r3, #0
 8012438:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 801243a:	2300      	movs	r3, #0
 801243c:	743b      	strb	r3, [r7, #16]
 801243e:	2300      	movs	r3, #0
 8012440:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012448:	69db      	ldr	r3, [r3, #28]
 801244a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 801244c:	2300      	movs	r3, #0
 801244e:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8012450:	78fb      	ldrb	r3, [r7, #3]
 8012452:	2b03      	cmp	r3, #3
 8012454:	d039      	beq.n	80124ca <USBH_AC_GetRes+0xb6>
 8012456:	2b06      	cmp	r3, #6
 8012458:	d019      	beq.n	801248e <USBH_AC_GetRes+0x7a>
 801245a:	2b02      	cmp	r3, #2
 801245c:	d14a      	bne.n	80124f4 <USBH_AC_GetRes+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012462:	78db      	ldrb	r3, [r3, #3]
 8012464:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 8012466:	2300      	movs	r3, #0
 8012468:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 801246a:	7c3b      	ldrb	r3, [r7, #16]
 801246c:	b29b      	uxth	r3, r3
 801246e:	021b      	lsls	r3, r3, #8
 8012470:	b29a      	uxth	r2, r3
 8012472:	7bfb      	ldrb	r3, [r7, #15]
 8012474:	b29b      	uxth	r3, r3
 8012476:	4313      	orrs	r3, r2
 8012478:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U) ;
 801247a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801247e:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	2200      	movs	r2, #0
 8012484:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 8012488:	2301      	movs	r3, #1
 801248a:	827b      	strh	r3, [r7, #18]
    break;
 801248c:	e035      	b.n	80124fa <USBH_AC_GetRes+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 801248e:	78bb      	ldrb	r3, [r7, #2]
 8012490:	68ba      	ldr	r2, [r7, #8]
 8012492:	3322      	adds	r3, #34	; 0x22
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	4413      	add	r3, r2
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	78db      	ldrb	r3, [r3, #3]
 801249c:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801249e:	2300      	movs	r3, #0
 80124a0:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80124a2:	7c3b      	ldrb	r3, [r7, #16]
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	021b      	lsls	r3, r3, #8
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	7bfb      	ldrb	r3, [r7, #15]
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	4313      	orrs	r3, r2
 80124b0:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80124b2:	787b      	ldrb	r3, [r7, #1]
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	021b      	lsls	r3, r3, #8
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80124be:	b29b      	uxth	r3, r3
 80124c0:	4313      	orrs	r3, r2
 80124c2:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 80124c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124c6:	827b      	strh	r3, [r7, #18]
    break;
 80124c8:	e017      	b.n	80124fa <USBH_AC_GetRes+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124d0:	78db      	ldrb	r3, [r3, #3]
 80124d2:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 80124d4:	2300      	movs	r3, #0
 80124d6:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80124d8:	7c3b      	ldrb	r3, [r7, #16]
 80124da:	b29b      	uxth	r3, r3
 80124dc:	021b      	lsls	r3, r3, #8
 80124de:	b29a      	uxth	r2, r3
 80124e0:	7bfb      	ldrb	r3, [r7, #15]
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	4313      	orrs	r3, r2
 80124e6:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U) ;
 80124e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124ec:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 80124ee:	2301      	movs	r3, #1
 80124f0:	827b      	strh	r3, [r7, #18]
    break;
 80124f2:	e002      	b.n	80124fa <USBH_AC_GetRes+0xe6>

  default:
    ret = USBH_FAIL;
 80124f4:	2302      	movs	r3, #2
 80124f6:	747b      	strb	r3, [r7, #17]
    break;
 80124f8:	bf00      	nop
  }

  if (ret != USBH_OK)
 80124fa:	7c7b      	ldrb	r3, [r7, #17]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d001      	beq.n	8012504 <USBH_AC_GetRes+0xf0>
  {
    return ret;
 8012500:	7c7b      	ldrb	r3, [r7, #17]
 8012502:	e017      	b.n	8012534 <USBH_AC_GetRes+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	22a1      	movs	r2, #161	; 0xa1
 8012508:	741a      	strb	r2, [r3, #16]
                                                 | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2284      	movs	r2, #132	; 0x84
 801250e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	8afa      	ldrh	r2, [r7, #22]
 8012514:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	8aba      	ldrh	r2, [r7, #20]
 801251a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	8a7a      	ldrh	r2, [r7, #18]
 8012520:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8012528:	8a7a      	ldrh	r2, [r7, #18]
 801252a:	4619      	mov	r1, r3
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f001 fc12 	bl	8013d56 <USBH_CtlReq>
 8012532:	4603      	mov	r3, r0

}
 8012534:	4618      	mov	r0, r3
 8012536:	3718      	adds	r7, #24
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b086      	sub	sp, #24
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	4608      	mov	r0, r1
 8012546:	4611      	mov	r1, r2
 8012548:	461a      	mov	r2, r3
 801254a:	4603      	mov	r3, r0
 801254c:	70fb      	strb	r3, [r7, #3]
 801254e:	460b      	mov	r3, r1
 8012550:	70bb      	strb	r3, [r7, #2]
 8012552:	4613      	mov	r3, r2
 8012554:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8012556:	2300      	movs	r3, #0
 8012558:	82fb      	strh	r3, [r7, #22]
 801255a:	2300      	movs	r3, #0
 801255c:	82bb      	strh	r3, [r7, #20]
 801255e:	2300      	movs	r3, #0
 8012560:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8012562:	2300      	movs	r3, #0
 8012564:	743b      	strb	r3, [r7, #16]
 8012566:	2300      	movs	r3, #0
 8012568:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012570:	69db      	ldr	r3, [r3, #28]
 8012572:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8012574:	2300      	movs	r3, #0
 8012576:	747b      	strb	r3, [r7, #17]

  switch(subtype)
 8012578:	78fb      	ldrb	r3, [r7, #3]
 801257a:	2b03      	cmp	r3, #3
 801257c:	d039      	beq.n	80125f2 <USBH_AC_GetMin+0xb6>
 801257e:	2b06      	cmp	r3, #6
 8012580:	d019      	beq.n	80125b6 <USBH_AC_GetMin+0x7a>
 8012582:	2b02      	cmp	r3, #2
 8012584:	d14a      	bne.n	801261c <USBH_AC_GetMin+0xe0>
  {
  case UAC_INPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801258a:	78db      	ldrb	r3, [r3, #3]
 801258c:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 801258e:	2300      	movs	r3, #0
 8012590:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012592:	7c3b      	ldrb	r3, [r7, #16]
 8012594:	b29b      	uxth	r3, r3
 8012596:	021b      	lsls	r3, r3, #8
 8012598:	b29a      	uxth	r2, r3
 801259a:	7bfb      	ldrb	r3, [r7, #15]
 801259c:	b29b      	uxth	r3, r3
 801259e:	4313      	orrs	r3, r2
 80125a0:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 80125a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125a6:	82fb      	strh	r3, [r7, #22]
    AUDIO_Handle->mem[0] = 0x00U;
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	2200      	movs	r2, #0
 80125ac:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

    wLength = 1U;
 80125b0:	2301      	movs	r3, #1
 80125b2:	827b      	strh	r3, [r7, #18]
    break;
 80125b4:	e035      	b.n	8012622 <USBH_AC_GetMin+0xe6>
  case UAC_FEATURE_UNIT:
    UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80125b6:	78bb      	ldrb	r3, [r7, #2]
 80125b8:	68ba      	ldr	r2, [r7, #8]
 80125ba:	3322      	adds	r3, #34	; 0x22
 80125bc:	009b      	lsls	r3, r3, #2
 80125be:	4413      	add	r3, r2
 80125c0:	689b      	ldr	r3, [r3, #8]
 80125c2:	78db      	ldrb	r3, [r3, #3]
 80125c4:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 80125c6:	2300      	movs	r3, #0
 80125c8:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80125ca:	7c3b      	ldrb	r3, [r7, #16]
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	021b      	lsls	r3, r3, #8
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	7bfb      	ldrb	r3, [r7, #15]
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	4313      	orrs	r3, r2
 80125d8:	82bb      	strh	r3, [r7, #20]
    /*holds the CS(control selector ) and CN (channel number)*/
    wValue =  (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80125da:	787b      	ldrb	r3, [r7, #1]
 80125dc:	b29b      	uxth	r3, r3
 80125de:	021b      	lsls	r3, r3, #8
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	4313      	orrs	r3, r2
 80125ea:	82fb      	strh	r3, [r7, #22]
    wLength = length;
 80125ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125ee:	827b      	strh	r3, [r7, #18]
    break;
 80125f0:	e017      	b.n	8012622 <USBH_AC_GetMin+0xe6>

  case UAC_OUTPUT_TERMINAL:
    UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125f8:	78db      	ldrb	r3, [r3, #3]
 80125fa:	743b      	strb	r3, [r7, #16]
    InterfaceNum = 0U; /*Always zero Control Interface */
 80125fc:	2300      	movs	r3, #0
 80125fe:	73fb      	strb	r3, [r7, #15]
    wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012600:	7c3b      	ldrb	r3, [r7, #16]
 8012602:	b29b      	uxth	r3, r3
 8012604:	021b      	lsls	r3, r3, #8
 8012606:	b29a      	uxth	r2, r3
 8012608:	7bfb      	ldrb	r3, [r7, #15]
 801260a:	b29b      	uxth	r3, r3
 801260c:	4313      	orrs	r3, r2
 801260e:	82bb      	strh	r3, [r7, #20]
    wValue = (COPY_PROTECT_CONTROL << 8U);
 8012610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012614:	82fb      	strh	r3, [r7, #22]
    wLength = 1U;
 8012616:	2301      	movs	r3, #1
 8012618:	827b      	strh	r3, [r7, #18]
    break;
 801261a:	e002      	b.n	8012622 <USBH_AC_GetMin+0xe6>

  default:
    ret = USBH_FAIL;
 801261c:	2302      	movs	r3, #2
 801261e:	747b      	strb	r3, [r7, #17]
    break;
 8012620:	bf00      	nop
  }

  if (ret != USBH_OK)
 8012622:	7c7b      	ldrb	r3, [r7, #17]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d001      	beq.n	801262c <USBH_AC_GetMin+0xf0>
  {
    return ret;
 8012628:	7c7b      	ldrb	r3, [r7, #17]
 801262a:	e017      	b.n	801265c <USBH_AC_GetMin+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	22a1      	movs	r2, #161	; 0xa1
 8012630:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2282      	movs	r2, #130	; 0x82
 8012636:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	8afa      	ldrh	r2, [r7, #22]
 801263c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	8aba      	ldrh	r2, [r7, #20]
 8012642:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	8a7a      	ldrh	r2, [r7, #18]
 8012648:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8012650:	8a7a      	ldrh	r2, [r7, #18]
 8012652:	4619      	mov	r1, r3
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f001 fb7e 	bl	8013d56 <USBH_CtlReq>
 801265a:	4603      	mov	r3, r0

}
 801265c:	4618      	mov	r0, r3
 801265e:	3718      	adds	r7, #24
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                               uint8_t  Ep,
                                               uint8_t *buff)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b086      	sub	sp, #24
 8012668:	af00      	add	r7, sp, #0
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	460b      	mov	r3, r1
 801266e:	607a      	str	r2, [r7, #4]
 8012670:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8012672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012676:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8012678:	7afb      	ldrb	r3, [r7, #11]
 801267a:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 801267c:	2303      	movs	r3, #3
 801267e:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	2222      	movs	r2, #34	; 0x22
 8012684:	741a      	strb	r2, [r3, #16]
    USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2201      	movs	r2, #1
 801268a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	8afa      	ldrh	r2, [r7, #22]
 8012690:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	8aba      	ldrh	r2, [r7, #20]
 8012696:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	8a7a      	ldrh	r2, [r7, #18]
 801269c:	82da      	strh	r2, [r3, #22]

  return(USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 801269e:	8a7b      	ldrh	r3, [r7, #18]
 80126a0:	461a      	mov	r2, r3
 80126a2:	6879      	ldr	r1, [r7, #4]
 80126a4:	68f8      	ldr	r0, [r7, #12]
 80126a6:	f001 fb56 	bl	8013d56 <USBH_CtlReq>
 80126aa:	4603      	mov	r3, r0

}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3718      	adds	r7, #24
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream (USBH_HandleTypeDef *phost)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b085      	sub	sp, #20
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80126bc:	2301      	movs	r3, #1
 80126be:	73fb      	strb	r3, [r7, #15]

  return status;
 80126c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3714      	adds	r7, #20
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
	...

080126d0 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control (USBH_HandleTypeDef *phost)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b086      	sub	sp, #24
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80126d8:	2301      	movs	r3, #1
 80126da:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80126e2:	69db      	ldr	r3, [r3, #28]
 80126e4:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 80126e6:	2300      	movs	r3, #0
 80126e8:	81fb      	strh	r3, [r7, #14]

  switch(AUDIO_Handle->control_state)
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	78db      	ldrb	r3, [r3, #3]
 80126ee:	3b01      	subs	r3, #1
 80126f0:	2b04      	cmp	r3, #4
 80126f2:	f200 8090 	bhi.w	8012816 <USBH_AUDIO_Control+0x146>
 80126f6:	a201      	add	r2, pc, #4	; (adr r2, 80126fc <USBH_AUDIO_Control+0x2c>)
 80126f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126fc:	08012711 	.word	0x08012711
 8012700:	08012765 	.word	0x08012765
 8012704:	08012817 	.word	0x08012817
 8012708:	080127e3 	.word	0x080127e3
 801270c:	080127fd 	.word	0x080127fd
  {
  case AUDIO_CONTROL_INIT:
    if((phost->Timer & 1U) == 0U)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8012716:	f003 0301 	and.w	r3, r3, #1
 801271a:	2b00      	cmp	r3, #0
 801271c:	d17d      	bne.n	801281a <USBH_AUDIO_Control+0x14a>
    {
      AUDIO_Handle->control.timer = phost->Timer;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
      USBH_InterruptReceiveData(phost,
                                (uint8_t *)(void *)(AUDIO_Handle->mem),
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                (uint8_t)AUDIO_Handle->control.EpSize,
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
      USBH_InterruptReceiveData(phost,
 8012736:	b2da      	uxtb	r2, r3
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f001 fdfd 	bl	801433e <USBH_InterruptReceiveData>
                                AUDIO_Handle->control.Pipe);

      AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

      AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	2202      	movs	r2, #2
 8012760:	70da      	strb	r2, [r3, #3]
    }
    break;
 8012762:	e05a      	b.n	801281a <USBH_AUDIO_Control+0x14a>

  case AUDIO_CONTROL_CHANGE:
    if(USBH_LL_GetURBState(phost , AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8012764:	693b      	ldr	r3, [r7, #16]
 8012766:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 801276a:	4619      	mov	r1, r3
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f005 fc08 	bl	8017f82 <USBH_LL_GetURBState>
 8012772:	4603      	mov	r3, r0
 8012774:	2b01      	cmp	r3, #1
 8012776:	d114      	bne.n	80127a2 <USBH_AUDIO_Control+0xd2>
    {
      attribute = LE16(&AUDIO_Handle->mem[0]);
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8012784:	3302      	adds	r3, #2
 8012786:	881b      	ldrh	r3, [r3, #0]
 8012788:	021b      	lsls	r3, r3, #8
 801278a:	b29b      	uxth	r3, r3
 801278c:	4313      	orrs	r3, r2
 801278e:	81fb      	strh	r3, [r7, #14]
      if(USBH_AUDIO_SetControlAttribute (phost, (uint8_t)attribute) == USBH_BUSY)
 8012790:	89fb      	ldrh	r3, [r7, #14]
 8012792:	b2db      	uxtb	r3, r3
 8012794:	4619      	mov	r1, r3
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 f9a5 	bl	8012ae6 <USBH_AUDIO_SetControlAttribute>
 801279c:	4603      	mov	r3, r0
 801279e:	2b01      	cmp	r3, #1
 80127a0:	d03d      	beq.n	801281e <USBH_AUDIO_Control+0x14e>
      {
        break;
      }
    }

    if(( phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80127ae:	1ad3      	subs	r3, r2, r3
 80127b0:	693a      	ldr	r2, [r7, #16]
 80127b2:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d333      	bcc.n	8012822 <USBH_AUDIO_Control+0x152>
    {
      AUDIO_Handle->control.timer = phost->Timer;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

      USBH_InterruptReceiveData(phost,
                                (uint8_t *)(void *)(AUDIO_Handle->mem),
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                (uint8_t)AUDIO_Handle->control.EpSize,
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
      USBH_InterruptReceiveData(phost,
 80127d2:	b2da      	uxtb	r2, r3
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f001 fdaf 	bl	801433e <USBH_InterruptReceiveData>
                                AUDIO_Handle->control.Pipe);

    }
    break;
 80127e0:	e01f      	b.n	8012822 <USBH_AUDIO_Control+0x152>

  case AUDIO_CONTROL_VOLUME_UP:
       if( USBH_AUDIO_SetControlAttribute (phost, 1U) == USBH_OK)
 80127e2:	2101      	movs	r1, #1
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f000 f97e 	bl	8012ae6 <USBH_AUDIO_SetControlAttribute>
 80127ea:	4603      	mov	r3, r0
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d11a      	bne.n	8012826 <USBH_AUDIO_Control+0x156>
       {
         AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80127f0:	693b      	ldr	r3, [r7, #16]
 80127f2:	2201      	movs	r2, #1
 80127f4:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 80127f6:	2300      	movs	r3, #0
 80127f8:	75fb      	strb	r3, [r7, #23]
       }
       break;
 80127fa:	e014      	b.n	8012826 <USBH_AUDIO_Control+0x156>

  case AUDIO_CONTROL_VOLUME_DOWN:
       if( USBH_AUDIO_SetControlAttribute (phost, 2U) == USBH_OK)
 80127fc:	2102      	movs	r1, #2
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f000 f971 	bl	8012ae6 <USBH_AUDIO_SetControlAttribute>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	d10f      	bne.n	801282a <USBH_AUDIO_Control+0x15a>
       {
         AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	2201      	movs	r2, #1
 801280e:	70da      	strb	r2, [r3, #3]
         status = USBH_OK;
 8012810:	2300      	movs	r3, #0
 8012812:	75fb      	strb	r3, [r7, #23]
       }
       break;
 8012814:	e009      	b.n	801282a <USBH_AUDIO_Control+0x15a>

  case AUDIO_CONTROL_IDLE:
  default:
    break;
 8012816:	bf00      	nop
 8012818:	e008      	b.n	801282c <USBH_AUDIO_Control+0x15c>
    break;
 801281a:	bf00      	nop
 801281c:	e006      	b.n	801282c <USBH_AUDIO_Control+0x15c>
        break;
 801281e:	bf00      	nop
 8012820:	e004      	b.n	801282c <USBH_AUDIO_Control+0x15c>
    break;
 8012822:	bf00      	nop
 8012824:	e002      	b.n	801282c <USBH_AUDIO_Control+0x15c>
       break;
 8012826:	bf00      	nop
 8012828:	e000      	b.n	801282c <USBH_AUDIO_Control+0x15c>
       break;
 801282a:	bf00      	nop
  }

  return status;
 801282c:	7dfb      	ldrb	r3, [r7, #23]
}
 801282e:	4618      	mov	r0, r3
 8012830:	3718      	adds	r7, #24
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop

08012838 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream (USBH_HandleTypeDef *phost)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b086      	sub	sp, #24
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8012840:	2301      	movs	r3, #1
 8012842:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801284a:	69db      	ldr	r3, [r3, #28]
 801284c:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch(AUDIO_Handle->play_state)
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	789b      	ldrb	r3, [r3, #2]
 8012852:	3b01      	subs	r3, #1
 8012854:	2b04      	cmp	r3, #4
 8012856:	d878      	bhi.n	801294a <USBH_AUDIO_OutputStream+0x112>
 8012858:	a201      	add	r2, pc, #4	; (adr r2, 8012860 <USBH_AUDIO_OutputStream+0x28>)
 801285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801285e:	bf00      	nop
 8012860:	08012875 	.word	0x08012875
 8012864:	080128ed 	.word	0x080128ed
 8012868:	080128b7 	.word	0x080128b7
 801286c:	0801293f 	.word	0x0801293f
 8012870:	0801291d 	.word	0x0801291d
  {
  case AUDIO_PLAYBACK_INIT:

    if( AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8012874:	693b      	ldr	r3, [r7, #16]
 8012876:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801287a:	693a      	ldr	r2, [r7, #16]
 801287c:	3317      	adds	r3, #23
 801287e:	00db      	lsls	r3, r3, #3
 8012880:	4413      	add	r3, r2
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	79db      	ldrb	r3, [r3, #7]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d103      	bne.n	8012892 <USBH_AUDIO_OutputStream+0x5a>
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	2203      	movs	r2, #3
 801288e:	709a      	strb	r2, [r3, #2]
 8012890:	e002      	b.n	8012898 <USBH_AUDIO_OutputStream+0x60>
    }
    else
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	2202      	movs	r2, #2
 8012896:	709a      	strb	r2, [r3, #2]
    }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2202      	movs	r2, #2
 801289c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80128ac:	2200      	movs	r2, #0
 80128ae:	4619      	mov	r1, r3
 80128b0:	f001 fff0 	bl	8014894 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80128b4:	e04e      	b.n	8012954 <USBH_AUDIO_OutputStream+0x11c>

  case AUDIO_PLAYBACK_SET_EP_FREQ:

    buff = (uint8_t*)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80128bc:	693a      	ldr	r2, [r7, #16]
 80128be:	3317      	adds	r3, #23
 80128c0:	00db      	lsls	r3, r3, #3
 80128c2:	4413      	add	r3, r2
 80128c4:	68db      	ldr	r3, [r3, #12]
 80128c6:	3308      	adds	r3, #8
 80128c8:	60fb      	str	r3, [r7, #12]

    status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80128d0:	68fa      	ldr	r2, [r7, #12]
 80128d2:	4619      	mov	r1, r3
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7ff fec5 	bl	8012664 <USBH_AUDIO_SetEndpointControls>
 80128da:	4603      	mov	r3, r0
 80128dc:	75fb      	strb	r3, [r7, #23]
    if(status == USBH_OK)
 80128de:	7dfb      	ldrb	r3, [r7, #23]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d134      	bne.n	801294e <USBH_AUDIO_OutputStream+0x116>
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	2205      	movs	r2, #5
 80128e8:	709a      	strb	r2, [r3, #2]
    }
    break;
 80128ea:	e030      	b.n	801294e <USBH_AUDIO_OutputStream+0x116>

  case AUDIO_PLAYBACK_SET_EP:
    buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80128f2:	60fb      	str	r3, [r7, #12]
    status = USBH_AUDIO_SetEndpointControls(phost,AUDIO_Handle->headphone.Ep, buff);
 80128f4:	693b      	ldr	r3, [r7, #16]
 80128f6:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80128fa:	68fa      	ldr	r2, [r7, #12]
 80128fc:	4619      	mov	r1, r3
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f7ff feb0 	bl	8012664 <USBH_AUDIO_SetEndpointControls>
 8012904:	4603      	mov	r3, r0
 8012906:	75fb      	strb	r3, [r7, #23]
    if(status == USBH_OK)
 8012908:	7dfb      	ldrb	r3, [r7, #23]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d121      	bne.n	8012952 <USBH_AUDIO_OutputStream+0x11a>
    {
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	2205      	movs	r2, #5
 8012912:	709a      	strb	r2, [r3, #2]
      USBH_AUDIO_FrequencySet(phost);
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 f98b 	bl	8012c30 <USBH_AUDIO_FrequencySet>
    }
    break;
 801291a:	e01a      	b.n	8012952 <USBH_AUDIO_OutputStream+0x11a>

  case AUDIO_PLAYBACK_IDLE:
    status = USBH_OK;
 801291c:	2300      	movs	r3, #0
 801291e:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2204      	movs	r2, #4
 8012924:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8012934:	2200      	movs	r2, #0
 8012936:	4619      	mov	r1, r3
 8012938:	f001 ffac 	bl	8014894 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 801293c:	e00a      	b.n	8012954 <USBH_AUDIO_OutputStream+0x11c>

  case AUDIO_PLAYBACK_PLAY:
    USBH_AUDIO_Transmit(phost);
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f000 f80e 	bl	8012960 <USBH_AUDIO_Transmit>
    status = USBH_OK;
 8012944:	2300      	movs	r3, #0
 8012946:	75fb      	strb	r3, [r7, #23]
    break;
 8012948:	e004      	b.n	8012954 <USBH_AUDIO_OutputStream+0x11c>

  default:
    break;
 801294a:	bf00      	nop
 801294c:	e002      	b.n	8012954 <USBH_AUDIO_OutputStream+0x11c>
    break;
 801294e:	bf00      	nop
 8012950:	e000      	b.n	8012954 <USBH_AUDIO_OutputStream+0x11c>
    break;
 8012952:	bf00      	nop
  }

  return status;
 8012954:	7dfb      	ldrb	r3, [r7, #23]
}
 8012956:	4618      	mov	r0, r3
 8012958:	3718      	adds	r7, #24
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop

08012960 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit (USBH_HandleTypeDef *phost)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8012968:	2301      	movs	r3, #1
 801296a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle =  (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012972:	69db      	ldr	r3, [r3, #28]
 8012974:	60bb      	str	r3, [r7, #8]

  switch(AUDIO_Handle->processing_state)
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	791b      	ldrb	r3, [r3, #4]
 801297a:	2b01      	cmp	r3, #1
 801297c:	d002      	beq.n	8012984 <USBH_AUDIO_Transmit+0x24>
 801297e:	2b02      	cmp	r3, #2
 8012980:	d044      	beq.n	8012a0c <USBH_AUDIO_Transmit+0xac>
 8012982:	e0a7      	b.n	8012ad4 <USBH_AUDIO_Transmit+0x174>
  {
  case AUDIO_DATA_START_OUT:
    /* Sync with start of Even Frame */
    if((phost->Timer & 1U) == 0U)
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 801298a:	f003 0301 	and.w	r3, r3, #1
 801298e:	2b00      	cmp	r3, #0
 8012990:	d12a      	bne.n	80129e8 <USBH_AUDIO_Transmit+0x88>
    {
      AUDIO_Handle->headphone.timer = phost->Timer;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	2202      	movs	r2, #2
 80129a2:	711a      	strb	r2, [r3, #4]
      USBH_IsocSendData(phost,
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                        AUDIO_Handle->headphone.buf,
                        (uint32_t)AUDIO_Handle->headphone.frame_length,
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
      USBH_IsocSendData(phost,
 80129b0:	461a      	mov	r2, r3
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f001 fcdf 	bl	801437c <USBH_IsocSendData>
                        AUDIO_Handle->headphone.Pipe);

      AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80129c4:	461a      	mov	r2, r3
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80129d2:	461a      	mov	r2, r3
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
      AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80129e6:	e079      	b.n	8012adc <USBH_AUDIO_Transmit+0x17c>
      osDelay(1);
 80129e8:	2001      	movs	r0, #1
 80129ea:	f001 fde6 	bl	80145ba <osDelay>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2204      	movs	r2, #4
 80129f2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8012a02:	2200      	movs	r2, #0
 8012a04:	4619      	mov	r1, r3
 8012a06:	f001 ff45 	bl	8014894 <osMessagePut>
    break;
 8012a0a:	e067      	b.n	8012adc <USBH_AUDIO_Transmit+0x17c>

  case AUDIO_DATA_OUT:
    if((USBH_LL_GetURBState(phost , AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE)&&
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8012a12:	4619      	mov	r1, r3
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f005 fab4 	bl	8017f82 <USBH_LL_GetURBState>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d15c      	bne.n	8012ada <USBH_AUDIO_Transmit+0x17a>
       (( phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8012a2c:	1ad3      	subs	r3, r2, r3
 8012a2e:	68ba      	ldr	r2, [r7, #8]
 8012a30:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
    if((USBH_LL_GetURBState(phost , AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE)&&
 8012a34:	4293      	cmp	r3, r2
 8012a36:	d350      	bcc.n	8012ada <USBH_AUDIO_Transmit+0x17a>
    {
      AUDIO_Handle->headphone.timer = phost->Timer;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8d3 248c 	ldr.w	r2, [r3, #1164]	; 0x48c
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

      if(AUDIO_Handle->control.supported == 1U)
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	d102      	bne.n	8012a54 <USBH_AUDIO_Transmit+0xf4>
      {
        USBH_AUDIO_Control (phost);
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f7ff fe3e 	bl	80126d0 <USBH_AUDIO_Control>
      }

      if(AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d82b      	bhi.n	8012abc <USBH_AUDIO_Transmit+0x15c>
      {
        USBH_IsocSendData(phost,
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                          AUDIO_Handle->headphone.cbuf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8012a70:	461a      	mov	r2, r3
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f001 fc7f 	bl	801437c <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012a84:	68ba      	ldr	r2, [r7, #8]
 8012a86:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8012a8a:	441a      	add	r2, r3
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8012a9e:	441a      	add	r2, r3
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012aac:	68ba      	ldr	r2, [r7, #8]
 8012aae:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8012ab2:	441a      	add	r2, r3
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
        USBH_AUDIO_BufferEmptyCallback(phost);
      }
    }
    break;
 8012aba:	e00e      	b.n	8012ada <USBH_AUDIO_Transmit+0x17a>
        AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ac2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	2205      	movs	r2, #5
 8012aca:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_BufferEmptyCallback(phost);
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 f8b9 	bl	8012c44 <USBH_AUDIO_BufferEmptyCallback>
    break;
 8012ad2:	e002      	b.n	8012ada <USBH_AUDIO_Transmit+0x17a>

  default:
    status = USBH_FAIL;
 8012ad4:	2302      	movs	r3, #2
 8012ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8012ad8:	e000      	b.n	8012adc <USBH_AUDIO_Transmit+0x17c>
    break;
 8012ada:	bf00      	nop
  }
  return status;
 8012adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3710      	adds	r7, #16
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}

08012ae6 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute (USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8012ae6:	b580      	push	{r7, lr}
 8012ae8:	b084      	sub	sp, #16
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
 8012aee:	460b      	mov	r3, r1
 8012af0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012af2:	2301      	movs	r3, #1
 8012af4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012afc:	69db      	ldr	r3, [r3, #28]
 8012afe:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8012b00:	78fb      	ldrb	r3, [r7, #3]
 8012b02:	2b01      	cmp	r3, #1
 8012b04:	d002      	beq.n	8012b0c <USBH_AUDIO_SetControlAttribute+0x26>
 8012b06:	2b02      	cmp	r3, #2
 8012b08:	d00b      	beq.n	8012b22 <USBH_AUDIO_SetControlAttribute+0x3c>
 8012b0a:	e015      	b.n	8012b38 <USBH_AUDIO_SetControlAttribute+0x52>
  {
  case 0x01:
    AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8012b18:	441a      	add	r2, r3
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    break;
 8012b20:	e00d      	b.n	8012b3e <USBH_AUDIO_SetControlAttribute+0x58>

  case 0x02:
    AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8012b2e:	1ad2      	subs	r2, r2, r3
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    break;
 8012b36:	e002      	b.n	8012b3e <USBH_AUDIO_SetControlAttribute+0x58>

  default :
    status = USBH_FAIL;
 8012b38:	2302      	movs	r3, #2
 8012b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b3c:	bf00      	nop
  }

  if(AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d905      	bls.n	8012b5a <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume =AUDIO_Handle->headphone.attribute.volumeMax;
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if(AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d205      	bcs.n	8012b76 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume =AUDIO_Handle->headphone.attribute.volumeMin;
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if(AUDIO_SetVolume (phost,
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if(AUDIO_SetVolume (phost,
 8012b88:	b29b      	uxth	r3, r3
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f000 f827 	bl	8012bde <AUDIO_SetVolume>
 8012b90:	4603      	mov	r3, r0
 8012b92:	2b01      	cmp	r3, #1
 8012b94:	d01e      	beq.n	8012bd4 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if(AUDIO_Handle->temp_channels == 1U)
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	d10e      	bne.n	8012bbe <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	73fb      	strb	r3, [r7, #15]
 8012bbc:	e007      	b.n	8012bce <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8012bc4:	3b01      	subs	r3, #1
 8012bc6:	b2da      	uxtb	r2, r3
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	2206      	movs	r2, #6
 8012bd2:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8012bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume (USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b086      	sub	sp, #24
 8012be2:	af02      	add	r7, sp, #8
 8012be4:	6078      	str	r0, [r7, #4]
 8012be6:	4608      	mov	r0, r1
 8012be8:	4611      	mov	r1, r2
 8012bea:	461a      	mov	r2, r3
 8012bec:	4603      	mov	r3, r0
 8012bee:	70fb      	strb	r3, [r7, #3]
 8012bf0:	460b      	mov	r3, r1
 8012bf2:	70bb      	strb	r3, [r7, #2]
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef*) phost->pActiveClass->pData;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8012c02:	69db      	ldr	r3, [r3, #28]
 8012c04:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	883a      	ldrh	r2, [r7, #0]
 8012c0a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8012c0e:	78fa      	ldrb	r2, [r7, #3]
 8012c10:	2302      	movs	r3, #2
 8012c12:	9301      	str	r3, [sp, #4]
 8012c14:	78bb      	ldrb	r3, [r7, #2]
 8012c16:	9300      	str	r3, [sp, #0]
 8012c18:	2302      	movs	r3, #2
 8012c1a:	2106      	movs	r1, #6
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7ff fa5d 	bl	80120dc <USBH_AC_SetCur>
 8012c22:	4603      	mov	r3, r0
 8012c24:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8012c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3710      	adds	r7, #16
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]

}
 8012c38:	bf00      	nop
 8012c3a:	370c      	adds	r7, #12
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c42:	4770      	bx	lr

08012c44 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]

}
 8012c4c:	bf00      	nop
 8012c4e:	370c      	adds	r7, #12
 8012c50:	46bd      	mov	sp, r7
 8012c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c56:	4770      	bx	lr

08012c58 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8012c58:	b5b0      	push	{r4, r5, r7, lr}
 8012c5a:	b08c      	sub	sp, #48	; 0x30
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	4613      	mov	r3, r2
 8012c64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d101      	bne.n	8012c70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8012c6c:	2302      	movs	r3, #2
 8012c6e:	e03c      	b.n	8012cea <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	79fa      	ldrb	r2, [r7, #7]
 8012c74:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
  phost->ClassNumber = 0U;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2200      	movs	r2, #0
 8012c84:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f000 f837 	bl	8012cfc <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d003      	beq.n	8012c9c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	68ba      	ldr	r2, [r7, #8]
 8012c98:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8012c9c:	4a15      	ldr	r2, [pc, #84]	; (8012cf4 <USBH_Init+0x9c>)
 8012c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ca6:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8012caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012cae:	2100      	movs	r1, #0
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f001 fddc 	bl	801486e <osMessageCreate>
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8012cbe:	4b0e      	ldr	r3, [pc, #56]	; (8012cf8 <USBH_Init+0xa0>)
 8012cc0:	f107 0414 	add.w	r4, r7, #20
 8012cc4:	461d      	mov	r5, r3
 8012cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012cca:	682b      	ldr	r3, [r5, #0]
 8012ccc:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8012cce:	f107 0314 	add.w	r3, r7, #20
 8012cd2:	68f9      	ldr	r1, [r7, #12]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f001 fc49 	bl	801456c <osThreadCreate>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8012ce2:	68f8      	ldr	r0, [r7, #12]
 8012ce4:	f005 f81c 	bl	8017d20 <USBH_LL_Init>

  return USBH_OK;
 8012ce8:	2300      	movs	r3, #0
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3730      	adds	r7, #48	; 0x30
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	0801a45c 	.word	0x0801a45c
 8012cf8:	0801a470 	.word	0x0801a470

08012cfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b085      	sub	sp, #20
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8012d04:	2300      	movs	r3, #0
 8012d06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8012d08:	e009      	b.n	8012d1e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	68fa      	ldr	r2, [r7, #12]
 8012d0e:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8012d12:	2100      	movs	r1, #0
 8012d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	60fb      	str	r3, [r7, #12]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	2b0e      	cmp	r3, #14
 8012d22:	d9f2      	bls.n	8012d0a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8012d24:	2300      	movs	r3, #0
 8012d26:	60fb      	str	r3, [r7, #12]
 8012d28:	e009      	b.n	8012d3e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	4413      	add	r3, r2
 8012d30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012d34:	2200      	movs	r2, #0
 8012d36:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	60fb      	str	r3, [r7, #12]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d44:	d3f1      	bcc.n	8012d2a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2201      	movs	r2, #1
 8012d56:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c

  phost->Control.state = CTRL_SETUP;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2201      	movs	r2, #1
 8012d64:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2240      	movs	r2, #64	; 0x40
 8012d6a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2200      	movs	r2, #0
 8012d76:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8012d82:	2300      	movs	r3, #0
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3714      	adds	r7, #20
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr

08012d90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b085      	sub	sp, #20
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d018      	beq.n	8012dd6 <USBH_RegisterClass+0x46>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d110      	bne.n	8012dd0 <USBH_RegisterClass+0x40>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8012db4:	1c59      	adds	r1, r3, #1
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	f8c2 144c 	str.w	r1, [r2, #1100]	; 0x44c
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	4413      	add	r3, r2
 8012dc6:	683a      	ldr	r2, [r7, #0]
 8012dc8:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	73fb      	strb	r3, [r7, #15]
 8012dce:	e004      	b.n	8012dda <USBH_RegisterClass+0x4a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8012dd0:	2302      	movs	r3, #2
 8012dd2:	73fb      	strb	r3, [r7, #15]
 8012dd4:	e001      	b.n	8012dda <USBH_RegisterClass+0x4a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8012dd6:	2302      	movs	r3, #2
 8012dd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3714      	adds	r7, #20
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr

08012de8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b087      	sub	sp, #28
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	4608      	mov	r0, r1
 8012df2:	4611      	mov	r1, r2
 8012df4:	461a      	mov	r2, r3
 8012df6:	4603      	mov	r3, r0
 8012df8:	70fb      	strb	r3, [r7, #3]
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	70bb      	strb	r3, [r7, #2]
 8012dfe:	4613      	mov	r3, r2
 8012e00:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8012e02:	2300      	movs	r3, #0
 8012e04:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8012e10:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012e12:	e025      	b.n	8012e60 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8012e14:	7dfb      	ldrb	r3, [r7, #23]
 8012e16:	221a      	movs	r2, #26
 8012e18:	fb02 f303 	mul.w	r3, r2, r3
 8012e1c:	3308      	adds	r3, #8
 8012e1e:	68fa      	ldr	r2, [r7, #12]
 8012e20:	4413      	add	r3, r2
 8012e22:	3302      	adds	r3, #2
 8012e24:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	795b      	ldrb	r3, [r3, #5]
 8012e2a:	78fa      	ldrb	r2, [r7, #3]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d002      	beq.n	8012e36 <USBH_FindInterface+0x4e>
 8012e30:	78fb      	ldrb	r3, [r7, #3]
 8012e32:	2bff      	cmp	r3, #255	; 0xff
 8012e34:	d111      	bne.n	8012e5a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8012e3a:	78ba      	ldrb	r2, [r7, #2]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d002      	beq.n	8012e46 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8012e40:	78bb      	ldrb	r3, [r7, #2]
 8012e42:	2bff      	cmp	r3, #255	; 0xff
 8012e44:	d109      	bne.n	8012e5a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8012e4a:	787a      	ldrb	r2, [r7, #1]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d002      	beq.n	8012e56 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012e50:	787b      	ldrb	r3, [r7, #1]
 8012e52:	2bff      	cmp	r3, #255	; 0xff
 8012e54:	d101      	bne.n	8012e5a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8012e56:	7dfb      	ldrb	r3, [r7, #23]
 8012e58:	e006      	b.n	8012e68 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8012e5a:	7dfb      	ldrb	r3, [r7, #23]
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012e60:	7dfb      	ldrb	r3, [r7, #23]
 8012e62:	2b09      	cmp	r3, #9
 8012e64:	d9d6      	bls.n	8012e14 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8012e66:	23ff      	movs	r3, #255	; 0xff
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	371c      	adds	r7, #28
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr

08012e74 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8012e74:	b480      	push	{r7}
 8012e76:	b087      	sub	sp, #28
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	70fb      	strb	r3, [r7, #3]
 8012e80:	4613      	mov	r3, r2
 8012e82:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8012e84:	2300      	movs	r3, #0
 8012e86:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8012e92:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012e94:	e017      	b.n	8012ec6 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8012e96:	7dfb      	ldrb	r3, [r7, #23]
 8012e98:	221a      	movs	r2, #26
 8012e9a:	fb02 f303 	mul.w	r3, r2, r3
 8012e9e:	3308      	adds	r3, #8
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	4413      	add	r3, r2
 8012ea4:	3302      	adds	r3, #2
 8012ea6:	613b      	str	r3, [r7, #16]
    if((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	789b      	ldrb	r3, [r3, #2]
 8012eac:	78fa      	ldrb	r2, [r7, #3]
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d106      	bne.n	8012ec0 <USBH_FindInterfaceIndex+0x4c>
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	78db      	ldrb	r3, [r3, #3]
 8012eb6:	78ba      	ldrb	r2, [r7, #2]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d101      	bne.n	8012ec0 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 8012ebc:	7dfb      	ldrb	r3, [r7, #23]
 8012ebe:	e006      	b.n	8012ece <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 8012ec0:	7dfb      	ldrb	r3, [r7, #23]
 8012ec2:	3301      	adds	r3, #1
 8012ec4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012ec6:	7dfb      	ldrb	r3, [r7, #23]
 8012ec8:	2b09      	cmp	r3, #9
 8012eca:	d9e4      	bls.n	8012e96 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 8012ecc:	23ff      	movs	r3, #255	; 0xff
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	371c      	adds	r7, #28
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr

08012eda <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8012eda:	b580      	push	{r7, lr}
 8012edc:	b082      	sub	sp, #8
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f004 ff58 	bl	8017d98 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8012ee8:	2101      	movs	r1, #1
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f005 f85c 	bl	8017fa8 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012ef0:	2300      	movs	r3, #0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
	...

08012efc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b088      	sub	sp, #32
 8012f00:	af04      	add	r7, sp, #16
 8012f02:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8012f04:	2302      	movs	r3, #2
 8012f06:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f000 fb80 	bl	8013612 <USBH_IsPortEnabled>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d10c      	bne.n	8012f32 <USBH_Process+0x36>
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d007      	beq.n	8012f32 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	2b03      	cmp	r3, #3
 8012f2a:	d002      	beq.n	8012f32 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2203      	movs	r2, #3
 8012f30:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	2b0b      	cmp	r3, #11
 8012f3a:	f200 81ad 	bhi.w	8013298 <USBH_Process+0x39c>
 8012f3e:	a201      	add	r2, pc, #4	; (adr r2, 8012f44 <USBH_Process+0x48>)
 8012f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f44:	08012f75 	.word	0x08012f75
 8012f48:	08012fb3 	.word	0x08012fb3
 8012f4c:	08012fc7 	.word	0x08012fc7
 8012f50:	08013273 	.word	0x08013273
 8012f54:	08013299 	.word	0x08013299
 8012f58:	08013071 	.word	0x08013071
 8012f5c:	0801320d 	.word	0x0801320d
 8012f60:	080130a1 	.word	0x080130a1
 8012f64:	080130dd 	.word	0x080130dd
 8012f68:	08013117 	.word	0x08013117
 8012f6c:	0801315f 	.word	0x0801315f
 8012f70:	0801325b 	.word	0x0801325b
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8012f7a:	b2db      	uxtb	r3, r3
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	f000 818d 	beq.w	801329c <USBH_Process+0x3a0>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2201      	movs	r2, #1
 8012f86:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8012f88:	20c8      	movs	r0, #200	; 0xc8
 8012f8a:	f005 f857 	bl	801803c <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f004 ff5d 	bl	8017e4e <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2201      	movs	r2, #1
 8012f98:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8012fa8:	2200      	movs	r2, #0
 8012faa:	4619      	mov	r1, r3
 8012fac:	f001 fc72 	bl	8014894 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8012fb0:	e174      	b.n	801329c <USBH_Process+0x3a0>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	f040 8171 	bne.w	80132a0 <USBH_Process+0x3a4>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2202      	movs	r2, #2
 8012fc2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8012fc4:	e16c      	b.n	80132a0 <USBH_Process+0x3a4>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8012fc6:	2064      	movs	r0, #100	; 0x64
 8012fc8:	f005 f838 	bl	801803c <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f004 ff19 	bl	8017e04 <USBH_LL_GetSpeed>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2205      	movs	r2, #5
 8012fe0:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8012fe2:	2100      	movs	r1, #0
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f001 fa13 	bl	8014410 <USBH_AllocPipe>
 8012fea:	4603      	mov	r3, r0
 8012fec:	461a      	mov	r2, r3
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8012ff2:	2180      	movs	r1, #128	; 0x80
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f001 fa0b 	bl	8014410 <USBH_AllocPipe>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	7919      	ldrb	r1, [r3, #4]
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8013016:	b292      	uxth	r2, r2
 8013018:	9202      	str	r2, [sp, #8]
 801301a:	2200      	movs	r2, #0
 801301c:	9201      	str	r2, [sp, #4]
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	4603      	mov	r3, r0
 8013022:	2280      	movs	r2, #128	; 0x80
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f001 f9c4 	bl	80143b2 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	7959      	ldrb	r1, [r3, #5]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 801303a:	687a      	ldr	r2, [r7, #4]
 801303c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 801303e:	b292      	uxth	r2, r2
 8013040:	9202      	str	r2, [sp, #8]
 8013042:	2200      	movs	r2, #0
 8013044:	9201      	str	r2, [sp, #4]
 8013046:	9300      	str	r3, [sp, #0]
 8013048:	4603      	mov	r3, r0
 801304a:	2200      	movs	r2, #0
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f001 f9b0 	bl	80143b2 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2201      	movs	r2, #1
 8013056:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013066:	2200      	movs	r2, #0
 8013068:	4619      	mov	r1, r3
 801306a:	f001 fc13 	bl	8014894 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 801306e:	e122      	b.n	80132b6 <USBH_Process+0x3ba>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f000 f925 	bl	80132c0 <USBH_HandleEnum>
 8013076:	4603      	mov	r3, r0
 8013078:	2b00      	cmp	r3, #0
 801307a:	f040 8113 	bne.w	80132a4 <USBH_Process+0x3a8>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2200      	movs	r2, #0
 8013082:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 801308c:	2b01      	cmp	r3, #1
 801308e:	d103      	bne.n	8013098 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2208      	movs	r2, #8
 8013094:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8013096:	e105      	b.n	80132a4 <USBH_Process+0x3a8>
        phost->gState  = HOST_INPUT;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2207      	movs	r2, #7
 801309c:	701a      	strb	r2, [r3, #0]
    break;
 801309e:	e101      	b.n	80132a4 <USBH_Process+0x3a8>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	f000 80fe 	beq.w	80132a8 <USBH_Process+0x3ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80130b2:	2101      	movs	r1, #1
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2208      	movs	r2, #8
 80130bc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2205      	movs	r2, #5
 80130c2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80130d2:	2200      	movs	r2, #0
 80130d4:	4619      	mov	r1, r3
 80130d6:	f001 fbdd 	bl	8014894 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80130da:	e0e5      	b.n	80132a8 <USBH_Process+0x3ac>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	4619      	mov	r1, r3
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f000 fc0b 	bl	8013902 <USBH_SetCfg>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d102      	bne.n	80130f8 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2209      	movs	r2, #9
 80130f6:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2201      	movs	r2, #1
 80130fc:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801310c:	2200      	movs	r2, #0
 801310e:	4619      	mov	r1, r3
 8013110:	f001 fbc0 	bl	8014894 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8013114:	e0cf      	b.n	80132b6 <USBH_Process+0x3ba>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 801311c:	f003 0320 	and.w	r3, r3, #32
 8013120:	2b00      	cmp	r3, #0
 8013122:	d00a      	beq.n	801313a <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8013124:	2101      	movs	r1, #1
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f000 fc35 	bl	8013996 <USBH_SetFeature>
 801312c:	4603      	mov	r3, r0
 801312e:	2b00      	cmp	r3, #0
 8013130:	d106      	bne.n	8013140 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	220a      	movs	r2, #10
 8013136:	701a      	strb	r2, [r3, #0]
 8013138:	e002      	b.n	8013140 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	220a      	movs	r2, #10
 801313e:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2201      	movs	r2, #1
 8013144:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013154:	2200      	movs	r2, #0
 8013156:	4619      	mov	r1, r3
 8013158:	f001 fb9c 	bl	8014894 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 801315c:	e0ab      	b.n	80132b6 <USBH_Process+0x3ba>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8013164:	2b00      	cmp	r3, #0
 8013166:	d042      	beq.n	80131ee <USBH_Process+0x2f2>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2200      	movs	r2, #0
 801316c:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8013170:	2300      	movs	r3, #0
 8013172:	73fb      	strb	r3, [r7, #15]
 8013174:	e019      	b.n	80131aa <USBH_Process+0x2ae>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8013176:	7bfb      	ldrb	r3, [r7, #15]
 8013178:	687a      	ldr	r2, [r7, #4]
 801317a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801317e:	009b      	lsls	r3, r3, #2
 8013180:	4413      	add	r3, r2
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	791a      	ldrb	r2, [r3, #4]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 801318c:	429a      	cmp	r2, r3
 801318e:	d109      	bne.n	80131a4 <USBH_Process+0x2a8>
        {
          phost->pActiveClass = phost->pClass[idx];
 8013190:	7bfb      	ldrb	r3, [r7, #15]
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	4413      	add	r3, r2
 801319c:	685a      	ldr	r2, [r3, #4]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80131a4:	7bfb      	ldrb	r3, [r7, #15]
 80131a6:	3301      	adds	r3, #1
 80131a8:	73fb      	strb	r3, [r7, #15]
 80131aa:	7bfb      	ldrb	r3, [r7, #15]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d0e2      	beq.n	8013176 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d016      	beq.n	80131e8 <USBH_Process+0x2ec>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80131c0:	689b      	ldr	r3, [r3, #8]
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	4798      	blx	r3
 80131c6:	4603      	mov	r3, r0
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d109      	bne.n	80131e0 <USBH_Process+0x2e4>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2206      	movs	r2, #6
 80131d0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80131d8:	2103      	movs	r1, #3
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	4798      	blx	r3
 80131de:	e006      	b.n	80131ee <USBH_Process+0x2f2>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	220d      	movs	r2, #13
 80131e4:	701a      	strb	r2, [r3, #0]
 80131e6:	e002      	b.n	80131ee <USBH_Process+0x2f2>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	220d      	movs	r2, #13
 80131ec:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2205      	movs	r2, #5
 80131f2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013202:	2200      	movs	r2, #0
 8013204:	4619      	mov	r1, r3
 8013206:	f001 fb45 	bl	8014894 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 801320a:	e054      	b.n	80132b6 <USBH_Process+0x3ba>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013212:	2b00      	cmp	r3, #0
 8013214:	d00f      	beq.n	8013236 <USBH_Process+0x33a>
    {
      status = phost->pActiveClass->Requests(phost);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801321c:	691b      	ldr	r3, [r3, #16]
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	4798      	blx	r3
 8013222:	4603      	mov	r3, r0
 8013224:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8013226:	7bbb      	ldrb	r3, [r7, #14]
 8013228:	b2db      	uxtb	r3, r3
 801322a:	2b00      	cmp	r3, #0
 801322c:	d13e      	bne.n	80132ac <USBH_Process+0x3b0>
      {
        phost->gState  = HOST_CLASS;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	220b      	movs	r2, #11
 8013232:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8013234:	e03a      	b.n	80132ac <USBH_Process+0x3b0>
      phost->gState  = HOST_ABORT_STATE;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	220d      	movs	r2, #13
 801323a:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2205      	movs	r2, #5
 8013240:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013250:	2200      	movs	r2, #0
 8013252:	4619      	mov	r1, r3
 8013254:	f001 fb1e 	bl	8014894 <osMessagePut>
    break;
 8013258:	e028      	b.n	80132ac <USBH_Process+0x3b0>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013260:	2b00      	cmp	r3, #0
 8013262:	d025      	beq.n	80132b0 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->BgndProcess(phost);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801326a:	695b      	ldr	r3, [r3, #20]
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	4798      	blx	r3
    }
    break;
 8013270:	e01e      	b.n	80132b0 <USBH_Process+0x3b4>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f7ff fd42 	bl	8012cfc <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 801327e:	2b00      	cmp	r3, #0
 8013280:	d018      	beq.n	80132b4 <USBH_Process+0x3b8>
    {
      phost->pActiveClass->DeInit(phost);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	4798      	blx	r3
      phost->pActiveClass = NULL;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2200      	movs	r2, #0
 8013292:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
    }
    break;
 8013296:	e00d      	b.n	80132b4 <USBH_Process+0x3b8>

  case HOST_ABORT_STATE:
  default :
    break;
 8013298:	bf00      	nop
 801329a:	e00c      	b.n	80132b6 <USBH_Process+0x3ba>
    break;
 801329c:	bf00      	nop
 801329e:	e00a      	b.n	80132b6 <USBH_Process+0x3ba>
    break;
 80132a0:	bf00      	nop
 80132a2:	e008      	b.n	80132b6 <USBH_Process+0x3ba>
    break;
 80132a4:	bf00      	nop
 80132a6:	e006      	b.n	80132b6 <USBH_Process+0x3ba>
    break;
 80132a8:	bf00      	nop
 80132aa:	e004      	b.n	80132b6 <USBH_Process+0x3ba>
    break;
 80132ac:	bf00      	nop
 80132ae:	e002      	b.n	80132b6 <USBH_Process+0x3ba>
    break;
 80132b0:	bf00      	nop
 80132b2:	e000      	b.n	80132b6 <USBH_Process+0x3ba>
    break;
 80132b4:	bf00      	nop
  }
 return USBH_OK;
 80132b6:	2300      	movs	r3, #0
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b088      	sub	sp, #32
 80132c4:	af04      	add	r7, sp, #16
 80132c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80132c8:	2301      	movs	r3, #1
 80132ca:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	785b      	ldrb	r3, [r3, #1]
 80132d0:	2b07      	cmp	r3, #7
 80132d2:	f200 8132 	bhi.w	801353a <USBH_HandleEnum+0x27a>
 80132d6:	a201      	add	r2, pc, #4	; (adr r2, 80132dc <USBH_HandleEnum+0x1c>)
 80132d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132dc:	080132fd 	.word	0x080132fd
 80132e0:	0801336f 	.word	0x0801336f
 80132e4:	08013387 	.word	0x08013387
 80132e8:	080133fd 	.word	0x080133fd
 80132ec:	08013415 	.word	0x08013415
 80132f0:	08013433 	.word	0x08013433
 80132f4:	0801349f 	.word	0x0801349f
 80132f8:	080134ef 	.word	0x080134ef
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80132fc:	2108      	movs	r1, #8
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 fa2f 	bl	8013762 <USBH_Get_DevDesc>
 8013304:	4603      	mov	r3, r0
 8013306:	2b00      	cmp	r3, #0
 8013308:	f040 8119 	bne.w	801353e <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2201      	movs	r2, #1
 801331a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	7919      	ldrb	r1, [r3, #4]
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8013330:	b292      	uxth	r2, r2
 8013332:	9202      	str	r2, [sp, #8]
 8013334:	2200      	movs	r2, #0
 8013336:	9201      	str	r2, [sp, #4]
 8013338:	9300      	str	r3, [sp, #0]
 801333a:	4603      	mov	r3, r0
 801333c:	2280      	movs	r2, #128	; 0x80
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f001 f837 	bl	80143b2 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	7959      	ldrb	r1, [r3, #5]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8013354:	687a      	ldr	r2, [r7, #4]
 8013356:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8013358:	b292      	uxth	r2, r2
 801335a:	9202      	str	r2, [sp, #8]
 801335c:	2200      	movs	r2, #0
 801335e:	9201      	str	r2, [sp, #4]
 8013360:	9300      	str	r3, [sp, #0]
 8013362:	4603      	mov	r3, r0
 8013364:	2200      	movs	r2, #0
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f001 f823 	bl	80143b2 <USBH_OpenPipe>

    }
    break;
 801336c:	e0e7      	b.n	801353e <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 801336e:	2112      	movs	r1, #18
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f000 f9f6 	bl	8013762 <USBH_Get_DevDesc>
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	f040 80e2 	bne.w	8013542 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2202      	movs	r2, #2
 8013382:	705a      	strb	r2, [r3, #1]

    }
    break;
 8013384:	e0dd      	b.n	8013542 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8013386:	2101      	movs	r1, #1
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f000 fa96 	bl	80138ba <USBH_SetAddress>
 801338e:	4603      	mov	r3, r0
 8013390:	2b00      	cmp	r3, #0
 8013392:	f040 80d8 	bne.w	8013546 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8013396:	2002      	movs	r0, #2
 8013398:	f004 fe50 	bl	801803c <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2201      	movs	r2, #1
 80133a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2203      	movs	r2, #3
 80133a8:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	7919      	ldrb	r1, [r3, #4]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80133ba:	687a      	ldr	r2, [r7, #4]
 80133bc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80133be:	b292      	uxth	r2, r2
 80133c0:	9202      	str	r2, [sp, #8]
 80133c2:	2200      	movs	r2, #0
 80133c4:	9201      	str	r2, [sp, #4]
 80133c6:	9300      	str	r3, [sp, #0]
 80133c8:	4603      	mov	r3, r0
 80133ca:	2280      	movs	r2, #128	; 0x80
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f000 fff0 	bl	80143b2 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	7959      	ldrb	r1, [r3, #5]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80133e2:	687a      	ldr	r2, [r7, #4]
 80133e4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80133e6:	b292      	uxth	r2, r2
 80133e8:	9202      	str	r2, [sp, #8]
 80133ea:	2200      	movs	r2, #0
 80133ec:	9201      	str	r2, [sp, #4]
 80133ee:	9300      	str	r3, [sp, #0]
 80133f0:	4603      	mov	r3, r0
 80133f2:	2200      	movs	r2, #0
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f000 ffdc 	bl	80143b2 <USBH_OpenPipe>
    }
    break;
 80133fa:	e0a4      	b.n	8013546 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80133fc:	2109      	movs	r1, #9
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f000 f9d7 	bl	80137b2 <USBH_Get_CfgDesc>
 8013404:	4603      	mov	r3, r0
 8013406:	2b00      	cmp	r3, #0
 8013408:	f040 809f 	bne.w	801354a <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2204      	movs	r2, #4
 8013410:	705a      	strb	r2, [r3, #1]
    }
    break;
 8013412:	e09a      	b.n	801354a <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 801341a:	4619      	mov	r1, r3
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f000 f9c8 	bl	80137b2 <USBH_Get_CfgDesc>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	f040 8092 	bne.w	801354e <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2205      	movs	r2, #5
 801342e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8013430:	e08d      	b.n	801354e <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8013438:	2b00      	cmp	r3, #0
 801343a:	d01e      	beq.n	801347a <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8013448:	23ff      	movs	r3, #255	; 0xff
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 f9d5 	bl	80137fa <USBH_Get_StringDesc>
 8013450:	4603      	mov	r3, r0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d17d      	bne.n	8013552 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	2206      	movs	r2, #6
 801345a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2205      	movs	r2, #5
 8013460:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013470:	2200      	movs	r2, #0
 8013472:	4619      	mov	r1, r3
 8013474:	f001 fa0e 	bl	8014894 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8013478:	e06b      	b.n	8013552 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	2206      	movs	r2, #6
 801347e:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2205      	movs	r2, #5
 8013484:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013494:	2200      	movs	r2, #0
 8013496:	4619      	mov	r1, r3
 8013498:	f001 f9fc 	bl	8014894 <osMessagePut>
    break;
 801349c:	e059      	b.n	8013552 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d010      	beq.n	80134ca <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80134b4:	23ff      	movs	r3, #255	; 0xff
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f000 f99f 	bl	80137fa <USBH_Get_StringDesc>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d149      	bne.n	8013556 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2207      	movs	r2, #7
 80134c6:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80134c8:	e045      	b.n	8013556 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2207      	movs	r2, #7
 80134ce:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2205      	movs	r2, #5
 80134d4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80134e4:	2200      	movs	r2, #0
 80134e6:	4619      	mov	r1, r3
 80134e8:	f001 f9d4 	bl	8014894 <osMessagePut>
    break;
 80134ec:	e033      	b.n	8013556 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d00f      	beq.n	8013518 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8013504:	23ff      	movs	r3, #255	; 0xff
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f000 f977 	bl	80137fa <USBH_Get_StringDesc>
 801350c:	4603      	mov	r3, r0
 801350e:	2b00      	cmp	r3, #0
 8013510:	d123      	bne.n	801355a <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8013512:	2300      	movs	r3, #0
 8013514:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8013516:	e020      	b.n	801355a <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8013518:	2300      	movs	r3, #0
 801351a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2205      	movs	r2, #5
 8013520:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013530:	2200      	movs	r2, #0
 8013532:	4619      	mov	r1, r3
 8013534:	f001 f9ae 	bl	8014894 <osMessagePut>
    break;
 8013538:	e00f      	b.n	801355a <USBH_HandleEnum+0x29a>

  default:
    break;
 801353a:	bf00      	nop
 801353c:	e00e      	b.n	801355c <USBH_HandleEnum+0x29c>
    break;
 801353e:	bf00      	nop
 8013540:	e00c      	b.n	801355c <USBH_HandleEnum+0x29c>
    break;
 8013542:	bf00      	nop
 8013544:	e00a      	b.n	801355c <USBH_HandleEnum+0x29c>
    break;
 8013546:	bf00      	nop
 8013548:	e008      	b.n	801355c <USBH_HandleEnum+0x29c>
    break;
 801354a:	bf00      	nop
 801354c:	e006      	b.n	801355c <USBH_HandleEnum+0x29c>
    break;
 801354e:	bf00      	nop
 8013550:	e004      	b.n	801355c <USBH_HandleEnum+0x29c>
    break;
 8013552:	bf00      	nop
 8013554:	e002      	b.n	801355c <USBH_HandleEnum+0x29c>
    break;
 8013556:	bf00      	nop
 8013558:	e000      	b.n	801355c <USBH_HandleEnum+0x29c>
    break;
 801355a:	bf00      	nop
  }
  return Status;
 801355c:	7bfb      	ldrb	r3, [r7, #15]
}
 801355e:	4618      	mov	r0, r3
 8013560:	3710      	adds	r7, #16
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop

08013568 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8013568:	b480      	push	{r7}
 801356a:	b083      	sub	sp, #12
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	683a      	ldr	r2, [r7, #0]
 8013576:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
}
 801357a:	bf00      	nop
 801357c:	370c      	adds	r7, #12
 801357e:	46bd      	mov	sp, r7
 8013580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013584:	4770      	bx	lr

08013586 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8013586:	b580      	push	{r7, lr}
 8013588:	b082      	sub	sp, #8
 801358a:	af00      	add	r7, sp, #0
 801358c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8013594:	1c5a      	adds	r2, r3, #1
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
  USBH_HandleSof(phost);
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 f804 	bl	80135aa <USBH_HandleSof>
}
 80135a2:	bf00      	nop
 80135a4:	3708      	adds	r7, #8
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}

080135aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b082      	sub	sp, #8
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	b2db      	uxtb	r3, r3
 80135b8:	2b0b      	cmp	r3, #11
 80135ba:	d10a      	bne.n	80135d2 <USBH_HandleSof+0x28>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d005      	beq.n	80135d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f8d3 3448 	ldr.w	r3, [r3, #1096]	; 0x448
 80135cc:	699b      	ldr	r3, [r3, #24]
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	4798      	blx	r3
  }
}
 80135d2:	bf00      	nop
 80135d4:	3708      	adds	r7, #8
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}

080135da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80135da:	b480      	push	{r7}
 80135dc:	b083      	sub	sp, #12
 80135de:	af00      	add	r7, sp, #0
 80135e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2201      	movs	r2, #1
 80135e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80135ea:	bf00      	nop
}
 80135ec:	370c      	adds	r7, #12
 80135ee:	46bd      	mov	sp, r7
 80135f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f4:	4770      	bx	lr

080135f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80135f6:	b480      	push	{r7}
 80135f8:	b083      	sub	sp, #12
 80135fa:	af00      	add	r7, sp, #0
 80135fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2200      	movs	r2, #0
 8013602:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8013606:	bf00      	nop
}
 8013608:	370c      	adds	r7, #12
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr

08013612 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8013612:	b480      	push	{r7}
 8013614:	b083      	sub	sp, #12
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8013620:	4618      	mov	r0, r3
 8013622:	370c      	adds	r7, #12
 8013624:	46bd      	mov	sp, r7
 8013626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362a:	4770      	bx	lr

0801362c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	b2db      	uxtb	r3, r3
 801363a:	2b00      	cmp	r3, #0
 801363c:	d10f      	bne.n	801365e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2201      	movs	r2, #1
 8013642:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801364c:	2b00      	cmp	r3, #0
 801364e:	d00e      	beq.n	801366e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8013656:	2104      	movs	r1, #4
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	4798      	blx	r3
 801365c:	e007      	b.n	801366e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013664:	2b01      	cmp	r3, #1
 8013666:	d102      	bne.n	801366e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2202      	movs	r2, #2
 801366c:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2201      	movs	r2, #1
 8013672:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013682:	2200      	movs	r2, #0
 8013684:	4619      	mov	r1, r3
 8013686:	f001 f905 	bl	8014894 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801368a:	2300      	movs	r3, #0
}
 801368c:	4618      	mov	r0, r3
 801368e:	3708      	adds	r7, #8
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f004 fb96 	bl	8017dce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	791b      	ldrb	r3, [r3, #4]
 80136a6:	4619      	mov	r1, r3
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f000 fed0 	bl	801444e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	795b      	ldrb	r3, [r3, #5]
 80136b2:	4619      	mov	r1, r3
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f000 feca 	bl	801444e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	2200      	movs	r2, #0
 80136be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d005      	beq.n	80136d8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80136d2:	2105      	movs	r1, #5
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f004 fb5d 	bl	8017d98 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	2203      	movs	r2, #3
 80136e2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2201      	movs	r2, #1
 80136e8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80136f8:	2200      	movs	r2, #0
 80136fa:	4619      	mov	r1, r3
 80136fc:	f001 f8ca 	bl	8014894 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8013700:	2300      	movs	r3, #0
}
 8013702:	4618      	mov	r0, r3
 8013704:	3708      	adds	r7, #8
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}

0801370a <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 801370a:	b580      	push	{r7, lr}
 801370c:	b086      	sub	sp, #24
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 8013718:	f107 030c 	add.w	r3, r7, #12
 801371c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013720:	4618      	mov	r0, r3
 8013722:	f001 f8f7 	bl	8014914 <osMessageGet>
    if(event.status == osEventMessage)
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	2b10      	cmp	r3, #16
 801372a:	d1f2      	bne.n	8013712 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f7ff fbe5 	bl	8012efc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013732:	e7ee      	b.n	8013712 <USBH_Process_OS+0x8>

08013734 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2201      	movs	r2, #1
 8013740:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013750:	2200      	movs	r2, #0
 8013752:	4619      	mov	r1, r3
 8013754:	f001 f89e 	bl	8014894 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8013758:	2300      	movs	r3, #0
}
 801375a:	4618      	mov	r0, r3
 801375c:	3708      	adds	r7, #8
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8013762:	b580      	push	{r7, lr}
 8013764:	b086      	sub	sp, #24
 8013766:	af02      	add	r7, sp, #8
 8013768:	6078      	str	r0, [r7, #4]
 801376a:	460b      	mov	r3, r1
 801376c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8013774:	78fb      	ldrb	r3, [r7, #3]
 8013776:	b29b      	uxth	r3, r3
 8013778:	9300      	str	r3, [sp, #0]
 801377a:	4613      	mov	r3, r2
 801377c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013780:	2100      	movs	r1, #0
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f000 f864 	bl	8013850 <USBH_GetDescriptor>
 8013788:	4603      	mov	r3, r0
 801378a:	73fb      	strb	r3, [r7, #15]
 801378c:	7bfb      	ldrb	r3, [r7, #15]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d10a      	bne.n	80137a8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f203 3022 	addw	r0, r3, #802	; 0x322
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801379e:	78fa      	ldrb	r2, [r7, #3]
 80137a0:	b292      	uxth	r2, r2
 80137a2:	4619      	mov	r1, r3
 80137a4:	f000 f91b 	bl	80139de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80137a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3710      	adds	r7, #16
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}

080137b2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80137b2:	b580      	push	{r7, lr}
 80137b4:	b086      	sub	sp, #24
 80137b6:	af02      	add	r7, sp, #8
 80137b8:	6078      	str	r0, [r7, #4]
 80137ba:	460b      	mov	r3, r1
 80137bc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	331c      	adds	r3, #28
 80137c2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80137c4:	887b      	ldrh	r3, [r7, #2]
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137ce:	2100      	movs	r1, #0
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f000 f83d 	bl	8013850 <USBH_GetDescriptor>
 80137d6:	4603      	mov	r3, r0
 80137d8:	72fb      	strb	r3, [r7, #11]
 80137da:	7afb      	ldrb	r3, [r7, #11]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d107      	bne.n	80137f0 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80137e6:	887a      	ldrh	r2, [r7, #2]
 80137e8:	68f9      	ldr	r1, [r7, #12]
 80137ea:	4618      	mov	r0, r3
 80137ec:	f000 f967 	bl	8013abe <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80137f0:	7afb      	ldrb	r3, [r7, #11]
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	3710      	adds	r7, #16
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}

080137fa <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80137fa:	b580      	push	{r7, lr}
 80137fc:	b088      	sub	sp, #32
 80137fe:	af02      	add	r7, sp, #8
 8013800:	60f8      	str	r0, [r7, #12]
 8013802:	607a      	str	r2, [r7, #4]
 8013804:	461a      	mov	r2, r3
 8013806:	460b      	mov	r3, r1
 8013808:	72fb      	strb	r3, [r7, #11]
 801380a:	4613      	mov	r3, r2
 801380c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 801380e:	7afb      	ldrb	r3, [r7, #11]
 8013810:	b29b      	uxth	r3, r3
 8013812:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013816:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 801381e:	893b      	ldrh	r3, [r7, #8]
 8013820:	9300      	str	r3, [sp, #0]
 8013822:	460b      	mov	r3, r1
 8013824:	2100      	movs	r1, #0
 8013826:	68f8      	ldr	r0, [r7, #12]
 8013828:	f000 f812 	bl	8013850 <USBH_GetDescriptor>
 801382c:	4603      	mov	r3, r0
 801382e:	75fb      	strb	r3, [r7, #23]
 8013830:	7dfb      	ldrb	r3, [r7, #23]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d107      	bne.n	8013846 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801383c:	893a      	ldrh	r2, [r7, #8]
 801383e:	6879      	ldr	r1, [r7, #4]
 8013840:	4618      	mov	r0, r3
 8013842:	f000 fa3a 	bl	8013cba <USBH_ParseStringDesc>
  }
  return status;
 8013846:	7dfb      	ldrb	r3, [r7, #23]
}
 8013848:	4618      	mov	r0, r3
 801384a:	3718      	adds	r7, #24
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}

08013850 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b084      	sub	sp, #16
 8013854:	af00      	add	r7, sp, #0
 8013856:	60f8      	str	r0, [r7, #12]
 8013858:	607b      	str	r3, [r7, #4]
 801385a:	460b      	mov	r3, r1
 801385c:	72fb      	strb	r3, [r7, #11]
 801385e:	4613      	mov	r3, r2
 8013860:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	789b      	ldrb	r3, [r3, #2]
 8013866:	2b01      	cmp	r3, #1
 8013868:	d11c      	bne.n	80138a4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801386a:	7afb      	ldrb	r3, [r7, #11]
 801386c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013870:	b2da      	uxtb	r2, r3
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2206      	movs	r2, #6
 801387a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	893a      	ldrh	r2, [r7, #8]
 8013880:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013882:	893b      	ldrh	r3, [r7, #8]
 8013884:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801388c:	d104      	bne.n	8013898 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f240 4209 	movw	r2, #1033	; 0x409
 8013894:	829a      	strh	r2, [r3, #20]
 8013896:	e002      	b.n	801389e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2200      	movs	r2, #0
 801389c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	8b3a      	ldrh	r2, [r7, #24]
 80138a2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80138a4:	8b3b      	ldrh	r3, [r7, #24]
 80138a6:	461a      	mov	r2, r3
 80138a8:	6879      	ldr	r1, [r7, #4]
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	f000 fa53 	bl	8013d56 <USBH_CtlReq>
 80138b0:	4603      	mov	r3, r0
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3710      	adds	r7, #16
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80138ba:	b580      	push	{r7, lr}
 80138bc:	b082      	sub	sp, #8
 80138be:	af00      	add	r7, sp, #0
 80138c0:	6078      	str	r0, [r7, #4]
 80138c2:	460b      	mov	r3, r1
 80138c4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	789b      	ldrb	r3, [r3, #2]
 80138ca:	2b01      	cmp	r3, #1
 80138cc:	d10f      	bne.n	80138ee <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2200      	movs	r2, #0
 80138d2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2205      	movs	r2, #5
 80138d8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80138da:	78fb      	ldrb	r3, [r7, #3]
 80138dc:	b29a      	uxth	r2, r3
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2200      	movs	r2, #0
 80138e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2200      	movs	r2, #0
 80138ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80138ee:	2200      	movs	r2, #0
 80138f0:	2100      	movs	r1, #0
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f000 fa2f 	bl	8013d56 <USBH_CtlReq>
 80138f8:	4603      	mov	r3, r0
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3708      	adds	r7, #8
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}

08013902 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8013902:	b580      	push	{r7, lr}
 8013904:	b082      	sub	sp, #8
 8013906:	af00      	add	r7, sp, #0
 8013908:	6078      	str	r0, [r7, #4]
 801390a:	460b      	mov	r3, r1
 801390c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	789b      	ldrb	r3, [r3, #2]
 8013912:	2b01      	cmp	r3, #1
 8013914:	d10e      	bne.n	8013934 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2200      	movs	r2, #0
 801391a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2209      	movs	r2, #9
 8013920:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	887a      	ldrh	r2, [r7, #2]
 8013926:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2200      	movs	r2, #0
 801392c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2200      	movs	r2, #0
 8013932:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8013934:	2200      	movs	r2, #0
 8013936:	2100      	movs	r1, #0
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f000 fa0c 	bl	8013d56 <USBH_CtlReq>
 801393e:	4603      	mov	r3, r0
}
 8013940:	4618      	mov	r0, r3
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	460b      	mov	r3, r1
 8013952:	70fb      	strb	r3, [r7, #3]
 8013954:	4613      	mov	r3, r2
 8013956:	70bb      	strb	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	789b      	ldrb	r3, [r3, #2]
 801395c:	2b01      	cmp	r3, #1
 801395e:	d110      	bne.n	8013982 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2201      	movs	r2, #1
 8013964:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	220b      	movs	r2, #11
 801396a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 801396c:	78bb      	ldrb	r3, [r7, #2]
 801396e:	b29a      	uxth	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013974:	78fb      	ldrb	r3, [r7, #3]
 8013976:	b29a      	uxth	r2, r3
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2200      	movs	r2, #0
 8013980:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8013982:	2200      	movs	r2, #0
 8013984:	2100      	movs	r1, #0
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f000 f9e5 	bl	8013d56 <USBH_CtlReq>
 801398c:	4603      	mov	r3, r0
}
 801398e:	4618      	mov	r0, r3
 8013990:	3708      	adds	r7, #8
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}

08013996 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8013996:	b580      	push	{r7, lr}
 8013998:	b082      	sub	sp, #8
 801399a:	af00      	add	r7, sp, #0
 801399c:	6078      	str	r0, [r7, #4]
 801399e:	460b      	mov	r3, r1
 80139a0:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	789b      	ldrb	r3, [r3, #2]
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d10f      	bne.n	80139ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	2200      	movs	r2, #0
 80139ae:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2203      	movs	r2, #3
 80139b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80139b6:	78fb      	ldrb	r3, [r7, #3]
 80139b8:	b29a      	uxth	r2, r3
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2200      	movs	r2, #0
 80139c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2200      	movs	r2, #0
 80139c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80139ca:	2200      	movs	r2, #0
 80139cc:	2100      	movs	r1, #0
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f000 f9c1 	bl	8013d56 <USBH_CtlReq>
 80139d4:	4603      	mov	r3, r0
}
 80139d6:	4618      	mov	r0, r3
 80139d8:	3708      	adds	r7, #8
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}

080139de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80139de:	b480      	push	{r7}
 80139e0:	b085      	sub	sp, #20
 80139e2:	af00      	add	r7, sp, #0
 80139e4:	60f8      	str	r0, [r7, #12]
 80139e6:	60b9      	str	r1, [r7, #8]
 80139e8:	4613      	mov	r3, r2
 80139ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	781a      	ldrb	r2, [r3, #0]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	785a      	ldrb	r2, [r3, #1]
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	3302      	adds	r3, #2
 8013a00:	781b      	ldrb	r3, [r3, #0]
 8013a02:	b29a      	uxth	r2, r3
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	3303      	adds	r3, #3
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	b29b      	uxth	r3, r3
 8013a0c:	021b      	lsls	r3, r3, #8
 8013a0e:	b29b      	uxth	r3, r3
 8013a10:	4313      	orrs	r3, r2
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	791a      	ldrb	r2, [r3, #4]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	795a      	ldrb	r2, [r3, #5]
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	799a      	ldrb	r2, [r3, #6]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	79da      	ldrb	r2, [r3, #7]
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8013a38:	88fb      	ldrh	r3, [r7, #6]
 8013a3a:	2b08      	cmp	r3, #8
 8013a3c:	d939      	bls.n	8013ab2 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	3308      	adds	r3, #8
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	3309      	adds	r3, #9
 8013a4a:	781b      	ldrb	r3, [r3, #0]
 8013a4c:	b29b      	uxth	r3, r3
 8013a4e:	021b      	lsls	r3, r3, #8
 8013a50:	b29b      	uxth	r3, r3
 8013a52:	4313      	orrs	r3, r2
 8013a54:	b29a      	uxth	r2, r3
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	330a      	adds	r3, #10
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	330b      	adds	r3, #11
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	b29b      	uxth	r3, r3
 8013a6a:	021b      	lsls	r3, r3, #8
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	b29a      	uxth	r2, r3
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	330c      	adds	r3, #12
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	b29a      	uxth	r2, r3
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	330d      	adds	r3, #13
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	b29b      	uxth	r3, r3
 8013a86:	021b      	lsls	r3, r3, #8
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	4313      	orrs	r3, r2
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	7b9a      	ldrb	r2, [r3, #14]
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	7bda      	ldrb	r2, [r3, #15]
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	7c1a      	ldrb	r2, [r3, #16]
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	7c5a      	ldrb	r2, [r3, #17]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	745a      	strb	r2, [r3, #17]
  }
}
 8013ab2:	bf00      	nop
 8013ab4:	3714      	adds	r7, #20
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abc:	4770      	bx	lr

08013abe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	b08a      	sub	sp, #40	; 0x28
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	60f8      	str	r0, [r7, #12]
 8013ac6:	60b9      	str	r1, [r7, #8]
 8013ac8:	4613      	mov	r3, r2
 8013aca:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	781a      	ldrb	r2, [r3, #0]
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	785a      	ldrb	r2, [r3, #1]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	3302      	adds	r3, #2
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	b29a      	uxth	r2, r3
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	3303      	adds	r3, #3
 8013afc:	781b      	ldrb	r3, [r3, #0]
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	021b      	lsls	r3, r3, #8
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	4313      	orrs	r3, r2
 8013b06:	b29a      	uxth	r2, r3
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	791a      	ldrb	r2, [r3, #4]
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	795a      	ldrb	r2, [r3, #5]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	799a      	ldrb	r2, [r3, #6]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	79da      	ldrb	r2, [r3, #7]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	7a1a      	ldrb	r2, [r3, #8]
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8013b34:	88fb      	ldrh	r3, [r7, #6]
 8013b36:	2b09      	cmp	r3, #9
 8013b38:	d95f      	bls.n	8013bfa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8013b3a:	2309      	movs	r3, #9
 8013b3c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013b42:	e051      	b.n	8013be8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013b44:	f107 0316 	add.w	r3, r7, #22
 8013b48:	4619      	mov	r1, r3
 8013b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b4c:	f000 f8e8 	bl	8013d20 <USBH_GetNextDesc>
 8013b50:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8013b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b54:	785b      	ldrb	r3, [r3, #1]
 8013b56:	2b04      	cmp	r3, #4
 8013b58:	d146      	bne.n	8013be8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8013b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013b5e:	221a      	movs	r2, #26
 8013b60:	fb02 f303 	mul.w	r3, r2, r3
 8013b64:	3308      	adds	r3, #8
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	4413      	add	r3, r2
 8013b6a:	3302      	adds	r3, #2
 8013b6c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8013b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b70:	69f8      	ldr	r0, [r7, #28]
 8013b72:	f000 f846 	bl	8013c02 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013b76:	2300      	movs	r3, #0
 8013b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013b80:	e022      	b.n	8013bc8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8013b82:	f107 0316 	add.w	r3, r7, #22
 8013b86:	4619      	mov	r1, r3
 8013b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b8a:	f000 f8c9 	bl	8013d20 <USBH_GetNextDesc>
 8013b8e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8013b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b92:	785b      	ldrb	r3, [r3, #1]
 8013b94:	2b05      	cmp	r3, #5
 8013b96:	d117      	bne.n	8013bc8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8013b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013b9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013ba0:	3201      	adds	r2, #1
 8013ba2:	00d2      	lsls	r2, r2, #3
 8013ba4:	211a      	movs	r1, #26
 8013ba6:	fb01 f303 	mul.w	r3, r1, r3
 8013baa:	4413      	add	r3, r2
 8013bac:	3308      	adds	r3, #8
 8013bae:	68fa      	ldr	r2, [r7, #12]
 8013bb0:	4413      	add	r3, r2
 8013bb2:	3304      	adds	r3, #4
 8013bb4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8013bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013bb8:	69b8      	ldr	r0, [r7, #24]
 8013bba:	f000 f851 	bl	8013c60 <USBH_ParseEPDesc>
            ep_ix++;
 8013bbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	791b      	ldrb	r3, [r3, #4]
 8013bcc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	d204      	bcs.n	8013bde <USBH_ParseCfgDesc+0x120>
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	885a      	ldrh	r2, [r3, #2]
 8013bd8:	8afb      	ldrh	r3, [r7, #22]
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d8d1      	bhi.n	8013b82 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8013bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013be2:	3301      	adds	r3, #1
 8013be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013bec:	2b09      	cmp	r3, #9
 8013bee:	d804      	bhi.n	8013bfa <USBH_ParseCfgDesc+0x13c>
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	885a      	ldrh	r2, [r3, #2]
 8013bf4:	8afb      	ldrh	r3, [r7, #22]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d8a4      	bhi.n	8013b44 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8013bfa:	bf00      	nop
 8013bfc:	3728      	adds	r7, #40	; 0x28
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}

08013c02 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8013c02:	b480      	push	{r7}
 8013c04:	b083      	sub	sp, #12
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	6078      	str	r0, [r7, #4]
 8013c0a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	781a      	ldrb	r2, [r3, #0]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	785a      	ldrb	r2, [r3, #1]
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	789a      	ldrb	r2, [r3, #2]
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	78da      	ldrb	r2, [r3, #3]
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	791a      	ldrb	r2, [r3, #4]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	795a      	ldrb	r2, [r3, #5]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	799a      	ldrb	r2, [r3, #6]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	79da      	ldrb	r2, [r3, #7]
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	7a1a      	ldrb	r2, [r3, #8]
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	721a      	strb	r2, [r3, #8]
}
 8013c54:	bf00      	nop
 8013c56:	370c      	adds	r7, #12
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr

08013c60 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b083      	sub	sp, #12
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	781a      	ldrb	r2, [r3, #0]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	785a      	ldrb	r2, [r3, #1]
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	789a      	ldrb	r2, [r3, #2]
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	78da      	ldrb	r2, [r3, #3]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	3304      	adds	r3, #4
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	b29a      	uxth	r2, r3
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	3305      	adds	r3, #5
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	021b      	lsls	r3, r3, #8
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	4313      	orrs	r3, r2
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	799a      	ldrb	r2, [r3, #6]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	719a      	strb	r2, [r3, #6]
}
 8013cae:	bf00      	nop
 8013cb0:	370c      	adds	r7, #12
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr

08013cba <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8013cba:	b480      	push	{r7}
 8013cbc:	b087      	sub	sp, #28
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	60f8      	str	r0, [r7, #12]
 8013cc2:	60b9      	str	r1, [r7, #8]
 8013cc4:	4613      	mov	r3, r2
 8013cc6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	3301      	adds	r3, #1
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	2b03      	cmp	r3, #3
 8013cd0:	d120      	bne.n	8013d14 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	1e9a      	subs	r2, r3, #2
 8013cd8:	88fb      	ldrh	r3, [r7, #6]
 8013cda:	4293      	cmp	r3, r2
 8013cdc:	bf28      	it	cs
 8013cde:	4613      	movcs	r3, r2
 8013ce0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	3302      	adds	r3, #2
 8013ce6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8013ce8:	2300      	movs	r3, #0
 8013cea:	82fb      	strh	r3, [r7, #22]
 8013cec:	e00b      	b.n	8013d06 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8013cee:	8afb      	ldrh	r3, [r7, #22]
 8013cf0:	68fa      	ldr	r2, [r7, #12]
 8013cf2:	4413      	add	r3, r2
 8013cf4:	781a      	ldrb	r2, [r3, #0]
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	3301      	adds	r3, #1
 8013cfe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013d00:	8afb      	ldrh	r3, [r7, #22]
 8013d02:	3302      	adds	r3, #2
 8013d04:	82fb      	strh	r3, [r7, #22]
 8013d06:	8afa      	ldrh	r2, [r7, #22]
 8013d08:	8abb      	ldrh	r3, [r7, #20]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d3ef      	bcc.n	8013cee <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	2200      	movs	r2, #0
 8013d12:	701a      	strb	r2, [r3, #0]
  }
}
 8013d14:	bf00      	nop
 8013d16:	371c      	adds	r7, #28
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr

08013d20 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b085      	sub	sp, #20
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	881a      	ldrh	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	781b      	ldrb	r3, [r3, #0]
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	4413      	add	r3, r2
 8013d36:	b29a      	uxth	r2, r3
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	781b      	ldrb	r3, [r3, #0]
 8013d40:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	4413      	add	r3, r2
 8013d46:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8013d48:	68fb      	ldr	r3, [r7, #12]
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3714      	adds	r7, #20
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr

08013d56 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8013d56:	b580      	push	{r7, lr}
 8013d58:	b086      	sub	sp, #24
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	60f8      	str	r0, [r7, #12]
 8013d5e:	60b9      	str	r1, [r7, #8]
 8013d60:	4613      	mov	r3, r2
 8013d62:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013d64:	2301      	movs	r3, #1
 8013d66:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	789b      	ldrb	r3, [r3, #2]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d002      	beq.n	8013d76 <USBH_CtlReq+0x20>
 8013d70:	2b02      	cmp	r3, #2
 8013d72:	d01d      	beq.n	8013db0 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8013d74:	e042      	b.n	8013dfc <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	88fa      	ldrh	r2, [r7, #6]
 8013d80:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2201      	movs	r2, #1
 8013d86:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2202      	movs	r2, #2
 8013d8c:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8013d8e:	2301      	movs	r3, #1
 8013d90:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2203      	movs	r2, #3
 8013d96:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013da6:	2200      	movs	r2, #0
 8013da8:	4619      	mov	r1, r3
 8013daa:	f000 fd73 	bl	8014894 <osMessagePut>
    break;
 8013dae:	e025      	b.n	8013dfc <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	f000 f829 	bl	8013e08 <USBH_HandleControl>
 8013db6:	4603      	mov	r3, r0
 8013db8:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8013dba:	7dfb      	ldrb	r3, [r7, #23]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d108      	bne.n	8013dd2 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	75fb      	strb	r3, [r7, #23]
    break;
 8013dd0:	e013      	b.n	8013dfa <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 8013dd2:	7dfb      	ldrb	r3, [r7, #23]
 8013dd4:	2b03      	cmp	r3, #3
 8013dd6:	d108      	bne.n	8013dea <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	2201      	movs	r2, #1
 8013ddc:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	2200      	movs	r2, #0
 8013de2:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8013de4:	2303      	movs	r3, #3
 8013de6:	75fb      	strb	r3, [r7, #23]
    break;
 8013de8:	e007      	b.n	8013dfa <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 8013dea:	7dfb      	ldrb	r3, [r7, #23]
 8013dec:	2b02      	cmp	r3, #2
 8013dee:	d104      	bne.n	8013dfa <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2201      	movs	r2, #1
 8013df4:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8013df6:	2302      	movs	r3, #2
 8013df8:	75fb      	strb	r3, [r7, #23]
    break;
 8013dfa:	bf00      	nop
  }
  return status;
 8013dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3718      	adds	r7, #24
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
	...

08013e08 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b086      	sub	sp, #24
 8013e0c:	af02      	add	r7, sp, #8
 8013e0e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013e10:	2301      	movs	r3, #1
 8013e12:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013e14:	2300      	movs	r3, #0
 8013e16:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	7e1b      	ldrb	r3, [r3, #24]
 8013e1c:	3b01      	subs	r3, #1
 8013e1e:	2b0a      	cmp	r3, #10
 8013e20:	f200 821f 	bhi.w	8014262 <USBH_HandleControl+0x45a>
 8013e24:	a201      	add	r2, pc, #4	; (adr r2, 8013e2c <USBH_HandleControl+0x24>)
 8013e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e2a:	bf00      	nop
 8013e2c:	08013e59 	.word	0x08013e59
 8013e30:	08013e73 	.word	0x08013e73
 8013e34:	08013f15 	.word	0x08013f15
 8013e38:	08013f3b 	.word	0x08013f3b
 8013e3c:	08013fc7 	.word	0x08013fc7
 8013e40:	08013ff3 	.word	0x08013ff3
 8013e44:	080140b5 	.word	0x080140b5
 8013e48:	080140d7 	.word	0x080140d7
 8013e4c:	08014169 	.word	0x08014169
 8013e50:	08014191 	.word	0x08014191
 8013e54:	08014223 	.word	0x08014223
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f103 0110 	add.w	r1, r3, #16
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	795b      	ldrb	r3, [r3, #5]
 8013e62:	461a      	mov	r2, r3
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f000 fa0d 	bl	8014284 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2202      	movs	r2, #2
 8013e6e:	761a      	strb	r2, [r3, #24]
    break;
 8013e70:	e202      	b.n	8014278 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	795b      	ldrb	r3, [r3, #5]
 8013e76:	4619      	mov	r1, r3
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f004 f882 	bl	8017f82 <USBH_LL_GetURBState>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8013e82:	7bbb      	ldrb	r3, [r7, #14]
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	d12c      	bne.n	8013ee2 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	7c1b      	ldrb	r3, [r3, #16]
 8013e8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013e90:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	8adb      	ldrh	r3, [r3, #22]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d00a      	beq.n	8013eb0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8013e9a:	7b7b      	ldrb	r3, [r7, #13]
 8013e9c:	2b80      	cmp	r3, #128	; 0x80
 8013e9e:	d103      	bne.n	8013ea8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2203      	movs	r2, #3
 8013ea4:	761a      	strb	r2, [r3, #24]
 8013ea6:	e00d      	b.n	8013ec4 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2205      	movs	r2, #5
 8013eac:	761a      	strb	r2, [r3, #24]
 8013eae:	e009      	b.n	8013ec4 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8013eb0:	7b7b      	ldrb	r3, [r7, #13]
 8013eb2:	2b80      	cmp	r3, #128	; 0x80
 8013eb4:	d103      	bne.n	8013ebe <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2209      	movs	r2, #9
 8013eba:	761a      	strb	r2, [r3, #24]
 8013ebc:	e002      	b.n	8013ec4 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2207      	movs	r2, #7
 8013ec2:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2203      	movs	r2, #3
 8013ec8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013ed8:	2200      	movs	r2, #0
 8013eda:	4619      	mov	r1, r3
 8013edc:	f000 fcda 	bl	8014894 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8013ee0:	e1c1      	b.n	8014266 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013ee2:	7bbb      	ldrb	r3, [r7, #14]
 8013ee4:	2b04      	cmp	r3, #4
 8013ee6:	d003      	beq.n	8013ef0 <USBH_HandleControl+0xe8>
 8013ee8:	7bbb      	ldrb	r3, [r7, #14]
 8013eea:	2b02      	cmp	r3, #2
 8013eec:	f040 81bb 	bne.w	8014266 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	220b      	movs	r2, #11
 8013ef4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2203      	movs	r2, #3
 8013efa:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	4619      	mov	r1, r3
 8013f0e:	f000 fcc1 	bl	8014894 <osMessagePut>
    break;
 8013f12:	e1a8      	b.n	8014266 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8013f1a:	b29a      	uxth	r2, r3
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6899      	ldr	r1, [r3, #8]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	899a      	ldrh	r2, [r3, #12]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	791b      	ldrb	r3, [r3, #4]
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f000 f9e8 	bl	8014302 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2204      	movs	r2, #4
 8013f36:	761a      	strb	r2, [r3, #24]
    break;
 8013f38:	e19e      	b.n	8014278 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	791b      	ldrb	r3, [r3, #4]
 8013f3e:	4619      	mov	r1, r3
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f004 f81e 	bl	8017f82 <USBH_LL_GetURBState>
 8013f46:	4603      	mov	r3, r0
 8013f48:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8013f4a:	7bbb      	ldrb	r3, [r7, #14]
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	d110      	bne.n	8013f72 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2209      	movs	r2, #9
 8013f54:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2203      	movs	r2, #3
 8013f5a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	f000 fc91 	bl	8014894 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8013f72:	7bbb      	ldrb	r3, [r7, #14]
 8013f74:	2b05      	cmp	r3, #5
 8013f76:	d110      	bne.n	8013f9a <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8013f78:	2303      	movs	r3, #3
 8013f7a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2203      	movs	r2, #3
 8013f80:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013f90:	2200      	movs	r2, #0
 8013f92:	4619      	mov	r1, r3
 8013f94:	f000 fc7e 	bl	8014894 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8013f98:	e167      	b.n	801426a <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8013f9a:	7bbb      	ldrb	r3, [r7, #14]
 8013f9c:	2b04      	cmp	r3, #4
 8013f9e:	f040 8164 	bne.w	801426a <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	220b      	movs	r2, #11
 8013fa6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2203      	movs	r2, #3
 8013fac:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	f000 fc68 	bl	8014894 <osMessagePut>
    break;
 8013fc4:	e151      	b.n	801426a <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	6899      	ldr	r1, [r3, #8]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	899a      	ldrh	r2, [r3, #12]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	7958      	ldrb	r0, [r3, #5]
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	9300      	str	r3, [sp, #0]
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f000 f96d 	bl	80142b8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8013fe4:	b29a      	uxth	r2, r3
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	2206      	movs	r2, #6
 8013fee:	761a      	strb	r2, [r3, #24]
    break;
 8013ff0:	e142      	b.n	8014278 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	795b      	ldrb	r3, [r3, #5]
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f003 ffc2 	bl	8017f82 <USBH_LL_GetURBState>
 8013ffe:	4603      	mov	r3, r0
 8014000:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8014002:	7bbb      	ldrb	r3, [r7, #14]
 8014004:	2b01      	cmp	r3, #1
 8014006:	d111      	bne.n	801402c <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2207      	movs	r2, #7
 801400c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2203      	movs	r2, #3
 8014012:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014022:	2200      	movs	r2, #0
 8014024:	4619      	mov	r1, r3
 8014026:	f000 fc35 	bl	8014894 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 801402a:	e120      	b.n	801426e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 801402c:	7bbb      	ldrb	r3, [r7, #14]
 801402e:	2b05      	cmp	r3, #5
 8014030:	d113      	bne.n	801405a <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	220c      	movs	r2, #12
 8014036:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8014038:	2303      	movs	r3, #3
 801403a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	2203      	movs	r2, #3
 8014040:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014050:	2200      	movs	r2, #0
 8014052:	4619      	mov	r1, r3
 8014054:	f000 fc1e 	bl	8014894 <osMessagePut>
    break;
 8014058:	e109      	b.n	801426e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 801405a:	7bbb      	ldrb	r3, [r7, #14]
 801405c:	2b02      	cmp	r3, #2
 801405e:	d111      	bne.n	8014084 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2205      	movs	r2, #5
 8014064:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2203      	movs	r2, #3
 801406a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801407a:	2200      	movs	r2, #0
 801407c:	4619      	mov	r1, r3
 801407e:	f000 fc09 	bl	8014894 <osMessagePut>
    break;
 8014082:	e0f4      	b.n	801426e <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8014084:	7bbb      	ldrb	r3, [r7, #14]
 8014086:	2b04      	cmp	r3, #4
 8014088:	f040 80f1 	bne.w	801426e <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	220b      	movs	r2, #11
 8014090:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8014092:	2302      	movs	r3, #2
 8014094:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2203      	movs	r2, #3
 801409a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80140aa:	2200      	movs	r2, #0
 80140ac:	4619      	mov	r1, r3
 80140ae:	f000 fbf1 	bl	8014894 <osMessagePut>
    break;
 80140b2:	e0dc      	b.n	801426e <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	791b      	ldrb	r3, [r3, #4]
 80140b8:	2200      	movs	r2, #0
 80140ba:	2100      	movs	r1, #0
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f000 f920 	bl	8014302 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2208      	movs	r2, #8
 80140d2:	761a      	strb	r2, [r3, #24]

    break;
 80140d4:	e0d0      	b.n	8014278 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	791b      	ldrb	r3, [r3, #4]
 80140da:	4619      	mov	r1, r3
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f003 ff50 	bl	8017f82 <USBH_LL_GetURBState>
 80140e2:	4603      	mov	r3, r0
 80140e4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80140e6:	7bbb      	ldrb	r3, [r7, #14]
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	d113      	bne.n	8014114 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	220d      	movs	r2, #13
 80140f0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80140f2:	2300      	movs	r3, #0
 80140f4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2203      	movs	r2, #3
 80140fa:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801410a:	2200      	movs	r2, #0
 801410c:	4619      	mov	r1, r3
 801410e:	f000 fbc1 	bl	8014894 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8014112:	e0ae      	b.n	8014272 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8014114:	7bbb      	ldrb	r3, [r7, #14]
 8014116:	2b04      	cmp	r3, #4
 8014118:	d111      	bne.n	801413e <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	220b      	movs	r2, #11
 801411e:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2203      	movs	r2, #3
 8014124:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014134:	2200      	movs	r2, #0
 8014136:	4619      	mov	r1, r3
 8014138:	f000 fbac 	bl	8014894 <osMessagePut>
    break;
 801413c:	e099      	b.n	8014272 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 801413e:	7bbb      	ldrb	r3, [r7, #14]
 8014140:	2b05      	cmp	r3, #5
 8014142:	f040 8096 	bne.w	8014272 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8014146:	2303      	movs	r3, #3
 8014148:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2203      	movs	r2, #3
 801414e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801415e:	2200      	movs	r2, #0
 8014160:	4619      	mov	r1, r3
 8014162:	f000 fb97 	bl	8014894 <osMessagePut>
    break;
 8014166:	e084      	b.n	8014272 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	795a      	ldrb	r2, [r3, #5]
 801416c:	2301      	movs	r3, #1
 801416e:	9300      	str	r3, [sp, #0]
 8014170:	4613      	mov	r3, r2
 8014172:	2200      	movs	r2, #0
 8014174:	2100      	movs	r1, #0
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f000 f89e 	bl	80142b8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 8014182:	b29a      	uxth	r2, r3
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	220a      	movs	r2, #10
 801418c:	761a      	strb	r2, [r3, #24]
    break;
 801418e:	e073      	b.n	8014278 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	795b      	ldrb	r3, [r3, #5]
 8014194:	4619      	mov	r1, r3
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f003 fef3 	bl	8017f82 <USBH_LL_GetURBState>
 801419c:	4603      	mov	r3, r0
 801419e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80141a0:	7bbb      	ldrb	r3, [r7, #14]
 80141a2:	2b01      	cmp	r3, #1
 80141a4:	d113      	bne.n	80141ce <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 80141a6:	2300      	movs	r3, #0
 80141a8:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	220d      	movs	r2, #13
 80141ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2203      	movs	r2, #3
 80141b4:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80141c4:	2200      	movs	r2, #0
 80141c6:	4619      	mov	r1, r3
 80141c8:	f000 fb64 	bl	8014894 <osMessagePut>
#endif
#endif
      }

    }
    break;
 80141cc:	e053      	b.n	8014276 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80141ce:	7bbb      	ldrb	r3, [r7, #14]
 80141d0:	2b02      	cmp	r3, #2
 80141d2:	d111      	bne.n	80141f8 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2209      	movs	r2, #9
 80141d8:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2203      	movs	r2, #3
 80141de:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80141ee:	2200      	movs	r2, #0
 80141f0:	4619      	mov	r1, r3
 80141f2:	f000 fb4f 	bl	8014894 <osMessagePut>
    break;
 80141f6:	e03e      	b.n	8014276 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 80141f8:	7bbb      	ldrb	r3, [r7, #14]
 80141fa:	2b04      	cmp	r3, #4
 80141fc:	d13b      	bne.n	8014276 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	220b      	movs	r2, #11
 8014202:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2203      	movs	r2, #3
 8014208:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8d3 049c 	ldr.w	r0, [r3, #1180]	; 0x49c
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8014218:	2200      	movs	r2, #0
 801421a:	4619      	mov	r1, r3
 801421c:	f000 fb3a 	bl	8014894 <osMessagePut>
    break;
 8014220:	e029      	b.n	8014276 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	7e5b      	ldrb	r3, [r3, #25]
 8014226:	3301      	adds	r3, #1
 8014228:	b2da      	uxtb	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	765a      	strb	r2, [r3, #25]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	7e5b      	ldrb	r3, [r3, #25]
 8014232:	2b02      	cmp	r3, #2
 8014234:	d809      	bhi.n	801424a <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f003 fdc9 	bl	8017dce <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2201      	movs	r2, #1
 8014240:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2201      	movs	r2, #1
 8014246:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8014248:	e016      	b.n	8014278 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8014250:	2106      	movs	r1, #6
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2200      	movs	r2, #0
 801425a:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 801425c:	2302      	movs	r3, #2
 801425e:	73fb      	strb	r3, [r7, #15]
    break;
 8014260:	e00a      	b.n	8014278 <USBH_HandleControl+0x470>

  default:
    break;
 8014262:	bf00      	nop
 8014264:	e008      	b.n	8014278 <USBH_HandleControl+0x470>
    break;
 8014266:	bf00      	nop
 8014268:	e006      	b.n	8014278 <USBH_HandleControl+0x470>
    break;
 801426a:	bf00      	nop
 801426c:	e004      	b.n	8014278 <USBH_HandleControl+0x470>
    break;
 801426e:	bf00      	nop
 8014270:	e002      	b.n	8014278 <USBH_HandleControl+0x470>
    break;
 8014272:	bf00      	nop
 8014274:	e000      	b.n	8014278 <USBH_HandleControl+0x470>
    break;
 8014276:	bf00      	nop
  }
  return status;
 8014278:	7bfb      	ldrb	r3, [r7, #15]
}
 801427a:	4618      	mov	r0, r3
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
 8014282:	bf00      	nop

08014284 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b088      	sub	sp, #32
 8014288:	af04      	add	r7, sp, #16
 801428a:	60f8      	str	r0, [r7, #12]
 801428c:	60b9      	str	r1, [r7, #8]
 801428e:	4613      	mov	r3, r2
 8014290:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8014292:	79f9      	ldrb	r1, [r7, #7]
 8014294:	2300      	movs	r3, #0
 8014296:	9303      	str	r3, [sp, #12]
 8014298:	2308      	movs	r3, #8
 801429a:	9302      	str	r3, [sp, #8]
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	9301      	str	r3, [sp, #4]
 80142a0:	2300      	movs	r3, #0
 80142a2:	9300      	str	r3, [sp, #0]
 80142a4:	2300      	movs	r3, #0
 80142a6:	2200      	movs	r2, #0
 80142a8:	68f8      	ldr	r0, [r7, #12]
 80142aa:	f003 fe39 	bl	8017f20 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80142ae:	2300      	movs	r3, #0
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3710      	adds	r7, #16
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b088      	sub	sp, #32
 80142bc:	af04      	add	r7, sp, #16
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	4611      	mov	r1, r2
 80142c4:	461a      	mov	r2, r3
 80142c6:	460b      	mov	r3, r1
 80142c8:	80fb      	strh	r3, [r7, #6]
 80142ca:	4613      	mov	r3, r2
 80142cc:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d001      	beq.n	80142dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80142d8:	2300      	movs	r3, #0
 80142da:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80142dc:	7979      	ldrb	r1, [r7, #5]
 80142de:	7e3b      	ldrb	r3, [r7, #24]
 80142e0:	9303      	str	r3, [sp, #12]
 80142e2:	88fb      	ldrh	r3, [r7, #6]
 80142e4:	9302      	str	r3, [sp, #8]
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	9301      	str	r3, [sp, #4]
 80142ea:	2301      	movs	r3, #1
 80142ec:	9300      	str	r3, [sp, #0]
 80142ee:	2300      	movs	r3, #0
 80142f0:	2200      	movs	r2, #0
 80142f2:	68f8      	ldr	r0, [r7, #12]
 80142f4:	f003 fe14 	bl	8017f20 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80142f8:	2300      	movs	r3, #0
}
 80142fa:	4618      	mov	r0, r3
 80142fc:	3710      	adds	r7, #16
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}

08014302 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8014302:	b580      	push	{r7, lr}
 8014304:	b088      	sub	sp, #32
 8014306:	af04      	add	r7, sp, #16
 8014308:	60f8      	str	r0, [r7, #12]
 801430a:	60b9      	str	r1, [r7, #8]
 801430c:	4611      	mov	r1, r2
 801430e:	461a      	mov	r2, r3
 8014310:	460b      	mov	r3, r1
 8014312:	80fb      	strh	r3, [r7, #6]
 8014314:	4613      	mov	r3, r2
 8014316:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8014318:	7979      	ldrb	r1, [r7, #5]
 801431a:	2300      	movs	r3, #0
 801431c:	9303      	str	r3, [sp, #12]
 801431e:	88fb      	ldrh	r3, [r7, #6]
 8014320:	9302      	str	r3, [sp, #8]
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	9301      	str	r3, [sp, #4]
 8014326:	2301      	movs	r3, #1
 8014328:	9300      	str	r3, [sp, #0]
 801432a:	2300      	movs	r3, #0
 801432c:	2201      	movs	r2, #1
 801432e:	68f8      	ldr	r0, [r7, #12]
 8014330:	f003 fdf6 	bl	8017f20 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014334:	2300      	movs	r3, #0

}
 8014336:	4618      	mov	r0, r3
 8014338:	3710      	adds	r7, #16
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}

0801433e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t length,
                                uint8_t pipe_num)
{
 801433e:	b580      	push	{r7, lr}
 8014340:	b088      	sub	sp, #32
 8014342:	af04      	add	r7, sp, #16
 8014344:	60f8      	str	r0, [r7, #12]
 8014346:	60b9      	str	r1, [r7, #8]
 8014348:	4611      	mov	r1, r2
 801434a:	461a      	mov	r2, r3
 801434c:	460b      	mov	r3, r1
 801434e:	71fb      	strb	r3, [r7, #7]
 8014350:	4613      	mov	r3, r2
 8014352:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8014354:	79fb      	ldrb	r3, [r7, #7]
 8014356:	b29b      	uxth	r3, r3
 8014358:	79b9      	ldrb	r1, [r7, #6]
 801435a:	2200      	movs	r2, #0
 801435c:	9203      	str	r2, [sp, #12]
 801435e:	9302      	str	r3, [sp, #8]
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	9301      	str	r3, [sp, #4]
 8014364:	2301      	movs	r3, #1
 8014366:	9300      	str	r3, [sp, #0]
 8014368:	2303      	movs	r3, #3
 801436a:	2201      	movs	r2, #1
 801436c:	68f8      	ldr	r0, [r7, #12]
 801436e:	f003 fdd7 	bl	8017f20 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8014372:	2300      	movs	r3, #0
}
 8014374:	4618      	mov	r0, r3
 8014376:	3710      	adds	r7, #16
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint32_t length,
                                uint8_t pipe_num)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b088      	sub	sp, #32
 8014380:	af04      	add	r7, sp, #16
 8014382:	60f8      	str	r0, [r7, #12]
 8014384:	60b9      	str	r1, [r7, #8]
 8014386:	607a      	str	r2, [r7, #4]
 8014388:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	b29b      	uxth	r3, r3
 801438e:	78f9      	ldrb	r1, [r7, #3]
 8014390:	2200      	movs	r2, #0
 8014392:	9203      	str	r2, [sp, #12]
 8014394:	9302      	str	r3, [sp, #8]
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	9301      	str	r3, [sp, #4]
 801439a:	2301      	movs	r3, #1
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	2301      	movs	r3, #1
 80143a0:	2200      	movs	r2, #0
 80143a2:	68f8      	ldr	r0, [r7, #12]
 80143a4:	f003 fdbc 	bl	8017f20 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 80143a8:	2300      	movs	r3, #0
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3710      	adds	r7, #16
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}

080143b2 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80143b2:	b580      	push	{r7, lr}
 80143b4:	b086      	sub	sp, #24
 80143b6:	af04      	add	r7, sp, #16
 80143b8:	6078      	str	r0, [r7, #4]
 80143ba:	4608      	mov	r0, r1
 80143bc:	4611      	mov	r1, r2
 80143be:	461a      	mov	r2, r3
 80143c0:	4603      	mov	r3, r0
 80143c2:	70fb      	strb	r3, [r7, #3]
 80143c4:	460b      	mov	r3, r1
 80143c6:	70bb      	strb	r3, [r7, #2]
 80143c8:	4613      	mov	r3, r2
 80143ca:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80143cc:	7878      	ldrb	r0, [r7, #1]
 80143ce:	78ba      	ldrb	r2, [r7, #2]
 80143d0:	78f9      	ldrb	r1, [r7, #3]
 80143d2:	8b3b      	ldrh	r3, [r7, #24]
 80143d4:	9302      	str	r3, [sp, #8]
 80143d6:	7d3b      	ldrb	r3, [r7, #20]
 80143d8:	9301      	str	r3, [sp, #4]
 80143da:	7c3b      	ldrb	r3, [r7, #16]
 80143dc:	9300      	str	r3, [sp, #0]
 80143de:	4603      	mov	r3, r0
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f003 fd4f 	bl	8017e84 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80143e6:	2300      	movs	r3, #0

}
 80143e8:	4618      	mov	r0, r3
 80143ea:	3708      	adds	r7, #8
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	460b      	mov	r3, r1
 80143fa:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80143fc:	78fb      	ldrb	r3, [r7, #3]
 80143fe:	4619      	mov	r1, r3
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f003 fd6e 	bl	8017ee2 <USBH_LL_ClosePipe>

  return USBH_OK;
 8014406:	2300      	movs	r3, #0

}
 8014408:	4618      	mov	r0, r3
 801440a:	3708      	adds	r7, #8
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}

08014410 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
 8014418:	460b      	mov	r3, r1
 801441a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f000 f834 	bl	801448a <USBH_GetFreePipe>
 8014422:	4603      	mov	r3, r0
 8014424:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014426:	89fb      	ldrh	r3, [r7, #14]
 8014428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801442c:	4293      	cmp	r3, r2
 801442e:	d008      	beq.n	8014442 <USBH_AllocPipe+0x32>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8014430:	78fb      	ldrb	r3, [r7, #3]
 8014432:	89fa      	ldrh	r2, [r7, #14]
 8014434:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f502 728a 	add.w	r2, r2, #276	; 0x114
 801443e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8014442:	89fb      	ldrh	r3, [r7, #14]
 8014444:	b2db      	uxtb	r3, r3
}
 8014446:	4618      	mov	r0, r3
 8014448:	3710      	adds	r7, #16
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}

0801444e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 801444e:	b480      	push	{r7}
 8014450:	b083      	sub	sp, #12
 8014452:	af00      	add	r7, sp, #0
 8014454:	6078      	str	r0, [r7, #4]
 8014456:	460b      	mov	r3, r1
 8014458:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 801445a:	78fb      	ldrb	r3, [r7, #3]
 801445c:	2b0a      	cmp	r3, #10
 801445e:	d80d      	bhi.n	801447c <USBH_FreePipe+0x2e>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8014460:	78fa      	ldrb	r2, [r7, #3]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8014468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801446c:	78fa      	ldrb	r2, [r7, #3]
 801446e:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8014478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 801447c:	2300      	movs	r3, #0
}
 801447e:	4618      	mov	r0, r3
 8014480:	370c      	adds	r7, #12
 8014482:	46bd      	mov	sp, r7
 8014484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014488:	4770      	bx	lr

0801448a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 801448a:	b480      	push	{r7}
 801448c:	b085      	sub	sp, #20
 801448e:	af00      	add	r7, sp, #0
 8014490:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8014492:	2300      	movs	r3, #0
 8014494:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8014496:	2300      	movs	r3, #0
 8014498:	73fb      	strb	r3, [r7, #15]
 801449a:	e00f      	b.n	80144bc <USBH_GetFreePipe+0x32>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801449c:	7bfa      	ldrb	r2, [r7, #15]
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f502 728a 	add.w	r2, r2, #276	; 0x114
 80144a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d102      	bne.n	80144b6 <USBH_GetFreePipe+0x2c>
	{
	   return (uint16_t)idx;
 80144b0:	7bfb      	ldrb	r3, [r7, #15]
 80144b2:	b29b      	uxth	r3, r3
 80144b4:	e007      	b.n	80144c6 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80144b6:	7bfb      	ldrb	r3, [r7, #15]
 80144b8:	3301      	adds	r3, #1
 80144ba:	73fb      	strb	r3, [r7, #15]
 80144bc:	7bfb      	ldrb	r3, [r7, #15]
 80144be:	2b0a      	cmp	r3, #10
 80144c0:	d9ec      	bls.n	801449c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80144c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3714      	adds	r7, #20
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr

080144d2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80144d2:	b480      	push	{r7}
 80144d4:	b085      	sub	sp, #20
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	4603      	mov	r3, r0
 80144da:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80144dc:	2300      	movs	r3, #0
 80144de:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80144e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144e4:	2b84      	cmp	r3, #132	; 0x84
 80144e6:	d005      	beq.n	80144f4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80144e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	4413      	add	r3, r2
 80144f0:	3303      	adds	r3, #3
 80144f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80144f4:	68fb      	ldr	r3, [r7, #12]
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3714      	adds	r7, #20
 80144fa:	46bd      	mov	sp, r7
 80144fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014500:	4770      	bx	lr

08014502 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014502:	b480      	push	{r7}
 8014504:	b083      	sub	sp, #12
 8014506:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014508:	f3ef 8305 	mrs	r3, IPSR
 801450c:	607b      	str	r3, [r7, #4]
  return(result);
 801450e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014510:	2b00      	cmp	r3, #0
 8014512:	bf14      	ite	ne
 8014514:	2301      	movne	r3, #1
 8014516:	2300      	moveq	r3, #0
 8014518:	b2db      	uxtb	r3, r3
}
 801451a:	4618      	mov	r0, r3
 801451c:	370c      	adds	r7, #12
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr

08014526 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014526:	b580      	push	{r7, lr}
 8014528:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801452a:	f001 fb67 	bl	8015bfc <vTaskStartScheduler>
  
  return osOK;
 801452e:	2300      	movs	r3, #0
}
 8014530:	4618      	mov	r0, r3
 8014532:	bd80      	pop	{r7, pc}

08014534 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014538:	f001 ff4a 	bl	80163d0 <xTaskGetSchedulerState>
 801453c:	4603      	mov	r3, r0
 801453e:	2b01      	cmp	r3, #1
 8014540:	d101      	bne.n	8014546 <osKernelRunning+0x12>
    return 0;
 8014542:	2300      	movs	r3, #0
 8014544:	e000      	b.n	8014548 <osKernelRunning+0x14>
  else
    return 1;
 8014546:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014548:	4618      	mov	r0, r3
 801454a:	bd80      	pop	{r7, pc}

0801454c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014550:	f7ff ffd7 	bl	8014502 <inHandlerMode>
 8014554:	4603      	mov	r3, r0
 8014556:	2b00      	cmp	r3, #0
 8014558:	d003      	beq.n	8014562 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801455a:	f001 fc4f 	bl	8015dfc <xTaskGetTickCountFromISR>
 801455e:	4603      	mov	r3, r0
 8014560:	e002      	b.n	8014568 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014562:	f001 fc3b 	bl	8015ddc <xTaskGetTickCount>
 8014566:	4603      	mov	r3, r0
  }
}
 8014568:	4618      	mov	r0, r3
 801456a:	bd80      	pop	{r7, pc}

0801456c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801456c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801456e:	b087      	sub	sp, #28
 8014570:	af02      	add	r7, sp, #8
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	685c      	ldr	r4, [r3, #4]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014582:	b29e      	uxth	r6, r3
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801458a:	4618      	mov	r0, r3
 801458c:	f7ff ffa1 	bl	80144d2 <makeFreeRtosPriority>
 8014590:	4602      	mov	r2, r0
 8014592:	f107 030c 	add.w	r3, r7, #12
 8014596:	9301      	str	r3, [sp, #4]
 8014598:	9200      	str	r2, [sp, #0]
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	4632      	mov	r2, r6
 801459e:	4629      	mov	r1, r5
 80145a0:	4620      	mov	r0, r4
 80145a2:	f001 f9cd 	bl	8015940 <xTaskCreate>
 80145a6:	4603      	mov	r3, r0
 80145a8:	2b01      	cmp	r3, #1
 80145aa:	d001      	beq.n	80145b0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80145ac:	2300      	movs	r3, #0
 80145ae:	e000      	b.n	80145b2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80145b0:	68fb      	ldr	r3, [r7, #12]
}
 80145b2:	4618      	mov	r0, r3
 80145b4:	3714      	adds	r7, #20
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080145ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80145ba:	b580      	push	{r7, lr}
 80145bc:	b084      	sub	sp, #16
 80145be:	af00      	add	r7, sp, #0
 80145c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d001      	beq.n	80145d0 <osDelay+0x16>
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	e000      	b.n	80145d2 <osDelay+0x18>
 80145d0:	2301      	movs	r3, #1
 80145d2:	4618      	mov	r0, r3
 80145d4:	f001 fade 	bl	8015b94 <vTaskDelay>
  
  return osOK;
 80145d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80145da:	4618      	mov	r0, r3
 80145dc:	3710      	adds	r7, #16
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd80      	pop	{r7, pc}

080145e2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80145e2:	b580      	push	{r7, lr}
 80145e4:	b082      	sub	sp, #8
 80145e6:	af00      	add	r7, sp, #0
 80145e8:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80145ea:	2001      	movs	r0, #1
 80145ec:	f000 fba8 	bl	8014d40 <xQueueCreateMutex>
 80145f0:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3708      	adds	r7, #8
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}
	...

080145fc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014606:	2300      	movs	r3, #0
 8014608:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d101      	bne.n	8014614 <osMutexWait+0x18>
    return osErrorParameter;
 8014610:	2380      	movs	r3, #128	; 0x80
 8014612:	e03a      	b.n	801468a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8014614:	2300      	movs	r3, #0
 8014616:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801461e:	d103      	bne.n	8014628 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8014620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014624:	60fb      	str	r3, [r7, #12]
 8014626:	e009      	b.n	801463c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d006      	beq.n	801463c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d101      	bne.n	801463c <osMutexWait+0x40>
      ticks = 1;
 8014638:	2301      	movs	r3, #1
 801463a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801463c:	f7ff ff61 	bl	8014502 <inHandlerMode>
 8014640:	4603      	mov	r3, r0
 8014642:	2b00      	cmp	r3, #0
 8014644:	d017      	beq.n	8014676 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014646:	f107 0308 	add.w	r3, r7, #8
 801464a:	461a      	mov	r2, r3
 801464c:	2100      	movs	r1, #0
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f000 ff8a 	bl	8015568 <xQueueReceiveFromISR>
 8014654:	4603      	mov	r3, r0
 8014656:	2b01      	cmp	r3, #1
 8014658:	d001      	beq.n	801465e <osMutexWait+0x62>
      return osErrorOS;
 801465a:	23ff      	movs	r3, #255	; 0xff
 801465c:	e015      	b.n	801468a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d011      	beq.n	8014688 <osMutexWait+0x8c>
 8014664:	4b0b      	ldr	r3, [pc, #44]	; (8014694 <osMutexWait+0x98>)
 8014666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801466a:	601a      	str	r2, [r3, #0]
 801466c:	f3bf 8f4f 	dsb	sy
 8014670:	f3bf 8f6f 	isb	sy
 8014674:	e008      	b.n	8014688 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8014676:	68f9      	ldr	r1, [r7, #12]
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f000 fe6d 	bl	8015358 <xQueueSemaphoreTake>
 801467e:	4603      	mov	r3, r0
 8014680:	2b01      	cmp	r3, #1
 8014682:	d001      	beq.n	8014688 <osMutexWait+0x8c>
    return osErrorOS;
 8014684:	23ff      	movs	r3, #255	; 0xff
 8014686:	e000      	b.n	801468a <osMutexWait+0x8e>
  }
  
  return osOK;
 8014688:	2300      	movs	r3, #0
}
 801468a:	4618      	mov	r0, r3
 801468c:	3710      	adds	r7, #16
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
 8014692:	bf00      	nop
 8014694:	e000ed04 	.word	0xe000ed04

08014698 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80146a0:	2300      	movs	r3, #0
 80146a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80146a4:	2300      	movs	r3, #0
 80146a6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80146a8:	f7ff ff2b 	bl	8014502 <inHandlerMode>
 80146ac:	4603      	mov	r3, r0
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d016      	beq.n	80146e0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80146b2:	f107 0308 	add.w	r3, r7, #8
 80146b6:	4619      	mov	r1, r3
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f000 fce7 	bl	801508c <xQueueGiveFromISR>
 80146be:	4603      	mov	r3, r0
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d001      	beq.n	80146c8 <osMutexRelease+0x30>
      return osErrorOS;
 80146c4:	23ff      	movs	r3, #255	; 0xff
 80146c6:	e017      	b.n	80146f8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d013      	beq.n	80146f6 <osMutexRelease+0x5e>
 80146ce:	4b0c      	ldr	r3, [pc, #48]	; (8014700 <osMutexRelease+0x68>)
 80146d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146d4:	601a      	str	r2, [r3, #0]
 80146d6:	f3bf 8f4f 	dsb	sy
 80146da:	f3bf 8f6f 	isb	sy
 80146de:	e00a      	b.n	80146f6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80146e0:	2300      	movs	r3, #0
 80146e2:	2200      	movs	r2, #0
 80146e4:	2100      	movs	r1, #0
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f000 fb42 	bl	8014d70 <xQueueGenericSend>
 80146ec:	4603      	mov	r3, r0
 80146ee:	2b01      	cmp	r3, #1
 80146f0:	d001      	beq.n	80146f6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80146f2:	23ff      	movs	r3, #255	; 0xff
 80146f4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80146f6:	68fb      	ldr	r3, [r7, #12]
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3710      	adds	r7, #16
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	e000ed04 	.word	0xe000ed04

08014704 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014704:	b580      	push	{r7, lr}
 8014706:	b084      	sub	sp, #16
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	2b01      	cmp	r3, #1
 8014712:	d110      	bne.n	8014736 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8014714:	2203      	movs	r2, #3
 8014716:	2100      	movs	r1, #0
 8014718:	2001      	movs	r0, #1
 801471a:	f000 fa9f 	bl	8014c5c <xQueueGenericCreate>
 801471e:	60f8      	str	r0, [r7, #12]
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d005      	beq.n	8014732 <osSemaphoreCreate+0x2e>
 8014726:	2300      	movs	r3, #0
 8014728:	2200      	movs	r2, #0
 801472a:	2100      	movs	r1, #0
 801472c:	68f8      	ldr	r0, [r7, #12]
 801472e:	f000 fb1f 	bl	8014d70 <xQueueGenericSend>
    return sema;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	e000      	b.n	8014738 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8014736:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8014738:	4618      	mov	r0, r3
 801473a:	3710      	adds	r7, #16
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}

08014740 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b084      	sub	sp, #16
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801474a:	2300      	movs	r3, #0
 801474c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d101      	bne.n	8014758 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8014754:	2380      	movs	r3, #128	; 0x80
 8014756:	e03a      	b.n	80147ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8014758:	2300      	movs	r3, #0
 801475a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014762:	d103      	bne.n	801476c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8014764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014768:	60fb      	str	r3, [r7, #12]
 801476a:	e009      	b.n	8014780 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d006      	beq.n	8014780 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d101      	bne.n	8014780 <osSemaphoreWait+0x40>
      ticks = 1;
 801477c:	2301      	movs	r3, #1
 801477e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014780:	f7ff febf 	bl	8014502 <inHandlerMode>
 8014784:	4603      	mov	r3, r0
 8014786:	2b00      	cmp	r3, #0
 8014788:	d017      	beq.n	80147ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801478a:	f107 0308 	add.w	r3, r7, #8
 801478e:	461a      	mov	r2, r3
 8014790:	2100      	movs	r1, #0
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f000 fee8 	bl	8015568 <xQueueReceiveFromISR>
 8014798:	4603      	mov	r3, r0
 801479a:	2b01      	cmp	r3, #1
 801479c:	d001      	beq.n	80147a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 801479e:	23ff      	movs	r3, #255	; 0xff
 80147a0:	e015      	b.n	80147ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d011      	beq.n	80147cc <osSemaphoreWait+0x8c>
 80147a8:	4b0b      	ldr	r3, [pc, #44]	; (80147d8 <osSemaphoreWait+0x98>)
 80147aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147ae:	601a      	str	r2, [r3, #0]
 80147b0:	f3bf 8f4f 	dsb	sy
 80147b4:	f3bf 8f6f 	isb	sy
 80147b8:	e008      	b.n	80147cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80147ba:	68f9      	ldr	r1, [r7, #12]
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f000 fdcb 	bl	8015358 <xQueueSemaphoreTake>
 80147c2:	4603      	mov	r3, r0
 80147c4:	2b01      	cmp	r3, #1
 80147c6:	d001      	beq.n	80147cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80147c8:	23ff      	movs	r3, #255	; 0xff
 80147ca:	e000      	b.n	80147ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80147cc:	2300      	movs	r3, #0
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3710      	adds	r7, #16
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop
 80147d8:	e000ed04 	.word	0xe000ed04

080147dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80147e4:	2300      	movs	r3, #0
 80147e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80147e8:	2300      	movs	r3, #0
 80147ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80147ec:	f7ff fe89 	bl	8014502 <inHandlerMode>
 80147f0:	4603      	mov	r3, r0
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d016      	beq.n	8014824 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80147f6:	f107 0308 	add.w	r3, r7, #8
 80147fa:	4619      	mov	r1, r3
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f000 fc45 	bl	801508c <xQueueGiveFromISR>
 8014802:	4603      	mov	r3, r0
 8014804:	2b01      	cmp	r3, #1
 8014806:	d001      	beq.n	801480c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014808:	23ff      	movs	r3, #255	; 0xff
 801480a:	e017      	b.n	801483c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d013      	beq.n	801483a <osSemaphoreRelease+0x5e>
 8014812:	4b0c      	ldr	r3, [pc, #48]	; (8014844 <osSemaphoreRelease+0x68>)
 8014814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014818:	601a      	str	r2, [r3, #0]
 801481a:	f3bf 8f4f 	dsb	sy
 801481e:	f3bf 8f6f 	isb	sy
 8014822:	e00a      	b.n	801483a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014824:	2300      	movs	r3, #0
 8014826:	2200      	movs	r2, #0
 8014828:	2100      	movs	r1, #0
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f000 faa0 	bl	8014d70 <xQueueGenericSend>
 8014830:	4603      	mov	r3, r0
 8014832:	2b01      	cmp	r3, #1
 8014834:	d001      	beq.n	801483a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014836:	23ff      	movs	r3, #255	; 0xff
 8014838:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801483a:	68fb      	ldr	r3, [r7, #12]
}
 801483c:	4618      	mov	r0, r3
 801483e:	3710      	adds	r7, #16
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	e000ed04 	.word	0xe000ed04

08014848 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014850:	f7ff fe57 	bl	8014502 <inHandlerMode>
 8014854:	4603      	mov	r3, r0
 8014856:	2b00      	cmp	r3, #0
 8014858:	d001      	beq.n	801485e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801485a:	2382      	movs	r3, #130	; 0x82
 801485c:	e003      	b.n	8014866 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f000 feff 	bl	8015662 <vQueueDelete>

  return osOK; 
 8014864:	2300      	movs	r3, #0
}
 8014866:	4618      	mov	r0, r3
 8014868:	3708      	adds	r7, #8
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}

0801486e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801486e:	b580      	push	{r7, lr}
 8014870:	b082      	sub	sp, #8
 8014872:	af00      	add	r7, sp, #0
 8014874:	6078      	str	r0, [r7, #4]
 8014876:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6818      	ldr	r0, [r3, #0]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	685b      	ldr	r3, [r3, #4]
 8014880:	2200      	movs	r2, #0
 8014882:	4619      	mov	r1, r3
 8014884:	f000 f9ea 	bl	8014c5c <xQueueGenericCreate>
 8014888:	4603      	mov	r3, r0
#endif
}
 801488a:	4618      	mov	r0, r3
 801488c:	3708      	adds	r7, #8
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}
	...

08014894 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b086      	sub	sp, #24
 8014898:	af00      	add	r7, sp, #0
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	60b9      	str	r1, [r7, #8]
 801489e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80148a0:	2300      	movs	r3, #0
 80148a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d101      	bne.n	80148b2 <osMessagePut+0x1e>
    ticks = 1;
 80148ae:	2301      	movs	r3, #1
 80148b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80148b2:	f7ff fe26 	bl	8014502 <inHandlerMode>
 80148b6:	4603      	mov	r3, r0
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d018      	beq.n	80148ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80148bc:	f107 0210 	add.w	r2, r7, #16
 80148c0:	f107 0108 	add.w	r1, r7, #8
 80148c4:	2300      	movs	r3, #0
 80148c6:	68f8      	ldr	r0, [r7, #12]
 80148c8:	f000 fb4c 	bl	8014f64 <xQueueGenericSendFromISR>
 80148cc:	4603      	mov	r3, r0
 80148ce:	2b01      	cmp	r3, #1
 80148d0:	d001      	beq.n	80148d6 <osMessagePut+0x42>
      return osErrorOS;
 80148d2:	23ff      	movs	r3, #255	; 0xff
 80148d4:	e018      	b.n	8014908 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d014      	beq.n	8014906 <osMessagePut+0x72>
 80148dc:	4b0c      	ldr	r3, [pc, #48]	; (8014910 <osMessagePut+0x7c>)
 80148de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148e2:	601a      	str	r2, [r3, #0]
 80148e4:	f3bf 8f4f 	dsb	sy
 80148e8:	f3bf 8f6f 	isb	sy
 80148ec:	e00b      	b.n	8014906 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80148ee:	f107 0108 	add.w	r1, r7, #8
 80148f2:	2300      	movs	r3, #0
 80148f4:	697a      	ldr	r2, [r7, #20]
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f000 fa3a 	bl	8014d70 <xQueueGenericSend>
 80148fc:	4603      	mov	r3, r0
 80148fe:	2b01      	cmp	r3, #1
 8014900:	d001      	beq.n	8014906 <osMessagePut+0x72>
      return osErrorOS;
 8014902:	23ff      	movs	r3, #255	; 0xff
 8014904:	e000      	b.n	8014908 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014906:	2300      	movs	r3, #0
}
 8014908:	4618      	mov	r0, r3
 801490a:	3718      	adds	r7, #24
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}
 8014910:	e000ed04 	.word	0xe000ed04

08014914 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014914:	b590      	push	{r4, r7, lr}
 8014916:	b08b      	sub	sp, #44	; 0x2c
 8014918:	af00      	add	r7, sp, #0
 801491a:	60f8      	str	r0, [r7, #12]
 801491c:	60b9      	str	r1, [r7, #8]
 801491e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014924:	2300      	movs	r3, #0
 8014926:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d10a      	bne.n	8014944 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801492e:	2380      	movs	r3, #128	; 0x80
 8014930:	617b      	str	r3, [r7, #20]
    return event;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	461c      	mov	r4, r3
 8014936:	f107 0314 	add.w	r3, r7, #20
 801493a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801493e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014942:	e054      	b.n	80149ee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014944:	2300      	movs	r3, #0
 8014946:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014948:	2300      	movs	r3, #0
 801494a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014952:	d103      	bne.n	801495c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014958:	627b      	str	r3, [r7, #36]	; 0x24
 801495a:	e009      	b.n	8014970 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d006      	beq.n	8014970 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8014966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014968:	2b00      	cmp	r3, #0
 801496a:	d101      	bne.n	8014970 <osMessageGet+0x5c>
      ticks = 1;
 801496c:	2301      	movs	r3, #1
 801496e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014970:	f7ff fdc7 	bl	8014502 <inHandlerMode>
 8014974:	4603      	mov	r3, r0
 8014976:	2b00      	cmp	r3, #0
 8014978:	d01c      	beq.n	80149b4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801497a:	f107 0220 	add.w	r2, r7, #32
 801497e:	f107 0314 	add.w	r3, r7, #20
 8014982:	3304      	adds	r3, #4
 8014984:	4619      	mov	r1, r3
 8014986:	68b8      	ldr	r0, [r7, #8]
 8014988:	f000 fdee 	bl	8015568 <xQueueReceiveFromISR>
 801498c:	4603      	mov	r3, r0
 801498e:	2b01      	cmp	r3, #1
 8014990:	d102      	bne.n	8014998 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014992:	2310      	movs	r3, #16
 8014994:	617b      	str	r3, [r7, #20]
 8014996:	e001      	b.n	801499c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014998:	2300      	movs	r3, #0
 801499a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801499c:	6a3b      	ldr	r3, [r7, #32]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d01d      	beq.n	80149de <osMessageGet+0xca>
 80149a2:	4b15      	ldr	r3, [pc, #84]	; (80149f8 <osMessageGet+0xe4>)
 80149a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149a8:	601a      	str	r2, [r3, #0]
 80149aa:	f3bf 8f4f 	dsb	sy
 80149ae:	f3bf 8f6f 	isb	sy
 80149b2:	e014      	b.n	80149de <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80149b4:	f107 0314 	add.w	r3, r7, #20
 80149b8:	3304      	adds	r3, #4
 80149ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149bc:	4619      	mov	r1, r3
 80149be:	68b8      	ldr	r0, [r7, #8]
 80149c0:	f000 fbee 	bl	80151a0 <xQueueReceive>
 80149c4:	4603      	mov	r3, r0
 80149c6:	2b01      	cmp	r3, #1
 80149c8:	d102      	bne.n	80149d0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80149ca:	2310      	movs	r3, #16
 80149cc:	617b      	str	r3, [r7, #20]
 80149ce:	e006      	b.n	80149de <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80149d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d101      	bne.n	80149da <osMessageGet+0xc6>
 80149d6:	2300      	movs	r3, #0
 80149d8:	e000      	b.n	80149dc <osMessageGet+0xc8>
 80149da:	2340      	movs	r3, #64	; 0x40
 80149dc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	461c      	mov	r4, r3
 80149e2:	f107 0314 	add.w	r3, r7, #20
 80149e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80149ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80149ee:	68f8      	ldr	r0, [r7, #12]
 80149f0:	372c      	adds	r7, #44	; 0x2c
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd90      	pop	{r4, r7, pc}
 80149f6:	bf00      	nop
 80149f8:	e000ed04 	.word	0xe000ed04

080149fc <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 8014a00:	f001 f942 	bl	8015c88 <vTaskSuspendAll>
  
  return osOK;
 8014a04:	2300      	movs	r3, #0
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	bd80      	pop	{r7, pc}

08014a0a <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 8014a0a:	b580      	push	{r7, lr}
 8014a0c:	af00      	add	r7, sp, #0
  if (xTaskResumeAll() == pdTRUE)
 8014a0e:	f001 f949 	bl	8015ca4 <xTaskResumeAll>
 8014a12:	4603      	mov	r3, r0
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	d101      	bne.n	8014a1c <osThreadResumeAll+0x12>
    return osOK;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	e000      	b.n	8014a1e <osThreadResumeAll+0x14>
  else
    return osErrorOS;
 8014a1c:	23ff      	movs	r3, #255	; 0xff
  
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	bd80      	pop	{r7, pc}

08014a22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014a22:	b480      	push	{r7}
 8014a24:	b083      	sub	sp, #12
 8014a26:	af00      	add	r7, sp, #0
 8014a28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f103 0208 	add.w	r2, r3, #8
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f103 0208 	add.w	r2, r3, #8
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	f103 0208 	add.w	r2, r3, #8
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2200      	movs	r2, #0
 8014a54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014a56:	bf00      	nop
 8014a58:	370c      	adds	r7, #12
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a60:	4770      	bx	lr

08014a62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014a62:	b480      	push	{r7}
 8014a64:	b083      	sub	sp, #12
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014a70:	bf00      	nop
 8014a72:	370c      	adds	r7, #12
 8014a74:	46bd      	mov	sp, r7
 8014a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7a:	4770      	bx	lr

08014a7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b085      	sub	sp, #20
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	68fa      	ldr	r2, [r7, #12]
 8014a90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	689a      	ldr	r2, [r3, #8]
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	683a      	ldr	r2, [r7, #0]
 8014aa0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	683a      	ldr	r2, [r7, #0]
 8014aa6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	1c5a      	adds	r2, r3, #1
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	601a      	str	r2, [r3, #0]
}
 8014ab8:	bf00      	nop
 8014aba:	3714      	adds	r7, #20
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr

08014ac4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b085      	sub	sp, #20
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ada:	d103      	bne.n	8014ae4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	691b      	ldr	r3, [r3, #16]
 8014ae0:	60fb      	str	r3, [r7, #12]
 8014ae2:	e00c      	b.n	8014afe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	3308      	adds	r3, #8
 8014ae8:	60fb      	str	r3, [r7, #12]
 8014aea:	e002      	b.n	8014af2 <vListInsert+0x2e>
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	60fb      	str	r3, [r7, #12]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	68ba      	ldr	r2, [r7, #8]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d2f6      	bcs.n	8014aec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	685a      	ldr	r2, [r3, #4]
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	683a      	ldr	r2, [r7, #0]
 8014b0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	68fa      	ldr	r2, [r7, #12]
 8014b12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	683a      	ldr	r2, [r7, #0]
 8014b18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	1c5a      	adds	r2, r3, #1
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	601a      	str	r2, [r3, #0]
}
 8014b2a:	bf00      	nop
 8014b2c:	3714      	adds	r7, #20
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b34:	4770      	bx	lr

08014b36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014b36:	b480      	push	{r7}
 8014b38:	b085      	sub	sp, #20
 8014b3a:	af00      	add	r7, sp, #0
 8014b3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	691b      	ldr	r3, [r3, #16]
 8014b42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	687a      	ldr	r2, [r7, #4]
 8014b4a:	6892      	ldr	r2, [r2, #8]
 8014b4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	689b      	ldr	r3, [r3, #8]
 8014b52:	687a      	ldr	r2, [r7, #4]
 8014b54:	6852      	ldr	r2, [r2, #4]
 8014b56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	685b      	ldr	r3, [r3, #4]
 8014b5c:	687a      	ldr	r2, [r7, #4]
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	d103      	bne.n	8014b6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	689a      	ldr	r2, [r3, #8]
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	1e5a      	subs	r2, r3, #1
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	681b      	ldr	r3, [r3, #0]
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3714      	adds	r7, #20
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr
	...

08014b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d109      	bne.n	8014bb4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba4:	f383 8811 	msr	BASEPRI, r3
 8014ba8:	f3bf 8f6f 	isb	sy
 8014bac:	f3bf 8f4f 	dsb	sy
 8014bb0:	60bb      	str	r3, [r7, #8]
 8014bb2:	e7fe      	b.n	8014bb2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8014bb4:	f001 ff72 	bl	8016a9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	681a      	ldr	r2, [r3, #0]
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bc0:	68f9      	ldr	r1, [r7, #12]
 8014bc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014bc4:	fb01 f303 	mul.w	r3, r1, r3
 8014bc8:	441a      	add	r2, r3
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	681a      	ldr	r2, [r3, #0]
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681a      	ldr	r2, [r3, #0]
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014be4:	3b01      	subs	r3, #1
 8014be6:	68f9      	ldr	r1, [r7, #12]
 8014be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014bea:	fb01 f303 	mul.w	r3, r1, r3
 8014bee:	441a      	add	r2, r3
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	22ff      	movs	r2, #255	; 0xff
 8014bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	22ff      	movs	r2, #255	; 0xff
 8014c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d114      	bne.n	8014c34 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	691b      	ldr	r3, [r3, #16]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d01a      	beq.n	8014c48 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	3310      	adds	r3, #16
 8014c16:	4618      	mov	r0, r3
 8014c18:	f001 fa3c 	bl	8016094 <xTaskRemoveFromEventList>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d012      	beq.n	8014c48 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014c22:	4b0d      	ldr	r3, [pc, #52]	; (8014c58 <xQueueGenericReset+0xcc>)
 8014c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c28:	601a      	str	r2, [r3, #0]
 8014c2a:	f3bf 8f4f 	dsb	sy
 8014c2e:	f3bf 8f6f 	isb	sy
 8014c32:	e009      	b.n	8014c48 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	3310      	adds	r3, #16
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7ff fef2 	bl	8014a22 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	3324      	adds	r3, #36	; 0x24
 8014c42:	4618      	mov	r0, r3
 8014c44:	f7ff feed 	bl	8014a22 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014c48:	f001 ff56 	bl	8016af8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014c4c:	2301      	movs	r3, #1
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3710      	adds	r7, #16
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	e000ed04 	.word	0xe000ed04

08014c5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b08a      	sub	sp, #40	; 0x28
 8014c60:	af02      	add	r7, sp, #8
 8014c62:	60f8      	str	r0, [r7, #12]
 8014c64:	60b9      	str	r1, [r7, #8]
 8014c66:	4613      	mov	r3, r2
 8014c68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d109      	bne.n	8014c84 <xQueueGenericCreate+0x28>
 8014c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c74:	f383 8811 	msr	BASEPRI, r3
 8014c78:	f3bf 8f6f 	isb	sy
 8014c7c:	f3bf 8f4f 	dsb	sy
 8014c80:	613b      	str	r3, [r7, #16]
 8014c82:	e7fe      	b.n	8014c82 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d102      	bne.n	8014c90 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	61fb      	str	r3, [r7, #28]
 8014c8e:	e004      	b.n	8014c9a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	68ba      	ldr	r2, [r7, #8]
 8014c94:	fb02 f303 	mul.w	r3, r2, r3
 8014c98:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	3348      	adds	r3, #72	; 0x48
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f002 f816 	bl	8016cd0 <pvPortMalloc>
 8014ca4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d00b      	beq.n	8014cc4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8014cac:	69bb      	ldr	r3, [r7, #24]
 8014cae:	3348      	adds	r3, #72	; 0x48
 8014cb0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014cb2:	79fa      	ldrb	r2, [r7, #7]
 8014cb4:	69bb      	ldr	r3, [r7, #24]
 8014cb6:	9300      	str	r3, [sp, #0]
 8014cb8:	4613      	mov	r3, r2
 8014cba:	697a      	ldr	r2, [r7, #20]
 8014cbc:	68b9      	ldr	r1, [r7, #8]
 8014cbe:	68f8      	ldr	r0, [r7, #12]
 8014cc0:	f000 f805 	bl	8014cce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8014cc4:	69bb      	ldr	r3, [r7, #24]
	}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3720      	adds	r7, #32
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}

08014cce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014cce:	b580      	push	{r7, lr}
 8014cd0:	b084      	sub	sp, #16
 8014cd2:	af00      	add	r7, sp, #0
 8014cd4:	60f8      	str	r0, [r7, #12]
 8014cd6:	60b9      	str	r1, [r7, #8]
 8014cd8:	607a      	str	r2, [r7, #4]
 8014cda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d103      	bne.n	8014cea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	69ba      	ldr	r2, [r7, #24]
 8014ce6:	601a      	str	r2, [r3, #0]
 8014ce8:	e002      	b.n	8014cf0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014cea:	69bb      	ldr	r3, [r7, #24]
 8014cec:	687a      	ldr	r2, [r7, #4]
 8014cee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014cf0:	69bb      	ldr	r3, [r7, #24]
 8014cf2:	68fa      	ldr	r2, [r7, #12]
 8014cf4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014cf6:	69bb      	ldr	r3, [r7, #24]
 8014cf8:	68ba      	ldr	r2, [r7, #8]
 8014cfa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014cfc:	2101      	movs	r1, #1
 8014cfe:	69b8      	ldr	r0, [r7, #24]
 8014d00:	f7ff ff44 	bl	8014b8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014d04:	bf00      	nop
 8014d06:	3710      	adds	r7, #16
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}

08014d0c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b082      	sub	sp, #8
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d00e      	beq.n	8014d38 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2200      	movs	r2, #0
 8014d24:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2200      	movs	r2, #0
 8014d2a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	2200      	movs	r2, #0
 8014d30:	2100      	movs	r1, #0
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f000 f81c 	bl	8014d70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014d38:	bf00      	nop
 8014d3a:	3708      	adds	r7, #8
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}

08014d40 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b086      	sub	sp, #24
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	4603      	mov	r3, r0
 8014d48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	617b      	str	r3, [r7, #20]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014d52:	79fb      	ldrb	r3, [r7, #7]
 8014d54:	461a      	mov	r2, r3
 8014d56:	6939      	ldr	r1, [r7, #16]
 8014d58:	6978      	ldr	r0, [r7, #20]
 8014d5a:	f7ff ff7f 	bl	8014c5c <xQueueGenericCreate>
 8014d5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8014d60:	68f8      	ldr	r0, [r7, #12]
 8014d62:	f7ff ffd3 	bl	8014d0c <prvInitialiseMutex>

		return pxNewQueue;
 8014d66:	68fb      	ldr	r3, [r7, #12]
	}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3718      	adds	r7, #24
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b08e      	sub	sp, #56	; 0x38
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60f8      	str	r0, [r7, #12]
 8014d78:	60b9      	str	r1, [r7, #8]
 8014d7a:	607a      	str	r2, [r7, #4]
 8014d7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d109      	bne.n	8014da0 <xQueueGenericSend+0x30>
 8014d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d90:	f383 8811 	msr	BASEPRI, r3
 8014d94:	f3bf 8f6f 	isb	sy
 8014d98:	f3bf 8f4f 	dsb	sy
 8014d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d9e:	e7fe      	b.n	8014d9e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d103      	bne.n	8014dae <xQueueGenericSend+0x3e>
 8014da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d101      	bne.n	8014db2 <xQueueGenericSend+0x42>
 8014dae:	2301      	movs	r3, #1
 8014db0:	e000      	b.n	8014db4 <xQueueGenericSend+0x44>
 8014db2:	2300      	movs	r3, #0
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d109      	bne.n	8014dcc <xQueueGenericSend+0x5c>
 8014db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dbc:	f383 8811 	msr	BASEPRI, r3
 8014dc0:	f3bf 8f6f 	isb	sy
 8014dc4:	f3bf 8f4f 	dsb	sy
 8014dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8014dca:	e7fe      	b.n	8014dca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	2b02      	cmp	r3, #2
 8014dd0:	d103      	bne.n	8014dda <xQueueGenericSend+0x6a>
 8014dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d101      	bne.n	8014dde <xQueueGenericSend+0x6e>
 8014dda:	2301      	movs	r3, #1
 8014ddc:	e000      	b.n	8014de0 <xQueueGenericSend+0x70>
 8014dde:	2300      	movs	r3, #0
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d109      	bne.n	8014df8 <xQueueGenericSend+0x88>
 8014de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de8:	f383 8811 	msr	BASEPRI, r3
 8014dec:	f3bf 8f6f 	isb	sy
 8014df0:	f3bf 8f4f 	dsb	sy
 8014df4:	623b      	str	r3, [r7, #32]
 8014df6:	e7fe      	b.n	8014df6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014df8:	f001 faea 	bl	80163d0 <xTaskGetSchedulerState>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d102      	bne.n	8014e08 <xQueueGenericSend+0x98>
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d101      	bne.n	8014e0c <xQueueGenericSend+0x9c>
 8014e08:	2301      	movs	r3, #1
 8014e0a:	e000      	b.n	8014e0e <xQueueGenericSend+0x9e>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d109      	bne.n	8014e26 <xQueueGenericSend+0xb6>
 8014e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e16:	f383 8811 	msr	BASEPRI, r3
 8014e1a:	f3bf 8f6f 	isb	sy
 8014e1e:	f3bf 8f4f 	dsb	sy
 8014e22:	61fb      	str	r3, [r7, #28]
 8014e24:	e7fe      	b.n	8014e24 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014e26:	f001 fe39 	bl	8016a9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e32:	429a      	cmp	r2, r3
 8014e34:	d302      	bcc.n	8014e3c <xQueueGenericSend+0xcc>
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	2b02      	cmp	r3, #2
 8014e3a:	d129      	bne.n	8014e90 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014e3c:	683a      	ldr	r2, [r7, #0]
 8014e3e:	68b9      	ldr	r1, [r7, #8]
 8014e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e42:	f000 fc43 	bl	80156cc <prvCopyDataToQueue>
 8014e46:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d010      	beq.n	8014e72 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e52:	3324      	adds	r3, #36	; 0x24
 8014e54:	4618      	mov	r0, r3
 8014e56:	f001 f91d 	bl	8016094 <xTaskRemoveFromEventList>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d013      	beq.n	8014e88 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014e60:	4b3f      	ldr	r3, [pc, #252]	; (8014f60 <xQueueGenericSend+0x1f0>)
 8014e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e66:	601a      	str	r2, [r3, #0]
 8014e68:	f3bf 8f4f 	dsb	sy
 8014e6c:	f3bf 8f6f 	isb	sy
 8014e70:	e00a      	b.n	8014e88 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d007      	beq.n	8014e88 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014e78:	4b39      	ldr	r3, [pc, #228]	; (8014f60 <xQueueGenericSend+0x1f0>)
 8014e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e7e:	601a      	str	r2, [r3, #0]
 8014e80:	f3bf 8f4f 	dsb	sy
 8014e84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014e88:	f001 fe36 	bl	8016af8 <vPortExitCritical>
				return pdPASS;
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	e063      	b.n	8014f58 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d103      	bne.n	8014e9e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014e96:	f001 fe2f 	bl	8016af8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	e05c      	b.n	8014f58 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d106      	bne.n	8014eb2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014ea4:	f107 0314 	add.w	r3, r7, #20
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f001 f955 	bl	8016158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014eae:	2301      	movs	r3, #1
 8014eb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014eb2:	f001 fe21 	bl	8016af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014eb6:	f000 fee7 	bl	8015c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014eba:	f001 fdef 	bl	8016a9c <vPortEnterCritical>
 8014ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ec4:	b25b      	sxtb	r3, r3
 8014ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014eca:	d103      	bne.n	8014ed4 <xQueueGenericSend+0x164>
 8014ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ece:	2200      	movs	r2, #0
 8014ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014eda:	b25b      	sxtb	r3, r3
 8014edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ee0:	d103      	bne.n	8014eea <xQueueGenericSend+0x17a>
 8014ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014eea:	f001 fe05 	bl	8016af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014eee:	1d3a      	adds	r2, r7, #4
 8014ef0:	f107 0314 	add.w	r3, r7, #20
 8014ef4:	4611      	mov	r1, r2
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f001 f944 	bl	8016184 <xTaskCheckForTimeOut>
 8014efc:	4603      	mov	r3, r0
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d124      	bne.n	8014f4c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f04:	f000 fcda 	bl	80158bc <prvIsQueueFull>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d018      	beq.n	8014f40 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f10:	3310      	adds	r3, #16
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	4611      	mov	r1, r2
 8014f16:	4618      	mov	r0, r3
 8014f18:	f001 f898 	bl	801604c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f1e:	f000 fc65 	bl	80157ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014f22:	f000 febf 	bl	8015ca4 <xTaskResumeAll>
 8014f26:	4603      	mov	r3, r0
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	f47f af7c 	bne.w	8014e26 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8014f2e:	4b0c      	ldr	r3, [pc, #48]	; (8014f60 <xQueueGenericSend+0x1f0>)
 8014f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f34:	601a      	str	r2, [r3, #0]
 8014f36:	f3bf 8f4f 	dsb	sy
 8014f3a:	f3bf 8f6f 	isb	sy
 8014f3e:	e772      	b.n	8014e26 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f42:	f000 fc53 	bl	80157ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014f46:	f000 fead 	bl	8015ca4 <xTaskResumeAll>
 8014f4a:	e76c      	b.n	8014e26 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f4e:	f000 fc4d 	bl	80157ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014f52:	f000 fea7 	bl	8015ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014f56:	2300      	movs	r3, #0
		}
	}
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3738      	adds	r7, #56	; 0x38
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	e000ed04 	.word	0xe000ed04

08014f64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b08e      	sub	sp, #56	; 0x38
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d109      	bne.n	8014f90 <xQueueGenericSendFromISR+0x2c>
 8014f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f80:	f383 8811 	msr	BASEPRI, r3
 8014f84:	f3bf 8f6f 	isb	sy
 8014f88:	f3bf 8f4f 	dsb	sy
 8014f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8014f8e:	e7fe      	b.n	8014f8e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d103      	bne.n	8014f9e <xQueueGenericSendFromISR+0x3a>
 8014f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d101      	bne.n	8014fa2 <xQueueGenericSendFromISR+0x3e>
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	e000      	b.n	8014fa4 <xQueueGenericSendFromISR+0x40>
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d109      	bne.n	8014fbc <xQueueGenericSendFromISR+0x58>
 8014fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fac:	f383 8811 	msr	BASEPRI, r3
 8014fb0:	f3bf 8f6f 	isb	sy
 8014fb4:	f3bf 8f4f 	dsb	sy
 8014fb8:	623b      	str	r3, [r7, #32]
 8014fba:	e7fe      	b.n	8014fba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	2b02      	cmp	r3, #2
 8014fc0:	d103      	bne.n	8014fca <xQueueGenericSendFromISR+0x66>
 8014fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	d101      	bne.n	8014fce <xQueueGenericSendFromISR+0x6a>
 8014fca:	2301      	movs	r3, #1
 8014fcc:	e000      	b.n	8014fd0 <xQueueGenericSendFromISR+0x6c>
 8014fce:	2300      	movs	r3, #0
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d109      	bne.n	8014fe8 <xQueueGenericSendFromISR+0x84>
 8014fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd8:	f383 8811 	msr	BASEPRI, r3
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	f3bf 8f4f 	dsb	sy
 8014fe4:	61fb      	str	r3, [r7, #28]
 8014fe6:	e7fe      	b.n	8014fe6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014fe8:	f001 fe34 	bl	8016c54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014fec:	f3ef 8211 	mrs	r2, BASEPRI
 8014ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff4:	f383 8811 	msr	BASEPRI, r3
 8014ff8:	f3bf 8f6f 	isb	sy
 8014ffc:	f3bf 8f4f 	dsb	sy
 8015000:	61ba      	str	r2, [r7, #24]
 8015002:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015004:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015006:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801500a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015010:	429a      	cmp	r2, r3
 8015012:	d302      	bcc.n	801501a <xQueueGenericSendFromISR+0xb6>
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	2b02      	cmp	r3, #2
 8015018:	d12c      	bne.n	8015074 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015024:	683a      	ldr	r2, [r7, #0]
 8015026:	68b9      	ldr	r1, [r7, #8]
 8015028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801502a:	f000 fb4f 	bl	80156cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801502e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015036:	d112      	bne.n	801505e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801503c:	2b00      	cmp	r3, #0
 801503e:	d016      	beq.n	801506e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015042:	3324      	adds	r3, #36	; 0x24
 8015044:	4618      	mov	r0, r3
 8015046:	f001 f825 	bl	8016094 <xTaskRemoveFromEventList>
 801504a:	4603      	mov	r3, r0
 801504c:	2b00      	cmp	r3, #0
 801504e:	d00e      	beq.n	801506e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d00b      	beq.n	801506e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2201      	movs	r2, #1
 801505a:	601a      	str	r2, [r3, #0]
 801505c:	e007      	b.n	801506e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801505e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015062:	3301      	adds	r3, #1
 8015064:	b2db      	uxtb	r3, r3
 8015066:	b25a      	sxtb	r2, r3
 8015068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801506a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801506e:	2301      	movs	r3, #1
 8015070:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015072:	e001      	b.n	8015078 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015074:	2300      	movs	r3, #0
 8015076:	637b      	str	r3, [r7, #52]	; 0x34
 8015078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801507a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015084:	4618      	mov	r0, r3
 8015086:	3738      	adds	r7, #56	; 0x38
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b08e      	sub	sp, #56	; 0x38
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801509c:	2b00      	cmp	r3, #0
 801509e:	d109      	bne.n	80150b4 <xQueueGiveFromISR+0x28>
	__asm volatile
 80150a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a4:	f383 8811 	msr	BASEPRI, r3
 80150a8:	f3bf 8f6f 	isb	sy
 80150ac:	f3bf 8f4f 	dsb	sy
 80150b0:	623b      	str	r3, [r7, #32]
 80150b2:	e7fe      	b.n	80150b2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80150b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d009      	beq.n	80150d0 <xQueueGiveFromISR+0x44>
 80150bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c0:	f383 8811 	msr	BASEPRI, r3
 80150c4:	f3bf 8f6f 	isb	sy
 80150c8:	f3bf 8f4f 	dsb	sy
 80150cc:	61fb      	str	r3, [r7, #28]
 80150ce:	e7fe      	b.n	80150ce <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80150d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d103      	bne.n	80150e0 <xQueueGiveFromISR+0x54>
 80150d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d101      	bne.n	80150e4 <xQueueGiveFromISR+0x58>
 80150e0:	2301      	movs	r3, #1
 80150e2:	e000      	b.n	80150e6 <xQueueGiveFromISR+0x5a>
 80150e4:	2300      	movs	r3, #0
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d109      	bne.n	80150fe <xQueueGiveFromISR+0x72>
 80150ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ee:	f383 8811 	msr	BASEPRI, r3
 80150f2:	f3bf 8f6f 	isb	sy
 80150f6:	f3bf 8f4f 	dsb	sy
 80150fa:	61bb      	str	r3, [r7, #24]
 80150fc:	e7fe      	b.n	80150fc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80150fe:	f001 fda9 	bl	8016c54 <vPortValidateInterruptPriority>
	__asm volatile
 8015102:	f3ef 8211 	mrs	r2, BASEPRI
 8015106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801510a:	f383 8811 	msr	BASEPRI, r3
 801510e:	f3bf 8f6f 	isb	sy
 8015112:	f3bf 8f4f 	dsb	sy
 8015116:	617a      	str	r2, [r7, #20]
 8015118:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801511a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801511c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015122:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801512a:	429a      	cmp	r2, r3
 801512c:	d22b      	bcs.n	8015186 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513a:	1c5a      	adds	r2, r3, #1
 801513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801513e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015140:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015148:	d112      	bne.n	8015170 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801514e:	2b00      	cmp	r3, #0
 8015150:	d016      	beq.n	8015180 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015154:	3324      	adds	r3, #36	; 0x24
 8015156:	4618      	mov	r0, r3
 8015158:	f000 ff9c 	bl	8016094 <xTaskRemoveFromEventList>
 801515c:	4603      	mov	r3, r0
 801515e:	2b00      	cmp	r3, #0
 8015160:	d00e      	beq.n	8015180 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d00b      	beq.n	8015180 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015168:	683b      	ldr	r3, [r7, #0]
 801516a:	2201      	movs	r2, #1
 801516c:	601a      	str	r2, [r3, #0]
 801516e:	e007      	b.n	8015180 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015174:	3301      	adds	r3, #1
 8015176:	b2db      	uxtb	r3, r3
 8015178:	b25a      	sxtb	r2, r3
 801517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801517c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015180:	2301      	movs	r3, #1
 8015182:	637b      	str	r3, [r7, #52]	; 0x34
 8015184:	e001      	b.n	801518a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015186:	2300      	movs	r3, #0
 8015188:	637b      	str	r3, [r7, #52]	; 0x34
 801518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801518c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015196:	4618      	mov	r0, r3
 8015198:	3738      	adds	r7, #56	; 0x38
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
	...

080151a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b08c      	sub	sp, #48	; 0x30
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	60f8      	str	r0, [r7, #12]
 80151a8:	60b9      	str	r1, [r7, #8]
 80151aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80151ac:	2300      	movs	r3, #0
 80151ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80151b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d109      	bne.n	80151ce <xQueueReceive+0x2e>
	__asm volatile
 80151ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151be:	f383 8811 	msr	BASEPRI, r3
 80151c2:	f3bf 8f6f 	isb	sy
 80151c6:	f3bf 8f4f 	dsb	sy
 80151ca:	623b      	str	r3, [r7, #32]
 80151cc:	e7fe      	b.n	80151cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d103      	bne.n	80151dc <xQueueReceive+0x3c>
 80151d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d101      	bne.n	80151e0 <xQueueReceive+0x40>
 80151dc:	2301      	movs	r3, #1
 80151de:	e000      	b.n	80151e2 <xQueueReceive+0x42>
 80151e0:	2300      	movs	r3, #0
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d109      	bne.n	80151fa <xQueueReceive+0x5a>
 80151e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ea:	f383 8811 	msr	BASEPRI, r3
 80151ee:	f3bf 8f6f 	isb	sy
 80151f2:	f3bf 8f4f 	dsb	sy
 80151f6:	61fb      	str	r3, [r7, #28]
 80151f8:	e7fe      	b.n	80151f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80151fa:	f001 f8e9 	bl	80163d0 <xTaskGetSchedulerState>
 80151fe:	4603      	mov	r3, r0
 8015200:	2b00      	cmp	r3, #0
 8015202:	d102      	bne.n	801520a <xQueueReceive+0x6a>
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d101      	bne.n	801520e <xQueueReceive+0x6e>
 801520a:	2301      	movs	r3, #1
 801520c:	e000      	b.n	8015210 <xQueueReceive+0x70>
 801520e:	2300      	movs	r3, #0
 8015210:	2b00      	cmp	r3, #0
 8015212:	d109      	bne.n	8015228 <xQueueReceive+0x88>
 8015214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015218:	f383 8811 	msr	BASEPRI, r3
 801521c:	f3bf 8f6f 	isb	sy
 8015220:	f3bf 8f4f 	dsb	sy
 8015224:	61bb      	str	r3, [r7, #24]
 8015226:	e7fe      	b.n	8015226 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8015228:	f001 fc38 	bl	8016a9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015230:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015234:	2b00      	cmp	r3, #0
 8015236:	d01f      	beq.n	8015278 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015238:	68b9      	ldr	r1, [r7, #8]
 801523a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801523c:	f000 fab0 	bl	80157a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015242:	1e5a      	subs	r2, r3, #1
 8015244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015246:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801524a:	691b      	ldr	r3, [r3, #16]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d00f      	beq.n	8015270 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015252:	3310      	adds	r3, #16
 8015254:	4618      	mov	r0, r3
 8015256:	f000 ff1d 	bl	8016094 <xTaskRemoveFromEventList>
 801525a:	4603      	mov	r3, r0
 801525c:	2b00      	cmp	r3, #0
 801525e:	d007      	beq.n	8015270 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015260:	4b3c      	ldr	r3, [pc, #240]	; (8015354 <xQueueReceive+0x1b4>)
 8015262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015266:	601a      	str	r2, [r3, #0]
 8015268:	f3bf 8f4f 	dsb	sy
 801526c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015270:	f001 fc42 	bl	8016af8 <vPortExitCritical>
				return pdPASS;
 8015274:	2301      	movs	r3, #1
 8015276:	e069      	b.n	801534c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d103      	bne.n	8015286 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801527e:	f001 fc3b 	bl	8016af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015282:	2300      	movs	r3, #0
 8015284:	e062      	b.n	801534c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015288:	2b00      	cmp	r3, #0
 801528a:	d106      	bne.n	801529a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801528c:	f107 0310 	add.w	r3, r7, #16
 8015290:	4618      	mov	r0, r3
 8015292:	f000 ff61 	bl	8016158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015296:	2301      	movs	r3, #1
 8015298:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801529a:	f001 fc2d 	bl	8016af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801529e:	f000 fcf3 	bl	8015c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80152a2:	f001 fbfb 	bl	8016a9c <vPortEnterCritical>
 80152a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80152ac:	b25b      	sxtb	r3, r3
 80152ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152b2:	d103      	bne.n	80152bc <xQueueReceive+0x11c>
 80152b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b6:	2200      	movs	r2, #0
 80152b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80152bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80152c2:	b25b      	sxtb	r3, r3
 80152c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152c8:	d103      	bne.n	80152d2 <xQueueReceive+0x132>
 80152ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152cc:	2200      	movs	r2, #0
 80152ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80152d2:	f001 fc11 	bl	8016af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80152d6:	1d3a      	adds	r2, r7, #4
 80152d8:	f107 0310 	add.w	r3, r7, #16
 80152dc:	4611      	mov	r1, r2
 80152de:	4618      	mov	r0, r3
 80152e0:	f000 ff50 	bl	8016184 <xTaskCheckForTimeOut>
 80152e4:	4603      	mov	r3, r0
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d123      	bne.n	8015332 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80152ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152ec:	f000 fad0 	bl	8015890 <prvIsQueueEmpty>
 80152f0:	4603      	mov	r3, r0
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d017      	beq.n	8015326 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80152f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152f8:	3324      	adds	r3, #36	; 0x24
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	4611      	mov	r1, r2
 80152fe:	4618      	mov	r0, r3
 8015300:	f000 fea4 	bl	801604c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015306:	f000 fa71 	bl	80157ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801530a:	f000 fccb 	bl	8015ca4 <xTaskResumeAll>
 801530e:	4603      	mov	r3, r0
 8015310:	2b00      	cmp	r3, #0
 8015312:	d189      	bne.n	8015228 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8015314:	4b0f      	ldr	r3, [pc, #60]	; (8015354 <xQueueReceive+0x1b4>)
 8015316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801531a:	601a      	str	r2, [r3, #0]
 801531c:	f3bf 8f4f 	dsb	sy
 8015320:	f3bf 8f6f 	isb	sy
 8015324:	e780      	b.n	8015228 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015328:	f000 fa60 	bl	80157ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801532c:	f000 fcba 	bl	8015ca4 <xTaskResumeAll>
 8015330:	e77a      	b.n	8015228 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015334:	f000 fa5a 	bl	80157ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015338:	f000 fcb4 	bl	8015ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801533c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801533e:	f000 faa7 	bl	8015890 <prvIsQueueEmpty>
 8015342:	4603      	mov	r3, r0
 8015344:	2b00      	cmp	r3, #0
 8015346:	f43f af6f 	beq.w	8015228 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801534a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801534c:	4618      	mov	r0, r3
 801534e:	3730      	adds	r7, #48	; 0x30
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}
 8015354:	e000ed04 	.word	0xe000ed04

08015358 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b08e      	sub	sp, #56	; 0x38
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015362:	2300      	movs	r3, #0
 8015364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801536a:	2300      	movs	r3, #0
 801536c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015370:	2b00      	cmp	r3, #0
 8015372:	d109      	bne.n	8015388 <xQueueSemaphoreTake+0x30>
 8015374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015378:	f383 8811 	msr	BASEPRI, r3
 801537c:	f3bf 8f6f 	isb	sy
 8015380:	f3bf 8f4f 	dsb	sy
 8015384:	623b      	str	r3, [r7, #32]
 8015386:	e7fe      	b.n	8015386 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801538c:	2b00      	cmp	r3, #0
 801538e:	d009      	beq.n	80153a4 <xQueueSemaphoreTake+0x4c>
 8015390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015394:	f383 8811 	msr	BASEPRI, r3
 8015398:	f3bf 8f6f 	isb	sy
 801539c:	f3bf 8f4f 	dsb	sy
 80153a0:	61fb      	str	r3, [r7, #28]
 80153a2:	e7fe      	b.n	80153a2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80153a4:	f001 f814 	bl	80163d0 <xTaskGetSchedulerState>
 80153a8:	4603      	mov	r3, r0
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d102      	bne.n	80153b4 <xQueueSemaphoreTake+0x5c>
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d101      	bne.n	80153b8 <xQueueSemaphoreTake+0x60>
 80153b4:	2301      	movs	r3, #1
 80153b6:	e000      	b.n	80153ba <xQueueSemaphoreTake+0x62>
 80153b8:	2300      	movs	r3, #0
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d109      	bne.n	80153d2 <xQueueSemaphoreTake+0x7a>
 80153be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c2:	f383 8811 	msr	BASEPRI, r3
 80153c6:	f3bf 8f6f 	isb	sy
 80153ca:	f3bf 8f4f 	dsb	sy
 80153ce:	61bb      	str	r3, [r7, #24]
 80153d0:	e7fe      	b.n	80153d0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80153d2:	f001 fb63 	bl	8016a9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80153d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153da:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80153dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d024      	beq.n	801542c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80153e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e4:	1e5a      	subs	r2, r3, #1
 80153e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153e8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80153ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d104      	bne.n	80153fc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80153f2:	f001 f9b3 	bl	801675c <pvTaskIncrementMutexHeldCount>
 80153f6:	4602      	mov	r2, r0
 80153f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153fa:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153fe:	691b      	ldr	r3, [r3, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d00f      	beq.n	8015424 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015406:	3310      	adds	r3, #16
 8015408:	4618      	mov	r0, r3
 801540a:	f000 fe43 	bl	8016094 <xTaskRemoveFromEventList>
 801540e:	4603      	mov	r3, r0
 8015410:	2b00      	cmp	r3, #0
 8015412:	d007      	beq.n	8015424 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015414:	4b53      	ldr	r3, [pc, #332]	; (8015564 <xQueueSemaphoreTake+0x20c>)
 8015416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801541a:	601a      	str	r2, [r3, #0]
 801541c:	f3bf 8f4f 	dsb	sy
 8015420:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015424:	f001 fb68 	bl	8016af8 <vPortExitCritical>
				return pdPASS;
 8015428:	2301      	movs	r3, #1
 801542a:	e096      	b.n	801555a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d110      	bne.n	8015454 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015434:	2b00      	cmp	r3, #0
 8015436:	d009      	beq.n	801544c <xQueueSemaphoreTake+0xf4>
 8015438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801543c:	f383 8811 	msr	BASEPRI, r3
 8015440:	f3bf 8f6f 	isb	sy
 8015444:	f3bf 8f4f 	dsb	sy
 8015448:	617b      	str	r3, [r7, #20]
 801544a:	e7fe      	b.n	801544a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801544c:	f001 fb54 	bl	8016af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015450:	2300      	movs	r3, #0
 8015452:	e082      	b.n	801555a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015456:	2b00      	cmp	r3, #0
 8015458:	d106      	bne.n	8015468 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801545a:	f107 030c 	add.w	r3, r7, #12
 801545e:	4618      	mov	r0, r3
 8015460:	f000 fe7a 	bl	8016158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015464:	2301      	movs	r3, #1
 8015466:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015468:	f001 fb46 	bl	8016af8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801546c:	f000 fc0c 	bl	8015c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015470:	f001 fb14 	bl	8016a9c <vPortEnterCritical>
 8015474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801547a:	b25b      	sxtb	r3, r3
 801547c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015480:	d103      	bne.n	801548a <xQueueSemaphoreTake+0x132>
 8015482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015484:	2200      	movs	r2, #0
 8015486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801548c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015490:	b25b      	sxtb	r3, r3
 8015492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015496:	d103      	bne.n	80154a0 <xQueueSemaphoreTake+0x148>
 8015498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801549a:	2200      	movs	r2, #0
 801549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80154a0:	f001 fb2a 	bl	8016af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80154a4:	463a      	mov	r2, r7
 80154a6:	f107 030c 	add.w	r3, r7, #12
 80154aa:	4611      	mov	r1, r2
 80154ac:	4618      	mov	r0, r3
 80154ae:	f000 fe69 	bl	8016184 <xTaskCheckForTimeOut>
 80154b2:	4603      	mov	r3, r0
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d132      	bne.n	801551e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80154b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80154ba:	f000 f9e9 	bl	8015890 <prvIsQueueEmpty>
 80154be:	4603      	mov	r3, r0
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d026      	beq.n	8015512 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80154c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d109      	bne.n	80154e0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80154cc:	f001 fae6 	bl	8016a9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80154d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154d2:	685b      	ldr	r3, [r3, #4]
 80154d4:	4618      	mov	r0, r3
 80154d6:	f000 ff99 	bl	801640c <xTaskPriorityInherit>
 80154da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80154dc:	f001 fb0c 	bl	8016af8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80154e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154e2:	3324      	adds	r3, #36	; 0x24
 80154e4:	683a      	ldr	r2, [r7, #0]
 80154e6:	4611      	mov	r1, r2
 80154e8:	4618      	mov	r0, r3
 80154ea:	f000 fdaf 	bl	801604c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80154ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80154f0:	f000 f97c 	bl	80157ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80154f4:	f000 fbd6 	bl	8015ca4 <xTaskResumeAll>
 80154f8:	4603      	mov	r3, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	f47f af69 	bne.w	80153d2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8015500:	4b18      	ldr	r3, [pc, #96]	; (8015564 <xQueueSemaphoreTake+0x20c>)
 8015502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015506:	601a      	str	r2, [r3, #0]
 8015508:	f3bf 8f4f 	dsb	sy
 801550c:	f3bf 8f6f 	isb	sy
 8015510:	e75f      	b.n	80153d2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015514:	f000 f96a 	bl	80157ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015518:	f000 fbc4 	bl	8015ca4 <xTaskResumeAll>
 801551c:	e759      	b.n	80153d2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801551e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015520:	f000 f964 	bl	80157ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015524:	f000 fbbe 	bl	8015ca4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801552a:	f000 f9b1 	bl	8015890 <prvIsQueueEmpty>
 801552e:	4603      	mov	r3, r0
 8015530:	2b00      	cmp	r3, #0
 8015532:	f43f af4e 	beq.w	80153d2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015538:	2b00      	cmp	r3, #0
 801553a:	d00d      	beq.n	8015558 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 801553c:	f001 faae 	bl	8016a9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015542:	f000 f8ab 	bl	801569c <prvGetDisinheritPriorityAfterTimeout>
 8015546:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8015548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801554e:	4618      	mov	r0, r3
 8015550:	f001 f866 	bl	8016620 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015554:	f001 fad0 	bl	8016af8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015558:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801555a:	4618      	mov	r0, r3
 801555c:	3738      	adds	r7, #56	; 0x38
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}
 8015562:	bf00      	nop
 8015564:	e000ed04 	.word	0xe000ed04

08015568 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b08e      	sub	sp, #56	; 0x38
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557a:	2b00      	cmp	r3, #0
 801557c:	d109      	bne.n	8015592 <xQueueReceiveFromISR+0x2a>
 801557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015582:	f383 8811 	msr	BASEPRI, r3
 8015586:	f3bf 8f6f 	isb	sy
 801558a:	f3bf 8f4f 	dsb	sy
 801558e:	623b      	str	r3, [r7, #32]
 8015590:	e7fe      	b.n	8015590 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d103      	bne.n	80155a0 <xQueueReceiveFromISR+0x38>
 8015598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801559c:	2b00      	cmp	r3, #0
 801559e:	d101      	bne.n	80155a4 <xQueueReceiveFromISR+0x3c>
 80155a0:	2301      	movs	r3, #1
 80155a2:	e000      	b.n	80155a6 <xQueueReceiveFromISR+0x3e>
 80155a4:	2300      	movs	r3, #0
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d109      	bne.n	80155be <xQueueReceiveFromISR+0x56>
 80155aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ae:	f383 8811 	msr	BASEPRI, r3
 80155b2:	f3bf 8f6f 	isb	sy
 80155b6:	f3bf 8f4f 	dsb	sy
 80155ba:	61fb      	str	r3, [r7, #28]
 80155bc:	e7fe      	b.n	80155bc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80155be:	f001 fb49 	bl	8016c54 <vPortValidateInterruptPriority>
	__asm volatile
 80155c2:	f3ef 8211 	mrs	r2, BASEPRI
 80155c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ca:	f383 8811 	msr	BASEPRI, r3
 80155ce:	f3bf 8f6f 	isb	sy
 80155d2:	f3bf 8f4f 	dsb	sy
 80155d6:	61ba      	str	r2, [r7, #24]
 80155d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80155da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80155dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80155de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80155e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d02f      	beq.n	801564a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80155ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80155f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80155f4:	68b9      	ldr	r1, [r7, #8]
 80155f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155f8:	f000 f8d2 	bl	80157a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80155fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155fe:	1e5a      	subs	r2, r3, #1
 8015600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015602:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801560c:	d112      	bne.n	8015634 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015610:	691b      	ldr	r3, [r3, #16]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d016      	beq.n	8015644 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015618:	3310      	adds	r3, #16
 801561a:	4618      	mov	r0, r3
 801561c:	f000 fd3a 	bl	8016094 <xTaskRemoveFromEventList>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d00e      	beq.n	8015644 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d00b      	beq.n	8015644 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2201      	movs	r2, #1
 8015630:	601a      	str	r2, [r3, #0]
 8015632:	e007      	b.n	8015644 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015638:	3301      	adds	r3, #1
 801563a:	b2db      	uxtb	r3, r3
 801563c:	b25a      	sxtb	r2, r3
 801563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015644:	2301      	movs	r3, #1
 8015646:	637b      	str	r3, [r7, #52]	; 0x34
 8015648:	e001      	b.n	801564e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801564a:	2300      	movs	r3, #0
 801564c:	637b      	str	r3, [r7, #52]	; 0x34
 801564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015650:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801565a:	4618      	mov	r0, r3
 801565c:	3738      	adds	r7, #56	; 0x38
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}

08015662 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b084      	sub	sp, #16
 8015666:	af00      	add	r7, sp, #0
 8015668:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d109      	bne.n	8015688 <vQueueDelete+0x26>
	__asm volatile
 8015674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015678:	f383 8811 	msr	BASEPRI, r3
 801567c:	f3bf 8f6f 	isb	sy
 8015680:	f3bf 8f4f 	dsb	sy
 8015684:	60bb      	str	r3, [r7, #8]
 8015686:	e7fe      	b.n	8015686 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015688:	68f8      	ldr	r0, [r7, #12]
 801568a:	f000 f92f 	bl	80158ec <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 801568e:	68f8      	ldr	r0, [r7, #12]
 8015690:	f001 fbe0 	bl	8016e54 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015694:	bf00      	nop
 8015696:	3710      	adds	r7, #16
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}

0801569c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801569c:	b480      	push	{r7}
 801569e:	b085      	sub	sp, #20
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d006      	beq.n	80156ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	f1c3 0307 	rsb	r3, r3, #7
 80156b6:	60fb      	str	r3, [r7, #12]
 80156b8:	e001      	b.n	80156be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80156ba:	2300      	movs	r3, #0
 80156bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80156be:	68fb      	ldr	r3, [r7, #12]
	}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3714      	adds	r7, #20
 80156c4:	46bd      	mov	sp, r7
 80156c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ca:	4770      	bx	lr

080156cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b086      	sub	sp, #24
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	60f8      	str	r0, [r7, #12]
 80156d4:	60b9      	str	r1, [r7, #8]
 80156d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80156d8:	2300      	movs	r3, #0
 80156da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d10d      	bne.n	8015706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d14d      	bne.n	801578e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	685b      	ldr	r3, [r3, #4]
 80156f6:	4618      	mov	r0, r3
 80156f8:	f000 ff0e 	bl	8016518 <xTaskPriorityDisinherit>
 80156fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	2200      	movs	r2, #0
 8015702:	605a      	str	r2, [r3, #4]
 8015704:	e043      	b.n	801578e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d119      	bne.n	8015740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	6898      	ldr	r0, [r3, #8]
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015714:	461a      	mov	r2, r3
 8015716:	68b9      	ldr	r1, [r7, #8]
 8015718:	f002 fdb6 	bl	8018288 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	689a      	ldr	r2, [r3, #8]
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015724:	441a      	add	r2, r3
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	689a      	ldr	r2, [r3, #8]
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	685b      	ldr	r3, [r3, #4]
 8015732:	429a      	cmp	r2, r3
 8015734:	d32b      	bcc.n	801578e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	609a      	str	r2, [r3, #8]
 801573e:	e026      	b.n	801578e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	68d8      	ldr	r0, [r3, #12]
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015748:	461a      	mov	r2, r3
 801574a:	68b9      	ldr	r1, [r7, #8]
 801574c:	f002 fd9c 	bl	8018288 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	68da      	ldr	r2, [r3, #12]
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015758:	425b      	negs	r3, r3
 801575a:	441a      	add	r2, r3
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	68da      	ldr	r2, [r3, #12]
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	429a      	cmp	r2, r3
 801576a:	d207      	bcs.n	801577c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	685a      	ldr	r2, [r3, #4]
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015774:	425b      	negs	r3, r3
 8015776:	441a      	add	r2, r3
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b02      	cmp	r3, #2
 8015780:	d105      	bne.n	801578e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015782:	693b      	ldr	r3, [r7, #16]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d002      	beq.n	801578e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	3b01      	subs	r3, #1
 801578c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801578e:	693b      	ldr	r3, [r7, #16]
 8015790:	1c5a      	adds	r2, r3, #1
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015796:	697b      	ldr	r3, [r7, #20]
}
 8015798:	4618      	mov	r0, r3
 801579a:	3718      	adds	r7, #24
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
 80157a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d018      	beq.n	80157e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	68da      	ldr	r2, [r3, #12]
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157ba:	441a      	add	r2, r3
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	68da      	ldr	r2, [r3, #12]
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	685b      	ldr	r3, [r3, #4]
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d303      	bcc.n	80157d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681a      	ldr	r2, [r3, #0]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	68d9      	ldr	r1, [r3, #12]
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157dc:	461a      	mov	r2, r3
 80157de:	6838      	ldr	r0, [r7, #0]
 80157e0:	f002 fd52 	bl	8018288 <memcpy>
	}
}
 80157e4:	bf00      	nop
 80157e6:	3708      	adds	r7, #8
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80157f4:	f001 f952 	bl	8016a9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80157fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015800:	e011      	b.n	8015826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015806:	2b00      	cmp	r3, #0
 8015808:	d012      	beq.n	8015830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	3324      	adds	r3, #36	; 0x24
 801580e:	4618      	mov	r0, r3
 8015810:	f000 fc40 	bl	8016094 <xTaskRemoveFromEventList>
 8015814:	4603      	mov	r3, r0
 8015816:	2b00      	cmp	r3, #0
 8015818:	d001      	beq.n	801581e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801581a:	f000 fd13 	bl	8016244 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801581e:	7bfb      	ldrb	r3, [r7, #15]
 8015820:	3b01      	subs	r3, #1
 8015822:	b2db      	uxtb	r3, r3
 8015824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801582a:	2b00      	cmp	r3, #0
 801582c:	dce9      	bgt.n	8015802 <prvUnlockQueue+0x16>
 801582e:	e000      	b.n	8015832 <prvUnlockQueue+0x46>
					break;
 8015830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	22ff      	movs	r2, #255	; 0xff
 8015836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801583a:	f001 f95d 	bl	8016af8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801583e:	f001 f92d 	bl	8016a9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801584a:	e011      	b.n	8015870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	691b      	ldr	r3, [r3, #16]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d012      	beq.n	801587a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	3310      	adds	r3, #16
 8015858:	4618      	mov	r0, r3
 801585a:	f000 fc1b 	bl	8016094 <xTaskRemoveFromEventList>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	d001      	beq.n	8015868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015864:	f000 fcee 	bl	8016244 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015868:	7bbb      	ldrb	r3, [r7, #14]
 801586a:	3b01      	subs	r3, #1
 801586c:	b2db      	uxtb	r3, r3
 801586e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015874:	2b00      	cmp	r3, #0
 8015876:	dce9      	bgt.n	801584c <prvUnlockQueue+0x60>
 8015878:	e000      	b.n	801587c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801587a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	22ff      	movs	r2, #255	; 0xff
 8015880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015884:	f001 f938 	bl	8016af8 <vPortExitCritical>
}
 8015888:	bf00      	nop
 801588a:	3710      	adds	r7, #16
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}

08015890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015898:	f001 f900 	bl	8016a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d102      	bne.n	80158aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80158a4:	2301      	movs	r3, #1
 80158a6:	60fb      	str	r3, [r7, #12]
 80158a8:	e001      	b.n	80158ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80158aa:	2300      	movs	r3, #0
 80158ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80158ae:	f001 f923 	bl	8016af8 <vPortExitCritical>

	return xReturn;
 80158b2:	68fb      	ldr	r3, [r7, #12]
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	3710      	adds	r7, #16
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}

080158bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b084      	sub	sp, #16
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80158c4:	f001 f8ea 	bl	8016a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d102      	bne.n	80158da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80158d4:	2301      	movs	r3, #1
 80158d6:	60fb      	str	r3, [r7, #12]
 80158d8:	e001      	b.n	80158de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80158da:	2300      	movs	r3, #0
 80158dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80158de:	f001 f90b 	bl	8016af8 <vPortExitCritical>

	return xReturn;
 80158e2:	68fb      	ldr	r3, [r7, #12]
}
 80158e4:	4618      	mov	r0, r3
 80158e6:	3710      	adds	r7, #16
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80158ec:	b480      	push	{r7}
 80158ee:	b085      	sub	sp, #20
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80158f4:	2300      	movs	r3, #0
 80158f6:	60fb      	str	r3, [r7, #12]
 80158f8:	e016      	b.n	8015928 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80158fa:	4a10      	ldr	r2, [pc, #64]	; (801593c <vQueueUnregisterQueue+0x50>)
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	00db      	lsls	r3, r3, #3
 8015900:	4413      	add	r3, r2
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	429a      	cmp	r2, r3
 8015908:	d10b      	bne.n	8015922 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801590a:	4a0c      	ldr	r2, [pc, #48]	; (801593c <vQueueUnregisterQueue+0x50>)
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	2100      	movs	r1, #0
 8015910:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015914:	4a09      	ldr	r2, [pc, #36]	; (801593c <vQueueUnregisterQueue+0x50>)
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	00db      	lsls	r3, r3, #3
 801591a:	4413      	add	r3, r2
 801591c:	2200      	movs	r2, #0
 801591e:	605a      	str	r2, [r3, #4]
				break;
 8015920:	e005      	b.n	801592e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	3301      	adds	r3, #1
 8015926:	60fb      	str	r3, [r7, #12]
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	2b07      	cmp	r3, #7
 801592c:	d9e5      	bls.n	80158fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801592e:	bf00      	nop
 8015930:	3714      	adds	r7, #20
 8015932:	46bd      	mov	sp, r7
 8015934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015938:	4770      	bx	lr
 801593a:	bf00      	nop
 801593c:	2000386c 	.word	0x2000386c

08015940 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015940:	b580      	push	{r7, lr}
 8015942:	b08c      	sub	sp, #48	; 0x30
 8015944:	af04      	add	r7, sp, #16
 8015946:	60f8      	str	r0, [r7, #12]
 8015948:	60b9      	str	r1, [r7, #8]
 801594a:	603b      	str	r3, [r7, #0]
 801594c:	4613      	mov	r3, r2
 801594e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015950:	88fb      	ldrh	r3, [r7, #6]
 8015952:	009b      	lsls	r3, r3, #2
 8015954:	4618      	mov	r0, r3
 8015956:	f001 f9bb 	bl	8016cd0 <pvPortMalloc>
 801595a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00e      	beq.n	8015980 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8015962:	2054      	movs	r0, #84	; 0x54
 8015964:	f001 f9b4 	bl	8016cd0 <pvPortMalloc>
 8015968:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801596a:	69fb      	ldr	r3, [r7, #28]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d003      	beq.n	8015978 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	697a      	ldr	r2, [r7, #20]
 8015974:	631a      	str	r2, [r3, #48]	; 0x30
 8015976:	e005      	b.n	8015984 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015978:	6978      	ldr	r0, [r7, #20]
 801597a:	f001 fa6b 	bl	8016e54 <vPortFree>
 801597e:	e001      	b.n	8015984 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015980:	2300      	movs	r3, #0
 8015982:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d013      	beq.n	80159b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801598a:	88fa      	ldrh	r2, [r7, #6]
 801598c:	2300      	movs	r3, #0
 801598e:	9303      	str	r3, [sp, #12]
 8015990:	69fb      	ldr	r3, [r7, #28]
 8015992:	9302      	str	r3, [sp, #8]
 8015994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015996:	9301      	str	r3, [sp, #4]
 8015998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599a:	9300      	str	r3, [sp, #0]
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	68b9      	ldr	r1, [r7, #8]
 80159a0:	68f8      	ldr	r0, [r7, #12]
 80159a2:	f000 f80e 	bl	80159c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80159a6:	69f8      	ldr	r0, [r7, #28]
 80159a8:	f000 f88a 	bl	8015ac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80159ac:	2301      	movs	r3, #1
 80159ae:	61bb      	str	r3, [r7, #24]
 80159b0:	e002      	b.n	80159b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80159b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80159b8:	69bb      	ldr	r3, [r7, #24]
	}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3720      	adds	r7, #32
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}

080159c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80159c2:	b580      	push	{r7, lr}
 80159c4:	b088      	sub	sp, #32
 80159c6:	af00      	add	r7, sp, #0
 80159c8:	60f8      	str	r0, [r7, #12]
 80159ca:	60b9      	str	r1, [r7, #8]
 80159cc:	607a      	str	r2, [r7, #4]
 80159ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80159d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80159da:	3b01      	subs	r3, #1
 80159dc:	009b      	lsls	r3, r3, #2
 80159de:	4413      	add	r3, r2
 80159e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80159e2:	69bb      	ldr	r3, [r7, #24]
 80159e4:	f023 0307 	bic.w	r3, r3, #7
 80159e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80159ea:	69bb      	ldr	r3, [r7, #24]
 80159ec:	f003 0307 	and.w	r3, r3, #7
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d009      	beq.n	8015a08 <prvInitialiseNewTask+0x46>
 80159f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159f8:	f383 8811 	msr	BASEPRI, r3
 80159fc:	f3bf 8f6f 	isb	sy
 8015a00:	f3bf 8f4f 	dsb	sy
 8015a04:	617b      	str	r3, [r7, #20]
 8015a06:	e7fe      	b.n	8015a06 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015a08:	2300      	movs	r3, #0
 8015a0a:	61fb      	str	r3, [r7, #28]
 8015a0c:	e012      	b.n	8015a34 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015a0e:	68ba      	ldr	r2, [r7, #8]
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	4413      	add	r3, r2
 8015a14:	7819      	ldrb	r1, [r3, #0]
 8015a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a18:	69fb      	ldr	r3, [r7, #28]
 8015a1a:	4413      	add	r3, r2
 8015a1c:	3334      	adds	r3, #52	; 0x34
 8015a1e:	460a      	mov	r2, r1
 8015a20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8015a22:	68ba      	ldr	r2, [r7, #8]
 8015a24:	69fb      	ldr	r3, [r7, #28]
 8015a26:	4413      	add	r3, r2
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d006      	beq.n	8015a3c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	3301      	adds	r3, #1
 8015a32:	61fb      	str	r3, [r7, #28]
 8015a34:	69fb      	ldr	r3, [r7, #28]
 8015a36:	2b0f      	cmp	r3, #15
 8015a38:	d9e9      	bls.n	8015a0e <prvInitialiseNewTask+0x4c>
 8015a3a:	e000      	b.n	8015a3e <prvInitialiseNewTask+0x7c>
		{
			break;
 8015a3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a40:	2200      	movs	r2, #0
 8015a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a48:	2b06      	cmp	r3, #6
 8015a4a:	d901      	bls.n	8015a50 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015a4c:	2306      	movs	r3, #6
 8015a4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a5e:	2200      	movs	r2, #0
 8015a60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a64:	3304      	adds	r3, #4
 8015a66:	4618      	mov	r0, r3
 8015a68:	f7fe fffb 	bl	8014a62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a6e:	3318      	adds	r3, #24
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7fe fff6 	bl	8014a62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a7e:	f1c3 0207 	rsb	r2, r3, #7
 8015a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a8e:	2200      	movs	r2, #0
 8015a90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a94:	2200      	movs	r2, #0
 8015a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015a9a:	683a      	ldr	r2, [r7, #0]
 8015a9c:	68f9      	ldr	r1, [r7, #12]
 8015a9e:	69b8      	ldr	r0, [r7, #24]
 8015aa0:	f000 fed6 	bl	8016850 <pxPortInitialiseStack>
 8015aa4:	4602      	mov	r2, r0
 8015aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aa8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8015aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d002      	beq.n	8015ab6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015ab6:	bf00      	nop
 8015ab8:	3720      	adds	r7, #32
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
	...

08015ac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015ac8:	f000 ffe8 	bl	8016a9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015acc:	4b2a      	ldr	r3, [pc, #168]	; (8015b78 <prvAddNewTaskToReadyList+0xb8>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	4a29      	ldr	r2, [pc, #164]	; (8015b78 <prvAddNewTaskToReadyList+0xb8>)
 8015ad4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015ad6:	4b29      	ldr	r3, [pc, #164]	; (8015b7c <prvAddNewTaskToReadyList+0xbc>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d109      	bne.n	8015af2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015ade:	4a27      	ldr	r2, [pc, #156]	; (8015b7c <prvAddNewTaskToReadyList+0xbc>)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015ae4:	4b24      	ldr	r3, [pc, #144]	; (8015b78 <prvAddNewTaskToReadyList+0xb8>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	2b01      	cmp	r3, #1
 8015aea:	d110      	bne.n	8015b0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015aec:	f000 fbce 	bl	801628c <prvInitialiseTaskLists>
 8015af0:	e00d      	b.n	8015b0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015af2:	4b23      	ldr	r3, [pc, #140]	; (8015b80 <prvAddNewTaskToReadyList+0xc0>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d109      	bne.n	8015b0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015afa:	4b20      	ldr	r3, [pc, #128]	; (8015b7c <prvAddNewTaskToReadyList+0xbc>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d802      	bhi.n	8015b0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015b08:	4a1c      	ldr	r2, [pc, #112]	; (8015b7c <prvAddNewTaskToReadyList+0xbc>)
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015b0e:	4b1d      	ldr	r3, [pc, #116]	; (8015b84 <prvAddNewTaskToReadyList+0xc4>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	3301      	adds	r3, #1
 8015b14:	4a1b      	ldr	r2, [pc, #108]	; (8015b84 <prvAddNewTaskToReadyList+0xc4>)
 8015b16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b1c:	2201      	movs	r2, #1
 8015b1e:	409a      	lsls	r2, r3
 8015b20:	4b19      	ldr	r3, [pc, #100]	; (8015b88 <prvAddNewTaskToReadyList+0xc8>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	4313      	orrs	r3, r2
 8015b26:	4a18      	ldr	r2, [pc, #96]	; (8015b88 <prvAddNewTaskToReadyList+0xc8>)
 8015b28:	6013      	str	r3, [r2, #0]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b2e:	4613      	mov	r3, r2
 8015b30:	009b      	lsls	r3, r3, #2
 8015b32:	4413      	add	r3, r2
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	4a15      	ldr	r2, [pc, #84]	; (8015b8c <prvAddNewTaskToReadyList+0xcc>)
 8015b38:	441a      	add	r2, r3
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	3304      	adds	r3, #4
 8015b3e:	4619      	mov	r1, r3
 8015b40:	4610      	mov	r0, r2
 8015b42:	f7fe ff9b 	bl	8014a7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015b46:	f000 ffd7 	bl	8016af8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015b4a:	4b0d      	ldr	r3, [pc, #52]	; (8015b80 <prvAddNewTaskToReadyList+0xc0>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d00e      	beq.n	8015b70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015b52:	4b0a      	ldr	r3, [pc, #40]	; (8015b7c <prvAddNewTaskToReadyList+0xbc>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d207      	bcs.n	8015b70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015b60:	4b0b      	ldr	r3, [pc, #44]	; (8015b90 <prvAddNewTaskToReadyList+0xd0>)
 8015b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b66:	601a      	str	r2, [r3, #0]
 8015b68:	f3bf 8f4f 	dsb	sy
 8015b6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b70:	bf00      	nop
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}
 8015b78:	20000244 	.word	0x20000244
 8015b7c:	20000144 	.word	0x20000144
 8015b80:	20000250 	.word	0x20000250
 8015b84:	20000260 	.word	0x20000260
 8015b88:	2000024c 	.word	0x2000024c
 8015b8c:	20000148 	.word	0x20000148
 8015b90:	e000ed04 	.word	0xe000ed04

08015b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b084      	sub	sp, #16
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d016      	beq.n	8015bd4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015ba6:	4b13      	ldr	r3, [pc, #76]	; (8015bf4 <vTaskDelay+0x60>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d009      	beq.n	8015bc2 <vTaskDelay+0x2e>
 8015bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb2:	f383 8811 	msr	BASEPRI, r3
 8015bb6:	f3bf 8f6f 	isb	sy
 8015bba:	f3bf 8f4f 	dsb	sy
 8015bbe:	60bb      	str	r3, [r7, #8]
 8015bc0:	e7fe      	b.n	8015bc0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8015bc2:	f000 f861 	bl	8015c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015bc6:	2100      	movs	r1, #0
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f000 fddb 	bl	8016784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015bce:	f000 f869 	bl	8015ca4 <xTaskResumeAll>
 8015bd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d107      	bne.n	8015bea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8015bda:	4b07      	ldr	r3, [pc, #28]	; (8015bf8 <vTaskDelay+0x64>)
 8015bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015be0:	601a      	str	r2, [r3, #0]
 8015be2:	f3bf 8f4f 	dsb	sy
 8015be6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015bea:	bf00      	nop
 8015bec:	3710      	adds	r7, #16
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	2000026c 	.word	0x2000026c
 8015bf8:	e000ed04 	.word	0xe000ed04

08015bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b086      	sub	sp, #24
 8015c00:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8015c02:	4b1b      	ldr	r3, [pc, #108]	; (8015c70 <vTaskStartScheduler+0x74>)
 8015c04:	9301      	str	r3, [sp, #4]
 8015c06:	2300      	movs	r3, #0
 8015c08:	9300      	str	r3, [sp, #0]
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	2280      	movs	r2, #128	; 0x80
 8015c0e:	4919      	ldr	r1, [pc, #100]	; (8015c74 <vTaskStartScheduler+0x78>)
 8015c10:	4819      	ldr	r0, [pc, #100]	; (8015c78 <vTaskStartScheduler+0x7c>)
 8015c12:	f7ff fe95 	bl	8015940 <xTaskCreate>
 8015c16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	2b01      	cmp	r3, #1
 8015c1c:	d115      	bne.n	8015c4a <vTaskStartScheduler+0x4e>
 8015c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c22:	f383 8811 	msr	BASEPRI, r3
 8015c26:	f3bf 8f6f 	isb	sy
 8015c2a:	f3bf 8f4f 	dsb	sy
 8015c2e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015c30:	4b12      	ldr	r3, [pc, #72]	; (8015c7c <vTaskStartScheduler+0x80>)
 8015c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015c38:	4b11      	ldr	r3, [pc, #68]	; (8015c80 <vTaskStartScheduler+0x84>)
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8015c3e:	4b11      	ldr	r3, [pc, #68]	; (8015c84 <vTaskStartScheduler+0x88>)
 8015c40:	2200      	movs	r2, #0
 8015c42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015c44:	f000 fe8c 	bl	8016960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015c48:	e00d      	b.n	8015c66 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c50:	d109      	bne.n	8015c66 <vTaskStartScheduler+0x6a>
 8015c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c56:	f383 8811 	msr	BASEPRI, r3
 8015c5a:	f3bf 8f6f 	isb	sy
 8015c5e:	f3bf 8f4f 	dsb	sy
 8015c62:	607b      	str	r3, [r7, #4]
 8015c64:	e7fe      	b.n	8015c64 <vTaskStartScheduler+0x68>
}
 8015c66:	bf00      	nop
 8015c68:	3710      	adds	r7, #16
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	20000268 	.word	0x20000268
 8015c74:	0801a484 	.word	0x0801a484
 8015c78:	0801625d 	.word	0x0801625d
 8015c7c:	20000264 	.word	0x20000264
 8015c80:	20000250 	.word	0x20000250
 8015c84:	20000248 	.word	0x20000248

08015c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015c88:	b480      	push	{r7}
 8015c8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015c8c:	4b04      	ldr	r3, [pc, #16]	; (8015ca0 <vTaskSuspendAll+0x18>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	3301      	adds	r3, #1
 8015c92:	4a03      	ldr	r2, [pc, #12]	; (8015ca0 <vTaskSuspendAll+0x18>)
 8015c94:	6013      	str	r3, [r2, #0]
}
 8015c96:	bf00      	nop
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9e:	4770      	bx	lr
 8015ca0:	2000026c 	.word	0x2000026c

08015ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015caa:	2300      	movs	r3, #0
 8015cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015cb2:	4b41      	ldr	r3, [pc, #260]	; (8015db8 <xTaskResumeAll+0x114>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d109      	bne.n	8015cce <xTaskResumeAll+0x2a>
 8015cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cbe:	f383 8811 	msr	BASEPRI, r3
 8015cc2:	f3bf 8f6f 	isb	sy
 8015cc6:	f3bf 8f4f 	dsb	sy
 8015cca:	603b      	str	r3, [r7, #0]
 8015ccc:	e7fe      	b.n	8015ccc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015cce:	f000 fee5 	bl	8016a9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015cd2:	4b39      	ldr	r3, [pc, #228]	; (8015db8 <xTaskResumeAll+0x114>)
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	3b01      	subs	r3, #1
 8015cd8:	4a37      	ldr	r2, [pc, #220]	; (8015db8 <xTaskResumeAll+0x114>)
 8015cda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015cdc:	4b36      	ldr	r3, [pc, #216]	; (8015db8 <xTaskResumeAll+0x114>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d161      	bne.n	8015da8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015ce4:	4b35      	ldr	r3, [pc, #212]	; (8015dbc <xTaskResumeAll+0x118>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d05d      	beq.n	8015da8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015cec:	e02e      	b.n	8015d4c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8015cee:	4b34      	ldr	r3, [pc, #208]	; (8015dc0 <xTaskResumeAll+0x11c>)
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	68db      	ldr	r3, [r3, #12]
 8015cf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	3318      	adds	r3, #24
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7fe ff1b 	bl	8014b36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	3304      	adds	r3, #4
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7fe ff16 	bl	8014b36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d0e:	2201      	movs	r2, #1
 8015d10:	409a      	lsls	r2, r3
 8015d12:	4b2c      	ldr	r3, [pc, #176]	; (8015dc4 <xTaskResumeAll+0x120>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	4313      	orrs	r3, r2
 8015d18:	4a2a      	ldr	r2, [pc, #168]	; (8015dc4 <xTaskResumeAll+0x120>)
 8015d1a:	6013      	str	r3, [r2, #0]
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d20:	4613      	mov	r3, r2
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	4413      	add	r3, r2
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	4a27      	ldr	r2, [pc, #156]	; (8015dc8 <xTaskResumeAll+0x124>)
 8015d2a:	441a      	add	r2, r3
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	3304      	adds	r3, #4
 8015d30:	4619      	mov	r1, r3
 8015d32:	4610      	mov	r0, r2
 8015d34:	f7fe fea2 	bl	8014a7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d3c:	4b23      	ldr	r3, [pc, #140]	; (8015dcc <xTaskResumeAll+0x128>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d42:	429a      	cmp	r2, r3
 8015d44:	d302      	bcc.n	8015d4c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8015d46:	4b22      	ldr	r3, [pc, #136]	; (8015dd0 <xTaskResumeAll+0x12c>)
 8015d48:	2201      	movs	r2, #1
 8015d4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015d4c:	4b1c      	ldr	r3, [pc, #112]	; (8015dc0 <xTaskResumeAll+0x11c>)
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d1cc      	bne.n	8015cee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d001      	beq.n	8015d5e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015d5a:	f000 fb13 	bl	8016384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015d5e:	4b1d      	ldr	r3, [pc, #116]	; (8015dd4 <xTaskResumeAll+0x130>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d010      	beq.n	8015d8c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015d6a:	f000 f859 	bl	8015e20 <xTaskIncrementTick>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d002      	beq.n	8015d7a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8015d74:	4b16      	ldr	r3, [pc, #88]	; (8015dd0 <xTaskResumeAll+0x12c>)
 8015d76:	2201      	movs	r2, #1
 8015d78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	3b01      	subs	r3, #1
 8015d7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d1f1      	bne.n	8015d6a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8015d86:	4b13      	ldr	r3, [pc, #76]	; (8015dd4 <xTaskResumeAll+0x130>)
 8015d88:	2200      	movs	r2, #0
 8015d8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015d8c:	4b10      	ldr	r3, [pc, #64]	; (8015dd0 <xTaskResumeAll+0x12c>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d009      	beq.n	8015da8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015d94:	2301      	movs	r3, #1
 8015d96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015d98:	4b0f      	ldr	r3, [pc, #60]	; (8015dd8 <xTaskResumeAll+0x134>)
 8015d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d9e:	601a      	str	r2, [r3, #0]
 8015da0:	f3bf 8f4f 	dsb	sy
 8015da4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015da8:	f000 fea6 	bl	8016af8 <vPortExitCritical>

	return xAlreadyYielded;
 8015dac:	68bb      	ldr	r3, [r7, #8]
}
 8015dae:	4618      	mov	r0, r3
 8015db0:	3710      	adds	r7, #16
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}
 8015db6:	bf00      	nop
 8015db8:	2000026c 	.word	0x2000026c
 8015dbc:	20000244 	.word	0x20000244
 8015dc0:	20000204 	.word	0x20000204
 8015dc4:	2000024c 	.word	0x2000024c
 8015dc8:	20000148 	.word	0x20000148
 8015dcc:	20000144 	.word	0x20000144
 8015dd0:	20000258 	.word	0x20000258
 8015dd4:	20000254 	.word	0x20000254
 8015dd8:	e000ed04 	.word	0xe000ed04

08015ddc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015ddc:	b480      	push	{r7}
 8015dde:	b083      	sub	sp, #12
 8015de0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015de2:	4b05      	ldr	r3, [pc, #20]	; (8015df8 <xTaskGetTickCount+0x1c>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015de8:	687b      	ldr	r3, [r7, #4]
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	370c      	adds	r7, #12
 8015dee:	46bd      	mov	sp, r7
 8015df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df4:	4770      	bx	lr
 8015df6:	bf00      	nop
 8015df8:	20000248 	.word	0x20000248

08015dfc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b082      	sub	sp, #8
 8015e00:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e02:	f000 ff27 	bl	8016c54 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015e06:	2300      	movs	r3, #0
 8015e08:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015e0a:	4b04      	ldr	r3, [pc, #16]	; (8015e1c <xTaskGetTickCountFromISR+0x20>)
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015e10:	683b      	ldr	r3, [r7, #0]
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3708      	adds	r7, #8
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop
 8015e1c:	20000248 	.word	0x20000248

08015e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015e26:	2300      	movs	r3, #0
 8015e28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e2a:	4b50      	ldr	r3, [pc, #320]	; (8015f6c <xTaskIncrementTick+0x14c>)
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	f040 808c 	bne.w	8015f4c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015e34:	4b4e      	ldr	r3, [pc, #312]	; (8015f70 <xTaskIncrementTick+0x150>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	3301      	adds	r3, #1
 8015e3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015e3c:	4a4c      	ldr	r2, [pc, #304]	; (8015f70 <xTaskIncrementTick+0x150>)
 8015e3e:	693b      	ldr	r3, [r7, #16]
 8015e40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d11f      	bne.n	8015e88 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8015e48:	4b4a      	ldr	r3, [pc, #296]	; (8015f74 <xTaskIncrementTick+0x154>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d009      	beq.n	8015e66 <xTaskIncrementTick+0x46>
 8015e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e56:	f383 8811 	msr	BASEPRI, r3
 8015e5a:	f3bf 8f6f 	isb	sy
 8015e5e:	f3bf 8f4f 	dsb	sy
 8015e62:	603b      	str	r3, [r7, #0]
 8015e64:	e7fe      	b.n	8015e64 <xTaskIncrementTick+0x44>
 8015e66:	4b43      	ldr	r3, [pc, #268]	; (8015f74 <xTaskIncrementTick+0x154>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	60fb      	str	r3, [r7, #12]
 8015e6c:	4b42      	ldr	r3, [pc, #264]	; (8015f78 <xTaskIncrementTick+0x158>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	4a40      	ldr	r2, [pc, #256]	; (8015f74 <xTaskIncrementTick+0x154>)
 8015e72:	6013      	str	r3, [r2, #0]
 8015e74:	4a40      	ldr	r2, [pc, #256]	; (8015f78 <xTaskIncrementTick+0x158>)
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	6013      	str	r3, [r2, #0]
 8015e7a:	4b40      	ldr	r3, [pc, #256]	; (8015f7c <xTaskIncrementTick+0x15c>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	3301      	adds	r3, #1
 8015e80:	4a3e      	ldr	r2, [pc, #248]	; (8015f7c <xTaskIncrementTick+0x15c>)
 8015e82:	6013      	str	r3, [r2, #0]
 8015e84:	f000 fa7e 	bl	8016384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015e88:	4b3d      	ldr	r3, [pc, #244]	; (8015f80 <xTaskIncrementTick+0x160>)
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	693a      	ldr	r2, [r7, #16]
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d34d      	bcc.n	8015f2e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015e92:	4b38      	ldr	r3, [pc, #224]	; (8015f74 <xTaskIncrementTick+0x154>)
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d101      	bne.n	8015ea0 <xTaskIncrementTick+0x80>
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	e000      	b.n	8015ea2 <xTaskIncrementTick+0x82>
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d004      	beq.n	8015eb0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ea6:	4b36      	ldr	r3, [pc, #216]	; (8015f80 <xTaskIncrementTick+0x160>)
 8015ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015eac:	601a      	str	r2, [r3, #0]
					break;
 8015eae:	e03e      	b.n	8015f2e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015eb0:	4b30      	ldr	r3, [pc, #192]	; (8015f74 <xTaskIncrementTick+0x154>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	68db      	ldr	r3, [r3, #12]
 8015eb6:	68db      	ldr	r3, [r3, #12]
 8015eb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015ec0:	693a      	ldr	r2, [r7, #16]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d203      	bcs.n	8015ed0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015ec8:	4a2d      	ldr	r2, [pc, #180]	; (8015f80 <xTaskIncrementTick+0x160>)
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	6013      	str	r3, [r2, #0]
						break;
 8015ece:	e02e      	b.n	8015f2e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	3304      	adds	r3, #4
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7fe fe2e 	bl	8014b36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d004      	beq.n	8015eec <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	3318      	adds	r3, #24
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f7fe fe25 	bl	8014b36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015eec:	68bb      	ldr	r3, [r7, #8]
 8015eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ef0:	2201      	movs	r2, #1
 8015ef2:	409a      	lsls	r2, r3
 8015ef4:	4b23      	ldr	r3, [pc, #140]	; (8015f84 <xTaskIncrementTick+0x164>)
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	4313      	orrs	r3, r2
 8015efa:	4a22      	ldr	r2, [pc, #136]	; (8015f84 <xTaskIncrementTick+0x164>)
 8015efc:	6013      	str	r3, [r2, #0]
 8015efe:	68bb      	ldr	r3, [r7, #8]
 8015f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f02:	4613      	mov	r3, r2
 8015f04:	009b      	lsls	r3, r3, #2
 8015f06:	4413      	add	r3, r2
 8015f08:	009b      	lsls	r3, r3, #2
 8015f0a:	4a1f      	ldr	r2, [pc, #124]	; (8015f88 <xTaskIncrementTick+0x168>)
 8015f0c:	441a      	add	r2, r3
 8015f0e:	68bb      	ldr	r3, [r7, #8]
 8015f10:	3304      	adds	r3, #4
 8015f12:	4619      	mov	r1, r3
 8015f14:	4610      	mov	r0, r2
 8015f16:	f7fe fdb1 	bl	8014a7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f1e:	4b1b      	ldr	r3, [pc, #108]	; (8015f8c <xTaskIncrementTick+0x16c>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d3b4      	bcc.n	8015e92 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8015f28:	2301      	movs	r3, #1
 8015f2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f2c:	e7b1      	b.n	8015e92 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015f2e:	4b17      	ldr	r3, [pc, #92]	; (8015f8c <xTaskIncrementTick+0x16c>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f34:	4914      	ldr	r1, [pc, #80]	; (8015f88 <xTaskIncrementTick+0x168>)
 8015f36:	4613      	mov	r3, r2
 8015f38:	009b      	lsls	r3, r3, #2
 8015f3a:	4413      	add	r3, r2
 8015f3c:	009b      	lsls	r3, r3, #2
 8015f3e:	440b      	add	r3, r1
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2b01      	cmp	r3, #1
 8015f44:	d907      	bls.n	8015f56 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8015f46:	2301      	movs	r3, #1
 8015f48:	617b      	str	r3, [r7, #20]
 8015f4a:	e004      	b.n	8015f56 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015f4c:	4b10      	ldr	r3, [pc, #64]	; (8015f90 <xTaskIncrementTick+0x170>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	3301      	adds	r3, #1
 8015f52:	4a0f      	ldr	r2, [pc, #60]	; (8015f90 <xTaskIncrementTick+0x170>)
 8015f54:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015f56:	4b0f      	ldr	r3, [pc, #60]	; (8015f94 <xTaskIncrementTick+0x174>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d001      	beq.n	8015f62 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8015f5e:	2301      	movs	r3, #1
 8015f60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015f62:	697b      	ldr	r3, [r7, #20]
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	3718      	adds	r7, #24
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}
 8015f6c:	2000026c 	.word	0x2000026c
 8015f70:	20000248 	.word	0x20000248
 8015f74:	200001fc 	.word	0x200001fc
 8015f78:	20000200 	.word	0x20000200
 8015f7c:	2000025c 	.word	0x2000025c
 8015f80:	20000264 	.word	0x20000264
 8015f84:	2000024c 	.word	0x2000024c
 8015f88:	20000148 	.word	0x20000148
 8015f8c:	20000144 	.word	0x20000144
 8015f90:	20000254 	.word	0x20000254
 8015f94:	20000258 	.word	0x20000258

08015f98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b087      	sub	sp, #28
 8015f9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015f9e:	4b26      	ldr	r3, [pc, #152]	; (8016038 <vTaskSwitchContext+0xa0>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d003      	beq.n	8015fae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015fa6:	4b25      	ldr	r3, [pc, #148]	; (801603c <vTaskSwitchContext+0xa4>)
 8015fa8:	2201      	movs	r2, #1
 8015faa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015fac:	e03e      	b.n	801602c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8015fae:	4b23      	ldr	r3, [pc, #140]	; (801603c <vTaskSwitchContext+0xa4>)
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8015fb4:	4b22      	ldr	r3, [pc, #136]	; (8016040 <vTaskSwitchContext+0xa8>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	fab3 f383 	clz	r3, r3
 8015fc0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015fc2:	7afb      	ldrb	r3, [r7, #11]
 8015fc4:	f1c3 031f 	rsb	r3, r3, #31
 8015fc8:	617b      	str	r3, [r7, #20]
 8015fca:	491e      	ldr	r1, [pc, #120]	; (8016044 <vTaskSwitchContext+0xac>)
 8015fcc:	697a      	ldr	r2, [r7, #20]
 8015fce:	4613      	mov	r3, r2
 8015fd0:	009b      	lsls	r3, r3, #2
 8015fd2:	4413      	add	r3, r2
 8015fd4:	009b      	lsls	r3, r3, #2
 8015fd6:	440b      	add	r3, r1
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d109      	bne.n	8015ff2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8015fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe2:	f383 8811 	msr	BASEPRI, r3
 8015fe6:	f3bf 8f6f 	isb	sy
 8015fea:	f3bf 8f4f 	dsb	sy
 8015fee:	607b      	str	r3, [r7, #4]
 8015ff0:	e7fe      	b.n	8015ff0 <vTaskSwitchContext+0x58>
 8015ff2:	697a      	ldr	r2, [r7, #20]
 8015ff4:	4613      	mov	r3, r2
 8015ff6:	009b      	lsls	r3, r3, #2
 8015ff8:	4413      	add	r3, r2
 8015ffa:	009b      	lsls	r3, r3, #2
 8015ffc:	4a11      	ldr	r2, [pc, #68]	; (8016044 <vTaskSwitchContext+0xac>)
 8015ffe:	4413      	add	r3, r2
 8016000:	613b      	str	r3, [r7, #16]
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	685a      	ldr	r2, [r3, #4]
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	605a      	str	r2, [r3, #4]
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	685a      	ldr	r2, [r3, #4]
 8016010:	693b      	ldr	r3, [r7, #16]
 8016012:	3308      	adds	r3, #8
 8016014:	429a      	cmp	r2, r3
 8016016:	d104      	bne.n	8016022 <vTaskSwitchContext+0x8a>
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	685a      	ldr	r2, [r3, #4]
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	605a      	str	r2, [r3, #4]
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	685b      	ldr	r3, [r3, #4]
 8016026:	68db      	ldr	r3, [r3, #12]
 8016028:	4a07      	ldr	r2, [pc, #28]	; (8016048 <vTaskSwitchContext+0xb0>)
 801602a:	6013      	str	r3, [r2, #0]
}
 801602c:	bf00      	nop
 801602e:	371c      	adds	r7, #28
 8016030:	46bd      	mov	sp, r7
 8016032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016036:	4770      	bx	lr
 8016038:	2000026c 	.word	0x2000026c
 801603c:	20000258 	.word	0x20000258
 8016040:	2000024c 	.word	0x2000024c
 8016044:	20000148 	.word	0x20000148
 8016048:	20000144 	.word	0x20000144

0801604c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b084      	sub	sp, #16
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d109      	bne.n	8016070 <vTaskPlaceOnEventList+0x24>
 801605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016060:	f383 8811 	msr	BASEPRI, r3
 8016064:	f3bf 8f6f 	isb	sy
 8016068:	f3bf 8f4f 	dsb	sy
 801606c:	60fb      	str	r3, [r7, #12]
 801606e:	e7fe      	b.n	801606e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016070:	4b07      	ldr	r3, [pc, #28]	; (8016090 <vTaskPlaceOnEventList+0x44>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	3318      	adds	r3, #24
 8016076:	4619      	mov	r1, r3
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7fe fd23 	bl	8014ac4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801607e:	2101      	movs	r1, #1
 8016080:	6838      	ldr	r0, [r7, #0]
 8016082:	f000 fb7f 	bl	8016784 <prvAddCurrentTaskToDelayedList>
}
 8016086:	bf00      	nop
 8016088:	3710      	adds	r7, #16
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	20000144 	.word	0x20000144

08016094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b086      	sub	sp, #24
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	68db      	ldr	r3, [r3, #12]
 80160a0:	68db      	ldr	r3, [r3, #12]
 80160a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d109      	bne.n	80160be <xTaskRemoveFromEventList+0x2a>
 80160aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ae:	f383 8811 	msr	BASEPRI, r3
 80160b2:	f3bf 8f6f 	isb	sy
 80160b6:	f3bf 8f4f 	dsb	sy
 80160ba:	60fb      	str	r3, [r7, #12]
 80160bc:	e7fe      	b.n	80160bc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80160be:	693b      	ldr	r3, [r7, #16]
 80160c0:	3318      	adds	r3, #24
 80160c2:	4618      	mov	r0, r3
 80160c4:	f7fe fd37 	bl	8014b36 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80160c8:	4b1d      	ldr	r3, [pc, #116]	; (8016140 <xTaskRemoveFromEventList+0xac>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d11c      	bne.n	801610a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	3304      	adds	r3, #4
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7fe fd2e 	bl	8014b36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80160da:	693b      	ldr	r3, [r7, #16]
 80160dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160de:	2201      	movs	r2, #1
 80160e0:	409a      	lsls	r2, r3
 80160e2:	4b18      	ldr	r3, [pc, #96]	; (8016144 <xTaskRemoveFromEventList+0xb0>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	4313      	orrs	r3, r2
 80160e8:	4a16      	ldr	r2, [pc, #88]	; (8016144 <xTaskRemoveFromEventList+0xb0>)
 80160ea:	6013      	str	r3, [r2, #0]
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160f0:	4613      	mov	r3, r2
 80160f2:	009b      	lsls	r3, r3, #2
 80160f4:	4413      	add	r3, r2
 80160f6:	009b      	lsls	r3, r3, #2
 80160f8:	4a13      	ldr	r2, [pc, #76]	; (8016148 <xTaskRemoveFromEventList+0xb4>)
 80160fa:	441a      	add	r2, r3
 80160fc:	693b      	ldr	r3, [r7, #16]
 80160fe:	3304      	adds	r3, #4
 8016100:	4619      	mov	r1, r3
 8016102:	4610      	mov	r0, r2
 8016104:	f7fe fcba 	bl	8014a7c <vListInsertEnd>
 8016108:	e005      	b.n	8016116 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801610a:	693b      	ldr	r3, [r7, #16]
 801610c:	3318      	adds	r3, #24
 801610e:	4619      	mov	r1, r3
 8016110:	480e      	ldr	r0, [pc, #56]	; (801614c <xTaskRemoveFromEventList+0xb8>)
 8016112:	f7fe fcb3 	bl	8014a7c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801611a:	4b0d      	ldr	r3, [pc, #52]	; (8016150 <xTaskRemoveFromEventList+0xbc>)
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016120:	429a      	cmp	r2, r3
 8016122:	d905      	bls.n	8016130 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016124:	2301      	movs	r3, #1
 8016126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016128:	4b0a      	ldr	r3, [pc, #40]	; (8016154 <xTaskRemoveFromEventList+0xc0>)
 801612a:	2201      	movs	r2, #1
 801612c:	601a      	str	r2, [r3, #0]
 801612e:	e001      	b.n	8016134 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8016130:	2300      	movs	r3, #0
 8016132:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8016134:	697b      	ldr	r3, [r7, #20]
}
 8016136:	4618      	mov	r0, r3
 8016138:	3718      	adds	r7, #24
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}
 801613e:	bf00      	nop
 8016140:	2000026c 	.word	0x2000026c
 8016144:	2000024c 	.word	0x2000024c
 8016148:	20000148 	.word	0x20000148
 801614c:	20000204 	.word	0x20000204
 8016150:	20000144 	.word	0x20000144
 8016154:	20000258 	.word	0x20000258

08016158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016158:	b480      	push	{r7}
 801615a:	b083      	sub	sp, #12
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016160:	4b06      	ldr	r3, [pc, #24]	; (801617c <vTaskInternalSetTimeOutState+0x24>)
 8016162:	681a      	ldr	r2, [r3, #0]
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016168:	4b05      	ldr	r3, [pc, #20]	; (8016180 <vTaskInternalSetTimeOutState+0x28>)
 801616a:	681a      	ldr	r2, [r3, #0]
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	605a      	str	r2, [r3, #4]
}
 8016170:	bf00      	nop
 8016172:	370c      	adds	r7, #12
 8016174:	46bd      	mov	sp, r7
 8016176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617a:	4770      	bx	lr
 801617c:	2000025c 	.word	0x2000025c
 8016180:	20000248 	.word	0x20000248

08016184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b088      	sub	sp, #32
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
 801618c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d109      	bne.n	80161a8 <xTaskCheckForTimeOut+0x24>
 8016194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016198:	f383 8811 	msr	BASEPRI, r3
 801619c:	f3bf 8f6f 	isb	sy
 80161a0:	f3bf 8f4f 	dsb	sy
 80161a4:	613b      	str	r3, [r7, #16]
 80161a6:	e7fe      	b.n	80161a6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d109      	bne.n	80161c2 <xTaskCheckForTimeOut+0x3e>
 80161ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b2:	f383 8811 	msr	BASEPRI, r3
 80161b6:	f3bf 8f6f 	isb	sy
 80161ba:	f3bf 8f4f 	dsb	sy
 80161be:	60fb      	str	r3, [r7, #12]
 80161c0:	e7fe      	b.n	80161c0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80161c2:	f000 fc6b 	bl	8016a9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80161c6:	4b1d      	ldr	r3, [pc, #116]	; (801623c <xTaskCheckForTimeOut+0xb8>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	685b      	ldr	r3, [r3, #4]
 80161d0:	69ba      	ldr	r2, [r7, #24]
 80161d2:	1ad3      	subs	r3, r2, r3
 80161d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80161d6:	683b      	ldr	r3, [r7, #0]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80161de:	d102      	bne.n	80161e6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80161e0:	2300      	movs	r3, #0
 80161e2:	61fb      	str	r3, [r7, #28]
 80161e4:	e023      	b.n	801622e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	4b15      	ldr	r3, [pc, #84]	; (8016240 <xTaskCheckForTimeOut+0xbc>)
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d007      	beq.n	8016202 <xTaskCheckForTimeOut+0x7e>
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	685b      	ldr	r3, [r3, #4]
 80161f6:	69ba      	ldr	r2, [r7, #24]
 80161f8:	429a      	cmp	r2, r3
 80161fa:	d302      	bcc.n	8016202 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80161fc:	2301      	movs	r3, #1
 80161fe:	61fb      	str	r3, [r7, #28]
 8016200:	e015      	b.n	801622e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016202:	683b      	ldr	r3, [r7, #0]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	697a      	ldr	r2, [r7, #20]
 8016208:	429a      	cmp	r2, r3
 801620a:	d20b      	bcs.n	8016224 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801620c:	683b      	ldr	r3, [r7, #0]
 801620e:	681a      	ldr	r2, [r3, #0]
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	1ad2      	subs	r2, r2, r3
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f7ff ff9d 	bl	8016158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801621e:	2300      	movs	r3, #0
 8016220:	61fb      	str	r3, [r7, #28]
 8016222:	e004      	b.n	801622e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	2200      	movs	r2, #0
 8016228:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801622a:	2301      	movs	r3, #1
 801622c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801622e:	f000 fc63 	bl	8016af8 <vPortExitCritical>

	return xReturn;
 8016232:	69fb      	ldr	r3, [r7, #28]
}
 8016234:	4618      	mov	r0, r3
 8016236:	3720      	adds	r7, #32
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}
 801623c:	20000248 	.word	0x20000248
 8016240:	2000025c 	.word	0x2000025c

08016244 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016244:	b480      	push	{r7}
 8016246:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016248:	4b03      	ldr	r3, [pc, #12]	; (8016258 <vTaskMissedYield+0x14>)
 801624a:	2201      	movs	r2, #1
 801624c:	601a      	str	r2, [r3, #0]
}
 801624e:	bf00      	nop
 8016250:	46bd      	mov	sp, r7
 8016252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016256:	4770      	bx	lr
 8016258:	20000258 	.word	0x20000258

0801625c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b082      	sub	sp, #8
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016264:	f000 f852 	bl	801630c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016268:	4b06      	ldr	r3, [pc, #24]	; (8016284 <prvIdleTask+0x28>)
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	2b01      	cmp	r3, #1
 801626e:	d9f9      	bls.n	8016264 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016270:	4b05      	ldr	r3, [pc, #20]	; (8016288 <prvIdleTask+0x2c>)
 8016272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016276:	601a      	str	r2, [r3, #0]
 8016278:	f3bf 8f4f 	dsb	sy
 801627c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016280:	e7f0      	b.n	8016264 <prvIdleTask+0x8>
 8016282:	bf00      	nop
 8016284:	20000148 	.word	0x20000148
 8016288:	e000ed04 	.word	0xe000ed04

0801628c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b082      	sub	sp, #8
 8016290:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016292:	2300      	movs	r3, #0
 8016294:	607b      	str	r3, [r7, #4]
 8016296:	e00c      	b.n	80162b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	4613      	mov	r3, r2
 801629c:	009b      	lsls	r3, r3, #2
 801629e:	4413      	add	r3, r2
 80162a0:	009b      	lsls	r3, r3, #2
 80162a2:	4a12      	ldr	r2, [pc, #72]	; (80162ec <prvInitialiseTaskLists+0x60>)
 80162a4:	4413      	add	r3, r2
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7fe fbbb 	bl	8014a22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	3301      	adds	r3, #1
 80162b0:	607b      	str	r3, [r7, #4]
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2b06      	cmp	r3, #6
 80162b6:	d9ef      	bls.n	8016298 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80162b8:	480d      	ldr	r0, [pc, #52]	; (80162f0 <prvInitialiseTaskLists+0x64>)
 80162ba:	f7fe fbb2 	bl	8014a22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80162be:	480d      	ldr	r0, [pc, #52]	; (80162f4 <prvInitialiseTaskLists+0x68>)
 80162c0:	f7fe fbaf 	bl	8014a22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80162c4:	480c      	ldr	r0, [pc, #48]	; (80162f8 <prvInitialiseTaskLists+0x6c>)
 80162c6:	f7fe fbac 	bl	8014a22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80162ca:	480c      	ldr	r0, [pc, #48]	; (80162fc <prvInitialiseTaskLists+0x70>)
 80162cc:	f7fe fba9 	bl	8014a22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80162d0:	480b      	ldr	r0, [pc, #44]	; (8016300 <prvInitialiseTaskLists+0x74>)
 80162d2:	f7fe fba6 	bl	8014a22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80162d6:	4b0b      	ldr	r3, [pc, #44]	; (8016304 <prvInitialiseTaskLists+0x78>)
 80162d8:	4a05      	ldr	r2, [pc, #20]	; (80162f0 <prvInitialiseTaskLists+0x64>)
 80162da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80162dc:	4b0a      	ldr	r3, [pc, #40]	; (8016308 <prvInitialiseTaskLists+0x7c>)
 80162de:	4a05      	ldr	r2, [pc, #20]	; (80162f4 <prvInitialiseTaskLists+0x68>)
 80162e0:	601a      	str	r2, [r3, #0]
}
 80162e2:	bf00      	nop
 80162e4:	3708      	adds	r7, #8
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	20000148 	.word	0x20000148
 80162f0:	200001d4 	.word	0x200001d4
 80162f4:	200001e8 	.word	0x200001e8
 80162f8:	20000204 	.word	0x20000204
 80162fc:	20000218 	.word	0x20000218
 8016300:	20000230 	.word	0x20000230
 8016304:	200001fc 	.word	0x200001fc
 8016308:	20000200 	.word	0x20000200

0801630c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b082      	sub	sp, #8
 8016310:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016312:	e019      	b.n	8016348 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016314:	f000 fbc2 	bl	8016a9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8016318:	4b0f      	ldr	r3, [pc, #60]	; (8016358 <prvCheckTasksWaitingTermination+0x4c>)
 801631a:	68db      	ldr	r3, [r3, #12]
 801631c:	68db      	ldr	r3, [r3, #12]
 801631e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	3304      	adds	r3, #4
 8016324:	4618      	mov	r0, r3
 8016326:	f7fe fc06 	bl	8014b36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801632a:	4b0c      	ldr	r3, [pc, #48]	; (801635c <prvCheckTasksWaitingTermination+0x50>)
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	3b01      	subs	r3, #1
 8016330:	4a0a      	ldr	r2, [pc, #40]	; (801635c <prvCheckTasksWaitingTermination+0x50>)
 8016332:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016334:	4b0a      	ldr	r3, [pc, #40]	; (8016360 <prvCheckTasksWaitingTermination+0x54>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	3b01      	subs	r3, #1
 801633a:	4a09      	ldr	r2, [pc, #36]	; (8016360 <prvCheckTasksWaitingTermination+0x54>)
 801633c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801633e:	f000 fbdb 	bl	8016af8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016342:	6878      	ldr	r0, [r7, #4]
 8016344:	f000 f80e 	bl	8016364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016348:	4b05      	ldr	r3, [pc, #20]	; (8016360 <prvCheckTasksWaitingTermination+0x54>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d1e1      	bne.n	8016314 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016350:	bf00      	nop
 8016352:	3708      	adds	r7, #8
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}
 8016358:	20000218 	.word	0x20000218
 801635c:	20000244 	.word	0x20000244
 8016360:	2000022c 	.word	0x2000022c

08016364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016370:	4618      	mov	r0, r3
 8016372:	f000 fd6f 	bl	8016e54 <vPortFree>
			vPortFree( pxTCB );
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f000 fd6c 	bl	8016e54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801637c:	bf00      	nop
 801637e:	3708      	adds	r7, #8
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}

08016384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016384:	b480      	push	{r7}
 8016386:	b083      	sub	sp, #12
 8016388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801638a:	4b0f      	ldr	r3, [pc, #60]	; (80163c8 <prvResetNextTaskUnblockTime+0x44>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d101      	bne.n	8016398 <prvResetNextTaskUnblockTime+0x14>
 8016394:	2301      	movs	r3, #1
 8016396:	e000      	b.n	801639a <prvResetNextTaskUnblockTime+0x16>
 8016398:	2300      	movs	r3, #0
 801639a:	2b00      	cmp	r3, #0
 801639c:	d004      	beq.n	80163a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801639e:	4b0b      	ldr	r3, [pc, #44]	; (80163cc <prvResetNextTaskUnblockTime+0x48>)
 80163a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80163a6:	e008      	b.n	80163ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80163a8:	4b07      	ldr	r3, [pc, #28]	; (80163c8 <prvResetNextTaskUnblockTime+0x44>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	68db      	ldr	r3, [r3, #12]
 80163ae:	68db      	ldr	r3, [r3, #12]
 80163b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	4a05      	ldr	r2, [pc, #20]	; (80163cc <prvResetNextTaskUnblockTime+0x48>)
 80163b8:	6013      	str	r3, [r2, #0]
}
 80163ba:	bf00      	nop
 80163bc:	370c      	adds	r7, #12
 80163be:	46bd      	mov	sp, r7
 80163c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c4:	4770      	bx	lr
 80163c6:	bf00      	nop
 80163c8:	200001fc 	.word	0x200001fc
 80163cc:	20000264 	.word	0x20000264

080163d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80163d0:	b480      	push	{r7}
 80163d2:	b083      	sub	sp, #12
 80163d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80163d6:	4b0b      	ldr	r3, [pc, #44]	; (8016404 <xTaskGetSchedulerState+0x34>)
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d102      	bne.n	80163e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80163de:	2301      	movs	r3, #1
 80163e0:	607b      	str	r3, [r7, #4]
 80163e2:	e008      	b.n	80163f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80163e4:	4b08      	ldr	r3, [pc, #32]	; (8016408 <xTaskGetSchedulerState+0x38>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d102      	bne.n	80163f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80163ec:	2302      	movs	r3, #2
 80163ee:	607b      	str	r3, [r7, #4]
 80163f0:	e001      	b.n	80163f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80163f2:	2300      	movs	r3, #0
 80163f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80163f6:	687b      	ldr	r3, [r7, #4]
	}
 80163f8:	4618      	mov	r0, r3
 80163fa:	370c      	adds	r7, #12
 80163fc:	46bd      	mov	sp, r7
 80163fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016402:	4770      	bx	lr
 8016404:	20000250 	.word	0x20000250
 8016408:	2000026c 	.word	0x2000026c

0801640c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801640c:	b580      	push	{r7, lr}
 801640e:	b084      	sub	sp, #16
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016418:	2300      	movs	r3, #0
 801641a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d06e      	beq.n	8016500 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016426:	4b39      	ldr	r3, [pc, #228]	; (801650c <xTaskPriorityInherit+0x100>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801642c:	429a      	cmp	r2, r3
 801642e:	d25e      	bcs.n	80164ee <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	699b      	ldr	r3, [r3, #24]
 8016434:	2b00      	cmp	r3, #0
 8016436:	db06      	blt.n	8016446 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016438:	4b34      	ldr	r3, [pc, #208]	; (801650c <xTaskPriorityInherit+0x100>)
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801643e:	f1c3 0207 	rsb	r2, r3, #7
 8016442:	68bb      	ldr	r3, [r7, #8]
 8016444:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	6959      	ldr	r1, [r3, #20]
 801644a:	68bb      	ldr	r3, [r7, #8]
 801644c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801644e:	4613      	mov	r3, r2
 8016450:	009b      	lsls	r3, r3, #2
 8016452:	4413      	add	r3, r2
 8016454:	009b      	lsls	r3, r3, #2
 8016456:	4a2e      	ldr	r2, [pc, #184]	; (8016510 <xTaskPriorityInherit+0x104>)
 8016458:	4413      	add	r3, r2
 801645a:	4299      	cmp	r1, r3
 801645c:	d101      	bne.n	8016462 <xTaskPriorityInherit+0x56>
 801645e:	2301      	movs	r3, #1
 8016460:	e000      	b.n	8016464 <xTaskPriorityInherit+0x58>
 8016462:	2300      	movs	r3, #0
 8016464:	2b00      	cmp	r3, #0
 8016466:	d03a      	beq.n	80164de <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	3304      	adds	r3, #4
 801646c:	4618      	mov	r0, r3
 801646e:	f7fe fb62 	bl	8014b36 <uxListRemove>
 8016472:	4603      	mov	r3, r0
 8016474:	2b00      	cmp	r3, #0
 8016476:	d115      	bne.n	80164a4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801647c:	4924      	ldr	r1, [pc, #144]	; (8016510 <xTaskPriorityInherit+0x104>)
 801647e:	4613      	mov	r3, r2
 8016480:	009b      	lsls	r3, r3, #2
 8016482:	4413      	add	r3, r2
 8016484:	009b      	lsls	r3, r3, #2
 8016486:	440b      	add	r3, r1
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d10a      	bne.n	80164a4 <xTaskPriorityInherit+0x98>
 801648e:	68bb      	ldr	r3, [r7, #8]
 8016490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016492:	2201      	movs	r2, #1
 8016494:	fa02 f303 	lsl.w	r3, r2, r3
 8016498:	43da      	mvns	r2, r3
 801649a:	4b1e      	ldr	r3, [pc, #120]	; (8016514 <xTaskPriorityInherit+0x108>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	4013      	ands	r3, r2
 80164a0:	4a1c      	ldr	r2, [pc, #112]	; (8016514 <xTaskPriorityInherit+0x108>)
 80164a2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80164a4:	4b19      	ldr	r3, [pc, #100]	; (801650c <xTaskPriorityInherit+0x100>)
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164aa:	68bb      	ldr	r3, [r7, #8]
 80164ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164b2:	2201      	movs	r2, #1
 80164b4:	409a      	lsls	r2, r3
 80164b6:	4b17      	ldr	r3, [pc, #92]	; (8016514 <xTaskPriorityInherit+0x108>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	4313      	orrs	r3, r2
 80164bc:	4a15      	ldr	r2, [pc, #84]	; (8016514 <xTaskPriorityInherit+0x108>)
 80164be:	6013      	str	r3, [r2, #0]
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164c4:	4613      	mov	r3, r2
 80164c6:	009b      	lsls	r3, r3, #2
 80164c8:	4413      	add	r3, r2
 80164ca:	009b      	lsls	r3, r3, #2
 80164cc:	4a10      	ldr	r2, [pc, #64]	; (8016510 <xTaskPriorityInherit+0x104>)
 80164ce:	441a      	add	r2, r3
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	3304      	adds	r3, #4
 80164d4:	4619      	mov	r1, r3
 80164d6:	4610      	mov	r0, r2
 80164d8:	f7fe fad0 	bl	8014a7c <vListInsertEnd>
 80164dc:	e004      	b.n	80164e8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80164de:	4b0b      	ldr	r3, [pc, #44]	; (801650c <xTaskPriorityInherit+0x100>)
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80164e8:	2301      	movs	r3, #1
 80164ea:	60fb      	str	r3, [r7, #12]
 80164ec:	e008      	b.n	8016500 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80164f2:	4b06      	ldr	r3, [pc, #24]	; (801650c <xTaskPriorityInherit+0x100>)
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164f8:	429a      	cmp	r2, r3
 80164fa:	d201      	bcs.n	8016500 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80164fc:	2301      	movs	r3, #1
 80164fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016500:	68fb      	ldr	r3, [r7, #12]
	}
 8016502:	4618      	mov	r0, r3
 8016504:	3710      	adds	r7, #16
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}
 801650a:	bf00      	nop
 801650c:	20000144 	.word	0x20000144
 8016510:	20000148 	.word	0x20000148
 8016514:	2000024c 	.word	0x2000024c

08016518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016518:	b580      	push	{r7, lr}
 801651a:	b086      	sub	sp, #24
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016524:	2300      	movs	r3, #0
 8016526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d06c      	beq.n	8016608 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801652e:	4b39      	ldr	r3, [pc, #228]	; (8016614 <xTaskPriorityDisinherit+0xfc>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	693a      	ldr	r2, [r7, #16]
 8016534:	429a      	cmp	r2, r3
 8016536:	d009      	beq.n	801654c <xTaskPriorityDisinherit+0x34>
 8016538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801653c:	f383 8811 	msr	BASEPRI, r3
 8016540:	f3bf 8f6f 	isb	sy
 8016544:	f3bf 8f4f 	dsb	sy
 8016548:	60fb      	str	r3, [r7, #12]
 801654a:	e7fe      	b.n	801654a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801654c:	693b      	ldr	r3, [r7, #16]
 801654e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016550:	2b00      	cmp	r3, #0
 8016552:	d109      	bne.n	8016568 <xTaskPriorityDisinherit+0x50>
 8016554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016558:	f383 8811 	msr	BASEPRI, r3
 801655c:	f3bf 8f6f 	isb	sy
 8016560:	f3bf 8f4f 	dsb	sy
 8016564:	60bb      	str	r3, [r7, #8]
 8016566:	e7fe      	b.n	8016566 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8016568:	693b      	ldr	r3, [r7, #16]
 801656a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801656c:	1e5a      	subs	r2, r3, #1
 801656e:	693b      	ldr	r3, [r7, #16]
 8016570:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801657a:	429a      	cmp	r2, r3
 801657c:	d044      	beq.n	8016608 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016582:	2b00      	cmp	r3, #0
 8016584:	d140      	bne.n	8016608 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	3304      	adds	r3, #4
 801658a:	4618      	mov	r0, r3
 801658c:	f7fe fad3 	bl	8014b36 <uxListRemove>
 8016590:	4603      	mov	r3, r0
 8016592:	2b00      	cmp	r3, #0
 8016594:	d115      	bne.n	80165c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016596:	693b      	ldr	r3, [r7, #16]
 8016598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801659a:	491f      	ldr	r1, [pc, #124]	; (8016618 <xTaskPriorityDisinherit+0x100>)
 801659c:	4613      	mov	r3, r2
 801659e:	009b      	lsls	r3, r3, #2
 80165a0:	4413      	add	r3, r2
 80165a2:	009b      	lsls	r3, r3, #2
 80165a4:	440b      	add	r3, r1
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d10a      	bne.n	80165c2 <xTaskPriorityDisinherit+0xaa>
 80165ac:	693b      	ldr	r3, [r7, #16]
 80165ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165b0:	2201      	movs	r2, #1
 80165b2:	fa02 f303 	lsl.w	r3, r2, r3
 80165b6:	43da      	mvns	r2, r3
 80165b8:	4b18      	ldr	r3, [pc, #96]	; (801661c <xTaskPriorityDisinherit+0x104>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	4013      	ands	r3, r2
 80165be:	4a17      	ldr	r2, [pc, #92]	; (801661c <xTaskPriorityDisinherit+0x104>)
 80165c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80165c2:	693b      	ldr	r3, [r7, #16]
 80165c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80165c6:	693b      	ldr	r3, [r7, #16]
 80165c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165ca:	693b      	ldr	r3, [r7, #16]
 80165cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165ce:	f1c3 0207 	rsb	r2, r3, #7
 80165d2:	693b      	ldr	r3, [r7, #16]
 80165d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80165d6:	693b      	ldr	r3, [r7, #16]
 80165d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165da:	2201      	movs	r2, #1
 80165dc:	409a      	lsls	r2, r3
 80165de:	4b0f      	ldr	r3, [pc, #60]	; (801661c <xTaskPriorityDisinherit+0x104>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	4313      	orrs	r3, r2
 80165e4:	4a0d      	ldr	r2, [pc, #52]	; (801661c <xTaskPriorityDisinherit+0x104>)
 80165e6:	6013      	str	r3, [r2, #0]
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165ec:	4613      	mov	r3, r2
 80165ee:	009b      	lsls	r3, r3, #2
 80165f0:	4413      	add	r3, r2
 80165f2:	009b      	lsls	r3, r3, #2
 80165f4:	4a08      	ldr	r2, [pc, #32]	; (8016618 <xTaskPriorityDisinherit+0x100>)
 80165f6:	441a      	add	r2, r3
 80165f8:	693b      	ldr	r3, [r7, #16]
 80165fa:	3304      	adds	r3, #4
 80165fc:	4619      	mov	r1, r3
 80165fe:	4610      	mov	r0, r2
 8016600:	f7fe fa3c 	bl	8014a7c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016604:	2301      	movs	r3, #1
 8016606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016608:	697b      	ldr	r3, [r7, #20]
	}
 801660a:	4618      	mov	r0, r3
 801660c:	3718      	adds	r7, #24
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}
 8016612:	bf00      	nop
 8016614:	20000144 	.word	0x20000144
 8016618:	20000148 	.word	0x20000148
 801661c:	2000024c 	.word	0x2000024c

08016620 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016620:	b580      	push	{r7, lr}
 8016622:	b088      	sub	sp, #32
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
 8016628:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801662e:	2301      	movs	r3, #1
 8016630:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	f000 8086 	beq.w	8016746 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801663a:	69bb      	ldr	r3, [r7, #24]
 801663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801663e:	2b00      	cmp	r3, #0
 8016640:	d109      	bne.n	8016656 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8016642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016646:	f383 8811 	msr	BASEPRI, r3
 801664a:	f3bf 8f6f 	isb	sy
 801664e:	f3bf 8f4f 	dsb	sy
 8016652:	60fb      	str	r3, [r7, #12]
 8016654:	e7fe      	b.n	8016654 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016656:	69bb      	ldr	r3, [r7, #24]
 8016658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801665a:	683a      	ldr	r2, [r7, #0]
 801665c:	429a      	cmp	r2, r3
 801665e:	d902      	bls.n	8016666 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	61fb      	str	r3, [r7, #28]
 8016664:	e002      	b.n	801666c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016666:	69bb      	ldr	r3, [r7, #24]
 8016668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801666a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801666c:	69bb      	ldr	r3, [r7, #24]
 801666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016670:	69fa      	ldr	r2, [r7, #28]
 8016672:	429a      	cmp	r2, r3
 8016674:	d067      	beq.n	8016746 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016676:	69bb      	ldr	r3, [r7, #24]
 8016678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801667a:	697a      	ldr	r2, [r7, #20]
 801667c:	429a      	cmp	r2, r3
 801667e:	d162      	bne.n	8016746 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016680:	4b33      	ldr	r3, [pc, #204]	; (8016750 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	69ba      	ldr	r2, [r7, #24]
 8016686:	429a      	cmp	r2, r3
 8016688:	d109      	bne.n	801669e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801668e:	f383 8811 	msr	BASEPRI, r3
 8016692:	f3bf 8f6f 	isb	sy
 8016696:	f3bf 8f4f 	dsb	sy
 801669a:	60bb      	str	r3, [r7, #8]
 801669c:	e7fe      	b.n	801669c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801669e:	69bb      	ldr	r3, [r7, #24]
 80166a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166a2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80166a4:	69bb      	ldr	r3, [r7, #24]
 80166a6:	69fa      	ldr	r2, [r7, #28]
 80166a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80166aa:	69bb      	ldr	r3, [r7, #24]
 80166ac:	699b      	ldr	r3, [r3, #24]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	db04      	blt.n	80166bc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166b2:	69fb      	ldr	r3, [r7, #28]
 80166b4:	f1c3 0207 	rsb	r2, r3, #7
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80166bc:	69bb      	ldr	r3, [r7, #24]
 80166be:	6959      	ldr	r1, [r3, #20]
 80166c0:	693a      	ldr	r2, [r7, #16]
 80166c2:	4613      	mov	r3, r2
 80166c4:	009b      	lsls	r3, r3, #2
 80166c6:	4413      	add	r3, r2
 80166c8:	009b      	lsls	r3, r3, #2
 80166ca:	4a22      	ldr	r2, [pc, #136]	; (8016754 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80166cc:	4413      	add	r3, r2
 80166ce:	4299      	cmp	r1, r3
 80166d0:	d101      	bne.n	80166d6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80166d2:	2301      	movs	r3, #1
 80166d4:	e000      	b.n	80166d8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80166d6:	2300      	movs	r3, #0
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d034      	beq.n	8016746 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80166dc:	69bb      	ldr	r3, [r7, #24]
 80166de:	3304      	adds	r3, #4
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7fe fa28 	bl	8014b36 <uxListRemove>
 80166e6:	4603      	mov	r3, r0
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d115      	bne.n	8016718 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80166ec:	69bb      	ldr	r3, [r7, #24]
 80166ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166f0:	4918      	ldr	r1, [pc, #96]	; (8016754 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80166f2:	4613      	mov	r3, r2
 80166f4:	009b      	lsls	r3, r3, #2
 80166f6:	4413      	add	r3, r2
 80166f8:	009b      	lsls	r3, r3, #2
 80166fa:	440b      	add	r3, r1
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d10a      	bne.n	8016718 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8016702:	69bb      	ldr	r3, [r7, #24]
 8016704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016706:	2201      	movs	r2, #1
 8016708:	fa02 f303 	lsl.w	r3, r2, r3
 801670c:	43da      	mvns	r2, r3
 801670e:	4b12      	ldr	r3, [pc, #72]	; (8016758 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	4013      	ands	r3, r2
 8016714:	4a10      	ldr	r2, [pc, #64]	; (8016758 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016716:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016718:	69bb      	ldr	r3, [r7, #24]
 801671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801671c:	2201      	movs	r2, #1
 801671e:	409a      	lsls	r2, r3
 8016720:	4b0d      	ldr	r3, [pc, #52]	; (8016758 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	4313      	orrs	r3, r2
 8016726:	4a0c      	ldr	r2, [pc, #48]	; (8016758 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016728:	6013      	str	r3, [r2, #0]
 801672a:	69bb      	ldr	r3, [r7, #24]
 801672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801672e:	4613      	mov	r3, r2
 8016730:	009b      	lsls	r3, r3, #2
 8016732:	4413      	add	r3, r2
 8016734:	009b      	lsls	r3, r3, #2
 8016736:	4a07      	ldr	r2, [pc, #28]	; (8016754 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8016738:	441a      	add	r2, r3
 801673a:	69bb      	ldr	r3, [r7, #24]
 801673c:	3304      	adds	r3, #4
 801673e:	4619      	mov	r1, r3
 8016740:	4610      	mov	r0, r2
 8016742:	f7fe f99b 	bl	8014a7c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016746:	bf00      	nop
 8016748:	3720      	adds	r7, #32
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop
 8016750:	20000144 	.word	0x20000144
 8016754:	20000148 	.word	0x20000148
 8016758:	2000024c 	.word	0x2000024c

0801675c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 801675c:	b480      	push	{r7}
 801675e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016760:	4b07      	ldr	r3, [pc, #28]	; (8016780 <pvTaskIncrementMutexHeldCount+0x24>)
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d004      	beq.n	8016772 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016768:	4b05      	ldr	r3, [pc, #20]	; (8016780 <pvTaskIncrementMutexHeldCount+0x24>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801676e:	3201      	adds	r2, #1
 8016770:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016772:	4b03      	ldr	r3, [pc, #12]	; (8016780 <pvTaskIncrementMutexHeldCount+0x24>)
 8016774:	681b      	ldr	r3, [r3, #0]
	}
 8016776:	4618      	mov	r0, r3
 8016778:	46bd      	mov	sp, r7
 801677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677e:	4770      	bx	lr
 8016780:	20000144 	.word	0x20000144

08016784 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b084      	sub	sp, #16
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
 801678c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801678e:	4b29      	ldr	r3, [pc, #164]	; (8016834 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016794:	4b28      	ldr	r3, [pc, #160]	; (8016838 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	3304      	adds	r3, #4
 801679a:	4618      	mov	r0, r3
 801679c:	f7fe f9cb 	bl	8014b36 <uxListRemove>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d10b      	bne.n	80167be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80167a6:	4b24      	ldr	r3, [pc, #144]	; (8016838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167ac:	2201      	movs	r2, #1
 80167ae:	fa02 f303 	lsl.w	r3, r2, r3
 80167b2:	43da      	mvns	r2, r3
 80167b4:	4b21      	ldr	r3, [pc, #132]	; (801683c <prvAddCurrentTaskToDelayedList+0xb8>)
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	4013      	ands	r3, r2
 80167ba:	4a20      	ldr	r2, [pc, #128]	; (801683c <prvAddCurrentTaskToDelayedList+0xb8>)
 80167bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80167c4:	d10a      	bne.n	80167dc <prvAddCurrentTaskToDelayedList+0x58>
 80167c6:	683b      	ldr	r3, [r7, #0]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d007      	beq.n	80167dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80167cc:	4b1a      	ldr	r3, [pc, #104]	; (8016838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	3304      	adds	r3, #4
 80167d2:	4619      	mov	r1, r3
 80167d4:	481a      	ldr	r0, [pc, #104]	; (8016840 <prvAddCurrentTaskToDelayedList+0xbc>)
 80167d6:	f7fe f951 	bl	8014a7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80167da:	e026      	b.n	801682a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80167dc:	68fa      	ldr	r2, [r7, #12]
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	4413      	add	r3, r2
 80167e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80167e4:	4b14      	ldr	r3, [pc, #80]	; (8016838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	68ba      	ldr	r2, [r7, #8]
 80167ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80167ec:	68ba      	ldr	r2, [r7, #8]
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d209      	bcs.n	8016808 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80167f4:	4b13      	ldr	r3, [pc, #76]	; (8016844 <prvAddCurrentTaskToDelayedList+0xc0>)
 80167f6:	681a      	ldr	r2, [r3, #0]
 80167f8:	4b0f      	ldr	r3, [pc, #60]	; (8016838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	3304      	adds	r3, #4
 80167fe:	4619      	mov	r1, r3
 8016800:	4610      	mov	r0, r2
 8016802:	f7fe f95f 	bl	8014ac4 <vListInsert>
}
 8016806:	e010      	b.n	801682a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016808:	4b0f      	ldr	r3, [pc, #60]	; (8016848 <prvAddCurrentTaskToDelayedList+0xc4>)
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	4b0a      	ldr	r3, [pc, #40]	; (8016838 <prvAddCurrentTaskToDelayedList+0xb4>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	3304      	adds	r3, #4
 8016812:	4619      	mov	r1, r3
 8016814:	4610      	mov	r0, r2
 8016816:	f7fe f955 	bl	8014ac4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801681a:	4b0c      	ldr	r3, [pc, #48]	; (801684c <prvAddCurrentTaskToDelayedList+0xc8>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	68ba      	ldr	r2, [r7, #8]
 8016820:	429a      	cmp	r2, r3
 8016822:	d202      	bcs.n	801682a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016824:	4a09      	ldr	r2, [pc, #36]	; (801684c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016826:	68bb      	ldr	r3, [r7, #8]
 8016828:	6013      	str	r3, [r2, #0]
}
 801682a:	bf00      	nop
 801682c:	3710      	adds	r7, #16
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}
 8016832:	bf00      	nop
 8016834:	20000248 	.word	0x20000248
 8016838:	20000144 	.word	0x20000144
 801683c:	2000024c 	.word	0x2000024c
 8016840:	20000230 	.word	0x20000230
 8016844:	20000200 	.word	0x20000200
 8016848:	200001fc 	.word	0x200001fc
 801684c:	20000264 	.word	0x20000264

08016850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016850:	b480      	push	{r7}
 8016852:	b085      	sub	sp, #20
 8016854:	af00      	add	r7, sp, #0
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	3b04      	subs	r3, #4
 8016860:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	3b04      	subs	r3, #4
 801686e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016870:	68bb      	ldr	r3, [r7, #8]
 8016872:	f023 0201 	bic.w	r2, r3, #1
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	3b04      	subs	r3, #4
 801687e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016880:	4a0c      	ldr	r2, [pc, #48]	; (80168b4 <pxPortInitialiseStack+0x64>)
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	3b14      	subs	r3, #20
 801688a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801688c:	687a      	ldr	r2, [r7, #4]
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	3b04      	subs	r3, #4
 8016896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	f06f 0202 	mvn.w	r2, #2
 801689e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	3b20      	subs	r3, #32
 80168a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80168a6:	68fb      	ldr	r3, [r7, #12]
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3714      	adds	r7, #20
 80168ac:	46bd      	mov	sp, r7
 80168ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b2:	4770      	bx	lr
 80168b4:	080168b9 	.word	0x080168b9

080168b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80168b8:	b480      	push	{r7}
 80168ba:	b085      	sub	sp, #20
 80168bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80168be:	2300      	movs	r3, #0
 80168c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80168c2:	4b11      	ldr	r3, [pc, #68]	; (8016908 <prvTaskExitError+0x50>)
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80168ca:	d009      	beq.n	80168e0 <prvTaskExitError+0x28>
 80168cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168d0:	f383 8811 	msr	BASEPRI, r3
 80168d4:	f3bf 8f6f 	isb	sy
 80168d8:	f3bf 8f4f 	dsb	sy
 80168dc:	60fb      	str	r3, [r7, #12]
 80168de:	e7fe      	b.n	80168de <prvTaskExitError+0x26>
 80168e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e4:	f383 8811 	msr	BASEPRI, r3
 80168e8:	f3bf 8f6f 	isb	sy
 80168ec:	f3bf 8f4f 	dsb	sy
 80168f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80168f2:	bf00      	nop
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d0fc      	beq.n	80168f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80168fa:	bf00      	nop
 80168fc:	3714      	adds	r7, #20
 80168fe:	46bd      	mov	sp, r7
 8016900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016904:	4770      	bx	lr
 8016906:	bf00      	nop
 8016908:	20000050 	.word	0x20000050
 801690c:	00000000 	.word	0x00000000

08016910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016910:	4b07      	ldr	r3, [pc, #28]	; (8016930 <pxCurrentTCBConst2>)
 8016912:	6819      	ldr	r1, [r3, #0]
 8016914:	6808      	ldr	r0, [r1, #0]
 8016916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801691a:	f380 8809 	msr	PSP, r0
 801691e:	f3bf 8f6f 	isb	sy
 8016922:	f04f 0000 	mov.w	r0, #0
 8016926:	f380 8811 	msr	BASEPRI, r0
 801692a:	4770      	bx	lr
 801692c:	f3af 8000 	nop.w

08016930 <pxCurrentTCBConst2>:
 8016930:	20000144 	.word	0x20000144
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016934:	bf00      	nop
 8016936:	bf00      	nop

08016938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016938:	4808      	ldr	r0, [pc, #32]	; (801695c <prvPortStartFirstTask+0x24>)
 801693a:	6800      	ldr	r0, [r0, #0]
 801693c:	6800      	ldr	r0, [r0, #0]
 801693e:	f380 8808 	msr	MSP, r0
 8016942:	f04f 0000 	mov.w	r0, #0
 8016946:	f380 8814 	msr	CONTROL, r0
 801694a:	b662      	cpsie	i
 801694c:	b661      	cpsie	f
 801694e:	f3bf 8f4f 	dsb	sy
 8016952:	f3bf 8f6f 	isb	sy
 8016956:	df00      	svc	0
 8016958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801695a:	bf00      	nop
 801695c:	e000ed08 	.word	0xe000ed08

08016960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b086      	sub	sp, #24
 8016964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016966:	4b44      	ldr	r3, [pc, #272]	; (8016a78 <xPortStartScheduler+0x118>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	4a44      	ldr	r2, [pc, #272]	; (8016a7c <xPortStartScheduler+0x11c>)
 801696c:	4293      	cmp	r3, r2
 801696e:	d109      	bne.n	8016984 <xPortStartScheduler+0x24>
 8016970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016974:	f383 8811 	msr	BASEPRI, r3
 8016978:	f3bf 8f6f 	isb	sy
 801697c:	f3bf 8f4f 	dsb	sy
 8016980:	613b      	str	r3, [r7, #16]
 8016982:	e7fe      	b.n	8016982 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016984:	4b3c      	ldr	r3, [pc, #240]	; (8016a78 <xPortStartScheduler+0x118>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	4a3d      	ldr	r2, [pc, #244]	; (8016a80 <xPortStartScheduler+0x120>)
 801698a:	4293      	cmp	r3, r2
 801698c:	d109      	bne.n	80169a2 <xPortStartScheduler+0x42>
 801698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016992:	f383 8811 	msr	BASEPRI, r3
 8016996:	f3bf 8f6f 	isb	sy
 801699a:	f3bf 8f4f 	dsb	sy
 801699e:	60fb      	str	r3, [r7, #12]
 80169a0:	e7fe      	b.n	80169a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80169a2:	4b38      	ldr	r3, [pc, #224]	; (8016a84 <xPortStartScheduler+0x124>)
 80169a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80169a6:	697b      	ldr	r3, [r7, #20]
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	22ff      	movs	r2, #255	; 0xff
 80169b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	781b      	ldrb	r3, [r3, #0]
 80169b8:	b2db      	uxtb	r3, r3
 80169ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80169bc:	78fb      	ldrb	r3, [r7, #3]
 80169be:	b2db      	uxtb	r3, r3
 80169c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80169c4:	b2da      	uxtb	r2, r3
 80169c6:	4b30      	ldr	r3, [pc, #192]	; (8016a88 <xPortStartScheduler+0x128>)
 80169c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80169ca:	4b30      	ldr	r3, [pc, #192]	; (8016a8c <xPortStartScheduler+0x12c>)
 80169cc:	2207      	movs	r2, #7
 80169ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169d0:	e009      	b.n	80169e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80169d2:	4b2e      	ldr	r3, [pc, #184]	; (8016a8c <xPortStartScheduler+0x12c>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	3b01      	subs	r3, #1
 80169d8:	4a2c      	ldr	r2, [pc, #176]	; (8016a8c <xPortStartScheduler+0x12c>)
 80169da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80169dc:	78fb      	ldrb	r3, [r7, #3]
 80169de:	b2db      	uxtb	r3, r3
 80169e0:	005b      	lsls	r3, r3, #1
 80169e2:	b2db      	uxtb	r3, r3
 80169e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169e6:	78fb      	ldrb	r3, [r7, #3]
 80169e8:	b2db      	uxtb	r3, r3
 80169ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169ee:	2b80      	cmp	r3, #128	; 0x80
 80169f0:	d0ef      	beq.n	80169d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80169f2:	4b26      	ldr	r3, [pc, #152]	; (8016a8c <xPortStartScheduler+0x12c>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	f1c3 0307 	rsb	r3, r3, #7
 80169fa:	2b04      	cmp	r3, #4
 80169fc:	d009      	beq.n	8016a12 <xPortStartScheduler+0xb2>
 80169fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a02:	f383 8811 	msr	BASEPRI, r3
 8016a06:	f3bf 8f6f 	isb	sy
 8016a0a:	f3bf 8f4f 	dsb	sy
 8016a0e:	60bb      	str	r3, [r7, #8]
 8016a10:	e7fe      	b.n	8016a10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016a12:	4b1e      	ldr	r3, [pc, #120]	; (8016a8c <xPortStartScheduler+0x12c>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	021b      	lsls	r3, r3, #8
 8016a18:	4a1c      	ldr	r2, [pc, #112]	; (8016a8c <xPortStartScheduler+0x12c>)
 8016a1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016a1c:	4b1b      	ldr	r3, [pc, #108]	; (8016a8c <xPortStartScheduler+0x12c>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016a24:	4a19      	ldr	r2, [pc, #100]	; (8016a8c <xPortStartScheduler+0x12c>)
 8016a26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	b2da      	uxtb	r2, r3
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016a30:	4b17      	ldr	r3, [pc, #92]	; (8016a90 <xPortStartScheduler+0x130>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	4a16      	ldr	r2, [pc, #88]	; (8016a90 <xPortStartScheduler+0x130>)
 8016a36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016a3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016a3c:	4b14      	ldr	r3, [pc, #80]	; (8016a90 <xPortStartScheduler+0x130>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4a13      	ldr	r2, [pc, #76]	; (8016a90 <xPortStartScheduler+0x130>)
 8016a42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016a46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016a48:	f000 f8d6 	bl	8016bf8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016a4c:	4b11      	ldr	r3, [pc, #68]	; (8016a94 <xPortStartScheduler+0x134>)
 8016a4e:	2200      	movs	r2, #0
 8016a50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016a52:	f000 f8f5 	bl	8016c40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016a56:	4b10      	ldr	r3, [pc, #64]	; (8016a98 <xPortStartScheduler+0x138>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	4a0f      	ldr	r2, [pc, #60]	; (8016a98 <xPortStartScheduler+0x138>)
 8016a5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016a60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016a62:	f7ff ff69 	bl	8016938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016a66:	f7ff fa97 	bl	8015f98 <vTaskSwitchContext>
	prvTaskExitError();
 8016a6a:	f7ff ff25 	bl	80168b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016a6e:	2300      	movs	r3, #0
}
 8016a70:	4618      	mov	r0, r3
 8016a72:	3718      	adds	r7, #24
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}
 8016a78:	e000ed00 	.word	0xe000ed00
 8016a7c:	410fc271 	.word	0x410fc271
 8016a80:	410fc270 	.word	0x410fc270
 8016a84:	e000e400 	.word	0xe000e400
 8016a88:	20000270 	.word	0x20000270
 8016a8c:	20000274 	.word	0x20000274
 8016a90:	e000ed20 	.word	0xe000ed20
 8016a94:	20000050 	.word	0x20000050
 8016a98:	e000ef34 	.word	0xe000ef34

08016a9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016a9c:	b480      	push	{r7}
 8016a9e:	b083      	sub	sp, #12
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa6:	f383 8811 	msr	BASEPRI, r3
 8016aaa:	f3bf 8f6f 	isb	sy
 8016aae:	f3bf 8f4f 	dsb	sy
 8016ab2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016ab4:	4b0e      	ldr	r3, [pc, #56]	; (8016af0 <vPortEnterCritical+0x54>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	3301      	adds	r3, #1
 8016aba:	4a0d      	ldr	r2, [pc, #52]	; (8016af0 <vPortEnterCritical+0x54>)
 8016abc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016abe:	4b0c      	ldr	r3, [pc, #48]	; (8016af0 <vPortEnterCritical+0x54>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d10e      	bne.n	8016ae4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016ac6:	4b0b      	ldr	r3, [pc, #44]	; (8016af4 <vPortEnterCritical+0x58>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	b2db      	uxtb	r3, r3
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d009      	beq.n	8016ae4 <vPortEnterCritical+0x48>
 8016ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad4:	f383 8811 	msr	BASEPRI, r3
 8016ad8:	f3bf 8f6f 	isb	sy
 8016adc:	f3bf 8f4f 	dsb	sy
 8016ae0:	603b      	str	r3, [r7, #0]
 8016ae2:	e7fe      	b.n	8016ae2 <vPortEnterCritical+0x46>
	}
}
 8016ae4:	bf00      	nop
 8016ae6:	370c      	adds	r7, #12
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aee:	4770      	bx	lr
 8016af0:	20000050 	.word	0x20000050
 8016af4:	e000ed04 	.word	0xe000ed04

08016af8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016af8:	b480      	push	{r7}
 8016afa:	b083      	sub	sp, #12
 8016afc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016afe:	4b11      	ldr	r3, [pc, #68]	; (8016b44 <vPortExitCritical+0x4c>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d109      	bne.n	8016b1a <vPortExitCritical+0x22>
 8016b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b0a:	f383 8811 	msr	BASEPRI, r3
 8016b0e:	f3bf 8f6f 	isb	sy
 8016b12:	f3bf 8f4f 	dsb	sy
 8016b16:	607b      	str	r3, [r7, #4]
 8016b18:	e7fe      	b.n	8016b18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8016b1a:	4b0a      	ldr	r3, [pc, #40]	; (8016b44 <vPortExitCritical+0x4c>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	3b01      	subs	r3, #1
 8016b20:	4a08      	ldr	r2, [pc, #32]	; (8016b44 <vPortExitCritical+0x4c>)
 8016b22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016b24:	4b07      	ldr	r3, [pc, #28]	; (8016b44 <vPortExitCritical+0x4c>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d104      	bne.n	8016b36 <vPortExitCritical+0x3e>
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016b30:	683b      	ldr	r3, [r7, #0]
 8016b32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8016b36:	bf00      	nop
 8016b38:	370c      	adds	r7, #12
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b40:	4770      	bx	lr
 8016b42:	bf00      	nop
 8016b44:	20000050 	.word	0x20000050
	...

08016b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016b50:	f3ef 8009 	mrs	r0, PSP
 8016b54:	f3bf 8f6f 	isb	sy
 8016b58:	4b15      	ldr	r3, [pc, #84]	; (8016bb0 <pxCurrentTCBConst>)
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	f01e 0f10 	tst.w	lr, #16
 8016b60:	bf08      	it	eq
 8016b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b6a:	6010      	str	r0, [r2, #0]
 8016b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016b74:	f380 8811 	msr	BASEPRI, r0
 8016b78:	f3bf 8f4f 	dsb	sy
 8016b7c:	f3bf 8f6f 	isb	sy
 8016b80:	f7ff fa0a 	bl	8015f98 <vTaskSwitchContext>
 8016b84:	f04f 0000 	mov.w	r0, #0
 8016b88:	f380 8811 	msr	BASEPRI, r0
 8016b8c:	bc09      	pop	{r0, r3}
 8016b8e:	6819      	ldr	r1, [r3, #0]
 8016b90:	6808      	ldr	r0, [r1, #0]
 8016b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b96:	f01e 0f10 	tst.w	lr, #16
 8016b9a:	bf08      	it	eq
 8016b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016ba0:	f380 8809 	msr	PSP, r0
 8016ba4:	f3bf 8f6f 	isb	sy
 8016ba8:	4770      	bx	lr
 8016baa:	bf00      	nop
 8016bac:	f3af 8000 	nop.w

08016bb0 <pxCurrentTCBConst>:
 8016bb0:	20000144 	.word	0x20000144
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016bb4:	bf00      	nop
 8016bb6:	bf00      	nop

08016bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8016bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc2:	f383 8811 	msr	BASEPRI, r3
 8016bc6:	f3bf 8f6f 	isb	sy
 8016bca:	f3bf 8f4f 	dsb	sy
 8016bce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016bd0:	f7ff f926 	bl	8015e20 <xTaskIncrementTick>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d003      	beq.n	8016be2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016bda:	4b06      	ldr	r3, [pc, #24]	; (8016bf4 <xPortSysTickHandler+0x3c>)
 8016bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016be0:	601a      	str	r2, [r3, #0]
 8016be2:	2300      	movs	r3, #0
 8016be4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016bec:	bf00      	nop
 8016bee:	3708      	adds	r7, #8
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}
 8016bf4:	e000ed04 	.word	0xe000ed04

08016bf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016bf8:	b480      	push	{r7}
 8016bfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016bfc:	4b0b      	ldr	r3, [pc, #44]	; (8016c2c <vPortSetupTimerInterrupt+0x34>)
 8016bfe:	2200      	movs	r2, #0
 8016c00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016c02:	4b0b      	ldr	r3, [pc, #44]	; (8016c30 <vPortSetupTimerInterrupt+0x38>)
 8016c04:	2200      	movs	r2, #0
 8016c06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016c08:	4b0a      	ldr	r3, [pc, #40]	; (8016c34 <vPortSetupTimerInterrupt+0x3c>)
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	4a0a      	ldr	r2, [pc, #40]	; (8016c38 <vPortSetupTimerInterrupt+0x40>)
 8016c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8016c12:	099b      	lsrs	r3, r3, #6
 8016c14:	4a09      	ldr	r2, [pc, #36]	; (8016c3c <vPortSetupTimerInterrupt+0x44>)
 8016c16:	3b01      	subs	r3, #1
 8016c18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016c1a:	4b04      	ldr	r3, [pc, #16]	; (8016c2c <vPortSetupTimerInterrupt+0x34>)
 8016c1c:	2207      	movs	r2, #7
 8016c1e:	601a      	str	r2, [r3, #0]
}
 8016c20:	bf00      	nop
 8016c22:	46bd      	mov	sp, r7
 8016c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c28:	4770      	bx	lr
 8016c2a:	bf00      	nop
 8016c2c:	e000e010 	.word	0xe000e010
 8016c30:	e000e018 	.word	0xe000e018
 8016c34:	20000054 	.word	0x20000054
 8016c38:	10624dd3 	.word	0x10624dd3
 8016c3c:	e000e014 	.word	0xe000e014

08016c40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016c40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016c50 <vPortEnableVFP+0x10>
 8016c44:	6801      	ldr	r1, [r0, #0]
 8016c46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016c4a:	6001      	str	r1, [r0, #0]
 8016c4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016c4e:	bf00      	nop
 8016c50:	e000ed88 	.word	0xe000ed88

08016c54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016c54:	b480      	push	{r7}
 8016c56:	b085      	sub	sp, #20
 8016c58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016c5a:	f3ef 8305 	mrs	r3, IPSR
 8016c5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	2b0f      	cmp	r3, #15
 8016c64:	d913      	bls.n	8016c8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016c66:	4a16      	ldr	r2, [pc, #88]	; (8016cc0 <vPortValidateInterruptPriority+0x6c>)
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	4413      	add	r3, r2
 8016c6c:	781b      	ldrb	r3, [r3, #0]
 8016c6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016c70:	4b14      	ldr	r3, [pc, #80]	; (8016cc4 <vPortValidateInterruptPriority+0x70>)
 8016c72:	781b      	ldrb	r3, [r3, #0]
 8016c74:	7afa      	ldrb	r2, [r7, #11]
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d209      	bcs.n	8016c8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8016c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c7e:	f383 8811 	msr	BASEPRI, r3
 8016c82:	f3bf 8f6f 	isb	sy
 8016c86:	f3bf 8f4f 	dsb	sy
 8016c8a:	607b      	str	r3, [r7, #4]
 8016c8c:	e7fe      	b.n	8016c8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016c8e:	4b0e      	ldr	r3, [pc, #56]	; (8016cc8 <vPortValidateInterruptPriority+0x74>)
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016c96:	4b0d      	ldr	r3, [pc, #52]	; (8016ccc <vPortValidateInterruptPriority+0x78>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	d909      	bls.n	8016cb2 <vPortValidateInterruptPriority+0x5e>
 8016c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ca2:	f383 8811 	msr	BASEPRI, r3
 8016ca6:	f3bf 8f6f 	isb	sy
 8016caa:	f3bf 8f4f 	dsb	sy
 8016cae:	603b      	str	r3, [r7, #0]
 8016cb0:	e7fe      	b.n	8016cb0 <vPortValidateInterruptPriority+0x5c>
	}
 8016cb2:	bf00      	nop
 8016cb4:	3714      	adds	r7, #20
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbc:	4770      	bx	lr
 8016cbe:	bf00      	nop
 8016cc0:	e000e3f0 	.word	0xe000e3f0
 8016cc4:	20000270 	.word	0x20000270
 8016cc8:	e000ed0c 	.word	0xe000ed0c
 8016ccc:	20000274 	.word	0x20000274

08016cd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b08a      	sub	sp, #40	; 0x28
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016cd8:	2300      	movs	r3, #0
 8016cda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016cdc:	f7fe ffd4 	bl	8015c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016ce0:	4b57      	ldr	r3, [pc, #348]	; (8016e40 <pvPortMalloc+0x170>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d101      	bne.n	8016cec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016ce8:	f000 f90c 	bl	8016f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016cec:	4b55      	ldr	r3, [pc, #340]	; (8016e44 <pvPortMalloc+0x174>)
 8016cee:	681a      	ldr	r2, [r3, #0]
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	4013      	ands	r3, r2
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	f040 808c 	bne.w	8016e12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d01c      	beq.n	8016d3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8016d00:	2208      	movs	r2, #8
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	4413      	add	r3, r2
 8016d06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f003 0307 	and.w	r3, r3, #7
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d013      	beq.n	8016d3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	f023 0307 	bic.w	r3, r3, #7
 8016d18:	3308      	adds	r3, #8
 8016d1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f003 0307 	and.w	r3, r3, #7
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d009      	beq.n	8016d3a <pvPortMalloc+0x6a>
 8016d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d2a:	f383 8811 	msr	BASEPRI, r3
 8016d2e:	f3bf 8f6f 	isb	sy
 8016d32:	f3bf 8f4f 	dsb	sy
 8016d36:	617b      	str	r3, [r7, #20]
 8016d38:	e7fe      	b.n	8016d38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d068      	beq.n	8016e12 <pvPortMalloc+0x142>
 8016d40:	4b41      	ldr	r3, [pc, #260]	; (8016e48 <pvPortMalloc+0x178>)
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	429a      	cmp	r2, r3
 8016d48:	d863      	bhi.n	8016e12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016d4a:	4b40      	ldr	r3, [pc, #256]	; (8016e4c <pvPortMalloc+0x17c>)
 8016d4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016d4e:	4b3f      	ldr	r3, [pc, #252]	; (8016e4c <pvPortMalloc+0x17c>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d54:	e004      	b.n	8016d60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8016d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d62:	685b      	ldr	r3, [r3, #4]
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d903      	bls.n	8016d72 <pvPortMalloc+0xa2>
 8016d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d1f1      	bne.n	8016d56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016d72:	4b33      	ldr	r3, [pc, #204]	; (8016e40 <pvPortMalloc+0x170>)
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	d04a      	beq.n	8016e12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016d7c:	6a3b      	ldr	r3, [r7, #32]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	2208      	movs	r2, #8
 8016d82:	4413      	add	r3, r2
 8016d84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d88:	681a      	ldr	r2, [r3, #0]
 8016d8a:	6a3b      	ldr	r3, [r7, #32]
 8016d8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d90:	685a      	ldr	r2, [r3, #4]
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	1ad2      	subs	r2, r2, r3
 8016d96:	2308      	movs	r3, #8
 8016d98:	005b      	lsls	r3, r3, #1
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d91e      	bls.n	8016ddc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	4413      	add	r3, r2
 8016da4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016da6:	69bb      	ldr	r3, [r7, #24]
 8016da8:	f003 0307 	and.w	r3, r3, #7
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d009      	beq.n	8016dc4 <pvPortMalloc+0xf4>
 8016db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016db4:	f383 8811 	msr	BASEPRI, r3
 8016db8:	f3bf 8f6f 	isb	sy
 8016dbc:	f3bf 8f4f 	dsb	sy
 8016dc0:	613b      	str	r3, [r7, #16]
 8016dc2:	e7fe      	b.n	8016dc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc6:	685a      	ldr	r2, [r3, #4]
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	1ad2      	subs	r2, r2, r3
 8016dcc:	69bb      	ldr	r3, [r7, #24]
 8016dce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dd2:	687a      	ldr	r2, [r7, #4]
 8016dd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016dd6:	69b8      	ldr	r0, [r7, #24]
 8016dd8:	f000 f8f6 	bl	8016fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016ddc:	4b1a      	ldr	r3, [pc, #104]	; (8016e48 <pvPortMalloc+0x178>)
 8016dde:	681a      	ldr	r2, [r3, #0]
 8016de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de2:	685b      	ldr	r3, [r3, #4]
 8016de4:	1ad3      	subs	r3, r2, r3
 8016de6:	4a18      	ldr	r2, [pc, #96]	; (8016e48 <pvPortMalloc+0x178>)
 8016de8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016dea:	4b17      	ldr	r3, [pc, #92]	; (8016e48 <pvPortMalloc+0x178>)
 8016dec:	681a      	ldr	r2, [r3, #0]
 8016dee:	4b18      	ldr	r3, [pc, #96]	; (8016e50 <pvPortMalloc+0x180>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d203      	bcs.n	8016dfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016df6:	4b14      	ldr	r3, [pc, #80]	; (8016e48 <pvPortMalloc+0x178>)
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	4a15      	ldr	r2, [pc, #84]	; (8016e50 <pvPortMalloc+0x180>)
 8016dfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e00:	685a      	ldr	r2, [r3, #4]
 8016e02:	4b10      	ldr	r3, [pc, #64]	; (8016e44 <pvPortMalloc+0x174>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	431a      	orrs	r2, r3
 8016e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e0e:	2200      	movs	r2, #0
 8016e10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016e12:	f7fe ff47 	bl	8015ca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016e16:	69fb      	ldr	r3, [r7, #28]
 8016e18:	f003 0307 	and.w	r3, r3, #7
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d009      	beq.n	8016e34 <pvPortMalloc+0x164>
 8016e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e24:	f383 8811 	msr	BASEPRI, r3
 8016e28:	f3bf 8f6f 	isb	sy
 8016e2c:	f3bf 8f4f 	dsb	sy
 8016e30:	60fb      	str	r3, [r7, #12]
 8016e32:	e7fe      	b.n	8016e32 <pvPortMalloc+0x162>
	return pvReturn;
 8016e34:	69fb      	ldr	r3, [r7, #28]
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3728      	adds	r7, #40	; 0x28
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	200019f0 	.word	0x200019f0
 8016e44:	200019fc 	.word	0x200019fc
 8016e48:	200019f4 	.word	0x200019f4
 8016e4c:	200019e8 	.word	0x200019e8
 8016e50:	200019f8 	.word	0x200019f8

08016e54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b086      	sub	sp, #24
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d046      	beq.n	8016ef4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016e66:	2308      	movs	r3, #8
 8016e68:	425b      	negs	r3, r3
 8016e6a:	697a      	ldr	r2, [r7, #20]
 8016e6c:	4413      	add	r3, r2
 8016e6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	685a      	ldr	r2, [r3, #4]
 8016e78:	4b20      	ldr	r3, [pc, #128]	; (8016efc <vPortFree+0xa8>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	4013      	ands	r3, r2
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d109      	bne.n	8016e96 <vPortFree+0x42>
 8016e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e86:	f383 8811 	msr	BASEPRI, r3
 8016e8a:	f3bf 8f6f 	isb	sy
 8016e8e:	f3bf 8f4f 	dsb	sy
 8016e92:	60fb      	str	r3, [r7, #12]
 8016e94:	e7fe      	b.n	8016e94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d009      	beq.n	8016eb2 <vPortFree+0x5e>
 8016e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ea2:	f383 8811 	msr	BASEPRI, r3
 8016ea6:	f3bf 8f6f 	isb	sy
 8016eaa:	f3bf 8f4f 	dsb	sy
 8016eae:	60bb      	str	r3, [r7, #8]
 8016eb0:	e7fe      	b.n	8016eb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016eb2:	693b      	ldr	r3, [r7, #16]
 8016eb4:	685a      	ldr	r2, [r3, #4]
 8016eb6:	4b11      	ldr	r3, [pc, #68]	; (8016efc <vPortFree+0xa8>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	4013      	ands	r3, r2
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d019      	beq.n	8016ef4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016ec0:	693b      	ldr	r3, [r7, #16]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d115      	bne.n	8016ef4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016ec8:	693b      	ldr	r3, [r7, #16]
 8016eca:	685a      	ldr	r2, [r3, #4]
 8016ecc:	4b0b      	ldr	r3, [pc, #44]	; (8016efc <vPortFree+0xa8>)
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	43db      	mvns	r3, r3
 8016ed2:	401a      	ands	r2, r3
 8016ed4:	693b      	ldr	r3, [r7, #16]
 8016ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016ed8:	f7fe fed6 	bl	8015c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016edc:	693b      	ldr	r3, [r7, #16]
 8016ede:	685a      	ldr	r2, [r3, #4]
 8016ee0:	4b07      	ldr	r3, [pc, #28]	; (8016f00 <vPortFree+0xac>)
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	4413      	add	r3, r2
 8016ee6:	4a06      	ldr	r2, [pc, #24]	; (8016f00 <vPortFree+0xac>)
 8016ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016eea:	6938      	ldr	r0, [r7, #16]
 8016eec:	f000 f86c 	bl	8016fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016ef0:	f7fe fed8 	bl	8015ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016ef4:	bf00      	nop
 8016ef6:	3718      	adds	r7, #24
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	200019fc 	.word	0x200019fc
 8016f00:	200019f4 	.word	0x200019f4

08016f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016f04:	b480      	push	{r7}
 8016f06:	b085      	sub	sp, #20
 8016f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016f0a:	f241 7370 	movw	r3, #6000	; 0x1770
 8016f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016f10:	4b27      	ldr	r3, [pc, #156]	; (8016fb0 <prvHeapInit+0xac>)
 8016f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	f003 0307 	and.w	r3, r3, #7
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d00c      	beq.n	8016f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	3307      	adds	r3, #7
 8016f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	f023 0307 	bic.w	r3, r3, #7
 8016f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016f2c:	68ba      	ldr	r2, [r7, #8]
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	1ad3      	subs	r3, r2, r3
 8016f32:	4a1f      	ldr	r2, [pc, #124]	; (8016fb0 <prvHeapInit+0xac>)
 8016f34:	4413      	add	r3, r2
 8016f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016f3c:	4a1d      	ldr	r2, [pc, #116]	; (8016fb4 <prvHeapInit+0xb0>)
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016f42:	4b1c      	ldr	r3, [pc, #112]	; (8016fb4 <prvHeapInit+0xb0>)
 8016f44:	2200      	movs	r2, #0
 8016f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	68ba      	ldr	r2, [r7, #8]
 8016f4c:	4413      	add	r3, r2
 8016f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016f50:	2208      	movs	r2, #8
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	1a9b      	subs	r3, r3, r2
 8016f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	f023 0307 	bic.w	r3, r3, #7
 8016f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	4a15      	ldr	r2, [pc, #84]	; (8016fb8 <prvHeapInit+0xb4>)
 8016f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016f66:	4b14      	ldr	r3, [pc, #80]	; (8016fb8 <prvHeapInit+0xb4>)
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016f6e:	4b12      	ldr	r3, [pc, #72]	; (8016fb8 <prvHeapInit+0xb4>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	2200      	movs	r2, #0
 8016f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	68fa      	ldr	r2, [r7, #12]
 8016f7e:	1ad2      	subs	r2, r2, r3
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016f84:	4b0c      	ldr	r3, [pc, #48]	; (8016fb8 <prvHeapInit+0xb4>)
 8016f86:	681a      	ldr	r2, [r3, #0]
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	685b      	ldr	r3, [r3, #4]
 8016f90:	4a0a      	ldr	r2, [pc, #40]	; (8016fbc <prvHeapInit+0xb8>)
 8016f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	4a09      	ldr	r2, [pc, #36]	; (8016fc0 <prvHeapInit+0xbc>)
 8016f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016f9c:	4b09      	ldr	r3, [pc, #36]	; (8016fc4 <prvHeapInit+0xc0>)
 8016f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016fa2:	601a      	str	r2, [r3, #0]
}
 8016fa4:	bf00      	nop
 8016fa6:	3714      	adds	r7, #20
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fae:	4770      	bx	lr
 8016fb0:	20000278 	.word	0x20000278
 8016fb4:	200019e8 	.word	0x200019e8
 8016fb8:	200019f0 	.word	0x200019f0
 8016fbc:	200019f8 	.word	0x200019f8
 8016fc0:	200019f4 	.word	0x200019f4
 8016fc4:	200019fc 	.word	0x200019fc

08016fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016fc8:	b480      	push	{r7}
 8016fca:	b085      	sub	sp, #20
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016fd0:	4b28      	ldr	r3, [pc, #160]	; (8017074 <prvInsertBlockIntoFreeList+0xac>)
 8016fd2:	60fb      	str	r3, [r7, #12]
 8016fd4:	e002      	b.n	8016fdc <prvInsertBlockIntoFreeList+0x14>
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	60fb      	str	r3, [r7, #12]
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	687a      	ldr	r2, [r7, #4]
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	d8f7      	bhi.n	8016fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	68ba      	ldr	r2, [r7, #8]
 8016ff0:	4413      	add	r3, r2
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	429a      	cmp	r2, r3
 8016ff6:	d108      	bne.n	801700a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	685a      	ldr	r2, [r3, #4]
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	685b      	ldr	r3, [r3, #4]
 8017000:	441a      	add	r2, r3
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	685b      	ldr	r3, [r3, #4]
 8017012:	68ba      	ldr	r2, [r7, #8]
 8017014:	441a      	add	r2, r3
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	429a      	cmp	r2, r3
 801701c:	d118      	bne.n	8017050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	681a      	ldr	r2, [r3, #0]
 8017022:	4b15      	ldr	r3, [pc, #84]	; (8017078 <prvInsertBlockIntoFreeList+0xb0>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	429a      	cmp	r2, r3
 8017028:	d00d      	beq.n	8017046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	685a      	ldr	r2, [r3, #4]
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	685b      	ldr	r3, [r3, #4]
 8017034:	441a      	add	r2, r3
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	681a      	ldr	r2, [r3, #0]
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	601a      	str	r2, [r3, #0]
 8017044:	e008      	b.n	8017058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017046:	4b0c      	ldr	r3, [pc, #48]	; (8017078 <prvInsertBlockIntoFreeList+0xb0>)
 8017048:	681a      	ldr	r2, [r3, #0]
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	601a      	str	r2, [r3, #0]
 801704e:	e003      	b.n	8017058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	681a      	ldr	r2, [r3, #0]
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017058:	68fa      	ldr	r2, [r7, #12]
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	429a      	cmp	r2, r3
 801705e:	d002      	beq.n	8017066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	687a      	ldr	r2, [r7, #4]
 8017064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017066:	bf00      	nop
 8017068:	3714      	adds	r7, #20
 801706a:	46bd      	mov	sp, r7
 801706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017070:	4770      	bx	lr
 8017072:	bf00      	nop
 8017074:	200019e8 	.word	0x200019e8
 8017078:	200019f0 	.word	0x200019f0

0801707c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 801707c:	b5b0      	push	{r4, r5, r7, lr}
 801707e:	b092      	sub	sp, #72	; 0x48
 8017080:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8017082:	f7f5 f8c2 	bl	800c20a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8017086:	f000 f873 	bl	8017170 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 801708a:	f000 f93d 	bl	8017308 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 801708e:	f000 f90d 	bl	80172ac <MX_LPUART1_UART_Init>

	/* USER CODE BEGIN 2 */

	//TCP/IP stack initialization
	error = netInit();
 8017092:	f7ea fc4f 	bl	8001934 <netInit>
 8017096:	4603      	mov	r3, r0
 8017098:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	//Configure the first network interface
	interface = &netInterface[0];
 801709c:	4b2b      	ldr	r3, [pc, #172]	; (801714c <main+0xd0>)
 801709e:	643b      	str	r3, [r7, #64]	; 0x40

	//Get default PPP settings
	pppGetDefaultSettings(&pppSettings);
 80170a0:	482b      	ldr	r0, [pc, #172]	; (8017150 <main+0xd4>)
 80170a2:	f7f3 fb77 	bl	800a794 <pppGetDefaultSettings>
	//Select the underlying interface
	pppSettings.interface = interface;
 80170a6:	4a2a      	ldr	r2, [pc, #168]	; (8017150 <main+0xd4>)
 80170a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170aa:	6013      	str	r3, [r2, #0]
	//Default async control character map
	pppSettings.accm = 0x00000000;
 80170ac:	4b28      	ldr	r3, [pc, #160]	; (8017150 <main+0xd4>)
 80170ae:	2200      	movs	r2, #0
 80170b0:	609a      	str	r2, [r3, #8]
	//Allowed authentication protocols
	pppSettings.authProtocol = PPP_AUTH_PROTOCOL_PAP
 80170b2:	4b27      	ldr	r3, [pc, #156]	; (8017150 <main+0xd4>)
 80170b4:	2203      	movs	r2, #3
 80170b6:	60da      	str	r2, [r3, #12]
			| PPP_AUTH_PROTOCOL_CHAP_MD5;
	//Initialize PPP
	error = pppInit(&pppContext, &pppSettings);
 80170b8:	4925      	ldr	r1, [pc, #148]	; (8017150 <main+0xd4>)
 80170ba:	4826      	ldr	r0, [pc, #152]	; (8017154 <main+0xd8>)
 80170bc:	f7f3 fb88 	bl	800a7d0 <pppInit>
 80170c0:	4603      	mov	r3, r0
 80170c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	//Set interface name
	netSetInterfaceName(interface, APP_IF_NAME);
 80170c6:	4924      	ldr	r1, [pc, #144]	; (8017158 <main+0xdc>)
 80170c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80170ca:	f7ea fcf7 	bl	8001abc <netSetInterfaceName>
	//Select the relevant UART driver
	netSetUartDriver(interface, &uartDriver);
 80170ce:	4923      	ldr	r1, [pc, #140]	; (801715c <main+0xe0>)
 80170d0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80170d2:	f7ea fd33 	bl	8001b3c <netSetUartDriver>

	//Initialize network interface
	error = netConfigInterface(interface);
 80170d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80170d8:	f7ea fd4e 	bl	8001b78 <netConfigInterface>
 80170dc:	4603      	mov	r3, r0
 80170de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Task */
	osThreadDef(osMainTask, mainTask, osPriorityNormal, 0, 128);
 80170e2:	4b1f      	ldr	r3, [pc, #124]	; (8017160 <main+0xe4>)
 80170e4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80170e8:	461d      	mov	r5, r3
 80170ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80170ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170ee:	682b      	ldr	r3, [r5, #0]
 80170f0:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osMainTask), NULL);
 80170f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80170f6:	2100      	movs	r1, #0
 80170f8:	4618      	mov	r0, r3
 80170fa:	f7fd fa37 	bl	801456c <osThreadCreate>
 80170fe:	4602      	mov	r2, r0
 8017100:	4b18      	ldr	r3, [pc, #96]	; (8017164 <main+0xe8>)
 8017102:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(osLedBlueTask, ledBlueTask, osPriorityNormal, 0, 32);
 8017104:	4b18      	ldr	r3, [pc, #96]	; (8017168 <main+0xec>)
 8017106:	f107 0418 	add.w	r4, r7, #24
 801710a:	461d      	mov	r5, r3
 801710c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801710e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017110:	682b      	ldr	r3, [r5, #0]
 8017112:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osLedBlueTask), NULL);
 8017114:	f107 0318 	add.w	r3, r7, #24
 8017118:	2100      	movs	r1, #0
 801711a:	4618      	mov	r0, r3
 801711c:	f7fd fa26 	bl	801456c <osThreadCreate>
 8017120:	4602      	mov	r2, r0
 8017122:	4b10      	ldr	r3, [pc, #64]	; (8017164 <main+0xe8>)
 8017124:	601a      	str	r2, [r3, #0]

	osThreadDef(osLedRedTask, ledRedTask, osPriorityNormal, 0, 32);
 8017126:	4b11      	ldr	r3, [pc, #68]	; (801716c <main+0xf0>)
 8017128:	1d3c      	adds	r4, r7, #4
 801712a:	461d      	mov	r5, r3
 801712c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801712e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017130:	682b      	ldr	r3, [r5, #0]
 8017132:	6023      	str	r3, [r4, #0]
	TaskHandle = osThreadCreate(osThread(osLedRedTask), NULL);
 8017134:	1d3b      	adds	r3, r7, #4
 8017136:	2100      	movs	r1, #0
 8017138:	4618      	mov	r0, r3
 801713a:	f7fd fa17 	bl	801456c <osThreadCreate>
 801713e:	4602      	mov	r2, r0
 8017140:	4b08      	ldr	r3, [pc, #32]	; (8017164 <main+0xe8>)
 8017142:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8017144:	f7fd f9ef 	bl	8014526 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8017148:	e7fe      	b.n	8017148 <main+0xcc>
 801714a:	bf00      	nop
 801714c:	20001a9c 	.word	0x20001a9c
 8017150:	2000392c 	.word	0x2000392c
 8017154:	200039c4 	.word	0x200039c4
 8017158:	0801a48c 	.word	0x0801a48c
 801715c:	0801a834 	.word	0x0801a834
 8017160:	0801a4a0 	.word	0x0801a4a0
 8017164:	20007158 	.word	0x20007158
 8017168:	0801a4c4 	.word	0x0801a4c4
 801716c:	0801a4e8 	.word	0x0801a4e8

08017170 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8017170:	b580      	push	{r7, lr}
 8017172:	b0ba      	sub	sp, #232	; 0xe8
 8017174:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8017176:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801717a:	2244      	movs	r2, #68	; 0x44
 801717c:	2100      	movs	r1, #0
 801717e:	4618      	mov	r0, r3
 8017180:	f001 f8a6 	bl	80182d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8017184:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017188:	2200      	movs	r2, #0
 801718a:	601a      	str	r2, [r3, #0]
 801718c:	605a      	str	r2, [r3, #4]
 801718e:	609a      	str	r2, [r3, #8]
 8017190:	60da      	str	r2, [r3, #12]
 8017192:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8017194:	1d3b      	adds	r3, r7, #4
 8017196:	228c      	movs	r2, #140	; 0x8c
 8017198:	2100      	movs	r1, #0
 801719a:	4618      	mov	r0, r3
 801719c:	f001 f898 	bl	80182d0 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80171a0:	f7f6 ffa6 	bl	800e0f0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80171a4:	4b40      	ldr	r3, [pc, #256]	; (80172a8 <SystemClock_Config+0x138>)
 80171a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80171aa:	4a3f      	ldr	r2, [pc, #252]	; (80172a8 <SystemClock_Config+0x138>)
 80171ac:	f023 0318 	bic.w	r3, r3, #24
 80171b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80171b4:	2314      	movs	r3, #20
 80171b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80171ba:	2301      	movs	r3, #1
 80171bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80171c0:	2301      	movs	r3, #1
 80171c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80171c6:	2300      	movs	r3, #0
 80171c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80171cc:	2390      	movs	r3, #144	; 0x90
 80171ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80171d2:	2302      	movs	r3, #2
 80171d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80171d8:	2301      	movs	r3, #1
 80171da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLM = 5;
 80171de:	2305      	movs	r3, #5
 80171e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLN = 71;
 80171e4:	2347      	movs	r3, #71	; 0x47
 80171e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80171ea:	2302      	movs	r3, #2
 80171ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80171f0:	2302      	movs	r3, #2
 80171f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80171f6:	2306      	movs	r3, #6
 80171f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80171fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8017200:	4618      	mov	r0, r3
 8017202:	f7f7 f809 	bl	800e218 <HAL_RCC_OscConfig>
 8017206:	4603      	mov	r3, r0
 8017208:	2b00      	cmp	r3, #0
 801720a:	d001      	beq.n	8017210 <SystemClock_Config+0xa0>
		Error_Handler();
 801720c:	f000 f932 	bl	8017474 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8017210:	230f      	movs	r3, #15
 8017212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017216:	2303      	movs	r3, #3
 8017218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 801721c:	2390      	movs	r3, #144	; 0x90
 801721e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8017222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801722a:	2300      	movs	r3, #0
 801722c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8017230:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017234:	2100      	movs	r1, #0
 8017236:	4618      	mov	r0, r3
 8017238:	f7f7 fbdc 	bl	800e9f4 <HAL_RCC_ClockConfig>
 801723c:	4603      	mov	r3, r0
 801723e:	2b00      	cmp	r3, #0
 8017240:	d001      	beq.n	8017246 <SystemClock_Config+0xd6>
		Error_Handler();
 8017242:	f000 f917 	bl	8017474 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8017246:	f242 0322 	movw	r3, #8226	; 0x2022
 801724a:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_USB;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 801724c:	2300      	movs	r3, #0
 801724e:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8017250:	2300      	movs	r3, #0
 8017252:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8017254:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8017258:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 801725a:	2301      	movs	r3, #1
 801725c:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 801725e:	2305      	movs	r3, #5
 8017260:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8017262:	2314      	movs	r3, #20
 8017264:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8017266:	2302      	movs	r3, #2
 8017268:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801726a:	2302      	movs	r3, #2
 801726c:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801726e:	2302      	movs	r3, #2
 8017270:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8017272:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8017276:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8017278:	1d3b      	adds	r3, r7, #4
 801727a:	4618      	mov	r0, r3
 801727c:	f7f7 fdbe 	bl	800edfc <HAL_RCCEx_PeriphCLKConfig>
 8017280:	4603      	mov	r3, r0
 8017282:	2b00      	cmp	r3, #0
 8017284:	d001      	beq.n	801728a <SystemClock_Config+0x11a>
		Error_Handler();
 8017286:	f000 f8f5 	bl	8017474 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 801728a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801728e:	f7f6 ff4d 	bl	800e12c <HAL_PWREx_ControlVoltageScaling>
 8017292:	4603      	mov	r3, r0
 8017294:	2b00      	cmp	r3, #0
 8017296:	d001      	beq.n	801729c <SystemClock_Config+0x12c>
			!= HAL_OK) {
		Error_Handler();
 8017298:	f000 f8ec 	bl	8017474 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 801729c:	f7f8 f8a6 	bl	800f3ec <HAL_RCCEx_EnableMSIPLLMode>
}
 80172a0:	bf00      	nop
 80172a2:	37e8      	adds	r7, #232	; 0xe8
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}
 80172a8:	40021000 	.word	0x40021000

080172ac <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80172ac:	b580      	push	{r7, lr}
 80172ae:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80172b0:	4b12      	ldr	r3, [pc, #72]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172b2:	4a13      	ldr	r2, [pc, #76]	; (8017300 <MX_LPUART1_UART_Init+0x54>)
 80172b4:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 209700;
 80172b6:	4b11      	ldr	r3, [pc, #68]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172b8:	4a12      	ldr	r2, [pc, #72]	; (8017304 <MX_LPUART1_UART_Init+0x58>)
 80172ba:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80172bc:	4b0f      	ldr	r3, [pc, #60]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172c2:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80172c4:	4b0d      	ldr	r3, [pc, #52]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172c6:	2200      	movs	r2, #0
 80172c8:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80172ca:	4b0c      	ldr	r3, [pc, #48]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172cc:	2200      	movs	r2, #0
 80172ce:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80172d0:	4b0a      	ldr	r3, [pc, #40]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172d2:	220c      	movs	r2, #12
 80172d4:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80172d6:	4b09      	ldr	r3, [pc, #36]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172d8:	2200      	movs	r2, #0
 80172da:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80172dc:	4b07      	ldr	r3, [pc, #28]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172de:	2200      	movs	r2, #0
 80172e0:	621a      	str	r2, [r3, #32]
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80172e2:	4b06      	ldr	r3, [pc, #24]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172e4:	2200      	movs	r2, #0
 80172e6:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80172e8:	4804      	ldr	r0, [pc, #16]	; (80172fc <MX_LPUART1_UART_Init+0x50>)
 80172ea:	f7f8 fa59 	bl	800f7a0 <HAL_UART_Init>
 80172ee:	4603      	mov	r3, r0
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d001      	beq.n	80172f8 <MX_LPUART1_UART_Init+0x4c>
		Error_Handler();
 80172f4:	f000 f8be 	bl	8017474 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80172f8:	bf00      	nop
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	200038ac 	.word	0x200038ac
 8017300:	40008000 	.word	0x40008000
 8017304:	00033324 	.word	0x00033324

08017308 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8017308:	b580      	push	{r7, lr}
 801730a:	b08a      	sub	sp, #40	; 0x28
 801730c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 801730e:	f107 0314 	add.w	r3, r7, #20
 8017312:	2200      	movs	r2, #0
 8017314:	601a      	str	r2, [r3, #0]
 8017316:	605a      	str	r2, [r3, #4]
 8017318:	609a      	str	r2, [r3, #8]
 801731a:	60da      	str	r2, [r3, #12]
 801731c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 801731e:	4b3d      	ldr	r3, [pc, #244]	; (8017414 <MX_GPIO_Init+0x10c>)
 8017320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017322:	4a3c      	ldr	r2, [pc, #240]	; (8017414 <MX_GPIO_Init+0x10c>)
 8017324:	f043 0304 	orr.w	r3, r3, #4
 8017328:	64d3      	str	r3, [r2, #76]	; 0x4c
 801732a:	4b3a      	ldr	r3, [pc, #232]	; (8017414 <MX_GPIO_Init+0x10c>)
 801732c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801732e:	f003 0304 	and.w	r3, r3, #4
 8017332:	613b      	str	r3, [r7, #16]
 8017334:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8017336:	4b37      	ldr	r3, [pc, #220]	; (8017414 <MX_GPIO_Init+0x10c>)
 8017338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801733a:	4a36      	ldr	r2, [pc, #216]	; (8017414 <MX_GPIO_Init+0x10c>)
 801733c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017342:	4b34      	ldr	r3, [pc, #208]	; (8017414 <MX_GPIO_Init+0x10c>)
 8017344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801734a:	60fb      	str	r3, [r7, #12]
 801734c:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 801734e:	4b31      	ldr	r3, [pc, #196]	; (8017414 <MX_GPIO_Init+0x10c>)
 8017350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017352:	4a30      	ldr	r2, [pc, #192]	; (8017414 <MX_GPIO_Init+0x10c>)
 8017354:	f043 0302 	orr.w	r3, r3, #2
 8017358:	64d3      	str	r3, [r2, #76]	; 0x4c
 801735a:	4b2e      	ldr	r3, [pc, #184]	; (8017414 <MX_GPIO_Init+0x10c>)
 801735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801735e:	f003 0302 	and.w	r3, r3, #2
 8017362:	60bb      	str	r3, [r7, #8]
 8017364:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 8017366:	4b2b      	ldr	r3, [pc, #172]	; (8017414 <MX_GPIO_Init+0x10c>)
 8017368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801736a:	4a2a      	ldr	r2, [pc, #168]	; (8017414 <MX_GPIO_Init+0x10c>)
 801736c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017372:	4b28      	ldr	r3, [pc, #160]	; (8017414 <MX_GPIO_Init+0x10c>)
 8017374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801737a:	607b      	str	r3, [r7, #4]
 801737c:	687b      	ldr	r3, [r7, #4]
	;
	HAL_PWREx_EnableVddIO2();
 801737e:	f7f6 ff3b 	bl	800e1f8 <HAL_PWREx_EnableVddIO2>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8017382:	2200      	movs	r2, #0
 8017384:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8017388:	4823      	ldr	r0, [pc, #140]	; (8017418 <MX_GPIO_Init+0x110>)
 801738a:	f7f5 fa75 	bl	800c878 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 801738e:	2200      	movs	r2, #0
 8017390:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8017394:	4821      	ldr	r0, [pc, #132]	; (801741c <MX_GPIO_Init+0x114>)
 8017396:	f7f5 fa6f 	bl	800c878 <HAL_GPIO_WritePin>
			USB_PowerSwitchOn_Pin | SMPS_V1_Pin | SMPS_EN_Pin | SMPS_SW_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 801739a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801739e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80173a0:	4b1f      	ldr	r3, [pc, #124]	; (8017420 <MX_GPIO_Init+0x118>)
 80173a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173a4:	2300      	movs	r3, #0
 80173a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80173a8:	f107 0314 	add.w	r3, r7, #20
 80173ac:	4619      	mov	r1, r3
 80173ae:	481d      	ldr	r0, [pc, #116]	; (8017424 <MX_GPIO_Init+0x11c>)
 80173b0:	f7f5 f8d0 	bl	800c554 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 80173b4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80173b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80173ba:	2301      	movs	r3, #1
 80173bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173be:	2300      	movs	r3, #0
 80173c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80173c2:	2300      	movs	r3, #0
 80173c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80173c6:	f107 0314 	add.w	r3, r7, #20
 80173ca:	4619      	mov	r1, r3
 80173cc:	4812      	ldr	r0, [pc, #72]	; (8017418 <MX_GPIO_Init+0x110>)
 80173ce:	f7f5 f8c1 	bl	800c554 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin | SMPS_PG_Pin;
 80173d2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80173d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80173d8:	2300      	movs	r3, #0
 80173da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173dc:	2300      	movs	r3, #0
 80173de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80173e0:	f107 0314 	add.w	r3, r7, #20
 80173e4:	4619      	mov	r1, r3
 80173e6:	480d      	ldr	r0, [pc, #52]	; (801741c <MX_GPIO_Init+0x114>)
 80173e8:	f7f5 f8b4 	bl	800c554 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin | SMPS_V1_Pin | SMPS_EN_Pin
 80173ec:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 80173f0:	617b      	str	r3, [r7, #20]
			| SMPS_SW_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80173f2:	2301      	movs	r3, #1
 80173f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173f6:	2300      	movs	r3, #0
 80173f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80173fa:	2300      	movs	r3, #0
 80173fc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80173fe:	f107 0314 	add.w	r3, r7, #20
 8017402:	4619      	mov	r1, r3
 8017404:	4805      	ldr	r0, [pc, #20]	; (801741c <MX_GPIO_Init+0x114>)
 8017406:	f7f5 f8a5 	bl	800c554 <HAL_GPIO_Init>

}
 801740a:	bf00      	nop
 801740c:	3728      	adds	r7, #40	; 0x28
 801740e:	46bd      	mov	sp, r7
 8017410:	bd80      	pop	{r7, pc}
 8017412:	bf00      	nop
 8017414:	40021000 	.word	0x40021000
 8017418:	48000400 	.word	0x48000400
 801741c:	48001800 	.word	0x48001800
 8017420:	10110000 	.word	0x10110000
 8017424:	48000800 	.word	0x48000800

08017428 <mainTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void mainTask(void const * argument) {
 8017428:	b580      	push	{r7, lr}
 801742a:	b082      	sub	sp, #8
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]

	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8017430:	f000 fb64 	bl	8017afc <MX_USB_HOST_Init>

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
 8017434:	e7fe      	b.n	8017434 <mainTask+0xc>
	...

08017438 <ledBlueTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void ledBlueTask(void const * argument) {
 8017438:	b580      	push	{r7, lr}
 801743a:	b082      	sub	sp, #8
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 8017440:	20c8      	movs	r0, #200	; 0xc8
 8017442:	f7fd f8ba 	bl	80145ba <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8017446:	2180      	movs	r1, #128	; 0x80
 8017448:	4801      	ldr	r0, [pc, #4]	; (8017450 <ledBlueTask+0x18>)
 801744a:	f7f5 fa2d 	bl	800c8a8 <HAL_GPIO_TogglePin>
		osDelay(200);
 801744e:	e7f7      	b.n	8017440 <ledBlueTask+0x8>
 8017450:	48000400 	.word	0x48000400

08017454 <ledRedTask>:
 * @brief  Function implementing the Task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void ledRedTask(void const * argument) {
 8017454:	b580      	push	{r7, lr}
 8017456:	b082      	sub	sp, #8
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(400);
 801745c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8017460:	f7fd f8ab 	bl	80145ba <osDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8017464:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8017468:	4801      	ldr	r0, [pc, #4]	; (8017470 <ledRedTask+0x1c>)
 801746a:	f7f5 fa1d 	bl	800c8a8 <HAL_GPIO_TogglePin>
		osDelay(400);
 801746e:	e7f5      	b.n	801745c <ledRedTask+0x8>
 8017470:	48000400 	.word	0x48000400

08017474 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8017474:	b480      	push	{r7}
 8017476:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8017478:	bf00      	nop
 801747a:	46bd      	mov	sp, r7
 801747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017480:	4770      	bx	lr
	...

08017484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801748a:	4b11      	ldr	r3, [pc, #68]	; (80174d0 <HAL_MspInit+0x4c>)
 801748c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801748e:	4a10      	ldr	r2, [pc, #64]	; (80174d0 <HAL_MspInit+0x4c>)
 8017490:	f043 0301 	orr.w	r3, r3, #1
 8017494:	6613      	str	r3, [r2, #96]	; 0x60
 8017496:	4b0e      	ldr	r3, [pc, #56]	; (80174d0 <HAL_MspInit+0x4c>)
 8017498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801749a:	f003 0301 	and.w	r3, r3, #1
 801749e:	607b      	str	r3, [r7, #4]
 80174a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80174a2:	4b0b      	ldr	r3, [pc, #44]	; (80174d0 <HAL_MspInit+0x4c>)
 80174a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80174a6:	4a0a      	ldr	r2, [pc, #40]	; (80174d0 <HAL_MspInit+0x4c>)
 80174a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80174ac:	6593      	str	r3, [r2, #88]	; 0x58
 80174ae:	4b08      	ldr	r3, [pc, #32]	; (80174d0 <HAL_MspInit+0x4c>)
 80174b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80174b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80174b6:	603b      	str	r3, [r7, #0]
 80174b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80174ba:	2200      	movs	r2, #0
 80174bc:	210f      	movs	r1, #15
 80174be:	f06f 0001 	mvn.w	r0, #1
 80174c2:	f7f5 f810 	bl	800c4e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80174c6:	bf00      	nop
 80174c8:	3708      	adds	r7, #8
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	40021000 	.word	0x40021000

080174d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b08a      	sub	sp, #40	; 0x28
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80174dc:	f107 0314 	add.w	r3, r7, #20
 80174e0:	2200      	movs	r2, #0
 80174e2:	601a      	str	r2, [r3, #0]
 80174e4:	605a      	str	r2, [r3, #4]
 80174e6:	609a      	str	r2, [r3, #8]
 80174e8:	60da      	str	r2, [r3, #12]
 80174ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	4a18      	ldr	r2, [pc, #96]	; (8017554 <HAL_UART_MspInit+0x80>)
 80174f2:	4293      	cmp	r3, r2
 80174f4:	d12a      	bne.n	801754c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80174f6:	4b18      	ldr	r3, [pc, #96]	; (8017558 <HAL_UART_MspInit+0x84>)
 80174f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80174fa:	4a17      	ldr	r2, [pc, #92]	; (8017558 <HAL_UART_MspInit+0x84>)
 80174fc:	f043 0301 	orr.w	r3, r3, #1
 8017500:	65d3      	str	r3, [r2, #92]	; 0x5c
 8017502:	4b15      	ldr	r3, [pc, #84]	; (8017558 <HAL_UART_MspInit+0x84>)
 8017504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017506:	f003 0301 	and.w	r3, r3, #1
 801750a:	613b      	str	r3, [r7, #16]
 801750c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801750e:	4b12      	ldr	r3, [pc, #72]	; (8017558 <HAL_UART_MspInit+0x84>)
 8017510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017512:	4a11      	ldr	r2, [pc, #68]	; (8017558 <HAL_UART_MspInit+0x84>)
 8017514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017518:	64d3      	str	r3, [r2, #76]	; 0x4c
 801751a:	4b0f      	ldr	r3, [pc, #60]	; (8017558 <HAL_UART_MspInit+0x84>)
 801751c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017522:	60fb      	str	r3, [r7, #12]
 8017524:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8017526:	f7f6 fe67 	bl	800e1f8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 801752a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801752e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017530:	2302      	movs	r3, #2
 8017532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017534:	2300      	movs	r3, #0
 8017536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017538:	2303      	movs	r3, #3
 801753a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801753c:	2308      	movs	r3, #8
 801753e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017540:	f107 0314 	add.w	r3, r7, #20
 8017544:	4619      	mov	r1, r3
 8017546:	4805      	ldr	r0, [pc, #20]	; (801755c <HAL_UART_MspInit+0x88>)
 8017548:	f7f5 f804 	bl	800c554 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 801754c:	bf00      	nop
 801754e:	3728      	adds	r7, #40	; 0x28
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}
 8017554:	40008000 	.word	0x40008000
 8017558:	40021000 	.word	0x40021000
 801755c:	48001800 	.word	0x48001800

08017560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017560:	b480      	push	{r7}
 8017562:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8017564:	bf00      	nop
 8017566:	46bd      	mov	sp, r7
 8017568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756c:	4770      	bx	lr

0801756e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801756e:	b480      	push	{r7}
 8017570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017572:	e7fe      	b.n	8017572 <HardFault_Handler+0x4>

08017574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017574:	b480      	push	{r7}
 8017576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017578:	e7fe      	b.n	8017578 <MemManage_Handler+0x4>

0801757a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801757a:	b480      	push	{r7}
 801757c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801757e:	e7fe      	b.n	801757e <BusFault_Handler+0x4>

08017580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017580:	b480      	push	{r7}
 8017582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017584:	e7fe      	b.n	8017584 <UsageFault_Handler+0x4>

08017586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017586:	b480      	push	{r7}
 8017588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801758a:	bf00      	nop
 801758c:	46bd      	mov	sp, r7
 801758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017592:	4770      	bx	lr

08017594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017598:	f7f4 fe8a 	bl	800c2b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 801759c:	f7fe ff18 	bl	80163d0 <xTaskGetSchedulerState>
 80175a0:	4603      	mov	r3, r0
 80175a2:	2b01      	cmp	r3, #1
 80175a4:	d001      	beq.n	80175aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80175a6:	f7ff fb07 	bl	8016bb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80175aa:	bf00      	nop
 80175ac:	bd80      	pop	{r7, pc}
	...

080175b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80175b4:	4802      	ldr	r0, [pc, #8]	; (80175c0 <OTG_FS_IRQHandler+0x10>)
 80175b6:	f7f5 fc11 	bl	800cddc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80175ba:	bf00      	nop
 80175bc:	bd80      	pop	{r7, pc}
 80175be:	bf00      	nop
 80175c0:	2000764c 	.word	0x2000764c

080175c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b086      	sub	sp, #24
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	60f8      	str	r0, [r7, #12]
 80175cc:	60b9      	str	r1, [r7, #8]
 80175ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80175d0:	2300      	movs	r3, #0
 80175d2:	617b      	str	r3, [r7, #20]
 80175d4:	e00a      	b.n	80175ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80175d6:	f3af 8000 	nop.w
 80175da:	4601      	mov	r1, r0
 80175dc:	68bb      	ldr	r3, [r7, #8]
 80175de:	1c5a      	adds	r2, r3, #1
 80175e0:	60ba      	str	r2, [r7, #8]
 80175e2:	b2ca      	uxtb	r2, r1
 80175e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	3301      	adds	r3, #1
 80175ea:	617b      	str	r3, [r7, #20]
 80175ec:	697a      	ldr	r2, [r7, #20]
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	429a      	cmp	r2, r3
 80175f2:	dbf0      	blt.n	80175d6 <_read+0x12>
	}

return len;
 80175f4:	687b      	ldr	r3, [r7, #4]
}
 80175f6:	4618      	mov	r0, r3
 80175f8:	3718      	adds	r7, #24
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}

080175fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80175fe:	b580      	push	{r7, lr}
 8017600:	b086      	sub	sp, #24
 8017602:	af00      	add	r7, sp, #0
 8017604:	60f8      	str	r0, [r7, #12]
 8017606:	60b9      	str	r1, [r7, #8]
 8017608:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801760a:	2300      	movs	r3, #0
 801760c:	617b      	str	r3, [r7, #20]
 801760e:	e009      	b.n	8017624 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8017610:	68bb      	ldr	r3, [r7, #8]
 8017612:	1c5a      	adds	r2, r3, #1
 8017614:	60ba      	str	r2, [r7, #8]
 8017616:	781b      	ldrb	r3, [r3, #0]
 8017618:	4618      	mov	r0, r3
 801761a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801761e:	697b      	ldr	r3, [r7, #20]
 8017620:	3301      	adds	r3, #1
 8017622:	617b      	str	r3, [r7, #20]
 8017624:	697a      	ldr	r2, [r7, #20]
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	429a      	cmp	r2, r3
 801762a:	dbf1      	blt.n	8017610 <_write+0x12>
	}
	return len;
 801762c:	687b      	ldr	r3, [r7, #4]
}
 801762e:	4618      	mov	r0, r3
 8017630:	3718      	adds	r7, #24
 8017632:	46bd      	mov	sp, r7
 8017634:	bd80      	pop	{r7, pc}

08017636 <_close>:

int _close(int file)
{
 8017636:	b480      	push	{r7}
 8017638:	b083      	sub	sp, #12
 801763a:	af00      	add	r7, sp, #0
 801763c:	6078      	str	r0, [r7, #4]
	return -1;
 801763e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017642:	4618      	mov	r0, r3
 8017644:	370c      	adds	r7, #12
 8017646:	46bd      	mov	sp, r7
 8017648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764c:	4770      	bx	lr

0801764e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801764e:	b480      	push	{r7}
 8017650:	b083      	sub	sp, #12
 8017652:	af00      	add	r7, sp, #0
 8017654:	6078      	str	r0, [r7, #4]
 8017656:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017658:	683b      	ldr	r3, [r7, #0]
 801765a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801765e:	605a      	str	r2, [r3, #4]
	return 0;
 8017660:	2300      	movs	r3, #0
}
 8017662:	4618      	mov	r0, r3
 8017664:	370c      	adds	r7, #12
 8017666:	46bd      	mov	sp, r7
 8017668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766c:	4770      	bx	lr

0801766e <_isatty>:

int _isatty(int file)
{
 801766e:	b480      	push	{r7}
 8017670:	b083      	sub	sp, #12
 8017672:	af00      	add	r7, sp, #0
 8017674:	6078      	str	r0, [r7, #4]
	return 1;
 8017676:	2301      	movs	r3, #1
}
 8017678:	4618      	mov	r0, r3
 801767a:	370c      	adds	r7, #12
 801767c:	46bd      	mov	sp, r7
 801767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017682:	4770      	bx	lr

08017684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017684:	b480      	push	{r7}
 8017686:	b085      	sub	sp, #20
 8017688:	af00      	add	r7, sp, #0
 801768a:	60f8      	str	r0, [r7, #12]
 801768c:	60b9      	str	r1, [r7, #8]
 801768e:	607a      	str	r2, [r7, #4]
	return 0;
 8017690:	2300      	movs	r3, #0
}
 8017692:	4618      	mov	r0, r3
 8017694:	3714      	adds	r7, #20
 8017696:	46bd      	mov	sp, r7
 8017698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801769c:	4770      	bx	lr
	...

080176a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b084      	sub	sp, #16
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80176a8:	4b11      	ldr	r3, [pc, #68]	; (80176f0 <_sbrk+0x50>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d102      	bne.n	80176b6 <_sbrk+0x16>
		heap_end = &end;
 80176b0:	4b0f      	ldr	r3, [pc, #60]	; (80176f0 <_sbrk+0x50>)
 80176b2:	4a10      	ldr	r2, [pc, #64]	; (80176f4 <_sbrk+0x54>)
 80176b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80176b6:	4b0e      	ldr	r3, [pc, #56]	; (80176f0 <_sbrk+0x50>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80176bc:	4b0c      	ldr	r3, [pc, #48]	; (80176f0 <_sbrk+0x50>)
 80176be:	681a      	ldr	r2, [r3, #0]
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	4413      	add	r3, r2
 80176c4:	466a      	mov	r2, sp
 80176c6:	4293      	cmp	r3, r2
 80176c8:	d907      	bls.n	80176da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80176ca:	f000 fd35 	bl	8018138 <__errno>
 80176ce:	4602      	mov	r2, r0
 80176d0:	230c      	movs	r3, #12
 80176d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80176d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176d8:	e006      	b.n	80176e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80176da:	4b05      	ldr	r3, [pc, #20]	; (80176f0 <_sbrk+0x50>)
 80176dc:	681a      	ldr	r2, [r3, #0]
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	4413      	add	r3, r2
 80176e2:	4a03      	ldr	r2, [pc, #12]	; (80176f0 <_sbrk+0x50>)
 80176e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80176e6:	68fb      	ldr	r3, [r7, #12]
}
 80176e8:	4618      	mov	r0, r3
 80176ea:	3710      	adds	r7, #16
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}
 80176f0:	20001a00 	.word	0x20001a00
 80176f4:	20007918 	.word	0x20007918

080176f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80176f8:	b480      	push	{r7}
 80176fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80176fc:	4b17      	ldr	r3, [pc, #92]	; (801775c <SystemInit+0x64>)
 80176fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017702:	4a16      	ldr	r2, [pc, #88]	; (801775c <SystemInit+0x64>)
 8017704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801770c:	4b14      	ldr	r3, [pc, #80]	; (8017760 <SystemInit+0x68>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4a13      	ldr	r2, [pc, #76]	; (8017760 <SystemInit+0x68>)
 8017712:	f043 0301 	orr.w	r3, r3, #1
 8017716:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8017718:	4b11      	ldr	r3, [pc, #68]	; (8017760 <SystemInit+0x68>)
 801771a:	2200      	movs	r2, #0
 801771c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801771e:	4b10      	ldr	r3, [pc, #64]	; (8017760 <SystemInit+0x68>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	4a0f      	ldr	r2, [pc, #60]	; (8017760 <SystemInit+0x68>)
 8017724:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8017728:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 801772c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801772e:	4b0c      	ldr	r3, [pc, #48]	; (8017760 <SystemInit+0x68>)
 8017730:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017734:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8017736:	4b0a      	ldr	r3, [pc, #40]	; (8017760 <SystemInit+0x68>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	4a09      	ldr	r2, [pc, #36]	; (8017760 <SystemInit+0x68>)
 801773c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017740:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8017742:	4b07      	ldr	r3, [pc, #28]	; (8017760 <SystemInit+0x68>)
 8017744:	2200      	movs	r2, #0
 8017746:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017748:	4b04      	ldr	r3, [pc, #16]	; (801775c <SystemInit+0x64>)
 801774a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801774e:	609a      	str	r2, [r3, #8]
#endif
}
 8017750:	bf00      	nop
 8017752:	46bd      	mov	sp, r7
 8017754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017758:	4770      	bx	lr
 801775a:	bf00      	nop
 801775c:	e000ed00 	.word	0xe000ed00
 8017760:	40021000 	.word	0x40021000

08017764 <__NVIC_SetPriorityGrouping>:
{
 8017764:	b480      	push	{r7}
 8017766:	b085      	sub	sp, #20
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	f003 0307 	and.w	r3, r3, #7
 8017772:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017774:	4b0c      	ldr	r3, [pc, #48]	; (80177a8 <__NVIC_SetPriorityGrouping+0x44>)
 8017776:	68db      	ldr	r3, [r3, #12]
 8017778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801777a:	68ba      	ldr	r2, [r7, #8]
 801777c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017780:	4013      	ands	r3, r2
 8017782:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801778c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8017790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017796:	4a04      	ldr	r2, [pc, #16]	; (80177a8 <__NVIC_SetPriorityGrouping+0x44>)
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	60d3      	str	r3, [r2, #12]
}
 801779c:	bf00      	nop
 801779e:	3714      	adds	r7, #20
 80177a0:	46bd      	mov	sp, r7
 80177a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a6:	4770      	bx	lr
 80177a8:	e000ed00 	.word	0xe000ed00

080177ac <__NVIC_EnableIRQ>:
{
 80177ac:	b480      	push	{r7}
 80177ae:	b083      	sub	sp, #12
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	4603      	mov	r3, r0
 80177b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80177b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	db0b      	blt.n	80177d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80177be:	79fb      	ldrb	r3, [r7, #7]
 80177c0:	f003 021f 	and.w	r2, r3, #31
 80177c4:	4907      	ldr	r1, [pc, #28]	; (80177e4 <__NVIC_EnableIRQ+0x38>)
 80177c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177ca:	095b      	lsrs	r3, r3, #5
 80177cc:	2001      	movs	r0, #1
 80177ce:	fa00 f202 	lsl.w	r2, r0, r2
 80177d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80177d6:	bf00      	nop
 80177d8:	370c      	adds	r7, #12
 80177da:	46bd      	mov	sp, r7
 80177dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e0:	4770      	bx	lr
 80177e2:	bf00      	nop
 80177e4:	e000e100 	.word	0xe000e100

080177e8 <__NVIC_DisableIRQ>:
{
 80177e8:	b480      	push	{r7}
 80177ea:	b083      	sub	sp, #12
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	4603      	mov	r3, r0
 80177f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80177f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	db10      	blt.n	801781c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80177fa:	79fb      	ldrb	r3, [r7, #7]
 80177fc:	f003 021f 	and.w	r2, r3, #31
 8017800:	4909      	ldr	r1, [pc, #36]	; (8017828 <__NVIC_DisableIRQ+0x40>)
 8017802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017806:	095b      	lsrs	r3, r3, #5
 8017808:	2001      	movs	r0, #1
 801780a:	fa00 f202 	lsl.w	r2, r0, r2
 801780e:	3320      	adds	r3, #32
 8017810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8017814:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017818:	f3bf 8f6f 	isb	sy
}
 801781c:	bf00      	nop
 801781e:	370c      	adds	r7, #12
 8017820:	46bd      	mov	sp, r7
 8017822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017826:	4770      	bx	lr
 8017828:	e000e100 	.word	0xe000e100

0801782c <__NVIC_SetPriority>:
{
 801782c:	b480      	push	{r7}
 801782e:	b083      	sub	sp, #12
 8017830:	af00      	add	r7, sp, #0
 8017832:	4603      	mov	r3, r0
 8017834:	6039      	str	r1, [r7, #0]
 8017836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801783c:	2b00      	cmp	r3, #0
 801783e:	db0a      	blt.n	8017856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017840:	683b      	ldr	r3, [r7, #0]
 8017842:	b2da      	uxtb	r2, r3
 8017844:	490c      	ldr	r1, [pc, #48]	; (8017878 <__NVIC_SetPriority+0x4c>)
 8017846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801784a:	0112      	lsls	r2, r2, #4
 801784c:	b2d2      	uxtb	r2, r2
 801784e:	440b      	add	r3, r1
 8017850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017854:	e00a      	b.n	801786c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017856:	683b      	ldr	r3, [r7, #0]
 8017858:	b2da      	uxtb	r2, r3
 801785a:	4908      	ldr	r1, [pc, #32]	; (801787c <__NVIC_SetPriority+0x50>)
 801785c:	79fb      	ldrb	r3, [r7, #7]
 801785e:	f003 030f 	and.w	r3, r3, #15
 8017862:	3b04      	subs	r3, #4
 8017864:	0112      	lsls	r2, r2, #4
 8017866:	b2d2      	uxtb	r2, r2
 8017868:	440b      	add	r3, r1
 801786a:	761a      	strb	r2, [r3, #24]
}
 801786c:	bf00      	nop
 801786e:	370c      	adds	r7, #12
 8017870:	46bd      	mov	sp, r7
 8017872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017876:	4770      	bx	lr
 8017878:	e000e100 	.word	0xe000e100
 801787c:	e000ed00 	.word	0xe000ed00

08017880 <NVIC_EncodePriority>:
{
 8017880:	b480      	push	{r7}
 8017882:	b089      	sub	sp, #36	; 0x24
 8017884:	af00      	add	r7, sp, #0
 8017886:	60f8      	str	r0, [r7, #12]
 8017888:	60b9      	str	r1, [r7, #8]
 801788a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	f003 0307 	and.w	r3, r3, #7
 8017892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017894:	69fb      	ldr	r3, [r7, #28]
 8017896:	f1c3 0307 	rsb	r3, r3, #7
 801789a:	2b04      	cmp	r3, #4
 801789c:	bf28      	it	cs
 801789e:	2304      	movcs	r3, #4
 80178a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80178a2:	69fb      	ldr	r3, [r7, #28]
 80178a4:	3304      	adds	r3, #4
 80178a6:	2b06      	cmp	r3, #6
 80178a8:	d902      	bls.n	80178b0 <NVIC_EncodePriority+0x30>
 80178aa:	69fb      	ldr	r3, [r7, #28]
 80178ac:	3b03      	subs	r3, #3
 80178ae:	e000      	b.n	80178b2 <NVIC_EncodePriority+0x32>
 80178b0:	2300      	movs	r3, #0
 80178b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80178b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178b8:	69bb      	ldr	r3, [r7, #24]
 80178ba:	fa02 f303 	lsl.w	r3, r2, r3
 80178be:	43da      	mvns	r2, r3
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	401a      	ands	r2, r3
 80178c4:	697b      	ldr	r3, [r7, #20]
 80178c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80178c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80178cc:	697b      	ldr	r3, [r7, #20]
 80178ce:	fa01 f303 	lsl.w	r3, r1, r3
 80178d2:	43d9      	mvns	r1, r3
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80178d8:	4313      	orrs	r3, r2
}
 80178da:	4618      	mov	r0, r3
 80178dc:	3724      	adds	r7, #36	; 0x24
 80178de:	46bd      	mov	sp, r7
 80178e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e4:	4770      	bx	lr
	...

080178e8 <uartInit>:
 * @brief UART configuration
 * @return Error code
 **/

error_t uartInit(void)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b088      	sub	sp, #32
 80178ec:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStructure;

   //Enable PWR clock
   __HAL_RCC_PWR_CLK_ENABLE();
 80178ee:	4b3c      	ldr	r3, [pc, #240]	; (80179e0 <uartInit+0xf8>)
 80178f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80178f2:	4a3b      	ldr	r2, [pc, #236]	; (80179e0 <uartInit+0xf8>)
 80178f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80178f8:	6593      	str	r3, [r2, #88]	; 0x58
 80178fa:	4b39      	ldr	r3, [pc, #228]	; (80179e0 <uartInit+0xf8>)
 80178fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80178fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017902:	60bb      	str	r3, [r7, #8]
 8017904:	68bb      	ldr	r3, [r7, #8]

   //Enable GPIOA clocks
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8017906:	4b36      	ldr	r3, [pc, #216]	; (80179e0 <uartInit+0xf8>)
 8017908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801790a:	4a35      	ldr	r2, [pc, #212]	; (80179e0 <uartInit+0xf8>)
 801790c:	f043 0301 	orr.w	r3, r3, #1
 8017910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017912:	4b33      	ldr	r3, [pc, #204]	; (80179e0 <uartInit+0xf8>)
 8017914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017916:	f003 0301 	and.w	r3, r3, #1
 801791a:	607b      	str	r3, [r7, #4]
 801791c:	687b      	ldr	r3, [r7, #4]

   //Enable USART1 clock
   __HAL_RCC_USART2_CLK_ENABLE();
 801791e:	4b30      	ldr	r3, [pc, #192]	; (80179e0 <uartInit+0xf8>)
 8017920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017922:	4a2f      	ldr	r2, [pc, #188]	; (80179e0 <uartInit+0xf8>)
 8017924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017928:	6593      	str	r3, [r2, #88]	; 0x58
 801792a:	4b2d      	ldr	r3, [pc, #180]	; (80179e0 <uartInit+0xf8>)
 801792c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801792e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017932:	603b      	str	r3, [r7, #0]
 8017934:	683b      	ldr	r3, [r7, #0]

   //Configure USART1_TX (PA2) and USART1_RX (PA3)
   GPIO_InitStructure.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8017936:	230c      	movs	r3, #12
 8017938:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 801793a:	2302      	movs	r3, #2
 801793c:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 801793e:	2300      	movs	r3, #0
 8017940:	617b      	str	r3, [r7, #20]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8017942:	2301      	movs	r3, #1
 8017944:	61bb      	str	r3, [r7, #24]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8017946:	2307      	movs	r3, #7
 8017948:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 801794a:	f107 030c 	add.w	r3, r7, #12
 801794e:	4619      	mov	r1, r3
 8017950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017954:	f7f4 fdfe 	bl	800c554 <HAL_GPIO_Init>

   //Configure USART2
   UART_Handle.Instance = USART2;
 8017958:	4b22      	ldr	r3, [pc, #136]	; (80179e4 <uartInit+0xfc>)
 801795a:	4a23      	ldr	r2, [pc, #140]	; (80179e8 <uartInit+0x100>)
 801795c:	601a      	str	r2, [r3, #0]
   UART_Handle.Init.BaudRate = 115200;
 801795e:	4b21      	ldr	r3, [pc, #132]	; (80179e4 <uartInit+0xfc>)
 8017960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8017964:	605a      	str	r2, [r3, #4]
   UART_Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8017966:	4b1f      	ldr	r3, [pc, #124]	; (80179e4 <uartInit+0xfc>)
 8017968:	2200      	movs	r2, #0
 801796a:	609a      	str	r2, [r3, #8]
   UART_Handle.Init.StopBits = UART_STOPBITS_1;
 801796c:	4b1d      	ldr	r3, [pc, #116]	; (80179e4 <uartInit+0xfc>)
 801796e:	2200      	movs	r2, #0
 8017970:	60da      	str	r2, [r3, #12]
   UART_Handle.Init.Parity = UART_PARITY_NONE;
 8017972:	4b1c      	ldr	r3, [pc, #112]	; (80179e4 <uartInit+0xfc>)
 8017974:	2200      	movs	r2, #0
 8017976:	611a      	str	r2, [r3, #16]
   UART_Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017978:	4b1a      	ldr	r3, [pc, #104]	; (80179e4 <uartInit+0xfc>)
 801797a:	2200      	movs	r2, #0
 801797c:	619a      	str	r2, [r3, #24]
   UART_Handle.Init.Mode = UART_MODE_TX_RX;
 801797e:	4b19      	ldr	r3, [pc, #100]	; (80179e4 <uartInit+0xfc>)
 8017980:	220c      	movs	r2, #12
 8017982:	615a      	str	r2, [r3, #20]
   HAL_UART_Init(&UART_Handle);
 8017984:	4817      	ldr	r0, [pc, #92]	; (80179e4 <uartInit+0xfc>)
 8017986:	f7f7 ff0b 	bl	800f7a0 <HAL_UART_Init>

   //Configure USART2 interrupts
   __HAL_UART_ENABLE_IT(&UART_Handle, UART_IT_TXE);
 801798a:	4b16      	ldr	r3, [pc, #88]	; (80179e4 <uartInit+0xfc>)
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	681a      	ldr	r2, [r3, #0]
 8017990:	4b14      	ldr	r3, [pc, #80]	; (80179e4 <uartInit+0xfc>)
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017998:	601a      	str	r2, [r3, #0]
   __HAL_UART_ENABLE_IT(&UART_Handle, UART_IT_RXNE);
 801799a:	4b12      	ldr	r3, [pc, #72]	; (80179e4 <uartInit+0xfc>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	681a      	ldr	r2, [r3, #0]
 80179a0:	4b10      	ldr	r3, [pc, #64]	; (80179e4 <uartInit+0xfc>)
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	f042 0220 	orr.w	r2, r2, #32
 80179a8:	601a      	str	r2, [r3, #0]

   //Set priority grouping (4 bits for pre-emption priority, no bits
   //for subpriority)
   NVIC_SetPriorityGrouping(3);
 80179aa:	2003      	movs	r0, #3
 80179ac:	f7ff feda 	bl	8017764 <__NVIC_SetPriorityGrouping>

   //Configure Ethernet interrupt priority
   NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(3, 12, 0));
 80179b0:	2200      	movs	r2, #0
 80179b2:	210c      	movs	r1, #12
 80179b4:	2003      	movs	r0, #3
 80179b6:	f7ff ff63 	bl	8017880 <NVIC_EncodePriority>
 80179ba:	4603      	mov	r3, r0
 80179bc:	4619      	mov	r1, r3
 80179be:	2026      	movs	r0, #38	; 0x26
 80179c0:	f7ff ff34 	bl	801782c <__NVIC_SetPriority>

   //Enable USART1
   __HAL_UART_ENABLE(&UART_Handle);
 80179c4:	4b07      	ldr	r3, [pc, #28]	; (80179e4 <uartInit+0xfc>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	681a      	ldr	r2, [r3, #0]
 80179ca:	4b06      	ldr	r3, [pc, #24]	; (80179e4 <uartInit+0xfc>)
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	f042 0201 	orr.w	r2, r2, #1
 80179d2:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 80179d4:	2300      	movs	r3, #0
}
 80179d6:	4618      	mov	r0, r3
 80179d8:	3720      	adds	r7, #32
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}
 80179de:	bf00      	nop
 80179e0:	40021000 	.word	0x40021000
 80179e4:	20001a04 	.word	0x20001a04
 80179e8:	40004400 	.word	0x40004400

080179ec <uartEnableIrq>:
/**
 * @brief Enable UART interrupts
 **/

void uartEnableIrq(void)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	af00      	add	r7, sp, #0
   //Enable USART1 interrupts
   NVIC_EnableIRQ(USART2_IRQn);
 80179f0:	2026      	movs	r0, #38	; 0x26
 80179f2:	f7ff fedb 	bl	80177ac <__NVIC_EnableIRQ>
}
 80179f6:	bf00      	nop
 80179f8:	bd80      	pop	{r7, pc}

080179fa <uartDisableIrq>:
/**
 * @brief Disable UART interrupts
 **/

void uartDisableIrq(void)
{
 80179fa:	b580      	push	{r7, lr}
 80179fc:	af00      	add	r7, sp, #0
   //Disable USART2 interrupt
   NVIC_DisableIRQ(USART2_IRQn);
 80179fe:	2026      	movs	r0, #38	; 0x26
 8017a00:	f7ff fef2 	bl	80177e8 <__NVIC_DisableIRQ>
}
 8017a04:	bf00      	nop
 8017a06:	bd80      	pop	{r7, pc}

08017a08 <uartStartTx>:
/**
 * @brief Start transmission
 **/

void uartStartTx(void)
{
 8017a08:	b480      	push	{r7}
 8017a0a:	af00      	add	r7, sp, #0
   //Enable TXE interrupt
   __HAL_UART_ENABLE_IT(&UART_Handle, UART_IT_TXE);
 8017a0c:	4b06      	ldr	r3, [pc, #24]	; (8017a28 <uartStartTx+0x20>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	681a      	ldr	r2, [r3, #0]
 8017a12:	4b05      	ldr	r3, [pc, #20]	; (8017a28 <uartStartTx+0x20>)
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017a1a:	601a      	str	r2, [r3, #0]
}
 8017a1c:	bf00      	nop
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a24:	4770      	bx	lr
 8017a26:	bf00      	nop
 8017a28:	20001a04 	.word	0x20001a04

08017a2c <USART2_IRQHandler>:
/**
 * @brief UART interrupt handler
 **/

void USART2_IRQHandler(void)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b084      	sub	sp, #16
 8017a30:	af00      	add	r7, sp, #0

   //Enter interrupt service routine
   osEnterIsr();

   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 8017a32:	2300      	movs	r3, #0
 8017a34:	60fb      	str	r3, [r7, #12]

   //Point to the PPP network interface
   interface = &netInterface[0];
 8017a36:	4b2f      	ldr	r3, [pc, #188]	; (8017af4 <USART2_IRQHandler+0xc8>)
 8017a38:	60bb      	str	r3, [r7, #8]

   //TXE interrupt?
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_TXE) != RESET &&
 8017a3a:	4b2f      	ldr	r3, [pc, #188]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	69db      	ldr	r3, [r3, #28]
 8017a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017a44:	2b80      	cmp	r3, #128	; 0x80
 8017a46:	d121      	bne.n	8017a8c <USART2_IRQHandler+0x60>
      __HAL_UART_GET_IT_SOURCE(&UART_Handle, UART_IT_TXE) != RESET)
 8017a48:	4b2b      	ldr	r3, [pc, #172]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_TXE) != RESET &&
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d01a      	beq.n	8017a8c <USART2_IRQHandler+0x60>
   {
      //Get next character
      flag |= pppHdlcDriverReadTxQueue(interface, &c);
 8017a56:	1d3b      	adds	r3, r7, #4
 8017a58:	4619      	mov	r1, r3
 8017a5a:	68b8      	ldr	r0, [r7, #8]
 8017a5c:	f7f4 f832 	bl	800bac4 <pppHdlcDriverReadTxQueue>
 8017a60:	4602      	mov	r2, r0
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	4313      	orrs	r3, r2
 8017a66:	60fb      	str	r3, [r7, #12]

      //Valid character read?
      if(c != EOF)
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a6e:	d005      	beq.n	8017a7c <USART2_IRQHandler+0x50>
      {
         //Send data byte
         UART_Handle.Instance->TDR = c;
 8017a70:	687a      	ldr	r2, [r7, #4]
 8017a72:	4b21      	ldr	r3, [pc, #132]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	b292      	uxth	r2, r2
 8017a78:	851a      	strh	r2, [r3, #40]	; 0x28
 8017a7a:	e007      	b.n	8017a8c <USART2_IRQHandler+0x60>
      }
      else
      {
         //Disable TXE interrupt
         __HAL_UART_DISABLE_IT(&UART_Handle, UART_IT_TXE);
 8017a7c:	4b1e      	ldr	r3, [pc, #120]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	681a      	ldr	r2, [r3, #0]
 8017a82:	4b1d      	ldr	r3, [pc, #116]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017a8a:	601a      	str	r2, [r3, #0]
      }
   }

   //RXNE interrupt?
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_RXNE) != RESET &&
 8017a8c:	4b1a      	ldr	r3, [pc, #104]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	69db      	ldr	r3, [r3, #28]
 8017a92:	f003 0320 	and.w	r3, r3, #32
 8017a96:	2b20      	cmp	r3, #32
 8017a98:	d115      	bne.n	8017ac6 <USART2_IRQHandler+0x9a>
      __HAL_UART_GET_IT_SOURCE(&UART_Handle, UART_IT_RXNE) != RESET)
 8017a9a:	4b17      	ldr	r3, [pc, #92]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	f003 0320 	and.w	r3, r3, #32
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_RXNE) != RESET &&
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d00e      	beq.n	8017ac6 <USART2_IRQHandler+0x9a>
   {
      //Read data byte
      c = UART_Handle.Instance->RDR;
 8017aa8:	4b13      	ldr	r3, [pc, #76]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017aae:	b29b      	uxth	r3, r3
 8017ab0:	607b      	str	r3, [r7, #4]
      //Process incoming character
      flag |= pppHdlcDriverWriteRxQueue(interface, c);
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	b2db      	uxtb	r3, r3
 8017ab6:	4619      	mov	r1, r3
 8017ab8:	68b8      	ldr	r0, [r7, #8]
 8017aba:	f7f4 f859 	bl	800bb70 <pppHdlcDriverWriteRxQueue>
 8017abe:	4602      	mov	r2, r0
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	4313      	orrs	r3, r2
 8017ac4:	60fb      	str	r3, [r7, #12]
   }

   //ORE interrupt?
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_ORE) != RESET &&
 8017ac6:	4b0c      	ldr	r3, [pc, #48]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	69db      	ldr	r3, [r3, #28]
 8017acc:	f003 0308 	and.w	r3, r3, #8
 8017ad0:	2b08      	cmp	r3, #8
 8017ad2:	d10a      	bne.n	8017aea <USART2_IRQHandler+0xbe>
      __HAL_UART_GET_IT_SOURCE(&UART_Handle, UART_IT_RXNE) != RESET)
 8017ad4:	4b08      	ldr	r3, [pc, #32]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	f003 0320 	and.w	r3, r3, #32
   if(__HAL_UART_GET_FLAG(&UART_Handle, UART_FLAG_ORE) != RESET &&
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d003      	beq.n	8017aea <USART2_IRQHandler+0xbe>
   {
      //Clear ORE interrupt flag
      __HAL_UART_CLEAR_OREFLAG(&UART_Handle);
 8017ae2:	4b05      	ldr	r3, [pc, #20]	; (8017af8 <USART2_IRQHandler+0xcc>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	2208      	movs	r2, #8
 8017ae8:	621a      	str	r2, [r3, #32]
   }

   //Leave interrupt service routine
   osExitIsr(flag);
}
 8017aea:	bf00      	nop
 8017aec:	3710      	adds	r7, #16
 8017aee:	46bd      	mov	sp, r7
 8017af0:	bd80      	pop	{r7, pc}
 8017af2:	bf00      	nop
 8017af4:	20001a9c 	.word	0x20001a9c
 8017af8:	20001a04 	.word	0x20001a04

08017afc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017b00:	2201      	movs	r2, #1
 8017b02:	490e      	ldr	r1, [pc, #56]	; (8017b3c <MX_USB_HOST_Init+0x40>)
 8017b04:	480e      	ldr	r0, [pc, #56]	; (8017b40 <MX_USB_HOST_Init+0x44>)
 8017b06:	f7fb f8a7 	bl	8012c58 <USBH_Init>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d001      	beq.n	8017b14 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017b10:	f7ff fcb0 	bl	8017474 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 8017b14:	490b      	ldr	r1, [pc, #44]	; (8017b44 <MX_USB_HOST_Init+0x48>)
 8017b16:	480a      	ldr	r0, [pc, #40]	; (8017b40 <MX_USB_HOST_Init+0x44>)
 8017b18:	f7fb f93a 	bl	8012d90 <USBH_RegisterClass>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d001      	beq.n	8017b26 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017b22:	f7ff fca7 	bl	8017474 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017b26:	4806      	ldr	r0, [pc, #24]	; (8017b40 <MX_USB_HOST_Init+0x44>)
 8017b28:	f7fb f9d7 	bl	8012eda <USBH_Start>
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d001      	beq.n	8017b36 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017b32:	f7ff fc9f 	bl	8017474 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017b36:	bf00      	nop
 8017b38:	bd80      	pop	{r7, pc}
 8017b3a:	bf00      	nop
 8017b3c:	08017b49 	.word	0x08017b49
 8017b40:	200071a4 	.word	0x200071a4
 8017b44:	20000030 	.word	0x20000030

08017b48 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017b48:	b480      	push	{r7}
 8017b4a:	b083      	sub	sp, #12
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
 8017b50:	460b      	mov	r3, r1
 8017b52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017b54:	78fb      	ldrb	r3, [r7, #3]
 8017b56:	3b01      	subs	r3, #1
 8017b58:	2b04      	cmp	r3, #4
 8017b5a:	d819      	bhi.n	8017b90 <USBH_UserProcess+0x48>
 8017b5c:	a201      	add	r2, pc, #4	; (adr r2, 8017b64 <USBH_UserProcess+0x1c>)
 8017b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b62:	bf00      	nop
 8017b64:	08017b91 	.word	0x08017b91
 8017b68:	08017b81 	.word	0x08017b81
 8017b6c:	08017b91 	.word	0x08017b91
 8017b70:	08017b89 	.word	0x08017b89
 8017b74:	08017b79 	.word	0x08017b79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017b78:	4b09      	ldr	r3, [pc, #36]	; (8017ba0 <USBH_UserProcess+0x58>)
 8017b7a:	2203      	movs	r2, #3
 8017b7c:	701a      	strb	r2, [r3, #0]
  break;
 8017b7e:	e008      	b.n	8017b92 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017b80:	4b07      	ldr	r3, [pc, #28]	; (8017ba0 <USBH_UserProcess+0x58>)
 8017b82:	2202      	movs	r2, #2
 8017b84:	701a      	strb	r2, [r3, #0]
  break;
 8017b86:	e004      	b.n	8017b92 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017b88:	4b05      	ldr	r3, [pc, #20]	; (8017ba0 <USBH_UserProcess+0x58>)
 8017b8a:	2201      	movs	r2, #1
 8017b8c:	701a      	strb	r2, [r3, #0]
  break;
 8017b8e:	e000      	b.n	8017b92 <USBH_UserProcess+0x4a>

  default:
  break;
 8017b90:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8017b92:	bf00      	nop
 8017b94:	370c      	adds	r7, #12
 8017b96:	46bd      	mov	sp, r7
 8017b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9c:	4770      	bx	lr
 8017b9e:	bf00      	nop
 8017ba0:	20001a84 	.word	0x20001a84

08017ba4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b08a      	sub	sp, #40	; 0x28
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017bac:	f107 0314 	add.w	r3, r7, #20
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	601a      	str	r2, [r3, #0]
 8017bb4:	605a      	str	r2, [r3, #4]
 8017bb6:	609a      	str	r2, [r3, #8]
 8017bb8:	60da      	str	r2, [r3, #12]
 8017bba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017bc4:	d14e      	bne.n	8017c64 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017bc6:	4b29      	ldr	r3, [pc, #164]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bca:	4a28      	ldr	r2, [pc, #160]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017bcc:	f043 0301 	orr.w	r3, r3, #1
 8017bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017bd2:	4b26      	ldr	r3, [pc, #152]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bd6:	f003 0301 	and.w	r3, r3, #1
 8017bda:	613b      	str	r3, [r7, #16]
 8017bdc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8017bde:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8017be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017be4:	2302      	movs	r3, #2
 8017be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017be8:	2300      	movs	r3, #0
 8017bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017bec:	2303      	movs	r3, #3
 8017bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017bf0:	230a      	movs	r3, #10
 8017bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017bf4:	f107 0314 	add.w	r3, r7, #20
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017bfe:	f7f4 fca9 	bl	800c554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017c02:	4b1a      	ldr	r3, [pc, #104]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017c06:	4a19      	ldr	r2, [pc, #100]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017c0e:	4b17      	ldr	r3, [pc, #92]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017c16:	60fb      	str	r3, [r7, #12]
 8017c18:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017c1a:	4b14      	ldr	r3, [pc, #80]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d114      	bne.n	8017c50 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017c26:	4b11      	ldr	r3, [pc, #68]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c2a:	4a10      	ldr	r2, [pc, #64]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017c30:	6593      	str	r3, [r2, #88]	; 0x58
 8017c32:	4b0e      	ldr	r3, [pc, #56]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c3a:	60bb      	str	r3, [r7, #8]
 8017c3c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8017c3e:	f7f6 facb 	bl	800e1d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8017c42:	4b0a      	ldr	r3, [pc, #40]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c46:	4a09      	ldr	r2, [pc, #36]	; (8017c6c <HAL_HCD_MspInit+0xc8>)
 8017c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8017c4e:	e001      	b.n	8017c54 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8017c50:	f7f6 fac2 	bl	800e1d8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017c54:	2200      	movs	r2, #0
 8017c56:	2105      	movs	r1, #5
 8017c58:	2043      	movs	r0, #67	; 0x43
 8017c5a:	f7f4 fc44 	bl	800c4e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017c5e:	2043      	movs	r0, #67	; 0x43
 8017c60:	f7f4 fc5d 	bl	800c51e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017c64:	bf00      	nop
 8017c66:	3728      	adds	r7, #40	; 0x28
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}
 8017c6c:	40021000 	.word	0x40021000

08017c70 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b082      	sub	sp, #8
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7fb fc81 	bl	8013586 <USBH_LL_IncTimer>
}
 8017c84:	bf00      	nop
 8017c86:	3708      	adds	r7, #8
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b082      	sub	sp, #8
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7fb fcc6 	bl	801362c <USBH_LL_Connect>
}
 8017ca0:	bf00      	nop
 8017ca2:	3708      	adds	r7, #8
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}

08017ca8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b082      	sub	sp, #8
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7fb fcec 	bl	8013694 <USBH_LL_Disconnect>
}
 8017cbc:	bf00      	nop
 8017cbe:	3708      	adds	r7, #8
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd80      	pop	{r7, pc}

08017cc4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b082      	sub	sp, #8
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
 8017ccc:	460b      	mov	r3, r1
 8017cce:	70fb      	strb	r3, [r7, #3]
 8017cd0:	4613      	mov	r3, r2
 8017cd2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f7fb fd2a 	bl	8013734 <USBH_LL_NotifyURBChange>
#endif
}
 8017ce0:	bf00      	nop
 8017ce2:	3708      	adds	r7, #8
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}

08017ce8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b082      	sub	sp, #8
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7fb fc6f 	bl	80135da <USBH_LL_PortEnabled>
} 
 8017cfc:	bf00      	nop
 8017cfe:	3708      	adds	r7, #8
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bd80      	pop	{r7, pc}

08017d04 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b082      	sub	sp, #8
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017d12:	4618      	mov	r0, r3
 8017d14:	f7fb fc6f 	bl	80135f6 <USBH_LL_PortDisabled>
} 
 8017d18:	bf00      	nop
 8017d1a:	3708      	adds	r7, #8
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}

08017d20 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b082      	sub	sp, #8
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8017d2e:	2b01      	cmp	r3, #1
 8017d30:	d12a      	bne.n	8017d88 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8017d32:	4a18      	ldr	r2, [pc, #96]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	4a15      	ldr	r2, [pc, #84]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d3e:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017d42:	4b14      	ldr	r3, [pc, #80]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017d48:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8017d4a:	4b12      	ldr	r3, [pc, #72]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d4c:	220c      	movs	r2, #12
 8017d4e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8017d50:	4b10      	ldr	r3, [pc, #64]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d52:	2201      	movs	r2, #1
 8017d54:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017d56:	4b0f      	ldr	r3, [pc, #60]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d58:	2200      	movs	r2, #0
 8017d5a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8017d5c:	4b0d      	ldr	r3, [pc, #52]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d5e:	2202      	movs	r2, #2
 8017d60:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017d62:	4b0c      	ldr	r3, [pc, #48]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d64:	2200      	movs	r2, #0
 8017d66:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017d68:	480a      	ldr	r0, [pc, #40]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d6a:	f7f4 fdb6 	bl	800c8da <HAL_HCD_Init>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d001      	beq.n	8017d78 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8017d74:	f7ff fb7e 	bl	8017474 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8017d78:	4806      	ldr	r0, [pc, #24]	; (8017d94 <USBH_LL_Init+0x74>)
 8017d7a:	f7f5 f998 	bl	800d0ae <HAL_HCD_GetCurrentFrame>
 8017d7e:	4603      	mov	r3, r0
 8017d80:	4619      	mov	r1, r3
 8017d82:	6878      	ldr	r0, [r7, #4]
 8017d84:	f7fb fbf0 	bl	8013568 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8017d88:	2300      	movs	r3, #0
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	3708      	adds	r7, #8
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
 8017d92:	bf00      	nop
 8017d94:	2000764c 	.word	0x2000764c

08017d98 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b084      	sub	sp, #16
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017da0:	2300      	movs	r3, #0
 8017da2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017da4:	2300      	movs	r3, #0
 8017da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017dae:	4618      	mov	r0, r3
 8017db0:	f7f5 f91a 	bl	800cfe8 <HAL_HCD_Start>
 8017db4:	4603      	mov	r3, r0
 8017db6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017db8:	7bfb      	ldrb	r3, [r7, #15]
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f000 f94a 	bl	8018054 <USBH_Get_USB_Status>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	3710      	adds	r7, #16
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}

08017dce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017dce:	b580      	push	{r7, lr}
 8017dd0:	b084      	sub	sp, #16
 8017dd2:	af00      	add	r7, sp, #0
 8017dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017dda:	2300      	movs	r3, #0
 8017ddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017de4:	4618      	mov	r0, r3
 8017de6:	f7f5 f922 	bl	800d02e <HAL_HCD_Stop>
 8017dea:	4603      	mov	r3, r0
 8017dec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017dee:	7bfb      	ldrb	r3, [r7, #15]
 8017df0:	4618      	mov	r0, r3
 8017df2:	f000 f92f 	bl	8018054 <USBH_Get_USB_Status>
 8017df6:	4603      	mov	r3, r0
 8017df8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3710      	adds	r7, #16
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}

08017e04 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b084      	sub	sp, #16
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017e16:	4618      	mov	r0, r3
 8017e18:	f7f5 f957 	bl	800d0ca <HAL_HCD_GetCurrentSpeed>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	2b01      	cmp	r3, #1
 8017e20:	d007      	beq.n	8017e32 <USBH_LL_GetSpeed+0x2e>
 8017e22:	2b01      	cmp	r3, #1
 8017e24:	d302      	bcc.n	8017e2c <USBH_LL_GetSpeed+0x28>
 8017e26:	2b02      	cmp	r3, #2
 8017e28:	d006      	beq.n	8017e38 <USBH_LL_GetSpeed+0x34>
 8017e2a:	e008      	b.n	8017e3e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8017e30:	e008      	b.n	8017e44 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8017e32:	2301      	movs	r3, #1
 8017e34:	73fb      	strb	r3, [r7, #15]
    break;
 8017e36:	e005      	b.n	8017e44 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8017e38:	2302      	movs	r3, #2
 8017e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8017e3c:	e002      	b.n	8017e44 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8017e3e:	2301      	movs	r3, #1
 8017e40:	73fb      	strb	r3, [r7, #15]
    break;
 8017e42:	bf00      	nop
  }
  return  speed;
 8017e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	3710      	adds	r7, #16
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}

08017e4e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8017e4e:	b580      	push	{r7, lr}
 8017e50:	b084      	sub	sp, #16
 8017e52:	af00      	add	r7, sp, #0
 8017e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e56:	2300      	movs	r3, #0
 8017e58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017e64:	4618      	mov	r0, r3
 8017e66:	f7f5 f8ff 	bl	800d068 <HAL_HCD_ResetPort>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8017e6e:	7bfb      	ldrb	r3, [r7, #15]
 8017e70:	4618      	mov	r0, r3
 8017e72:	f000 f8ef 	bl	8018054 <USBH_Get_USB_Status>
 8017e76:	4603      	mov	r3, r0
 8017e78:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3710      	adds	r7, #16
 8017e80:	46bd      	mov	sp, r7
 8017e82:	bd80      	pop	{r7, pc}

08017e84 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017e84:	b590      	push	{r4, r7, lr}
 8017e86:	b089      	sub	sp, #36	; 0x24
 8017e88:	af04      	add	r7, sp, #16
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	4608      	mov	r0, r1
 8017e8e:	4611      	mov	r1, r2
 8017e90:	461a      	mov	r2, r3
 8017e92:	4603      	mov	r3, r0
 8017e94:	70fb      	strb	r3, [r7, #3]
 8017e96:	460b      	mov	r3, r1
 8017e98:	70bb      	strb	r3, [r7, #2]
 8017e9a:	4613      	mov	r3, r2
 8017e9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f8d3 0494 	ldr.w	r0, [r3, #1172]	; 0x494
 8017eac:	787c      	ldrb	r4, [r7, #1]
 8017eae:	78ba      	ldrb	r2, [r7, #2]
 8017eb0:	78f9      	ldrb	r1, [r7, #3]
 8017eb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017eb4:	9302      	str	r3, [sp, #8]
 8017eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017eba:	9301      	str	r3, [sp, #4]
 8017ebc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ec0:	9300      	str	r3, [sp, #0]
 8017ec2:	4623      	mov	r3, r4
 8017ec4:	f7f4 fd6b 	bl	800c99e <HAL_HCD_HC_Init>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8017ecc:	7bfb      	ldrb	r3, [r7, #15]
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f000 f8c0 	bl	8018054 <USBH_Get_USB_Status>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017eda:	4618      	mov	r0, r3
 8017edc:	3714      	adds	r7, #20
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	bd90      	pop	{r4, r7, pc}

08017ee2 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017ee2:	b580      	push	{r7, lr}
 8017ee4:	b084      	sub	sp, #16
 8017ee6:	af00      	add	r7, sp, #0
 8017ee8:	6078      	str	r0, [r7, #4]
 8017eea:	460b      	mov	r3, r1
 8017eec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017eee:	2300      	movs	r3, #0
 8017ef0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017efc:	78fa      	ldrb	r2, [r7, #3]
 8017efe:	4611      	mov	r1, r2
 8017f00:	4618      	mov	r0, r3
 8017f02:	f7f4 fde4 	bl	800cace <HAL_HCD_HC_Halt>
 8017f06:	4603      	mov	r3, r0
 8017f08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017f0a:	7bfb      	ldrb	r3, [r7, #15]
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	f000 f8a1 	bl	8018054 <USBH_Get_USB_Status>
 8017f12:	4603      	mov	r3, r0
 8017f14:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 8017f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	3710      	adds	r7, #16
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	bd80      	pop	{r7, pc}

08017f20 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8017f20:	b590      	push	{r4, r7, lr}
 8017f22:	b089      	sub	sp, #36	; 0x24
 8017f24:	af04      	add	r7, sp, #16
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	4608      	mov	r0, r1
 8017f2a:	4611      	mov	r1, r2
 8017f2c:	461a      	mov	r2, r3
 8017f2e:	4603      	mov	r3, r0
 8017f30:	70fb      	strb	r3, [r7, #3]
 8017f32:	460b      	mov	r3, r1
 8017f34:	70bb      	strb	r3, [r7, #2]
 8017f36:	4613      	mov	r3, r2
 8017f38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017f3e:	2300      	movs	r3, #0
 8017f40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	f8d3 0494 	ldr.w	r0, [r3, #1172]	; 0x494
 8017f48:	787c      	ldrb	r4, [r7, #1]
 8017f4a:	78ba      	ldrb	r2, [r7, #2]
 8017f4c:	78f9      	ldrb	r1, [r7, #3]
 8017f4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017f52:	9303      	str	r3, [sp, #12]
 8017f54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017f56:	9302      	str	r3, [sp, #8]
 8017f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f5a:	9301      	str	r3, [sp, #4]
 8017f5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017f60:	9300      	str	r3, [sp, #0]
 8017f62:	4623      	mov	r3, r4
 8017f64:	f7f4 fdd6 	bl	800cb14 <HAL_HCD_HC_SubmitRequest>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8017f6c:	7bfb      	ldrb	r3, [r7, #15]
 8017f6e:	4618      	mov	r0, r3
 8017f70:	f000 f870 	bl	8018054 <USBH_Get_USB_Status>
 8017f74:	4603      	mov	r3, r0
 8017f76:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017f78:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	3714      	adds	r7, #20
 8017f7e:	46bd      	mov	sp, r7
 8017f80:	bd90      	pop	{r4, r7, pc}

08017f82 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017f82:	b580      	push	{r7, lr}
 8017f84:	b082      	sub	sp, #8
 8017f86:	af00      	add	r7, sp, #0
 8017f88:	6078      	str	r0, [r7, #4]
 8017f8a:	460b      	mov	r3, r1
 8017f8c:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017f94:	78fa      	ldrb	r2, [r7, #3]
 8017f96:	4611      	mov	r1, r2
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f7f5 f873 	bl	800d084 <HAL_HCD_HC_GetURBState>
 8017f9e:	4603      	mov	r3, r0
}
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	3708      	adds	r7, #8
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	bd80      	pop	{r7, pc}

08017fa8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b082      	sub	sp, #8
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
 8017fb0:	460b      	mov	r3, r1
 8017fb2:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8017fba:	2b01      	cmp	r3, #1
 8017fbc:	d103      	bne.n	8017fc6 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8017fbe:	78fb      	ldrb	r3, [r7, #3]
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f000 f873 	bl	80180ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8017fc6:	20c8      	movs	r0, #200	; 0xc8
 8017fc8:	f7f4 f990 	bl	800c2ec <HAL_Delay>
  return USBH_OK;
 8017fcc:	2300      	movs	r3, #0
}
 8017fce:	4618      	mov	r0, r3
 8017fd0:	3708      	adds	r7, #8
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}

08017fd6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8017fd6:	b480      	push	{r7}
 8017fd8:	b085      	sub	sp, #20
 8017fda:	af00      	add	r7, sp, #0
 8017fdc:	6078      	str	r0, [r7, #4]
 8017fde:	460b      	mov	r3, r1
 8017fe0:	70fb      	strb	r3, [r7, #3]
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017fec:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8017fee:	78fa      	ldrb	r2, [r7, #3]
 8017ff0:	68f9      	ldr	r1, [r7, #12]
 8017ff2:	4613      	mov	r3, r2
 8017ff4:	009b      	lsls	r3, r3, #2
 8017ff6:	4413      	add	r3, r2
 8017ff8:	00db      	lsls	r3, r3, #3
 8017ffa:	440b      	add	r3, r1
 8017ffc:	333b      	adds	r3, #59	; 0x3b
 8017ffe:	781b      	ldrb	r3, [r3, #0]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d00a      	beq.n	801801a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018004:	78fa      	ldrb	r2, [r7, #3]
 8018006:	68f9      	ldr	r1, [r7, #12]
 8018008:	4613      	mov	r3, r2
 801800a:	009b      	lsls	r3, r3, #2
 801800c:	4413      	add	r3, r2
 801800e:	00db      	lsls	r3, r3, #3
 8018010:	440b      	add	r3, r1
 8018012:	3350      	adds	r3, #80	; 0x50
 8018014:	78ba      	ldrb	r2, [r7, #2]
 8018016:	701a      	strb	r2, [r3, #0]
 8018018:	e009      	b.n	801802e <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801801a:	78fa      	ldrb	r2, [r7, #3]
 801801c:	68f9      	ldr	r1, [r7, #12]
 801801e:	4613      	mov	r3, r2
 8018020:	009b      	lsls	r3, r3, #2
 8018022:	4413      	add	r3, r2
 8018024:	00db      	lsls	r3, r3, #3
 8018026:	440b      	add	r3, r1
 8018028:	3351      	adds	r3, #81	; 0x51
 801802a:	78ba      	ldrb	r2, [r7, #2]
 801802c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801802e:	2300      	movs	r3, #0
}
 8018030:	4618      	mov	r0, r3
 8018032:	3714      	adds	r7, #20
 8018034:	46bd      	mov	sp, r7
 8018036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803a:	4770      	bx	lr

0801803c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b082      	sub	sp, #8
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8018044:	6878      	ldr	r0, [r7, #4]
 8018046:	f7f4 f951 	bl	800c2ec <HAL_Delay>
}
 801804a:	bf00      	nop
 801804c:	3708      	adds	r7, #8
 801804e:	46bd      	mov	sp, r7
 8018050:	bd80      	pop	{r7, pc}
	...

08018054 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018054:	b480      	push	{r7}
 8018056:	b085      	sub	sp, #20
 8018058:	af00      	add	r7, sp, #0
 801805a:	4603      	mov	r3, r0
 801805c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801805e:	2300      	movs	r3, #0
 8018060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018062:	79fb      	ldrb	r3, [r7, #7]
 8018064:	2b03      	cmp	r3, #3
 8018066:	d817      	bhi.n	8018098 <USBH_Get_USB_Status+0x44>
 8018068:	a201      	add	r2, pc, #4	; (adr r2, 8018070 <USBH_Get_USB_Status+0x1c>)
 801806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801806e:	bf00      	nop
 8018070:	08018081 	.word	0x08018081
 8018074:	08018087 	.word	0x08018087
 8018078:	0801808d 	.word	0x0801808d
 801807c:	08018093 	.word	0x08018093
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018080:	2300      	movs	r3, #0
 8018082:	73fb      	strb	r3, [r7, #15]
    break;
 8018084:	e00b      	b.n	801809e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8018086:	2302      	movs	r3, #2
 8018088:	73fb      	strb	r3, [r7, #15]
    break;
 801808a:	e008      	b.n	801809e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801808c:	2301      	movs	r3, #1
 801808e:	73fb      	strb	r3, [r7, #15]
    break;
 8018090:	e005      	b.n	801809e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018092:	2302      	movs	r3, #2
 8018094:	73fb      	strb	r3, [r7, #15]
    break;
 8018096:	e002      	b.n	801809e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8018098:	2302      	movs	r3, #2
 801809a:	73fb      	strb	r3, [r7, #15]
    break;
 801809c:	bf00      	nop
  }
  return usb_status;
 801809e:	7bfb      	ldrb	r3, [r7, #15]
}
 80180a0:	4618      	mov	r0, r3
 80180a2:	3714      	adds	r7, #20
 80180a4:	46bd      	mov	sp, r7
 80180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180aa:	4770      	bx	lr

080180ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b084      	sub	sp, #16
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	4603      	mov	r3, r0
 80180b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80180b6:	79fb      	ldrb	r3, [r7, #7]
 80180b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80180ba:	79fb      	ldrb	r3, [r7, #7]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d102      	bne.n	80180c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80180c0:	2301      	movs	r3, #1
 80180c2:	73fb      	strb	r3, [r7, #15]
 80180c4:	e001      	b.n	80180ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80180c6:	2300      	movs	r3, #0
 80180c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80180ca:	7bfb      	ldrb	r3, [r7, #15]
 80180cc:	461a      	mov	r2, r3
 80180ce:	2140      	movs	r1, #64	; 0x40
 80180d0:	4803      	ldr	r0, [pc, #12]	; (80180e0 <MX_DriverVbusFS+0x34>)
 80180d2:	f7f4 fbd1 	bl	800c878 <HAL_GPIO_WritePin>
}
 80180d6:	bf00      	nop
 80180d8:	3710      	adds	r7, #16
 80180da:	46bd      	mov	sp, r7
 80180dc:	bd80      	pop	{r7, pc}
 80180de:	bf00      	nop
 80180e0:	48001800 	.word	0x48001800

080180e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80180e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801811c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80180e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80180ea:	e003      	b.n	80180f4 <LoopCopyDataInit>

080180ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80180ec:	4b0c      	ldr	r3, [pc, #48]	; (8018120 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80180ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80180f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80180f2:	3104      	adds	r1, #4

080180f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80180f4:	480b      	ldr	r0, [pc, #44]	; (8018124 <LoopForever+0xa>)
	ldr	r3, =_edata
 80180f6:	4b0c      	ldr	r3, [pc, #48]	; (8018128 <LoopForever+0xe>)
	adds	r2, r0, r1
 80180f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80180fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80180fc:	d3f6      	bcc.n	80180ec <CopyDataInit>
	ldr	r2, =_sbss
 80180fe:	4a0b      	ldr	r2, [pc, #44]	; (801812c <LoopForever+0x12>)
	b	LoopFillZerobss
 8018100:	e002      	b.n	8018108 <LoopFillZerobss>

08018102 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8018102:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8018104:	f842 3b04 	str.w	r3, [r2], #4

08018108 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8018108:	4b09      	ldr	r3, [pc, #36]	; (8018130 <LoopForever+0x16>)
	cmp	r2, r3
 801810a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801810c:	d3f9      	bcc.n	8018102 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801810e:	f7ff faf3 	bl	80176f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018112:	f000 f885 	bl	8018220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8018116:	f7fe ffb1 	bl	801707c <main>

0801811a <LoopForever>:

LoopForever:
    b LoopForever
 801811a:	e7fe      	b.n	801811a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 801811c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8018120:	0801a8ec 	.word	0x0801a8ec
	ldr	r0, =_sdata
 8018124:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8018128:	200000bc 	.word	0x200000bc
	ldr	r2, =_sbss
 801812c:	200000bc 	.word	0x200000bc
	ldr	r3, = _ebss
 8018130:	20007914 	.word	0x20007914

08018134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8018134:	e7fe      	b.n	8018134 <ADC1_2_IRQHandler>
	...

08018138 <__errno>:
 8018138:	4b01      	ldr	r3, [pc, #4]	; (8018140 <__errno+0x8>)
 801813a:	6818      	ldr	r0, [r3, #0]
 801813c:	4770      	bx	lr
 801813e:	bf00      	nop
 8018140:	20000058 	.word	0x20000058

08018144 <fiprintf>:
 8018144:	b40e      	push	{r1, r2, r3}
 8018146:	b503      	push	{r0, r1, lr}
 8018148:	4601      	mov	r1, r0
 801814a:	ab03      	add	r3, sp, #12
 801814c:	4805      	ldr	r0, [pc, #20]	; (8018164 <fiprintf+0x20>)
 801814e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018152:	6800      	ldr	r0, [r0, #0]
 8018154:	9301      	str	r3, [sp, #4]
 8018156:	f000 f995 	bl	8018484 <_vfiprintf_r>
 801815a:	b002      	add	sp, #8
 801815c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018160:	b003      	add	sp, #12
 8018162:	4770      	bx	lr
 8018164:	20000058 	.word	0x20000058

08018168 <_fwrite_r>:
 8018168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801816c:	9c08      	ldr	r4, [sp, #32]
 801816e:	4689      	mov	r9, r1
 8018170:	4617      	mov	r7, r2
 8018172:	fb02 f803 	mul.w	r8, r2, r3
 8018176:	4606      	mov	r6, r0
 8018178:	b118      	cbz	r0, 8018182 <_fwrite_r+0x1a>
 801817a:	6983      	ldr	r3, [r0, #24]
 801817c:	b90b      	cbnz	r3, 8018182 <_fwrite_r+0x1a>
 801817e:	f000 fe15 	bl	8018dac <__sinit>
 8018182:	4b1d      	ldr	r3, [pc, #116]	; (80181f8 <_fwrite_r+0x90>)
 8018184:	429c      	cmp	r4, r3
 8018186:	d11a      	bne.n	80181be <_fwrite_r+0x56>
 8018188:	6874      	ldr	r4, [r6, #4]
 801818a:	89a3      	ldrh	r3, [r4, #12]
 801818c:	071b      	lsls	r3, r3, #28
 801818e:	d520      	bpl.n	80181d2 <_fwrite_r+0x6a>
 8018190:	6923      	ldr	r3, [r4, #16]
 8018192:	b1f3      	cbz	r3, 80181d2 <_fwrite_r+0x6a>
 8018194:	2500      	movs	r5, #0
 8018196:	4545      	cmp	r5, r8
 8018198:	d029      	beq.n	80181ee <_fwrite_r+0x86>
 801819a:	68a3      	ldr	r3, [r4, #8]
 801819c:	f819 1005 	ldrb.w	r1, [r9, r5]
 80181a0:	3b01      	subs	r3, #1
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	60a3      	str	r3, [r4, #8]
 80181a6:	da04      	bge.n	80181b2 <_fwrite_r+0x4a>
 80181a8:	69a2      	ldr	r2, [r4, #24]
 80181aa:	4293      	cmp	r3, r2
 80181ac:	db19      	blt.n	80181e2 <_fwrite_r+0x7a>
 80181ae:	290a      	cmp	r1, #10
 80181b0:	d017      	beq.n	80181e2 <_fwrite_r+0x7a>
 80181b2:	6823      	ldr	r3, [r4, #0]
 80181b4:	1c5a      	adds	r2, r3, #1
 80181b6:	6022      	str	r2, [r4, #0]
 80181b8:	7019      	strb	r1, [r3, #0]
 80181ba:	3501      	adds	r5, #1
 80181bc:	e7eb      	b.n	8018196 <_fwrite_r+0x2e>
 80181be:	4b0f      	ldr	r3, [pc, #60]	; (80181fc <_fwrite_r+0x94>)
 80181c0:	429c      	cmp	r4, r3
 80181c2:	d101      	bne.n	80181c8 <_fwrite_r+0x60>
 80181c4:	68b4      	ldr	r4, [r6, #8]
 80181c6:	e7e0      	b.n	801818a <_fwrite_r+0x22>
 80181c8:	4b0d      	ldr	r3, [pc, #52]	; (8018200 <_fwrite_r+0x98>)
 80181ca:	429c      	cmp	r4, r3
 80181cc:	bf08      	it	eq
 80181ce:	68f4      	ldreq	r4, [r6, #12]
 80181d0:	e7db      	b.n	801818a <_fwrite_r+0x22>
 80181d2:	4621      	mov	r1, r4
 80181d4:	4630      	mov	r0, r6
 80181d6:	f000 fc8b 	bl	8018af0 <__swsetup_r>
 80181da:	2800      	cmp	r0, #0
 80181dc:	d0da      	beq.n	8018194 <_fwrite_r+0x2c>
 80181de:	2500      	movs	r5, #0
 80181e0:	e005      	b.n	80181ee <_fwrite_r+0x86>
 80181e2:	4622      	mov	r2, r4
 80181e4:	4630      	mov	r0, r6
 80181e6:	f000 fc31 	bl	8018a4c <__swbuf_r>
 80181ea:	3001      	adds	r0, #1
 80181ec:	d1e5      	bne.n	80181ba <_fwrite_r+0x52>
 80181ee:	fbb5 f0f7 	udiv	r0, r5, r7
 80181f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181f6:	bf00      	nop
 80181f8:	0801a89c 	.word	0x0801a89c
 80181fc:	0801a8bc 	.word	0x0801a8bc
 8018200:	0801a87c 	.word	0x0801a87c

08018204 <fwrite>:
 8018204:	b507      	push	{r0, r1, r2, lr}
 8018206:	9300      	str	r3, [sp, #0]
 8018208:	4613      	mov	r3, r2
 801820a:	460a      	mov	r2, r1
 801820c:	4601      	mov	r1, r0
 801820e:	4803      	ldr	r0, [pc, #12]	; (801821c <fwrite+0x18>)
 8018210:	6800      	ldr	r0, [r0, #0]
 8018212:	f7ff ffa9 	bl	8018168 <_fwrite_r>
 8018216:	b003      	add	sp, #12
 8018218:	f85d fb04 	ldr.w	pc, [sp], #4
 801821c:	20000058 	.word	0x20000058

08018220 <__libc_init_array>:
 8018220:	b570      	push	{r4, r5, r6, lr}
 8018222:	4e0d      	ldr	r6, [pc, #52]	; (8018258 <__libc_init_array+0x38>)
 8018224:	4c0d      	ldr	r4, [pc, #52]	; (801825c <__libc_init_array+0x3c>)
 8018226:	1ba4      	subs	r4, r4, r6
 8018228:	10a4      	asrs	r4, r4, #2
 801822a:	2500      	movs	r5, #0
 801822c:	42a5      	cmp	r5, r4
 801822e:	d109      	bne.n	8018244 <__libc_init_array+0x24>
 8018230:	4e0b      	ldr	r6, [pc, #44]	; (8018260 <__libc_init_array+0x40>)
 8018232:	4c0c      	ldr	r4, [pc, #48]	; (8018264 <__libc_init_array+0x44>)
 8018234:	f001 f8d6 	bl	80193e4 <_init>
 8018238:	1ba4      	subs	r4, r4, r6
 801823a:	10a4      	asrs	r4, r4, #2
 801823c:	2500      	movs	r5, #0
 801823e:	42a5      	cmp	r5, r4
 8018240:	d105      	bne.n	801824e <__libc_init_array+0x2e>
 8018242:	bd70      	pop	{r4, r5, r6, pc}
 8018244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018248:	4798      	blx	r3
 801824a:	3501      	adds	r5, #1
 801824c:	e7ee      	b.n	801822c <__libc_init_array+0xc>
 801824e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018252:	4798      	blx	r3
 8018254:	3501      	adds	r5, #1
 8018256:	e7f2      	b.n	801823e <__libc_init_array+0x1e>
 8018258:	0801a8e4 	.word	0x0801a8e4
 801825c:	0801a8e4 	.word	0x0801a8e4
 8018260:	0801a8e4 	.word	0x0801a8e4
 8018264:	0801a8e8 	.word	0x0801a8e8

08018268 <malloc>:
 8018268:	4b02      	ldr	r3, [pc, #8]	; (8018274 <malloc+0xc>)
 801826a:	4601      	mov	r1, r0
 801826c:	6818      	ldr	r0, [r3, #0]
 801826e:	f000 b885 	b.w	801837c <_malloc_r>
 8018272:	bf00      	nop
 8018274:	20000058 	.word	0x20000058

08018278 <free>:
 8018278:	4b02      	ldr	r3, [pc, #8]	; (8018284 <free+0xc>)
 801827a:	4601      	mov	r1, r0
 801827c:	6818      	ldr	r0, [r3, #0]
 801827e:	f000 b82f 	b.w	80182e0 <_free_r>
 8018282:	bf00      	nop
 8018284:	20000058 	.word	0x20000058

08018288 <memcpy>:
 8018288:	b510      	push	{r4, lr}
 801828a:	1e43      	subs	r3, r0, #1
 801828c:	440a      	add	r2, r1
 801828e:	4291      	cmp	r1, r2
 8018290:	d100      	bne.n	8018294 <memcpy+0xc>
 8018292:	bd10      	pop	{r4, pc}
 8018294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018298:	f803 4f01 	strb.w	r4, [r3, #1]!
 801829c:	e7f7      	b.n	801828e <memcpy+0x6>

0801829e <memmove>:
 801829e:	4288      	cmp	r0, r1
 80182a0:	b510      	push	{r4, lr}
 80182a2:	eb01 0302 	add.w	r3, r1, r2
 80182a6:	d807      	bhi.n	80182b8 <memmove+0x1a>
 80182a8:	1e42      	subs	r2, r0, #1
 80182aa:	4299      	cmp	r1, r3
 80182ac:	d00a      	beq.n	80182c4 <memmove+0x26>
 80182ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80182b6:	e7f8      	b.n	80182aa <memmove+0xc>
 80182b8:	4283      	cmp	r3, r0
 80182ba:	d9f5      	bls.n	80182a8 <memmove+0xa>
 80182bc:	1881      	adds	r1, r0, r2
 80182be:	1ad2      	subs	r2, r2, r3
 80182c0:	42d3      	cmn	r3, r2
 80182c2:	d100      	bne.n	80182c6 <memmove+0x28>
 80182c4:	bd10      	pop	{r4, pc}
 80182c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80182ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80182ce:	e7f7      	b.n	80182c0 <memmove+0x22>

080182d0 <memset>:
 80182d0:	4402      	add	r2, r0
 80182d2:	4603      	mov	r3, r0
 80182d4:	4293      	cmp	r3, r2
 80182d6:	d100      	bne.n	80182da <memset+0xa>
 80182d8:	4770      	bx	lr
 80182da:	f803 1b01 	strb.w	r1, [r3], #1
 80182de:	e7f9      	b.n	80182d4 <memset+0x4>

080182e0 <_free_r>:
 80182e0:	b538      	push	{r3, r4, r5, lr}
 80182e2:	4605      	mov	r5, r0
 80182e4:	2900      	cmp	r1, #0
 80182e6:	d045      	beq.n	8018374 <_free_r+0x94>
 80182e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182ec:	1f0c      	subs	r4, r1, #4
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	bfb8      	it	lt
 80182f2:	18e4      	addlt	r4, r4, r3
 80182f4:	f000 fe48 	bl	8018f88 <__malloc_lock>
 80182f8:	4a1f      	ldr	r2, [pc, #124]	; (8018378 <_free_r+0x98>)
 80182fa:	6813      	ldr	r3, [r2, #0]
 80182fc:	4610      	mov	r0, r2
 80182fe:	b933      	cbnz	r3, 801830e <_free_r+0x2e>
 8018300:	6063      	str	r3, [r4, #4]
 8018302:	6014      	str	r4, [r2, #0]
 8018304:	4628      	mov	r0, r5
 8018306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801830a:	f000 be3e 	b.w	8018f8a <__malloc_unlock>
 801830e:	42a3      	cmp	r3, r4
 8018310:	d90c      	bls.n	801832c <_free_r+0x4c>
 8018312:	6821      	ldr	r1, [r4, #0]
 8018314:	1862      	adds	r2, r4, r1
 8018316:	4293      	cmp	r3, r2
 8018318:	bf04      	itt	eq
 801831a:	681a      	ldreq	r2, [r3, #0]
 801831c:	685b      	ldreq	r3, [r3, #4]
 801831e:	6063      	str	r3, [r4, #4]
 8018320:	bf04      	itt	eq
 8018322:	1852      	addeq	r2, r2, r1
 8018324:	6022      	streq	r2, [r4, #0]
 8018326:	6004      	str	r4, [r0, #0]
 8018328:	e7ec      	b.n	8018304 <_free_r+0x24>
 801832a:	4613      	mov	r3, r2
 801832c:	685a      	ldr	r2, [r3, #4]
 801832e:	b10a      	cbz	r2, 8018334 <_free_r+0x54>
 8018330:	42a2      	cmp	r2, r4
 8018332:	d9fa      	bls.n	801832a <_free_r+0x4a>
 8018334:	6819      	ldr	r1, [r3, #0]
 8018336:	1858      	adds	r0, r3, r1
 8018338:	42a0      	cmp	r0, r4
 801833a:	d10b      	bne.n	8018354 <_free_r+0x74>
 801833c:	6820      	ldr	r0, [r4, #0]
 801833e:	4401      	add	r1, r0
 8018340:	1858      	adds	r0, r3, r1
 8018342:	4282      	cmp	r2, r0
 8018344:	6019      	str	r1, [r3, #0]
 8018346:	d1dd      	bne.n	8018304 <_free_r+0x24>
 8018348:	6810      	ldr	r0, [r2, #0]
 801834a:	6852      	ldr	r2, [r2, #4]
 801834c:	605a      	str	r2, [r3, #4]
 801834e:	4401      	add	r1, r0
 8018350:	6019      	str	r1, [r3, #0]
 8018352:	e7d7      	b.n	8018304 <_free_r+0x24>
 8018354:	d902      	bls.n	801835c <_free_r+0x7c>
 8018356:	230c      	movs	r3, #12
 8018358:	602b      	str	r3, [r5, #0]
 801835a:	e7d3      	b.n	8018304 <_free_r+0x24>
 801835c:	6820      	ldr	r0, [r4, #0]
 801835e:	1821      	adds	r1, r4, r0
 8018360:	428a      	cmp	r2, r1
 8018362:	bf04      	itt	eq
 8018364:	6811      	ldreq	r1, [r2, #0]
 8018366:	6852      	ldreq	r2, [r2, #4]
 8018368:	6062      	str	r2, [r4, #4]
 801836a:	bf04      	itt	eq
 801836c:	1809      	addeq	r1, r1, r0
 801836e:	6021      	streq	r1, [r4, #0]
 8018370:	605c      	str	r4, [r3, #4]
 8018372:	e7c7      	b.n	8018304 <_free_r+0x24>
 8018374:	bd38      	pop	{r3, r4, r5, pc}
 8018376:	bf00      	nop
 8018378:	20001a88 	.word	0x20001a88

0801837c <_malloc_r>:
 801837c:	b570      	push	{r4, r5, r6, lr}
 801837e:	1ccd      	adds	r5, r1, #3
 8018380:	f025 0503 	bic.w	r5, r5, #3
 8018384:	3508      	adds	r5, #8
 8018386:	2d0c      	cmp	r5, #12
 8018388:	bf38      	it	cc
 801838a:	250c      	movcc	r5, #12
 801838c:	2d00      	cmp	r5, #0
 801838e:	4606      	mov	r6, r0
 8018390:	db01      	blt.n	8018396 <_malloc_r+0x1a>
 8018392:	42a9      	cmp	r1, r5
 8018394:	d903      	bls.n	801839e <_malloc_r+0x22>
 8018396:	230c      	movs	r3, #12
 8018398:	6033      	str	r3, [r6, #0]
 801839a:	2000      	movs	r0, #0
 801839c:	bd70      	pop	{r4, r5, r6, pc}
 801839e:	f000 fdf3 	bl	8018f88 <__malloc_lock>
 80183a2:	4a21      	ldr	r2, [pc, #132]	; (8018428 <_malloc_r+0xac>)
 80183a4:	6814      	ldr	r4, [r2, #0]
 80183a6:	4621      	mov	r1, r4
 80183a8:	b991      	cbnz	r1, 80183d0 <_malloc_r+0x54>
 80183aa:	4c20      	ldr	r4, [pc, #128]	; (801842c <_malloc_r+0xb0>)
 80183ac:	6823      	ldr	r3, [r4, #0]
 80183ae:	b91b      	cbnz	r3, 80183b8 <_malloc_r+0x3c>
 80183b0:	4630      	mov	r0, r6
 80183b2:	f000 fb05 	bl	80189c0 <_sbrk_r>
 80183b6:	6020      	str	r0, [r4, #0]
 80183b8:	4629      	mov	r1, r5
 80183ba:	4630      	mov	r0, r6
 80183bc:	f000 fb00 	bl	80189c0 <_sbrk_r>
 80183c0:	1c43      	adds	r3, r0, #1
 80183c2:	d124      	bne.n	801840e <_malloc_r+0x92>
 80183c4:	230c      	movs	r3, #12
 80183c6:	6033      	str	r3, [r6, #0]
 80183c8:	4630      	mov	r0, r6
 80183ca:	f000 fdde 	bl	8018f8a <__malloc_unlock>
 80183ce:	e7e4      	b.n	801839a <_malloc_r+0x1e>
 80183d0:	680b      	ldr	r3, [r1, #0]
 80183d2:	1b5b      	subs	r3, r3, r5
 80183d4:	d418      	bmi.n	8018408 <_malloc_r+0x8c>
 80183d6:	2b0b      	cmp	r3, #11
 80183d8:	d90f      	bls.n	80183fa <_malloc_r+0x7e>
 80183da:	600b      	str	r3, [r1, #0]
 80183dc:	50cd      	str	r5, [r1, r3]
 80183de:	18cc      	adds	r4, r1, r3
 80183e0:	4630      	mov	r0, r6
 80183e2:	f000 fdd2 	bl	8018f8a <__malloc_unlock>
 80183e6:	f104 000b 	add.w	r0, r4, #11
 80183ea:	1d23      	adds	r3, r4, #4
 80183ec:	f020 0007 	bic.w	r0, r0, #7
 80183f0:	1ac3      	subs	r3, r0, r3
 80183f2:	d0d3      	beq.n	801839c <_malloc_r+0x20>
 80183f4:	425a      	negs	r2, r3
 80183f6:	50e2      	str	r2, [r4, r3]
 80183f8:	e7d0      	b.n	801839c <_malloc_r+0x20>
 80183fa:	428c      	cmp	r4, r1
 80183fc:	684b      	ldr	r3, [r1, #4]
 80183fe:	bf16      	itet	ne
 8018400:	6063      	strne	r3, [r4, #4]
 8018402:	6013      	streq	r3, [r2, #0]
 8018404:	460c      	movne	r4, r1
 8018406:	e7eb      	b.n	80183e0 <_malloc_r+0x64>
 8018408:	460c      	mov	r4, r1
 801840a:	6849      	ldr	r1, [r1, #4]
 801840c:	e7cc      	b.n	80183a8 <_malloc_r+0x2c>
 801840e:	1cc4      	adds	r4, r0, #3
 8018410:	f024 0403 	bic.w	r4, r4, #3
 8018414:	42a0      	cmp	r0, r4
 8018416:	d005      	beq.n	8018424 <_malloc_r+0xa8>
 8018418:	1a21      	subs	r1, r4, r0
 801841a:	4630      	mov	r0, r6
 801841c:	f000 fad0 	bl	80189c0 <_sbrk_r>
 8018420:	3001      	adds	r0, #1
 8018422:	d0cf      	beq.n	80183c4 <_malloc_r+0x48>
 8018424:	6025      	str	r5, [r4, #0]
 8018426:	e7db      	b.n	80183e0 <_malloc_r+0x64>
 8018428:	20001a88 	.word	0x20001a88
 801842c:	20001a8c 	.word	0x20001a8c

08018430 <__sfputc_r>:
 8018430:	6893      	ldr	r3, [r2, #8]
 8018432:	3b01      	subs	r3, #1
 8018434:	2b00      	cmp	r3, #0
 8018436:	b410      	push	{r4}
 8018438:	6093      	str	r3, [r2, #8]
 801843a:	da08      	bge.n	801844e <__sfputc_r+0x1e>
 801843c:	6994      	ldr	r4, [r2, #24]
 801843e:	42a3      	cmp	r3, r4
 8018440:	db01      	blt.n	8018446 <__sfputc_r+0x16>
 8018442:	290a      	cmp	r1, #10
 8018444:	d103      	bne.n	801844e <__sfputc_r+0x1e>
 8018446:	f85d 4b04 	ldr.w	r4, [sp], #4
 801844a:	f000 baff 	b.w	8018a4c <__swbuf_r>
 801844e:	6813      	ldr	r3, [r2, #0]
 8018450:	1c58      	adds	r0, r3, #1
 8018452:	6010      	str	r0, [r2, #0]
 8018454:	7019      	strb	r1, [r3, #0]
 8018456:	4608      	mov	r0, r1
 8018458:	f85d 4b04 	ldr.w	r4, [sp], #4
 801845c:	4770      	bx	lr

0801845e <__sfputs_r>:
 801845e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018460:	4606      	mov	r6, r0
 8018462:	460f      	mov	r7, r1
 8018464:	4614      	mov	r4, r2
 8018466:	18d5      	adds	r5, r2, r3
 8018468:	42ac      	cmp	r4, r5
 801846a:	d101      	bne.n	8018470 <__sfputs_r+0x12>
 801846c:	2000      	movs	r0, #0
 801846e:	e007      	b.n	8018480 <__sfputs_r+0x22>
 8018470:	463a      	mov	r2, r7
 8018472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018476:	4630      	mov	r0, r6
 8018478:	f7ff ffda 	bl	8018430 <__sfputc_r>
 801847c:	1c43      	adds	r3, r0, #1
 801847e:	d1f3      	bne.n	8018468 <__sfputs_r+0xa>
 8018480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018484 <_vfiprintf_r>:
 8018484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018488:	460c      	mov	r4, r1
 801848a:	b09d      	sub	sp, #116	; 0x74
 801848c:	4617      	mov	r7, r2
 801848e:	461d      	mov	r5, r3
 8018490:	4606      	mov	r6, r0
 8018492:	b118      	cbz	r0, 801849c <_vfiprintf_r+0x18>
 8018494:	6983      	ldr	r3, [r0, #24]
 8018496:	b90b      	cbnz	r3, 801849c <_vfiprintf_r+0x18>
 8018498:	f000 fc88 	bl	8018dac <__sinit>
 801849c:	4b7c      	ldr	r3, [pc, #496]	; (8018690 <_vfiprintf_r+0x20c>)
 801849e:	429c      	cmp	r4, r3
 80184a0:	d158      	bne.n	8018554 <_vfiprintf_r+0xd0>
 80184a2:	6874      	ldr	r4, [r6, #4]
 80184a4:	89a3      	ldrh	r3, [r4, #12]
 80184a6:	0718      	lsls	r0, r3, #28
 80184a8:	d55e      	bpl.n	8018568 <_vfiprintf_r+0xe4>
 80184aa:	6923      	ldr	r3, [r4, #16]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d05b      	beq.n	8018568 <_vfiprintf_r+0xe4>
 80184b0:	2300      	movs	r3, #0
 80184b2:	9309      	str	r3, [sp, #36]	; 0x24
 80184b4:	2320      	movs	r3, #32
 80184b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80184ba:	2330      	movs	r3, #48	; 0x30
 80184bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80184c0:	9503      	str	r5, [sp, #12]
 80184c2:	f04f 0b01 	mov.w	fp, #1
 80184c6:	46b8      	mov	r8, r7
 80184c8:	4645      	mov	r5, r8
 80184ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80184ce:	b10b      	cbz	r3, 80184d4 <_vfiprintf_r+0x50>
 80184d0:	2b25      	cmp	r3, #37	; 0x25
 80184d2:	d154      	bne.n	801857e <_vfiprintf_r+0xfa>
 80184d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80184d8:	d00b      	beq.n	80184f2 <_vfiprintf_r+0x6e>
 80184da:	4653      	mov	r3, sl
 80184dc:	463a      	mov	r2, r7
 80184de:	4621      	mov	r1, r4
 80184e0:	4630      	mov	r0, r6
 80184e2:	f7ff ffbc 	bl	801845e <__sfputs_r>
 80184e6:	3001      	adds	r0, #1
 80184e8:	f000 80c2 	beq.w	8018670 <_vfiprintf_r+0x1ec>
 80184ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184ee:	4453      	add	r3, sl
 80184f0:	9309      	str	r3, [sp, #36]	; 0x24
 80184f2:	f898 3000 	ldrb.w	r3, [r8]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	f000 80ba 	beq.w	8018670 <_vfiprintf_r+0x1ec>
 80184fc:	2300      	movs	r3, #0
 80184fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018506:	9304      	str	r3, [sp, #16]
 8018508:	9307      	str	r3, [sp, #28]
 801850a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801850e:	931a      	str	r3, [sp, #104]	; 0x68
 8018510:	46a8      	mov	r8, r5
 8018512:	2205      	movs	r2, #5
 8018514:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018518:	485e      	ldr	r0, [pc, #376]	; (8018694 <_vfiprintf_r+0x210>)
 801851a:	f7e7 fe71 	bl	8000200 <memchr>
 801851e:	9b04      	ldr	r3, [sp, #16]
 8018520:	bb78      	cbnz	r0, 8018582 <_vfiprintf_r+0xfe>
 8018522:	06d9      	lsls	r1, r3, #27
 8018524:	bf44      	itt	mi
 8018526:	2220      	movmi	r2, #32
 8018528:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801852c:	071a      	lsls	r2, r3, #28
 801852e:	bf44      	itt	mi
 8018530:	222b      	movmi	r2, #43	; 0x2b
 8018532:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018536:	782a      	ldrb	r2, [r5, #0]
 8018538:	2a2a      	cmp	r2, #42	; 0x2a
 801853a:	d02a      	beq.n	8018592 <_vfiprintf_r+0x10e>
 801853c:	9a07      	ldr	r2, [sp, #28]
 801853e:	46a8      	mov	r8, r5
 8018540:	2000      	movs	r0, #0
 8018542:	250a      	movs	r5, #10
 8018544:	4641      	mov	r1, r8
 8018546:	f811 3b01 	ldrb.w	r3, [r1], #1
 801854a:	3b30      	subs	r3, #48	; 0x30
 801854c:	2b09      	cmp	r3, #9
 801854e:	d969      	bls.n	8018624 <_vfiprintf_r+0x1a0>
 8018550:	b360      	cbz	r0, 80185ac <_vfiprintf_r+0x128>
 8018552:	e024      	b.n	801859e <_vfiprintf_r+0x11a>
 8018554:	4b50      	ldr	r3, [pc, #320]	; (8018698 <_vfiprintf_r+0x214>)
 8018556:	429c      	cmp	r4, r3
 8018558:	d101      	bne.n	801855e <_vfiprintf_r+0xda>
 801855a:	68b4      	ldr	r4, [r6, #8]
 801855c:	e7a2      	b.n	80184a4 <_vfiprintf_r+0x20>
 801855e:	4b4f      	ldr	r3, [pc, #316]	; (801869c <_vfiprintf_r+0x218>)
 8018560:	429c      	cmp	r4, r3
 8018562:	bf08      	it	eq
 8018564:	68f4      	ldreq	r4, [r6, #12]
 8018566:	e79d      	b.n	80184a4 <_vfiprintf_r+0x20>
 8018568:	4621      	mov	r1, r4
 801856a:	4630      	mov	r0, r6
 801856c:	f000 fac0 	bl	8018af0 <__swsetup_r>
 8018570:	2800      	cmp	r0, #0
 8018572:	d09d      	beq.n	80184b0 <_vfiprintf_r+0x2c>
 8018574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018578:	b01d      	add	sp, #116	; 0x74
 801857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801857e:	46a8      	mov	r8, r5
 8018580:	e7a2      	b.n	80184c8 <_vfiprintf_r+0x44>
 8018582:	4a44      	ldr	r2, [pc, #272]	; (8018694 <_vfiprintf_r+0x210>)
 8018584:	1a80      	subs	r0, r0, r2
 8018586:	fa0b f000 	lsl.w	r0, fp, r0
 801858a:	4318      	orrs	r0, r3
 801858c:	9004      	str	r0, [sp, #16]
 801858e:	4645      	mov	r5, r8
 8018590:	e7be      	b.n	8018510 <_vfiprintf_r+0x8c>
 8018592:	9a03      	ldr	r2, [sp, #12]
 8018594:	1d11      	adds	r1, r2, #4
 8018596:	6812      	ldr	r2, [r2, #0]
 8018598:	9103      	str	r1, [sp, #12]
 801859a:	2a00      	cmp	r2, #0
 801859c:	db01      	blt.n	80185a2 <_vfiprintf_r+0x11e>
 801859e:	9207      	str	r2, [sp, #28]
 80185a0:	e004      	b.n	80185ac <_vfiprintf_r+0x128>
 80185a2:	4252      	negs	r2, r2
 80185a4:	f043 0302 	orr.w	r3, r3, #2
 80185a8:	9207      	str	r2, [sp, #28]
 80185aa:	9304      	str	r3, [sp, #16]
 80185ac:	f898 3000 	ldrb.w	r3, [r8]
 80185b0:	2b2e      	cmp	r3, #46	; 0x2e
 80185b2:	d10e      	bne.n	80185d2 <_vfiprintf_r+0x14e>
 80185b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80185b8:	2b2a      	cmp	r3, #42	; 0x2a
 80185ba:	d138      	bne.n	801862e <_vfiprintf_r+0x1aa>
 80185bc:	9b03      	ldr	r3, [sp, #12]
 80185be:	1d1a      	adds	r2, r3, #4
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	9203      	str	r2, [sp, #12]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	bfb8      	it	lt
 80185c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80185cc:	f108 0802 	add.w	r8, r8, #2
 80185d0:	9305      	str	r3, [sp, #20]
 80185d2:	4d33      	ldr	r5, [pc, #204]	; (80186a0 <_vfiprintf_r+0x21c>)
 80185d4:	f898 1000 	ldrb.w	r1, [r8]
 80185d8:	2203      	movs	r2, #3
 80185da:	4628      	mov	r0, r5
 80185dc:	f7e7 fe10 	bl	8000200 <memchr>
 80185e0:	b140      	cbz	r0, 80185f4 <_vfiprintf_r+0x170>
 80185e2:	2340      	movs	r3, #64	; 0x40
 80185e4:	1b40      	subs	r0, r0, r5
 80185e6:	fa03 f000 	lsl.w	r0, r3, r0
 80185ea:	9b04      	ldr	r3, [sp, #16]
 80185ec:	4303      	orrs	r3, r0
 80185ee:	f108 0801 	add.w	r8, r8, #1
 80185f2:	9304      	str	r3, [sp, #16]
 80185f4:	f898 1000 	ldrb.w	r1, [r8]
 80185f8:	482a      	ldr	r0, [pc, #168]	; (80186a4 <_vfiprintf_r+0x220>)
 80185fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80185fe:	2206      	movs	r2, #6
 8018600:	f108 0701 	add.w	r7, r8, #1
 8018604:	f7e7 fdfc 	bl	8000200 <memchr>
 8018608:	2800      	cmp	r0, #0
 801860a:	d037      	beq.n	801867c <_vfiprintf_r+0x1f8>
 801860c:	4b26      	ldr	r3, [pc, #152]	; (80186a8 <_vfiprintf_r+0x224>)
 801860e:	bb1b      	cbnz	r3, 8018658 <_vfiprintf_r+0x1d4>
 8018610:	9b03      	ldr	r3, [sp, #12]
 8018612:	3307      	adds	r3, #7
 8018614:	f023 0307 	bic.w	r3, r3, #7
 8018618:	3308      	adds	r3, #8
 801861a:	9303      	str	r3, [sp, #12]
 801861c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801861e:	444b      	add	r3, r9
 8018620:	9309      	str	r3, [sp, #36]	; 0x24
 8018622:	e750      	b.n	80184c6 <_vfiprintf_r+0x42>
 8018624:	fb05 3202 	mla	r2, r5, r2, r3
 8018628:	2001      	movs	r0, #1
 801862a:	4688      	mov	r8, r1
 801862c:	e78a      	b.n	8018544 <_vfiprintf_r+0xc0>
 801862e:	2300      	movs	r3, #0
 8018630:	f108 0801 	add.w	r8, r8, #1
 8018634:	9305      	str	r3, [sp, #20]
 8018636:	4619      	mov	r1, r3
 8018638:	250a      	movs	r5, #10
 801863a:	4640      	mov	r0, r8
 801863c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018640:	3a30      	subs	r2, #48	; 0x30
 8018642:	2a09      	cmp	r2, #9
 8018644:	d903      	bls.n	801864e <_vfiprintf_r+0x1ca>
 8018646:	2b00      	cmp	r3, #0
 8018648:	d0c3      	beq.n	80185d2 <_vfiprintf_r+0x14e>
 801864a:	9105      	str	r1, [sp, #20]
 801864c:	e7c1      	b.n	80185d2 <_vfiprintf_r+0x14e>
 801864e:	fb05 2101 	mla	r1, r5, r1, r2
 8018652:	2301      	movs	r3, #1
 8018654:	4680      	mov	r8, r0
 8018656:	e7f0      	b.n	801863a <_vfiprintf_r+0x1b6>
 8018658:	ab03      	add	r3, sp, #12
 801865a:	9300      	str	r3, [sp, #0]
 801865c:	4622      	mov	r2, r4
 801865e:	4b13      	ldr	r3, [pc, #76]	; (80186ac <_vfiprintf_r+0x228>)
 8018660:	a904      	add	r1, sp, #16
 8018662:	4630      	mov	r0, r6
 8018664:	f3af 8000 	nop.w
 8018668:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801866c:	4681      	mov	r9, r0
 801866e:	d1d5      	bne.n	801861c <_vfiprintf_r+0x198>
 8018670:	89a3      	ldrh	r3, [r4, #12]
 8018672:	065b      	lsls	r3, r3, #25
 8018674:	f53f af7e 	bmi.w	8018574 <_vfiprintf_r+0xf0>
 8018678:	9809      	ldr	r0, [sp, #36]	; 0x24
 801867a:	e77d      	b.n	8018578 <_vfiprintf_r+0xf4>
 801867c:	ab03      	add	r3, sp, #12
 801867e:	9300      	str	r3, [sp, #0]
 8018680:	4622      	mov	r2, r4
 8018682:	4b0a      	ldr	r3, [pc, #40]	; (80186ac <_vfiprintf_r+0x228>)
 8018684:	a904      	add	r1, sp, #16
 8018686:	4630      	mov	r0, r6
 8018688:	f000 f888 	bl	801879c <_printf_i>
 801868c:	e7ec      	b.n	8018668 <_vfiprintf_r+0x1e4>
 801868e:	bf00      	nop
 8018690:	0801a89c 	.word	0x0801a89c
 8018694:	0801a848 	.word	0x0801a848
 8018698:	0801a8bc 	.word	0x0801a8bc
 801869c:	0801a87c 	.word	0x0801a87c
 80186a0:	0801a84e 	.word	0x0801a84e
 80186a4:	0801a852 	.word	0x0801a852
 80186a8:	00000000 	.word	0x00000000
 80186ac:	0801845f 	.word	0x0801845f

080186b0 <_printf_common>:
 80186b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186b4:	4691      	mov	r9, r2
 80186b6:	461f      	mov	r7, r3
 80186b8:	688a      	ldr	r2, [r1, #8]
 80186ba:	690b      	ldr	r3, [r1, #16]
 80186bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80186c0:	4293      	cmp	r3, r2
 80186c2:	bfb8      	it	lt
 80186c4:	4613      	movlt	r3, r2
 80186c6:	f8c9 3000 	str.w	r3, [r9]
 80186ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80186ce:	4606      	mov	r6, r0
 80186d0:	460c      	mov	r4, r1
 80186d2:	b112      	cbz	r2, 80186da <_printf_common+0x2a>
 80186d4:	3301      	adds	r3, #1
 80186d6:	f8c9 3000 	str.w	r3, [r9]
 80186da:	6823      	ldr	r3, [r4, #0]
 80186dc:	0699      	lsls	r1, r3, #26
 80186de:	bf42      	ittt	mi
 80186e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80186e4:	3302      	addmi	r3, #2
 80186e6:	f8c9 3000 	strmi.w	r3, [r9]
 80186ea:	6825      	ldr	r5, [r4, #0]
 80186ec:	f015 0506 	ands.w	r5, r5, #6
 80186f0:	d107      	bne.n	8018702 <_printf_common+0x52>
 80186f2:	f104 0a19 	add.w	sl, r4, #25
 80186f6:	68e3      	ldr	r3, [r4, #12]
 80186f8:	f8d9 2000 	ldr.w	r2, [r9]
 80186fc:	1a9b      	subs	r3, r3, r2
 80186fe:	42ab      	cmp	r3, r5
 8018700:	dc28      	bgt.n	8018754 <_printf_common+0xa4>
 8018702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018706:	6822      	ldr	r2, [r4, #0]
 8018708:	3300      	adds	r3, #0
 801870a:	bf18      	it	ne
 801870c:	2301      	movne	r3, #1
 801870e:	0692      	lsls	r2, r2, #26
 8018710:	d42d      	bmi.n	801876e <_printf_common+0xbe>
 8018712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018716:	4639      	mov	r1, r7
 8018718:	4630      	mov	r0, r6
 801871a:	47c0      	blx	r8
 801871c:	3001      	adds	r0, #1
 801871e:	d020      	beq.n	8018762 <_printf_common+0xb2>
 8018720:	6823      	ldr	r3, [r4, #0]
 8018722:	68e5      	ldr	r5, [r4, #12]
 8018724:	f8d9 2000 	ldr.w	r2, [r9]
 8018728:	f003 0306 	and.w	r3, r3, #6
 801872c:	2b04      	cmp	r3, #4
 801872e:	bf08      	it	eq
 8018730:	1aad      	subeq	r5, r5, r2
 8018732:	68a3      	ldr	r3, [r4, #8]
 8018734:	6922      	ldr	r2, [r4, #16]
 8018736:	bf0c      	ite	eq
 8018738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801873c:	2500      	movne	r5, #0
 801873e:	4293      	cmp	r3, r2
 8018740:	bfc4      	itt	gt
 8018742:	1a9b      	subgt	r3, r3, r2
 8018744:	18ed      	addgt	r5, r5, r3
 8018746:	f04f 0900 	mov.w	r9, #0
 801874a:	341a      	adds	r4, #26
 801874c:	454d      	cmp	r5, r9
 801874e:	d11a      	bne.n	8018786 <_printf_common+0xd6>
 8018750:	2000      	movs	r0, #0
 8018752:	e008      	b.n	8018766 <_printf_common+0xb6>
 8018754:	2301      	movs	r3, #1
 8018756:	4652      	mov	r2, sl
 8018758:	4639      	mov	r1, r7
 801875a:	4630      	mov	r0, r6
 801875c:	47c0      	blx	r8
 801875e:	3001      	adds	r0, #1
 8018760:	d103      	bne.n	801876a <_printf_common+0xba>
 8018762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801876a:	3501      	adds	r5, #1
 801876c:	e7c3      	b.n	80186f6 <_printf_common+0x46>
 801876e:	18e1      	adds	r1, r4, r3
 8018770:	1c5a      	adds	r2, r3, #1
 8018772:	2030      	movs	r0, #48	; 0x30
 8018774:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018778:	4422      	add	r2, r4
 801877a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801877e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018782:	3302      	adds	r3, #2
 8018784:	e7c5      	b.n	8018712 <_printf_common+0x62>
 8018786:	2301      	movs	r3, #1
 8018788:	4622      	mov	r2, r4
 801878a:	4639      	mov	r1, r7
 801878c:	4630      	mov	r0, r6
 801878e:	47c0      	blx	r8
 8018790:	3001      	adds	r0, #1
 8018792:	d0e6      	beq.n	8018762 <_printf_common+0xb2>
 8018794:	f109 0901 	add.w	r9, r9, #1
 8018798:	e7d8      	b.n	801874c <_printf_common+0x9c>
	...

0801879c <_printf_i>:
 801879c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80187a4:	460c      	mov	r4, r1
 80187a6:	7e09      	ldrb	r1, [r1, #24]
 80187a8:	b085      	sub	sp, #20
 80187aa:	296e      	cmp	r1, #110	; 0x6e
 80187ac:	4617      	mov	r7, r2
 80187ae:	4606      	mov	r6, r0
 80187b0:	4698      	mov	r8, r3
 80187b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80187b4:	f000 80b3 	beq.w	801891e <_printf_i+0x182>
 80187b8:	d822      	bhi.n	8018800 <_printf_i+0x64>
 80187ba:	2963      	cmp	r1, #99	; 0x63
 80187bc:	d036      	beq.n	801882c <_printf_i+0x90>
 80187be:	d80a      	bhi.n	80187d6 <_printf_i+0x3a>
 80187c0:	2900      	cmp	r1, #0
 80187c2:	f000 80b9 	beq.w	8018938 <_printf_i+0x19c>
 80187c6:	2958      	cmp	r1, #88	; 0x58
 80187c8:	f000 8083 	beq.w	80188d2 <_printf_i+0x136>
 80187cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80187d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80187d4:	e032      	b.n	801883c <_printf_i+0xa0>
 80187d6:	2964      	cmp	r1, #100	; 0x64
 80187d8:	d001      	beq.n	80187de <_printf_i+0x42>
 80187da:	2969      	cmp	r1, #105	; 0x69
 80187dc:	d1f6      	bne.n	80187cc <_printf_i+0x30>
 80187de:	6820      	ldr	r0, [r4, #0]
 80187e0:	6813      	ldr	r3, [r2, #0]
 80187e2:	0605      	lsls	r5, r0, #24
 80187e4:	f103 0104 	add.w	r1, r3, #4
 80187e8:	d52a      	bpl.n	8018840 <_printf_i+0xa4>
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	6011      	str	r1, [r2, #0]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	da03      	bge.n	80187fa <_printf_i+0x5e>
 80187f2:	222d      	movs	r2, #45	; 0x2d
 80187f4:	425b      	negs	r3, r3
 80187f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80187fa:	486f      	ldr	r0, [pc, #444]	; (80189b8 <_printf_i+0x21c>)
 80187fc:	220a      	movs	r2, #10
 80187fe:	e039      	b.n	8018874 <_printf_i+0xd8>
 8018800:	2973      	cmp	r1, #115	; 0x73
 8018802:	f000 809d 	beq.w	8018940 <_printf_i+0x1a4>
 8018806:	d808      	bhi.n	801881a <_printf_i+0x7e>
 8018808:	296f      	cmp	r1, #111	; 0x6f
 801880a:	d020      	beq.n	801884e <_printf_i+0xb2>
 801880c:	2970      	cmp	r1, #112	; 0x70
 801880e:	d1dd      	bne.n	80187cc <_printf_i+0x30>
 8018810:	6823      	ldr	r3, [r4, #0]
 8018812:	f043 0320 	orr.w	r3, r3, #32
 8018816:	6023      	str	r3, [r4, #0]
 8018818:	e003      	b.n	8018822 <_printf_i+0x86>
 801881a:	2975      	cmp	r1, #117	; 0x75
 801881c:	d017      	beq.n	801884e <_printf_i+0xb2>
 801881e:	2978      	cmp	r1, #120	; 0x78
 8018820:	d1d4      	bne.n	80187cc <_printf_i+0x30>
 8018822:	2378      	movs	r3, #120	; 0x78
 8018824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018828:	4864      	ldr	r0, [pc, #400]	; (80189bc <_printf_i+0x220>)
 801882a:	e055      	b.n	80188d8 <_printf_i+0x13c>
 801882c:	6813      	ldr	r3, [r2, #0]
 801882e:	1d19      	adds	r1, r3, #4
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	6011      	str	r1, [r2, #0]
 8018834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801883c:	2301      	movs	r3, #1
 801883e:	e08c      	b.n	801895a <_printf_i+0x1be>
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	6011      	str	r1, [r2, #0]
 8018844:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018848:	bf18      	it	ne
 801884a:	b21b      	sxthne	r3, r3
 801884c:	e7cf      	b.n	80187ee <_printf_i+0x52>
 801884e:	6813      	ldr	r3, [r2, #0]
 8018850:	6825      	ldr	r5, [r4, #0]
 8018852:	1d18      	adds	r0, r3, #4
 8018854:	6010      	str	r0, [r2, #0]
 8018856:	0628      	lsls	r0, r5, #24
 8018858:	d501      	bpl.n	801885e <_printf_i+0xc2>
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	e002      	b.n	8018864 <_printf_i+0xc8>
 801885e:	0668      	lsls	r0, r5, #25
 8018860:	d5fb      	bpl.n	801885a <_printf_i+0xbe>
 8018862:	881b      	ldrh	r3, [r3, #0]
 8018864:	4854      	ldr	r0, [pc, #336]	; (80189b8 <_printf_i+0x21c>)
 8018866:	296f      	cmp	r1, #111	; 0x6f
 8018868:	bf14      	ite	ne
 801886a:	220a      	movne	r2, #10
 801886c:	2208      	moveq	r2, #8
 801886e:	2100      	movs	r1, #0
 8018870:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018874:	6865      	ldr	r5, [r4, #4]
 8018876:	60a5      	str	r5, [r4, #8]
 8018878:	2d00      	cmp	r5, #0
 801887a:	f2c0 8095 	blt.w	80189a8 <_printf_i+0x20c>
 801887e:	6821      	ldr	r1, [r4, #0]
 8018880:	f021 0104 	bic.w	r1, r1, #4
 8018884:	6021      	str	r1, [r4, #0]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d13d      	bne.n	8018906 <_printf_i+0x16a>
 801888a:	2d00      	cmp	r5, #0
 801888c:	f040 808e 	bne.w	80189ac <_printf_i+0x210>
 8018890:	4665      	mov	r5, ip
 8018892:	2a08      	cmp	r2, #8
 8018894:	d10b      	bne.n	80188ae <_printf_i+0x112>
 8018896:	6823      	ldr	r3, [r4, #0]
 8018898:	07db      	lsls	r3, r3, #31
 801889a:	d508      	bpl.n	80188ae <_printf_i+0x112>
 801889c:	6923      	ldr	r3, [r4, #16]
 801889e:	6862      	ldr	r2, [r4, #4]
 80188a0:	429a      	cmp	r2, r3
 80188a2:	bfde      	ittt	le
 80188a4:	2330      	movle	r3, #48	; 0x30
 80188a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80188aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80188ae:	ebac 0305 	sub.w	r3, ip, r5
 80188b2:	6123      	str	r3, [r4, #16]
 80188b4:	f8cd 8000 	str.w	r8, [sp]
 80188b8:	463b      	mov	r3, r7
 80188ba:	aa03      	add	r2, sp, #12
 80188bc:	4621      	mov	r1, r4
 80188be:	4630      	mov	r0, r6
 80188c0:	f7ff fef6 	bl	80186b0 <_printf_common>
 80188c4:	3001      	adds	r0, #1
 80188c6:	d14d      	bne.n	8018964 <_printf_i+0x1c8>
 80188c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188cc:	b005      	add	sp, #20
 80188ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188d2:	4839      	ldr	r0, [pc, #228]	; (80189b8 <_printf_i+0x21c>)
 80188d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80188d8:	6813      	ldr	r3, [r2, #0]
 80188da:	6821      	ldr	r1, [r4, #0]
 80188dc:	1d1d      	adds	r5, r3, #4
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	6015      	str	r5, [r2, #0]
 80188e2:	060a      	lsls	r2, r1, #24
 80188e4:	d50b      	bpl.n	80188fe <_printf_i+0x162>
 80188e6:	07ca      	lsls	r2, r1, #31
 80188e8:	bf44      	itt	mi
 80188ea:	f041 0120 	orrmi.w	r1, r1, #32
 80188ee:	6021      	strmi	r1, [r4, #0]
 80188f0:	b91b      	cbnz	r3, 80188fa <_printf_i+0x15e>
 80188f2:	6822      	ldr	r2, [r4, #0]
 80188f4:	f022 0220 	bic.w	r2, r2, #32
 80188f8:	6022      	str	r2, [r4, #0]
 80188fa:	2210      	movs	r2, #16
 80188fc:	e7b7      	b.n	801886e <_printf_i+0xd2>
 80188fe:	064d      	lsls	r5, r1, #25
 8018900:	bf48      	it	mi
 8018902:	b29b      	uxthmi	r3, r3
 8018904:	e7ef      	b.n	80188e6 <_printf_i+0x14a>
 8018906:	4665      	mov	r5, ip
 8018908:	fbb3 f1f2 	udiv	r1, r3, r2
 801890c:	fb02 3311 	mls	r3, r2, r1, r3
 8018910:	5cc3      	ldrb	r3, [r0, r3]
 8018912:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018916:	460b      	mov	r3, r1
 8018918:	2900      	cmp	r1, #0
 801891a:	d1f5      	bne.n	8018908 <_printf_i+0x16c>
 801891c:	e7b9      	b.n	8018892 <_printf_i+0xf6>
 801891e:	6813      	ldr	r3, [r2, #0]
 8018920:	6825      	ldr	r5, [r4, #0]
 8018922:	6961      	ldr	r1, [r4, #20]
 8018924:	1d18      	adds	r0, r3, #4
 8018926:	6010      	str	r0, [r2, #0]
 8018928:	0628      	lsls	r0, r5, #24
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	d501      	bpl.n	8018932 <_printf_i+0x196>
 801892e:	6019      	str	r1, [r3, #0]
 8018930:	e002      	b.n	8018938 <_printf_i+0x19c>
 8018932:	066a      	lsls	r2, r5, #25
 8018934:	d5fb      	bpl.n	801892e <_printf_i+0x192>
 8018936:	8019      	strh	r1, [r3, #0]
 8018938:	2300      	movs	r3, #0
 801893a:	6123      	str	r3, [r4, #16]
 801893c:	4665      	mov	r5, ip
 801893e:	e7b9      	b.n	80188b4 <_printf_i+0x118>
 8018940:	6813      	ldr	r3, [r2, #0]
 8018942:	1d19      	adds	r1, r3, #4
 8018944:	6011      	str	r1, [r2, #0]
 8018946:	681d      	ldr	r5, [r3, #0]
 8018948:	6862      	ldr	r2, [r4, #4]
 801894a:	2100      	movs	r1, #0
 801894c:	4628      	mov	r0, r5
 801894e:	f7e7 fc57 	bl	8000200 <memchr>
 8018952:	b108      	cbz	r0, 8018958 <_printf_i+0x1bc>
 8018954:	1b40      	subs	r0, r0, r5
 8018956:	6060      	str	r0, [r4, #4]
 8018958:	6863      	ldr	r3, [r4, #4]
 801895a:	6123      	str	r3, [r4, #16]
 801895c:	2300      	movs	r3, #0
 801895e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018962:	e7a7      	b.n	80188b4 <_printf_i+0x118>
 8018964:	6923      	ldr	r3, [r4, #16]
 8018966:	462a      	mov	r2, r5
 8018968:	4639      	mov	r1, r7
 801896a:	4630      	mov	r0, r6
 801896c:	47c0      	blx	r8
 801896e:	3001      	adds	r0, #1
 8018970:	d0aa      	beq.n	80188c8 <_printf_i+0x12c>
 8018972:	6823      	ldr	r3, [r4, #0]
 8018974:	079b      	lsls	r3, r3, #30
 8018976:	d413      	bmi.n	80189a0 <_printf_i+0x204>
 8018978:	68e0      	ldr	r0, [r4, #12]
 801897a:	9b03      	ldr	r3, [sp, #12]
 801897c:	4298      	cmp	r0, r3
 801897e:	bfb8      	it	lt
 8018980:	4618      	movlt	r0, r3
 8018982:	e7a3      	b.n	80188cc <_printf_i+0x130>
 8018984:	2301      	movs	r3, #1
 8018986:	464a      	mov	r2, r9
 8018988:	4639      	mov	r1, r7
 801898a:	4630      	mov	r0, r6
 801898c:	47c0      	blx	r8
 801898e:	3001      	adds	r0, #1
 8018990:	d09a      	beq.n	80188c8 <_printf_i+0x12c>
 8018992:	3501      	adds	r5, #1
 8018994:	68e3      	ldr	r3, [r4, #12]
 8018996:	9a03      	ldr	r2, [sp, #12]
 8018998:	1a9b      	subs	r3, r3, r2
 801899a:	42ab      	cmp	r3, r5
 801899c:	dcf2      	bgt.n	8018984 <_printf_i+0x1e8>
 801899e:	e7eb      	b.n	8018978 <_printf_i+0x1dc>
 80189a0:	2500      	movs	r5, #0
 80189a2:	f104 0919 	add.w	r9, r4, #25
 80189a6:	e7f5      	b.n	8018994 <_printf_i+0x1f8>
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d1ac      	bne.n	8018906 <_printf_i+0x16a>
 80189ac:	7803      	ldrb	r3, [r0, #0]
 80189ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80189b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80189b6:	e76c      	b.n	8018892 <_printf_i+0xf6>
 80189b8:	0801a859 	.word	0x0801a859
 80189bc:	0801a86a 	.word	0x0801a86a

080189c0 <_sbrk_r>:
 80189c0:	b538      	push	{r3, r4, r5, lr}
 80189c2:	4c06      	ldr	r4, [pc, #24]	; (80189dc <_sbrk_r+0x1c>)
 80189c4:	2300      	movs	r3, #0
 80189c6:	4605      	mov	r5, r0
 80189c8:	4608      	mov	r0, r1
 80189ca:	6023      	str	r3, [r4, #0]
 80189cc:	f7fe fe68 	bl	80176a0 <_sbrk>
 80189d0:	1c43      	adds	r3, r0, #1
 80189d2:	d102      	bne.n	80189da <_sbrk_r+0x1a>
 80189d4:	6823      	ldr	r3, [r4, #0]
 80189d6:	b103      	cbz	r3, 80189da <_sbrk_r+0x1a>
 80189d8:	602b      	str	r3, [r5, #0]
 80189da:	bd38      	pop	{r3, r4, r5, pc}
 80189dc:	20007910 	.word	0x20007910

080189e0 <siprintf>:
 80189e0:	b40e      	push	{r1, r2, r3}
 80189e2:	b500      	push	{lr}
 80189e4:	b09c      	sub	sp, #112	; 0x70
 80189e6:	ab1d      	add	r3, sp, #116	; 0x74
 80189e8:	9002      	str	r0, [sp, #8]
 80189ea:	9006      	str	r0, [sp, #24]
 80189ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80189f0:	4809      	ldr	r0, [pc, #36]	; (8018a18 <siprintf+0x38>)
 80189f2:	9107      	str	r1, [sp, #28]
 80189f4:	9104      	str	r1, [sp, #16]
 80189f6:	4909      	ldr	r1, [pc, #36]	; (8018a1c <siprintf+0x3c>)
 80189f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80189fc:	9105      	str	r1, [sp, #20]
 80189fe:	6800      	ldr	r0, [r0, #0]
 8018a00:	9301      	str	r3, [sp, #4]
 8018a02:	a902      	add	r1, sp, #8
 8018a04:	f000 fb42 	bl	801908c <_svfiprintf_r>
 8018a08:	9b02      	ldr	r3, [sp, #8]
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	701a      	strb	r2, [r3, #0]
 8018a0e:	b01c      	add	sp, #112	; 0x70
 8018a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a14:	b003      	add	sp, #12
 8018a16:	4770      	bx	lr
 8018a18:	20000058 	.word	0x20000058
 8018a1c:	ffff0208 	.word	0xffff0208

08018a20 <strncpy>:
 8018a20:	b570      	push	{r4, r5, r6, lr}
 8018a22:	3901      	subs	r1, #1
 8018a24:	4604      	mov	r4, r0
 8018a26:	b902      	cbnz	r2, 8018a2a <strncpy+0xa>
 8018a28:	bd70      	pop	{r4, r5, r6, pc}
 8018a2a:	4623      	mov	r3, r4
 8018a2c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8018a30:	f803 5b01 	strb.w	r5, [r3], #1
 8018a34:	1e56      	subs	r6, r2, #1
 8018a36:	b92d      	cbnz	r5, 8018a44 <strncpy+0x24>
 8018a38:	4414      	add	r4, r2
 8018a3a:	42a3      	cmp	r3, r4
 8018a3c:	d0f4      	beq.n	8018a28 <strncpy+0x8>
 8018a3e:	f803 5b01 	strb.w	r5, [r3], #1
 8018a42:	e7fa      	b.n	8018a3a <strncpy+0x1a>
 8018a44:	461c      	mov	r4, r3
 8018a46:	4632      	mov	r2, r6
 8018a48:	e7ed      	b.n	8018a26 <strncpy+0x6>
	...

08018a4c <__swbuf_r>:
 8018a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a4e:	460e      	mov	r6, r1
 8018a50:	4614      	mov	r4, r2
 8018a52:	4605      	mov	r5, r0
 8018a54:	b118      	cbz	r0, 8018a5e <__swbuf_r+0x12>
 8018a56:	6983      	ldr	r3, [r0, #24]
 8018a58:	b90b      	cbnz	r3, 8018a5e <__swbuf_r+0x12>
 8018a5a:	f000 f9a7 	bl	8018dac <__sinit>
 8018a5e:	4b21      	ldr	r3, [pc, #132]	; (8018ae4 <__swbuf_r+0x98>)
 8018a60:	429c      	cmp	r4, r3
 8018a62:	d12a      	bne.n	8018aba <__swbuf_r+0x6e>
 8018a64:	686c      	ldr	r4, [r5, #4]
 8018a66:	69a3      	ldr	r3, [r4, #24]
 8018a68:	60a3      	str	r3, [r4, #8]
 8018a6a:	89a3      	ldrh	r3, [r4, #12]
 8018a6c:	071a      	lsls	r2, r3, #28
 8018a6e:	d52e      	bpl.n	8018ace <__swbuf_r+0x82>
 8018a70:	6923      	ldr	r3, [r4, #16]
 8018a72:	b363      	cbz	r3, 8018ace <__swbuf_r+0x82>
 8018a74:	6923      	ldr	r3, [r4, #16]
 8018a76:	6820      	ldr	r0, [r4, #0]
 8018a78:	1ac0      	subs	r0, r0, r3
 8018a7a:	6963      	ldr	r3, [r4, #20]
 8018a7c:	b2f6      	uxtb	r6, r6
 8018a7e:	4283      	cmp	r3, r0
 8018a80:	4637      	mov	r7, r6
 8018a82:	dc04      	bgt.n	8018a8e <__swbuf_r+0x42>
 8018a84:	4621      	mov	r1, r4
 8018a86:	4628      	mov	r0, r5
 8018a88:	f000 f926 	bl	8018cd8 <_fflush_r>
 8018a8c:	bb28      	cbnz	r0, 8018ada <__swbuf_r+0x8e>
 8018a8e:	68a3      	ldr	r3, [r4, #8]
 8018a90:	3b01      	subs	r3, #1
 8018a92:	60a3      	str	r3, [r4, #8]
 8018a94:	6823      	ldr	r3, [r4, #0]
 8018a96:	1c5a      	adds	r2, r3, #1
 8018a98:	6022      	str	r2, [r4, #0]
 8018a9a:	701e      	strb	r6, [r3, #0]
 8018a9c:	6963      	ldr	r3, [r4, #20]
 8018a9e:	3001      	adds	r0, #1
 8018aa0:	4283      	cmp	r3, r0
 8018aa2:	d004      	beq.n	8018aae <__swbuf_r+0x62>
 8018aa4:	89a3      	ldrh	r3, [r4, #12]
 8018aa6:	07db      	lsls	r3, r3, #31
 8018aa8:	d519      	bpl.n	8018ade <__swbuf_r+0x92>
 8018aaa:	2e0a      	cmp	r6, #10
 8018aac:	d117      	bne.n	8018ade <__swbuf_r+0x92>
 8018aae:	4621      	mov	r1, r4
 8018ab0:	4628      	mov	r0, r5
 8018ab2:	f000 f911 	bl	8018cd8 <_fflush_r>
 8018ab6:	b190      	cbz	r0, 8018ade <__swbuf_r+0x92>
 8018ab8:	e00f      	b.n	8018ada <__swbuf_r+0x8e>
 8018aba:	4b0b      	ldr	r3, [pc, #44]	; (8018ae8 <__swbuf_r+0x9c>)
 8018abc:	429c      	cmp	r4, r3
 8018abe:	d101      	bne.n	8018ac4 <__swbuf_r+0x78>
 8018ac0:	68ac      	ldr	r4, [r5, #8]
 8018ac2:	e7d0      	b.n	8018a66 <__swbuf_r+0x1a>
 8018ac4:	4b09      	ldr	r3, [pc, #36]	; (8018aec <__swbuf_r+0xa0>)
 8018ac6:	429c      	cmp	r4, r3
 8018ac8:	bf08      	it	eq
 8018aca:	68ec      	ldreq	r4, [r5, #12]
 8018acc:	e7cb      	b.n	8018a66 <__swbuf_r+0x1a>
 8018ace:	4621      	mov	r1, r4
 8018ad0:	4628      	mov	r0, r5
 8018ad2:	f000 f80d 	bl	8018af0 <__swsetup_r>
 8018ad6:	2800      	cmp	r0, #0
 8018ad8:	d0cc      	beq.n	8018a74 <__swbuf_r+0x28>
 8018ada:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018ade:	4638      	mov	r0, r7
 8018ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ae2:	bf00      	nop
 8018ae4:	0801a89c 	.word	0x0801a89c
 8018ae8:	0801a8bc 	.word	0x0801a8bc
 8018aec:	0801a87c 	.word	0x0801a87c

08018af0 <__swsetup_r>:
 8018af0:	4b32      	ldr	r3, [pc, #200]	; (8018bbc <__swsetup_r+0xcc>)
 8018af2:	b570      	push	{r4, r5, r6, lr}
 8018af4:	681d      	ldr	r5, [r3, #0]
 8018af6:	4606      	mov	r6, r0
 8018af8:	460c      	mov	r4, r1
 8018afa:	b125      	cbz	r5, 8018b06 <__swsetup_r+0x16>
 8018afc:	69ab      	ldr	r3, [r5, #24]
 8018afe:	b913      	cbnz	r3, 8018b06 <__swsetup_r+0x16>
 8018b00:	4628      	mov	r0, r5
 8018b02:	f000 f953 	bl	8018dac <__sinit>
 8018b06:	4b2e      	ldr	r3, [pc, #184]	; (8018bc0 <__swsetup_r+0xd0>)
 8018b08:	429c      	cmp	r4, r3
 8018b0a:	d10f      	bne.n	8018b2c <__swsetup_r+0x3c>
 8018b0c:	686c      	ldr	r4, [r5, #4]
 8018b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b12:	b29a      	uxth	r2, r3
 8018b14:	0715      	lsls	r5, r2, #28
 8018b16:	d42c      	bmi.n	8018b72 <__swsetup_r+0x82>
 8018b18:	06d0      	lsls	r0, r2, #27
 8018b1a:	d411      	bmi.n	8018b40 <__swsetup_r+0x50>
 8018b1c:	2209      	movs	r2, #9
 8018b1e:	6032      	str	r2, [r6, #0]
 8018b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b24:	81a3      	strh	r3, [r4, #12]
 8018b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b2a:	e03e      	b.n	8018baa <__swsetup_r+0xba>
 8018b2c:	4b25      	ldr	r3, [pc, #148]	; (8018bc4 <__swsetup_r+0xd4>)
 8018b2e:	429c      	cmp	r4, r3
 8018b30:	d101      	bne.n	8018b36 <__swsetup_r+0x46>
 8018b32:	68ac      	ldr	r4, [r5, #8]
 8018b34:	e7eb      	b.n	8018b0e <__swsetup_r+0x1e>
 8018b36:	4b24      	ldr	r3, [pc, #144]	; (8018bc8 <__swsetup_r+0xd8>)
 8018b38:	429c      	cmp	r4, r3
 8018b3a:	bf08      	it	eq
 8018b3c:	68ec      	ldreq	r4, [r5, #12]
 8018b3e:	e7e6      	b.n	8018b0e <__swsetup_r+0x1e>
 8018b40:	0751      	lsls	r1, r2, #29
 8018b42:	d512      	bpl.n	8018b6a <__swsetup_r+0x7a>
 8018b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b46:	b141      	cbz	r1, 8018b5a <__swsetup_r+0x6a>
 8018b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b4c:	4299      	cmp	r1, r3
 8018b4e:	d002      	beq.n	8018b56 <__swsetup_r+0x66>
 8018b50:	4630      	mov	r0, r6
 8018b52:	f7ff fbc5 	bl	80182e0 <_free_r>
 8018b56:	2300      	movs	r3, #0
 8018b58:	6363      	str	r3, [r4, #52]	; 0x34
 8018b5a:	89a3      	ldrh	r3, [r4, #12]
 8018b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018b60:	81a3      	strh	r3, [r4, #12]
 8018b62:	2300      	movs	r3, #0
 8018b64:	6063      	str	r3, [r4, #4]
 8018b66:	6923      	ldr	r3, [r4, #16]
 8018b68:	6023      	str	r3, [r4, #0]
 8018b6a:	89a3      	ldrh	r3, [r4, #12]
 8018b6c:	f043 0308 	orr.w	r3, r3, #8
 8018b70:	81a3      	strh	r3, [r4, #12]
 8018b72:	6923      	ldr	r3, [r4, #16]
 8018b74:	b94b      	cbnz	r3, 8018b8a <__swsetup_r+0x9a>
 8018b76:	89a3      	ldrh	r3, [r4, #12]
 8018b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b80:	d003      	beq.n	8018b8a <__swsetup_r+0x9a>
 8018b82:	4621      	mov	r1, r4
 8018b84:	4630      	mov	r0, r6
 8018b86:	f000 f9bf 	bl	8018f08 <__smakebuf_r>
 8018b8a:	89a2      	ldrh	r2, [r4, #12]
 8018b8c:	f012 0301 	ands.w	r3, r2, #1
 8018b90:	d00c      	beq.n	8018bac <__swsetup_r+0xbc>
 8018b92:	2300      	movs	r3, #0
 8018b94:	60a3      	str	r3, [r4, #8]
 8018b96:	6963      	ldr	r3, [r4, #20]
 8018b98:	425b      	negs	r3, r3
 8018b9a:	61a3      	str	r3, [r4, #24]
 8018b9c:	6923      	ldr	r3, [r4, #16]
 8018b9e:	b953      	cbnz	r3, 8018bb6 <__swsetup_r+0xc6>
 8018ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ba4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018ba8:	d1ba      	bne.n	8018b20 <__swsetup_r+0x30>
 8018baa:	bd70      	pop	{r4, r5, r6, pc}
 8018bac:	0792      	lsls	r2, r2, #30
 8018bae:	bf58      	it	pl
 8018bb0:	6963      	ldrpl	r3, [r4, #20]
 8018bb2:	60a3      	str	r3, [r4, #8]
 8018bb4:	e7f2      	b.n	8018b9c <__swsetup_r+0xac>
 8018bb6:	2000      	movs	r0, #0
 8018bb8:	e7f7      	b.n	8018baa <__swsetup_r+0xba>
 8018bba:	bf00      	nop
 8018bbc:	20000058 	.word	0x20000058
 8018bc0:	0801a89c 	.word	0x0801a89c
 8018bc4:	0801a8bc 	.word	0x0801a8bc
 8018bc8:	0801a87c 	.word	0x0801a87c

08018bcc <__sflush_r>:
 8018bcc:	898a      	ldrh	r2, [r1, #12]
 8018bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bd2:	4605      	mov	r5, r0
 8018bd4:	0710      	lsls	r0, r2, #28
 8018bd6:	460c      	mov	r4, r1
 8018bd8:	d458      	bmi.n	8018c8c <__sflush_r+0xc0>
 8018bda:	684b      	ldr	r3, [r1, #4]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	dc05      	bgt.n	8018bec <__sflush_r+0x20>
 8018be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	dc02      	bgt.n	8018bec <__sflush_r+0x20>
 8018be6:	2000      	movs	r0, #0
 8018be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018bee:	2e00      	cmp	r6, #0
 8018bf0:	d0f9      	beq.n	8018be6 <__sflush_r+0x1a>
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018bf8:	682f      	ldr	r7, [r5, #0]
 8018bfa:	6a21      	ldr	r1, [r4, #32]
 8018bfc:	602b      	str	r3, [r5, #0]
 8018bfe:	d032      	beq.n	8018c66 <__sflush_r+0x9a>
 8018c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018c02:	89a3      	ldrh	r3, [r4, #12]
 8018c04:	075a      	lsls	r2, r3, #29
 8018c06:	d505      	bpl.n	8018c14 <__sflush_r+0x48>
 8018c08:	6863      	ldr	r3, [r4, #4]
 8018c0a:	1ac0      	subs	r0, r0, r3
 8018c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c0e:	b10b      	cbz	r3, 8018c14 <__sflush_r+0x48>
 8018c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c12:	1ac0      	subs	r0, r0, r3
 8018c14:	2300      	movs	r3, #0
 8018c16:	4602      	mov	r2, r0
 8018c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c1a:	6a21      	ldr	r1, [r4, #32]
 8018c1c:	4628      	mov	r0, r5
 8018c1e:	47b0      	blx	r6
 8018c20:	1c43      	adds	r3, r0, #1
 8018c22:	89a3      	ldrh	r3, [r4, #12]
 8018c24:	d106      	bne.n	8018c34 <__sflush_r+0x68>
 8018c26:	6829      	ldr	r1, [r5, #0]
 8018c28:	291d      	cmp	r1, #29
 8018c2a:	d848      	bhi.n	8018cbe <__sflush_r+0xf2>
 8018c2c:	4a29      	ldr	r2, [pc, #164]	; (8018cd4 <__sflush_r+0x108>)
 8018c2e:	40ca      	lsrs	r2, r1
 8018c30:	07d6      	lsls	r6, r2, #31
 8018c32:	d544      	bpl.n	8018cbe <__sflush_r+0xf2>
 8018c34:	2200      	movs	r2, #0
 8018c36:	6062      	str	r2, [r4, #4]
 8018c38:	04d9      	lsls	r1, r3, #19
 8018c3a:	6922      	ldr	r2, [r4, #16]
 8018c3c:	6022      	str	r2, [r4, #0]
 8018c3e:	d504      	bpl.n	8018c4a <__sflush_r+0x7e>
 8018c40:	1c42      	adds	r2, r0, #1
 8018c42:	d101      	bne.n	8018c48 <__sflush_r+0x7c>
 8018c44:	682b      	ldr	r3, [r5, #0]
 8018c46:	b903      	cbnz	r3, 8018c4a <__sflush_r+0x7e>
 8018c48:	6560      	str	r0, [r4, #84]	; 0x54
 8018c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c4c:	602f      	str	r7, [r5, #0]
 8018c4e:	2900      	cmp	r1, #0
 8018c50:	d0c9      	beq.n	8018be6 <__sflush_r+0x1a>
 8018c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c56:	4299      	cmp	r1, r3
 8018c58:	d002      	beq.n	8018c60 <__sflush_r+0x94>
 8018c5a:	4628      	mov	r0, r5
 8018c5c:	f7ff fb40 	bl	80182e0 <_free_r>
 8018c60:	2000      	movs	r0, #0
 8018c62:	6360      	str	r0, [r4, #52]	; 0x34
 8018c64:	e7c0      	b.n	8018be8 <__sflush_r+0x1c>
 8018c66:	2301      	movs	r3, #1
 8018c68:	4628      	mov	r0, r5
 8018c6a:	47b0      	blx	r6
 8018c6c:	1c41      	adds	r1, r0, #1
 8018c6e:	d1c8      	bne.n	8018c02 <__sflush_r+0x36>
 8018c70:	682b      	ldr	r3, [r5, #0]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d0c5      	beq.n	8018c02 <__sflush_r+0x36>
 8018c76:	2b1d      	cmp	r3, #29
 8018c78:	d001      	beq.n	8018c7e <__sflush_r+0xb2>
 8018c7a:	2b16      	cmp	r3, #22
 8018c7c:	d101      	bne.n	8018c82 <__sflush_r+0xb6>
 8018c7e:	602f      	str	r7, [r5, #0]
 8018c80:	e7b1      	b.n	8018be6 <__sflush_r+0x1a>
 8018c82:	89a3      	ldrh	r3, [r4, #12]
 8018c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c88:	81a3      	strh	r3, [r4, #12]
 8018c8a:	e7ad      	b.n	8018be8 <__sflush_r+0x1c>
 8018c8c:	690f      	ldr	r7, [r1, #16]
 8018c8e:	2f00      	cmp	r7, #0
 8018c90:	d0a9      	beq.n	8018be6 <__sflush_r+0x1a>
 8018c92:	0793      	lsls	r3, r2, #30
 8018c94:	680e      	ldr	r6, [r1, #0]
 8018c96:	bf08      	it	eq
 8018c98:	694b      	ldreq	r3, [r1, #20]
 8018c9a:	600f      	str	r7, [r1, #0]
 8018c9c:	bf18      	it	ne
 8018c9e:	2300      	movne	r3, #0
 8018ca0:	eba6 0807 	sub.w	r8, r6, r7
 8018ca4:	608b      	str	r3, [r1, #8]
 8018ca6:	f1b8 0f00 	cmp.w	r8, #0
 8018caa:	dd9c      	ble.n	8018be6 <__sflush_r+0x1a>
 8018cac:	4643      	mov	r3, r8
 8018cae:	463a      	mov	r2, r7
 8018cb0:	6a21      	ldr	r1, [r4, #32]
 8018cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018cb4:	4628      	mov	r0, r5
 8018cb6:	47b0      	blx	r6
 8018cb8:	2800      	cmp	r0, #0
 8018cba:	dc06      	bgt.n	8018cca <__sflush_r+0xfe>
 8018cbc:	89a3      	ldrh	r3, [r4, #12]
 8018cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cc2:	81a3      	strh	r3, [r4, #12]
 8018cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cc8:	e78e      	b.n	8018be8 <__sflush_r+0x1c>
 8018cca:	4407      	add	r7, r0
 8018ccc:	eba8 0800 	sub.w	r8, r8, r0
 8018cd0:	e7e9      	b.n	8018ca6 <__sflush_r+0xda>
 8018cd2:	bf00      	nop
 8018cd4:	20400001 	.word	0x20400001

08018cd8 <_fflush_r>:
 8018cd8:	b538      	push	{r3, r4, r5, lr}
 8018cda:	690b      	ldr	r3, [r1, #16]
 8018cdc:	4605      	mov	r5, r0
 8018cde:	460c      	mov	r4, r1
 8018ce0:	b1db      	cbz	r3, 8018d1a <_fflush_r+0x42>
 8018ce2:	b118      	cbz	r0, 8018cec <_fflush_r+0x14>
 8018ce4:	6983      	ldr	r3, [r0, #24]
 8018ce6:	b90b      	cbnz	r3, 8018cec <_fflush_r+0x14>
 8018ce8:	f000 f860 	bl	8018dac <__sinit>
 8018cec:	4b0c      	ldr	r3, [pc, #48]	; (8018d20 <_fflush_r+0x48>)
 8018cee:	429c      	cmp	r4, r3
 8018cf0:	d109      	bne.n	8018d06 <_fflush_r+0x2e>
 8018cf2:	686c      	ldr	r4, [r5, #4]
 8018cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cf8:	b17b      	cbz	r3, 8018d1a <_fflush_r+0x42>
 8018cfa:	4621      	mov	r1, r4
 8018cfc:	4628      	mov	r0, r5
 8018cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d02:	f7ff bf63 	b.w	8018bcc <__sflush_r>
 8018d06:	4b07      	ldr	r3, [pc, #28]	; (8018d24 <_fflush_r+0x4c>)
 8018d08:	429c      	cmp	r4, r3
 8018d0a:	d101      	bne.n	8018d10 <_fflush_r+0x38>
 8018d0c:	68ac      	ldr	r4, [r5, #8]
 8018d0e:	e7f1      	b.n	8018cf4 <_fflush_r+0x1c>
 8018d10:	4b05      	ldr	r3, [pc, #20]	; (8018d28 <_fflush_r+0x50>)
 8018d12:	429c      	cmp	r4, r3
 8018d14:	bf08      	it	eq
 8018d16:	68ec      	ldreq	r4, [r5, #12]
 8018d18:	e7ec      	b.n	8018cf4 <_fflush_r+0x1c>
 8018d1a:	2000      	movs	r0, #0
 8018d1c:	bd38      	pop	{r3, r4, r5, pc}
 8018d1e:	bf00      	nop
 8018d20:	0801a89c 	.word	0x0801a89c
 8018d24:	0801a8bc 	.word	0x0801a8bc
 8018d28:	0801a87c 	.word	0x0801a87c

08018d2c <std>:
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	b510      	push	{r4, lr}
 8018d30:	4604      	mov	r4, r0
 8018d32:	e9c0 3300 	strd	r3, r3, [r0]
 8018d36:	6083      	str	r3, [r0, #8]
 8018d38:	8181      	strh	r1, [r0, #12]
 8018d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8018d3c:	81c2      	strh	r2, [r0, #14]
 8018d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018d42:	6183      	str	r3, [r0, #24]
 8018d44:	4619      	mov	r1, r3
 8018d46:	2208      	movs	r2, #8
 8018d48:	305c      	adds	r0, #92	; 0x5c
 8018d4a:	f7ff fac1 	bl	80182d0 <memset>
 8018d4e:	4b05      	ldr	r3, [pc, #20]	; (8018d64 <std+0x38>)
 8018d50:	6263      	str	r3, [r4, #36]	; 0x24
 8018d52:	4b05      	ldr	r3, [pc, #20]	; (8018d68 <std+0x3c>)
 8018d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8018d56:	4b05      	ldr	r3, [pc, #20]	; (8018d6c <std+0x40>)
 8018d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018d5a:	4b05      	ldr	r3, [pc, #20]	; (8018d70 <std+0x44>)
 8018d5c:	6224      	str	r4, [r4, #32]
 8018d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8018d60:	bd10      	pop	{r4, pc}
 8018d62:	bf00      	nop
 8018d64:	0801927d 	.word	0x0801927d
 8018d68:	0801929f 	.word	0x0801929f
 8018d6c:	080192d7 	.word	0x080192d7
 8018d70:	080192fb 	.word	0x080192fb

08018d74 <_cleanup_r>:
 8018d74:	4901      	ldr	r1, [pc, #4]	; (8018d7c <_cleanup_r+0x8>)
 8018d76:	f000 b885 	b.w	8018e84 <_fwalk_reent>
 8018d7a:	bf00      	nop
 8018d7c:	08018cd9 	.word	0x08018cd9

08018d80 <__sfmoreglue>:
 8018d80:	b570      	push	{r4, r5, r6, lr}
 8018d82:	1e4a      	subs	r2, r1, #1
 8018d84:	2568      	movs	r5, #104	; 0x68
 8018d86:	4355      	muls	r5, r2
 8018d88:	460e      	mov	r6, r1
 8018d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018d8e:	f7ff faf5 	bl	801837c <_malloc_r>
 8018d92:	4604      	mov	r4, r0
 8018d94:	b140      	cbz	r0, 8018da8 <__sfmoreglue+0x28>
 8018d96:	2100      	movs	r1, #0
 8018d98:	e9c0 1600 	strd	r1, r6, [r0]
 8018d9c:	300c      	adds	r0, #12
 8018d9e:	60a0      	str	r0, [r4, #8]
 8018da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018da4:	f7ff fa94 	bl	80182d0 <memset>
 8018da8:	4620      	mov	r0, r4
 8018daa:	bd70      	pop	{r4, r5, r6, pc}

08018dac <__sinit>:
 8018dac:	6983      	ldr	r3, [r0, #24]
 8018dae:	b510      	push	{r4, lr}
 8018db0:	4604      	mov	r4, r0
 8018db2:	bb33      	cbnz	r3, 8018e02 <__sinit+0x56>
 8018db4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018db8:	6503      	str	r3, [r0, #80]	; 0x50
 8018dba:	4b12      	ldr	r3, [pc, #72]	; (8018e04 <__sinit+0x58>)
 8018dbc:	4a12      	ldr	r2, [pc, #72]	; (8018e08 <__sinit+0x5c>)
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	6282      	str	r2, [r0, #40]	; 0x28
 8018dc2:	4298      	cmp	r0, r3
 8018dc4:	bf04      	itt	eq
 8018dc6:	2301      	moveq	r3, #1
 8018dc8:	6183      	streq	r3, [r0, #24]
 8018dca:	f000 f81f 	bl	8018e0c <__sfp>
 8018dce:	6060      	str	r0, [r4, #4]
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	f000 f81b 	bl	8018e0c <__sfp>
 8018dd6:	60a0      	str	r0, [r4, #8]
 8018dd8:	4620      	mov	r0, r4
 8018dda:	f000 f817 	bl	8018e0c <__sfp>
 8018dde:	2200      	movs	r2, #0
 8018de0:	60e0      	str	r0, [r4, #12]
 8018de2:	2104      	movs	r1, #4
 8018de4:	6860      	ldr	r0, [r4, #4]
 8018de6:	f7ff ffa1 	bl	8018d2c <std>
 8018dea:	2201      	movs	r2, #1
 8018dec:	2109      	movs	r1, #9
 8018dee:	68a0      	ldr	r0, [r4, #8]
 8018df0:	f7ff ff9c 	bl	8018d2c <std>
 8018df4:	2202      	movs	r2, #2
 8018df6:	2112      	movs	r1, #18
 8018df8:	68e0      	ldr	r0, [r4, #12]
 8018dfa:	f7ff ff97 	bl	8018d2c <std>
 8018dfe:	2301      	movs	r3, #1
 8018e00:	61a3      	str	r3, [r4, #24]
 8018e02:	bd10      	pop	{r4, pc}
 8018e04:	0801a844 	.word	0x0801a844
 8018e08:	08018d75 	.word	0x08018d75

08018e0c <__sfp>:
 8018e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e0e:	4b1b      	ldr	r3, [pc, #108]	; (8018e7c <__sfp+0x70>)
 8018e10:	681e      	ldr	r6, [r3, #0]
 8018e12:	69b3      	ldr	r3, [r6, #24]
 8018e14:	4607      	mov	r7, r0
 8018e16:	b913      	cbnz	r3, 8018e1e <__sfp+0x12>
 8018e18:	4630      	mov	r0, r6
 8018e1a:	f7ff ffc7 	bl	8018dac <__sinit>
 8018e1e:	3648      	adds	r6, #72	; 0x48
 8018e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018e24:	3b01      	subs	r3, #1
 8018e26:	d503      	bpl.n	8018e30 <__sfp+0x24>
 8018e28:	6833      	ldr	r3, [r6, #0]
 8018e2a:	b133      	cbz	r3, 8018e3a <__sfp+0x2e>
 8018e2c:	6836      	ldr	r6, [r6, #0]
 8018e2e:	e7f7      	b.n	8018e20 <__sfp+0x14>
 8018e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018e34:	b16d      	cbz	r5, 8018e52 <__sfp+0x46>
 8018e36:	3468      	adds	r4, #104	; 0x68
 8018e38:	e7f4      	b.n	8018e24 <__sfp+0x18>
 8018e3a:	2104      	movs	r1, #4
 8018e3c:	4638      	mov	r0, r7
 8018e3e:	f7ff ff9f 	bl	8018d80 <__sfmoreglue>
 8018e42:	6030      	str	r0, [r6, #0]
 8018e44:	2800      	cmp	r0, #0
 8018e46:	d1f1      	bne.n	8018e2c <__sfp+0x20>
 8018e48:	230c      	movs	r3, #12
 8018e4a:	603b      	str	r3, [r7, #0]
 8018e4c:	4604      	mov	r4, r0
 8018e4e:	4620      	mov	r0, r4
 8018e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e52:	4b0b      	ldr	r3, [pc, #44]	; (8018e80 <__sfp+0x74>)
 8018e54:	6665      	str	r5, [r4, #100]	; 0x64
 8018e56:	e9c4 5500 	strd	r5, r5, [r4]
 8018e5a:	60a5      	str	r5, [r4, #8]
 8018e5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018e60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018e64:	2208      	movs	r2, #8
 8018e66:	4629      	mov	r1, r5
 8018e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018e6c:	f7ff fa30 	bl	80182d0 <memset>
 8018e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018e78:	e7e9      	b.n	8018e4e <__sfp+0x42>
 8018e7a:	bf00      	nop
 8018e7c:	0801a844 	.word	0x0801a844
 8018e80:	ffff0001 	.word	0xffff0001

08018e84 <_fwalk_reent>:
 8018e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e88:	4680      	mov	r8, r0
 8018e8a:	4689      	mov	r9, r1
 8018e8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018e90:	2600      	movs	r6, #0
 8018e92:	b914      	cbnz	r4, 8018e9a <_fwalk_reent+0x16>
 8018e94:	4630      	mov	r0, r6
 8018e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018e9e:	3f01      	subs	r7, #1
 8018ea0:	d501      	bpl.n	8018ea6 <_fwalk_reent+0x22>
 8018ea2:	6824      	ldr	r4, [r4, #0]
 8018ea4:	e7f5      	b.n	8018e92 <_fwalk_reent+0xe>
 8018ea6:	89ab      	ldrh	r3, [r5, #12]
 8018ea8:	2b01      	cmp	r3, #1
 8018eaa:	d907      	bls.n	8018ebc <_fwalk_reent+0x38>
 8018eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018eb0:	3301      	adds	r3, #1
 8018eb2:	d003      	beq.n	8018ebc <_fwalk_reent+0x38>
 8018eb4:	4629      	mov	r1, r5
 8018eb6:	4640      	mov	r0, r8
 8018eb8:	47c8      	blx	r9
 8018eba:	4306      	orrs	r6, r0
 8018ebc:	3568      	adds	r5, #104	; 0x68
 8018ebe:	e7ee      	b.n	8018e9e <_fwalk_reent+0x1a>

08018ec0 <__swhatbuf_r>:
 8018ec0:	b570      	push	{r4, r5, r6, lr}
 8018ec2:	460e      	mov	r6, r1
 8018ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ec8:	2900      	cmp	r1, #0
 8018eca:	b096      	sub	sp, #88	; 0x58
 8018ecc:	4614      	mov	r4, r2
 8018ece:	461d      	mov	r5, r3
 8018ed0:	da07      	bge.n	8018ee2 <__swhatbuf_r+0x22>
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	602b      	str	r3, [r5, #0]
 8018ed6:	89b3      	ldrh	r3, [r6, #12]
 8018ed8:	061a      	lsls	r2, r3, #24
 8018eda:	d410      	bmi.n	8018efe <__swhatbuf_r+0x3e>
 8018edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ee0:	e00e      	b.n	8018f00 <__swhatbuf_r+0x40>
 8018ee2:	466a      	mov	r2, sp
 8018ee4:	f000 fa30 	bl	8019348 <_fstat_r>
 8018ee8:	2800      	cmp	r0, #0
 8018eea:	dbf2      	blt.n	8018ed2 <__swhatbuf_r+0x12>
 8018eec:	9a01      	ldr	r2, [sp, #4]
 8018eee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018ef2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018ef6:	425a      	negs	r2, r3
 8018ef8:	415a      	adcs	r2, r3
 8018efa:	602a      	str	r2, [r5, #0]
 8018efc:	e7ee      	b.n	8018edc <__swhatbuf_r+0x1c>
 8018efe:	2340      	movs	r3, #64	; 0x40
 8018f00:	2000      	movs	r0, #0
 8018f02:	6023      	str	r3, [r4, #0]
 8018f04:	b016      	add	sp, #88	; 0x58
 8018f06:	bd70      	pop	{r4, r5, r6, pc}

08018f08 <__smakebuf_r>:
 8018f08:	898b      	ldrh	r3, [r1, #12]
 8018f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018f0c:	079d      	lsls	r5, r3, #30
 8018f0e:	4606      	mov	r6, r0
 8018f10:	460c      	mov	r4, r1
 8018f12:	d507      	bpl.n	8018f24 <__smakebuf_r+0x1c>
 8018f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018f18:	6023      	str	r3, [r4, #0]
 8018f1a:	6123      	str	r3, [r4, #16]
 8018f1c:	2301      	movs	r3, #1
 8018f1e:	6163      	str	r3, [r4, #20]
 8018f20:	b002      	add	sp, #8
 8018f22:	bd70      	pop	{r4, r5, r6, pc}
 8018f24:	ab01      	add	r3, sp, #4
 8018f26:	466a      	mov	r2, sp
 8018f28:	f7ff ffca 	bl	8018ec0 <__swhatbuf_r>
 8018f2c:	9900      	ldr	r1, [sp, #0]
 8018f2e:	4605      	mov	r5, r0
 8018f30:	4630      	mov	r0, r6
 8018f32:	f7ff fa23 	bl	801837c <_malloc_r>
 8018f36:	b948      	cbnz	r0, 8018f4c <__smakebuf_r+0x44>
 8018f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f3c:	059a      	lsls	r2, r3, #22
 8018f3e:	d4ef      	bmi.n	8018f20 <__smakebuf_r+0x18>
 8018f40:	f023 0303 	bic.w	r3, r3, #3
 8018f44:	f043 0302 	orr.w	r3, r3, #2
 8018f48:	81a3      	strh	r3, [r4, #12]
 8018f4a:	e7e3      	b.n	8018f14 <__smakebuf_r+0xc>
 8018f4c:	4b0d      	ldr	r3, [pc, #52]	; (8018f84 <__smakebuf_r+0x7c>)
 8018f4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8018f50:	89a3      	ldrh	r3, [r4, #12]
 8018f52:	6020      	str	r0, [r4, #0]
 8018f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f58:	81a3      	strh	r3, [r4, #12]
 8018f5a:	9b00      	ldr	r3, [sp, #0]
 8018f5c:	6163      	str	r3, [r4, #20]
 8018f5e:	9b01      	ldr	r3, [sp, #4]
 8018f60:	6120      	str	r0, [r4, #16]
 8018f62:	b15b      	cbz	r3, 8018f7c <__smakebuf_r+0x74>
 8018f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f68:	4630      	mov	r0, r6
 8018f6a:	f000 f9ff 	bl	801936c <_isatty_r>
 8018f6e:	b128      	cbz	r0, 8018f7c <__smakebuf_r+0x74>
 8018f70:	89a3      	ldrh	r3, [r4, #12]
 8018f72:	f023 0303 	bic.w	r3, r3, #3
 8018f76:	f043 0301 	orr.w	r3, r3, #1
 8018f7a:	81a3      	strh	r3, [r4, #12]
 8018f7c:	89a3      	ldrh	r3, [r4, #12]
 8018f7e:	431d      	orrs	r5, r3
 8018f80:	81a5      	strh	r5, [r4, #12]
 8018f82:	e7cd      	b.n	8018f20 <__smakebuf_r+0x18>
 8018f84:	08018d75 	.word	0x08018d75

08018f88 <__malloc_lock>:
 8018f88:	4770      	bx	lr

08018f8a <__malloc_unlock>:
 8018f8a:	4770      	bx	lr

08018f8c <_realloc_r>:
 8018f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f8e:	4607      	mov	r7, r0
 8018f90:	4614      	mov	r4, r2
 8018f92:	460e      	mov	r6, r1
 8018f94:	b921      	cbnz	r1, 8018fa0 <_realloc_r+0x14>
 8018f96:	4611      	mov	r1, r2
 8018f98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018f9c:	f7ff b9ee 	b.w	801837c <_malloc_r>
 8018fa0:	b922      	cbnz	r2, 8018fac <_realloc_r+0x20>
 8018fa2:	f7ff f99d 	bl	80182e0 <_free_r>
 8018fa6:	4625      	mov	r5, r4
 8018fa8:	4628      	mov	r0, r5
 8018faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fac:	f000 fa00 	bl	80193b0 <_malloc_usable_size_r>
 8018fb0:	42a0      	cmp	r0, r4
 8018fb2:	d20f      	bcs.n	8018fd4 <_realloc_r+0x48>
 8018fb4:	4621      	mov	r1, r4
 8018fb6:	4638      	mov	r0, r7
 8018fb8:	f7ff f9e0 	bl	801837c <_malloc_r>
 8018fbc:	4605      	mov	r5, r0
 8018fbe:	2800      	cmp	r0, #0
 8018fc0:	d0f2      	beq.n	8018fa8 <_realloc_r+0x1c>
 8018fc2:	4631      	mov	r1, r6
 8018fc4:	4622      	mov	r2, r4
 8018fc6:	f7ff f95f 	bl	8018288 <memcpy>
 8018fca:	4631      	mov	r1, r6
 8018fcc:	4638      	mov	r0, r7
 8018fce:	f7ff f987 	bl	80182e0 <_free_r>
 8018fd2:	e7e9      	b.n	8018fa8 <_realloc_r+0x1c>
 8018fd4:	4635      	mov	r5, r6
 8018fd6:	e7e7      	b.n	8018fa8 <_realloc_r+0x1c>

08018fd8 <__ssputs_r>:
 8018fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fdc:	688e      	ldr	r6, [r1, #8]
 8018fde:	429e      	cmp	r6, r3
 8018fe0:	4682      	mov	sl, r0
 8018fe2:	460c      	mov	r4, r1
 8018fe4:	4690      	mov	r8, r2
 8018fe6:	4699      	mov	r9, r3
 8018fe8:	d837      	bhi.n	801905a <__ssputs_r+0x82>
 8018fea:	898a      	ldrh	r2, [r1, #12]
 8018fec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018ff0:	d031      	beq.n	8019056 <__ssputs_r+0x7e>
 8018ff2:	6825      	ldr	r5, [r4, #0]
 8018ff4:	6909      	ldr	r1, [r1, #16]
 8018ff6:	1a6f      	subs	r7, r5, r1
 8018ff8:	6965      	ldr	r5, [r4, #20]
 8018ffa:	2302      	movs	r3, #2
 8018ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019000:	fb95 f5f3 	sdiv	r5, r5, r3
 8019004:	f109 0301 	add.w	r3, r9, #1
 8019008:	443b      	add	r3, r7
 801900a:	429d      	cmp	r5, r3
 801900c:	bf38      	it	cc
 801900e:	461d      	movcc	r5, r3
 8019010:	0553      	lsls	r3, r2, #21
 8019012:	d530      	bpl.n	8019076 <__ssputs_r+0x9e>
 8019014:	4629      	mov	r1, r5
 8019016:	f7ff f9b1 	bl	801837c <_malloc_r>
 801901a:	4606      	mov	r6, r0
 801901c:	b950      	cbnz	r0, 8019034 <__ssputs_r+0x5c>
 801901e:	230c      	movs	r3, #12
 8019020:	f8ca 3000 	str.w	r3, [sl]
 8019024:	89a3      	ldrh	r3, [r4, #12]
 8019026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801902a:	81a3      	strh	r3, [r4, #12]
 801902c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019034:	463a      	mov	r2, r7
 8019036:	6921      	ldr	r1, [r4, #16]
 8019038:	f7ff f926 	bl	8018288 <memcpy>
 801903c:	89a3      	ldrh	r3, [r4, #12]
 801903e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019046:	81a3      	strh	r3, [r4, #12]
 8019048:	6126      	str	r6, [r4, #16]
 801904a:	6165      	str	r5, [r4, #20]
 801904c:	443e      	add	r6, r7
 801904e:	1bed      	subs	r5, r5, r7
 8019050:	6026      	str	r6, [r4, #0]
 8019052:	60a5      	str	r5, [r4, #8]
 8019054:	464e      	mov	r6, r9
 8019056:	454e      	cmp	r6, r9
 8019058:	d900      	bls.n	801905c <__ssputs_r+0x84>
 801905a:	464e      	mov	r6, r9
 801905c:	4632      	mov	r2, r6
 801905e:	4641      	mov	r1, r8
 8019060:	6820      	ldr	r0, [r4, #0]
 8019062:	f7ff f91c 	bl	801829e <memmove>
 8019066:	68a3      	ldr	r3, [r4, #8]
 8019068:	1b9b      	subs	r3, r3, r6
 801906a:	60a3      	str	r3, [r4, #8]
 801906c:	6823      	ldr	r3, [r4, #0]
 801906e:	441e      	add	r6, r3
 8019070:	6026      	str	r6, [r4, #0]
 8019072:	2000      	movs	r0, #0
 8019074:	e7dc      	b.n	8019030 <__ssputs_r+0x58>
 8019076:	462a      	mov	r2, r5
 8019078:	f7ff ff88 	bl	8018f8c <_realloc_r>
 801907c:	4606      	mov	r6, r0
 801907e:	2800      	cmp	r0, #0
 8019080:	d1e2      	bne.n	8019048 <__ssputs_r+0x70>
 8019082:	6921      	ldr	r1, [r4, #16]
 8019084:	4650      	mov	r0, sl
 8019086:	f7ff f92b 	bl	80182e0 <_free_r>
 801908a:	e7c8      	b.n	801901e <__ssputs_r+0x46>

0801908c <_svfiprintf_r>:
 801908c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019090:	461d      	mov	r5, r3
 8019092:	898b      	ldrh	r3, [r1, #12]
 8019094:	061f      	lsls	r7, r3, #24
 8019096:	b09d      	sub	sp, #116	; 0x74
 8019098:	4680      	mov	r8, r0
 801909a:	460c      	mov	r4, r1
 801909c:	4616      	mov	r6, r2
 801909e:	d50f      	bpl.n	80190c0 <_svfiprintf_r+0x34>
 80190a0:	690b      	ldr	r3, [r1, #16]
 80190a2:	b96b      	cbnz	r3, 80190c0 <_svfiprintf_r+0x34>
 80190a4:	2140      	movs	r1, #64	; 0x40
 80190a6:	f7ff f969 	bl	801837c <_malloc_r>
 80190aa:	6020      	str	r0, [r4, #0]
 80190ac:	6120      	str	r0, [r4, #16]
 80190ae:	b928      	cbnz	r0, 80190bc <_svfiprintf_r+0x30>
 80190b0:	230c      	movs	r3, #12
 80190b2:	f8c8 3000 	str.w	r3, [r8]
 80190b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190ba:	e0c8      	b.n	801924e <_svfiprintf_r+0x1c2>
 80190bc:	2340      	movs	r3, #64	; 0x40
 80190be:	6163      	str	r3, [r4, #20]
 80190c0:	2300      	movs	r3, #0
 80190c2:	9309      	str	r3, [sp, #36]	; 0x24
 80190c4:	2320      	movs	r3, #32
 80190c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190ca:	2330      	movs	r3, #48	; 0x30
 80190cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190d0:	9503      	str	r5, [sp, #12]
 80190d2:	f04f 0b01 	mov.w	fp, #1
 80190d6:	4637      	mov	r7, r6
 80190d8:	463d      	mov	r5, r7
 80190da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80190de:	b10b      	cbz	r3, 80190e4 <_svfiprintf_r+0x58>
 80190e0:	2b25      	cmp	r3, #37	; 0x25
 80190e2:	d13e      	bne.n	8019162 <_svfiprintf_r+0xd6>
 80190e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80190e8:	d00b      	beq.n	8019102 <_svfiprintf_r+0x76>
 80190ea:	4653      	mov	r3, sl
 80190ec:	4632      	mov	r2, r6
 80190ee:	4621      	mov	r1, r4
 80190f0:	4640      	mov	r0, r8
 80190f2:	f7ff ff71 	bl	8018fd8 <__ssputs_r>
 80190f6:	3001      	adds	r0, #1
 80190f8:	f000 80a4 	beq.w	8019244 <_svfiprintf_r+0x1b8>
 80190fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190fe:	4453      	add	r3, sl
 8019100:	9309      	str	r3, [sp, #36]	; 0x24
 8019102:	783b      	ldrb	r3, [r7, #0]
 8019104:	2b00      	cmp	r3, #0
 8019106:	f000 809d 	beq.w	8019244 <_svfiprintf_r+0x1b8>
 801910a:	2300      	movs	r3, #0
 801910c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019114:	9304      	str	r3, [sp, #16]
 8019116:	9307      	str	r3, [sp, #28]
 8019118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801911c:	931a      	str	r3, [sp, #104]	; 0x68
 801911e:	462f      	mov	r7, r5
 8019120:	2205      	movs	r2, #5
 8019122:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019126:	4850      	ldr	r0, [pc, #320]	; (8019268 <_svfiprintf_r+0x1dc>)
 8019128:	f7e7 f86a 	bl	8000200 <memchr>
 801912c:	9b04      	ldr	r3, [sp, #16]
 801912e:	b9d0      	cbnz	r0, 8019166 <_svfiprintf_r+0xda>
 8019130:	06d9      	lsls	r1, r3, #27
 8019132:	bf44      	itt	mi
 8019134:	2220      	movmi	r2, #32
 8019136:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801913a:	071a      	lsls	r2, r3, #28
 801913c:	bf44      	itt	mi
 801913e:	222b      	movmi	r2, #43	; 0x2b
 8019140:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019144:	782a      	ldrb	r2, [r5, #0]
 8019146:	2a2a      	cmp	r2, #42	; 0x2a
 8019148:	d015      	beq.n	8019176 <_svfiprintf_r+0xea>
 801914a:	9a07      	ldr	r2, [sp, #28]
 801914c:	462f      	mov	r7, r5
 801914e:	2000      	movs	r0, #0
 8019150:	250a      	movs	r5, #10
 8019152:	4639      	mov	r1, r7
 8019154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019158:	3b30      	subs	r3, #48	; 0x30
 801915a:	2b09      	cmp	r3, #9
 801915c:	d94d      	bls.n	80191fa <_svfiprintf_r+0x16e>
 801915e:	b1b8      	cbz	r0, 8019190 <_svfiprintf_r+0x104>
 8019160:	e00f      	b.n	8019182 <_svfiprintf_r+0xf6>
 8019162:	462f      	mov	r7, r5
 8019164:	e7b8      	b.n	80190d8 <_svfiprintf_r+0x4c>
 8019166:	4a40      	ldr	r2, [pc, #256]	; (8019268 <_svfiprintf_r+0x1dc>)
 8019168:	1a80      	subs	r0, r0, r2
 801916a:	fa0b f000 	lsl.w	r0, fp, r0
 801916e:	4318      	orrs	r0, r3
 8019170:	9004      	str	r0, [sp, #16]
 8019172:	463d      	mov	r5, r7
 8019174:	e7d3      	b.n	801911e <_svfiprintf_r+0x92>
 8019176:	9a03      	ldr	r2, [sp, #12]
 8019178:	1d11      	adds	r1, r2, #4
 801917a:	6812      	ldr	r2, [r2, #0]
 801917c:	9103      	str	r1, [sp, #12]
 801917e:	2a00      	cmp	r2, #0
 8019180:	db01      	blt.n	8019186 <_svfiprintf_r+0xfa>
 8019182:	9207      	str	r2, [sp, #28]
 8019184:	e004      	b.n	8019190 <_svfiprintf_r+0x104>
 8019186:	4252      	negs	r2, r2
 8019188:	f043 0302 	orr.w	r3, r3, #2
 801918c:	9207      	str	r2, [sp, #28]
 801918e:	9304      	str	r3, [sp, #16]
 8019190:	783b      	ldrb	r3, [r7, #0]
 8019192:	2b2e      	cmp	r3, #46	; 0x2e
 8019194:	d10c      	bne.n	80191b0 <_svfiprintf_r+0x124>
 8019196:	787b      	ldrb	r3, [r7, #1]
 8019198:	2b2a      	cmp	r3, #42	; 0x2a
 801919a:	d133      	bne.n	8019204 <_svfiprintf_r+0x178>
 801919c:	9b03      	ldr	r3, [sp, #12]
 801919e:	1d1a      	adds	r2, r3, #4
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	9203      	str	r2, [sp, #12]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	bfb8      	it	lt
 80191a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80191ac:	3702      	adds	r7, #2
 80191ae:	9305      	str	r3, [sp, #20]
 80191b0:	4d2e      	ldr	r5, [pc, #184]	; (801926c <_svfiprintf_r+0x1e0>)
 80191b2:	7839      	ldrb	r1, [r7, #0]
 80191b4:	2203      	movs	r2, #3
 80191b6:	4628      	mov	r0, r5
 80191b8:	f7e7 f822 	bl	8000200 <memchr>
 80191bc:	b138      	cbz	r0, 80191ce <_svfiprintf_r+0x142>
 80191be:	2340      	movs	r3, #64	; 0x40
 80191c0:	1b40      	subs	r0, r0, r5
 80191c2:	fa03 f000 	lsl.w	r0, r3, r0
 80191c6:	9b04      	ldr	r3, [sp, #16]
 80191c8:	4303      	orrs	r3, r0
 80191ca:	3701      	adds	r7, #1
 80191cc:	9304      	str	r3, [sp, #16]
 80191ce:	7839      	ldrb	r1, [r7, #0]
 80191d0:	4827      	ldr	r0, [pc, #156]	; (8019270 <_svfiprintf_r+0x1e4>)
 80191d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191d6:	2206      	movs	r2, #6
 80191d8:	1c7e      	adds	r6, r7, #1
 80191da:	f7e7 f811 	bl	8000200 <memchr>
 80191de:	2800      	cmp	r0, #0
 80191e0:	d038      	beq.n	8019254 <_svfiprintf_r+0x1c8>
 80191e2:	4b24      	ldr	r3, [pc, #144]	; (8019274 <_svfiprintf_r+0x1e8>)
 80191e4:	bb13      	cbnz	r3, 801922c <_svfiprintf_r+0x1a0>
 80191e6:	9b03      	ldr	r3, [sp, #12]
 80191e8:	3307      	adds	r3, #7
 80191ea:	f023 0307 	bic.w	r3, r3, #7
 80191ee:	3308      	adds	r3, #8
 80191f0:	9303      	str	r3, [sp, #12]
 80191f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191f4:	444b      	add	r3, r9
 80191f6:	9309      	str	r3, [sp, #36]	; 0x24
 80191f8:	e76d      	b.n	80190d6 <_svfiprintf_r+0x4a>
 80191fa:	fb05 3202 	mla	r2, r5, r2, r3
 80191fe:	2001      	movs	r0, #1
 8019200:	460f      	mov	r7, r1
 8019202:	e7a6      	b.n	8019152 <_svfiprintf_r+0xc6>
 8019204:	2300      	movs	r3, #0
 8019206:	3701      	adds	r7, #1
 8019208:	9305      	str	r3, [sp, #20]
 801920a:	4619      	mov	r1, r3
 801920c:	250a      	movs	r5, #10
 801920e:	4638      	mov	r0, r7
 8019210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019214:	3a30      	subs	r2, #48	; 0x30
 8019216:	2a09      	cmp	r2, #9
 8019218:	d903      	bls.n	8019222 <_svfiprintf_r+0x196>
 801921a:	2b00      	cmp	r3, #0
 801921c:	d0c8      	beq.n	80191b0 <_svfiprintf_r+0x124>
 801921e:	9105      	str	r1, [sp, #20]
 8019220:	e7c6      	b.n	80191b0 <_svfiprintf_r+0x124>
 8019222:	fb05 2101 	mla	r1, r5, r1, r2
 8019226:	2301      	movs	r3, #1
 8019228:	4607      	mov	r7, r0
 801922a:	e7f0      	b.n	801920e <_svfiprintf_r+0x182>
 801922c:	ab03      	add	r3, sp, #12
 801922e:	9300      	str	r3, [sp, #0]
 8019230:	4622      	mov	r2, r4
 8019232:	4b11      	ldr	r3, [pc, #68]	; (8019278 <_svfiprintf_r+0x1ec>)
 8019234:	a904      	add	r1, sp, #16
 8019236:	4640      	mov	r0, r8
 8019238:	f3af 8000 	nop.w
 801923c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8019240:	4681      	mov	r9, r0
 8019242:	d1d6      	bne.n	80191f2 <_svfiprintf_r+0x166>
 8019244:	89a3      	ldrh	r3, [r4, #12]
 8019246:	065b      	lsls	r3, r3, #25
 8019248:	f53f af35 	bmi.w	80190b6 <_svfiprintf_r+0x2a>
 801924c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801924e:	b01d      	add	sp, #116	; 0x74
 8019250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019254:	ab03      	add	r3, sp, #12
 8019256:	9300      	str	r3, [sp, #0]
 8019258:	4622      	mov	r2, r4
 801925a:	4b07      	ldr	r3, [pc, #28]	; (8019278 <_svfiprintf_r+0x1ec>)
 801925c:	a904      	add	r1, sp, #16
 801925e:	4640      	mov	r0, r8
 8019260:	f7ff fa9c 	bl	801879c <_printf_i>
 8019264:	e7ea      	b.n	801923c <_svfiprintf_r+0x1b0>
 8019266:	bf00      	nop
 8019268:	0801a848 	.word	0x0801a848
 801926c:	0801a84e 	.word	0x0801a84e
 8019270:	0801a852 	.word	0x0801a852
 8019274:	00000000 	.word	0x00000000
 8019278:	08018fd9 	.word	0x08018fd9

0801927c <__sread>:
 801927c:	b510      	push	{r4, lr}
 801927e:	460c      	mov	r4, r1
 8019280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019284:	f000 f89c 	bl	80193c0 <_read_r>
 8019288:	2800      	cmp	r0, #0
 801928a:	bfab      	itete	ge
 801928c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801928e:	89a3      	ldrhlt	r3, [r4, #12]
 8019290:	181b      	addge	r3, r3, r0
 8019292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019296:	bfac      	ite	ge
 8019298:	6563      	strge	r3, [r4, #84]	; 0x54
 801929a:	81a3      	strhlt	r3, [r4, #12]
 801929c:	bd10      	pop	{r4, pc}

0801929e <__swrite>:
 801929e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192a2:	461f      	mov	r7, r3
 80192a4:	898b      	ldrh	r3, [r1, #12]
 80192a6:	05db      	lsls	r3, r3, #23
 80192a8:	4605      	mov	r5, r0
 80192aa:	460c      	mov	r4, r1
 80192ac:	4616      	mov	r6, r2
 80192ae:	d505      	bpl.n	80192bc <__swrite+0x1e>
 80192b0:	2302      	movs	r3, #2
 80192b2:	2200      	movs	r2, #0
 80192b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192b8:	f000 f868 	bl	801938c <_lseek_r>
 80192bc:	89a3      	ldrh	r3, [r4, #12]
 80192be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80192c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80192c6:	81a3      	strh	r3, [r4, #12]
 80192c8:	4632      	mov	r2, r6
 80192ca:	463b      	mov	r3, r7
 80192cc:	4628      	mov	r0, r5
 80192ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192d2:	f000 b817 	b.w	8019304 <_write_r>

080192d6 <__sseek>:
 80192d6:	b510      	push	{r4, lr}
 80192d8:	460c      	mov	r4, r1
 80192da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192de:	f000 f855 	bl	801938c <_lseek_r>
 80192e2:	1c43      	adds	r3, r0, #1
 80192e4:	89a3      	ldrh	r3, [r4, #12]
 80192e6:	bf15      	itete	ne
 80192e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80192ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80192ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80192f2:	81a3      	strheq	r3, [r4, #12]
 80192f4:	bf18      	it	ne
 80192f6:	81a3      	strhne	r3, [r4, #12]
 80192f8:	bd10      	pop	{r4, pc}

080192fa <__sclose>:
 80192fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192fe:	f000 b813 	b.w	8019328 <_close_r>
	...

08019304 <_write_r>:
 8019304:	b538      	push	{r3, r4, r5, lr}
 8019306:	4c07      	ldr	r4, [pc, #28]	; (8019324 <_write_r+0x20>)
 8019308:	4605      	mov	r5, r0
 801930a:	4608      	mov	r0, r1
 801930c:	4611      	mov	r1, r2
 801930e:	2200      	movs	r2, #0
 8019310:	6022      	str	r2, [r4, #0]
 8019312:	461a      	mov	r2, r3
 8019314:	f7fe f973 	bl	80175fe <_write>
 8019318:	1c43      	adds	r3, r0, #1
 801931a:	d102      	bne.n	8019322 <_write_r+0x1e>
 801931c:	6823      	ldr	r3, [r4, #0]
 801931e:	b103      	cbz	r3, 8019322 <_write_r+0x1e>
 8019320:	602b      	str	r3, [r5, #0]
 8019322:	bd38      	pop	{r3, r4, r5, pc}
 8019324:	20007910 	.word	0x20007910

08019328 <_close_r>:
 8019328:	b538      	push	{r3, r4, r5, lr}
 801932a:	4c06      	ldr	r4, [pc, #24]	; (8019344 <_close_r+0x1c>)
 801932c:	2300      	movs	r3, #0
 801932e:	4605      	mov	r5, r0
 8019330:	4608      	mov	r0, r1
 8019332:	6023      	str	r3, [r4, #0]
 8019334:	f7fe f97f 	bl	8017636 <_close>
 8019338:	1c43      	adds	r3, r0, #1
 801933a:	d102      	bne.n	8019342 <_close_r+0x1a>
 801933c:	6823      	ldr	r3, [r4, #0]
 801933e:	b103      	cbz	r3, 8019342 <_close_r+0x1a>
 8019340:	602b      	str	r3, [r5, #0]
 8019342:	bd38      	pop	{r3, r4, r5, pc}
 8019344:	20007910 	.word	0x20007910

08019348 <_fstat_r>:
 8019348:	b538      	push	{r3, r4, r5, lr}
 801934a:	4c07      	ldr	r4, [pc, #28]	; (8019368 <_fstat_r+0x20>)
 801934c:	2300      	movs	r3, #0
 801934e:	4605      	mov	r5, r0
 8019350:	4608      	mov	r0, r1
 8019352:	4611      	mov	r1, r2
 8019354:	6023      	str	r3, [r4, #0]
 8019356:	f7fe f97a 	bl	801764e <_fstat>
 801935a:	1c43      	adds	r3, r0, #1
 801935c:	d102      	bne.n	8019364 <_fstat_r+0x1c>
 801935e:	6823      	ldr	r3, [r4, #0]
 8019360:	b103      	cbz	r3, 8019364 <_fstat_r+0x1c>
 8019362:	602b      	str	r3, [r5, #0]
 8019364:	bd38      	pop	{r3, r4, r5, pc}
 8019366:	bf00      	nop
 8019368:	20007910 	.word	0x20007910

0801936c <_isatty_r>:
 801936c:	b538      	push	{r3, r4, r5, lr}
 801936e:	4c06      	ldr	r4, [pc, #24]	; (8019388 <_isatty_r+0x1c>)
 8019370:	2300      	movs	r3, #0
 8019372:	4605      	mov	r5, r0
 8019374:	4608      	mov	r0, r1
 8019376:	6023      	str	r3, [r4, #0]
 8019378:	f7fe f979 	bl	801766e <_isatty>
 801937c:	1c43      	adds	r3, r0, #1
 801937e:	d102      	bne.n	8019386 <_isatty_r+0x1a>
 8019380:	6823      	ldr	r3, [r4, #0]
 8019382:	b103      	cbz	r3, 8019386 <_isatty_r+0x1a>
 8019384:	602b      	str	r3, [r5, #0]
 8019386:	bd38      	pop	{r3, r4, r5, pc}
 8019388:	20007910 	.word	0x20007910

0801938c <_lseek_r>:
 801938c:	b538      	push	{r3, r4, r5, lr}
 801938e:	4c07      	ldr	r4, [pc, #28]	; (80193ac <_lseek_r+0x20>)
 8019390:	4605      	mov	r5, r0
 8019392:	4608      	mov	r0, r1
 8019394:	4611      	mov	r1, r2
 8019396:	2200      	movs	r2, #0
 8019398:	6022      	str	r2, [r4, #0]
 801939a:	461a      	mov	r2, r3
 801939c:	f7fe f972 	bl	8017684 <_lseek>
 80193a0:	1c43      	adds	r3, r0, #1
 80193a2:	d102      	bne.n	80193aa <_lseek_r+0x1e>
 80193a4:	6823      	ldr	r3, [r4, #0]
 80193a6:	b103      	cbz	r3, 80193aa <_lseek_r+0x1e>
 80193a8:	602b      	str	r3, [r5, #0]
 80193aa:	bd38      	pop	{r3, r4, r5, pc}
 80193ac:	20007910 	.word	0x20007910

080193b0 <_malloc_usable_size_r>:
 80193b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80193b4:	1f18      	subs	r0, r3, #4
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	bfbc      	itt	lt
 80193ba:	580b      	ldrlt	r3, [r1, r0]
 80193bc:	18c0      	addlt	r0, r0, r3
 80193be:	4770      	bx	lr

080193c0 <_read_r>:
 80193c0:	b538      	push	{r3, r4, r5, lr}
 80193c2:	4c07      	ldr	r4, [pc, #28]	; (80193e0 <_read_r+0x20>)
 80193c4:	4605      	mov	r5, r0
 80193c6:	4608      	mov	r0, r1
 80193c8:	4611      	mov	r1, r2
 80193ca:	2200      	movs	r2, #0
 80193cc:	6022      	str	r2, [r4, #0]
 80193ce:	461a      	mov	r2, r3
 80193d0:	f7fe f8f8 	bl	80175c4 <_read>
 80193d4:	1c43      	adds	r3, r0, #1
 80193d6:	d102      	bne.n	80193de <_read_r+0x1e>
 80193d8:	6823      	ldr	r3, [r4, #0]
 80193da:	b103      	cbz	r3, 80193de <_read_r+0x1e>
 80193dc:	602b      	str	r3, [r5, #0]
 80193de:	bd38      	pop	{r3, r4, r5, pc}
 80193e0:	20007910 	.word	0x20007910

080193e4 <_init>:
 80193e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193e6:	bf00      	nop
 80193e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193ea:	bc08      	pop	{r3}
 80193ec:	469e      	mov	lr, r3
 80193ee:	4770      	bx	lr

080193f0 <_fini>:
 80193f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193f2:	bf00      	nop
 80193f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193f6:	bc08      	pop	{r3}
 80193f8:	469e      	mov	lr, r3
 80193fa:	4770      	bx	lr
